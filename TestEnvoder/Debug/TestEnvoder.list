
TestEnvoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009228  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009400  08009400  0000a400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009440  08009440  0000b030  2**0
                  CONTENTS
  4 .ARM          00000008  08009440  08009440  0000a440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009448  08009448  0000b030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009448  08009448  0000a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800944c  0800944c  0000a44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08009450  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  20000030  08009480  0000b030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  08009480  0000b664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001811c  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aad  00000000  00000000  0002317c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00025c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010cc  00000000  00000000  00027198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b8d  00000000  00000000  00028264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018916  00000000  00000000  0004fdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f404  00000000  00000000  00068707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e50  00000000  00000000  00177b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0017d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080093e8 	.word	0x080093e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	080093e8 	.word	0x080093e8

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b96a 	b.w	8000b70 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	460c      	mov	r4, r1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d14e      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c0:	4694      	mov	ip, r2
 80008c2:	458c      	cmp	ip, r1
 80008c4:	4686      	mov	lr, r0
 80008c6:	fab2 f282 	clz	r2, r2
 80008ca:	d962      	bls.n	8000992 <__udivmoddi4+0xde>
 80008cc:	b14a      	cbz	r2, 80008e2 <__udivmoddi4+0x2e>
 80008ce:	f1c2 0320 	rsb	r3, r2, #32
 80008d2:	4091      	lsls	r1, r2
 80008d4:	fa20 f303 	lsr.w	r3, r0, r3
 80008d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008dc:	4319      	orrs	r1, r3
 80008de:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e6:	fa1f f68c 	uxth.w	r6, ip
 80008ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb07 1114 	mls	r1, r7, r4, r1
 80008f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fa:	fb04 f106 	mul.w	r1, r4, r6
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f104 30ff 	add.w	r0, r4, #4294967295
 800090a:	f080 8112 	bcs.w	8000b32 <__udivmoddi4+0x27e>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 810f 	bls.w	8000b32 <__udivmoddi4+0x27e>
 8000914:	3c02      	subs	r4, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a59      	subs	r1, r3, r1
 800091a:	fa1f f38e 	uxth.w	r3, lr
 800091e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000922:	fb07 1110 	mls	r1, r7, r0, r1
 8000926:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800092a:	fb00 f606 	mul.w	r6, r0, r6
 800092e:	429e      	cmp	r6, r3
 8000930:	d90a      	bls.n	8000948 <__udivmoddi4+0x94>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f100 31ff 	add.w	r1, r0, #4294967295
 800093a:	f080 80fc 	bcs.w	8000b36 <__udivmoddi4+0x282>
 800093e:	429e      	cmp	r6, r3
 8000940:	f240 80f9 	bls.w	8000b36 <__udivmoddi4+0x282>
 8000944:	4463      	add	r3, ip
 8000946:	3802      	subs	r0, #2
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800094e:	2100      	movs	r1, #0
 8000950:	b11d      	cbz	r5, 800095a <__udivmoddi4+0xa6>
 8000952:	40d3      	lsrs	r3, r2
 8000954:	2200      	movs	r2, #0
 8000956:	e9c5 3200 	strd	r3, r2, [r5]
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d905      	bls.n	800096e <__udivmoddi4+0xba>
 8000962:	b10d      	cbz	r5, 8000968 <__udivmoddi4+0xb4>
 8000964:	e9c5 0100 	strd	r0, r1, [r5]
 8000968:	2100      	movs	r1, #0
 800096a:	4608      	mov	r0, r1
 800096c:	e7f5      	b.n	800095a <__udivmoddi4+0xa6>
 800096e:	fab3 f183 	clz	r1, r3
 8000972:	2900      	cmp	r1, #0
 8000974:	d146      	bne.n	8000a04 <__udivmoddi4+0x150>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xcc>
 800097a:	4290      	cmp	r0, r2
 800097c:	f0c0 80f0 	bcc.w	8000b60 <__udivmoddi4+0x2ac>
 8000980:	1a86      	subs	r6, r0, r2
 8000982:	eb64 0303 	sbc.w	r3, r4, r3
 8000986:	2001      	movs	r0, #1
 8000988:	2d00      	cmp	r5, #0
 800098a:	d0e6      	beq.n	800095a <__udivmoddi4+0xa6>
 800098c:	e9c5 6300 	strd	r6, r3, [r5]
 8000990:	e7e3      	b.n	800095a <__udivmoddi4+0xa6>
 8000992:	2a00      	cmp	r2, #0
 8000994:	f040 8090 	bne.w	8000ab8 <__udivmoddi4+0x204>
 8000998:	eba1 040c 	sub.w	r4, r1, ip
 800099c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a0:	fa1f f78c 	uxth.w	r7, ip
 80009a4:	2101      	movs	r1, #1
 80009a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80009aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ae:	fb08 4416 	mls	r4, r8, r6, r4
 80009b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009b6:	fb07 f006 	mul.w	r0, r7, r6
 80009ba:	4298      	cmp	r0, r3
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x11c>
 80009be:	eb1c 0303 	adds.w	r3, ip, r3
 80009c2:	f106 34ff 	add.w	r4, r6, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x11a>
 80009c8:	4298      	cmp	r0, r3
 80009ca:	f200 80cd 	bhi.w	8000b68 <__udivmoddi4+0x2b4>
 80009ce:	4626      	mov	r6, r4
 80009d0:	1a1c      	subs	r4, r3, r0
 80009d2:	fa1f f38e 	uxth.w	r3, lr
 80009d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009da:	fb08 4410 	mls	r4, r8, r0, r4
 80009de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009e2:	fb00 f707 	mul.w	r7, r0, r7
 80009e6:	429f      	cmp	r7, r3
 80009e8:	d908      	bls.n	80009fc <__udivmoddi4+0x148>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f100 34ff 	add.w	r4, r0, #4294967295
 80009f2:	d202      	bcs.n	80009fa <__udivmoddi4+0x146>
 80009f4:	429f      	cmp	r7, r3
 80009f6:	f200 80b0 	bhi.w	8000b5a <__udivmoddi4+0x2a6>
 80009fa:	4620      	mov	r0, r4
 80009fc:	1bdb      	subs	r3, r3, r7
 80009fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a02:	e7a5      	b.n	8000950 <__udivmoddi4+0x9c>
 8000a04:	f1c1 0620 	rsb	r6, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a0e:	431f      	orrs	r7, r3
 8000a10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a14:	fa04 f301 	lsl.w	r3, r4, r1
 8000a18:	ea43 030c 	orr.w	r3, r3, ip
 8000a1c:	40f4      	lsrs	r4, r6
 8000a1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a22:	0c38      	lsrs	r0, r7, #16
 8000a24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a28:	fbb4 fef0 	udiv	lr, r4, r0
 8000a2c:	fa1f fc87 	uxth.w	ip, r7
 8000a30:	fb00 441e 	mls	r4, r0, lr, r4
 8000a34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a38:	fb0e f90c 	mul.w	r9, lr, ip
 8000a3c:	45a1      	cmp	r9, r4
 8000a3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a42:	d90a      	bls.n	8000a5a <__udivmoddi4+0x1a6>
 8000a44:	193c      	adds	r4, r7, r4
 8000a46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a4a:	f080 8084 	bcs.w	8000b56 <__udivmoddi4+0x2a2>
 8000a4e:	45a1      	cmp	r9, r4
 8000a50:	f240 8081 	bls.w	8000b56 <__udivmoddi4+0x2a2>
 8000a54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a58:	443c      	add	r4, r7
 8000a5a:	eba4 0409 	sub.w	r4, r4, r9
 8000a5e:	fa1f f983 	uxth.w	r9, r3
 8000a62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a66:	fb00 4413 	mls	r4, r0, r3, r4
 8000a6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a72:	45a4      	cmp	ip, r4
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x1d2>
 8000a76:	193c      	adds	r4, r7, r4
 8000a78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a7c:	d267      	bcs.n	8000b4e <__udivmoddi4+0x29a>
 8000a7e:	45a4      	cmp	ip, r4
 8000a80:	d965      	bls.n	8000b4e <__udivmoddi4+0x29a>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	443c      	add	r4, r7
 8000a86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	429c      	cmp	r4, r3
 8000a94:	46ce      	mov	lr, r9
 8000a96:	469c      	mov	ip, r3
 8000a98:	d351      	bcc.n	8000b3e <__udivmoddi4+0x28a>
 8000a9a:	d04e      	beq.n	8000b3a <__udivmoddi4+0x286>
 8000a9c:	b155      	cbz	r5, 8000ab4 <__udivmoddi4+0x200>
 8000a9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000aa2:	eb64 040c 	sbc.w	r4, r4, ip
 8000aa6:	fa04 f606 	lsl.w	r6, r4, r6
 8000aaa:	40cb      	lsrs	r3, r1
 8000aac:	431e      	orrs	r6, r3
 8000aae:	40cc      	lsrs	r4, r1
 8000ab0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	e750      	b.n	800095a <__udivmoddi4+0xa6>
 8000ab8:	f1c2 0320 	rsb	r3, r2, #32
 8000abc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	430c      	orrs	r4, r1
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ad4:	fa1f f78c 	uxth.w	r7, ip
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae0:	0c23      	lsrs	r3, r4, #16
 8000ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae6:	fb00 f107 	mul.w	r1, r0, r7
 8000aea:	4299      	cmp	r1, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x24c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000af6:	d22c      	bcs.n	8000b52 <__udivmoddi4+0x29e>
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d92a      	bls.n	8000b52 <__udivmoddi4+0x29e>
 8000afc:	3802      	subs	r0, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b08:	fb08 3311 	mls	r3, r8, r1, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb01 f307 	mul.w	r3, r1, r7
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x276>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b20:	d213      	bcs.n	8000b4a <__udivmoddi4+0x296>
 8000b22:	42a3      	cmp	r3, r4
 8000b24:	d911      	bls.n	8000b4a <__udivmoddi4+0x296>
 8000b26:	3902      	subs	r1, #2
 8000b28:	4464      	add	r4, ip
 8000b2a:	1ae4      	subs	r4, r4, r3
 8000b2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b30:	e739      	b.n	80009a6 <__udivmoddi4+0xf2>
 8000b32:	4604      	mov	r4, r0
 8000b34:	e6f0      	b.n	8000918 <__udivmoddi4+0x64>
 8000b36:	4608      	mov	r0, r1
 8000b38:	e706      	b.n	8000948 <__udivmoddi4+0x94>
 8000b3a:	45c8      	cmp	r8, r9
 8000b3c:	d2ae      	bcs.n	8000a9c <__udivmoddi4+0x1e8>
 8000b3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b46:	3801      	subs	r0, #1
 8000b48:	e7a8      	b.n	8000a9c <__udivmoddi4+0x1e8>
 8000b4a:	4631      	mov	r1, r6
 8000b4c:	e7ed      	b.n	8000b2a <__udivmoddi4+0x276>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	e799      	b.n	8000a86 <__udivmoddi4+0x1d2>
 8000b52:	4630      	mov	r0, r6
 8000b54:	e7d4      	b.n	8000b00 <__udivmoddi4+0x24c>
 8000b56:	46d6      	mov	lr, sl
 8000b58:	e77f      	b.n	8000a5a <__udivmoddi4+0x1a6>
 8000b5a:	4463      	add	r3, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	e74d      	b.n	80009fc <__udivmoddi4+0x148>
 8000b60:	4606      	mov	r6, r0
 8000b62:	4623      	mov	r3, r4
 8000b64:	4608      	mov	r0, r1
 8000b66:	e70f      	b.n	8000988 <__udivmoddi4+0xd4>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	e730      	b.n	80009d0 <__udivmoddi4+0x11c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7a:	f003 fa30 	bl	8003fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7e:	f000 fbdd 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b82:	f001 f8c3 	bl	8001d0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b86:	f001 f897 	bl	8001cb8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000b8a:	f000 fcab 	bl	80014e4 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000b8e:	f000 fd41 	bl	8001614 <MX_TIM3_Init>
  MX_ADC3_Init();
 8000b92:	f000 fc1f 	bl	80013d4 <MX_ADC3_Init>
  MX_TIM4_Init();
 8000b96:	f000 fd93 	bl	80016c0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b9a:	f000 fde7 	bl	800176c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000b9e:	f000 fe33 	bl	8001808 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000ba2:	f000 fe8b 	bl	80018bc <MX_TIM15_Init>
  MX_TIM16_Init();
 8000ba6:	f000 ff39 	bl	8001a1c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000baa:	f000 ffb1 	bl	8001b10 <MX_TIM17_Init>
  MX_TIM20_Init();
 8000bae:	f001 f829 	bl	8001c04 <MX_TIM20_Init>
  MX_TIM2_Init();
 8000bb2:	f000 fce1 	bl	8001578 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000bb6:	213c      	movs	r1, #60	@ 0x3c
 8000bb8:	48a6      	ldr	r0, [pc, #664]	@ (8000e54 <main+0x2e0>)
 8000bba:	f006 fb3b 	bl	8007234 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000bbe:	213c      	movs	r1, #60	@ 0x3c
 8000bc0:	48a5      	ldr	r0, [pc, #660]	@ (8000e58 <main+0x2e4>)
 8000bc2:	f006 fb37 	bl	8007234 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8000bc6:	213c      	movs	r1, #60	@ 0x3c
 8000bc8:	48a4      	ldr	r0, [pc, #656]	@ (8000e5c <main+0x2e8>)
 8000bca:	f006 fb33 	bl	8007234 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim20,TIM_CHANNEL_ALL);
 8000bce:	213c      	movs	r1, #60	@ 0x3c
 8000bd0:	48a3      	ldr	r0, [pc, #652]	@ (8000e60 <main+0x2ec>)
 8000bd2:	f006 fb2f 	bl	8007234 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	48a2      	ldr	r0, [pc, #648]	@ (8000e64 <main+0x2f0>)
 8000bda:	f006 f973 	bl	8006ec4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000bde:	2104      	movs	r1, #4
 8000be0:	48a0      	ldr	r0, [pc, #640]	@ (8000e64 <main+0x2f0>)
 8000be2:	f006 f96f 	bl	8006ec4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000be6:	2100      	movs	r1, #0
 8000be8:	489f      	ldr	r0, [pc, #636]	@ (8000e68 <main+0x2f4>)
 8000bea:	f006 f96b 	bl	8006ec4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	489e      	ldr	r0, [pc, #632]	@ (8000e6c <main+0x2f8>)
 8000bf2:	f006 f967 	bl	8006ec4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8000bf6:	489e      	ldr	r0, [pc, #632]	@ (8000e70 <main+0x2fc>)
 8000bf8:	f006 f88a 	bl	8006d10 <HAL_TIM_Base_Start_IT>
//  Poscontrol.kp = 1;
//  Poscontrol.ki = 0;
//  Poscontrol.kd = 0;
//  Poscontrol.T = 0.0001;

  Velocontrol.kp = 0.02;
 8000bfc:	4b9d      	ldr	r3, [pc, #628]	@ (8000e74 <main+0x300>)
 8000bfe:	4a9e      	ldr	r2, [pc, #632]	@ (8000e78 <main+0x304>)
 8000c00:	619a      	str	r2, [r3, #24]
  Velocontrol.ki = 0.061;
 8000c02:	4b9c      	ldr	r3, [pc, #624]	@ (8000e74 <main+0x300>)
 8000c04:	4a9d      	ldr	r2, [pc, #628]	@ (8000e7c <main+0x308>)
 8000c06:	61da      	str	r2, [r3, #28]
  Velocontrol.kd = 0;
 8000c08:	4b9a      	ldr	r3, [pc, #616]	@ (8000e74 <main+0x300>)
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  Velocontrol.T = 0.0001;
 8000c10:	4b98      	ldr	r3, [pc, #608]	@ (8000e74 <main+0x300>)
 8000c12:	4a9b      	ldr	r2, [pc, #620]	@ (8000e80 <main+0x30c>)
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24

  Velocontrol2.kp = 0.02;
 8000c16:	4b9b      	ldr	r3, [pc, #620]	@ (8000e84 <main+0x310>)
 8000c18:	4a97      	ldr	r2, [pc, #604]	@ (8000e78 <main+0x304>)
 8000c1a:	619a      	str	r2, [r3, #24]
  Velocontrol2.ki = 0.061;
 8000c1c:	4b99      	ldr	r3, [pc, #612]	@ (8000e84 <main+0x310>)
 8000c1e:	4a97      	ldr	r2, [pc, #604]	@ (8000e7c <main+0x308>)
 8000c20:	61da      	str	r2, [r3, #28]
  Velocontrol2.kd = 0;
 8000c22:	4b98      	ldr	r3, [pc, #608]	@ (8000e84 <main+0x310>)
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  Velocontrol2.T = 0.0001;
 8000c2a:	4b96      	ldr	r3, [pc, #600]	@ (8000e84 <main+0x310>)
 8000c2c:	4a94      	ldr	r2, [pc, #592]	@ (8000e80 <main+0x30c>)
 8000c2e:	625a      	str	r2, [r3, #36]	@ 0x24

  Velocontrol3.kp = 0.02;
 8000c30:	4b95      	ldr	r3, [pc, #596]	@ (8000e88 <main+0x314>)
 8000c32:	4a91      	ldr	r2, [pc, #580]	@ (8000e78 <main+0x304>)
 8000c34:	619a      	str	r2, [r3, #24]
  Velocontrol3.ki = 0.061;
 8000c36:	4b94      	ldr	r3, [pc, #592]	@ (8000e88 <main+0x314>)
 8000c38:	4a90      	ldr	r2, [pc, #576]	@ (8000e7c <main+0x308>)
 8000c3a:	61da      	str	r2, [r3, #28]
  Velocontrol3.kd = 0;
 8000c3c:	4b92      	ldr	r3, [pc, #584]	@ (8000e88 <main+0x314>)
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  Velocontrol3.T = 0.0001;
 8000c44:	4b90      	ldr	r3, [pc, #576]	@ (8000e88 <main+0x314>)
 8000c46:	4a8e      	ldr	r2, [pc, #568]	@ (8000e80 <main+0x30c>)
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24

  Velocontrol4.kp = 0.02;
 8000c4a:	4b90      	ldr	r3, [pc, #576]	@ (8000e8c <main+0x318>)
 8000c4c:	4a8a      	ldr	r2, [pc, #552]	@ (8000e78 <main+0x304>)
 8000c4e:	619a      	str	r2, [r3, #24]
  Velocontrol4.ki = 0.061;
 8000c50:	4b8e      	ldr	r3, [pc, #568]	@ (8000e8c <main+0x318>)
 8000c52:	4a8a      	ldr	r2, [pc, #552]	@ (8000e7c <main+0x308>)
 8000c54:	61da      	str	r2, [r3, #28]
  Velocontrol4.kd = 0;
 8000c56:	4b8d      	ldr	r3, [pc, #564]	@ (8000e8c <main+0x318>)
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  Velocontrol4.T = 0.0001;
 8000c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8000e8c <main+0x318>)
 8000c60:	4a87      	ldr	r2, [pc, #540]	@ (8000e80 <main+0x30c>)
 8000c62:	625a      	str	r2, [r3, #36]	@ 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SwitchRead();
 8000c64:	f001 f950 	bl	8001f08 <SwitchRead>
	  ProximityRead();
 8000c68:	f001 f96a 	bl	8001f40 <ProximityRead>
	  EncoderRead();
 8000c6c:	f001 fb24 	bl	80022b8 <EncoderRead>
	  calculateWheelSpeeds(v_x, v_y, Robot_omega, wheel_speeds);
 8000c70:	4b87      	ldr	r3, [pc, #540]	@ (8000e90 <main+0x31c>)
 8000c72:	edd3 7a00 	vldr	s15, [r3]
 8000c76:	4b87      	ldr	r3, [pc, #540]	@ (8000e94 <main+0x320>)
 8000c78:	ed93 7a00 	vldr	s14, [r3]
 8000c7c:	4b86      	ldr	r3, [pc, #536]	@ (8000e98 <main+0x324>)
 8000c7e:	edd3 6a00 	vldr	s13, [r3]
 8000c82:	4886      	ldr	r0, [pc, #536]	@ (8000e9c <main+0x328>)
 8000c84:	eeb0 1a66 	vmov.f32	s2, s13
 8000c88:	eef0 0a47 	vmov.f32	s1, s14
 8000c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c90:	f001 fb3a 	bl	8002308 <calculateWheelSpeeds>
	  static uint64_t timestamp =0;
	  int64_t currentTime = micros();
 8000c94:	f001 fbec 	bl	8002470 <micros>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTime > timestamp)
 8000ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ca4:	497e      	ldr	r1, [pc, #504]	@ (8000ea0 <main+0x32c>)
 8000ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000caa:	4290      	cmp	r0, r2
 8000cac:	eb71 0303 	sbcs.w	r3, r1, r3
 8000cb0:	d20c      	bcs.n	8000ccc <main+0x158>
	  {
	  timestamp =currentTime + 1000;//us
 8000cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cb6:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8000cba:	f143 0500 	adc.w	r5, r3, #0
 8000cbe:	4622      	mov	r2, r4
 8000cc0:	462b      	mov	r3, r5
 8000cc2:	4977      	ldr	r1, [pc, #476]	@ (8000ea0 <main+0x32c>)
 8000cc4:	e9c1 2300 	strd	r2, r3, [r1]
	  QEIEncoderPosVel_Update();
 8000cc8:	f001 fbee 	bl	80024a8 <QEIEncoderPosVel_Update>
	  }
//	  PIDposition();
	  if(Switch[0] == 0 && Switch[1] == 1)
 8000ccc:	4b75      	ldr	r3, [pc, #468]	@ (8000ea4 <main+0x330>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d117      	bne.n	8000d04 <main+0x190>
 8000cd4:	4b73      	ldr	r3, [pc, #460]	@ (8000ea4 <main+0x330>)
 8000cd6:	885b      	ldrh	r3, [r3, #2]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d113      	bne.n	8000d04 <main+0x190>
	  {
	  MotorBigBrush(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f001 fad1 	bl	8002284 <MotorBigBrush>
	  MotorBrush(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f001 fab4 	bl	8002250 <MotorBrush>
	  v_x = 0.2;
 8000ce8:	4b69      	ldr	r3, [pc, #420]	@ (8000e90 <main+0x31c>)
 8000cea:	4a6f      	ldr	r2, [pc, #444]	@ (8000ea8 <main+0x334>)
 8000cec:	601a      	str	r2, [r3, #0]
		v_y = 0.0;
 8000cee:	4b69      	ldr	r3, [pc, #420]	@ (8000e94 <main+0x320>)
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
		Robot_omega = 0.0;
 8000cf6:	4b68      	ldr	r3, [pc, #416]	@ (8000e98 <main+0x324>)
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
		motorMove();
 8000cfe:	f001 fa81 	bl	8002204 <motorMove>
 8000d02:	e2f4      	b.n	80012ee <main+0x77a>
	  }
	  else if(Switch[0] == 1 && Switch[1] == 0)
 8000d04:	4b67      	ldr	r3, [pc, #412]	@ (8000ea4 <main+0x330>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	f040 82da 	bne.w	80012c2 <main+0x74e>
 8000d0e:	4b65      	ldr	r3, [pc, #404]	@ (8000ea4 <main+0x330>)
 8000d10:	885b      	ldrh	r3, [r3, #2]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 82d5 	bne.w	80012c2 <main+0x74e>
	  {
//		PIDmotor1(testSpeed);
//		PIDmotor2(testSpeed);
//		PIDmotor3(testSpeed);
//		PIDmotor4(testSpeed);
		  switch (state_ALL)
 8000d18:	4b64      	ldr	r3, [pc, #400]	@ (8000eac <main+0x338>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	f000 8271 	beq.w	8001204 <main+0x690>
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	f300 8292 	bgt.w	800124c <main+0x6d8>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <main+0x1be>
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d07a      	beq.n	8000e26 <main+0x2b2>
 8000d30:	e28c      	b.n	800124c <main+0x6d8>
		  {
		  	  case 0://FindStartPos
		  		  switch (state_Check)
 8000d32:	4b5f      	ldr	r3, [pc, #380]	@ (8000eb0 <main+0x33c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <main+0x1cc>
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d037      	beq.n	8000dae <main+0x23a>
							  nonBlockingDelay(10000, 0, 0, 0);

						  }
						  break;
		  		  }
		  		  break;
 8000d3e:	e285      	b.n	800124c <main+0x6d8>
		  		  		  base_X = 0.0;
 8000d40:	4b5c      	ldr	r3, [pc, #368]	@ (8000eb4 <main+0x340>)
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
		  		  		  base_Y = baseSpeed;
 8000d48:	4b5b      	ldr	r3, [pc, #364]	@ (8000eb8 <main+0x344>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a5b      	ldr	r2, [pc, #364]	@ (8000ebc <main+0x348>)
 8000d4e:	6013      	str	r3, [r2, #0]
		  		  		  base_Omega = 0.0;
 8000d50:	4b5b      	ldr	r3, [pc, #364]	@ (8000ec0 <main+0x34c>)
 8000d52:	f04f 0200 	mov.w	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
		  		  		  if(Proximity[0] == sensorThick && Proximity[7] == sensorThick)
 8000d58:	4b5a      	ldr	r3, [pc, #360]	@ (8000ec4 <main+0x350>)
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ec8 <main+0x354>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d11c      	bne.n	8000d9e <main+0x22a>
 8000d64:	4b57      	ldr	r3, [pc, #348]	@ (8000ec4 <main+0x350>)
 8000d66:	79da      	ldrb	r2, [r3, #7]
 8000d68:	4b57      	ldr	r3, [pc, #348]	@ (8000ec8 <main+0x354>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d116      	bne.n	8000d9e <main+0x22a>
		  		  			delayCount = 0;
 8000d70:	4b56      	ldr	r3, [pc, #344]	@ (8000ecc <main+0x358>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	801a      	strh	r2, [r3, #0]
							state_Check = 1;
 8000d76:	4b4e      	ldr	r3, [pc, #312]	@ (8000eb0 <main+0x33c>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
							state_ALL = 1;
 8000d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8000eac <main+0x338>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
							path = 1;
 8000d82:	4b53      	ldr	r3, [pc, #332]	@ (8000ed0 <main+0x35c>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
							n = 0;
 8000d88:	4b52      	ldr	r3, [pc, #328]	@ (8000ed4 <main+0x360>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
							state_Clean = path1[n];
 8000d8e:	4b51      	ldr	r3, [pc, #324]	@ (8000ed4 <main+0x360>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b50      	ldr	r3, [pc, #320]	@ (8000ed8 <main+0x364>)
 8000d96:	5c9a      	ldrb	r2, [r3, r2]
 8000d98:	4b50      	ldr	r3, [pc, #320]	@ (8000edc <main+0x368>)
 8000d9a:	701a      	strb	r2, [r3, #0]
		  		  		  break;
 8000d9c:	e042      	b.n	8000e24 <main+0x2b0>
		  		  			nonBlockingDelay(10000, 0, 1, 0);
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2201      	movs	r2, #1
 8000da2:	2100      	movs	r1, #0
 8000da4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000da8:	f002 fd24 	bl	80037f4 <nonBlockingDelay>
		  		  		  break;
 8000dac:	e03a      	b.n	8000e24 <main+0x2b0>
		  		  		  base_X = 0.0;
 8000dae:	4b41      	ldr	r3, [pc, #260]	@ (8000eb4 <main+0x340>)
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
		  		  		  base_Y = -baseSpeed;
 8000db6:	4b40      	ldr	r3, [pc, #256]	@ (8000eb8 <main+0x344>)
 8000db8:	edd3 7a00 	vldr	s15, [r3]
 8000dbc:	eef1 7a67 	vneg.f32	s15, s15
 8000dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ebc <main+0x348>)
 8000dc2:	edc3 7a00 	vstr	s15, [r3]
						  base_Omega = 0.0;
 8000dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec0 <main+0x34c>)
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
						  if(Proximity[3] == sensorThick && Proximity[4] == sensorThick)
 8000dce:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec4 <main+0x350>)
 8000dd0:	78da      	ldrb	r2, [r3, #3]
 8000dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec8 <main+0x354>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d11c      	bne.n	8000e14 <main+0x2a0>
 8000dda:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec4 <main+0x350>)
 8000ddc:	791a      	ldrb	r2, [r3, #4]
 8000dde:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec8 <main+0x354>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d116      	bne.n	8000e14 <main+0x2a0>
							  delayCount = 0;
 8000de6:	4b39      	ldr	r3, [pc, #228]	@ (8000ecc <main+0x358>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	801a      	strh	r2, [r3, #0]
							  state_Check = 0;
 8000dec:	4b30      	ldr	r3, [pc, #192]	@ (8000eb0 <main+0x33c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
							  state_ALL = 1;
 8000df2:	4b2e      	ldr	r3, [pc, #184]	@ (8000eac <main+0x338>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
							  path = 2;
 8000df8:	4b35      	ldr	r3, [pc, #212]	@ (8000ed0 <main+0x35c>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
							  n = 0;
 8000dfe:	4b35      	ldr	r3, [pc, #212]	@ (8000ed4 <main+0x360>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
							  state_Clean = path2[n];
 8000e04:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <main+0x360>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b35      	ldr	r3, [pc, #212]	@ (8000ee0 <main+0x36c>)
 8000e0c:	5c9a      	ldrb	r2, [r3, r2]
 8000e0e:	4b33      	ldr	r3, [pc, #204]	@ (8000edc <main+0x368>)
 8000e10:	701a      	strb	r2, [r3, #0]
						  break;
 8000e12:	e006      	b.n	8000e22 <main+0x2ae>
							  nonBlockingDelay(10000, 0, 0, 0);
 8000e14:	2300      	movs	r3, #0
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e1e:	f002 fce9 	bl	80037f4 <nonBlockingDelay>
						  break;
 8000e22:	bf00      	nop
		  		  break;
 8000e24:	e212      	b.n	800124c <main+0x6d8>
		  	  case 1://Clean
		  		  switch(state_Clean)
 8000e26:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <main+0x368>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	f200 820d 	bhi.w	800124a <main+0x6d6>
 8000e30:	a201      	add	r2, pc, #4	@ (adr r2, 8000e38 <main+0x2c4>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000ee5 	.word	0x08000ee5
 8000e3c:	08000f55 	.word	0x08000f55
 8000e40:	08000fcd 	.word	0x08000fcd
 8000e44:	0800103d 	.word	0x0800103d
 8000e48:	080010b5 	.word	0x080010b5
 8000e4c:	08001161 	.word	0x08001161
 8000e50:	080011e7 	.word	0x080011e7
 8000e54:	200001f8 	.word	0x200001f8
 8000e58:	20000244 	.word	0x20000244
 8000e5c:	200002dc 	.word	0x200002dc
 8000e60:	2000040c 	.word	0x2000040c
 8000e64:	20000328 	.word	0x20000328
 8000e68:	20000374 	.word	0x20000374
 8000e6c:	200003c0 	.word	0x200003c0
 8000e70:	200001ac 	.word	0x200001ac
 8000e74:	20000560 	.word	0x20000560
 8000e78:	3ca3d70a 	.word	0x3ca3d70a
 8000e7c:	3d79db23 	.word	0x3d79db23
 8000e80:	38d1b717 	.word	0x38d1b717
 8000e84:	20000594 	.word	0x20000594
 8000e88:	200005c8 	.word	0x200005c8
 8000e8c:	200005fc 	.word	0x200005fc
 8000e90:	20000008 	.word	0x20000008
 8000e94:	200004d8 	.word	0x200004d8
 8000e98:	200004dc 	.word	0x200004dc
 8000e9c:	200004e0 	.word	0x200004e0
 8000ea0:	20000630 	.word	0x20000630
 8000ea4:	20000460 	.word	0x20000460
 8000ea8:	3e4ccccd 	.word	0x3e4ccccd
 8000eac:	20000508 	.word	0x20000508
 8000eb0:	20000509 	.word	0x20000509
 8000eb4:	200004f0 	.word	0x200004f0
 8000eb8:	20000004 	.word	0x20000004
 8000ebc:	200004f4 	.word	0x200004f4
 8000ec0:	200004f8 	.word	0x200004f8
 8000ec4:	20000458 	.word	0x20000458
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	2000050e 	.word	0x2000050e
 8000ed0:	2000050c 	.word	0x2000050c
 8000ed4:	2000050b 	.word	0x2000050b
 8000ed8:	2000000c 	.word	0x2000000c
 8000edc:	2000050a 	.word	0x2000050a
 8000ee0:	20000018 	.word	0x20000018
		  		  {
		  		  case 0://MoveForwardUntillSensorThick
		  			  base_X = baseSpeed;
 8000ee4:	4b93      	ldr	r3, [pc, #588]	@ (8001134 <main+0x5c0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a93      	ldr	r2, [pc, #588]	@ (8001138 <main+0x5c4>)
 8000eea:	6013      	str	r3, [r2, #0]
		  			  base_Y = 0.0;
 8000eec:	4b93      	ldr	r3, [pc, #588]	@ (800113c <main+0x5c8>)
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
		  			  base_Omega = 0.0;
 8000ef4:	4b92      	ldr	r3, [pc, #584]	@ (8001140 <main+0x5cc>)
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
				  if((Proximity[1] == sensorThick) && (Proximity[2] == sensorThick))
 8000efc:	4b91      	ldr	r3, [pc, #580]	@ (8001144 <main+0x5d0>)
 8000efe:	785a      	ldrb	r2, [r3, #1]
 8000f00:	4b91      	ldr	r3, [pc, #580]	@ (8001148 <main+0x5d4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f040 8175 	bne.w	80011f4 <main+0x680>
 8000f0a:	4b8e      	ldr	r3, [pc, #568]	@ (8001144 <main+0x5d0>)
 8000f0c:	789a      	ldrb	r2, [r3, #2]
 8000f0e:	4b8e      	ldr	r3, [pc, #568]	@ (8001148 <main+0x5d4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	f040 816e 	bne.w	80011f4 <main+0x680>
				  {
					  n++;
 8000f18:	4b8c      	ldr	r3, [pc, #560]	@ (800114c <main+0x5d8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b8a      	ldr	r3, [pc, #552]	@ (800114c <main+0x5d8>)
 8000f22:	701a      	strb	r2, [r3, #0]
					  if(path == 1)
 8000f24:	4b8a      	ldr	r3, [pc, #552]	@ (8001150 <main+0x5dc>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d106      	bne.n	8000f3a <main+0x3c6>
					  {
					  state_Clean = path1[n];
 8000f2c:	4b87      	ldr	r3, [pc, #540]	@ (800114c <main+0x5d8>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b88      	ldr	r3, [pc, #544]	@ (8001154 <main+0x5e0>)
 8000f34:	5c9a      	ldrb	r2, [r3, r2]
 8000f36:	4b88      	ldr	r3, [pc, #544]	@ (8001158 <main+0x5e4>)
 8000f38:	701a      	strb	r2, [r3, #0]
					  }
					  if(path == 2)
 8000f3a:	4b85      	ldr	r3, [pc, #532]	@ (8001150 <main+0x5dc>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	f040 8158 	bne.w	80011f4 <main+0x680>
					  {
					  state_Clean = path2[n];
 8000f44:	4b81      	ldr	r3, [pc, #516]	@ (800114c <main+0x5d8>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b84      	ldr	r3, [pc, #528]	@ (800115c <main+0x5e8>)
 8000f4c:	5c9a      	ldrb	r2, [r3, r2]
 8000f4e:	4b82      	ldr	r3, [pc, #520]	@ (8001158 <main+0x5e4>)
 8000f50:	701a      	strb	r2, [r3, #0]
					  }
				  }
		  			  break;
 8000f52:	e14f      	b.n	80011f4 <main+0x680>
		  		  case 1://MoveBackwardUntillSensorThick
		  			  base_X = -baseSpeed;
 8000f54:	4b77      	ldr	r3, [pc, #476]	@ (8001134 <main+0x5c0>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	eef1 7a67 	vneg.f32	s15, s15
 8000f5e:	4b76      	ldr	r3, [pc, #472]	@ (8001138 <main+0x5c4>)
 8000f60:	edc3 7a00 	vstr	s15, [r3]
					  base_Y = 0.0;
 8000f64:	4b75      	ldr	r3, [pc, #468]	@ (800113c <main+0x5c8>)
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
					  base_Omega = 0.0;
 8000f6c:	4b74      	ldr	r3, [pc, #464]	@ (8001140 <main+0x5cc>)
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
				  if((Proximity[5] == sensorThick) && (Proximity[6] == sensorThick))
 8000f74:	4b73      	ldr	r3, [pc, #460]	@ (8001144 <main+0x5d0>)
 8000f76:	795a      	ldrb	r2, [r3, #5]
 8000f78:	4b73      	ldr	r3, [pc, #460]	@ (8001148 <main+0x5d4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 813b 	bne.w	80011f8 <main+0x684>
 8000f82:	4b70      	ldr	r3, [pc, #448]	@ (8001144 <main+0x5d0>)
 8000f84:	799a      	ldrb	r2, [r3, #6]
 8000f86:	4b70      	ldr	r3, [pc, #448]	@ (8001148 <main+0x5d4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	f040 8134 	bne.w	80011f8 <main+0x684>
					  {
						  n++;
 8000f90:	4b6e      	ldr	r3, [pc, #440]	@ (800114c <main+0x5d8>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b6c      	ldr	r3, [pc, #432]	@ (800114c <main+0x5d8>)
 8000f9a:	701a      	strb	r2, [r3, #0]
						  if(path == 1)
 8000f9c:	4b6c      	ldr	r3, [pc, #432]	@ (8001150 <main+0x5dc>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d106      	bne.n	8000fb2 <main+0x43e>
						  {
						  state_Clean = path1[n];
 8000fa4:	4b69      	ldr	r3, [pc, #420]	@ (800114c <main+0x5d8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b6a      	ldr	r3, [pc, #424]	@ (8001154 <main+0x5e0>)
 8000fac:	5c9a      	ldrb	r2, [r3, r2]
 8000fae:	4b6a      	ldr	r3, [pc, #424]	@ (8001158 <main+0x5e4>)
 8000fb0:	701a      	strb	r2, [r3, #0]
						  }
						  if(path == 2)
 8000fb2:	4b67      	ldr	r3, [pc, #412]	@ (8001150 <main+0x5dc>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	f040 811e 	bne.w	80011f8 <main+0x684>
						  {
						  state_Clean = path2[n];
 8000fbc:	4b63      	ldr	r3, [pc, #396]	@ (800114c <main+0x5d8>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b66      	ldr	r3, [pc, #408]	@ (800115c <main+0x5e8>)
 8000fc4:	5c9a      	ldrb	r2, [r3, r2]
 8000fc6:	4b64      	ldr	r3, [pc, #400]	@ (8001158 <main+0x5e4>)
 8000fc8:	701a      	strb	r2, [r3, #0]
						  }
					  }
		  			  break;
 8000fca:	e115      	b.n	80011f8 <main+0x684>
		  		  case 2://MoveLeftUntillSensorThick
					  base_X = 0.0;
 8000fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8001138 <main+0x5c4>)
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
					  base_Y = baseSpeed;
 8000fd4:	4b57      	ldr	r3, [pc, #348]	@ (8001134 <main+0x5c0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a58      	ldr	r2, [pc, #352]	@ (800113c <main+0x5c8>)
 8000fda:	6013      	str	r3, [r2, #0]
					  base_Omega = 0.0;
 8000fdc:	4b58      	ldr	r3, [pc, #352]	@ (8001140 <main+0x5cc>)
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
				  if(Proximity[0] == sensorThick && Proximity[7] == sensorThick)
 8000fe4:	4b57      	ldr	r3, [pc, #348]	@ (8001144 <main+0x5d0>)
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	4b57      	ldr	r3, [pc, #348]	@ (8001148 <main+0x5d4>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8105 	bne.w	80011fc <main+0x688>
 8000ff2:	4b54      	ldr	r3, [pc, #336]	@ (8001144 <main+0x5d0>)
 8000ff4:	79da      	ldrb	r2, [r3, #7]
 8000ff6:	4b54      	ldr	r3, [pc, #336]	@ (8001148 <main+0x5d4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	f040 80fe 	bne.w	80011fc <main+0x688>
					  {
						  n++;
 8001000:	4b52      	ldr	r3, [pc, #328]	@ (800114c <main+0x5d8>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b50      	ldr	r3, [pc, #320]	@ (800114c <main+0x5d8>)
 800100a:	701a      	strb	r2, [r3, #0]
						  if(path == 1)
 800100c:	4b50      	ldr	r3, [pc, #320]	@ (8001150 <main+0x5dc>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d106      	bne.n	8001022 <main+0x4ae>
						  {
						  state_Clean = path1[n];
 8001014:	4b4d      	ldr	r3, [pc, #308]	@ (800114c <main+0x5d8>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b4e      	ldr	r3, [pc, #312]	@ (8001154 <main+0x5e0>)
 800101c:	5c9a      	ldrb	r2, [r3, r2]
 800101e:	4b4e      	ldr	r3, [pc, #312]	@ (8001158 <main+0x5e4>)
 8001020:	701a      	strb	r2, [r3, #0]
						  }
						  if(path == 2)
 8001022:	4b4b      	ldr	r3, [pc, #300]	@ (8001150 <main+0x5dc>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b02      	cmp	r3, #2
 8001028:	f040 80e8 	bne.w	80011fc <main+0x688>
						  {
						  state_Clean = path2[n];
 800102c:	4b47      	ldr	r3, [pc, #284]	@ (800114c <main+0x5d8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b4a      	ldr	r3, [pc, #296]	@ (800115c <main+0x5e8>)
 8001034:	5c9a      	ldrb	r2, [r3, r2]
 8001036:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <main+0x5e4>)
 8001038:	701a      	strb	r2, [r3, #0]
						  }
					  }
					  break;
 800103a:	e0df      	b.n	80011fc <main+0x688>
		  		  case 3://MoveRightUntillSensorThick
					  base_X = 0.0;
 800103c:	4b3e      	ldr	r3, [pc, #248]	@ (8001138 <main+0x5c4>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
					  base_Y = -baseSpeed;
 8001044:	4b3b      	ldr	r3, [pc, #236]	@ (8001134 <main+0x5c0>)
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	eef1 7a67 	vneg.f32	s15, s15
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <main+0x5c8>)
 8001050:	edc3 7a00 	vstr	s15, [r3]
					  base_Omega = 0.0;
 8001054:	4b3a      	ldr	r3, [pc, #232]	@ (8001140 <main+0x5cc>)
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
				  if(Proximity[3] == sensorThick && Proximity[4] == sensorThick)
 800105c:	4b39      	ldr	r3, [pc, #228]	@ (8001144 <main+0x5d0>)
 800105e:	78da      	ldrb	r2, [r3, #3]
 8001060:	4b39      	ldr	r3, [pc, #228]	@ (8001148 <main+0x5d4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 80cb 	bne.w	8001200 <main+0x68c>
 800106a:	4b36      	ldr	r3, [pc, #216]	@ (8001144 <main+0x5d0>)
 800106c:	791a      	ldrb	r2, [r3, #4]
 800106e:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <main+0x5d4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	f040 80c4 	bne.w	8001200 <main+0x68c>
					  {
						  n++;
 8001078:	4b34      	ldr	r3, [pc, #208]	@ (800114c <main+0x5d8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b32      	ldr	r3, [pc, #200]	@ (800114c <main+0x5d8>)
 8001082:	701a      	strb	r2, [r3, #0]
						  if(path == 1)
 8001084:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <main+0x5dc>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d106      	bne.n	800109a <main+0x526>
						  {
						  state_Clean = path1[n];
 800108c:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <main+0x5d8>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <main+0x5e0>)
 8001094:	5c9a      	ldrb	r2, [r3, r2]
 8001096:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <main+0x5e4>)
 8001098:	701a      	strb	r2, [r3, #0]
						  }
						  if(path == 2)
 800109a:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <main+0x5dc>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	f040 80ae 	bne.w	8001200 <main+0x68c>
						  {
						  state_Clean = path2[n];
 80010a4:	4b29      	ldr	r3, [pc, #164]	@ (800114c <main+0x5d8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b2c      	ldr	r3, [pc, #176]	@ (800115c <main+0x5e8>)
 80010ac:	5c9a      	ldrb	r2, [r3, r2]
 80010ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <main+0x5e4>)
 80010b0:	701a      	strb	r2, [r3, #0]
						  }
					  }
					  break;
 80010b2:	e0a5      	b.n	8001200 <main+0x68c>
		  		  case 4://MoveLeftUntillDelay
					  base_X = 0.0;
 80010b4:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <main+0x5c4>)
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
					  base_Y = baseSpeed;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <main+0x5c0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <main+0x5c8>)
 80010c2:	6013      	str	r3, [r2, #0]
					  base_Omega = 0.0;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <main+0x5cc>)
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
				  if(Proximity[0] == sensorThick && Proximity[7] == sensorThick)
 80010cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <main+0x5d0>)
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <main+0x5d4>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d122      	bne.n	800111e <main+0x5aa>
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <main+0x5d0>)
 80010da:	79da      	ldrb	r2, [r3, #7]
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <main+0x5d4>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d11c      	bne.n	800111e <main+0x5aa>
					  {
						  n++;
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <main+0x5d8>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <main+0x5d8>)
 80010ee:	701a      	strb	r2, [r3, #0]
						  if(path == 1)
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <main+0x5dc>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d106      	bne.n	8001106 <main+0x592>
						  {
						  state_Clean = path1[n];
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <main+0x5d8>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <main+0x5e0>)
 8001100:	5c9a      	ldrb	r2, [r3, r2]
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <main+0x5e4>)
 8001104:	701a      	strb	r2, [r3, #0]
						  }
						  if(path == 2)
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <main+0x5dc>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d110      	bne.n	8001130 <main+0x5bc>
						  {
						  state_Clean = path2[n];
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <main+0x5d8>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <main+0x5e8>)
 8001116:	5c9a      	ldrb	r2, [r3, r2]
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <main+0x5e4>)
 800111a:	701a      	strb	r2, [r3, #0]
						  if(path == 2)
 800111c:	e008      	b.n	8001130 <main+0x5bc>
						  }
					  }
				  else
				  {
					  nonBlockingDelay(1000, 1, n, 0);
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <main+0x5d8>)
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	2101      	movs	r1, #1
 8001126:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800112a:	f002 fb63 	bl	80037f4 <nonBlockingDelay>
				  }
					  break;
 800112e:	e068      	b.n	8001202 <main+0x68e>
 8001130:	e067      	b.n	8001202 <main+0x68e>
 8001132:	bf00      	nop
 8001134:	20000004 	.word	0x20000004
 8001138:	200004f0 	.word	0x200004f0
 800113c:	200004f4 	.word	0x200004f4
 8001140:	200004f8 	.word	0x200004f8
 8001144:	20000458 	.word	0x20000458
 8001148:	20000000 	.word	0x20000000
 800114c:	2000050b 	.word	0x2000050b
 8001150:	2000050c 	.word	0x2000050c
 8001154:	2000000c 	.word	0x2000000c
 8001158:	2000050a 	.word	0x2000050a
 800115c:	20000018 	.word	0x20000018
		  		  case 5://MoveRightUntillDelay
					  base_X = 0.0;
 8001160:	4b63      	ldr	r3, [pc, #396]	@ (80012f0 <main+0x77c>)
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
					  base_Y = -baseSpeed;
 8001168:	4b62      	ldr	r3, [pc, #392]	@ (80012f4 <main+0x780>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	eef1 7a67 	vneg.f32	s15, s15
 8001172:	4b61      	ldr	r3, [pc, #388]	@ (80012f8 <main+0x784>)
 8001174:	edc3 7a00 	vstr	s15, [r3]
					  base_Omega = 0.0;
 8001178:	4b60      	ldr	r3, [pc, #384]	@ (80012fc <main+0x788>)
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
				  if(Proximity[3] == sensorThick && Proximity[4] == sensorThick)
 8001180:	4b5f      	ldr	r3, [pc, #380]	@ (8001300 <main+0x78c>)
 8001182:	78da      	ldrb	r2, [r3, #3]
 8001184:	4b5f      	ldr	r3, [pc, #380]	@ (8001304 <main+0x790>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d122      	bne.n	80011d2 <main+0x65e>
 800118c:	4b5c      	ldr	r3, [pc, #368]	@ (8001300 <main+0x78c>)
 800118e:	791a      	ldrb	r2, [r3, #4]
 8001190:	4b5c      	ldr	r3, [pc, #368]	@ (8001304 <main+0x790>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d11c      	bne.n	80011d2 <main+0x65e>
					  {
						  n++;
 8001198:	4b5b      	ldr	r3, [pc, #364]	@ (8001308 <main+0x794>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b59      	ldr	r3, [pc, #356]	@ (8001308 <main+0x794>)
 80011a2:	701a      	strb	r2, [r3, #0]
						  if(path == 1)
 80011a4:	4b59      	ldr	r3, [pc, #356]	@ (800130c <main+0x798>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d106      	bne.n	80011ba <main+0x646>
						  {
						  state_Clean = path1[n];
 80011ac:	4b56      	ldr	r3, [pc, #344]	@ (8001308 <main+0x794>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b57      	ldr	r3, [pc, #348]	@ (8001310 <main+0x79c>)
 80011b4:	5c9a      	ldrb	r2, [r3, r2]
 80011b6:	4b57      	ldr	r3, [pc, #348]	@ (8001314 <main+0x7a0>)
 80011b8:	701a      	strb	r2, [r3, #0]
						  }
						  if(path == 2)
 80011ba:	4b54      	ldr	r3, [pc, #336]	@ (800130c <main+0x798>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d110      	bne.n	80011e4 <main+0x670>
						  {
						  state_Clean = path2[n];
 80011c2:	4b51      	ldr	r3, [pc, #324]	@ (8001308 <main+0x794>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b53      	ldr	r3, [pc, #332]	@ (8001318 <main+0x7a4>)
 80011ca:	5c9a      	ldrb	r2, [r3, r2]
 80011cc:	4b51      	ldr	r3, [pc, #324]	@ (8001314 <main+0x7a0>)
 80011ce:	701a      	strb	r2, [r3, #0]
						  if(path == 2)
 80011d0:	e008      	b.n	80011e4 <main+0x670>
						  }
					  }
				  else
				  {
					  nonBlockingDelay(1000, 1, n, 0);
 80011d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001308 <main+0x794>)
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	2101      	movs	r1, #1
 80011da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011de:	f002 fb09 	bl	80037f4 <nonBlockingDelay>
				  }
					  break;
 80011e2:	e00e      	b.n	8001202 <main+0x68e>
 80011e4:	e00d      	b.n	8001202 <main+0x68e>
		  		  case 6://End
					  state_ALL = 0;
 80011e6:	4b4d      	ldr	r3, [pc, #308]	@ (800131c <main+0x7a8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
					  n = 0;
 80011ec:	4b46      	ldr	r3, [pc, #280]	@ (8001308 <main+0x794>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
					  break;
 80011f2:	e006      	b.n	8001202 <main+0x68e>
		  			  break;
 80011f4:	bf00      	nop
 80011f6:	e028      	b.n	800124a <main+0x6d6>
		  			  break;
 80011f8:	bf00      	nop
 80011fa:	e026      	b.n	800124a <main+0x6d6>
					  break;
 80011fc:	bf00      	nop
 80011fe:	e024      	b.n	800124a <main+0x6d6>
					  break;
 8001200:	bf00      	nop
		  		  }
		  		  break;
 8001202:	e022      	b.n	800124a <main+0x6d6>
		  		case 2:
		  		base_X = 0;
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <main+0x77c>)
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
		  		base_X = 0;
 800120c:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <main+0x77c>)
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
		  		base_Omega = 0;
 8001214:	4b39      	ldr	r3, [pc, #228]	@ (80012fc <main+0x788>)
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
				Motor1(0);
 800121c:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001320 <main+0x7ac>
 8001220:	f000 fede 	bl	8001fe0 <Motor1>
				Motor2(0);
 8001224:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8001320 <main+0x7ac>
 8001228:	f000 ff20 	bl	800206c <Motor2>
				Motor3(0);
 800122c:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8001320 <main+0x7ac>
 8001230:	f000 ff60 	bl	80020f4 <Motor3>
				Motor4(0);
 8001234:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8001320 <main+0x7ac>
 8001238:	f000 ffa0 	bl	800217c <Motor4>
				MotorBigBrush(0);
 800123c:	2000      	movs	r0, #0
 800123e:	f001 f821 	bl	8002284 <MotorBigBrush>
				MotorBrush(0);
 8001242:	2000      	movs	r0, #0
 8001244:	f001 f804 	bl	8002250 <MotorBrush>
				break;
 8001248:	e000      	b.n	800124c <main+0x6d8>
		  		  break;
 800124a:	bf00      	nop
		  }
		ProximityWork(base_X,base_Y,base_Omega);
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <main+0x77c>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <main+0x784>)
 8001254:	ed93 7a00 	vldr	s14, [r3]
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <main+0x788>)
 800125a:	edd3 6a00 	vldr	s13, [r3]
 800125e:	eeb0 1a66 	vmov.f32	s2, s13
 8001262:	eef0 0a47 	vmov.f32	s1, s14
 8001266:	eeb0 0a67 	vmov.f32	s0, s15
 800126a:	f001 ff1d 	bl	80030a8 <ProximityWork>
		v_x = base_X + cali_X;
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <main+0x77c>)
 8001270:	ed93 7a00 	vldr	s14, [r3]
 8001274:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <main+0x7b0>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	4b2a      	ldr	r3, [pc, #168]	@ (8001328 <main+0x7b4>)
 8001280:	edc3 7a00 	vstr	s15, [r3]
		v_y = base_Y + cali_Y;
 8001284:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <main+0x784>)
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	4b28      	ldr	r3, [pc, #160]	@ (800132c <main+0x7b8>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001294:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <main+0x7bc>)
 8001296:	edc3 7a00 	vstr	s15, [r3]
		Robot_omega = base_Omega + cali_Omega;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <main+0x788>)
 800129c:	ed93 7a00 	vldr	s14, [r3]
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <main+0x7c0>)
 80012a2:	edd3 7a00 	vldr	s15, [r3]
 80012a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <main+0x7c4>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
		motorMove();
 80012b0:	f000 ffa8 	bl	8002204 <motorMove>
		MotorBigBrush(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 ffe5 	bl	8002284 <MotorBigBrush>
		MotorBrush(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 ffc8 	bl	8002250 <MotorBrush>
 80012c0:	e015      	b.n	80012ee <main+0x77a>
	  }
	  else
	  {
			Motor1(0);
 80012c2:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001320 <main+0x7ac>
 80012c6:	f000 fe8b 	bl	8001fe0 <Motor1>

			Motor2(0);
 80012ca:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001320 <main+0x7ac>
 80012ce:	f000 fecd 	bl	800206c <Motor2>

			Motor3(0);
 80012d2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001320 <main+0x7ac>
 80012d6:	f000 ff0d 	bl	80020f4 <Motor3>

			Motor4(0);
 80012da:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001320 <main+0x7ac>
 80012de:	f000 ff4d 	bl	800217c <Motor4>
		  MotorBigBrush(0);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 ffce 	bl	8002284 <MotorBigBrush>
		  MotorBrush(0);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 ffb1 	bl	8002250 <MotorBrush>
  {
 80012ee:	e4b9      	b.n	8000c64 <main+0xf0>
 80012f0:	200004f0 	.word	0x200004f0
 80012f4:	20000004 	.word	0x20000004
 80012f8:	200004f4 	.word	0x200004f4
 80012fc:	200004f8 	.word	0x200004f8
 8001300:	20000458 	.word	0x20000458
 8001304:	20000000 	.word	0x20000000
 8001308:	2000050b 	.word	0x2000050b
 800130c:	2000050c 	.word	0x2000050c
 8001310:	2000000c 	.word	0x2000000c
 8001314:	2000050a 	.word	0x2000050a
 8001318:	20000018 	.word	0x20000018
 800131c:	20000508 	.word	0x20000508
 8001320:	00000000 	.word	0x00000000
 8001324:	200004fc 	.word	0x200004fc
 8001328:	20000008 	.word	0x20000008
 800132c:	20000500 	.word	0x20000500
 8001330:	200004d8 	.word	0x200004d8
 8001334:	20000504 	.word	0x20000504
 8001338:	200004dc 	.word	0x200004dc

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	2238      	movs	r2, #56	@ 0x38
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f008 f820 	bl	8009390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800135e:	2000      	movs	r0, #0
 8001360:	f004 fc4e 	bl	8005c00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136e:	2340      	movs	r3, #64	@ 0x40
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001376:	2302      	movs	r3, #2
 8001378:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800137a:	2304      	movs	r3, #4
 800137c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800137e:	2355      	movs	r3, #85	@ 0x55
 8001380:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138a:	2302      	movs	r3, #2
 800138c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	4618      	mov	r0, r3
 8001394:	f004 fce8 	bl	8005d68 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800139e:	f002 fa95 	bl	80038cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2303      	movs	r3, #3
 80013a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2104      	movs	r1, #4
 80013ba:	4618      	mov	r0, r3
 80013bc:	f004 ffe6 	bl	800638c <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013c6:	f002 fa81 	bl	80038cc <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	@ 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2220      	movs	r2, #32
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f007 ffcf 	bl	8009390 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013f2:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <MX_ADC3_Init+0x100>)
 80013f4:	4a38      	ldr	r2, [pc, #224]	@ (80014d8 <MX_ADC3_Init+0x104>)
 80013f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013f8:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <MX_ADC3_Init+0x100>)
 80013fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80013fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001400:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001406:	4b33      	ldr	r3, [pc, #204]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800140c:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <MX_ADC3_Init+0x100>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001412:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001414:	2201      	movs	r2, #1
 8001416:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001418:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <MX_ADC3_Init+0x100>)
 800141a:	2204      	movs	r2, #4
 800141c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800141e:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001420:	2200      	movs	r2, #0
 8001422:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001426:	2201      	movs	r2, #1
 8001428:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <MX_ADC3_Init+0x100>)
 800142c:	2202      	movs	r2, #2
 800142e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001430:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_ADC3_Init+0x100>)
 800143a:	2200      	movs	r2, #0
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001444:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800144c:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <MX_ADC3_Init+0x100>)
 800144e:	2200      	movs	r2, #0
 8001450:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800145a:	481e      	ldr	r0, [pc, #120]	@ (80014d4 <MX_ADC3_Init+0x100>)
 800145c:	f003 f806 	bl	800446c <HAL_ADC_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001466:	f002 fa31 	bl	80038cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <MX_ADC3_Init+0x100>)
 8001476:	f003 fe1b 	bl	80050b0 <HAL_ADCEx_MultiModeConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001480:	f002 fa24 	bl	80038cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <MX_ADC3_Init+0x108>)
 8001486:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001488:	2306      	movs	r3, #6
 800148a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001490:	237f      	movs	r3, #127	@ 0x7f
 8001492:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001494:	2304      	movs	r3, #4
 8001496:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <MX_ADC3_Init+0x100>)
 80014a2:	f003 f99f 	bl	80047e4 <HAL_ADC_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80014ac:	f002 fa0e 	bl	80038cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_ADC3_Init+0x10c>)
 80014b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014b4:	230c      	movs	r3, #12
 80014b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_ADC3_Init+0x100>)
 80014be:	f003 f991 	bl	80047e4 <HAL_ADC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 80014c8:	f002 fa00 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3730      	adds	r7, #48	@ 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000004c 	.word	0x2000004c
 80014d8:	50000400 	.word	0x50000400
 80014dc:	04300002 	.word	0x04300002
 80014e0:	14f00020 	.word	0x14f00020

080014e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80014e8:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 80014ea:	4a22      	ldr	r2, [pc, #136]	@ (8001574 <MX_LPUART1_UART_Init+0x90>)
 80014ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 80014f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001502:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001526:	4812      	ldr	r0, [pc, #72]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 8001528:	f007 f8c4 	bl	80086b4 <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001532:	f002 f9cb 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001536:	2100      	movs	r1, #0
 8001538:	480d      	ldr	r0, [pc, #52]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 800153a:	f007 fe5f 	bl	80091fc <HAL_UARTEx_SetTxFifoThreshold>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001544:	f002 f9c2 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001548:	2100      	movs	r1, #0
 800154a:	4809      	ldr	r0, [pc, #36]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 800154c:	f007 fe94 	bl	8009278 <HAL_UARTEx_SetRxFifoThreshold>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001556:	f002 f9b9 	bl	80038cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_LPUART1_UART_Init+0x8c>)
 800155c:	f007 fe15 	bl	800918a <HAL_UARTEx_DisableFifoMode>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001566:	f002 f9b1 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000118 	.word	0x20000118
 8001574:	40008000 	.word	0x40008000

08001578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001596:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <MX_TIM2_Init+0x98>)
 8001598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <MX_TIM2_Init+0x98>)
 80015a0:	22a9      	movs	r2, #169	@ 0xa9
 80015a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_TIM2_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <MX_TIM2_Init+0x98>)
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <MX_TIM2_Init+0x98>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <MX_TIM2_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015be:	4814      	ldr	r0, [pc, #80]	@ (8001610 <MX_TIM2_Init+0x98>)
 80015c0:	f005 fb4e 	bl	8006c60 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015ca:	f002 f97f 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	@ (8001610 <MX_TIM2_Init+0x98>)
 80015dc:	f006 f91c 	bl	8007818 <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015e6:	f002 f971 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	@ (8001610 <MX_TIM2_Init+0x98>)
 80015f8:	f006 feec 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001602:	f002 f963 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200001ac 	.word	0x200001ac

08001614 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	@ 0x30
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	2224      	movs	r2, #36	@ 0x24
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f007 feb4 	bl	8009390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001632:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <MX_TIM3_Init+0xa4>)
 8001634:	4a21      	ldr	r2, [pc, #132]	@ (80016bc <MX_TIM3_Init+0xa8>)
 8001636:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001638:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <MX_TIM3_Init+0xa4>)
 800163a:	2200      	movs	r2, #0
 800163c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <MX_TIM3_Init+0xa4>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63359;
 8001644:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <MX_TIM3_Init+0xa4>)
 8001646:	f24f 727f 	movw	r2, #63359	@ 0xf77f
 800164a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <MX_TIM3_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001652:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <MX_TIM3_Init+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001658:	2303      	movs	r3, #3
 800165a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001660:	2301      	movs	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001668:	2301      	movs	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001670:	2301      	movs	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8001678:	2301      	movs	r3, #1
 800167a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4619      	mov	r1, r3
 8001682:	480d      	ldr	r0, [pc, #52]	@ (80016b8 <MX_TIM3_Init+0xa4>)
 8001684:	f005 fd30 	bl	80070e8 <HAL_TIM_Encoder_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800168e:	f002 f91d 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800169a:	463b      	mov	r3, r7
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <MX_TIM3_Init+0xa4>)
 80016a0:	f006 fe98 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80016aa:	f002 f90f 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3730      	adds	r7, #48	@ 0x30
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200001f8 	.word	0x200001f8
 80016bc:	40000400 	.word	0x40000400

080016c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	@ 0x30
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	2224      	movs	r2, #36	@ 0x24
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f007 fe5e 	bl	8009390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <MX_TIM4_Init+0xa4>)
 80016e0:	4a21      	ldr	r2, [pc, #132]	@ (8001768 <MX_TIM4_Init+0xa8>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_TIM4_Init+0xa4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <MX_TIM4_Init+0xa4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63359;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_TIM4_Init+0xa4>)
 80016f2:	f24f 727f 	movw	r2, #63359	@ 0xf77f
 80016f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_TIM4_Init+0xa4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_TIM4_Init+0xa4>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001704:	2303      	movs	r3, #3
 8001706:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800170c:	2301      	movs	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001714:	2301      	movs	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800171c:	2301      	movs	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8001724:	2301      	movs	r3, #1
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_TIM4_Init+0xa4>)
 8001730:	f005 fcda 	bl	80070e8 <HAL_TIM_Encoder_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800173a:	f002 f8c7 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	@ (8001764 <MX_TIM4_Init+0xa4>)
 800174c:	f006 fe42 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001756:	f002 f8b9 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3730      	adds	r7, #48	@ 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000244 	.word	0x20000244
 8001768:	40000800 	.word	0x40000800

0800176c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800178a:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <MX_TIM5_Init+0x94>)
 800178c:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <MX_TIM5_Init+0x98>)
 800178e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <MX_TIM5_Init+0x94>)
 8001792:	22a9      	movs	r2, #169	@ 0xa9
 8001794:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <MX_TIM5_Init+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800179c:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <MX_TIM5_Init+0x94>)
 800179e:	f04f 32ff 	mov.w	r2, #4294967295
 80017a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <MX_TIM5_Init+0x94>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <MX_TIM5_Init+0x94>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017b0:	4813      	ldr	r0, [pc, #76]	@ (8001800 <MX_TIM5_Init+0x94>)
 80017b2:	f005 fa55 	bl	8006c60 <HAL_TIM_Base_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80017bc:	f002 f886 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	@ (8001800 <MX_TIM5_Init+0x94>)
 80017ce:	f006 f823 	bl	8007818 <HAL_TIM_ConfigClockSource>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80017d8:	f002 f878 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_TIM5_Init+0x94>)
 80017ea:	f006 fdf3 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80017f4:	f002 f86a 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000290 	.word	0x20000290
 8001804:	40000c00 	.word	0x40000c00

08001808 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2224      	movs	r2, #36	@ 0x24
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f007 fdba 	bl	8009390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	463b      	mov	r3, r7
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <MX_TIM8_Init+0xac>)
 8001828:	4a23      	ldr	r2, [pc, #140]	@ (80018b8 <MX_TIM8_Init+0xb0>)
 800182a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <MX_TIM8_Init+0xac>)
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <MX_TIM8_Init+0xac>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63359;
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <MX_TIM8_Init+0xac>)
 800183a:	f24f 727f 	movw	r2, #63359	@ 0xf77f
 800183e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001840:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <MX_TIM8_Init+0xac>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001846:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <MX_TIM8_Init+0xac>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <MX_TIM8_Init+0xac>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001852:	2303      	movs	r3, #3
 8001854:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800185a:	2301      	movs	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001862:	2301      	movs	r3, #1
 8001864:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800186a:	2301      	movs	r3, #1
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8001872:	2301      	movs	r3, #1
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	4619      	mov	r1, r3
 800187c:	480d      	ldr	r0, [pc, #52]	@ (80018b4 <MX_TIM8_Init+0xac>)
 800187e:	f005 fc33 	bl	80070e8 <HAL_TIM_Encoder_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001888:	f002 f820 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001898:	463b      	mov	r3, r7
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <MX_TIM8_Init+0xac>)
 800189e:	f006 fd99 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80018a8:	f002 f810 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3730      	adds	r7, #48	@ 0x30
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200002dc 	.word	0x200002dc
 80018b8:	40013400 	.word	0x40013400

080018bc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b09c      	sub	sp, #112	@ 0x70
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2234      	movs	r2, #52	@ 0x34
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f007 fd4a 	bl	8009390 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018fc:	4b45      	ldr	r3, [pc, #276]	@ (8001a14 <MX_TIM15_Init+0x158>)
 80018fe:	4a46      	ldr	r2, [pc, #280]	@ (8001a18 <MX_TIM15_Init+0x15c>)
 8001900:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 169;
 8001902:	4b44      	ldr	r3, [pc, #272]	@ (8001a14 <MX_TIM15_Init+0x158>)
 8001904:	22a9      	movs	r2, #169	@ 0xa9
 8001906:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b42      	ldr	r3, [pc, #264]	@ (8001a14 <MX_TIM15_Init+0x158>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800190e:	4b41      	ldr	r3, [pc, #260]	@ (8001a14 <MX_TIM15_Init+0x158>)
 8001910:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001914:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b3f      	ldr	r3, [pc, #252]	@ (8001a14 <MX_TIM15_Init+0x158>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800191c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a14 <MX_TIM15_Init+0x158>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b3c      	ldr	r3, [pc, #240]	@ (8001a14 <MX_TIM15_Init+0x158>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001928:	483a      	ldr	r0, [pc, #232]	@ (8001a14 <MX_TIM15_Init+0x158>)
 800192a:	f005 f999 	bl	8006c60 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001934:	f001 ffca 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001942:	4619      	mov	r1, r3
 8001944:	4833      	ldr	r0, [pc, #204]	@ (8001a14 <MX_TIM15_Init+0x158>)
 8001946:	f005 ff67 	bl	8007818 <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001950:	f001 ffbc 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001954:	482f      	ldr	r0, [pc, #188]	@ (8001a14 <MX_TIM15_Init+0x158>)
 8001956:	f005 fa53 	bl	8006e00 <HAL_TIM_PWM_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001960:	f001 ffb4 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800196c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001970:	4619      	mov	r1, r3
 8001972:	4828      	ldr	r0, [pc, #160]	@ (8001a14 <MX_TIM15_Init+0x158>)
 8001974:	f006 fd2e 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800197e:	f001 ffa5 	bl	80038cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001982:	2360      	movs	r3, #96	@ 0x60
 8001984:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019a2:	2200      	movs	r2, #0
 80019a4:	4619      	mov	r1, r3
 80019a6:	481b      	ldr	r0, [pc, #108]	@ (8001a14 <MX_TIM15_Init+0x158>)
 80019a8:	f005 fe22 	bl	80075f0 <HAL_TIM_PWM_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80019b2:	f001 ff8b 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ba:	2204      	movs	r2, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4815      	ldr	r0, [pc, #84]	@ (8001a14 <MX_TIM15_Init+0x158>)
 80019c0:	f005 fe16 	bl	80075f0 <HAL_TIM_PWM_ConfigChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80019ca:	f001 ff7f 	bl	80038cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	@ (8001a14 <MX_TIM15_Init+0x158>)
 80019f6:	f006 fd83 	bl	8008500 <HAL_TIMEx_ConfigBreakDeadTime>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 8001a00:	f001 ff64 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a04:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <MX_TIM15_Init+0x158>)
 8001a06:	f002 f9d9 	bl	8003dbc <HAL_TIM_MspPostInit>

}
 8001a0a:	bf00      	nop
 8001a0c:	3770      	adds	r7, #112	@ 0x70
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000328 	.word	0x20000328
 8001a18:	40014000 	.word	0x40014000

08001a1c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b094      	sub	sp, #80	@ 0x50
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a36:	463b      	mov	r3, r7
 8001a38:	2234      	movs	r2, #52	@ 0x34
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f007 fca7 	bl	8009390 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a42:	4b31      	ldr	r3, [pc, #196]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001a44:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <MX_TIM16_Init+0xf0>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001a48:	4b2f      	ldr	r3, [pc, #188]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001a4a:	22a9      	movs	r2, #169	@ 0xa9
 8001a4c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001a54:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001a56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a5a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a62:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a68:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a6e:	4826      	ldr	r0, [pc, #152]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001a70:	f005 f8f6 	bl	8006c60 <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001a7a:	f001 ff27 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001a7e:	4822      	ldr	r0, [pc, #136]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001a80:	f005 f9be 	bl	8006e00 <HAL_TIM_PWM_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001a8a:	f001 ff1f 	bl	80038cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8e:	2360      	movs	r3, #96	@ 0x60
 8001a90:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aaa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4815      	ldr	r0, [pc, #84]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001ab4:	f005 fd9c 	bl	80075f0 <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001abe:	f001 ff05 	bl	80038cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ada:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4807      	ldr	r0, [pc, #28]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001aea:	f006 fd09 	bl	8008500 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001af4:	f001 feea 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001af8:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <MX_TIM16_Init+0xec>)
 8001afa:	f002 f95f 	bl	8003dbc <HAL_TIM_MspPostInit>

}
 8001afe:	bf00      	nop
 8001b00:	3750      	adds	r7, #80	@ 0x50
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000374 	.word	0x20000374
 8001b0c:	40014400 	.word	0x40014400

08001b10 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b094      	sub	sp, #80	@ 0x50
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	615a      	str	r2, [r3, #20]
 8001b28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2234      	movs	r2, #52	@ 0x34
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f007 fc2d 	bl	8009390 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b36:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001b38:	4a31      	ldr	r2, [pc, #196]	@ (8001c00 <MX_TIM17_Init+0xf0>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 169;
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001b3e:	22a9      	movs	r2, #169	@ 0xa9
 8001b40:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001b4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b4e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b2a      	ldr	r3, [pc, #168]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b56:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b62:	4826      	ldr	r0, [pc, #152]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001b64:	f005 f87c 	bl	8006c60 <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001b6e:	f001 fead 	bl	80038cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001b72:	4822      	ldr	r0, [pc, #136]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001b74:	f005 f944 	bl	8006e00 <HAL_TIM_PWM_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001b7e:	f001 fea5 	bl	80038cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b82:	2360      	movs	r3, #96	@ 0x60
 8001b84:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4815      	ldr	r0, [pc, #84]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001ba8:	f005 fd22 	bl	80075f0 <HAL_TIM_PWM_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001bb2:	f001 fe8b 	bl	80038cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd8:	463b      	mov	r3, r7
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001bde:	f006 fc8f 	bl	8008500 <HAL_TIMEx_ConfigBreakDeadTime>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001be8:	f001 fe70 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001bec:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <MX_TIM17_Init+0xec>)
 8001bee:	f002 f8e5 	bl	8003dbc <HAL_TIM_MspPostInit>

}
 8001bf2:	bf00      	nop
 8001bf4:	3750      	adds	r7, #80	@ 0x50
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200003c0 	.word	0x200003c0
 8001c00:	40014800 	.word	0x40014800

08001c04 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	@ 0x30
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	2224      	movs	r2, #36	@ 0x24
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f007 fbbc 	bl	8009390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001c22:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <MX_TIM20_Init+0xac>)
 8001c24:	4a23      	ldr	r2, [pc, #140]	@ (8001cb4 <MX_TIM20_Init+0xb0>)
 8001c26:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001c28:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <MX_TIM20_Init+0xac>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <MX_TIM20_Init+0xac>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 63359;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <MX_TIM20_Init+0xac>)
 8001c36:	f24f 727f 	movw	r2, #63359	@ 0xf77f
 8001c3a:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <MX_TIM20_Init+0xac>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <MX_TIM20_Init+0xac>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <MX_TIM20_Init+0xac>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c56:	2301      	movs	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c66:	2301      	movs	r3, #1
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4619      	mov	r1, r3
 8001c78:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <MX_TIM20_Init+0xac>)
 8001c7a:	f005 fa35 	bl	80070e8 <HAL_TIM_Encoder_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8001c84:	f001 fe22 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <MX_TIM20_Init+0xac>)
 8001c9a:	f006 fb9b 	bl	80083d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8001ca4:	f001 fe12 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3730      	adds	r7, #48	@ 0x30
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000040c 	.word	0x2000040c
 8001cb4:	40015000 	.word	0x40015000

08001cb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <MX_DMA_Init+0x50>)
 8001cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc2:	4a11      	ldr	r2, [pc, #68]	@ (8001d08 <MX_DMA_Init+0x50>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <MX_DMA_Init+0x50>)
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <MX_DMA_Init+0x50>)
 8001cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cda:	4a0b      	ldr	r2, [pc, #44]	@ (8001d08 <MX_DMA_Init+0x50>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <MX_DMA_Init+0x50>)
 8001ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	200b      	movs	r0, #11
 8001cf4:	f003 fbbf 	bl	8005476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cf8:	200b      	movs	r0, #11
 8001cfa:	f003 fbd6 	bl	80054aa <HAL_NVIC_EnableIRQ>

}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000

08001d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	4b75      	ldr	r3, [pc, #468]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d26:	4a74      	ldr	r2, [pc, #464]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d40:	f043 0320 	orr.w	r3, r3, #32
 8001d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d46:	4b6c      	ldr	r3, [pc, #432]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b69      	ldr	r3, [pc, #420]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	4a68      	ldr	r2, [pc, #416]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5e:	4b66      	ldr	r3, [pc, #408]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a62      	ldr	r2, [pc, #392]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b60      	ldr	r3, [pc, #384]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	4a5c      	ldr	r2, [pc, #368]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef8 <MX_GPIO_Init+0x1ec>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_O7M2_Pin|GPIO_O6M1_Pin|GPIO_O8M2_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da4:	f003 fef0 	bl	8005b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_O11_Pin|GPIO_O5M1_Pin|GPIO_O3_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 5192 	mov.w	r1, #4672	@ 0x1240
 8001dae:	4853      	ldr	r0, [pc, #332]	@ (8001efc <MX_GPIO_Init+0x1f0>)
 8001db0:	f003 feea 	bl	8005b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_O10MBBB_Pin|GPIO_O4M4B_Pin|GPIO_O1M4_Pin|GPIO_O9M3_Pin
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 8001dba:	4851      	ldr	r0, [pc, #324]	@ (8001f00 <MX_GPIO_Init+0x1f4>)
 8001dbc:	f003 fee4 	bl	8005b88 <HAL_GPIO_WritePin>
                          |GPIO_O2M4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_O12M3_GPIO_Port, GPIO_O12M3_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	484f      	ldr	r0, [pc, #316]	@ (8001f04 <MX_GPIO_Init+0x1f8>)
 8001dc6:	f003 fedf 	bl	8005b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4847      	ldr	r0, [pc, #284]	@ (8001f00 <MX_GPIO_Init+0x1f4>)
 8001de2:	f003 fd37 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOProx10_Pin GPIOProx9_Pin GPIOProx1_Pin GPIO_InPUT12_Pin */
  GPIO_InitStruct.Pin = GPIOProx10_Pin|GPIOProx9_Pin|GPIOProx1_Pin|GPIO_InPUT12_Pin;
 8001de6:	231b      	movs	r3, #27
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	4841      	ldr	r0, [pc, #260]	@ (8001f00 <MX_GPIO_Init+0x1f4>)
 8001dfa:	f003 fd2b 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOProx5_Pin GPIOProx6_Pin GPIOProx7_Pin GPIOProx3_Pin */
  GPIO_InitStruct.Pin = GPIOProx5_Pin|GPIOProx6_Pin|GPIOProx7_Pin|GPIOProx3_Pin;
 8001dfe:	f248 0313 	movw	r3, #32787	@ 0x8013
 8001e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e16:	f003 fd1d 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin GPIO_O7M2_Pin GPIO_O6M1_Pin GPIO_O8M2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_O7M2_Pin|GPIO_O6M1_Pin|GPIO_O8M2_Pin;
 8001e1a:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 8001e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e36:	f003 fd0d 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWin1_Pin */
  GPIO_InitStruct.Pin = SWin1_Pin;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWin1_GPIO_Port, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	482c      	ldr	r0, [pc, #176]	@ (8001f00 <MX_GPIO_Init+0x1f4>)
 8001e4e:	f003 fd01 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIOProx8_Pin GPIO_INPUT10_Pin */
  GPIO_InitStruct.Pin = GPIOProx8_Pin|GPIO_INPUT10_Pin;
 8001e52:	f240 4301 	movw	r3, #1025	@ 0x401
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	4825      	ldr	r0, [pc, #148]	@ (8001efc <MX_GPIO_Init+0x1f0>)
 8001e68:	f003 fcf4 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWin2_Pin */
  GPIO_InitStruct.Pin = SWin2_Pin;
 8001e6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWin2_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	481e      	ldr	r0, [pc, #120]	@ (8001efc <MX_GPIO_Init+0x1f0>)
 8001e82:	f003 fce7 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_O11_Pin GPIO_O5M1_Pin GPIO_O3_Pin */
  GPIO_InitStruct.Pin = GPIO_O11_Pin|GPIO_O5M1_Pin|GPIO_O3_Pin;
 8001e86:	f44f 5392 	mov.w	r3, #4672	@ 0x1240
 8001e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4817      	ldr	r0, [pc, #92]	@ (8001efc <MX_GPIO_Init+0x1f0>)
 8001ea0:	f003 fcd8 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_O10MBBB_Pin GPIO_O4M4B_Pin GPIO_O1M4_Pin GPIO_O9M3_Pin
                           GPIO_O2M4_Pin */
  GPIO_InitStruct.Pin = GPIO_O10MBBB_Pin|GPIO_O4M4B_Pin|GPIO_O1M4_Pin|GPIO_O9M3_Pin
 8001ea4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001ea8:	617b      	str	r3, [r7, #20]
                          |GPIO_O2M4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4810      	ldr	r0, [pc, #64]	@ (8001f00 <MX_GPIO_Init+0x1f4>)
 8001ebe:	f003 fcc9 	bl	8005854 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_O12M3_Pin */
  GPIO_InitStruct.Pin = GPIO_O12M3_Pin;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_O12M3_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480a      	ldr	r0, [pc, #40]	@ (8001f04 <MX_GPIO_Init+0x1f8>)
 8001eda:	f003 fcbb 	bl	8005854 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2028      	movs	r0, #40	@ 0x28
 8001ee4:	f003 fac7 	bl	8005476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ee8:	2028      	movs	r0, #40	@ 0x28
 8001eea:	f003 fade 	bl	80054aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	@ 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000400 	.word	0x48000400
 8001f00:	48000800 	.word	0x48000800
 8001f04:	48000c00 	.word	0x48000c00

08001f08 <SwitchRead>:

/* USER CODE BEGIN 4 */
void SwitchRead()
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	Switch[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	4809      	ldr	r0, [pc, #36]	@ (8001f34 <SwitchRead+0x2c>)
 8001f10:	f003 fe22 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <SwitchRead+0x30>)
 8001f1a:	801a      	strh	r2, [r3, #0]
	Switch[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8001f1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f20:	4806      	ldr	r0, [pc, #24]	@ (8001f3c <SwitchRead+0x34>)
 8001f22:	f003 fe19 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <SwitchRead+0x30>)
 8001f2c:	805a      	strh	r2, [r3, #2]
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	48000800 	.word	0x48000800
 8001f38:	20000460 	.word	0x20000460
 8001f3c:	48000400 	.word	0x48000400

08001f40 <ProximityRead>:
void ProximityRead()
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	Proximity[0] =  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001f44:	2102      	movs	r1, #2
 8001f46:	4823      	ldr	r0, [pc, #140]	@ (8001fd4 <ProximityRead+0x94>)
 8001f48:	f003 fe06 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <ProximityRead+0x98>)
 8001f52:	701a      	strb	r2, [r3, #0]
	Proximity[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8001f54:	2108      	movs	r1, #8
 8001f56:	481f      	ldr	r0, [pc, #124]	@ (8001fd4 <ProximityRead+0x94>)
 8001f58:	f003 fdfe 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <ProximityRead+0x98>)
 8001f62:	705a      	strb	r2, [r3, #1]
	Proximity[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8001f64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6c:	f003 fdf4 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <ProximityRead+0x98>)
 8001f76:	709a      	strb	r2, [r3, #2]
	Proximity[3] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4816      	ldr	r0, [pc, #88]	@ (8001fd4 <ProximityRead+0x94>)
 8001f7c:	f003 fdec 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <ProximityRead+0x98>)
 8001f86:	70da      	strb	r2, [r3, #3]
	Proximity[4] =HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4814      	ldr	r0, [pc, #80]	@ (8001fdc <ProximityRead+0x9c>)
 8001f8c:	f003 fde4 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <ProximityRead+0x98>)
 8001f96:	711a      	strb	r2, [r3, #4]
	Proximity[5] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8001f98:	2110      	movs	r1, #16
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f9e:	f003 fddb 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <ProximityRead+0x98>)
 8001fa8:	715a      	strb	r2, [r3, #5]
	Proximity[6] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001faa:	2101      	movs	r1, #1
 8001fac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb0:	f003 fdd2 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <ProximityRead+0x98>)
 8001fba:	719a      	strb	r2, [r3, #6]
	Proximity[7] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc2:	f003 fdc9 	bl	8005b58 <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b03      	ldr	r3, [pc, #12]	@ (8001fd8 <ProximityRead+0x98>)
 8001fcc:	71da      	strb	r2, [r3, #7]
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	48000800 	.word	0x48000800
 8001fd8:	20000458 	.word	0x20000458
 8001fdc:	48000400 	.word	0x48000400

08001fe0 <Motor1>:
void Motor1(float speed){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed > 0)
 8001fea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	dd19      	ble.n	800202c <Motor1+0x4c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002002:	f003 fdc1 	bl	8005b88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800200c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002010:	f003 fdba 	bl	8005b88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(speed));
 8002014:	edd7 7a01 	vldr	s15, [r7, #4]
 8002018:	eef0 7ae7 	vabs.f32	s15, s15
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <Motor1+0x88>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002024:	ee17 2a90 	vmov	r2, s15
 8002028:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(speed));

	}
}
 800202a:	e018      	b.n	800205e <Motor1+0x7e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002032:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002036:	f003 fda7 	bl	8005b88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002044:	f003 fda0 	bl	8005b88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(speed));
 8002048:	edd7 7a01 	vldr	s15, [r7, #4]
 800204c:	eef0 7ae7 	vabs.f32	s15, s15
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <Motor1+0x88>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002058:	ee17 2a90 	vmov	r2, s15
 800205c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000328 	.word	0x20000328

0800206c <Motor2>:
void Motor2(float speed){
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed > 0)
 8002076:	edd7 7a01 	vldr	s15, [r7, #4]
 800207a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	dd17      	ble.n	80020b4 <Motor2+0x48>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800208a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800208e:	f003 fd7b 	bl	8005b88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8002092:	2201      	movs	r2, #1
 8002094:	2140      	movs	r1, #64	@ 0x40
 8002096:	4815      	ldr	r0, [pc, #84]	@ (80020ec <Motor2+0x80>)
 8002098:	f003 fd76 	bl	8005b88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(speed));
 800209c:	edd7 7a01 	vldr	s15, [r7, #4]
 80020a0:	eef0 7ae7 	vabs.f32	s15, s15
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <Motor2+0x84>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ac:	ee17 2a90 	vmov	r2, s15
 80020b0:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(speed));

	}
}
 80020b2:	e016      	b.n	80020e2 <Motor2+0x76>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80020b4:	2201      	movs	r2, #1
 80020b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020be:	f003 fd63 	bl	8005b88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2140      	movs	r1, #64	@ 0x40
 80020c6:	4809      	ldr	r0, [pc, #36]	@ (80020ec <Motor2+0x80>)
 80020c8:	f003 fd5e 	bl	8005b88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(speed));
 80020cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d0:	eef0 7ae7 	vabs.f32	s15, s15
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <Motor2+0x84>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020dc:	ee17 2a90 	vmov	r2, s15
 80020e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	48000400 	.word	0x48000400
 80020f0:	20000328 	.word	0x20000328

080020f4 <Motor3>:
void Motor3(float speed){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed > 0)
 80020fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	dd17      	ble.n	800213c <Motor3+0x48>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 800210c:	2201      	movs	r2, #1
 800210e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002112:	4818      	ldr	r0, [pc, #96]	@ (8002174 <Motor3+0x80>)
 8002114:	f003 fd38 	bl	8005b88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800211e:	4815      	ldr	r0, [pc, #84]	@ (8002174 <Motor3+0x80>)
 8002120:	f003 fd32 	bl	8005b88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, fabs(speed));
 8002124:	edd7 7a01 	vldr	s15, [r7, #4]
 8002128:	eef0 7ae7 	vabs.f32	s15, s15
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <Motor3+0x84>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002134:	ee17 2a90 	vmov	r2, s15
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, fabs(speed));

	}
}
 800213a:	e016      	b.n	800216a <Motor3+0x76>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002142:	480c      	ldr	r0, [pc, #48]	@ (8002174 <Motor3+0x80>)
 8002144:	f003 fd20 	bl	8005b88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8002148:	2201      	movs	r2, #1
 800214a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800214e:	4809      	ldr	r0, [pc, #36]	@ (8002174 <Motor3+0x80>)
 8002150:	f003 fd1a 	bl	8005b88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, fabs(speed));
 8002154:	edd7 7a01 	vldr	s15, [r7, #4]
 8002158:	eef0 7ae7 	vabs.f32	s15, s15
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <Motor3+0x84>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002164:	ee17 2a90 	vmov	r2, s15
 8002168:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	48000800 	.word	0x48000800
 8002178:	20000374 	.word	0x20000374

0800217c <Motor4>:
void Motor4(float speed){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	ed87 0a01 	vstr	s0, [r7, #4]
	if(speed > 0)
 8002186:	edd7 7a01 	vldr	s15, [r7, #4]
 800218a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002192:	dd16      	ble.n	80021c2 <Motor4+0x46>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800219a:	4817      	ldr	r0, [pc, #92]	@ (80021f8 <Motor4+0x7c>)
 800219c:	f003 fcf4 	bl	8005b88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 80021a0:	2201      	movs	r2, #1
 80021a2:	2104      	movs	r1, #4
 80021a4:	4815      	ldr	r0, [pc, #84]	@ (80021fc <Motor4+0x80>)
 80021a6:	f003 fcef 	bl	8005b88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fabs(speed));
 80021aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ae:	eef0 7ae7 	vabs.f32	s15, s15
 80021b2:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <Motor4+0x84>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ba:	ee17 2a90 	vmov	r2, s15
 80021be:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fabs(speed));

	}
}
 80021c0:	e015      	b.n	80021ee <Motor4+0x72>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021c8:	480b      	ldr	r0, [pc, #44]	@ (80021f8 <Motor4+0x7c>)
 80021ca:	f003 fcdd 	bl	8005b88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2104      	movs	r1, #4
 80021d2:	480a      	ldr	r0, [pc, #40]	@ (80021fc <Motor4+0x80>)
 80021d4:	f003 fcd8 	bl	8005b88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fabs(speed));
 80021d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021dc:	eef0 7ae7 	vabs.f32	s15, s15
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <Motor4+0x84>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e8:	ee17 2a90 	vmov	r2, s15
 80021ec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	48000800 	.word	0x48000800
 80021fc:	48000c00 	.word	0x48000c00
 8002200:	200003c0 	.word	0x200003c0

08002204 <motorMove>:
void motorMove()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	PIDmotor1(wheel_speeds[0]);
 8002208:	4b10      	ldr	r3, [pc, #64]	@ (800224c <motorMove+0x48>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	eeb0 0a67 	vmov.f32	s0, s15
 8002212:	f000 fbf3 	bl	80029fc <PIDmotor1>
	PIDmotor2(-wheel_speeds[1]);
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <motorMove+0x48>)
 8002218:	edd3 7a01 	vldr	s15, [r3, #4]
 800221c:	eef1 7a67 	vneg.f32	s15, s15
 8002220:	eeb0 0a67 	vmov.f32	s0, s15
 8002224:	f000 fcb4 	bl	8002b90 <PIDmotor2>
	PIDmotor3(-wheel_speeds[3]);
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <motorMove+0x48>)
 800222a:	edd3 7a03 	vldr	s15, [r3, #12]
 800222e:	eef1 7a67 	vneg.f32	s15, s15
 8002232:	eeb0 0a67 	vmov.f32	s0, s15
 8002236:	f000 fd75 	bl	8002d24 <PIDmotor3>
	PIDmotor4(wheel_speeds[2]);
 800223a:	4b04      	ldr	r3, [pc, #16]	@ (800224c <motorMove+0x48>)
 800223c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	f000 fe38 	bl	8002eb8 <PIDmotor4>
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200004e0 	.word	0x200004e0

08002250 <MotorBrush>:
void MotorBrush(int onoff)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	if(onoff == 1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d106      	bne.n	800226c <MotorBrush+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002264:	4806      	ldr	r0, [pc, #24]	@ (8002280 <MotorBrush+0x30>)
 8002266:	f003 fc8f 	bl	8005b88 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
	}
}
 800226a:	e005      	b.n	8002278 <MotorBrush+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002272:	4803      	ldr	r0, [pc, #12]	@ (8002280 <MotorBrush+0x30>)
 8002274:	f003 fc88 	bl	8005b88 <HAL_GPIO_WritePin>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	48000800 	.word	0x48000800

08002284 <MotorBigBrush>:
void MotorBigBrush(int onoff)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	if(onoff == 1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d106      	bne.n	80022a0 <MotorBigBrush+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002298:	4806      	ldr	r0, [pc, #24]	@ (80022b4 <MotorBigBrush+0x30>)
 800229a:	f003 fc75 	bl	8005b88 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
	}
}
 800229e:	e005      	b.n	80022ac <MotorBigBrush+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022a6:	4803      	ldr	r0, [pc, #12]	@ (80022b4 <MotorBigBrush+0x30>)
 80022a8:	f003 fc6e 	bl	8005b88 <HAL_GPIO_WritePin>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	48000800 	.word	0x48000800

080022b8 <EncoderRead>:
void EncoderRead()
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
	EncodeRead[0] = __HAL_TIM_GET_COUNTER(&htim4);
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <EncoderRead+0x38>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	4a0c      	ldr	r2, [pc, #48]	@ (80022f4 <EncoderRead+0x3c>)
 80022c4:	6013      	str	r3, [r2, #0]
	EncodeRead[1] = __HAL_TIM_GET_COUNTER(&htim3);
 80022c6:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <EncoderRead+0x40>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <EncoderRead+0x3c>)
 80022ce:	6053      	str	r3, [r2, #4]
	EncodeRead[2] = __HAL_TIM_GET_COUNTER(&htim8);
 80022d0:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <EncoderRead+0x44>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	4a07      	ldr	r2, [pc, #28]	@ (80022f4 <EncoderRead+0x3c>)
 80022d8:	6093      	str	r3, [r2, #8]
	EncodeRead[3] = __HAL_TIM_GET_COUNTER(&htim20);
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <EncoderRead+0x48>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <EncoderRead+0x3c>)
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000244 	.word	0x20000244
 80022f4:	20000468 	.word	0x20000468
 80022f8:	200001f8 	.word	0x200001f8
 80022fc:	200002dc 	.word	0x200002dc
 8002300:	2000040c 	.word	0x2000040c
 8002304:	00000000 	.word	0x00000000

08002308 <calculateWheelSpeeds>:

void calculateWheelSpeeds(float v_x, float v_y, float omega, float* wheel_speeds) {
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002312:	edc7 0a02 	vstr	s1, [r7, #8]
 8002316:	ed87 1a01 	vstr	s2, [r7, #4]
 800231a:	6038      	str	r0, [r7, #0]
    wheel_speeds[0] = ((180.0f/3.141592) / WHEEL_RADIUS) * (v_x - v_y - (ROBOT_LENGTH + ROBOT_WIDTH) * omega);
 800231c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002320:	edd7 7a02 	vldr	s15, [r7, #8]
 8002324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002328:	edd7 7a01 	vldr	s15, [r7, #4]
 800232c:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8002438 <calculateWheelSpeeds+0x130>
 8002330:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002338:	ee17 0a90 	vmov	r0, s15
 800233c:	f7fe f9fa 	bl	8000734 <__aeabi_f2d>
 8002340:	a33b      	add	r3, pc, #236	@ (adr r3, 8002430 <calculateWheelSpeeds+0x128>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fd ff67 	bl	8000218 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f7fe fa47 	bl	80007e4 <__aeabi_d2f>
 8002356:	4602      	mov	r2, r0
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	601a      	str	r2, [r3, #0]
    wheel_speeds[1] = ((180.0f/3.141592) / WHEEL_RADIUS) * (v_x + v_y + (ROBOT_LENGTH + ROBOT_WIDTH) * omega);
 800235c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002360:	edd7 7a02 	vldr	s15, [r7, #8]
 8002364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002368:	edd7 7a01 	vldr	s15, [r7, #4]
 800236c:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002438 <calculateWheelSpeeds+0x130>
 8002370:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002378:	ee17 0a90 	vmov	r0, s15
 800237c:	f7fe f9da 	bl	8000734 <__aeabi_f2d>
 8002380:	a32b      	add	r3, pc, #172	@ (adr r3, 8002430 <calculateWheelSpeeds+0x128>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fd ff47 	bl	8000218 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	1d1c      	adds	r4, r3, #4
 8002396:	f7fe fa25 	bl	80007e4 <__aeabi_d2f>
 800239a:	4603      	mov	r3, r0
 800239c:	6023      	str	r3, [r4, #0]
    wheel_speeds[2] = ((180.0f/3.141592) / WHEEL_RADIUS) * (v_x + v_y - (ROBOT_LENGTH + ROBOT_WIDTH) * omega);
 800239e:	ed97 7a03 	vldr	s14, [r7, #12]
 80023a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ae:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002438 <calculateWheelSpeeds+0x130>
 80023b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ba:	ee17 0a90 	vmov	r0, s15
 80023be:	f7fe f9b9 	bl	8000734 <__aeabi_f2d>
 80023c2:	a31b      	add	r3, pc, #108	@ (adr r3, 8002430 <calculateWheelSpeeds+0x128>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fd ff26 	bl	8000218 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f103 0408 	add.w	r4, r3, #8
 80023da:	f7fe fa03 	bl	80007e4 <__aeabi_d2f>
 80023de:	4603      	mov	r3, r0
 80023e0:	6023      	str	r3, [r4, #0]
    wheel_speeds[3] = ((180.0f/3.141592) / WHEEL_RADIUS) * (v_x - v_y + (ROBOT_LENGTH + ROBOT_WIDTH) * omega);
 80023e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80023e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f2:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002438 <calculateWheelSpeeds+0x130>
 80023f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fe:	ee17 0a90 	vmov	r0, s15
 8002402:	f7fe f997 	bl	8000734 <__aeabi_f2d>
 8002406:	a30a      	add	r3, pc, #40	@ (adr r3, 8002430 <calculateWheelSpeeds+0x128>)
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	f7fd ff04 	bl	8000218 <__aeabi_dmul>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f103 040c 	add.w	r4, r3, #12
 800241e:	f7fe f9e1 	bl	80007e4 <__aeabi_d2f>
 8002422:	4603      	mov	r3, r0
 8002424:	6023      	str	r3, [r4, #0]
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bd90      	pop	{r4, r7, pc}
 800242e:	bf00      	nop
 8002430:	ca834119 	.word	0xca834119
 8002434:	4091e7a9 	.word	0x4091e7a9
 8002438:	3f0d4fdf 	.word	0x3f0d4fdf

0800243c <HAL_TIM_PeriodElapsedCallback>:
//    setMotorSpeed(3, wheel_speeds[2]);
//    setMotorSpeed(4, wheel_speeds[3]);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b4b0      	push	{r4, r5, r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
if(htim == &htim2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d108      	bne.n	800245e <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 800244c:	4b07      	ldr	r3, [pc, #28]	@ (800246c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	1e54      	subs	r4, r2, #1
 8002454:	f143 0500 	adc.w	r5, r3, #0
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800245a:	e9c3 4500 	strd	r4, r5, [r3]
}
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bcb0      	pop	{r4, r5, r7}
 8002466:	4770      	bx	lr
 8002468:	200001ac 	.word	0x200001ac
 800246c:	20000558 	.word	0x20000558

08002470 <micros>:
uint64_t micros()
{
 8002470:	b4b0      	push	{r4, r5, r7}
 8002472:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 8002474:	4b09      	ldr	r3, [pc, #36]	@ (800249c <micros+0x2c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	2200      	movs	r2, #0
 800247c:	4618      	mov	r0, r3
 800247e:	4611      	mov	r1, r2
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <micros+0x30>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	1884      	adds	r4, r0, r2
 8002488:	eb41 0503 	adc.w	r5, r1, r3
 800248c:	4622      	mov	r2, r4
 800248e:	462b      	mov	r3, r5
}
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	bcb0      	pop	{r4, r5, r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	200001ac 	.word	0x200001ac
 80024a0:	20000558 	.word	0x20000558
 80024a4:	00000000 	.word	0x00000000

080024a8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 80024ae:	f7ff ffdf 	bl	8002470 <micros>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	49be      	ldr	r1, [pc, #760]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80024b8:	e9c1 2308 	strd	r2, r3, [r1, #32]
QEIdata.Position1[NEW] = EncodeRead[0];
 80024bc:	4bbd      	ldr	r3, [pc, #756]	@ (80027b4 <QEIEncoderPosVel_Update+0x30c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4abb      	ldr	r2, [pc, #748]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80024c2:	6013      	str	r3, [r2, #0]
QEIdata.Position2[NEW] = EncodeRead[1];
 80024c4:	4bbb      	ldr	r3, [pc, #748]	@ (80027b4 <QEIEncoderPosVel_Update+0x30c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4ab9      	ldr	r2, [pc, #740]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80024ca:	6093      	str	r3, [r2, #8]
QEIdata.Position3[NEW] = EncodeRead[2];
 80024cc:	4bb9      	ldr	r3, [pc, #740]	@ (80027b4 <QEIEncoderPosVel_Update+0x30c>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4ab7      	ldr	r2, [pc, #732]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80024d2:	6113      	str	r3, [r2, #16]
QEIdata.Position4[NEW] = EncodeRead[3];
 80024d4:	4bb7      	ldr	r3, [pc, #732]	@ (80027b4 <QEIEncoderPosVel_Update+0x30c>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4ab5      	ldr	r2, [pc, #724]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80024da:	6193      	str	r3, [r2, #24]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position1[NEW] % 3960;
 80024dc:	4bb4      	ldr	r3, [pc, #720]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4bb5      	ldr	r3, [pc, #724]	@ (80027b8 <QEIEncoderPosVel_Update+0x310>)
 80024e2:	fba3 1302 	umull	r1, r3, r3, r2
 80024e6:	0a5b      	lsrs	r3, r3, #9
 80024e8:	f640 7178 	movw	r1, #3960	@ 0xf78
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fa:	4bad      	ldr	r3, [pc, #692]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80024fc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
//calculate dx
int32_t diffPosition1 = QEIdata.Position1[NEW] - QEIdata.Position1[OLD];
 8002500:	4bab      	ldr	r3, [pc, #684]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4baa      	ldr	r3, [pc, #680]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
int32_t diffPosition2 = QEIdata.Position2[NEW] - QEIdata.Position2[OLD];
 800250c:	4ba8      	ldr	r3, [pc, #672]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	4ba7      	ldr	r3, [pc, #668]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	613b      	str	r3, [r7, #16]
int32_t diffPosition3 = QEIdata.Position3[NEW] - QEIdata.Position3[OLD];
 8002518:	4ba5      	ldr	r3, [pc, #660]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	4ba4      	ldr	r3, [pc, #656]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	60fb      	str	r3, [r7, #12]
int32_t diffPosition4 = QEIdata.Position4[NEW] - QEIdata.Position4[OLD];
 8002524:	4ba2      	ldr	r3, [pc, #648]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	4ba1      	ldr	r3, [pc, #644]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	60bb      	str	r3, [r7, #8]
//Handle Warp around
if(diffPosition1 > 32256)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f5b3 4ffc 	cmp.w	r3, #32256	@ 0x7e00
 8002536:	dd04      	ble.n	8002542 <QEIEncoderPosVel_Update+0x9a>
diffPosition1 -= 63360;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f5a3 4377 	sub.w	r3, r3, #63232	@ 0xf700
 800253e:	3b80      	subs	r3, #128	@ 0x80
 8002540:	617b      	str	r3, [r7, #20]
if(diffPosition1 < -32256)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f513 4ffc 	cmn.w	r3, #32256	@ 0x7e00
 8002548:	da04      	bge.n	8002554 <QEIEncoderPosVel_Update+0xac>
diffPosition1 += 63360;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f503 4377 	add.w	r3, r3, #63232	@ 0xf700
 8002550:	3380      	adds	r3, #128	@ 0x80
 8002552:	617b      	str	r3, [r7, #20]
if(diffPosition2 > 32256)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f5b3 4ffc 	cmp.w	r3, #32256	@ 0x7e00
 800255a:	dd04      	ble.n	8002566 <QEIEncoderPosVel_Update+0xbe>
diffPosition2 -= 63360;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f5a3 4377 	sub.w	r3, r3, #63232	@ 0xf700
 8002562:	3b80      	subs	r3, #128	@ 0x80
 8002564:	613b      	str	r3, [r7, #16]
if(diffPosition2 < -32256)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f513 4ffc 	cmn.w	r3, #32256	@ 0x7e00
 800256c:	da04      	bge.n	8002578 <QEIEncoderPosVel_Update+0xd0>
diffPosition2 += 63360;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f503 4377 	add.w	r3, r3, #63232	@ 0xf700
 8002574:	3380      	adds	r3, #128	@ 0x80
 8002576:	613b      	str	r3, [r7, #16]
if(diffPosition3 > 32256)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f5b3 4ffc 	cmp.w	r3, #32256	@ 0x7e00
 800257e:	dd04      	ble.n	800258a <QEIEncoderPosVel_Update+0xe2>
diffPosition3 -= 63360;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f5a3 4377 	sub.w	r3, r3, #63232	@ 0xf700
 8002586:	3b80      	subs	r3, #128	@ 0x80
 8002588:	60fb      	str	r3, [r7, #12]
if(diffPosition3 < -32256)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f513 4ffc 	cmn.w	r3, #32256	@ 0x7e00
 8002590:	da04      	bge.n	800259c <QEIEncoderPosVel_Update+0xf4>
diffPosition3 += 63360;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f503 4377 	add.w	r3, r3, #63232	@ 0xf700
 8002598:	3380      	adds	r3, #128	@ 0x80
 800259a:	60fb      	str	r3, [r7, #12]
if(diffPosition4 > 32256)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f5b3 4ffc 	cmp.w	r3, #32256	@ 0x7e00
 80025a2:	dd04      	ble.n	80025ae <QEIEncoderPosVel_Update+0x106>
diffPosition4 -= 63360;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f5a3 4377 	sub.w	r3, r3, #63232	@ 0xf700
 80025aa:	3b80      	subs	r3, #128	@ 0x80
 80025ac:	60bb      	str	r3, [r7, #8]
if(diffPosition4 < -32256)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f513 4ffc 	cmn.w	r3, #32256	@ 0x7e00
 80025b4:	da04      	bge.n	80025c0 <QEIEncoderPosVel_Update+0x118>
diffPosition4 += 63360;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f503 4377 	add.w	r3, r3, #63232	@ 0xf700
 80025bc:	3380      	adds	r3, #128	@ 0x80
 80025be:	60bb      	str	r3, [r7, #8]
//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 80025c0:	4b7b      	ldr	r3, [pc, #492]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80025c2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80025c6:	4b7a      	ldr	r3, [pc, #488]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80025c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80025cc:	1a84      	subs	r4, r0, r2
 80025ce:	eb61 0503 	sbc.w	r5, r1, r3
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fe f8cf 	bl	8000778 <__aeabi_ul2d>
 80025da:	a36f      	add	r3, pc, #444	@ (adr r3, 8002798 <QEIEncoderPosVel_Update+0x2f0>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fd fe1a 	bl	8000218 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe f8fa 	bl	80007e4 <__aeabi_d2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	607b      	str	r3, [r7, #4]
//calculate anglar velocity
QEIdata.QEIAngularVelocity1 = diffPosition1 / diffTime;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002606:	4b6a      	ldr	r3, [pc, #424]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002608:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
QEIdata.QEIAngularVelocity2 = diffPosition2 / diffTime;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002616:	ed97 7a01 	vldr	s14, [r7, #4]
 800261a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261e:	4b64      	ldr	r3, [pc, #400]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002620:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
QEIdata.QEIAngularVelocity3 = diffPosition3 / diffTime;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800262e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002636:	4b5e      	ldr	r3, [pc, #376]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002638:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
QEIdata.QEIAngularVelocity4 = diffPosition4 / diffTime;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002646:	ed97 7a01 	vldr	s14, [r7, #4]
 800264a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264e:	4b58      	ldr	r3, [pc, #352]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002650:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

angular[0] = ((QEIdata.Position1[NEW]*360)/(4*990));
 8002654:	4b56      	ldr	r3, [pc, #344]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	4a55      	ldr	r2, [pc, #340]	@ (80027b8 <QEIEncoderPosVel_Update+0x310>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0a5b      	lsrs	r3, r3, #9
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002670:	4b52      	ldr	r3, [pc, #328]	@ (80027bc <QEIEncoderPosVel_Update+0x314>)
 8002672:	edc3 7a00 	vstr	s15, [r3]
angular[1] = ((QEIdata.Position2[NEW]*360)/(4*990));
 8002676:	4b4e      	ldr	r3, [pc, #312]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	4a4d      	ldr	r2, [pc, #308]	@ (80027b8 <QEIEncoderPosVel_Update+0x310>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	0a5b      	lsrs	r3, r3, #9
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002692:	4b4a      	ldr	r3, [pc, #296]	@ (80027bc <QEIEncoderPosVel_Update+0x314>)
 8002694:	edc3 7a01 	vstr	s15, [r3, #4]
angular[2] = ((QEIdata.Position3[NEW]*360)/(4*990));
 8002698:	4b45      	ldr	r3, [pc, #276]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80026a0:	fb02 f303 	mul.w	r3, r2, r3
 80026a4:	4a44      	ldr	r2, [pc, #272]	@ (80027b8 <QEIEncoderPosVel_Update+0x310>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0a5b      	lsrs	r3, r3, #9
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b4:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <QEIEncoderPosVel_Update+0x314>)
 80026b6:	edc3 7a02 	vstr	s15, [r3, #8]
angular[3] = ((QEIdata.Position4[NEW]*360)/(4*990));
 80026ba:	4b3d      	ldr	r3, [pc, #244]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	4a3c      	ldr	r2, [pc, #240]	@ (80027b8 <QEIEncoderPosVel_Update+0x310>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	0a5b      	lsrs	r3, r3, #9
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d6:	4b39      	ldr	r3, [pc, #228]	@ (80027bc <QEIEncoderPosVel_Update+0x314>)
 80026d8:	edc3 7a03 	vstr	s15, [r3, #12]

omega[0] = ((QEIdata.QEIAngularVelocity1*360)/(4*990));
 80026dc:	4b34      	ldr	r3, [pc, #208]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80026de:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80026e2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80027c0 <QEIEncoderPosVel_Update+0x318>
 80026e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026ea:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80027c4 <QEIEncoderPosVel_Update+0x31c>
 80026ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026f2:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <QEIEncoderPosVel_Update+0x320>)
 80026f4:	edc3 7a00 	vstr	s15, [r3]
omega[1] = ((QEIdata.QEIAngularVelocity2*360)/(4*990));
 80026f8:	4b2d      	ldr	r3, [pc, #180]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 80026fa:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80026fe:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80027c0 <QEIEncoderPosVel_Update+0x318>
 8002702:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002706:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80027c4 <QEIEncoderPosVel_Update+0x31c>
 800270a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800270e:	4b2e      	ldr	r3, [pc, #184]	@ (80027c8 <QEIEncoderPosVel_Update+0x320>)
 8002710:	edc3 7a01 	vstr	s15, [r3, #4]
omega[2] = ((QEIdata.QEIAngularVelocity3*360)/(4*990));
 8002714:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002716:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800271a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80027c0 <QEIEncoderPosVel_Update+0x318>
 800271e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002722:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80027c4 <QEIEncoderPosVel_Update+0x31c>
 8002726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800272a:	4b27      	ldr	r3, [pc, #156]	@ (80027c8 <QEIEncoderPosVel_Update+0x320>)
 800272c:	edc3 7a02 	vstr	s15, [r3, #8]
omega[3] = ((QEIdata.QEIAngularVelocity4*360)/(4*990));
 8002730:	4b1f      	ldr	r3, [pc, #124]	@ (80027b0 <QEIEncoderPosVel_Update+0x308>)
 8002732:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002736:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80027c0 <QEIEncoderPosVel_Update+0x318>
 800273a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800273e:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80027c4 <QEIEncoderPosVel_Update+0x31c>
 8002742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <QEIEncoderPosVel_Update+0x320>)
 8002748:	edc3 7a03 	vstr	s15, [r3, #12]

omega_Filter[0] = (0.969*omega_Filter_Old[0])+(0.0155*omega[0])+(0.0155*omega_Old[0]);
 800274c:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <QEIEncoderPosVel_Update+0x324>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd ffef 	bl	8000734 <__aeabi_f2d>
 8002756:	a312      	add	r3, pc, #72	@ (adr r3, 80027a0 <QEIEncoderPosVel_Update+0x2f8>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fd fd5c 	bl	8000218 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4614      	mov	r4, r2
 8002766:	461d      	mov	r5, r3
 8002768:	4b17      	ldr	r3, [pc, #92]	@ (80027c8 <QEIEncoderPosVel_Update+0x320>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd ffe1 	bl	8000734 <__aeabi_f2d>
 8002772:	a30d      	add	r3, pc, #52	@ (adr r3, 80027a8 <QEIEncoderPosVel_Update+0x300>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd fd4e 	bl	8000218 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4620      	mov	r0, r4
 8002782:	4629      	mov	r1, r5
 8002784:	f7fd fe78 	bl	8000478 <__adddf3>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4614      	mov	r4, r2
 800278e:	461d      	mov	r5, r3
 8002790:	e01e      	b.n	80027d0 <QEIEncoderPosVel_Update+0x328>
 8002792:	bf00      	nop
 8002794:	f3af 8000 	nop.w
 8002798:	a0b5ed8d 	.word	0xa0b5ed8d
 800279c:	3eb0c6f7 	.word	0x3eb0c6f7
 80027a0:	49ba5e35 	.word	0x49ba5e35
 80027a4:	3fef020c 	.word	0x3fef020c
 80027a8:	c8b43958 	.word	0xc8b43958
 80027ac:	3f8fbe76 	.word	0x3f8fbe76
 80027b0:	20000510 	.word	0x20000510
 80027b4:	20000468 	.word	0x20000468
 80027b8:	21195767 	.word	0x21195767
 80027bc:	20000478 	.word	0x20000478
 80027c0:	43b40000 	.word	0x43b40000
 80027c4:	45778000 	.word	0x45778000
 80027c8:	20000488 	.word	0x20000488
 80027cc:	200004b8 	.word	0x200004b8
 80027d0:	4b85      	ldr	r3, [pc, #532]	@ (80029e8 <QEIEncoderPosVel_Update+0x540>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd ffad 	bl	8000734 <__aeabi_f2d>
 80027da:	a37f      	add	r3, pc, #508	@ (adr r3, 80029d8 <QEIEncoderPosVel_Update+0x530>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fd fd1a 	bl	8000218 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd fe44 	bl	8000478 <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fd fff4 	bl	80007e4 <__aeabi_d2f>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a7b      	ldr	r2, [pc, #492]	@ (80029ec <QEIEncoderPosVel_Update+0x544>)
 8002800:	6013      	str	r3, [r2, #0]
omega_Old[0] = omega[0];
 8002802:	4b7b      	ldr	r3, [pc, #492]	@ (80029f0 <QEIEncoderPosVel_Update+0x548>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a78      	ldr	r2, [pc, #480]	@ (80029e8 <QEIEncoderPosVel_Update+0x540>)
 8002808:	6013      	str	r3, [r2, #0]
omega_Filter_Old[0] = omega_Filter[0];
 800280a:	4b78      	ldr	r3, [pc, #480]	@ (80029ec <QEIEncoderPosVel_Update+0x544>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a79      	ldr	r2, [pc, #484]	@ (80029f4 <QEIEncoderPosVel_Update+0x54c>)
 8002810:	6013      	str	r3, [r2, #0]

omega_Filter[1] = (0.969*omega_Filter_Old[1])+(0.0155*omega[1])+(0.0155*omega_Old[1]);
 8002812:	4b78      	ldr	r3, [pc, #480]	@ (80029f4 <QEIEncoderPosVel_Update+0x54c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd ff8c 	bl	8000734 <__aeabi_f2d>
 800281c:	a370      	add	r3, pc, #448	@ (adr r3, 80029e0 <QEIEncoderPosVel_Update+0x538>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fd fcf9 	bl	8000218 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4614      	mov	r4, r2
 800282c:	461d      	mov	r5, r3
 800282e:	4b70      	ldr	r3, [pc, #448]	@ (80029f0 <QEIEncoderPosVel_Update+0x548>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd ff7e 	bl	8000734 <__aeabi_f2d>
 8002838:	a367      	add	r3, pc, #412	@ (adr r3, 80029d8 <QEIEncoderPosVel_Update+0x530>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fd fceb 	bl	8000218 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4620      	mov	r0, r4
 8002848:	4629      	mov	r1, r5
 800284a:	f7fd fe15 	bl	8000478 <__adddf3>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4614      	mov	r4, r2
 8002854:	461d      	mov	r5, r3
 8002856:	4b64      	ldr	r3, [pc, #400]	@ (80029e8 <QEIEncoderPosVel_Update+0x540>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd ff6a 	bl	8000734 <__aeabi_f2d>
 8002860:	a35d      	add	r3, pc, #372	@ (adr r3, 80029d8 <QEIEncoderPosVel_Update+0x530>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	f7fd fcd7 	bl	8000218 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4620      	mov	r0, r4
 8002870:	4629      	mov	r1, r5
 8002872:	f7fd fe01 	bl	8000478 <__adddf3>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f7fd ffb1 	bl	80007e4 <__aeabi_d2f>
 8002882:	4603      	mov	r3, r0
 8002884:	4a59      	ldr	r2, [pc, #356]	@ (80029ec <QEIEncoderPosVel_Update+0x544>)
 8002886:	6053      	str	r3, [r2, #4]
omega_Old[1] = omega[1];
 8002888:	4b59      	ldr	r3, [pc, #356]	@ (80029f0 <QEIEncoderPosVel_Update+0x548>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a56      	ldr	r2, [pc, #344]	@ (80029e8 <QEIEncoderPosVel_Update+0x540>)
 800288e:	6053      	str	r3, [r2, #4]
omega_Filter_Old[1] = omega_Filter[1];
 8002890:	4b56      	ldr	r3, [pc, #344]	@ (80029ec <QEIEncoderPosVel_Update+0x544>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a57      	ldr	r2, [pc, #348]	@ (80029f4 <QEIEncoderPosVel_Update+0x54c>)
 8002896:	6053      	str	r3, [r2, #4]

omega_Filter[2] = (0.969*omega_Filter_Old[2])+(0.0155*omega[2])+(0.0155*omega_Old[2]);
 8002898:	4b56      	ldr	r3, [pc, #344]	@ (80029f4 <QEIEncoderPosVel_Update+0x54c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd ff49 	bl	8000734 <__aeabi_f2d>
 80028a2:	a34f      	add	r3, pc, #316	@ (adr r3, 80029e0 <QEIEncoderPosVel_Update+0x538>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd fcb6 	bl	8000218 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4614      	mov	r4, r2
 80028b2:	461d      	mov	r5, r3
 80028b4:	4b4e      	ldr	r3, [pc, #312]	@ (80029f0 <QEIEncoderPosVel_Update+0x548>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd ff3b 	bl	8000734 <__aeabi_f2d>
 80028be:	a346      	add	r3, pc, #280	@ (adr r3, 80029d8 <QEIEncoderPosVel_Update+0x530>)
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	f7fd fca8 	bl	8000218 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4620      	mov	r0, r4
 80028ce:	4629      	mov	r1, r5
 80028d0:	f7fd fdd2 	bl	8000478 <__adddf3>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4614      	mov	r4, r2
 80028da:	461d      	mov	r5, r3
 80028dc:	4b42      	ldr	r3, [pc, #264]	@ (80029e8 <QEIEncoderPosVel_Update+0x540>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd ff27 	bl	8000734 <__aeabi_f2d>
 80028e6:	a33c      	add	r3, pc, #240	@ (adr r3, 80029d8 <QEIEncoderPosVel_Update+0x530>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f7fd fc94 	bl	8000218 <__aeabi_dmul>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fd fdbe 	bl	8000478 <__adddf3>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f7fd ff6e 	bl	80007e4 <__aeabi_d2f>
 8002908:	4603      	mov	r3, r0
 800290a:	4a38      	ldr	r2, [pc, #224]	@ (80029ec <QEIEncoderPosVel_Update+0x544>)
 800290c:	6093      	str	r3, [r2, #8]
omega_Old[2] = omega[2];
 800290e:	4b38      	ldr	r3, [pc, #224]	@ (80029f0 <QEIEncoderPosVel_Update+0x548>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4a35      	ldr	r2, [pc, #212]	@ (80029e8 <QEIEncoderPosVel_Update+0x540>)
 8002914:	6093      	str	r3, [r2, #8]
omega_Filter_Old[2] = omega_Filter[2];
 8002916:	4b35      	ldr	r3, [pc, #212]	@ (80029ec <QEIEncoderPosVel_Update+0x544>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4a36      	ldr	r2, [pc, #216]	@ (80029f4 <QEIEncoderPosVel_Update+0x54c>)
 800291c:	6093      	str	r3, [r2, #8]

omega_Filter[3] = (0.969*omega_Filter_Old[3])+(0.0155*omega[3])+(0.0155*omega_Old[3]);
 800291e:	4b35      	ldr	r3, [pc, #212]	@ (80029f4 <QEIEncoderPosVel_Update+0x54c>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd ff06 	bl	8000734 <__aeabi_f2d>
 8002928:	a32d      	add	r3, pc, #180	@ (adr r3, 80029e0 <QEIEncoderPosVel_Update+0x538>)
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f7fd fc73 	bl	8000218 <__aeabi_dmul>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4614      	mov	r4, r2
 8002938:	461d      	mov	r5, r3
 800293a:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <QEIEncoderPosVel_Update+0x548>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fef8 	bl	8000734 <__aeabi_f2d>
 8002944:	a324      	add	r3, pc, #144	@ (adr r3, 80029d8 <QEIEncoderPosVel_Update+0x530>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f7fd fc65 	bl	8000218 <__aeabi_dmul>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4620      	mov	r0, r4
 8002954:	4629      	mov	r1, r5
 8002956:	f7fd fd8f 	bl	8000478 <__adddf3>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4614      	mov	r4, r2
 8002960:	461d      	mov	r5, r3
 8002962:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <QEIEncoderPosVel_Update+0x540>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fee4 	bl	8000734 <__aeabi_f2d>
 800296c:	a31a      	add	r3, pc, #104	@ (adr r3, 80029d8 <QEIEncoderPosVel_Update+0x530>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f7fd fc51 	bl	8000218 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fd fd7b 	bl	8000478 <__adddf3>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fd ff2b 	bl	80007e4 <__aeabi_d2f>
 800298e:	4603      	mov	r3, r0
 8002990:	4a16      	ldr	r2, [pc, #88]	@ (80029ec <QEIEncoderPosVel_Update+0x544>)
 8002992:	60d3      	str	r3, [r2, #12]
omega_Old[3] = omega[3];
 8002994:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <QEIEncoderPosVel_Update+0x548>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a13      	ldr	r2, [pc, #76]	@ (80029e8 <QEIEncoderPosVel_Update+0x540>)
 800299a:	60d3      	str	r3, [r2, #12]
omega_Filter_Old[3] = omega_Filter[3];
 800299c:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <QEIEncoderPosVel_Update+0x544>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <QEIEncoderPosVel_Update+0x54c>)
 80029a2:	60d3      	str	r3, [r2, #12]
//speed_fill = (0.969*speed_fill_1)+(0.0155*speed)+(0.0155*speed_1);
//speed_1 = speed;
//speed_fill_1 = speed_fill;
//store value for next loop
QEIdata.Position1[OLD] = QEIdata.Position1[NEW];
 80029a4:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a13      	ldr	r2, [pc, #76]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029aa:	6053      	str	r3, [r2, #4]
QEIdata.Position2[OLD] = QEIdata.Position2[NEW];
 80029ac:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a11      	ldr	r2, [pc, #68]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029b2:	60d3      	str	r3, [r2, #12]
QEIdata.Position3[OLD] = QEIdata.Position3[NEW];
 80029b4:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	4a0f      	ldr	r2, [pc, #60]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029ba:	6153      	str	r3, [r2, #20]
QEIdata.Position4[OLD] = QEIdata.Position4[NEW];
 80029bc:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4a0d      	ldr	r2, [pc, #52]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029c2:	61d3      	str	r3, [r2, #28]

QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80029ca:	490b      	ldr	r1, [pc, #44]	@ (80029f8 <QEIEncoderPosVel_Update+0x550>)
 80029cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bdb0      	pop	{r4, r5, r7, pc}
 80029d8:	c8b43958 	.word	0xc8b43958
 80029dc:	3f8fbe76 	.word	0x3f8fbe76
 80029e0:	49ba5e35 	.word	0x49ba5e35
 80029e4:	3fef020c 	.word	0x3fef020c
 80029e8:	20000498 	.word	0x20000498
 80029ec:	200004a8 	.word	0x200004a8
 80029f0:	20000488 	.word	0x20000488
 80029f4:	200004b8 	.word	0x200004b8
 80029f8:	20000510 	.word	0x20000510

080029fc <PIDmotor1>:
//	  }
//		PWMmap = mapFloat(Velocontrol.Output[NEW],-12.0,12.0,-999,999);
//		Motor1(PWMmap);
//}
void PIDmotor1(float target)
{
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint64_t timestamp3 =0;
	int64_t currentTime = micros();
 8002a06:	f7ff fd33 	bl	8002470 <micros>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(currentTime > timestamp3)
 8002a12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a16:	4956      	ldr	r1, [pc, #344]	@ (8002b70 <PIDmotor1+0x174>)
 8002a18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a1c:	4290      	cmp	r0, r2
 8002a1e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002a22:	f080 8086 	bcs.w	8002b32 <PIDmotor1+0x136>
	  {
			Velocontrol.omega[NEW] = omega_Filter[0];
 8002a26:	4b53      	ldr	r3, [pc, #332]	@ (8002b74 <PIDmotor1+0x178>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a53      	ldr	r2, [pc, #332]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a2c:	6293      	str	r3, [r2, #40]	@ 0x28
			Velocontrol.Error[NEW] = target - Velocontrol.omega[NEW];
 8002a2e:	4b52      	ldr	r3, [pc, #328]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a30:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002a34:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a3e:	edc3 7a03 	vstr	s15, [r3, #12]
			Velocontrol.Output[NEW] = Velocontrol.Output[OLD] + (Velocontrol.kp*(Velocontrol.Error[NEW]-Velocontrol.Error[OLD]))+(Velocontrol.ki*(Velocontrol.Error[NEW]*Velocontrol.T))-(Velocontrol.kd*((Velocontrol.omega[NEW]-(2*Velocontrol.omega[OLD])+(Velocontrol.omega[OLDER]))/Velocontrol.T));
 8002a42:	4b4d      	ldr	r3, [pc, #308]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a44:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a48:	4b4b      	ldr	r3, [pc, #300]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a4a:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a50:	ed93 6a03 	vldr	s12, [r3, #12]
 8002a54:	4b48      	ldr	r3, [pc, #288]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a56:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a5a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a66:	4b44      	ldr	r3, [pc, #272]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a68:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a6c:	4b42      	ldr	r3, [pc, #264]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a6e:	ed93 6a03 	vldr	s12, [r3, #12]
 8002a72:	4b41      	ldr	r3, [pc, #260]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a74:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002a78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a84:	4b3c      	ldr	r3, [pc, #240]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a86:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a8c:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 8002a90:	4b39      	ldr	r3, [pc, #228]	@ (8002b78 <PIDmotor1+0x17c>)
 8002a92:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002a96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a9a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002a9e:	4b36      	ldr	r3, [pc, #216]	@ (8002b78 <PIDmotor1+0x17c>)
 8002aa0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002aa4:	ee76 5a27 	vadd.f32	s11, s12, s15
 8002aa8:	4b33      	ldr	r3, [pc, #204]	@ (8002b78 <PIDmotor1+0x17c>)
 8002aaa:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8002aae:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aba:	4b2f      	ldr	r3, [pc, #188]	@ (8002b78 <PIDmotor1+0x17c>)
 8002abc:	edc3 7a00 	vstr	s15, [r3]
			if(Velocontrol.Output[NEW]>12)Velocontrol.Output[NEW]=12;
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b78 <PIDmotor1+0x17c>)
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	dd02      	ble.n	8002ada <PIDmotor1+0xde>
 8002ad4:	4b28      	ldr	r3, [pc, #160]	@ (8002b78 <PIDmotor1+0x17c>)
 8002ad6:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <PIDmotor1+0x180>)
 8002ad8:	601a      	str	r2, [r3, #0]
			if(Velocontrol.Output[NEW]<-12)Velocontrol.Output[NEW]=-12;
 8002ada:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <PIDmotor1+0x17c>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8002ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aec:	d502      	bpl.n	8002af4 <PIDmotor1+0xf8>
 8002aee:	4b22      	ldr	r3, [pc, #136]	@ (8002b78 <PIDmotor1+0x17c>)
 8002af0:	4a23      	ldr	r2, [pc, #140]	@ (8002b80 <PIDmotor1+0x184>)
 8002af2:	601a      	str	r2, [r3, #0]
			Velocontrol.omega[OLDER] = Velocontrol.omega[OLD];
 8002af4:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <PIDmotor1+0x17c>)
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <PIDmotor1+0x17c>)
 8002afa:	6313      	str	r3, [r2, #48]	@ 0x30
			Velocontrol.omega[OLD]  = Velocontrol.omega[NEW];
 8002afc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <PIDmotor1+0x17c>)
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	4a1d      	ldr	r2, [pc, #116]	@ (8002b78 <PIDmotor1+0x17c>)
 8002b02:	62d3      	str	r3, [r2, #44]	@ 0x2c
			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
 8002b04:	4b1c      	ldr	r3, [pc, #112]	@ (8002b78 <PIDmotor1+0x17c>)
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <PIDmotor1+0x17c>)
 8002b0a:	6153      	str	r3, [r2, #20]
			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <PIDmotor1+0x17c>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a19      	ldr	r2, [pc, #100]	@ (8002b78 <PIDmotor1+0x17c>)
 8002b12:	6113      	str	r3, [r2, #16]
			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
 8002b14:	4b18      	ldr	r3, [pc, #96]	@ (8002b78 <PIDmotor1+0x17c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a17      	ldr	r2, [pc, #92]	@ (8002b78 <PIDmotor1+0x17c>)
 8002b1a:	6053      	str	r3, [r2, #4]
			timestamp3 =currentTime + 100;
 8002b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b20:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8002b24:	f143 0500 	adc.w	r5, r3, #0
 8002b28:	4622      	mov	r2, r4
 8002b2a:	462b      	mov	r3, r5
 8002b2c:	4910      	ldr	r1, [pc, #64]	@ (8002b70 <PIDmotor1+0x174>)
 8002b2e:	e9c1 2300 	strd	r2, r3, [r1]
	  }
		PWMmap[0] = mapFloat(Velocontrol.Output[NEW],-12.0,12.0,-999,999);
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <PIDmotor1+0x17c>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8002b84 <PIDmotor1+0x188>
 8002b3c:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8002b88 <PIDmotor1+0x18c>
 8002b40:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 8002b44:	eefa 0a08 	vmov.f32	s1, #168	@ 0xc1400000 -12.0
 8002b48:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4c:	f000 fa7e 	bl	800304c <mapFloat>
 8002b50:	eef0 7a40 	vmov.f32	s15, s0
 8002b54:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <PIDmotor1+0x190>)
 8002b56:	edc3 7a00 	vstr	s15, [r3]
		Motor1(PWMmap[0]);
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <PIDmotor1+0x190>)
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	eeb0 0a67 	vmov.f32	s0, s15
 8002b64:	f7ff fa3c 	bl	8001fe0 <Motor1>
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b70:	20000638 	.word	0x20000638
 8002b74:	200004a8 	.word	0x200004a8
 8002b78:	20000560 	.word	0x20000560
 8002b7c:	41400000 	.word	0x41400000
 8002b80:	c1400000 	.word	0xc1400000
 8002b84:	4479c000 	.word	0x4479c000
 8002b88:	c479c000 	.word	0xc479c000
 8002b8c:	200004c8 	.word	0x200004c8

08002b90 <PIDmotor2>:
void PIDmotor2(float target)
{
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint64_t timestamp4 =0;
	int64_t currentTime = micros();
 8002b9a:	f7ff fc69 	bl	8002470 <micros>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(currentTime > timestamp4)
 8002ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002baa:	4956      	ldr	r1, [pc, #344]	@ (8002d04 <PIDmotor2+0x174>)
 8002bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bb0:	4290      	cmp	r0, r2
 8002bb2:	eb71 0303 	sbcs.w	r3, r1, r3
 8002bb6:	f080 8086 	bcs.w	8002cc6 <PIDmotor2+0x136>
	  {
			Velocontrol2.omega[NEW] = omega_Filter[1];
 8002bba:	4b53      	ldr	r3, [pc, #332]	@ (8002d08 <PIDmotor2+0x178>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	4a53      	ldr	r2, [pc, #332]	@ (8002d0c <PIDmotor2+0x17c>)
 8002bc0:	6293      	str	r3, [r2, #40]	@ 0x28
			Velocontrol2.Error[NEW] = target - Velocontrol2.omega[NEW];
 8002bc2:	4b52      	ldr	r3, [pc, #328]	@ (8002d0c <PIDmotor2+0x17c>)
 8002bc4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002bc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8002d0c <PIDmotor2+0x17c>)
 8002bd2:	edc3 7a03 	vstr	s15, [r3, #12]
			Velocontrol2.Output[NEW] = Velocontrol2.Output[OLD] + (Velocontrol2.kp*(Velocontrol2.Error[NEW]-Velocontrol2.Error[OLD]))+(Velocontrol2.ki*(Velocontrol2.Error[NEW]*Velocontrol2.T))-(Velocontrol2.kd*((Velocontrol2.omega[NEW]-(2*Velocontrol2.omega[OLD])+(Velocontrol2.omega[OLDER]))/Velocontrol2.T));
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8002d0c <PIDmotor2+0x17c>)
 8002bd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8002d0c <PIDmotor2+0x17c>)
 8002bde:	edd3 6a06 	vldr	s13, [r3, #24]
 8002be2:	4b4a      	ldr	r3, [pc, #296]	@ (8002d0c <PIDmotor2+0x17c>)
 8002be4:	ed93 6a03 	vldr	s12, [r3, #12]
 8002be8:	4b48      	ldr	r3, [pc, #288]	@ (8002d0c <PIDmotor2+0x17c>)
 8002bea:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfa:	4b44      	ldr	r3, [pc, #272]	@ (8002d0c <PIDmotor2+0x17c>)
 8002bfc:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c00:	4b42      	ldr	r3, [pc, #264]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c02:	ed93 6a03 	vldr	s12, [r3, #12]
 8002c06:	4b41      	ldr	r3, [pc, #260]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c08:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002c0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	4b3c      	ldr	r3, [pc, #240]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c1a:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c20:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 8002c24:	4b39      	ldr	r3, [pc, #228]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c26:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002c2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c2e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002c32:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c34:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002c38:	ee76 5a27 	vadd.f32	s11, s12, s15
 8002c3c:	4b33      	ldr	r3, [pc, #204]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c3e:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8002c42:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c50:	edc3 7a00 	vstr	s15, [r3]
			if(Velocontrol2.Output[NEW]>12)Velocontrol2.Output[NEW]=12;
 8002c54:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c66:	dd02      	ble.n	8002c6e <PIDmotor2+0xde>
 8002c68:	4b28      	ldr	r3, [pc, #160]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c6a:	4a29      	ldr	r2, [pc, #164]	@ (8002d10 <PIDmotor2+0x180>)
 8002c6c:	601a      	str	r2, [r3, #0]
			if(Velocontrol2.Output[NEW]<-12)Velocontrol2.Output[NEW]=-12;
 8002c6e:	4b27      	ldr	r3, [pc, #156]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8002c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	d502      	bpl.n	8002c88 <PIDmotor2+0xf8>
 8002c82:	4b22      	ldr	r3, [pc, #136]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c84:	4a23      	ldr	r2, [pc, #140]	@ (8002d14 <PIDmotor2+0x184>)
 8002c86:	601a      	str	r2, [r3, #0]
			Velocontrol2.omega[OLDER] = Velocontrol2.omega[OLD];
 8002c88:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c8e:	6313      	str	r3, [r2, #48]	@ 0x30
			Velocontrol2.omega[OLD]  = Velocontrol2.omega[NEW];
 8002c90:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c94:	4a1d      	ldr	r2, [pc, #116]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
			Velocontrol2.Error[OLDER] = Velocontrol2.Error[OLD];
 8002c98:	4b1c      	ldr	r3, [pc, #112]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <PIDmotor2+0x17c>)
 8002c9e:	6153      	str	r3, [r2, #20]
			Velocontrol2.Error[OLD] = Velocontrol2.Error[NEW];
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d0c <PIDmotor2+0x17c>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a19      	ldr	r2, [pc, #100]	@ (8002d0c <PIDmotor2+0x17c>)
 8002ca6:	6113      	str	r3, [r2, #16]
			Velocontrol2.Output[OLD] = Velocontrol2.Output[NEW];
 8002ca8:	4b18      	ldr	r3, [pc, #96]	@ (8002d0c <PIDmotor2+0x17c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a17      	ldr	r2, [pc, #92]	@ (8002d0c <PIDmotor2+0x17c>)
 8002cae:	6053      	str	r3, [r2, #4]
			timestamp4 =currentTime + 100;
 8002cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb4:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8002cb8:	f143 0500 	adc.w	r5, r3, #0
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	462b      	mov	r3, r5
 8002cc0:	4910      	ldr	r1, [pc, #64]	@ (8002d04 <PIDmotor2+0x174>)
 8002cc2:	e9c1 2300 	strd	r2, r3, [r1]
	  }
		PWMmap[1] = mapFloat(Velocontrol2.Output[NEW],-12.0,12.0,-999,999);
 8002cc6:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <PIDmotor2+0x17c>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8002d18 <PIDmotor2+0x188>
 8002cd0:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8002d1c <PIDmotor2+0x18c>
 8002cd4:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 8002cd8:	eefa 0a08 	vmov.f32	s1, #168	@ 0xc1400000 -12.0
 8002cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce0:	f000 f9b4 	bl	800304c <mapFloat>
 8002ce4:	eef0 7a40 	vmov.f32	s15, s0
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d20 <PIDmotor2+0x190>)
 8002cea:	edc3 7a01 	vstr	s15, [r3, #4]
		Motor2(PWMmap[1]);
 8002cee:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <PIDmotor2+0x190>)
 8002cf0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf8:	f7ff f9b8 	bl	800206c <Motor2>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bdb0      	pop	{r4, r5, r7, pc}
 8002d04:	20000640 	.word	0x20000640
 8002d08:	200004a8 	.word	0x200004a8
 8002d0c:	20000594 	.word	0x20000594
 8002d10:	41400000 	.word	0x41400000
 8002d14:	c1400000 	.word	0xc1400000
 8002d18:	4479c000 	.word	0x4479c000
 8002d1c:	c479c000 	.word	0xc479c000
 8002d20:	200004c8 	.word	0x200004c8

08002d24 <PIDmotor3>:
void PIDmotor3(float target)
{
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint64_t timestamp5 =0;
	int64_t currentTime = micros();
 8002d2e:	f7ff fb9f 	bl	8002470 <micros>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(currentTime > timestamp5)
 8002d3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d3e:	4956      	ldr	r1, [pc, #344]	@ (8002e98 <PIDmotor3+0x174>)
 8002d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d44:	4290      	cmp	r0, r2
 8002d46:	eb71 0303 	sbcs.w	r3, r1, r3
 8002d4a:	f080 8086 	bcs.w	8002e5a <PIDmotor3+0x136>
	  {
			Velocontrol3.omega[NEW] = omega_Filter[2];
 8002d4e:	4b53      	ldr	r3, [pc, #332]	@ (8002e9c <PIDmotor3+0x178>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4a53      	ldr	r2, [pc, #332]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d54:	6293      	str	r3, [r2, #40]	@ 0x28
			Velocontrol3.Error[NEW] = target - Velocontrol3.omega[NEW];
 8002d56:	4b52      	ldr	r3, [pc, #328]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d58:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002d5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d64:	4b4e      	ldr	r3, [pc, #312]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d66:	edc3 7a03 	vstr	s15, [r3, #12]
			Velocontrol3.Output[NEW] = Velocontrol3.Output[OLD] + (Velocontrol3.kp*(Velocontrol3.Error[NEW]-Velocontrol3.Error[OLD]))+(Velocontrol3.ki*(Velocontrol3.Error[NEW]*Velocontrol3.T))-(Velocontrol3.kd*((Velocontrol3.omega[NEW]-(2*Velocontrol3.omega[OLD])+(Velocontrol3.omega[OLDER]))/Velocontrol3.T));
 8002d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d72:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d78:	ed93 6a03 	vldr	s12, [r3, #12]
 8002d7c:	4b48      	ldr	r3, [pc, #288]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d82:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d8e:	4b44      	ldr	r3, [pc, #272]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d90:	edd3 6a07 	vldr	s13, [r3, #28]
 8002d94:	4b42      	ldr	r3, [pc, #264]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d96:	ed93 6a03 	vldr	s12, [r3, #12]
 8002d9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002d9c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002da0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dac:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002dae:	edd3 6a08 	vldr	s13, [r3, #32]
 8002db2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002db4:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 8002db8:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002dba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002dbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dc2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002dc6:	4b36      	ldr	r3, [pc, #216]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002dc8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002dcc:	ee76 5a27 	vadd.f32	s11, s12, s15
 8002dd0:	4b33      	ldr	r3, [pc, #204]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002dd2:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8002dd6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002de4:	edc3 7a00 	vstr	s15, [r3]
			if(Velocontrol3.Output[NEW]>12)Velocontrol3.Output[NEW]=12;
 8002de8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfa:	dd02      	ble.n	8002e02 <PIDmotor3+0xde>
 8002dfc:	4b28      	ldr	r3, [pc, #160]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002dfe:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <PIDmotor3+0x180>)
 8002e00:	601a      	str	r2, [r3, #0]
			if(Velocontrol3.Output[NEW]<-12)Velocontrol3.Output[NEW]=-12;
 8002e02:	4b27      	ldr	r3, [pc, #156]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e04:	edd3 7a00 	vldr	s15, [r3]
 8002e08:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8002e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e14:	d502      	bpl.n	8002e1c <PIDmotor3+0xf8>
 8002e16:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e18:	4a23      	ldr	r2, [pc, #140]	@ (8002ea8 <PIDmotor3+0x184>)
 8002e1a:	601a      	str	r2, [r3, #0]
			Velocontrol3.omega[OLDER] = Velocontrol3.omega[OLD];
 8002e1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e22:	6313      	str	r3, [r2, #48]	@ 0x30
			Velocontrol3.omega[OLD]  = Velocontrol3.omega[NEW];
 8002e24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
			Velocontrol3.Error[OLDER] = Velocontrol3.Error[OLD];
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e32:	6153      	str	r3, [r2, #20]
			Velocontrol3.Error[OLD] = Velocontrol3.Error[NEW];
 8002e34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a19      	ldr	r2, [pc, #100]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e3a:	6113      	str	r3, [r2, #16]
			Velocontrol3.Output[OLD] = Velocontrol3.Output[NEW];
 8002e3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a17      	ldr	r2, [pc, #92]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e42:	6053      	str	r3, [r2, #4]
			timestamp5 =currentTime + 100;
 8002e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e48:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8002e4c:	f143 0500 	adc.w	r5, r3, #0
 8002e50:	4622      	mov	r2, r4
 8002e52:	462b      	mov	r3, r5
 8002e54:	4910      	ldr	r1, [pc, #64]	@ (8002e98 <PIDmotor3+0x174>)
 8002e56:	e9c1 2300 	strd	r2, r3, [r1]
	  }
		PWMmap[2] = mapFloat(Velocontrol3.Output[NEW],-12.0,12.0,-999,999);
 8002e5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <PIDmotor3+0x17c>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8002eac <PIDmotor3+0x188>
 8002e64:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8002eb0 <PIDmotor3+0x18c>
 8002e68:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 8002e6c:	eefa 0a08 	vmov.f32	s1, #168	@ 0xc1400000 -12.0
 8002e70:	eeb0 0a67 	vmov.f32	s0, s15
 8002e74:	f000 f8ea 	bl	800304c <mapFloat>
 8002e78:	eef0 7a40 	vmov.f32	s15, s0
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <PIDmotor3+0x190>)
 8002e7e:	edc3 7a02 	vstr	s15, [r3, #8]
		Motor3(PWMmap[2]);
 8002e82:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <PIDmotor3+0x190>)
 8002e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e88:	eeb0 0a67 	vmov.f32	s0, s15
 8002e8c:	f7ff f932 	bl	80020f4 <Motor3>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bdb0      	pop	{r4, r5, r7, pc}
 8002e98:	20000648 	.word	0x20000648
 8002e9c:	200004a8 	.word	0x200004a8
 8002ea0:	200005c8 	.word	0x200005c8
 8002ea4:	41400000 	.word	0x41400000
 8002ea8:	c1400000 	.word	0xc1400000
 8002eac:	4479c000 	.word	0x4479c000
 8002eb0:	c479c000 	.word	0xc479c000
 8002eb4:	200004c8 	.word	0x200004c8

08002eb8 <PIDmotor4>:
void PIDmotor4(float target)
{
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint64_t timestamp6 =0;
	int64_t currentTime = micros();
 8002ec2:	f7ff fad5 	bl	8002470 <micros>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(currentTime > timestamp6)
 8002ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ed2:	4956      	ldr	r1, [pc, #344]	@ (800302c <PIDmotor4+0x174>)
 8002ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ed8:	4290      	cmp	r0, r2
 8002eda:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ede:	f080 8086 	bcs.w	8002fee <PIDmotor4+0x136>
	  {
			Velocontrol4.omega[NEW] = omega_Filter[3];
 8002ee2:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <PIDmotor4+0x178>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a53      	ldr	r2, [pc, #332]	@ (8003034 <PIDmotor4+0x17c>)
 8002ee8:	6293      	str	r3, [r2, #40]	@ 0x28
			Velocontrol4.Error[NEW] = target - Velocontrol4.omega[NEW];
 8002eea:	4b52      	ldr	r3, [pc, #328]	@ (8003034 <PIDmotor4+0x17c>)
 8002eec:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002ef0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8003034 <PIDmotor4+0x17c>)
 8002efa:	edc3 7a03 	vstr	s15, [r3, #12]
			Velocontrol4.Output[NEW] = Velocontrol4.Output[OLD] + (Velocontrol4.kp*(Velocontrol4.Error[NEW]-Velocontrol4.Error[OLD]))+(Velocontrol4.ki*(Velocontrol4.Error[NEW]*Velocontrol4.T))-(Velocontrol4.kd*((Velocontrol4.omega[NEW]-(2*Velocontrol4.omega[OLD])+(Velocontrol4.omega[OLDER]))/Velocontrol4.T));
 8002efe:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <PIDmotor4+0x17c>)
 8002f00:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f04:	4b4b      	ldr	r3, [pc, #300]	@ (8003034 <PIDmotor4+0x17c>)
 8002f06:	edd3 6a06 	vldr	s13, [r3, #24]
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003034 <PIDmotor4+0x17c>)
 8002f0c:	ed93 6a03 	vldr	s12, [r3, #12]
 8002f10:	4b48      	ldr	r3, [pc, #288]	@ (8003034 <PIDmotor4+0x17c>)
 8002f12:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f16:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f22:	4b44      	ldr	r3, [pc, #272]	@ (8003034 <PIDmotor4+0x17c>)
 8002f24:	edd3 6a07 	vldr	s13, [r3, #28]
 8002f28:	4b42      	ldr	r3, [pc, #264]	@ (8003034 <PIDmotor4+0x17c>)
 8002f2a:	ed93 6a03 	vldr	s12, [r3, #12]
 8002f2e:	4b41      	ldr	r3, [pc, #260]	@ (8003034 <PIDmotor4+0x17c>)
 8002f30:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002f34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f40:	4b3c      	ldr	r3, [pc, #240]	@ (8003034 <PIDmotor4+0x17c>)
 8002f42:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f46:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <PIDmotor4+0x17c>)
 8002f48:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 8002f4c:	4b39      	ldr	r3, [pc, #228]	@ (8003034 <PIDmotor4+0x17c>)
 8002f4e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002f52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f56:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002f5a:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <PIDmotor4+0x17c>)
 8002f5c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002f60:	ee76 5a27 	vadd.f32	s11, s12, s15
 8002f64:	4b33      	ldr	r3, [pc, #204]	@ (8003034 <PIDmotor4+0x17c>)
 8002f66:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8002f6a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f76:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <PIDmotor4+0x17c>)
 8002f78:	edc3 7a00 	vstr	s15, [r3]
			if(Velocontrol4.Output[NEW]>12)Velocontrol4.Output[NEW]=12;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <PIDmotor4+0x17c>)
 8002f7e:	edd3 7a00 	vldr	s15, [r3]
 8002f82:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	dd02      	ble.n	8002f96 <PIDmotor4+0xde>
 8002f90:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <PIDmotor4+0x17c>)
 8002f92:	4a29      	ldr	r2, [pc, #164]	@ (8003038 <PIDmotor4+0x180>)
 8002f94:	601a      	str	r2, [r3, #0]
			if(Velocontrol4.Output[NEW]<-12)Velocontrol4.Output[NEW]=-12;
 8002f96:	4b27      	ldr	r3, [pc, #156]	@ (8003034 <PIDmotor4+0x17c>)
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8002fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa8:	d502      	bpl.n	8002fb0 <PIDmotor4+0xf8>
 8002faa:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <PIDmotor4+0x17c>)
 8002fac:	4a23      	ldr	r2, [pc, #140]	@ (800303c <PIDmotor4+0x184>)
 8002fae:	601a      	str	r2, [r3, #0]
			Velocontrol4.omega[OLDER] = Velocontrol4.omega[OLD];
 8002fb0:	4b20      	ldr	r3, [pc, #128]	@ (8003034 <PIDmotor4+0x17c>)
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003034 <PIDmotor4+0x17c>)
 8002fb6:	6313      	str	r3, [r2, #48]	@ 0x30
			Velocontrol4.omega[OLD]  = Velocontrol4.omega[NEW];
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003034 <PIDmotor4+0x17c>)
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <PIDmotor4+0x17c>)
 8002fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
			Velocontrol4.Error[OLDER] = Velocontrol4.Error[OLD];
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003034 <PIDmotor4+0x17c>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003034 <PIDmotor4+0x17c>)
 8002fc6:	6153      	str	r3, [r2, #20]
			Velocontrol4.Error[OLD] = Velocontrol4.Error[NEW];
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <PIDmotor4+0x17c>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	@ (8003034 <PIDmotor4+0x17c>)
 8002fce:	6113      	str	r3, [r2, #16]
			Velocontrol4.Output[OLD] = Velocontrol4.Output[NEW];
 8002fd0:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <PIDmotor4+0x17c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a17      	ldr	r2, [pc, #92]	@ (8003034 <PIDmotor4+0x17c>)
 8002fd6:	6053      	str	r3, [r2, #4]
			timestamp6 =currentTime + 100;
 8002fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fdc:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8002fe0:	f143 0500 	adc.w	r5, r3, #0
 8002fe4:	4622      	mov	r2, r4
 8002fe6:	462b      	mov	r3, r5
 8002fe8:	4910      	ldr	r1, [pc, #64]	@ (800302c <PIDmotor4+0x174>)
 8002fea:	e9c1 2300 	strd	r2, r3, [r1]
	  }
		PWMmap[3] = mapFloat(Velocontrol4.Output[NEW],-12.0,12.0,-999,999);
 8002fee:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <PIDmotor4+0x17c>)
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8003040 <PIDmotor4+0x188>
 8002ff8:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8003044 <PIDmotor4+0x18c>
 8002ffc:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 8003000:	eefa 0a08 	vmov.f32	s1, #168	@ 0xc1400000 -12.0
 8003004:	eeb0 0a67 	vmov.f32	s0, s15
 8003008:	f000 f820 	bl	800304c <mapFloat>
 800300c:	eef0 7a40 	vmov.f32	s15, s0
 8003010:	4b0d      	ldr	r3, [pc, #52]	@ (8003048 <PIDmotor4+0x190>)
 8003012:	edc3 7a03 	vstr	s15, [r3, #12]
		Motor4(PWMmap[3]);
 8003016:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <PIDmotor4+0x190>)
 8003018:	edd3 7a03 	vldr	s15, [r3, #12]
 800301c:	eeb0 0a67 	vmov.f32	s0, s15
 8003020:	f7ff f8ac 	bl	800217c <Motor4>
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bdb0      	pop	{r4, r5, r7, pc}
 800302c:	20000650 	.word	0x20000650
 8003030:	200004a8 	.word	0x200004a8
 8003034:	200005fc 	.word	0x200005fc
 8003038:	41400000 	.word	0x41400000
 800303c:	c1400000 	.word	0xc1400000
 8003040:	4479c000 	.word	0x4479c000
 8003044:	c479c000 	.word	0xc479c000
 8003048:	200004c8 	.word	0x200004c8

0800304c <mapFloat>:
float mapFloat(float x, float in_min, float in_max, float out_min, float out_max) {
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	ed87 0a05 	vstr	s0, [r7, #20]
 8003056:	edc7 0a04 	vstr	s1, [r7, #16]
 800305a:	ed87 1a03 	vstr	s2, [r7, #12]
 800305e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003062:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003066:	ed97 7a05 	vldr	s14, [r7, #20]
 800306a:	edd7 7a04 	vldr	s15, [r7, #16]
 800306e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003072:	edd7 6a01 	vldr	s13, [r7, #4]
 8003076:	edd7 7a02 	vldr	s15, [r7, #8]
 800307a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800307e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003082:	ed97 7a03 	vldr	s14, [r7, #12]
 8003086:	edd7 7a04 	vldr	s15, [r7, #16]
 800308a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003092:	edd7 7a02 	vldr	s15, [r7, #8]
 8003096:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <ProximityWork>:
void ProximityWork(float x,float y,float omega)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80030b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80030b6:	ed87 1a01 	vstr	s2, [r7, #4]
	if(x > 0)
 80030ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80030be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	f340 80d3 	ble.w	8003270 <ProximityWork+0x1c8>
	{
		if(Proximity[0] == sensorThick && Proximity[7] == sensorThick)
 80030ca:	4ba0      	ldr	r3, [pc, #640]	@ (800334c <ProximityWork+0x2a4>)
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	4ba0      	ldr	r3, [pc, #640]	@ (8003350 <ProximityWork+0x2a8>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d115      	bne.n	8003102 <ProximityWork+0x5a>
 80030d6:	4b9d      	ldr	r3, [pc, #628]	@ (800334c <ProximityWork+0x2a4>)
 80030d8:	79da      	ldrb	r2, [r3, #7]
 80030da:	4b9d      	ldr	r3, [pc, #628]	@ (8003350 <ProximityWork+0x2a8>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10f      	bne.n	8003102 <ProximityWork+0x5a>
		{
			cali_X = 0.0;
 80030e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003354 <ProximityWork+0x2ac>)
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
			cali_Y = -x;
 80030ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80030ee:	eef1 7a67 	vneg.f32	s15, s15
 80030f2:	4b99      	ldr	r3, [pc, #612]	@ (8003358 <ProximityWork+0x2b0>)
 80030f4:	edc3 7a00 	vstr	s15, [r3]
			cali_Omega = 0.0;
 80030f8:	4b98      	ldr	r3, [pc, #608]	@ (800335c <ProximityWork+0x2b4>)
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e368      	b.n	80037d4 <ProximityWork+0x72c>
		}
		else if(Proximity[3] == sensorThick && Proximity[4] == sensorThick)
 8003102:	4b92      	ldr	r3, [pc, #584]	@ (800334c <ProximityWork+0x2a4>)
 8003104:	78da      	ldrb	r2, [r3, #3]
 8003106:	4b92      	ldr	r3, [pc, #584]	@ (8003350 <ProximityWork+0x2a8>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d111      	bne.n	8003132 <ProximityWork+0x8a>
 800310e:	4b8f      	ldr	r3, [pc, #572]	@ (800334c <ProximityWork+0x2a4>)
 8003110:	791a      	ldrb	r2, [r3, #4]
 8003112:	4b8f      	ldr	r3, [pc, #572]	@ (8003350 <ProximityWork+0x2a8>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d10b      	bne.n	8003132 <ProximityWork+0x8a>
		{
			cali_X = 0.0;
 800311a:	4b8e      	ldr	r3, [pc, #568]	@ (8003354 <ProximityWork+0x2ac>)
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
			cali_Y = x;
 8003122:	4a8d      	ldr	r2, [pc, #564]	@ (8003358 <ProximityWork+0x2b0>)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6013      	str	r3, [r2, #0]
			cali_Omega = 0.0;
 8003128:	4b8c      	ldr	r3, [pc, #560]	@ (800335c <ProximityWork+0x2b4>)
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e350      	b.n	80037d4 <ProximityWork+0x72c>
		}
		else if(Proximity[0] == sensorThick)
 8003132:	4b86      	ldr	r3, [pc, #536]	@ (800334c <ProximityWork+0x2a4>)
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	4b86      	ldr	r3, [pc, #536]	@ (8003350 <ProximityWork+0x2a8>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d113      	bne.n	8003166 <ProximityWork+0xbe>
		{
			cali_X = 0.0;
 800313e:	4b85      	ldr	r3, [pc, #532]	@ (8003354 <ProximityWork+0x2ac>)
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 8003146:	4b84      	ldr	r3, [pc, #528]	@ (8003358 <ProximityWork+0x2b0>)
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
			cali_Omega = -x/2;
 800314e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003152:	eeb1 7a67 	vneg.f32	s14, s15
 8003156:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800315a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800315e:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <ProximityWork+0x2b4>)
 8003160:	edc3 7a00 	vstr	s15, [r3]
	{
		cali_X = 0;
		cali_Y = 0;
		cali_Omega = 0;
	}
}
 8003164:	e336      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[3] == sensorThick)
 8003166:	4b79      	ldr	r3, [pc, #484]	@ (800334c <ProximityWork+0x2a4>)
 8003168:	78da      	ldrb	r2, [r3, #3]
 800316a:	4b79      	ldr	r3, [pc, #484]	@ (8003350 <ProximityWork+0x2a8>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d111      	bne.n	8003196 <ProximityWork+0xee>
			cali_X = 0.0;
 8003172:	4b78      	ldr	r3, [pc, #480]	@ (8003354 <ProximityWork+0x2ac>)
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 800317a:	4b77      	ldr	r3, [pc, #476]	@ (8003358 <ProximityWork+0x2b0>)
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
			cali_Omega = x/2;
 8003182:	ed97 7a03 	vldr	s14, [r7, #12]
 8003186:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800318a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800318e:	4b73      	ldr	r3, [pc, #460]	@ (800335c <ProximityWork+0x2b4>)
 8003190:	edc3 7a00 	vstr	s15, [r3]
}
 8003194:	e31e      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[4] == sensorThick)
 8003196:	4b6d      	ldr	r3, [pc, #436]	@ (800334c <ProximityWork+0x2a4>)
 8003198:	791a      	ldrb	r2, [r3, #4]
 800319a:	4b6d      	ldr	r3, [pc, #436]	@ (8003350 <ProximityWork+0x2a8>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d113      	bne.n	80031ca <ProximityWork+0x122>
			cali_X = 0.0;
 80031a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003354 <ProximityWork+0x2ac>)
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80031aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003358 <ProximityWork+0x2b0>)
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
			cali_Omega = -x/2;
 80031b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80031b6:	eeb1 7a67 	vneg.f32	s14, s15
 80031ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031c2:	4b66      	ldr	r3, [pc, #408]	@ (800335c <ProximityWork+0x2b4>)
 80031c4:	edc3 7a00 	vstr	s15, [r3]
}
 80031c8:	e304      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[7] == sensorThick)
 80031ca:	4b60      	ldr	r3, [pc, #384]	@ (800334c <ProximityWork+0x2a4>)
 80031cc:	79da      	ldrb	r2, [r3, #7]
 80031ce:	4b60      	ldr	r3, [pc, #384]	@ (8003350 <ProximityWork+0x2a8>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d111      	bne.n	80031fa <ProximityWork+0x152>
			cali_X = 0.0;
 80031d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003354 <ProximityWork+0x2ac>)
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80031de:	4b5e      	ldr	r3, [pc, #376]	@ (8003358 <ProximityWork+0x2b0>)
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
			cali_Omega = x/2;
 80031e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80031ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80031ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031f2:	4b5a      	ldr	r3, [pc, #360]	@ (800335c <ProximityWork+0x2b4>)
 80031f4:	edc3 7a00 	vstr	s15, [r3]
}
 80031f8:	e2ec      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[1] == sensorThick)
 80031fa:	4b54      	ldr	r3, [pc, #336]	@ (800334c <ProximityWork+0x2a4>)
 80031fc:	785a      	ldrb	r2, [r3, #1]
 80031fe:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <ProximityWork+0x2a8>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d10e      	bne.n	8003224 <ProximityWork+0x17c>
			cali_X = -x;
 8003206:	edd7 7a03 	vldr	s15, [r7, #12]
 800320a:	eef1 7a67 	vneg.f32	s15, s15
 800320e:	4b51      	ldr	r3, [pc, #324]	@ (8003354 <ProximityWork+0x2ac>)
 8003210:	edc3 7a00 	vstr	s15, [r3]
			cali_Y = 0.0;
 8003214:	4b50      	ldr	r3, [pc, #320]	@ (8003358 <ProximityWork+0x2b0>)
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
			cali_Omega = x;
 800321c:	4a4f      	ldr	r2, [pc, #316]	@ (800335c <ProximityWork+0x2b4>)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6013      	str	r3, [r2, #0]
}
 8003222:	e2d7      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[2] == sensorThick)
 8003224:	4b49      	ldr	r3, [pc, #292]	@ (800334c <ProximityWork+0x2a4>)
 8003226:	789a      	ldrb	r2, [r3, #2]
 8003228:	4b49      	ldr	r3, [pc, #292]	@ (8003350 <ProximityWork+0x2a8>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d112      	bne.n	8003256 <ProximityWork+0x1ae>
			cali_X = -x;
 8003230:	edd7 7a03 	vldr	s15, [r7, #12]
 8003234:	eef1 7a67 	vneg.f32	s15, s15
 8003238:	4b46      	ldr	r3, [pc, #280]	@ (8003354 <ProximityWork+0x2ac>)
 800323a:	edc3 7a00 	vstr	s15, [r3]
			cali_Y = 0.0;
 800323e:	4b46      	ldr	r3, [pc, #280]	@ (8003358 <ProximityWork+0x2b0>)
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
			cali_Omega = -x;
 8003246:	edd7 7a03 	vldr	s15, [r7, #12]
 800324a:	eef1 7a67 	vneg.f32	s15, s15
 800324e:	4b43      	ldr	r3, [pc, #268]	@ (800335c <ProximityWork+0x2b4>)
 8003250:	edc3 7a00 	vstr	s15, [r3]
}
 8003254:	e2be      	b.n	80037d4 <ProximityWork+0x72c>
			cali_X = 0.0;
 8003256:	4b3f      	ldr	r3, [pc, #252]	@ (8003354 <ProximityWork+0x2ac>)
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 800325e:	4b3e      	ldr	r3, [pc, #248]	@ (8003358 <ProximityWork+0x2b0>)
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
			cali_Omega = 0.0;
 8003266:	4b3d      	ldr	r3, [pc, #244]	@ (800335c <ProximityWork+0x2b4>)
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
}
 800326e:	e2b1      	b.n	80037d4 <ProximityWork+0x72c>
	else if(x < 0)
 8003270:	edd7 7a03 	vldr	s15, [r7, #12]
 8003274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	f140 80dd 	bpl.w	800343a <ProximityWork+0x392>
		if(Proximity[0] == sensorThick && Proximity[7] == sensorThick)
 8003280:	4b32      	ldr	r3, [pc, #200]	@ (800334c <ProximityWork+0x2a4>)
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	4b32      	ldr	r3, [pc, #200]	@ (8003350 <ProximityWork+0x2a8>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d111      	bne.n	80032b0 <ProximityWork+0x208>
 800328c:	4b2f      	ldr	r3, [pc, #188]	@ (800334c <ProximityWork+0x2a4>)
 800328e:	79da      	ldrb	r2, [r3, #7]
 8003290:	4b2f      	ldr	r3, [pc, #188]	@ (8003350 <ProximityWork+0x2a8>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d10b      	bne.n	80032b0 <ProximityWork+0x208>
			cali_X = 0.0;
 8003298:	4b2e      	ldr	r3, [pc, #184]	@ (8003354 <ProximityWork+0x2ac>)
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
			cali_Y = x;
 80032a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003358 <ProximityWork+0x2b0>)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6013      	str	r3, [r2, #0]
			cali_Omega = 0.0;
 80032a6:	4b2d      	ldr	r3, [pc, #180]	@ (800335c <ProximityWork+0x2b4>)
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e291      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[3] == sensorThick && Proximity[4] == sensorThick)
 80032b0:	4b26      	ldr	r3, [pc, #152]	@ (800334c <ProximityWork+0x2a4>)
 80032b2:	78da      	ldrb	r2, [r3, #3]
 80032b4:	4b26      	ldr	r3, [pc, #152]	@ (8003350 <ProximityWork+0x2a8>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d115      	bne.n	80032e8 <ProximityWork+0x240>
 80032bc:	4b23      	ldr	r3, [pc, #140]	@ (800334c <ProximityWork+0x2a4>)
 80032be:	791a      	ldrb	r2, [r3, #4]
 80032c0:	4b23      	ldr	r3, [pc, #140]	@ (8003350 <ProximityWork+0x2a8>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d10f      	bne.n	80032e8 <ProximityWork+0x240>
			cali_X = 0.0;
 80032c8:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <ProximityWork+0x2ac>)
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
			cali_Y = -x;
 80032d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d4:	eef1 7a67 	vneg.f32	s15, s15
 80032d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003358 <ProximityWork+0x2b0>)
 80032da:	edc3 7a00 	vstr	s15, [r3]
			cali_Omega = 0.0;
 80032de:	4b1f      	ldr	r3, [pc, #124]	@ (800335c <ProximityWork+0x2b4>)
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e275      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[0] == sensorThick)
 80032e8:	4b18      	ldr	r3, [pc, #96]	@ (800334c <ProximityWork+0x2a4>)
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <ProximityWork+0x2a8>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d111      	bne.n	8003318 <ProximityWork+0x270>
			cali_X = 0.0;
 80032f4:	4b17      	ldr	r3, [pc, #92]	@ (8003354 <ProximityWork+0x2ac>)
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80032fc:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <ProximityWork+0x2b0>)
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
			cali_Omega = x/2;
 8003304:	ed97 7a03 	vldr	s14, [r7, #12]
 8003308:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800330c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003310:	4b12      	ldr	r3, [pc, #72]	@ (800335c <ProximityWork+0x2b4>)
 8003312:	edc3 7a00 	vstr	s15, [r3]
}
 8003316:	e25d      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[3] == sensorThick)
 8003318:	4b0c      	ldr	r3, [pc, #48]	@ (800334c <ProximityWork+0x2a4>)
 800331a:	78da      	ldrb	r2, [r3, #3]
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <ProximityWork+0x2a8>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d11d      	bne.n	8003360 <ProximityWork+0x2b8>
			cali_X = 0.0;
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <ProximityWork+0x2ac>)
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 800332c:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <ProximityWork+0x2b0>)
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
			cali_Omega = -x/2;
 8003334:	edd7 7a03 	vldr	s15, [r7, #12]
 8003338:	eeb1 7a67 	vneg.f32	s14, s15
 800333c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <ProximityWork+0x2b4>)
 8003346:	edc3 7a00 	vstr	s15, [r3]
}
 800334a:	e243      	b.n	80037d4 <ProximityWork+0x72c>
 800334c:	20000458 	.word	0x20000458
 8003350:	20000000 	.word	0x20000000
 8003354:	200004fc 	.word	0x200004fc
 8003358:	20000500 	.word	0x20000500
 800335c:	20000504 	.word	0x20000504
		else if(Proximity[4] == sensorThick)
 8003360:	4ba3      	ldr	r3, [pc, #652]	@ (80035f0 <ProximityWork+0x548>)
 8003362:	791a      	ldrb	r2, [r3, #4]
 8003364:	4ba3      	ldr	r3, [pc, #652]	@ (80035f4 <ProximityWork+0x54c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d111      	bne.n	8003390 <ProximityWork+0x2e8>
			cali_X = 0.0;
 800336c:	4ba2      	ldr	r3, [pc, #648]	@ (80035f8 <ProximityWork+0x550>)
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 8003374:	4ba1      	ldr	r3, [pc, #644]	@ (80035fc <ProximityWork+0x554>)
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
			cali_Omega = x/2;
 800337c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003380:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003388:	4b9d      	ldr	r3, [pc, #628]	@ (8003600 <ProximityWork+0x558>)
 800338a:	edc3 7a00 	vstr	s15, [r3]
}
 800338e:	e221      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[7] == sensorThick)
 8003390:	4b97      	ldr	r3, [pc, #604]	@ (80035f0 <ProximityWork+0x548>)
 8003392:	79da      	ldrb	r2, [r3, #7]
 8003394:	4b97      	ldr	r3, [pc, #604]	@ (80035f4 <ProximityWork+0x54c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d113      	bne.n	80033c4 <ProximityWork+0x31c>
			cali_X = 0.0;
 800339c:	4b96      	ldr	r3, [pc, #600]	@ (80035f8 <ProximityWork+0x550>)
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80033a4:	4b95      	ldr	r3, [pc, #596]	@ (80035fc <ProximityWork+0x554>)
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
			cali_Omega = -x/2;
 80033ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80033b0:	eeb1 7a67 	vneg.f32	s14, s15
 80033b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033bc:	4b90      	ldr	r3, [pc, #576]	@ (8003600 <ProximityWork+0x558>)
 80033be:	edc3 7a00 	vstr	s15, [r3]
}
 80033c2:	e207      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[5] == sensorThick)
 80033c4:	4b8a      	ldr	r3, [pc, #552]	@ (80035f0 <ProximityWork+0x548>)
 80033c6:	795a      	ldrb	r2, [r3, #5]
 80033c8:	4b8a      	ldr	r3, [pc, #552]	@ (80035f4 <ProximityWork+0x54c>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d112      	bne.n	80033f6 <ProximityWork+0x34e>
			cali_X = -x;
 80033d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80033d4:	eef1 7a67 	vneg.f32	s15, s15
 80033d8:	4b87      	ldr	r3, [pc, #540]	@ (80035f8 <ProximityWork+0x550>)
 80033da:	edc3 7a00 	vstr	s15, [r3]
			cali_Y = 0.0;
 80033de:	4b87      	ldr	r3, [pc, #540]	@ (80035fc <ProximityWork+0x554>)
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
			cali_Omega = -x;
 80033e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80033ea:	eef1 7a67 	vneg.f32	s15, s15
 80033ee:	4b84      	ldr	r3, [pc, #528]	@ (8003600 <ProximityWork+0x558>)
 80033f0:	edc3 7a00 	vstr	s15, [r3]
}
 80033f4:	e1ee      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[6] == sensorThick)
 80033f6:	4b7e      	ldr	r3, [pc, #504]	@ (80035f0 <ProximityWork+0x548>)
 80033f8:	799a      	ldrb	r2, [r3, #6]
 80033fa:	4b7e      	ldr	r3, [pc, #504]	@ (80035f4 <ProximityWork+0x54c>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10e      	bne.n	8003420 <ProximityWork+0x378>
			cali_X = -x;
 8003402:	edd7 7a03 	vldr	s15, [r7, #12]
 8003406:	eef1 7a67 	vneg.f32	s15, s15
 800340a:	4b7b      	ldr	r3, [pc, #492]	@ (80035f8 <ProximityWork+0x550>)
 800340c:	edc3 7a00 	vstr	s15, [r3]
			cali_Y = 0.0;
 8003410:	4b7a      	ldr	r3, [pc, #488]	@ (80035fc <ProximityWork+0x554>)
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
			cali_Omega = x;
 8003418:	4a79      	ldr	r2, [pc, #484]	@ (8003600 <ProximityWork+0x558>)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6013      	str	r3, [r2, #0]
}
 800341e:	e1d9      	b.n	80037d4 <ProximityWork+0x72c>
			cali_X = 0.0;
 8003420:	4b75      	ldr	r3, [pc, #468]	@ (80035f8 <ProximityWork+0x550>)
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 8003428:	4b74      	ldr	r3, [pc, #464]	@ (80035fc <ProximityWork+0x554>)
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
			cali_Omega = 0.0;
 8003430:	4b73      	ldr	r3, [pc, #460]	@ (8003600 <ProximityWork+0x558>)
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	e1cc      	b.n	80037d4 <ProximityWork+0x72c>
	else if(y > 0)
 800343a:	edd7 7a02 	vldr	s15, [r7, #8]
 800343e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	f340 80dd 	ble.w	8003604 <ProximityWork+0x55c>
		if(Proximity[1] == sensorThick && Proximity[2] == sensorThick)
 800344a:	4b69      	ldr	r3, [pc, #420]	@ (80035f0 <ProximityWork+0x548>)
 800344c:	785a      	ldrb	r2, [r3, #1]
 800344e:	4b69      	ldr	r3, [pc, #420]	@ (80035f4 <ProximityWork+0x54c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d115      	bne.n	8003482 <ProximityWork+0x3da>
 8003456:	4b66      	ldr	r3, [pc, #408]	@ (80035f0 <ProximityWork+0x548>)
 8003458:	789a      	ldrb	r2, [r3, #2]
 800345a:	4b66      	ldr	r3, [pc, #408]	@ (80035f4 <ProximityWork+0x54c>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d10f      	bne.n	8003482 <ProximityWork+0x3da>
			cali_X = -y;
 8003462:	edd7 7a02 	vldr	s15, [r7, #8]
 8003466:	eef1 7a67 	vneg.f32	s15, s15
 800346a:	4b63      	ldr	r3, [pc, #396]	@ (80035f8 <ProximityWork+0x550>)
 800346c:	edc3 7a00 	vstr	s15, [r3]
			cali_Y = 0.0;
 8003470:	4b62      	ldr	r3, [pc, #392]	@ (80035fc <ProximityWork+0x554>)
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
			cali_Omega = 0.0;
 8003478:	4b61      	ldr	r3, [pc, #388]	@ (8003600 <ProximityWork+0x558>)
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e1a8      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[6] == sensorThick && Proximity[5] == sensorThick)
 8003482:	4b5b      	ldr	r3, [pc, #364]	@ (80035f0 <ProximityWork+0x548>)
 8003484:	799a      	ldrb	r2, [r3, #6]
 8003486:	4b5b      	ldr	r3, [pc, #364]	@ (80035f4 <ProximityWork+0x54c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d111      	bne.n	80034b2 <ProximityWork+0x40a>
 800348e:	4b58      	ldr	r3, [pc, #352]	@ (80035f0 <ProximityWork+0x548>)
 8003490:	795a      	ldrb	r2, [r3, #5]
 8003492:	4b58      	ldr	r3, [pc, #352]	@ (80035f4 <ProximityWork+0x54c>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d10b      	bne.n	80034b2 <ProximityWork+0x40a>
			cali_X = y;
 800349a:	4a57      	ldr	r2, [pc, #348]	@ (80035f8 <ProximityWork+0x550>)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	6013      	str	r3, [r2, #0]
			cali_Y = 0.0;
 80034a0:	4b56      	ldr	r3, [pc, #344]	@ (80035fc <ProximityWork+0x554>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
			cali_Omega = 0.0;
 80034a8:	4b55      	ldr	r3, [pc, #340]	@ (8003600 <ProximityWork+0x558>)
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e190      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[1] == sensorThick)
 80034b2:	4b4f      	ldr	r3, [pc, #316]	@ (80035f0 <ProximityWork+0x548>)
 80034b4:	785a      	ldrb	r2, [r3, #1]
 80034b6:	4b4f      	ldr	r3, [pc, #316]	@ (80035f4 <ProximityWork+0x54c>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d111      	bne.n	80034e2 <ProximityWork+0x43a>
			cali_X = 0.0;
 80034be:	4b4e      	ldr	r3, [pc, #312]	@ (80035f8 <ProximityWork+0x550>)
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80034c6:	4b4d      	ldr	r3, [pc, #308]	@ (80035fc <ProximityWork+0x554>)
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
			cali_Omega = y/2;
 80034ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80034d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034da:	4b49      	ldr	r3, [pc, #292]	@ (8003600 <ProximityWork+0x558>)
 80034dc:	edc3 7a00 	vstr	s15, [r3]
}
 80034e0:	e178      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[6] == sensorThick)
 80034e2:	4b43      	ldr	r3, [pc, #268]	@ (80035f0 <ProximityWork+0x548>)
 80034e4:	799a      	ldrb	r2, [r3, #6]
 80034e6:	4b43      	ldr	r3, [pc, #268]	@ (80035f4 <ProximityWork+0x54c>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d113      	bne.n	8003516 <ProximityWork+0x46e>
			cali_X = 0.0;
 80034ee:	4b42      	ldr	r3, [pc, #264]	@ (80035f8 <ProximityWork+0x550>)
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80034f6:	4b41      	ldr	r3, [pc, #260]	@ (80035fc <ProximityWork+0x554>)
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
			cali_Omega = -y/2;
 80034fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003502:	eeb1 7a67 	vneg.f32	s14, s15
 8003506:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800350a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800350e:	4b3c      	ldr	r3, [pc, #240]	@ (8003600 <ProximityWork+0x558>)
 8003510:	edc3 7a00 	vstr	s15, [r3]
}
 8003514:	e15e      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[2] == sensorThick)
 8003516:	4b36      	ldr	r3, [pc, #216]	@ (80035f0 <ProximityWork+0x548>)
 8003518:	789a      	ldrb	r2, [r3, #2]
 800351a:	4b36      	ldr	r3, [pc, #216]	@ (80035f4 <ProximityWork+0x54c>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d113      	bne.n	800354a <ProximityWork+0x4a2>
			cali_X = 0.0;
 8003522:	4b35      	ldr	r3, [pc, #212]	@ (80035f8 <ProximityWork+0x550>)
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 800352a:	4b34      	ldr	r3, [pc, #208]	@ (80035fc <ProximityWork+0x554>)
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
			cali_Omega = -y/2;
 8003532:	edd7 7a02 	vldr	s15, [r7, #8]
 8003536:	eeb1 7a67 	vneg.f32	s14, s15
 800353a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800353e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003542:	4b2f      	ldr	r3, [pc, #188]	@ (8003600 <ProximityWork+0x558>)
 8003544:	edc3 7a00 	vstr	s15, [r3]
}
 8003548:	e144      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[5] == sensorThick)
 800354a:	4b29      	ldr	r3, [pc, #164]	@ (80035f0 <ProximityWork+0x548>)
 800354c:	795a      	ldrb	r2, [r3, #5]
 800354e:	4b29      	ldr	r3, [pc, #164]	@ (80035f4 <ProximityWork+0x54c>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d111      	bne.n	800357a <ProximityWork+0x4d2>
			cali_X = 0.0;
 8003556:	4b28      	ldr	r3, [pc, #160]	@ (80035f8 <ProximityWork+0x550>)
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 800355e:	4b27      	ldr	r3, [pc, #156]	@ (80035fc <ProximityWork+0x554>)
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
			cali_Omega = y/2;
 8003566:	ed97 7a02 	vldr	s14, [r7, #8]
 800356a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800356e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003572:	4b23      	ldr	r3, [pc, #140]	@ (8003600 <ProximityWork+0x558>)
 8003574:	edc3 7a00 	vstr	s15, [r3]
}
 8003578:	e12c      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[0] == sensorThick)
 800357a:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <ProximityWork+0x548>)
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <ProximityWork+0x54c>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d112      	bne.n	80035ac <ProximityWork+0x504>
			cali_X = 0.0;
 8003586:	4b1c      	ldr	r3, [pc, #112]	@ (80035f8 <ProximityWork+0x550>)
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
			cali_Y = -y;
 800358e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003592:	eef1 7a67 	vneg.f32	s15, s15
 8003596:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <ProximityWork+0x554>)
 8003598:	edc3 7a00 	vstr	s15, [r3]
			cali_Omega = -y;
 800359c:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a0:	eef1 7a67 	vneg.f32	s15, s15
 80035a4:	4b16      	ldr	r3, [pc, #88]	@ (8003600 <ProximityWork+0x558>)
 80035a6:	edc3 7a00 	vstr	s15, [r3]
}
 80035aa:	e113      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[7] == sensorThick)
 80035ac:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <ProximityWork+0x548>)
 80035ae:	79da      	ldrb	r2, [r3, #7]
 80035b0:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <ProximityWork+0x54c>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d10e      	bne.n	80035d6 <ProximityWork+0x52e>
			cali_X = 0.0;
 80035b8:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <ProximityWork+0x550>)
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
			cali_Y = -y;
 80035c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035c4:	eef1 7a67 	vneg.f32	s15, s15
 80035c8:	4b0c      	ldr	r3, [pc, #48]	@ (80035fc <ProximityWork+0x554>)
 80035ca:	edc3 7a00 	vstr	s15, [r3]
			cali_Omega = y;
 80035ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003600 <ProximityWork+0x558>)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6013      	str	r3, [r2, #0]
}
 80035d4:	e0fe      	b.n	80037d4 <ProximityWork+0x72c>
			cali_X = 0.0;
 80035d6:	4b08      	ldr	r3, [pc, #32]	@ (80035f8 <ProximityWork+0x550>)
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80035de:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <ProximityWork+0x554>)
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
			cali_Omega = 0.0;
 80035e6:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <ProximityWork+0x558>)
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	e0f1      	b.n	80037d4 <ProximityWork+0x72c>
 80035f0:	20000458 	.word	0x20000458
 80035f4:	20000000 	.word	0x20000000
 80035f8:	200004fc 	.word	0x200004fc
 80035fc:	20000500 	.word	0x20000500
 8003600:	20000504 	.word	0x20000504
	else if(y < 0)
 8003604:	edd7 7a02 	vldr	s15, [r7, #8]
 8003608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003610:	f140 80d3 	bpl.w	80037ba <ProximityWork+0x712>
		if(Proximity[1] == sensorThick && Proximity[2] == sensorThick)
 8003614:	4b72      	ldr	r3, [pc, #456]	@ (80037e0 <ProximityWork+0x738>)
 8003616:	785a      	ldrb	r2, [r3, #1]
 8003618:	4b72      	ldr	r3, [pc, #456]	@ (80037e4 <ProximityWork+0x73c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d111      	bne.n	8003644 <ProximityWork+0x59c>
 8003620:	4b6f      	ldr	r3, [pc, #444]	@ (80037e0 <ProximityWork+0x738>)
 8003622:	789a      	ldrb	r2, [r3, #2]
 8003624:	4b6f      	ldr	r3, [pc, #444]	@ (80037e4 <ProximityWork+0x73c>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d10b      	bne.n	8003644 <ProximityWork+0x59c>
			cali_X = y;
 800362c:	4a6e      	ldr	r2, [pc, #440]	@ (80037e8 <ProximityWork+0x740>)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6013      	str	r3, [r2, #0]
			cali_Y = 0.0;
 8003632:	4b6e      	ldr	r3, [pc, #440]	@ (80037ec <ProximityWork+0x744>)
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
			cali_Omega = 0.0;
 800363a:	4b6d      	ldr	r3, [pc, #436]	@ (80037f0 <ProximityWork+0x748>)
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e0c7      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[6] == sensorThick && Proximity[5] == sensorThick)
 8003644:	4b66      	ldr	r3, [pc, #408]	@ (80037e0 <ProximityWork+0x738>)
 8003646:	799a      	ldrb	r2, [r3, #6]
 8003648:	4b66      	ldr	r3, [pc, #408]	@ (80037e4 <ProximityWork+0x73c>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d115      	bne.n	800367c <ProximityWork+0x5d4>
 8003650:	4b63      	ldr	r3, [pc, #396]	@ (80037e0 <ProximityWork+0x738>)
 8003652:	795a      	ldrb	r2, [r3, #5]
 8003654:	4b63      	ldr	r3, [pc, #396]	@ (80037e4 <ProximityWork+0x73c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d10f      	bne.n	800367c <ProximityWork+0x5d4>
			cali_X = -y;
 800365c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003660:	eef1 7a67 	vneg.f32	s15, s15
 8003664:	4b60      	ldr	r3, [pc, #384]	@ (80037e8 <ProximityWork+0x740>)
 8003666:	edc3 7a00 	vstr	s15, [r3]
			cali_Y = 0.0;
 800366a:	4b60      	ldr	r3, [pc, #384]	@ (80037ec <ProximityWork+0x744>)
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
			cali_Omega = 0.0;
 8003672:	4b5f      	ldr	r3, [pc, #380]	@ (80037f0 <ProximityWork+0x748>)
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e0ab      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[1] == sensorThick)
 800367c:	4b58      	ldr	r3, [pc, #352]	@ (80037e0 <ProximityWork+0x738>)
 800367e:	785a      	ldrb	r2, [r3, #1]
 8003680:	4b58      	ldr	r3, [pc, #352]	@ (80037e4 <ProximityWork+0x73c>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d113      	bne.n	80036b0 <ProximityWork+0x608>
			cali_X = 0.0;
 8003688:	4b57      	ldr	r3, [pc, #348]	@ (80037e8 <ProximityWork+0x740>)
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 8003690:	4b56      	ldr	r3, [pc, #344]	@ (80037ec <ProximityWork+0x744>)
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
			cali_Omega = -y/2;
 8003698:	edd7 7a02 	vldr	s15, [r7, #8]
 800369c:	eeb1 7a67 	vneg.f32	s14, s15
 80036a0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80036a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036a8:	4b51      	ldr	r3, [pc, #324]	@ (80037f0 <ProximityWork+0x748>)
 80036aa:	edc3 7a00 	vstr	s15, [r3]
}
 80036ae:	e091      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[6] == sensorThick)
 80036b0:	4b4b      	ldr	r3, [pc, #300]	@ (80037e0 <ProximityWork+0x738>)
 80036b2:	799a      	ldrb	r2, [r3, #6]
 80036b4:	4b4b      	ldr	r3, [pc, #300]	@ (80037e4 <ProximityWork+0x73c>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d111      	bne.n	80036e0 <ProximityWork+0x638>
			cali_X = 0.0;
 80036bc:	4b4a      	ldr	r3, [pc, #296]	@ (80037e8 <ProximityWork+0x740>)
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80036c4:	4b49      	ldr	r3, [pc, #292]	@ (80037ec <ProximityWork+0x744>)
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
			cali_Omega = y/2;
 80036cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80036d0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80036d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036d8:	4b45      	ldr	r3, [pc, #276]	@ (80037f0 <ProximityWork+0x748>)
 80036da:	edc3 7a00 	vstr	s15, [r3]
}
 80036de:	e079      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[2] == sensorThick)
 80036e0:	4b3f      	ldr	r3, [pc, #252]	@ (80037e0 <ProximityWork+0x738>)
 80036e2:	789a      	ldrb	r2, [r3, #2]
 80036e4:	4b3f      	ldr	r3, [pc, #252]	@ (80037e4 <ProximityWork+0x73c>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d111      	bne.n	8003710 <ProximityWork+0x668>
			cali_X = 0.0;
 80036ec:	4b3e      	ldr	r3, [pc, #248]	@ (80037e8 <ProximityWork+0x740>)
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80036f4:	4b3d      	ldr	r3, [pc, #244]	@ (80037ec <ProximityWork+0x744>)
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
			cali_Omega = y/2;
 80036fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003700:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003708:	4b39      	ldr	r3, [pc, #228]	@ (80037f0 <ProximityWork+0x748>)
 800370a:	edc3 7a00 	vstr	s15, [r3]
}
 800370e:	e061      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[5] == sensorThick)
 8003710:	4b33      	ldr	r3, [pc, #204]	@ (80037e0 <ProximityWork+0x738>)
 8003712:	795a      	ldrb	r2, [r3, #5]
 8003714:	4b33      	ldr	r3, [pc, #204]	@ (80037e4 <ProximityWork+0x73c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d113      	bne.n	8003744 <ProximityWork+0x69c>
			cali_X = 0.0;
 800371c:	4b32      	ldr	r3, [pc, #200]	@ (80037e8 <ProximityWork+0x740>)
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 8003724:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <ProximityWork+0x744>)
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
			cali_Omega = -y/2;
 800372c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003730:	eeb1 7a67 	vneg.f32	s14, s15
 8003734:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003738:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800373c:	4b2c      	ldr	r3, [pc, #176]	@ (80037f0 <ProximityWork+0x748>)
 800373e:	edc3 7a00 	vstr	s15, [r3]
}
 8003742:	e047      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[4] == sensorThick)
 8003744:	4b26      	ldr	r3, [pc, #152]	@ (80037e0 <ProximityWork+0x738>)
 8003746:	791a      	ldrb	r2, [r3, #4]
 8003748:	4b26      	ldr	r3, [pc, #152]	@ (80037e4 <ProximityWork+0x73c>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d10e      	bne.n	800376e <ProximityWork+0x6c6>
			cali_X = 0.0;
 8003750:	4b25      	ldr	r3, [pc, #148]	@ (80037e8 <ProximityWork+0x740>)
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
			cali_Y = -y;
 8003758:	edd7 7a02 	vldr	s15, [r7, #8]
 800375c:	eef1 7a67 	vneg.f32	s15, s15
 8003760:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <ProximityWork+0x744>)
 8003762:	edc3 7a00 	vstr	s15, [r3]
			cali_Omega = y;
 8003766:	4a22      	ldr	r2, [pc, #136]	@ (80037f0 <ProximityWork+0x748>)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	e032      	b.n	80037d4 <ProximityWork+0x72c>
		else if(Proximity[3] == sensorThick)
 800376e:	4b1c      	ldr	r3, [pc, #112]	@ (80037e0 <ProximityWork+0x738>)
 8003770:	78da      	ldrb	r2, [r3, #3]
 8003772:	4b1c      	ldr	r3, [pc, #112]	@ (80037e4 <ProximityWork+0x73c>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d112      	bne.n	80037a0 <ProximityWork+0x6f8>
			cali_X = 0.0;
 800377a:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <ProximityWork+0x740>)
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
			cali_Y = -y;
 8003782:	edd7 7a02 	vldr	s15, [r7, #8]
 8003786:	eef1 7a67 	vneg.f32	s15, s15
 800378a:	4b18      	ldr	r3, [pc, #96]	@ (80037ec <ProximityWork+0x744>)
 800378c:	edc3 7a00 	vstr	s15, [r3]
			cali_Omega = -y;
 8003790:	edd7 7a02 	vldr	s15, [r7, #8]
 8003794:	eef1 7a67 	vneg.f32	s15, s15
 8003798:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <ProximityWork+0x748>)
 800379a:	edc3 7a00 	vstr	s15, [r3]
}
 800379e:	e019      	b.n	80037d4 <ProximityWork+0x72c>
			cali_X = 0.0;
 80037a0:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <ProximityWork+0x740>)
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
			cali_Y = 0.0;
 80037a8:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <ProximityWork+0x744>)
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
			cali_Omega = 0.0;
 80037b0:	4b0f      	ldr	r3, [pc, #60]	@ (80037f0 <ProximityWork+0x748>)
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	e00c      	b.n	80037d4 <ProximityWork+0x72c>
		cali_X = 0;
 80037ba:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <ProximityWork+0x740>)
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
		cali_Y = 0;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <ProximityWork+0x744>)
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
		cali_Omega = 0;
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <ProximityWork+0x748>)
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	e7ff      	b.n	80037d4 <ProximityWork+0x72c>
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000458 	.word	0x20000458
 80037e4:	20000000 	.word	0x20000000
 80037e8:	200004fc 	.word	0x200004fc
 80037ec:	20000500 	.word	0x20000500
 80037f0:	20000504 	.word	0x20000504

080037f4 <nonBlockingDelay>:
void nonBlockingDelay(uint16_t delay,uint8_t now_State,uint8_t next_State,uint8_t next_State2)
{
 80037f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	4606      	mov	r6, r0
 80037fe:	4608      	mov	r0, r1
 8003800:	4611      	mov	r1, r2
 8003802:	461a      	mov	r2, r3
 8003804:	4633      	mov	r3, r6
 8003806:	80fb      	strh	r3, [r7, #6]
 8003808:	4603      	mov	r3, r0
 800380a:	717b      	strb	r3, [r7, #5]
 800380c:	460b      	mov	r3, r1
 800380e:	713b      	strb	r3, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	70fb      	strb	r3, [r7, #3]
	static uint64_t timecheck = 0;
	if(timecheck < HAL_GetTick())
 8003814:	f000 fc48 	bl	80040a8 <HAL_GetTick>
 8003818:	4603      	mov	r3, r0
 800381a:	2200      	movs	r2, #0
 800381c:	461c      	mov	r4, r3
 800381e:	4615      	mov	r5, r2
 8003820:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <nonBlockingDelay+0xb8>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	42a2      	cmp	r2, r4
 8003828:	41ab      	sbcs	r3, r5
 800382a:	d20f      	bcs.n	800384c <nonBlockingDelay+0x58>
	  {
		delayCount++;
 800382c:	4b20      	ldr	r3, [pc, #128]	@ (80038b0 <nonBlockingDelay+0xbc>)
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	4b1e      	ldr	r3, [pc, #120]	@ (80038b0 <nonBlockingDelay+0xbc>)
 8003836:	801a      	strh	r2, [r3, #0]
		timecheck = HAL_GetTick()+100;
 8003838:	f000 fc36 	bl	80040a8 <HAL_GetTick>
 800383c:	4603      	mov	r3, r0
 800383e:	3364      	adds	r3, #100	@ 0x64
 8003840:	2200      	movs	r2, #0
 8003842:	4698      	mov	r8, r3
 8003844:	4691      	mov	r9, r2
 8003846:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <nonBlockingDelay+0xb8>)
 8003848:	e9c3 8900 	strd	r8, r9, [r3]
	  }
	if (delayCount > (delay/100))
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	4a19      	ldr	r2, [pc, #100]	@ (80038b4 <nonBlockingDelay+0xc0>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	b29a      	uxth	r2, r3
 8003858:	4b15      	ldr	r3, [pc, #84]	@ (80038b0 <nonBlockingDelay+0xbc>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d21f      	bcs.n	80038a0 <nonBlockingDelay+0xac>
	  {
		delayCount = 0;
 8003860:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <nonBlockingDelay+0xbc>)
 8003862:	2200      	movs	r2, #0
 8003864:	801a      	strh	r2, [r3, #0]
		if(now_State == 0)
 8003866:	797b      	ldrb	r3, [r7, #5]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <nonBlockingDelay+0x7e>
		{
			state_Check = next_State;
 800386c:	4a12      	ldr	r2, [pc, #72]	@ (80038b8 <nonBlockingDelay+0xc4>)
 800386e:	793b      	ldrb	r3, [r7, #4]
 8003870:	7013      	strb	r3, [r2, #0]
		}
		if(now_State == 1)
 8003872:	797b      	ldrb	r3, [r7, #5]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d113      	bne.n	80038a0 <nonBlockingDelay+0xac>
		{
			if(path == 1)
 8003878:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <nonBlockingDelay+0xc8>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <nonBlockingDelay+0x98>
			{
			state_Clean = path1[next_State+1];
 8003880:	793b      	ldrb	r3, [r7, #4]
 8003882:	3301      	adds	r3, #1
 8003884:	4a0e      	ldr	r2, [pc, #56]	@ (80038c0 <nonBlockingDelay+0xcc>)
 8003886:	5cd2      	ldrb	r2, [r2, r3]
 8003888:	4b0e      	ldr	r3, [pc, #56]	@ (80038c4 <nonBlockingDelay+0xd0>)
 800388a:	701a      	strb	r2, [r3, #0]
			}
			if(path == 2)
 800388c:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <nonBlockingDelay+0xc8>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d105      	bne.n	80038a0 <nonBlockingDelay+0xac>
			{
			state_Clean = path2[next_State+1];
 8003894:	793b      	ldrb	r3, [r7, #4]
 8003896:	3301      	adds	r3, #1
 8003898:	4a0b      	ldr	r2, [pc, #44]	@ (80038c8 <nonBlockingDelay+0xd4>)
 800389a:	5cd2      	ldrb	r2, [r2, r3]
 800389c:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <nonBlockingDelay+0xd0>)
 800389e:	701a      	strb	r2, [r3, #0]
			}
		}
	  }
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038aa:	bf00      	nop
 80038ac:	20000658 	.word	0x20000658
 80038b0:	2000050e 	.word	0x2000050e
 80038b4:	51eb851f 	.word	0x51eb851f
 80038b8:	20000509 	.word	0x20000509
 80038bc:	2000050c 	.word	0x2000050c
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	2000050a 	.word	0x2000050a
 80038c8:	20000018 	.word	0x20000018

080038cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038d0:	b672      	cpsid	i
}
 80038d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038d4:	bf00      	nop
 80038d6:	e7fd      	b.n	80038d4 <Error_Handler+0x8>

080038d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038de:	4b0f      	ldr	r3, [pc, #60]	@ (800391c <HAL_MspInit+0x44>)
 80038e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e2:	4a0e      	ldr	r2, [pc, #56]	@ (800391c <HAL_MspInit+0x44>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80038ea:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <HAL_MspInit+0x44>)
 80038ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f6:	4b09      	ldr	r3, [pc, #36]	@ (800391c <HAL_MspInit+0x44>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fa:	4a08      	ldr	r2, [pc, #32]	@ (800391c <HAL_MspInit+0x44>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003900:	6593      	str	r3, [r2, #88]	@ 0x58
 8003902:	4b06      	ldr	r3, [pc, #24]	@ (800391c <HAL_MspInit+0x44>)
 8003904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800390e:	f002 fa1b 	bl	8005d48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000

08003920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b09e      	sub	sp, #120	@ 0x78
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	2254      	movs	r2, #84	@ 0x54
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f005 fd25 	bl	8009390 <memset>
  if(hadc->Instance==ADC3)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a33      	ldr	r2, [pc, #204]	@ (8003a18 <HAL_ADC_MspInit+0xf8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d15f      	bne.n	8003a10 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003954:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8003956:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800395a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800395c:	f107 0310 	add.w	r3, r7, #16
 8003960:	4618      	mov	r0, r3
 8003962:	f002 ff2f 	bl	80067c4 <HAL_RCCEx_PeriphCLKConfig>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800396c:	f7ff ffae 	bl	80038cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8003970:	4b2a      	ldr	r3, [pc, #168]	@ (8003a1c <HAL_ADC_MspInit+0xfc>)
 8003972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003974:	4a29      	ldr	r2, [pc, #164]	@ (8003a1c <HAL_ADC_MspInit+0xfc>)
 8003976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800397a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800397c:	4b27      	ldr	r3, [pc, #156]	@ (8003a1c <HAL_ADC_MspInit+0xfc>)
 800397e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003988:	4b24      	ldr	r3, [pc, #144]	@ (8003a1c <HAL_ADC_MspInit+0xfc>)
 800398a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398c:	4a23      	ldr	r2, [pc, #140]	@ (8003a1c <HAL_ADC_MspInit+0xfc>)
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003994:	4b21      	ldr	r3, [pc, #132]	@ (8003a1c <HAL_ADC_MspInit+0xfc>)
 8003996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 80039a0:	f242 0302 	movw	r3, #8194	@ 0x2002
 80039a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039a6:	2303      	movs	r3, #3
 80039a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80039b2:	4619      	mov	r1, r3
 80039b4:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <HAL_ADC_MspInit+0x100>)
 80039b6:	f001 ff4d 	bl	8005854 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel1;
 80039ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a28 <HAL_ADC_MspInit+0x108>)
 80039be:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80039c0:	4b18      	ldr	r3, [pc, #96]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039c2:	2225      	movs	r2, #37	@ 0x25
 80039c4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039c6:	4b17      	ldr	r3, [pc, #92]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80039cc:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80039d2:	4b14      	ldr	r3, [pc, #80]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039d4:	2280      	movs	r2, #128	@ 0x80
 80039d6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039d8:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039de:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039e0:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039e6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80039e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039ea:	2220      	movs	r2, #32
 80039ec:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80039ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80039f4:	480b      	ldr	r0, [pc, #44]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 80039f6:	f001 fd73 	bl	80054e0 <HAL_DMA_Init>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003a00:	f7ff ff64 	bl	80038cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a07      	ldr	r2, [pc, #28]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 8003a08:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a0a:	4a06      	ldr	r2, [pc, #24]	@ (8003a24 <HAL_ADC_MspInit+0x104>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003a10:	bf00      	nop
 8003a12:	3778      	adds	r7, #120	@ 0x78
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	50000400 	.word	0x50000400
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	48000400 	.word	0x48000400
 8003a24:	200000b8 	.word	0x200000b8
 8003a28:	40020008 	.word	0x40020008

08003a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b09e      	sub	sp, #120	@ 0x78
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a44:	f107 0310 	add.w	r3, r7, #16
 8003a48:	2254      	movs	r2, #84	@ 0x54
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f005 fc9f 	bl	8009390 <memset>
  if(huart->Instance==LPUART1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad4 <HAL_UART_MspInit+0xa8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d136      	bne.n	8003aca <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a60:	2300      	movs	r3, #0
 8003a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a64:	f107 0310 	add.w	r3, r7, #16
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f002 feab 	bl	80067c4 <HAL_RCCEx_PeriphCLKConfig>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a74:	f7ff ff2a 	bl	80038cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a78:	4b17      	ldr	r3, [pc, #92]	@ (8003ad8 <HAL_UART_MspInit+0xac>)
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	4a16      	ldr	r2, [pc, #88]	@ (8003ad8 <HAL_UART_MspInit+0xac>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003a84:	4b14      	ldr	r3, [pc, #80]	@ (8003ad8 <HAL_UART_MspInit+0xac>)
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a90:	4b11      	ldr	r3, [pc, #68]	@ (8003ad8 <HAL_UART_MspInit+0xac>)
 8003a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a94:	4a10      	ldr	r2, [pc, #64]	@ (8003ad8 <HAL_UART_MspInit+0xac>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad8 <HAL_UART_MspInit+0xac>)
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003ab8:	230c      	movs	r3, #12
 8003aba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ac6:	f001 fec5 	bl	8005854 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8003aca:	bf00      	nop
 8003acc:	3778      	adds	r7, #120	@ 0x78
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40008000 	.word	0x40008000
 8003ad8:	40021000 	.word	0x40021000

08003adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aec:	d114      	bne.n	8003b18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aee:	4b30      	ldr	r3, [pc, #192]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af2:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003afa:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	201c      	movs	r0, #28
 8003b0c:	f001 fcb3 	bl	8005476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b10:	201c      	movs	r0, #28
 8003b12:	f001 fcca 	bl	80054aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003b16:	e046      	b.n	8003ba6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	@ (8003bb4 <HAL_TIM_Base_MspInit+0xd8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10c      	bne.n	8003b3c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b22:	4b23      	ldr	r3, [pc, #140]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b26:	4a22      	ldr	r2, [pc, #136]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b2e:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	69bb      	ldr	r3, [r7, #24]
}
 8003b3a:	e034      	b.n	8003ba6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <HAL_TIM_Base_MspInit+0xdc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10c      	bne.n	8003b60 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003b46:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4a:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b50:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b52:	4b17      	ldr	r3, [pc, #92]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	697b      	ldr	r3, [r7, #20]
}
 8003b5e:	e022      	b.n	8003ba6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a15      	ldr	r2, [pc, #84]	@ (8003bbc <HAL_TIM_Base_MspInit+0xe0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10c      	bne.n	8003b84 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b6a:	4b11      	ldr	r3, [pc, #68]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6e:	4a10      	ldr	r2, [pc, #64]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b76:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]
}
 8003b82:	e010      	b.n	8003ba6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc0 <HAL_TIM_Base_MspInit+0xe4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d10b      	bne.n	8003ba6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003b8e:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b92:	4a07      	ldr	r2, [pc, #28]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b98:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b9a:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <HAL_TIM_Base_MspInit+0xd4>)
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
}
 8003ba6:	bf00      	nop
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40014400 	.word	0x40014400
 8003bc0:	40014800 	.word	0x40014800

08003bc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b090      	sub	sp, #64	@ 0x40
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a6f      	ldr	r2, [pc, #444]	@ (8003da0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d131      	bne.n	8003c4a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003be6:	4b6f      	ldr	r3, [pc, #444]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	4a6e      	ldr	r2, [pc, #440]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfe:	4b69      	ldr	r3, [pc, #420]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c02:	4a68      	ldr	r2, [pc, #416]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c0a:	4b66      	ldr	r3, [pc, #408]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c16:	23c0      	movs	r3, #192	@ 0xc0
 8003c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c22:	2300      	movs	r3, #0
 8003c24:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c26:	2302      	movs	r3, #2
 8003c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c34:	f001 fe0e 	bl	8005854 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	201d      	movs	r0, #29
 8003c3e:	f001 fc1a 	bl	8005476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c42:	201d      	movs	r0, #29
 8003c44:	f001 fc31 	bl	80054aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8003c48:	e0a6      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x1d4>
  else if(htim_encoder->Instance==TIM4)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a56      	ldr	r2, [pc, #344]	@ (8003da8 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d12a      	bne.n	8003caa <HAL_TIM_Encoder_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c54:	4b53      	ldr	r3, [pc, #332]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c58:	4a52      	ldr	r2, [pc, #328]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c60:	4b50      	ldr	r3, [pc, #320]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c70:	4a4c      	ldr	r2, [pc, #304]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c78:	4b4a      	ldr	r3, [pc, #296]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c84:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c92:	2300      	movs	r3, #0
 8003c94:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003c96:	230a      	movs	r3, #10
 8003c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ca4:	f001 fdd6 	bl	8005854 <HAL_GPIO_Init>
}
 8003ca8:	e076      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x1d4>
  else if(htim_encoder->Instance==TIM8)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3f      	ldr	r2, [pc, #252]	@ (8003dac <HAL_TIM_Encoder_MspInit+0x1e8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d128      	bne.n	8003d06 <HAL_TIM_Encoder_MspInit+0x142>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003cba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cc0:	4b38      	ldr	r3, [pc, #224]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ccc:	4b35      	ldr	r3, [pc, #212]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd0:	4a34      	ldr	r2, [pc, #208]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cd8:	4b32      	ldr	r3, [pc, #200]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ce4:	23c0      	movs	r3, #192	@ 0xc0
 8003ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	482c      	ldr	r0, [pc, #176]	@ (8003db0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003d00:	f001 fda8 	bl	8005854 <HAL_GPIO_Init>
}
 8003d04:	e048      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x1d4>
  else if(htim_encoder->Instance==TIM20)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8003db4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d143      	bne.n	8003d98 <HAL_TIM_Encoder_MspInit+0x1d4>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003d10:	4b24      	ldr	r3, [pc, #144]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d14:	4a23      	ldr	r2, [pc, #140]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d1c:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d28:	4b1e      	ldr	r3, [pc, #120]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d2e:	f043 0304 	orr.w	r3, r3, #4
 8003d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d34:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d40:	4b18      	ldr	r3, [pc, #96]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d44:	4a17      	ldr	r2, [pc, #92]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d46:	f043 0302 	orr.w	r3, r3, #2
 8003d4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d4c:	4b15      	ldr	r3, [pc, #84]	@ (8003da4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d58:	2304      	movs	r3, #4
 8003d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	2300      	movs	r3, #0
 8003d66:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003d68:	2306      	movs	r3, #6
 8003d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d70:	4619      	mov	r1, r3
 8003d72:	480f      	ldr	r0, [pc, #60]	@ (8003db0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8003d74:	f001 fd6e 	bl	8005854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d78:	2304      	movs	r3, #4
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d84:	2300      	movs	r3, #0
 8003d86:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d90:	4619      	mov	r1, r3
 8003d92:	4809      	ldr	r0, [pc, #36]	@ (8003db8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003d94:	f001 fd5e 	bl	8005854 <HAL_GPIO_Init>
}
 8003d98:	bf00      	nop
 8003d9a:	3740      	adds	r7, #64	@ 0x40
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40000800 	.word	0x40000800
 8003dac:	40013400 	.word	0x40013400
 8003db0:	48000800 	.word	0x48000800
 8003db4:	40015000 	.word	0x40015000
 8003db8:	48000400 	.word	0x48000400

08003dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	@ 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a33      	ldr	r2, [pc, #204]	@ (8003ea8 <HAL_TIM_MspPostInit+0xec>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d11d      	bne.n	8003e1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dde:	4b33      	ldr	r3, [pc, #204]	@ (8003eac <HAL_TIM_MspPostInit+0xf0>)
 8003de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de2:	4a32      	ldr	r2, [pc, #200]	@ (8003eac <HAL_TIM_MspPostInit+0xf0>)
 8003de4:	f043 0302 	orr.w	r3, r3, #2
 8003de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dea:	4b30      	ldr	r3, [pc, #192]	@ (8003eac <HAL_TIM_MspPostInit+0xf0>)
 8003dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003df6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e04:	2300      	movs	r3, #0
 8003e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	4619      	mov	r1, r3
 8003e12:	4827      	ldr	r0, [pc, #156]	@ (8003eb0 <HAL_TIM_MspPostInit+0xf4>)
 8003e14:	f001 fd1e 	bl	8005854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003e18:	e042      	b.n	8003ea0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM16)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a25      	ldr	r2, [pc, #148]	@ (8003eb4 <HAL_TIM_MspPostInit+0xf8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d11c      	bne.n	8003e5e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e24:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <HAL_TIM_MspPostInit+0xf0>)
 8003e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e28:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <HAL_TIM_MspPostInit+0xf0>)
 8003e2a:	f043 0302 	orr.w	r3, r3, #2
 8003e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e30:	4b1e      	ldr	r3, [pc, #120]	@ (8003eac <HAL_TIM_MspPostInit+0xf0>)
 8003e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	2302      	movs	r3, #2
 8003e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	4619      	mov	r1, r3
 8003e56:	4816      	ldr	r0, [pc, #88]	@ (8003eb0 <HAL_TIM_MspPostInit+0xf4>)
 8003e58:	f001 fcfc 	bl	8005854 <HAL_GPIO_Init>
}
 8003e5c:	e020      	b.n	8003ea0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM17)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a15      	ldr	r2, [pc, #84]	@ (8003eb8 <HAL_TIM_MspPostInit+0xfc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d11b      	bne.n	8003ea0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e68:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <HAL_TIM_MspPostInit+0xf0>)
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003eac <HAL_TIM_MspPostInit+0xf0>)
 8003e6e:	f043 0302 	orr.w	r3, r3, #2
 8003e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e74:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <HAL_TIM_MspPostInit+0xf0>)
 8003e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e80:	2320      	movs	r3, #32
 8003e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8003e90:	230a      	movs	r3, #10
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e94:	f107 0314 	add.w	r3, r7, #20
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4805      	ldr	r0, [pc, #20]	@ (8003eb0 <HAL_TIM_MspPostInit+0xf4>)
 8003e9c:	f001 fcda 	bl	8005854 <HAL_GPIO_Init>
}
 8003ea0:	bf00      	nop
 8003ea2:	3728      	adds	r7, #40	@ 0x28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	48000400 	.word	0x48000400
 8003eb4:	40014400 	.word	0x40014400
 8003eb8:	40014800 	.word	0x40014800

08003ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ec0:	bf00      	nop
 8003ec2:	e7fd      	b.n	8003ec0 <NMI_Handler+0x4>

08003ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <HardFault_Handler+0x4>

08003ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <MemManage_Handler+0x4>

08003ed4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <BusFault_Handler+0x4>

08003edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ee0:	bf00      	nop
 8003ee2:	e7fd      	b.n	8003ee0 <UsageFault_Handler+0x4>

08003ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f12:	f000 f8b7 	bl	8004084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003f20:	4802      	ldr	r0, [pc, #8]	@ (8003f2c <DMA1_Channel1_IRQHandler+0x10>)
 8003f22:	f001 fb85 	bl	8005630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200000b8 	.word	0x200000b8

08003f30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f34:	4802      	ldr	r0, [pc, #8]	@ (8003f40 <TIM2_IRQHandler+0x10>)
 8003f36:	f003 fa0b 	bl	8007350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200001ac 	.word	0x200001ac

08003f44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f48:	4802      	ldr	r0, [pc, #8]	@ (8003f54 <TIM3_IRQHandler+0x10>)
 8003f4a:	f003 fa01 	bl	8007350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200001f8 	.word	0x200001f8

08003f58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003f5c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003f60:	f001 fe2a 	bl	8005bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f64:	bf00      	nop
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <SystemInit+0x20>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	4a05      	ldr	r2, [pc, #20]	@ (8003f88 <SystemInit+0x20>)
 8003f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f8c:	480d      	ldr	r0, [pc, #52]	@ (8003fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f90:	f7ff ffea 	bl	8003f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f94:	480c      	ldr	r0, [pc, #48]	@ (8003fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f96:	490d      	ldr	r1, [pc, #52]	@ (8003fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f98:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd0 <LoopForever+0xe>)
  movs r3, #0
 8003f9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003f9c:	e002      	b.n	8003fa4 <LoopCopyDataInit>

08003f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fa2:	3304      	adds	r3, #4

08003fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fa8:	d3f9      	bcc.n	8003f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003faa:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fac:	4c0a      	ldr	r4, [pc, #40]	@ (8003fd8 <LoopForever+0x16>)
  movs r3, #0
 8003fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fb0:	e001      	b.n	8003fb6 <LoopFillZerobss>

08003fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fb4:	3204      	adds	r2, #4

08003fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fb8:	d3fb      	bcc.n	8003fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fba:	f005 f9f1 	bl	80093a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fbe:	f7fc fdd9 	bl	8000b74 <main>

08003fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8003fc2:	e7fe      	b.n	8003fc2 <LoopForever>
  ldr   r0, =_estack
 8003fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fcc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8003fd0:	08009450 	.word	0x08009450
  ldr r2, =_sbss
 8003fd4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8003fd8:	20000664 	.word	0x20000664

08003fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fdc:	e7fe      	b.n	8003fdc <ADC1_2_IRQHandler>

08003fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fe8:	2003      	movs	r0, #3
 8003fea:	f001 fa39 	bl	8005460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f000 f80e 	bl	8004010 <HAL_InitTick>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	71fb      	strb	r3, [r7, #7]
 8003ffe:	e001      	b.n	8004004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004000:	f7ff fc6a 	bl	80038d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004004:	79fb      	ldrb	r3, [r7, #7]

}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800401c:	4b16      	ldr	r3, [pc, #88]	@ (8004078 <HAL_InitTick+0x68>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d022      	beq.n	800406a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004024:	4b15      	ldr	r3, [pc, #84]	@ (800407c <HAL_InitTick+0x6c>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <HAL_InitTick+0x68>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004030:	fbb1 f3f3 	udiv	r3, r1, r3
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	4618      	mov	r0, r3
 800403a:	f001 fa44 	bl	80054c6 <HAL_SYSTICK_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10f      	bne.n	8004064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	d809      	bhi.n	800405e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800404a:	2200      	movs	r2, #0
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	f04f 30ff 	mov.w	r0, #4294967295
 8004052:	f001 fa10 	bl	8005476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004056:	4a0a      	ldr	r2, [pc, #40]	@ (8004080 <HAL_InitTick+0x70>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	e007      	b.n	800406e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
 8004062:	e004      	b.n	800406e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	e001      	b.n	800406e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	2000002c 	.word	0x2000002c
 800407c:	20000024 	.word	0x20000024
 8004080:	20000028 	.word	0x20000028

08004084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004088:	4b05      	ldr	r3, [pc, #20]	@ (80040a0 <HAL_IncTick+0x1c>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <HAL_IncTick+0x20>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4413      	add	r3, r2
 8004092:	4a03      	ldr	r2, [pc, #12]	@ (80040a0 <HAL_IncTick+0x1c>)
 8004094:	6013      	str	r3, [r2, #0]
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20000660 	.word	0x20000660
 80040a4:	2000002c 	.word	0x2000002c

080040a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return uwTick;
 80040ac:	4b03      	ldr	r3, [pc, #12]	@ (80040bc <HAL_GetTick+0x14>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000660 	.word	0x20000660

080040c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	609a      	str	r2, [r3, #8]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	609a      	str	r2, [r3, #8]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3360      	adds	r3, #96	@ 0x60
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b08      	ldr	r3, [pc, #32]	@ (800416c <LL_ADC_SetOffset+0x44>)
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	4313      	orrs	r3, r2
 8004158:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	03fff000 	.word	0x03fff000

08004170 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3360      	adds	r3, #96	@ 0x60
 800417e:	461a      	mov	r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3360      	adds	r3, #96	@ 0x60
 80041ac:	461a      	mov	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b087      	sub	sp, #28
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3360      	adds	r3, #96	@ 0x60
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3360      	adds	r3, #96	@ 0x60
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	431a      	orrs	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	615a      	str	r2, [r3, #20]
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3330      	adds	r3, #48	@ 0x30
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	4413      	add	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	211f      	movs	r1, #31
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	0e9b      	lsrs	r3, r3, #26
 800429c:	f003 011f 	and.w	r1, r3, #31
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	431a      	orrs	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3314      	adds	r3, #20
 80042cc:	461a      	mov	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	0e5b      	lsrs	r3, r3, #25
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	4413      	add	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	0d1b      	lsrs	r3, r3, #20
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2107      	movs	r1, #7
 80042ea:	fa01 f303 	lsl.w	r3, r1, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	401a      	ands	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0d1b      	lsrs	r3, r3, #20
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432c:	43db      	mvns	r3, r3
 800432e:	401a      	ands	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0318 	and.w	r3, r3, #24
 8004336:	4908      	ldr	r1, [pc, #32]	@ (8004358 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004338:	40d9      	lsrs	r1, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	400b      	ands	r3, r1
 800433e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	0007ffff 	.word	0x0007ffff

0800435c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800436c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6093      	str	r3, [r2, #8]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004394:	d101      	bne.n	800439a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80043b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043e4:	d101      	bne.n	80043ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <LL_ADC_IsEnabled+0x18>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <LL_ADC_IsEnabled+0x1a>
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b04      	cmp	r3, #4
 8004430:	d101      	bne.n	8004436 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b08      	cmp	r3, #8
 8004456:	d101      	bne.n	800445c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b089      	sub	sp, #36	@ 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1a9      	b.n	80047da <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fa43 	bl	8003920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff67 	bl	8004380 <LL_ADC_IsDeepPowerDownEnabled>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff4d 	bl	800435c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff ff82 	bl	80043d0 <LL_ADC_IsInternalRegulatorEnabled>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d115      	bne.n	80044fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ff66 	bl	80043a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044dc:	4b9c      	ldr	r3, [pc, #624]	@ (8004750 <HAL_ADC_Init+0x2e4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	4a9c      	ldr	r2, [pc, #624]	@ (8004754 <HAL_ADC_Init+0x2e8>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	099b      	lsrs	r3, r3, #6
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044f0:	e002      	b.n	80044f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f9      	bne.n	80044f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff64 	bl	80043d0 <LL_ADC_IsInternalRegulatorEnabled>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004512:	f043 0210 	orr.w	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451e:	f043 0201 	orr.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff75 	bl	800441e <LL_ADC_REG_IsConversionOngoing>
 8004534:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 8142 	bne.w	80047c8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 813e 	bne.w	80047c8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004550:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004554:	f043 0202 	orr.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff49 	bl	80043f8 <LL_ADC_IsEnabled>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d141      	bne.n	80045f0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004574:	d004      	beq.n	8004580 <HAL_ADC_Init+0x114>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a77      	ldr	r2, [pc, #476]	@ (8004758 <HAL_ADC_Init+0x2ec>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10f      	bne.n	80045a0 <HAL_ADC_Init+0x134>
 8004580:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004584:	f7ff ff38 	bl	80043f8 <LL_ADC_IsEnabled>
 8004588:	4604      	mov	r4, r0
 800458a:	4873      	ldr	r0, [pc, #460]	@ (8004758 <HAL_ADC_Init+0x2ec>)
 800458c:	f7ff ff34 	bl	80043f8 <LL_ADC_IsEnabled>
 8004590:	4603      	mov	r3, r0
 8004592:	4323      	orrs	r3, r4
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e012      	b.n	80045c6 <HAL_ADC_Init+0x15a>
 80045a0:	486e      	ldr	r0, [pc, #440]	@ (800475c <HAL_ADC_Init+0x2f0>)
 80045a2:	f7ff ff29 	bl	80043f8 <LL_ADC_IsEnabled>
 80045a6:	4604      	mov	r4, r0
 80045a8:	486d      	ldr	r0, [pc, #436]	@ (8004760 <HAL_ADC_Init+0x2f4>)
 80045aa:	f7ff ff25 	bl	80043f8 <LL_ADC_IsEnabled>
 80045ae:	4603      	mov	r3, r0
 80045b0:	431c      	orrs	r4, r3
 80045b2:	486c      	ldr	r0, [pc, #432]	@ (8004764 <HAL_ADC_Init+0x2f8>)
 80045b4:	f7ff ff20 	bl	80043f8 <LL_ADC_IsEnabled>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4323      	orrs	r3, r4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d012      	beq.n	80045f0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045d2:	d004      	beq.n	80045de <HAL_ADC_Init+0x172>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004758 <HAL_ADC_Init+0x2ec>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_Init+0x176>
 80045de:	4a62      	ldr	r2, [pc, #392]	@ (8004768 <HAL_ADC_Init+0x2fc>)
 80045e0:	e000      	b.n	80045e4 <HAL_ADC_Init+0x178>
 80045e2:	4a62      	ldr	r2, [pc, #392]	@ (800476c <HAL_ADC_Init+0x300>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f7ff fd68 	bl	80040c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7f5b      	ldrb	r3, [r3, #29]
 80045f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004600:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004606:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800460e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800461a:	2b01      	cmp	r3, #1
 800461c:	d106      	bne.n	800462c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	3b01      	subs	r3, #1
 8004624:	045b      	lsls	r3, r3, #17
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	4b48      	ldr	r3, [pc, #288]	@ (8004770 <HAL_ADC_Init+0x304>)
 8004650:	4013      	ands	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	69b9      	ldr	r1, [r7, #24]
 8004658:	430b      	orrs	r3, r1
 800465a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fee4 	bl	8004444 <LL_ADC_INJ_IsConversionOngoing>
 800467c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d17f      	bne.n	8004784 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d17c      	bne.n	8004784 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800468e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004696:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046a6:	f023 0302 	bic.w	r3, r3, #2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	69b9      	ldr	r1, [r7, #24]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d017      	beq.n	80046ec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80046d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80046d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6911      	ldr	r1, [r2, #16]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80046ea:	e013      	b.n	8004714 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800470c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004710:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800471a:	2b01      	cmp	r3, #1
 800471c:	d12a      	bne.n	8004774 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800473a:	4311      	orrs	r1, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004740:	430a      	orrs	r2, r1
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	611a      	str	r2, [r3, #16]
 800474e:	e019      	b.n	8004784 <HAL_ADC_Init+0x318>
 8004750:	20000024 	.word	0x20000024
 8004754:	053e2d63 	.word	0x053e2d63
 8004758:	50000100 	.word	0x50000100
 800475c:	50000400 	.word	0x50000400
 8004760:	50000500 	.word	0x50000500
 8004764:	50000600 	.word	0x50000600
 8004768:	50000300 	.word	0x50000300
 800476c:	50000700 	.word	0x50000700
 8004770:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10c      	bne.n	80047a6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004792:	f023 010f 	bic.w	r1, r3, #15
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	1e5a      	subs	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80047a4:	e007      	b.n	80047b6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 020f 	bic.w	r2, r2, #15
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047c6:	e007      	b.n	80047d8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	f043 0210 	orr.w	r2, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3724      	adds	r7, #36	@ 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd90      	pop	{r4, r7, pc}
 80047e2:	bf00      	nop

080047e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b0b6      	sub	sp, #216	@ 0xd8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x24>
 8004802:	2302      	movs	r3, #2
 8004804:	f000 bc13 	b.w	800502e <HAL_ADC_ConfigChannel+0x84a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fe02 	bl	800441e <LL_ADC_REG_IsConversionOngoing>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 83f3 	bne.w	8005008 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7ff fd18 	bl	8004264 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fdf0 	bl	800441e <LL_ADC_REG_IsConversionOngoing>
 800483e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fdfc 	bl	8004444 <LL_ADC_INJ_IsConversionOngoing>
 800484c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004850:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 81d9 	bne.w	8004c0c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800485a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 81d4 	bne.w	8004c0c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800486c:	d10f      	bne.n	800488e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2200      	movs	r2, #0
 8004878:	4619      	mov	r1, r3
 800487a:	f7ff fd1f 	bl	80042bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fcd9 	bl	800423e <LL_ADC_SetSamplingTimeCommonConfig>
 800488c:	e00e      	b.n	80048ac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	461a      	mov	r2, r3
 800489c:	f7ff fd0e 	bl	80042bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fcc9 	bl	800423e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	08db      	lsrs	r3, r3, #3
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d022      	beq.n	8004914 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6919      	ldr	r1, [r3, #16]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048de:	f7ff fc23 	bl	8004128 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f7ff fc6f 	bl	80041d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004900:	2b01      	cmp	r3, #1
 8004902:	d102      	bne.n	800490a <HAL_ADC_ConfigChannel+0x126>
 8004904:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004908:	e000      	b.n	800490c <HAL_ADC_ConfigChannel+0x128>
 800490a:	2300      	movs	r3, #0
 800490c:	461a      	mov	r2, r3
 800490e:	f7ff fc7b 	bl	8004208 <LL_ADC_SetOffsetSaturation>
 8004912:	e17b      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fc28 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004920:	4603      	mov	r3, r0
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x15c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fc1d 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	0e9b      	lsrs	r3, r3, #26
 800493a:	f003 021f 	and.w	r2, r3, #31
 800493e:	e01e      	b.n	800497e <HAL_ADC_ConfigChannel+0x19a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fc12 	bl	8004170 <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800495e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004962:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004966:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800496e:	2320      	movs	r3, #32
 8004970:	e004      	b.n	800497c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x1b2>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	0e9b      	lsrs	r3, r3, #26
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	e018      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x1e4>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80049aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80049b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e004      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80049be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d106      	bne.n	80049da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fbe1 	bl	800419c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2101      	movs	r1, #1
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fbc5 	bl	8004170 <LL_ADC_GetOffsetChannel>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x222>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2101      	movs	r1, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fbba 	bl	8004170 <LL_ADC_GetOffsetChannel>
 80049fc:	4603      	mov	r3, r0
 80049fe:	0e9b      	lsrs	r3, r3, #26
 8004a00:	f003 021f 	and.w	r2, r3, #31
 8004a04:	e01e      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x260>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fbaf 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004a24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004a34:	2320      	movs	r3, #32
 8004a36:	e004      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x278>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0e9b      	lsrs	r3, r3, #26
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	e018      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x2aa>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e004      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a88:	fab3 f383 	clz	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d106      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fb7e 	bl	800419c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fb62 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x2e8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2102      	movs	r1, #2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fb57 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	0e9b      	lsrs	r3, r3, #26
 8004ac6:	f003 021f 	and.w	r2, r3, #31
 8004aca:	e01e      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x326>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fb4c 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004afa:	2320      	movs	r3, #32
 8004afc:	e004      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x33e>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	0e9b      	lsrs	r3, r3, #26
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	e016      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x36c>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004b34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004b42:	2320      	movs	r3, #32
 8004b44:	e004      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d106      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fb1d 	bl	800419c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2103      	movs	r1, #3
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fb01 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x3aa>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2103      	movs	r1, #3
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff faf6 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004b84:	4603      	mov	r3, r0
 8004b86:	0e9b      	lsrs	r3, r3, #26
 8004b88:	f003 021f 	and.w	r2, r3, #31
 8004b8c:	e017      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x3da>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2103      	movs	r1, #3
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff faeb 	bl	8004170 <LL_ADC_GetOffsetChannel>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004baa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	e003      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004bb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d105      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x3f2>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	0e9b      	lsrs	r3, r3, #26
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	e011      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x416>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004bee:	2320      	movs	r3, #32
 8004bf0:	e003      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d106      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2103      	movs	r1, #3
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fac8 	bl	800419c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fbf1 	bl	80043f8 <LL_ADC_IsEnabled>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 813d 	bne.w	8004e98 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f7ff fb72 	bl	8004314 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4aa2      	ldr	r2, [pc, #648]	@ (8004ec0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f040 812e 	bne.w	8004e98 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x480>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0e9b      	lsrs	r3, r3, #26
 8004c52:	3301      	adds	r3, #1
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2b09      	cmp	r3, #9
 8004c5a:	bf94      	ite	ls
 8004c5c:	2301      	movls	r3, #1
 8004c5e:	2300      	movhi	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e019      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x4b4>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004c72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c74:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004c76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	e003      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004c80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	bf94      	ite	ls
 8004c92:	2301      	movls	r3, #1
 8004c94:	2300      	movhi	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d079      	beq.n	8004d90 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x4d4>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0e9b      	lsrs	r3, r3, #26
 8004cae:	3301      	adds	r3, #1
 8004cb0:	069b      	lsls	r3, r3, #26
 8004cb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cb6:	e015      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x500>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	e003      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	069b      	lsls	r3, r3, #26
 8004ce0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x520>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	0e9b      	lsrs	r3, r3, #26
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004d02:	e017      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x550>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0c:	fa93 f3a3 	rbit	r3, r3
 8004d10:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004d1c:	2320      	movs	r3, #32
 8004d1e:	e003      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x576>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	4613      	mov	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4413      	add	r3, r2
 8004d56:	051b      	lsls	r3, r3, #20
 8004d58:	e018      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x5a8>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004d72:	2320      	movs	r3, #32
 8004d74:	e003      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d78:	fab3 f383 	clz	r3, r3
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	4613      	mov	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4413      	add	r3, r2
 8004d8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	e07e      	b.n	8004e8e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x5c8>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	0e9b      	lsrs	r3, r3, #26
 8004da2:	3301      	adds	r3, #1
 8004da4:	069b      	lsls	r3, r3, #26
 8004da6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004daa:	e015      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x5f4>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	fa93 f3a3 	rbit	r3, r3
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004dc4:	2320      	movs	r3, #32
 8004dc6:	e003      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	fab3 f383 	clz	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	069b      	lsls	r3, r3, #26
 8004dd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d109      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x614>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0e9b      	lsrs	r3, r3, #26
 8004dea:	3301      	adds	r3, #1
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	e017      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x644>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	fa93 f3a3 	rbit	r3, r3
 8004e04:	61fb      	str	r3, [r7, #28]
  return result;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004e10:	2320      	movs	r3, #32
 8004e12:	e003      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	2101      	movs	r1, #1
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	ea42 0103 	orr.w	r1, r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10d      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x670>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	0e9b      	lsrs	r3, r3, #26
 8004e3e:	3301      	adds	r3, #1
 8004e40:	f003 021f 	and.w	r2, r3, #31
 8004e44:	4613      	mov	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4413      	add	r3, r2
 8004e4a:	3b1e      	subs	r3, #30
 8004e4c:	051b      	lsls	r3, r3, #20
 8004e4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	e01b      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x6a8>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	613b      	str	r3, [r7, #16]
  return result;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004e6c:	2320      	movs	r3, #32
 8004e6e:	e003      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	fab3 f383 	clz	r3, r3
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f003 021f 	and.w	r2, r3, #31
 8004e7e:	4613      	mov	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4413      	add	r3, r2
 8004e84:	3b1e      	subs	r3, #30
 8004e86:	051b      	lsls	r3, r3, #20
 8004e88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e92:	4619      	mov	r1, r3
 8004e94:	f7ff fa12 	bl	80042bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <HAL_ADC_ConfigChannel+0x6e0>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80be 	beq.w	8005022 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eae:	d004      	beq.n	8004eba <HAL_ADC_ConfigChannel+0x6d6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a04      	ldr	r2, [pc, #16]	@ (8004ec8 <HAL_ADC_ConfigChannel+0x6e4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x6ec>
 8004eba:	4b04      	ldr	r3, [pc, #16]	@ (8004ecc <HAL_ADC_ConfigChannel+0x6e8>)
 8004ebc:	e009      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x6ee>
 8004ebe:	bf00      	nop
 8004ec0:	407f0000 	.word	0x407f0000
 8004ec4:	80080000 	.word	0x80080000
 8004ec8:	50000100 	.word	0x50000100
 8004ecc:	50000300 	.word	0x50000300
 8004ed0:	4b59      	ldr	r3, [pc, #356]	@ (8005038 <HAL_ADC_ConfigChannel+0x854>)
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff f91a 	bl	800410c <LL_ADC_GetCommonPathInternalCh>
 8004ed8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a56      	ldr	r2, [pc, #344]	@ (800503c <HAL_ADC_ConfigChannel+0x858>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0x70c>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a55      	ldr	r2, [pc, #340]	@ (8005040 <HAL_ADC_ConfigChannel+0x85c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d13a      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d134      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f04:	d005      	beq.n	8004f12 <HAL_ADC_ConfigChannel+0x72e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8005044 <HAL_ADC_ConfigChannel+0x860>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	f040 8085 	bne.w	800501c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1a:	d004      	beq.n	8004f26 <HAL_ADC_ConfigChannel+0x742>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a49      	ldr	r2, [pc, #292]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d101      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x746>
 8004f26:	4a49      	ldr	r2, [pc, #292]	@ (800504c <HAL_ADC_ConfigChannel+0x868>)
 8004f28:	e000      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x748>
 8004f2a:	4a43      	ldr	r2, [pc, #268]	@ (8005038 <HAL_ADC_ConfigChannel+0x854>)
 8004f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f7ff f8d5 	bl	80040e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f3c:	4b44      	ldr	r3, [pc, #272]	@ (8005050 <HAL_ADC_ConfigChannel+0x86c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	099b      	lsrs	r3, r3, #6
 8004f42:	4a44      	ldr	r2, [pc, #272]	@ (8005054 <HAL_ADC_ConfigChannel+0x870>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	099b      	lsrs	r3, r3, #6
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f56:	e002      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f9      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f64:	e05a      	b.n	800501c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8005058 <HAL_ADC_ConfigChannel+0x874>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d125      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11f      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a31      	ldr	r2, [pc, #196]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d104      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x7ac>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a34      	ldr	r2, [pc, #208]	@ (800505c <HAL_ADC_ConfigChannel+0x878>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d047      	beq.n	8005020 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f98:	d004      	beq.n	8004fa4 <HAL_ADC_ConfigChannel+0x7c0>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x7c4>
 8004fa4:	4a29      	ldr	r2, [pc, #164]	@ (800504c <HAL_ADC_ConfigChannel+0x868>)
 8004fa6:	e000      	b.n	8004faa <HAL_ADC_ConfigChannel+0x7c6>
 8004fa8:	4a23      	ldr	r2, [pc, #140]	@ (8005038 <HAL_ADC_ConfigChannel+0x854>)
 8004faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f7ff f896 	bl	80040e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fba:	e031      	b.n	8005020 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a27      	ldr	r2, [pc, #156]	@ (8005060 <HAL_ADC_ConfigChannel+0x87c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d12d      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d127      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d022      	beq.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fe4:	d004      	beq.n	8004ff0 <HAL_ADC_ConfigChannel+0x80c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <HAL_ADC_ConfigChannel+0x864>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x810>
 8004ff0:	4a16      	ldr	r2, [pc, #88]	@ (800504c <HAL_ADC_ConfigChannel+0x868>)
 8004ff2:	e000      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x812>
 8004ff4:	4a10      	ldr	r2, [pc, #64]	@ (8005038 <HAL_ADC_ConfigChannel+0x854>)
 8004ff6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ffa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7ff f870 	bl	80040e6 <LL_ADC_SetCommonPathInternalCh>
 8005006:	e00c      	b.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800501a:	e002      	b.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800501c:	bf00      	nop
 800501e:	e000      	b.n	8005022 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005020:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800502a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800502e:	4618      	mov	r0, r3
 8005030:	37d8      	adds	r7, #216	@ 0xd8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	50000700 	.word	0x50000700
 800503c:	c3210000 	.word	0xc3210000
 8005040:	90c00010 	.word	0x90c00010
 8005044:	50000600 	.word	0x50000600
 8005048:	50000100 	.word	0x50000100
 800504c:	50000300 	.word	0x50000300
 8005050:	20000024 	.word	0x20000024
 8005054:	053e2d63 	.word	0x053e2d63
 8005058:	c7520000 	.word	0xc7520000
 800505c:	50000500 	.word	0x50000500
 8005060:	cb840000 	.word	0xcb840000

08005064 <LL_ADC_IsEnabled>:
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <LL_ADC_IsEnabled+0x18>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <LL_ADC_IsEnabled+0x1a>
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <LL_ADC_REG_IsConversionOngoing>:
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d101      	bne.n	80050a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b0a1      	sub	sp, #132	@ 0x84
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e0e7      	b.n	800529e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80050d6:	2300      	movs	r3, #0
 80050d8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80050da:	2300      	movs	r3, #0
 80050dc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050e6:	d102      	bne.n	80050ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050e8:	4b6f      	ldr	r3, [pc, #444]	@ (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	e009      	b.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a6e      	ldr	r2, [pc, #440]	@ (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d102      	bne.n	80050fe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80050f8:	4b6d      	ldr	r3, [pc, #436]	@ (80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	e001      	b.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510c:	f043 0220 	orr.w	r2, r3, #32
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0be      	b.n	800529e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff ffb1 	bl	800508a <LL_ADC_REG_IsConversionOngoing>
 8005128:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ffab 	bl	800508a <LL_ADC_REG_IsConversionOngoing>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 80a0 	bne.w	800527c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800513c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 809c 	bne.w	800527c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800514c:	d004      	beq.n	8005158 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a55      	ldr	r2, [pc, #340]	@ (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d101      	bne.n	800515c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005158:	4b56      	ldr	r3, [pc, #344]	@ (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800515a:	e000      	b.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800515c:	4b56      	ldr	r3, [pc, #344]	@ (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800515e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d04b      	beq.n	8005200 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800517a:	035b      	lsls	r3, r3, #13
 800517c:	430b      	orrs	r3, r1
 800517e:	431a      	orrs	r2, r3
 8005180:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005182:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800518c:	d004      	beq.n	8005198 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a45      	ldr	r2, [pc, #276]	@ (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d10f      	bne.n	80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005198:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800519c:	f7ff ff62 	bl	8005064 <LL_ADC_IsEnabled>
 80051a0:	4604      	mov	r4, r0
 80051a2:	4841      	ldr	r0, [pc, #260]	@ (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80051a4:	f7ff ff5e 	bl	8005064 <LL_ADC_IsEnabled>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4323      	orrs	r3, r4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e012      	b.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80051b8:	483c      	ldr	r0, [pc, #240]	@ (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80051ba:	f7ff ff53 	bl	8005064 <LL_ADC_IsEnabled>
 80051be:	4604      	mov	r4, r0
 80051c0:	483b      	ldr	r0, [pc, #236]	@ (80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80051c2:	f7ff ff4f 	bl	8005064 <LL_ADC_IsEnabled>
 80051c6:	4603      	mov	r3, r0
 80051c8:	431c      	orrs	r4, r3
 80051ca:	483c      	ldr	r0, [pc, #240]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80051cc:	f7ff ff4a 	bl	8005064 <LL_ADC_IsEnabled>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4323      	orrs	r3, r4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d056      	beq.n	8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80051ea:	f023 030f 	bic.w	r3, r3, #15
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	6811      	ldr	r1, [r2, #0]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	6892      	ldr	r2, [r2, #8]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	431a      	orrs	r2, r3
 80051fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051fc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051fe:	e047      	b.n	8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005200:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005208:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800520a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005214:	d004      	beq.n	8005220 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a23      	ldr	r2, [pc, #140]	@ (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10f      	bne.n	8005240 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005220:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005224:	f7ff ff1e 	bl	8005064 <LL_ADC_IsEnabled>
 8005228:	4604      	mov	r4, r0
 800522a:	481f      	ldr	r0, [pc, #124]	@ (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800522c:	f7ff ff1a 	bl	8005064 <LL_ADC_IsEnabled>
 8005230:	4603      	mov	r3, r0
 8005232:	4323      	orrs	r3, r4
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	e012      	b.n	8005266 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005240:	481a      	ldr	r0, [pc, #104]	@ (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005242:	f7ff ff0f 	bl	8005064 <LL_ADC_IsEnabled>
 8005246:	4604      	mov	r4, r0
 8005248:	4819      	ldr	r0, [pc, #100]	@ (80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800524a:	f7ff ff0b 	bl	8005064 <LL_ADC_IsEnabled>
 800524e:	4603      	mov	r3, r0
 8005250:	431c      	orrs	r4, r3
 8005252:	481a      	ldr	r0, [pc, #104]	@ (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005254:	f7ff ff06 	bl	8005064 <LL_ADC_IsEnabled>
 8005258:	4603      	mov	r3, r0
 800525a:	4323      	orrs	r3, r4
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d012      	beq.n	8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800526a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005272:	f023 030f 	bic.w	r3, r3, #15
 8005276:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005278:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800527a:	e009      	b.n	8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005280:	f043 0220 	orr.w	r2, r3, #32
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800528e:	e000      	b.n	8005292 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005290:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800529a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3784      	adds	r7, #132	@ 0x84
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	bf00      	nop
 80052a8:	50000100 	.word	0x50000100
 80052ac:	50000400 	.word	0x50000400
 80052b0:	50000500 	.word	0x50000500
 80052b4:	50000300 	.word	0x50000300
 80052b8:	50000700 	.word	0x50000700
 80052bc:	50000600 	.word	0x50000600

080052c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <__NVIC_SetPriorityGrouping+0x44>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052dc:	4013      	ands	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052f2:	4a04      	ldr	r2, [pc, #16]	@ (8005304 <__NVIC_SetPriorityGrouping+0x44>)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	60d3      	str	r3, [r2, #12]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	e000ed00 	.word	0xe000ed00

08005308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800530c:	4b04      	ldr	r3, [pc, #16]	@ (8005320 <__NVIC_GetPriorityGrouping+0x18>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	f003 0307 	and.w	r3, r3, #7
}
 8005316:	4618      	mov	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800532e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005332:	2b00      	cmp	r3, #0
 8005334:	db0b      	blt.n	800534e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	f003 021f 	and.w	r2, r3, #31
 800533c:	4907      	ldr	r1, [pc, #28]	@ (800535c <__NVIC_EnableIRQ+0x38>)
 800533e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2001      	movs	r0, #1
 8005346:	fa00 f202 	lsl.w	r2, r0, r2
 800534a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	e000e100 	.word	0xe000e100

08005360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	6039      	str	r1, [r7, #0]
 800536a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800536c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005370:	2b00      	cmp	r3, #0
 8005372:	db0a      	blt.n	800538a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	490c      	ldr	r1, [pc, #48]	@ (80053ac <__NVIC_SetPriority+0x4c>)
 800537a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537e:	0112      	lsls	r2, r2, #4
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	440b      	add	r3, r1
 8005384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005388:	e00a      	b.n	80053a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	4908      	ldr	r1, [pc, #32]	@ (80053b0 <__NVIC_SetPriority+0x50>)
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	3b04      	subs	r3, #4
 8005398:	0112      	lsls	r2, r2, #4
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	440b      	add	r3, r1
 800539e:	761a      	strb	r2, [r3, #24]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	e000e100 	.word	0xe000e100
 80053b0:	e000ed00 	.word	0xe000ed00

080053b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	@ 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f1c3 0307 	rsb	r3, r3, #7
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	bf28      	it	cs
 80053d2:	2304      	movcs	r3, #4
 80053d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3304      	adds	r3, #4
 80053da:	2b06      	cmp	r3, #6
 80053dc:	d902      	bls.n	80053e4 <NVIC_EncodePriority+0x30>
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	3b03      	subs	r3, #3
 80053e2:	e000      	b.n	80053e6 <NVIC_EncodePriority+0x32>
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43da      	mvns	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	401a      	ands	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	fa01 f303 	lsl.w	r3, r1, r3
 8005406:	43d9      	mvns	r1, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800540c:	4313      	orrs	r3, r2
         );
}
 800540e:	4618      	mov	r0, r3
 8005410:	3724      	adds	r7, #36	@ 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3b01      	subs	r3, #1
 8005428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800542c:	d301      	bcc.n	8005432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800542e:	2301      	movs	r3, #1
 8005430:	e00f      	b.n	8005452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005432:	4a0a      	ldr	r2, [pc, #40]	@ (800545c <SysTick_Config+0x40>)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3b01      	subs	r3, #1
 8005438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800543a:	210f      	movs	r1, #15
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	f7ff ff8e 	bl	8005360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005444:	4b05      	ldr	r3, [pc, #20]	@ (800545c <SysTick_Config+0x40>)
 8005446:	2200      	movs	r2, #0
 8005448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800544a:	4b04      	ldr	r3, [pc, #16]	@ (800545c <SysTick_Config+0x40>)
 800544c:	2207      	movs	r2, #7
 800544e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	e000e010 	.word	0xe000e010

08005460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff ff29 	bl	80052c0 <__NVIC_SetPriorityGrouping>
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	4603      	mov	r3, r0
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005484:	f7ff ff40 	bl	8005308 <__NVIC_GetPriorityGrouping>
 8005488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7ff ff90 	bl	80053b4 <NVIC_EncodePriority>
 8005494:	4602      	mov	r2, r0
 8005496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800549a:	4611      	mov	r1, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff ff5f 	bl	8005360 <__NVIC_SetPriority>
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	4603      	mov	r3, r0
 80054b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ff33 	bl	8005324 <__NVIC_EnableIRQ>
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff ffa4 	bl	800541c <SysTick_Config>
 80054d4:	4603      	mov	r3, r0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e08d      	b.n	800560e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	4b47      	ldr	r3, [pc, #284]	@ (8005618 <HAL_DMA_Init+0x138>)
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d80f      	bhi.n	800551e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	4b45      	ldr	r3, [pc, #276]	@ (800561c <HAL_DMA_Init+0x13c>)
 8005506:	4413      	add	r3, r2
 8005508:	4a45      	ldr	r2, [pc, #276]	@ (8005620 <HAL_DMA_Init+0x140>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	009a      	lsls	r2, r3, #2
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a42      	ldr	r2, [pc, #264]	@ (8005624 <HAL_DMA_Init+0x144>)
 800551a:	641a      	str	r2, [r3, #64]	@ 0x40
 800551c:	e00e      	b.n	800553c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	4b40      	ldr	r3, [pc, #256]	@ (8005628 <HAL_DMA_Init+0x148>)
 8005526:	4413      	add	r3, r2
 8005528:	4a3d      	ldr	r2, [pc, #244]	@ (8005620 <HAL_DMA_Init+0x140>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	009a      	lsls	r2, r3, #2
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a3c      	ldr	r2, [pc, #240]	@ (800562c <HAL_DMA_Init+0x14c>)
 800553a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005556:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f8fe 	bl	8005790 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800559c:	d102      	bne.n	80055a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d010      	beq.n	80055e4 <HAL_DMA_Init+0x104>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d80c      	bhi.n	80055e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f91e 	bl	800580c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055e0:	605a      	str	r2, [r3, #4]
 80055e2:	e008      	b.n	80055f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40020407 	.word	0x40020407
 800561c:	bffdfff8 	.word	0xbffdfff8
 8005620:	cccccccd 	.word	0xcccccccd
 8005624:	40020000 	.word	0x40020000
 8005628:	bffdfbf8 	.word	0xbffdfbf8
 800562c:	40020400 	.word	0x40020400

08005630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2204      	movs	r2, #4
 8005652:	409a      	lsls	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4013      	ands	r3, r2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d026      	beq.n	80056aa <HAL_DMA_IRQHandler+0x7a>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d021      	beq.n	80056aa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d107      	bne.n	8005684 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0204 	bic.w	r2, r2, #4
 8005682:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005688:	f003 021f 	and.w	r2, r3, #31
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005690:	2104      	movs	r1, #4
 8005692:	fa01 f202 	lsl.w	r2, r1, r2
 8005696:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569c:	2b00      	cmp	r3, #0
 800569e:	d071      	beq.n	8005784 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056a8:	e06c      	b.n	8005784 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2202      	movs	r2, #2
 80056b4:	409a      	lsls	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d02e      	beq.n	800571c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d029      	beq.n	800571c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 020a 	bic.w	r2, r2, #10
 80056e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f2:	f003 021f 	and.w	r2, r3, #31
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	2102      	movs	r1, #2
 80056fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005700:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d038      	beq.n	8005784 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800571a:	e033      	b.n	8005784 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2208      	movs	r2, #8
 8005726:	409a      	lsls	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d02a      	beq.n	8005786 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	2b00      	cmp	r3, #0
 8005738:	d025      	beq.n	8005786 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 020e 	bic.w	r2, r2, #14
 8005748:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	f003 021f 	and.w	r2, r3, #31
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	2101      	movs	r1, #1
 8005758:	fa01 f202 	lsl.w	r2, r1, r2
 800575c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005784:	bf00      	nop
 8005786:	bf00      	nop
}
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	4b16      	ldr	r3, [pc, #88]	@ (80057f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d802      	bhi.n	80057aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80057a4:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e001      	b.n	80057ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80057aa:	4b15      	ldr	r3, [pc, #84]	@ (8005800 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80057ac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	3b08      	subs	r3, #8
 80057ba:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80057bc:	fba2 2303 	umull	r2, r3, r2, r3
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	009a      	lsls	r2, r3, #2
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	461a      	mov	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005808 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80057da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	2201      	movs	r2, #1
 80057e4:	409a      	lsls	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40020407 	.word	0x40020407
 80057fc:	40020800 	.word	0x40020800
 8005800:	40020820 	.word	0x40020820
 8005804:	cccccccd 	.word	0xcccccccd
 8005808:	40020880 	.word	0x40020880

0800580c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	461a      	mov	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a08      	ldr	r2, [pc, #32]	@ (8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800582e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3b01      	subs	r3, #1
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	2201      	movs	r2, #1
 800583a:	409a      	lsls	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	1000823f 	.word	0x1000823f
 8005850:	40020940 	.word	0x40020940

08005854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005862:	e15a      	b.n	8005b1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	2101      	movs	r1, #1
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	4013      	ands	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 814c 	beq.w	8005b14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d005      	beq.n	8005894 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005890:	2b02      	cmp	r3, #2
 8005892:	d130      	bne.n	80058f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	2203      	movs	r2, #3
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	43db      	mvns	r3, r3
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4013      	ands	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058ca:	2201      	movs	r2, #1
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43db      	mvns	r3, r3
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4013      	ands	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	f003 0201 	and.w	r2, r3, #1
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d017      	beq.n	8005932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	2203      	movs	r2, #3
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43db      	mvns	r3, r3
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4013      	ands	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d123      	bne.n	8005986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	08da      	lsrs	r2, r3, #3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3208      	adds	r2, #8
 8005946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	220f      	movs	r2, #15
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4013      	ands	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	08da      	lsrs	r2, r3, #3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3208      	adds	r2, #8
 8005980:	6939      	ldr	r1, [r7, #16]
 8005982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	2203      	movs	r2, #3
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	43db      	mvns	r3, r3
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4013      	ands	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f003 0203 	and.w	r2, r3, #3
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 80a6 	beq.w	8005b14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005b38 <HAL_GPIO_Init+0x2e4>)
 80059ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059cc:	4a5a      	ldr	r2, [pc, #360]	@ (8005b38 <HAL_GPIO_Init+0x2e4>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80059d4:	4b58      	ldr	r3, [pc, #352]	@ (8005b38 <HAL_GPIO_Init+0x2e4>)
 80059d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059e0:	4a56      	ldr	r2, [pc, #344]	@ (8005b3c <HAL_GPIO_Init+0x2e8>)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	089b      	lsrs	r3, r3, #2
 80059e6:	3302      	adds	r3, #2
 80059e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	220f      	movs	r2, #15
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4013      	ands	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a0a:	d01f      	beq.n	8005a4c <HAL_GPIO_Init+0x1f8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8005b40 <HAL_GPIO_Init+0x2ec>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d019      	beq.n	8005a48 <HAL_GPIO_Init+0x1f4>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a4b      	ldr	r2, [pc, #300]	@ (8005b44 <HAL_GPIO_Init+0x2f0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d013      	beq.n	8005a44 <HAL_GPIO_Init+0x1f0>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8005b48 <HAL_GPIO_Init+0x2f4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00d      	beq.n	8005a40 <HAL_GPIO_Init+0x1ec>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a49      	ldr	r2, [pc, #292]	@ (8005b4c <HAL_GPIO_Init+0x2f8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d007      	beq.n	8005a3c <HAL_GPIO_Init+0x1e8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a48      	ldr	r2, [pc, #288]	@ (8005b50 <HAL_GPIO_Init+0x2fc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d101      	bne.n	8005a38 <HAL_GPIO_Init+0x1e4>
 8005a34:	2305      	movs	r3, #5
 8005a36:	e00a      	b.n	8005a4e <HAL_GPIO_Init+0x1fa>
 8005a38:	2306      	movs	r3, #6
 8005a3a:	e008      	b.n	8005a4e <HAL_GPIO_Init+0x1fa>
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	e006      	b.n	8005a4e <HAL_GPIO_Init+0x1fa>
 8005a40:	2303      	movs	r3, #3
 8005a42:	e004      	b.n	8005a4e <HAL_GPIO_Init+0x1fa>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e002      	b.n	8005a4e <HAL_GPIO_Init+0x1fa>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_GPIO_Init+0x1fa>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	f002 0203 	and.w	r2, r2, #3
 8005a54:	0092      	lsls	r2, r2, #2
 8005a56:	4093      	lsls	r3, r2
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a5e:	4937      	ldr	r1, [pc, #220]	@ (8005b3c <HAL_GPIO_Init+0x2e8>)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	089b      	lsrs	r3, r3, #2
 8005a64:	3302      	adds	r3, #2
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a6c:	4b39      	ldr	r3, [pc, #228]	@ (8005b54 <HAL_GPIO_Init+0x300>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a90:	4a30      	ldr	r2, [pc, #192]	@ (8005b54 <HAL_GPIO_Init+0x300>)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a96:	4b2f      	ldr	r3, [pc, #188]	@ (8005b54 <HAL_GPIO_Init+0x300>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005aba:	4a26      	ldr	r2, [pc, #152]	@ (8005b54 <HAL_GPIO_Init+0x300>)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ac0:	4b24      	ldr	r3, [pc, #144]	@ (8005b54 <HAL_GPIO_Init+0x300>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4013      	ands	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b54 <HAL_GPIO_Init+0x300>)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005aea:	4b1a      	ldr	r3, [pc, #104]	@ (8005b54 <HAL_GPIO_Init+0x300>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	43db      	mvns	r3, r3
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4013      	ands	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b0e:	4a11      	ldr	r2, [pc, #68]	@ (8005b54 <HAL_GPIO_Init+0x300>)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	3301      	adds	r3, #1
 8005b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f47f ae9d 	bne.w	8005864 <HAL_GPIO_Init+0x10>
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	48000400 	.word	0x48000400
 8005b44:	48000800 	.word	0x48000800
 8005b48:	48000c00 	.word	0x48000c00
 8005b4c:	48001000 	.word	0x48001000
 8005b50:	48001400 	.word	0x48001400
 8005b54:	40010400 	.word	0x40010400

08005b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	887b      	ldrh	r3, [r7, #2]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
 8005b74:	e001      	b.n	8005b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
 8005b94:	4613      	mov	r3, r2
 8005b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b98:	787b      	ldrb	r3, [r7, #1]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b9e:	887a      	ldrh	r2, [r7, #2]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ba4:	e002      	b.n	8005bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ba6:	887a      	ldrh	r2, [r7, #2]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005bc2:	4b08      	ldr	r3, [pc, #32]	@ (8005be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bce:	4a05      	ldr	r2, [pc, #20]	@ (8005be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f806 	bl	8005be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40010400 	.word	0x40010400

08005be8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d141      	bne.n	8005c92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1a:	d131      	bne.n	8005c80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c1c:	4b47      	ldr	r3, [pc, #284]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c22:	4a46      	ldr	r2, [pc, #280]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c2c:	4b43      	ldr	r3, [pc, #268]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c34:	4a41      	ldr	r2, [pc, #260]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c3c:	4b40      	ldr	r3, [pc, #256]	@ (8005d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2232      	movs	r2, #50	@ 0x32
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	4a3f      	ldr	r2, [pc, #252]	@ (8005d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	0c9b      	lsrs	r3, r3, #18
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c52:	e002      	b.n	8005c5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c5a:	4b38      	ldr	r3, [pc, #224]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c66:	d102      	bne.n	8005c6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f2      	bne.n	8005c54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c6e:	4b33      	ldr	r3, [pc, #204]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c7a:	d158      	bne.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e057      	b.n	8005d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c80:	4b2e      	ldr	r3, [pc, #184]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c86:	4a2d      	ldr	r2, [pc, #180]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c90:	e04d      	b.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c98:	d141      	bne.n	8005d1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c9a:	4b28      	ldr	r3, [pc, #160]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca6:	d131      	bne.n	8005d0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ca8:	4b24      	ldr	r3, [pc, #144]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cae:	4a23      	ldr	r2, [pc, #140]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cb8:	4b20      	ldr	r3, [pc, #128]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2232      	movs	r2, #50	@ 0x32
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	0c9b      	lsrs	r3, r3, #18
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cde:	e002      	b.n	8005ce6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ce6:	4b15      	ldr	r3, [pc, #84]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cf2:	d102      	bne.n	8005cfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f2      	bne.n	8005ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cfa:	4b10      	ldr	r3, [pc, #64]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d06:	d112      	bne.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e011      	b.n	8005d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d12:	4a0a      	ldr	r2, [pc, #40]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d1c:	e007      	b.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d1e:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d26:	4a05      	ldr	r2, [pc, #20]	@ (8005d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	20000024 	.word	0x20000024
 8005d44:	431bde83 	.word	0x431bde83

08005d48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d4c:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d56:	6093      	str	r3, [r2, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40007000 	.word	0x40007000

08005d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e2fe      	b.n	8006378 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d075      	beq.n	8005e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d86:	4b97      	ldr	r3, [pc, #604]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
 8005d8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d90:	4b94      	ldr	r3, [pc, #592]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b0c      	cmp	r3, #12
 8005d9e:	d102      	bne.n	8005da6 <HAL_RCC_OscConfig+0x3e>
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d002      	beq.n	8005dac <HAL_RCC_OscConfig+0x44>
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d10b      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dac:	4b8d      	ldr	r3, [pc, #564]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d05b      	beq.n	8005e70 <HAL_RCC_OscConfig+0x108>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d157      	bne.n	8005e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e2d9      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dcc:	d106      	bne.n	8005ddc <HAL_RCC_OscConfig+0x74>
 8005dce:	4b85      	ldr	r3, [pc, #532]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a84      	ldr	r2, [pc, #528]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e01d      	b.n	8005e18 <HAL_RCC_OscConfig+0xb0>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005de4:	d10c      	bne.n	8005e00 <HAL_RCC_OscConfig+0x98>
 8005de6:	4b7f      	ldr	r3, [pc, #508]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a7e      	ldr	r2, [pc, #504]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	4b7c      	ldr	r3, [pc, #496]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a7b      	ldr	r2, [pc, #492]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e00b      	b.n	8005e18 <HAL_RCC_OscConfig+0xb0>
 8005e00:	4b78      	ldr	r3, [pc, #480]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a77      	ldr	r2, [pc, #476]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	4b75      	ldr	r3, [pc, #468]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a74      	ldr	r2, [pc, #464]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d013      	beq.n	8005e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e20:	f7fe f942 	bl	80040a8 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fe f93e 	bl	80040a8 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	@ 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e29e      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0xc0>
 8005e46:	e014      	b.n	8005e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fe f92e 	bl	80040a8 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fe f92a 	bl	80040a8 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	@ 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e28a      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e62:	4b60      	ldr	r3, [pc, #384]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0xe8>
 8005e6e:	e000      	b.n	8005e72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d075      	beq.n	8005f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e7e:	4b59      	ldr	r3, [pc, #356]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 030c 	and.w	r3, r3, #12
 8005e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e88:	4b56      	ldr	r3, [pc, #344]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	d102      	bne.n	8005e9e <HAL_RCC_OscConfig+0x136>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d002      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x13c>
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d11f      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_OscConfig+0x154>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e25d      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebc:	4b49      	ldr	r3, [pc, #292]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	061b      	lsls	r3, r3, #24
 8005eca:	4946      	ldr	r1, [pc, #280]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ed0:	4b45      	ldr	r3, [pc, #276]	@ (8005fe8 <HAL_RCC_OscConfig+0x280>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe f89b 	bl	8004010 <HAL_InitTick>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d043      	beq.n	8005f68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e249      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d023      	beq.n	8005f34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eec:	4b3d      	ldr	r3, [pc, #244]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef8:	f7fe f8d6 	bl	80040a8 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f00:	f7fe f8d2 	bl	80040a8 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e232      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f12:	4b34      	ldr	r3, [pc, #208]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0f0      	beq.n	8005f00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1e:	4b31      	ldr	r3, [pc, #196]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	061b      	lsls	r3, r3, #24
 8005f2c:	492d      	ldr	r1, [pc, #180]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	604b      	str	r3, [r1, #4]
 8005f32:	e01a      	b.n	8005f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f34:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005f3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f40:	f7fe f8b2 	bl	80040a8 <HAL_GetTick>
 8005f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f48:	f7fe f8ae 	bl	80040a8 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e20e      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f5a:	4b22      	ldr	r3, [pc, #136]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1f0      	bne.n	8005f48 <HAL_RCC_OscConfig+0x1e0>
 8005f66:	e000      	b.n	8005f6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d041      	beq.n	8005ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01c      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f7e:	4b19      	ldr	r3, [pc, #100]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f84:	4a17      	ldr	r2, [pc, #92]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8e:	f7fe f88b 	bl	80040a8 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f96:	f7fe f887 	bl	80040a8 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e1e7      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0ef      	beq.n	8005f96 <HAL_RCC_OscConfig+0x22e>
 8005fb6:	e020      	b.n	8005ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fbe:	4a09      	ldr	r2, [pc, #36]	@ (8005fe4 <HAL_RCC_OscConfig+0x27c>)
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fe f86e 	bl	80040a8 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fce:	e00d      	b.n	8005fec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd0:	f7fe f86a 	bl	80040a8 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d906      	bls.n	8005fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e1ca      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fec:	4b8c      	ldr	r3, [pc, #560]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8005fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1ea      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80a6 	beq.w	8006154 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006008:	2300      	movs	r3, #0
 800600a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800600c:	4b84      	ldr	r3, [pc, #528]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 800600e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_RCC_OscConfig+0x2b4>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_RCC_OscConfig+0x2b6>
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006022:	4b7f      	ldr	r3, [pc, #508]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8006024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006026:	4a7e      	ldr	r2, [pc, #504]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8006028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800602c:	6593      	str	r3, [r2, #88]	@ 0x58
 800602e:	4b7c      	ldr	r3, [pc, #496]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8006030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800603a:	2301      	movs	r3, #1
 800603c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800603e:	4b79      	ldr	r3, [pc, #484]	@ (8006224 <HAL_RCC_OscConfig+0x4bc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006046:	2b00      	cmp	r3, #0
 8006048:	d118      	bne.n	800607c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800604a:	4b76      	ldr	r3, [pc, #472]	@ (8006224 <HAL_RCC_OscConfig+0x4bc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a75      	ldr	r2, [pc, #468]	@ (8006224 <HAL_RCC_OscConfig+0x4bc>)
 8006050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006056:	f7fe f827 	bl	80040a8 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605e:	f7fe f823 	bl	80040a8 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e183      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006070:	4b6c      	ldr	r3, [pc, #432]	@ (8006224 <HAL_RCC_OscConfig+0x4bc>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0f0      	beq.n	800605e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d108      	bne.n	8006096 <HAL_RCC_OscConfig+0x32e>
 8006084:	4b66      	ldr	r3, [pc, #408]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800608a:	4a65      	ldr	r2, [pc, #404]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006094:	e024      	b.n	80060e0 <HAL_RCC_OscConfig+0x378>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b05      	cmp	r3, #5
 800609c:	d110      	bne.n	80060c0 <HAL_RCC_OscConfig+0x358>
 800609e:	4b60      	ldr	r3, [pc, #384]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80060a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a4:	4a5e      	ldr	r2, [pc, #376]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80060a6:	f043 0304 	orr.w	r3, r3, #4
 80060aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b4:	4a5a      	ldr	r2, [pc, #360]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80060b6:	f043 0301 	orr.w	r3, r3, #1
 80060ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060be:	e00f      	b.n	80060e0 <HAL_RCC_OscConfig+0x378>
 80060c0:	4b57      	ldr	r3, [pc, #348]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c6:	4a56      	ldr	r2, [pc, #344]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060d0:	4b53      	ldr	r3, [pc, #332]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d6:	4a52      	ldr	r2, [pc, #328]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80060d8:	f023 0304 	bic.w	r3, r3, #4
 80060dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d016      	beq.n	8006116 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e8:	f7fd ffde 	bl	80040a8 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ee:	e00a      	b.n	8006106 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f0:	f7fd ffda 	bl	80040a8 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e138      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006106:	4b46      	ldr	r3, [pc, #280]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0ed      	beq.n	80060f0 <HAL_RCC_OscConfig+0x388>
 8006114:	e015      	b.n	8006142 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006116:	f7fd ffc7 	bl	80040a8 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800611c:	e00a      	b.n	8006134 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fd ffc3 	bl	80040a8 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612c:	4293      	cmp	r3, r2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e121      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006134:	4b3a      	ldr	r3, [pc, #232]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1ed      	bne.n	800611e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006142:	7ffb      	ldrb	r3, [r7, #31]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d105      	bne.n	8006154 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006148:	4b35      	ldr	r3, [pc, #212]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 800614a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614c:	4a34      	ldr	r2, [pc, #208]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 800614e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006152:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d03c      	beq.n	80061da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01c      	beq.n	80061a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006168:	4b2d      	ldr	r3, [pc, #180]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 800616a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800616e:	4a2c      	ldr	r2, [pc, #176]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8006170:	f043 0301 	orr.w	r3, r3, #1
 8006174:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006178:	f7fd ff96 	bl	80040a8 <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006180:	f7fd ff92 	bl	80040a8 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e0f2      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006192:	4b23      	ldr	r3, [pc, #140]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8006194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ef      	beq.n	8006180 <HAL_RCC_OscConfig+0x418>
 80061a0:	e01b      	b.n	80061da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80061a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80061aa:	f023 0301 	bic.w	r3, r3, #1
 80061ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b2:	f7fd ff79 	bl	80040a8 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061ba:	f7fd ff75 	bl	80040a8 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e0d5      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061cc:	4b14      	ldr	r3, [pc, #80]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80061ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1ef      	bne.n	80061ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80c9 	beq.w	8006376 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 030c 	and.w	r3, r3, #12
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	f000 8083 	beq.w	80062f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d15e      	bne.n	80062b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061fa:	4b09      	ldr	r3, [pc, #36]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a08      	ldr	r2, [pc, #32]	@ (8006220 <HAL_RCC_OscConfig+0x4b8>)
 8006200:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006206:	f7fd ff4f 	bl	80040a8 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800620c:	e00c      	b.n	8006228 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800620e:	f7fd ff4b 	bl	80040a8 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d905      	bls.n	8006228 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e0ab      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
 8006220:	40021000 	.word	0x40021000
 8006224:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006228:	4b55      	ldr	r3, [pc, #340]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1ec      	bne.n	800620e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006234:	4b52      	ldr	r3, [pc, #328]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	4b52      	ldr	r3, [pc, #328]	@ (8006384 <HAL_RCC_OscConfig+0x61c>)
 800623a:	4013      	ands	r3, r2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6a11      	ldr	r1, [r2, #32]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006244:	3a01      	subs	r2, #1
 8006246:	0112      	lsls	r2, r2, #4
 8006248:	4311      	orrs	r1, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800624e:	0212      	lsls	r2, r2, #8
 8006250:	4311      	orrs	r1, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006256:	0852      	lsrs	r2, r2, #1
 8006258:	3a01      	subs	r2, #1
 800625a:	0552      	lsls	r2, r2, #21
 800625c:	4311      	orrs	r1, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006262:	0852      	lsrs	r2, r2, #1
 8006264:	3a01      	subs	r2, #1
 8006266:	0652      	lsls	r2, r2, #25
 8006268:	4311      	orrs	r1, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800626e:	06d2      	lsls	r2, r2, #27
 8006270:	430a      	orrs	r2, r1
 8006272:	4943      	ldr	r1, [pc, #268]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 8006274:	4313      	orrs	r3, r2
 8006276:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006278:	4b41      	ldr	r3, [pc, #260]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a40      	ldr	r2, [pc, #256]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 800627e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006282:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006284:	4b3e      	ldr	r3, [pc, #248]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	4a3d      	ldr	r2, [pc, #244]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 800628a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800628e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fd ff0a 	bl	80040a8 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006298:	f7fd ff06 	bl	80040a8 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e066      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062aa:	4b35      	ldr	r3, [pc, #212]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f0      	beq.n	8006298 <HAL_RCC_OscConfig+0x530>
 80062b6:	e05e      	b.n	8006376 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b8:	4b31      	ldr	r3, [pc, #196]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a30      	ldr	r2, [pc, #192]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 80062be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c4:	f7fd fef0 	bl	80040a8 <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062cc:	f7fd feec 	bl	80040a8 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e04c      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062de:	4b28      	ldr	r3, [pc, #160]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1f0      	bne.n	80062cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80062ea:	4b25      	ldr	r3, [pc, #148]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	4924      	ldr	r1, [pc, #144]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 80062f0:	4b25      	ldr	r3, [pc, #148]	@ (8006388 <HAL_RCC_OscConfig+0x620>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	60cb      	str	r3, [r1, #12]
 80062f6:	e03e      	b.n	8006376 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e039      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006304:	4b1e      	ldr	r3, [pc, #120]	@ (8006380 <HAL_RCC_OscConfig+0x618>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f003 0203 	and.w	r2, r3, #3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	429a      	cmp	r2, r3
 8006316:	d12c      	bne.n	8006372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	3b01      	subs	r3, #1
 8006324:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006326:	429a      	cmp	r2, r3
 8006328:	d123      	bne.n	8006372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006336:	429a      	cmp	r2, r3
 8006338:	d11b      	bne.n	8006372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006346:	429a      	cmp	r2, r3
 8006348:	d113      	bne.n	8006372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	3b01      	subs	r3, #1
 8006358:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800635a:	429a      	cmp	r2, r3
 800635c:	d109      	bne.n	8006372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	3b01      	subs	r3, #1
 800636c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800636e:	429a      	cmp	r2, r3
 8006370:	d001      	beq.n	8006376 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3720      	adds	r7, #32
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40021000 	.word	0x40021000
 8006384:	019f800c 	.word	0x019f800c
 8006388:	feeefffc 	.word	0xfeeefffc

0800638c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e11e      	b.n	80065e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063a4:	4b91      	ldr	r3, [pc, #580]	@ (80065ec <HAL_RCC_ClockConfig+0x260>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d910      	bls.n	80063d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b2:	4b8e      	ldr	r3, [pc, #568]	@ (80065ec <HAL_RCC_ClockConfig+0x260>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f023 020f 	bic.w	r2, r3, #15
 80063ba:	498c      	ldr	r1, [pc, #560]	@ (80065ec <HAL_RCC_ClockConfig+0x260>)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	4313      	orrs	r3, r2
 80063c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c2:	4b8a      	ldr	r3, [pc, #552]	@ (80065ec <HAL_RCC_ClockConfig+0x260>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d001      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e106      	b.n	80065e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d073      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d129      	bne.n	800643c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063e8:	4b81      	ldr	r3, [pc, #516]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0f4      	b.n	80065e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80063f8:	f000 f99e 	bl	8006738 <RCC_GetSysClockFreqFromPLLSource>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	4a7c      	ldr	r2, [pc, #496]	@ (80065f4 <HAL_RCC_ClockConfig+0x268>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d93f      	bls.n	8006486 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006406:	4b7a      	ldr	r3, [pc, #488]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d009      	beq.n	8006426 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800641a:	2b00      	cmp	r3, #0
 800641c:	d033      	beq.n	8006486 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006422:	2b00      	cmp	r3, #0
 8006424:	d12f      	bne.n	8006486 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006426:	4b72      	ldr	r3, [pc, #456]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800642e:	4a70      	ldr	r2, [pc, #448]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006434:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006436:	2380      	movs	r3, #128	@ 0x80
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	e024      	b.n	8006486 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b02      	cmp	r3, #2
 8006442:	d107      	bne.n	8006454 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006444:	4b6a      	ldr	r3, [pc, #424]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0c6      	b.n	80065e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006454:	4b66      	ldr	r3, [pc, #408]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e0be      	b.n	80065e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006464:	f000 f8ce 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8006468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4a61      	ldr	r2, [pc, #388]	@ (80065f4 <HAL_RCC_ClockConfig+0x268>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d909      	bls.n	8006486 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006472:	4b5f      	ldr	r3, [pc, #380]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800647a:	4a5d      	ldr	r2, [pc, #372]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 800647c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006480:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006482:	2380      	movs	r3, #128	@ 0x80
 8006484:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006486:	4b5a      	ldr	r3, [pc, #360]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f023 0203 	bic.w	r2, r3, #3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4957      	ldr	r1, [pc, #348]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006494:	4313      	orrs	r3, r2
 8006496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006498:	f7fd fe06 	bl	80040a8 <HAL_GetTick>
 800649c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649e:	e00a      	b.n	80064b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a0:	f7fd fe02 	bl	80040a8 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e095      	b.n	80065e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064b6:	4b4e      	ldr	r3, [pc, #312]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 020c 	and.w	r2, r3, #12
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d1eb      	bne.n	80064a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d023      	beq.n	800651c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064e0:	4b43      	ldr	r3, [pc, #268]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	4a42      	ldr	r2, [pc, #264]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 80064e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80064ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80064f8:	4b3d      	ldr	r3, [pc, #244]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006500:	4a3b      	ldr	r2, [pc, #236]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006502:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006508:	4b39      	ldr	r3, [pc, #228]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4936      	ldr	r1, [pc, #216]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006516:	4313      	orrs	r3, r2
 8006518:	608b      	str	r3, [r1, #8]
 800651a:	e008      	b.n	800652e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b80      	cmp	r3, #128	@ 0x80
 8006520:	d105      	bne.n	800652e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006522:	4b33      	ldr	r3, [pc, #204]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	4a32      	ldr	r2, [pc, #200]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006528:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800652c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800652e:	4b2f      	ldr	r3, [pc, #188]	@ (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d21d      	bcs.n	8006578 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800653c:	4b2b      	ldr	r3, [pc, #172]	@ (80065ec <HAL_RCC_ClockConfig+0x260>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f023 020f 	bic.w	r2, r3, #15
 8006544:	4929      	ldr	r1, [pc, #164]	@ (80065ec <HAL_RCC_ClockConfig+0x260>)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	4313      	orrs	r3, r2
 800654a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800654c:	f7fd fdac 	bl	80040a8 <HAL_GetTick>
 8006550:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006552:	e00a      	b.n	800656a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006554:	f7fd fda8 	bl	80040a8 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006562:	4293      	cmp	r3, r2
 8006564:	d901      	bls.n	800656a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e03b      	b.n	80065e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800656a:	4b20      	ldr	r3, [pc, #128]	@ (80065ec <HAL_RCC_ClockConfig+0x260>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d1ed      	bne.n	8006554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006584:	4b1a      	ldr	r3, [pc, #104]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4917      	ldr	r1, [pc, #92]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065a2:	4b13      	ldr	r3, [pc, #76]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	490f      	ldr	r1, [pc, #60]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065b6:	f000 f825 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 80065ba:	4602      	mov	r2, r0
 80065bc:	4b0c      	ldr	r3, [pc, #48]	@ (80065f0 <HAL_RCC_ClockConfig+0x264>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	490c      	ldr	r1, [pc, #48]	@ (80065f8 <HAL_RCC_ClockConfig+0x26c>)
 80065c8:	5ccb      	ldrb	r3, [r1, r3]
 80065ca:	f003 031f 	and.w	r3, r3, #31
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	4a0a      	ldr	r2, [pc, #40]	@ (80065fc <HAL_RCC_ClockConfig+0x270>)
 80065d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80065d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <HAL_RCC_ClockConfig+0x274>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fd fd18 	bl	8004010 <HAL_InitTick>
 80065e0:	4603      	mov	r3, r0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40022000 	.word	0x40022000
 80065f0:	40021000 	.word	0x40021000
 80065f4:	04c4b400 	.word	0x04c4b400
 80065f8:	08009400 	.word	0x08009400
 80065fc:	20000024 	.word	0x20000024
 8006600:	20000028 	.word	0x20000028

08006604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800660a:	4b2c      	ldr	r3, [pc, #176]	@ (80066bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	2b04      	cmp	r3, #4
 8006614:	d102      	bne.n	800661c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006616:	4b2a      	ldr	r3, [pc, #168]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	e047      	b.n	80066ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800661c:	4b27      	ldr	r3, [pc, #156]	@ (80066bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 030c 	and.w	r3, r3, #12
 8006624:	2b08      	cmp	r3, #8
 8006626:	d102      	bne.n	800662e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006628:	4b26      	ldr	r3, [pc, #152]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	e03e      	b.n	80066ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800662e:	4b23      	ldr	r3, [pc, #140]	@ (80066bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b0c      	cmp	r3, #12
 8006638:	d136      	bne.n	80066a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800663a:	4b20      	ldr	r3, [pc, #128]	@ (80066bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006644:	4b1d      	ldr	r3, [pc, #116]	@ (80066bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	091b      	lsrs	r3, r3, #4
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	3301      	adds	r3, #1
 8006650:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d10c      	bne.n	8006672 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006658:	4a1a      	ldr	r2, [pc, #104]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006660:	4a16      	ldr	r2, [pc, #88]	@ (80066bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006662:	68d2      	ldr	r2, [r2, #12]
 8006664:	0a12      	lsrs	r2, r2, #8
 8006666:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800666a:	fb02 f303 	mul.w	r3, r2, r3
 800666e:	617b      	str	r3, [r7, #20]
      break;
 8006670:	e00c      	b.n	800668c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006672:	4a13      	ldr	r2, [pc, #76]	@ (80066c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	4a10      	ldr	r2, [pc, #64]	@ (80066bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800667c:	68d2      	ldr	r2, [r2, #12]
 800667e:	0a12      	lsrs	r2, r2, #8
 8006680:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006684:	fb02 f303 	mul.w	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]
      break;
 800668a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800668c:	4b0b      	ldr	r3, [pc, #44]	@ (80066bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	0e5b      	lsrs	r3, r3, #25
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	3301      	adds	r3, #1
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a4:	613b      	str	r3, [r7, #16]
 80066a6:	e001      	b.n	80066ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80066ac:	693b      	ldr	r3, [r7, #16]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40021000 	.word	0x40021000
 80066c0:	00f42400 	.word	0x00f42400
 80066c4:	016e3600 	.word	0x016e3600

080066c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066cc:	4b03      	ldr	r3, [pc, #12]	@ (80066dc <HAL_RCC_GetHCLKFreq+0x14>)
 80066ce:	681b      	ldr	r3, [r3, #0]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000024 	.word	0x20000024

080066e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80066e4:	f7ff fff0 	bl	80066c8 <HAL_RCC_GetHCLKFreq>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4b06      	ldr	r3, [pc, #24]	@ (8006704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	4904      	ldr	r1, [pc, #16]	@ (8006708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066f6:	5ccb      	ldrb	r3, [r1, r3]
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006700:	4618      	mov	r0, r3
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40021000 	.word	0x40021000
 8006708:	08009410 	.word	0x08009410

0800670c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006710:	f7ff ffda 	bl	80066c8 <HAL_RCC_GetHCLKFreq>
 8006714:	4602      	mov	r2, r0
 8006716:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	0adb      	lsrs	r3, r3, #11
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	4904      	ldr	r1, [pc, #16]	@ (8006734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006722:	5ccb      	ldrb	r3, [r1, r3]
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40021000 	.word	0x40021000
 8006734:	08009410 	.word	0x08009410

08006738 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800673e:	4b1e      	ldr	r3, [pc, #120]	@ (80067b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006748:	4b1b      	ldr	r3, [pc, #108]	@ (80067b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	091b      	lsrs	r3, r3, #4
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	3301      	adds	r3, #1
 8006754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b03      	cmp	r3, #3
 800675a:	d10c      	bne.n	8006776 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800675c:	4a17      	ldr	r2, [pc, #92]	@ (80067bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	fbb2 f3f3 	udiv	r3, r2, r3
 8006764:	4a14      	ldr	r2, [pc, #80]	@ (80067b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006766:	68d2      	ldr	r2, [r2, #12]
 8006768:	0a12      	lsrs	r2, r2, #8
 800676a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	617b      	str	r3, [r7, #20]
    break;
 8006774:	e00c      	b.n	8006790 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006776:	4a12      	ldr	r2, [pc, #72]	@ (80067c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	fbb2 f3f3 	udiv	r3, r2, r3
 800677e:	4a0e      	ldr	r2, [pc, #56]	@ (80067b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006780:	68d2      	ldr	r2, [r2, #12]
 8006782:	0a12      	lsrs	r2, r2, #8
 8006784:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006788:	fb02 f303 	mul.w	r3, r2, r3
 800678c:	617b      	str	r3, [r7, #20]
    break;
 800678e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006790:	4b09      	ldr	r3, [pc, #36]	@ (80067b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	0e5b      	lsrs	r3, r3, #25
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	3301      	adds	r3, #1
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80067aa:	687b      	ldr	r3, [r7, #4]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	40021000 	.word	0x40021000
 80067bc:	016e3600 	.word	0x016e3600
 80067c0:	00f42400 	.word	0x00f42400

080067c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067cc:	2300      	movs	r3, #0
 80067ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067d0:	2300      	movs	r3, #0
 80067d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8098 	beq.w	8006912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067e2:	2300      	movs	r3, #0
 80067e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067e6:	4b43      	ldr	r3, [pc, #268]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10d      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f2:	4b40      	ldr	r3, [pc, #256]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f6:	4a3f      	ldr	r2, [pc, #252]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80067fe:	4b3d      	ldr	r3, [pc, #244]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006806:	60bb      	str	r3, [r7, #8]
 8006808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800680a:	2301      	movs	r3, #1
 800680c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800680e:	4b3a      	ldr	r3, [pc, #232]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a39      	ldr	r2, [pc, #228]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800681a:	f7fd fc45 	bl	80040a8 <HAL_GetTick>
 800681e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006820:	e009      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006822:	f7fd fc41 	bl	80040a8 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d902      	bls.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	74fb      	strb	r3, [r7, #19]
        break;
 8006834:	e005      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006836:	4b30      	ldr	r3, [pc, #192]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0ef      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006842:	7cfb      	ldrb	r3, [r7, #19]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d159      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006848:	4b2a      	ldr	r3, [pc, #168]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800684a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006852:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01e      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	429a      	cmp	r2, r3
 8006862:	d019      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006864:	4b23      	ldr	r3, [pc, #140]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800686e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006870:	4b20      	ldr	r3, [pc, #128]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006876:	4a1f      	ldr	r2, [pc, #124]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800687c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006880:	4b1c      	ldr	r3, [pc, #112]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006886:	4a1b      	ldr	r2, [pc, #108]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800688c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006890:	4a18      	ldr	r2, [pc, #96]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d016      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a2:	f7fd fc01 	bl	80040a8 <HAL_GetTick>
 80068a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068a8:	e00b      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068aa:	f7fd fbfd 	bl	80040a8 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d902      	bls.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	74fb      	strb	r3, [r7, #19]
            break;
 80068c0:	e006      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068c2:	4b0c      	ldr	r3, [pc, #48]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0ec      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80068d0:	7cfb      	ldrb	r3, [r7, #19]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10b      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068d6:	4b07      	ldr	r3, [pc, #28]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e4:	4903      	ldr	r1, [pc, #12]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80068ec:	e008      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ee:	7cfb      	ldrb	r3, [r7, #19]
 80068f0:	74bb      	strb	r3, [r7, #18]
 80068f2:	e005      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068f4:	40021000 	.word	0x40021000
 80068f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fc:	7cfb      	ldrb	r3, [r7, #19]
 80068fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006900:	7c7b      	ldrb	r3, [r7, #17]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d105      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006906:	4ba7      	ldr	r3, [pc, #668]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690a:	4aa6      	ldr	r2, [pc, #664]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800690c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006910:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00a      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800691e:	4ba1      	ldr	r3, [pc, #644]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006924:	f023 0203 	bic.w	r2, r3, #3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	499d      	ldr	r1, [pc, #628]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006940:	4b98      	ldr	r3, [pc, #608]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006946:	f023 020c 	bic.w	r2, r3, #12
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	4995      	ldr	r1, [pc, #596]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006962:	4b90      	ldr	r3, [pc, #576]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006968:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	498c      	ldr	r1, [pc, #560]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006984:	4b87      	ldr	r3, [pc, #540]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800698a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	4984      	ldr	r1, [pc, #528]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006994:	4313      	orrs	r3, r2
 8006996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0310 	and.w	r3, r3, #16
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069a6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	497b      	ldr	r1, [pc, #492]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069c8:	4b76      	ldr	r3, [pc, #472]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	4973      	ldr	r1, [pc, #460]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069ea:	4b6e      	ldr	r3, [pc, #440]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	496a      	ldr	r1, [pc, #424]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a0c:	4b65      	ldr	r3, [pc, #404]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	4962      	ldr	r1, [pc, #392]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	4959      	ldr	r1, [pc, #356]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a50:	4b54      	ldr	r3, [pc, #336]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a56:	f023 0203 	bic.w	r2, r3, #3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5e:	4951      	ldr	r1, [pc, #324]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a72:	4b4c      	ldr	r3, [pc, #304]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	4948      	ldr	r1, [pc, #288]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a94:	4b43      	ldr	r3, [pc, #268]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	4940      	ldr	r1, [pc, #256]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ab2:	d105      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006abe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d015      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006acc:	4b35      	ldr	r3, [pc, #212]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ada:	4932      	ldr	r1, [pc, #200]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aea:	d105      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aec:	4b2d      	ldr	r3, [pc, #180]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006af6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d015      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b04:	4b27      	ldr	r3, [pc, #156]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b12:	4924      	ldr	r1, [pc, #144]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b22:	d105      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b24:	4b1f      	ldr	r3, [pc, #124]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	4a1e      	ldr	r2, [pc, #120]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d015      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4a:	4916      	ldr	r1, [pc, #88]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b5a:	d105      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	4a10      	ldr	r2, [pc, #64]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d019      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	4908      	ldr	r1, [pc, #32]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b92:	d109      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b94:	4b03      	ldr	r3, [pc, #12]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4a02      	ldr	r2, [pc, #8]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b9e:	60d3      	str	r3, [r2, #12]
 8006ba0:	e002      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006ba2:	bf00      	nop
 8006ba4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d015      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006bb4:	4b29      	ldr	r3, [pc, #164]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc2:	4926      	ldr	r1, [pc, #152]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bd2:	d105      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bd4:	4b21      	ldr	r3, [pc, #132]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	4a20      	ldr	r2, [pc, #128]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d015      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006bec:	4b1b      	ldr	r3, [pc, #108]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bfa:	4918      	ldr	r1, [pc, #96]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0a:	d105      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c0c:	4b13      	ldr	r3, [pc, #76]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	4a12      	ldr	r2, [pc, #72]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d015      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c24:	4b0d      	ldr	r3, [pc, #52]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c32:	490a      	ldr	r1, [pc, #40]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c42:	d105      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c44:	4b05      	ldr	r3, [pc, #20]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	4a04      	ldr	r2, [pc, #16]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006c50:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40021000 	.word	0x40021000

08006c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e049      	b.n	8006d06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fc ff28 	bl	8003adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	f000 fef8 	bl	8007a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d001      	beq.n	8006d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e054      	b.n	8006dd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a26      	ldr	r2, [pc, #152]	@ (8006de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d022      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0x80>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d52:	d01d      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0x80>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a22      	ldr	r2, [pc, #136]	@ (8006de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d018      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0x80>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a21      	ldr	r2, [pc, #132]	@ (8006de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d013      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0x80>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dec <HAL_TIM_Base_Start_IT+0xdc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00e      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0x80>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1e      	ldr	r2, [pc, #120]	@ (8006df0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d009      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0x80>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0x80>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006df8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d115      	bne.n	8006dbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	4b19      	ldr	r3, [pc, #100]	@ (8006dfc <HAL_TIM_Base_Start_IT+0xec>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b06      	cmp	r3, #6
 8006da0:	d015      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0xbe>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da8:	d011      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0201 	orr.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dba:	e008      	b.n	8006dce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	e000      	b.n	8006dd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40012c00 	.word	0x40012c00
 8006de4:	40000400 	.word	0x40000400
 8006de8:	40000800 	.word	0x40000800
 8006dec:	40000c00 	.word	0x40000c00
 8006df0:	40013400 	.word	0x40013400
 8006df4:	40014000 	.word	0x40014000
 8006df8:	40015000 	.word	0x40015000
 8006dfc:	00010007 	.word	0x00010007

08006e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e049      	b.n	8006ea6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f841 	bl	8006eae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f000 fe28 	bl	8007a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d109      	bne.n	8006ee8 <HAL_TIM_PWM_Start+0x24>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	bf14      	ite	ne
 8006ee0:	2301      	movne	r3, #1
 8006ee2:	2300      	moveq	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	e03c      	b.n	8006f62 <HAL_TIM_PWM_Start+0x9e>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d109      	bne.n	8006f02 <HAL_TIM_PWM_Start+0x3e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	bf14      	ite	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	2300      	moveq	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	e02f      	b.n	8006f62 <HAL_TIM_PWM_Start+0x9e>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d109      	bne.n	8006f1c <HAL_TIM_PWM_Start+0x58>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	e022      	b.n	8006f62 <HAL_TIM_PWM_Start+0x9e>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b0c      	cmp	r3, #12
 8006f20:	d109      	bne.n	8006f36 <HAL_TIM_PWM_Start+0x72>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	bf14      	ite	ne
 8006f2e:	2301      	movne	r3, #1
 8006f30:	2300      	moveq	r3, #0
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	e015      	b.n	8006f62 <HAL_TIM_PWM_Start+0x9e>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b10      	cmp	r3, #16
 8006f3a:	d109      	bne.n	8006f50 <HAL_TIM_PWM_Start+0x8c>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	bf14      	ite	ne
 8006f48:	2301      	movne	r3, #1
 8006f4a:	2300      	moveq	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	e008      	b.n	8006f62 <HAL_TIM_PWM_Start+0x9e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	bf14      	ite	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	2300      	moveq	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e0a6      	b.n	80070b8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIM_PWM_Start+0xb6>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f78:	e023      	b.n	8006fc2 <HAL_TIM_PWM_Start+0xfe>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d104      	bne.n	8006f8a <HAL_TIM_PWM_Start+0xc6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f88:	e01b      	b.n	8006fc2 <HAL_TIM_PWM_Start+0xfe>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d104      	bne.n	8006f9a <HAL_TIM_PWM_Start+0xd6>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f98:	e013      	b.n	8006fc2 <HAL_TIM_PWM_Start+0xfe>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b0c      	cmp	r3, #12
 8006f9e:	d104      	bne.n	8006faa <HAL_TIM_PWM_Start+0xe6>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fa8:	e00b      	b.n	8006fc2 <HAL_TIM_PWM_Start+0xfe>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d104      	bne.n	8006fba <HAL_TIM_PWM_Start+0xf6>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fb8:	e003      	b.n	8006fc2 <HAL_TIM_PWM_Start+0xfe>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 f9dc 	bl	8008388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a3a      	ldr	r2, [pc, #232]	@ (80070c0 <HAL_TIM_PWM_Start+0x1fc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d018      	beq.n	800700c <HAL_TIM_PWM_Start+0x148>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a39      	ldr	r2, [pc, #228]	@ (80070c4 <HAL_TIM_PWM_Start+0x200>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d013      	beq.n	800700c <HAL_TIM_PWM_Start+0x148>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a37      	ldr	r2, [pc, #220]	@ (80070c8 <HAL_TIM_PWM_Start+0x204>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00e      	beq.n	800700c <HAL_TIM_PWM_Start+0x148>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a36      	ldr	r2, [pc, #216]	@ (80070cc <HAL_TIM_PWM_Start+0x208>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d009      	beq.n	800700c <HAL_TIM_PWM_Start+0x148>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a34      	ldr	r2, [pc, #208]	@ (80070d0 <HAL_TIM_PWM_Start+0x20c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d004      	beq.n	800700c <HAL_TIM_PWM_Start+0x148>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a33      	ldr	r2, [pc, #204]	@ (80070d4 <HAL_TIM_PWM_Start+0x210>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d101      	bne.n	8007010 <HAL_TIM_PWM_Start+0x14c>
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <HAL_TIM_PWM_Start+0x14e>
 8007010:	2300      	movs	r3, #0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007024:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a25      	ldr	r2, [pc, #148]	@ (80070c0 <HAL_TIM_PWM_Start+0x1fc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <HAL_TIM_PWM_Start+0x1b2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007038:	d01d      	beq.n	8007076 <HAL_TIM_PWM_Start+0x1b2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a26      	ldr	r2, [pc, #152]	@ (80070d8 <HAL_TIM_PWM_Start+0x214>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <HAL_TIM_PWM_Start+0x1b2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a24      	ldr	r2, [pc, #144]	@ (80070dc <HAL_TIM_PWM_Start+0x218>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_TIM_PWM_Start+0x1b2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a23      	ldr	r2, [pc, #140]	@ (80070e0 <HAL_TIM_PWM_Start+0x21c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_TIM_PWM_Start+0x1b2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a19      	ldr	r2, [pc, #100]	@ (80070c4 <HAL_TIM_PWM_Start+0x200>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_TIM_PWM_Start+0x1b2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a18      	ldr	r2, [pc, #96]	@ (80070c8 <HAL_TIM_PWM_Start+0x204>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_TIM_PWM_Start+0x1b2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a18      	ldr	r2, [pc, #96]	@ (80070d4 <HAL_TIM_PWM_Start+0x210>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d115      	bne.n	80070a2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	4b19      	ldr	r3, [pc, #100]	@ (80070e4 <HAL_TIM_PWM_Start+0x220>)
 800707e:	4013      	ands	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b06      	cmp	r3, #6
 8007086:	d015      	beq.n	80070b4 <HAL_TIM_PWM_Start+0x1f0>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800708e:	d011      	beq.n	80070b4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	e008      	b.n	80070b4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e000      	b.n	80070b6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40012c00 	.word	0x40012c00
 80070c4:	40013400 	.word	0x40013400
 80070c8:	40014000 	.word	0x40014000
 80070cc:	40014400 	.word	0x40014400
 80070d0:	40014800 	.word	0x40014800
 80070d4:	40015000 	.word	0x40015000
 80070d8:	40000400 	.word	0x40000400
 80070dc:	40000800 	.word	0x40000800
 80070e0:	40000c00 	.word	0x40000c00
 80070e4:	00010007 	.word	0x00010007

080070e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e097      	b.n	800722c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7fc fd57 	bl	8003bc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800712c:	f023 0307 	bic.w	r3, r3, #7
 8007130:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3304      	adds	r3, #4
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f000 fca9 	bl	8007a94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	4313      	orrs	r3, r2
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007188:	f023 030c 	bic.w	r3, r3, #12
 800718c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007198:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	4313      	orrs	r3, r2
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	011a      	lsls	r2, r3, #4
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	031b      	lsls	r3, r3, #12
 80071b8:	4313      	orrs	r3, r2
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	4313      	orrs	r3, r2
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007244:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800724c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007254:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800725c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d110      	bne.n	8007286 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d102      	bne.n	8007270 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800726a:	7b7b      	ldrb	r3, [r7, #13]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d001      	beq.n	8007274 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e069      	b.n	8007348 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007284:	e031      	b.n	80072ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b04      	cmp	r3, #4
 800728a:	d110      	bne.n	80072ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d102      	bne.n	8007298 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007292:	7b3b      	ldrb	r3, [r7, #12]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d001      	beq.n	800729c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e055      	b.n	8007348 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072ac:	e01d      	b.n	80072ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d108      	bne.n	80072c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d105      	bne.n	80072c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072ba:	7b7b      	ldrb	r3, [r7, #13]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d102      	bne.n	80072c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072c0:	7b3b      	ldrb	r3, [r7, #12]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d001      	beq.n	80072ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e03e      	b.n	8007348 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2202      	movs	r2, #2
 80072e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_TIM_Encoder_Start+0xc4>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d008      	beq.n	8007308 <HAL_TIM_Encoder_Start+0xd4>
 80072f6:	e00f      	b.n	8007318 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2201      	movs	r2, #1
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f001 f841 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8007306:	e016      	b.n	8007336 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2201      	movs	r2, #1
 800730e:	2104      	movs	r1, #4
 8007310:	4618      	mov	r0, r3
 8007312:	f001 f839 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8007316:	e00e      	b.n	8007336 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2201      	movs	r2, #1
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f001 f831 	bl	8008388 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2201      	movs	r2, #1
 800732c:	2104      	movs	r1, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f001 f82a 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8007334:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f042 0201 	orr.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d020      	beq.n	80073b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01b      	beq.n	80073b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0202 	mvn.w	r2, #2
 8007384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fb5c 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 80073a0:	e005      	b.n	80073ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fb4e 	bl	8007a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fb5f 	bl	8007a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d020      	beq.n	8007400 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01b      	beq.n	8007400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0204 	mvn.w	r2, #4
 80073d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fb36 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 80073ec:	e005      	b.n	80073fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fb28 	bl	8007a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fb39 	bl	8007a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d020      	beq.n	800744c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01b      	beq.n	800744c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0208 	mvn.w	r2, #8
 800741c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2204      	movs	r2, #4
 8007422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fb10 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 8007438:	e005      	b.n	8007446 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fb02 	bl	8007a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fb13 	bl	8007a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b00      	cmp	r3, #0
 8007454:	d020      	beq.n	8007498 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01b      	beq.n	8007498 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f06f 0210 	mvn.w	r2, #16
 8007468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2208      	movs	r2, #8
 800746e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 faea 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 8007484:	e005      	b.n	8007492 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fadc 	bl	8007a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 faed 	bl	8007a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0201 	mvn.w	r2, #1
 80074b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fa ffc0 	bl	800243c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00c      	beq.n	80074ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80074e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 f8a9 	bl	800863c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00c      	beq.n	800750e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 f8a1 	bl	8008650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00c      	beq.n	8007532 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800752a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 faa7 	bl	8007a80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00c      	beq.n	8007556 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f06f 0220 	mvn.w	r2, #32
 800754e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 f869 	bl	8008628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00c      	beq.n	800757a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d007      	beq.n	800757a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 f875 	bl	8008664 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00c      	beq.n	800759e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 f86d 	bl	8008678 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00c      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80075ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 f865 	bl	800868c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00c      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80075de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f85d 	bl	80086a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800760a:	2302      	movs	r3, #2
 800760c:	e0ff      	b.n	800780e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b14      	cmp	r3, #20
 800761a:	f200 80f0 	bhi.w	80077fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800761e:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	08007679 	.word	0x08007679
 8007628:	080077ff 	.word	0x080077ff
 800762c:	080077ff 	.word	0x080077ff
 8007630:	080077ff 	.word	0x080077ff
 8007634:	080076b9 	.word	0x080076b9
 8007638:	080077ff 	.word	0x080077ff
 800763c:	080077ff 	.word	0x080077ff
 8007640:	080077ff 	.word	0x080077ff
 8007644:	080076fb 	.word	0x080076fb
 8007648:	080077ff 	.word	0x080077ff
 800764c:	080077ff 	.word	0x080077ff
 8007650:	080077ff 	.word	0x080077ff
 8007654:	0800773b 	.word	0x0800773b
 8007658:	080077ff 	.word	0x080077ff
 800765c:	080077ff 	.word	0x080077ff
 8007660:	080077ff 	.word	0x080077ff
 8007664:	0800777d 	.word	0x0800777d
 8007668:	080077ff 	.word	0x080077ff
 800766c:	080077ff 	.word	0x080077ff
 8007670:	080077ff 	.word	0x080077ff
 8007674:	080077bd 	.word	0x080077bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fabc 	bl	8007bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699a      	ldr	r2, [r3, #24]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0208 	orr.w	r2, r2, #8
 8007692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 0204 	bic.w	r2, r2, #4
 80076a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6999      	ldr	r1, [r3, #24]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	619a      	str	r2, [r3, #24]
      break;
 80076b6:	e0a5      	b.n	8007804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fb36 	bl	8007d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699a      	ldr	r2, [r3, #24]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6999      	ldr	r1, [r3, #24]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	021a      	lsls	r2, r3, #8
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	619a      	str	r2, [r3, #24]
      break;
 80076f8:	e084      	b.n	8007804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68b9      	ldr	r1, [r7, #8]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fba9 	bl	8007e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69da      	ldr	r2, [r3, #28]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0208 	orr.w	r2, r2, #8
 8007714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69da      	ldr	r2, [r3, #28]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0204 	bic.w	r2, r2, #4
 8007724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69d9      	ldr	r1, [r3, #28]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	61da      	str	r2, [r3, #28]
      break;
 8007738:	e064      	b.n	8007804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fc1b 	bl	8007f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69da      	ldr	r2, [r3, #28]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69da      	ldr	r2, [r3, #28]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69d9      	ldr	r1, [r3, #28]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	021a      	lsls	r2, r3, #8
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	61da      	str	r2, [r3, #28]
      break;
 800777a:	e043      	b.n	8007804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fc8e 	bl	80080a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0208 	orr.w	r2, r2, #8
 8007796:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0204 	bic.w	r2, r2, #4
 80077a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	691a      	ldr	r2, [r3, #16]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80077ba:	e023      	b.n	8007804 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fcd8 	bl	8008178 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	021a      	lsls	r2, r3, #8
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80077fc:	e002      	b.n	8007804 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
      break;
 8007802:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800780c:	7dfb      	ldrb	r3, [r7, #23]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop

08007818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_TIM_ConfigClockSource+0x1c>
 8007830:	2302      	movs	r3, #2
 8007832:	e0f6      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x20a>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007852:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800785e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6f      	ldr	r2, [pc, #444]	@ (8007a2c <HAL_TIM_ConfigClockSource+0x214>)
 800786e:	4293      	cmp	r3, r2
 8007870:	f000 80c1 	beq.w	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007874:	4a6d      	ldr	r2, [pc, #436]	@ (8007a2c <HAL_TIM_ConfigClockSource+0x214>)
 8007876:	4293      	cmp	r3, r2
 8007878:	f200 80c6 	bhi.w	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 800787c:	4a6c      	ldr	r2, [pc, #432]	@ (8007a30 <HAL_TIM_ConfigClockSource+0x218>)
 800787e:	4293      	cmp	r3, r2
 8007880:	f000 80b9 	beq.w	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007884:	4a6a      	ldr	r2, [pc, #424]	@ (8007a30 <HAL_TIM_ConfigClockSource+0x218>)
 8007886:	4293      	cmp	r3, r2
 8007888:	f200 80be 	bhi.w	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 800788c:	4a69      	ldr	r2, [pc, #420]	@ (8007a34 <HAL_TIM_ConfigClockSource+0x21c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	f000 80b1 	beq.w	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007894:	4a67      	ldr	r2, [pc, #412]	@ (8007a34 <HAL_TIM_ConfigClockSource+0x21c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	f200 80b6 	bhi.w	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 800789c:	4a66      	ldr	r2, [pc, #408]	@ (8007a38 <HAL_TIM_ConfigClockSource+0x220>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	f000 80a9 	beq.w	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 80078a4:	4a64      	ldr	r2, [pc, #400]	@ (8007a38 <HAL_TIM_ConfigClockSource+0x220>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	f200 80ae 	bhi.w	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 80078ac:	4a63      	ldr	r2, [pc, #396]	@ (8007a3c <HAL_TIM_ConfigClockSource+0x224>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	f000 80a1 	beq.w	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 80078b4:	4a61      	ldr	r2, [pc, #388]	@ (8007a3c <HAL_TIM_ConfigClockSource+0x224>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	f200 80a6 	bhi.w	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 80078bc:	4a60      	ldr	r2, [pc, #384]	@ (8007a40 <HAL_TIM_ConfigClockSource+0x228>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	f000 8099 	beq.w	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 80078c4:	4a5e      	ldr	r2, [pc, #376]	@ (8007a40 <HAL_TIM_ConfigClockSource+0x228>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	f200 809e 	bhi.w	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 80078cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078d0:	f000 8091 	beq.w	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 80078d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80078d8:	f200 8096 	bhi.w	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 80078dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e0:	f000 8089 	beq.w	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 80078e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e8:	f200 808e 	bhi.w	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 80078ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078f0:	d03e      	beq.n	8007970 <HAL_TIM_ConfigClockSource+0x158>
 80078f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078f6:	f200 8087 	bhi.w	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 80078fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078fe:	f000 8086 	beq.w	8007a0e <HAL_TIM_ConfigClockSource+0x1f6>
 8007902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007906:	d87f      	bhi.n	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 8007908:	2b70      	cmp	r3, #112	@ 0x70
 800790a:	d01a      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x12a>
 800790c:	2b70      	cmp	r3, #112	@ 0x70
 800790e:	d87b      	bhi.n	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 8007910:	2b60      	cmp	r3, #96	@ 0x60
 8007912:	d050      	beq.n	80079b6 <HAL_TIM_ConfigClockSource+0x19e>
 8007914:	2b60      	cmp	r3, #96	@ 0x60
 8007916:	d877      	bhi.n	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 8007918:	2b50      	cmp	r3, #80	@ 0x50
 800791a:	d03c      	beq.n	8007996 <HAL_TIM_ConfigClockSource+0x17e>
 800791c:	2b50      	cmp	r3, #80	@ 0x50
 800791e:	d873      	bhi.n	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 8007920:	2b40      	cmp	r3, #64	@ 0x40
 8007922:	d058      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x1be>
 8007924:	2b40      	cmp	r3, #64	@ 0x40
 8007926:	d86f      	bhi.n	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 8007928:	2b30      	cmp	r3, #48	@ 0x30
 800792a:	d064      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 800792c:	2b30      	cmp	r3, #48	@ 0x30
 800792e:	d86b      	bhi.n	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 8007930:	2b20      	cmp	r3, #32
 8007932:	d060      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007934:	2b20      	cmp	r3, #32
 8007936:	d867      	bhi.n	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d05c      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 800793c:	2b10      	cmp	r3, #16
 800793e:	d05a      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0x1de>
 8007940:	e062      	b.n	8007a08 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007952:	f000 fcf9 	bl	8008348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007964:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	609a      	str	r2, [r3, #8]
      break;
 800796e:	e04f      	b.n	8007a10 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007980:	f000 fce2 	bl	8008348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689a      	ldr	r2, [r3, #8]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007992:	609a      	str	r2, [r3, #8]
      break;
 8007994:	e03c      	b.n	8007a10 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a2:	461a      	mov	r2, r3
 80079a4:	f000 fc54 	bl	8008250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2150      	movs	r1, #80	@ 0x50
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 fcad 	bl	800830e <TIM_ITRx_SetConfig>
      break;
 80079b4:	e02c      	b.n	8007a10 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079c2:	461a      	mov	r2, r3
 80079c4:	f000 fc73 	bl	80082ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2160      	movs	r1, #96	@ 0x60
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fc9d 	bl	800830e <TIM_ITRx_SetConfig>
      break;
 80079d4:	e01c      	b.n	8007a10 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e2:	461a      	mov	r2, r3
 80079e4:	f000 fc34 	bl	8008250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2140      	movs	r1, #64	@ 0x40
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fc8d 	bl	800830e <TIM_ITRx_SetConfig>
      break;
 80079f4:	e00c      	b.n	8007a10 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4619      	mov	r1, r3
 8007a00:	4610      	mov	r0, r2
 8007a02:	f000 fc84 	bl	800830e <TIM_ITRx_SetConfig>
      break;
 8007a06:	e003      	b.n	8007a10 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a0c:	e000      	b.n	8007a10 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007a0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	00100070 	.word	0x00100070
 8007a30:	00100060 	.word	0x00100060
 8007a34:	00100050 	.word	0x00100050
 8007a38:	00100040 	.word	0x00100040
 8007a3c:	00100030 	.word	0x00100030
 8007a40:	00100020 	.word	0x00100020

08007a44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8007bd8 <TIM_Base_SetConfig+0x144>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d017      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab2:	d013      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a49      	ldr	r2, [pc, #292]	@ (8007bdc <TIM_Base_SetConfig+0x148>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00f      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a48      	ldr	r2, [pc, #288]	@ (8007be0 <TIM_Base_SetConfig+0x14c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00b      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a47      	ldr	r2, [pc, #284]	@ (8007be4 <TIM_Base_SetConfig+0x150>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d007      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a46      	ldr	r2, [pc, #280]	@ (8007be8 <TIM_Base_SetConfig+0x154>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d003      	beq.n	8007adc <TIM_Base_SetConfig+0x48>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a45      	ldr	r2, [pc, #276]	@ (8007bec <TIM_Base_SetConfig+0x158>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d108      	bne.n	8007aee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a39      	ldr	r2, [pc, #228]	@ (8007bd8 <TIM_Base_SetConfig+0x144>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d023      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007afc:	d01f      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a36      	ldr	r2, [pc, #216]	@ (8007bdc <TIM_Base_SetConfig+0x148>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d01b      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a35      	ldr	r2, [pc, #212]	@ (8007be0 <TIM_Base_SetConfig+0x14c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d017      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a34      	ldr	r2, [pc, #208]	@ (8007be4 <TIM_Base_SetConfig+0x150>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d013      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a33      	ldr	r2, [pc, #204]	@ (8007be8 <TIM_Base_SetConfig+0x154>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00f      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a33      	ldr	r2, [pc, #204]	@ (8007bf0 <TIM_Base_SetConfig+0x15c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00b      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a32      	ldr	r2, [pc, #200]	@ (8007bf4 <TIM_Base_SetConfig+0x160>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d007      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a31      	ldr	r2, [pc, #196]	@ (8007bf8 <TIM_Base_SetConfig+0x164>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d003      	beq.n	8007b3e <TIM_Base_SetConfig+0xaa>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2c      	ldr	r2, [pc, #176]	@ (8007bec <TIM_Base_SetConfig+0x158>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d108      	bne.n	8007b50 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a18      	ldr	r2, [pc, #96]	@ (8007bd8 <TIM_Base_SetConfig+0x144>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007be8 <TIM_Base_SetConfig+0x154>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00f      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a1a      	ldr	r2, [pc, #104]	@ (8007bf0 <TIM_Base_SetConfig+0x15c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a19      	ldr	r2, [pc, #100]	@ (8007bf4 <TIM_Base_SetConfig+0x160>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a18      	ldr	r2, [pc, #96]	@ (8007bf8 <TIM_Base_SetConfig+0x164>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_Base_SetConfig+0x110>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a13      	ldr	r2, [pc, #76]	@ (8007bec <TIM_Base_SetConfig+0x158>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d103      	bne.n	8007bac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d105      	bne.n	8007bca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	611a      	str	r2, [r3, #16]
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40000c00 	.word	0x40000c00
 8007be8:	40013400 	.word	0x40013400
 8007bec:	40015000 	.word	0x40015000
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40014400 	.word	0x40014400
 8007bf8:	40014800 	.word	0x40014800

08007bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	f023 0201 	bic.w	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f023 0302 	bic.w	r3, r3, #2
 8007c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a30      	ldr	r2, [pc, #192]	@ (8007d18 <TIM_OC1_SetConfig+0x11c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d013      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8007d1c <TIM_OC1_SetConfig+0x120>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00f      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a2e      	ldr	r2, [pc, #184]	@ (8007d20 <TIM_OC1_SetConfig+0x124>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00b      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8007d24 <TIM_OC1_SetConfig+0x128>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d007      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a2c      	ldr	r2, [pc, #176]	@ (8007d28 <TIM_OC1_SetConfig+0x12c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d003      	beq.n	8007c84 <TIM_OC1_SetConfig+0x88>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8007d2c <TIM_OC1_SetConfig+0x130>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d10c      	bne.n	8007c9e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f023 0308 	bic.w	r3, r3, #8
 8007c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f023 0304 	bic.w	r3, r3, #4
 8007c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d18 <TIM_OC1_SetConfig+0x11c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d013      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d1c <TIM_OC1_SetConfig+0x120>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00f      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007d20 <TIM_OC1_SetConfig+0x124>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00b      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d24 <TIM_OC1_SetConfig+0x128>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d007      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a19      	ldr	r2, [pc, #100]	@ (8007d28 <TIM_OC1_SetConfig+0x12c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_OC1_SetConfig+0xd2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a18      	ldr	r2, [pc, #96]	@ (8007d2c <TIM_OC1_SetConfig+0x130>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d111      	bne.n	8007cf2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	621a      	str	r2, [r3, #32]
}
 8007d0c:	bf00      	nop
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	40012c00 	.word	0x40012c00
 8007d1c:	40013400 	.word	0x40013400
 8007d20:	40014000 	.word	0x40014000
 8007d24:	40014400 	.word	0x40014400
 8007d28:	40014800 	.word	0x40014800
 8007d2c:	40015000 	.word	0x40015000

08007d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f023 0210 	bic.w	r2, r3, #16
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f023 0320 	bic.w	r3, r3, #32
 8007d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e40 <TIM_OC2_SetConfig+0x110>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d007      	beq.n	8007da4 <TIM_OC2_SetConfig+0x74>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a2b      	ldr	r2, [pc, #172]	@ (8007e44 <TIM_OC2_SetConfig+0x114>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_OC2_SetConfig+0x74>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8007e48 <TIM_OC2_SetConfig+0x118>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d10d      	bne.n	8007dc0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e40 <TIM_OC2_SetConfig+0x110>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d013      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1e      	ldr	r2, [pc, #120]	@ (8007e44 <TIM_OC2_SetConfig+0x114>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00f      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8007e4c <TIM_OC2_SetConfig+0x11c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a1d      	ldr	r2, [pc, #116]	@ (8007e50 <TIM_OC2_SetConfig+0x120>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d007      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e54 <TIM_OC2_SetConfig+0x124>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_OC2_SetConfig+0xc0>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a17      	ldr	r2, [pc, #92]	@ (8007e48 <TIM_OC2_SetConfig+0x118>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d113      	bne.n	8007e18 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	621a      	str	r2, [r3, #32]
}
 8007e32:	bf00      	nop
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40012c00 	.word	0x40012c00
 8007e44:	40013400 	.word	0x40013400
 8007e48:	40015000 	.word	0x40015000
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400
 8007e54:	40014800 	.word	0x40014800

08007e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8007f64 <TIM_OC3_SetConfig+0x10c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d007      	beq.n	8007eca <TIM_OC3_SetConfig+0x72>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8007f68 <TIM_OC3_SetConfig+0x110>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d003      	beq.n	8007eca <TIM_OC3_SetConfig+0x72>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a29      	ldr	r2, [pc, #164]	@ (8007f6c <TIM_OC3_SetConfig+0x114>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d10d      	bne.n	8007ee6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8007f64 <TIM_OC3_SetConfig+0x10c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f68 <TIM_OC3_SetConfig+0x110>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f70 <TIM_OC3_SetConfig+0x118>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00b      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1c      	ldr	r2, [pc, #112]	@ (8007f74 <TIM_OC3_SetConfig+0x11c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d007      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a1b      	ldr	r2, [pc, #108]	@ (8007f78 <TIM_OC3_SetConfig+0x120>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_OC3_SetConfig+0xbe>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a16      	ldr	r2, [pc, #88]	@ (8007f6c <TIM_OC3_SetConfig+0x114>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d113      	bne.n	8007f3e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	621a      	str	r2, [r3, #32]
}
 8007f58:	bf00      	nop
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	40013400 	.word	0x40013400
 8007f6c:	40015000 	.word	0x40015000
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	031b      	lsls	r3, r3, #12
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a2c      	ldr	r2, [pc, #176]	@ (800808c <TIM_OC4_SetConfig+0x110>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d007      	beq.n	8007ff0 <TIM_OC4_SetConfig+0x74>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8008090 <TIM_OC4_SetConfig+0x114>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <TIM_OC4_SetConfig+0x74>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a2a      	ldr	r2, [pc, #168]	@ (8008094 <TIM_OC4_SetConfig+0x118>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10d      	bne.n	800800c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	031b      	lsls	r3, r3, #12
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800800a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1f      	ldr	r2, [pc, #124]	@ (800808c <TIM_OC4_SetConfig+0x110>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d013      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a1e      	ldr	r2, [pc, #120]	@ (8008090 <TIM_OC4_SetConfig+0x114>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00f      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a1e      	ldr	r2, [pc, #120]	@ (8008098 <TIM_OC4_SetConfig+0x11c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00b      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a1d      	ldr	r2, [pc, #116]	@ (800809c <TIM_OC4_SetConfig+0x120>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d007      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a1c      	ldr	r2, [pc, #112]	@ (80080a0 <TIM_OC4_SetConfig+0x124>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d003      	beq.n	800803c <TIM_OC4_SetConfig+0xc0>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a17      	ldr	r2, [pc, #92]	@ (8008094 <TIM_OC4_SetConfig+0x118>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d113      	bne.n	8008064 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008042:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800804a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	019b      	lsls	r3, r3, #6
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	019b      	lsls	r3, r3, #6
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	621a      	str	r2, [r3, #32]
}
 800807e:	bf00      	nop
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	40012c00 	.word	0x40012c00
 8008090:	40013400 	.word	0x40013400
 8008094:	40015000 	.word	0x40015000
 8008098:	40014000 	.word	0x40014000
 800809c:	40014400 	.word	0x40014400
 80080a0:	40014800 	.word	0x40014800

080080a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80080e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	041b      	lsls	r3, r3, #16
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a19      	ldr	r2, [pc, #100]	@ (8008160 <TIM_OC5_SetConfig+0xbc>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a18      	ldr	r2, [pc, #96]	@ (8008164 <TIM_OC5_SetConfig+0xc0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00f      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a17      	ldr	r2, [pc, #92]	@ (8008168 <TIM_OC5_SetConfig+0xc4>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00b      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a16      	ldr	r2, [pc, #88]	@ (800816c <TIM_OC5_SetConfig+0xc8>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d007      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a15      	ldr	r2, [pc, #84]	@ (8008170 <TIM_OC5_SetConfig+0xcc>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d003      	beq.n	8008126 <TIM_OC5_SetConfig+0x82>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a14      	ldr	r2, [pc, #80]	@ (8008174 <TIM_OC5_SetConfig+0xd0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d109      	bne.n	800813a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800812c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	621a      	str	r2, [r3, #32]
}
 8008154:	bf00      	nop
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	40012c00 	.word	0x40012c00
 8008164:	40013400 	.word	0x40013400
 8008168:	40014000 	.word	0x40014000
 800816c:	40014400 	.word	0x40014400
 8008170:	40014800 	.word	0x40014800
 8008174:	40015000 	.word	0x40015000

08008178 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	051b      	lsls	r3, r3, #20
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008238 <TIM_OC6_SetConfig+0xc0>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d013      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a19      	ldr	r2, [pc, #100]	@ (800823c <TIM_OC6_SetConfig+0xc4>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00f      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a18      	ldr	r2, [pc, #96]	@ (8008240 <TIM_OC6_SetConfig+0xc8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00b      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a17      	ldr	r2, [pc, #92]	@ (8008244 <TIM_OC6_SetConfig+0xcc>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d007      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a16      	ldr	r2, [pc, #88]	@ (8008248 <TIM_OC6_SetConfig+0xd0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d003      	beq.n	80081fc <TIM_OC6_SetConfig+0x84>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a15      	ldr	r2, [pc, #84]	@ (800824c <TIM_OC6_SetConfig+0xd4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d109      	bne.n	8008210 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	029b      	lsls	r3, r3, #10
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40012c00 	.word	0x40012c00
 800823c:	40013400 	.word	0x40013400
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800
 800824c:	40015000 	.word	0x40015000

08008250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f023 0201 	bic.w	r2, r3, #1
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800827a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f023 030a 	bic.w	r3, r3, #10
 800828c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	621a      	str	r2, [r3, #32]
}
 80082a2:	bf00      	nop
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b087      	sub	sp, #28
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	f023 0210 	bic.w	r2, r3, #16
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	031b      	lsls	r3, r3, #12
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800830e:	b480      	push	{r7}
 8008310:	b085      	sub	sp, #20
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4313      	orrs	r3, r2
 8008330:	f043 0307 	orr.w	r3, r3, #7
 8008334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	609a      	str	r2, [r3, #8]
}
 800833c:	bf00      	nop
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	021a      	lsls	r2, r3, #8
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	431a      	orrs	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4313      	orrs	r3, r2
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	609a      	str	r2, [r3, #8]
}
 800837c:	bf00      	nop
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f003 031f 	and.w	r3, r3, #31
 800839a:	2201      	movs	r2, #1
 800839c:	fa02 f303 	lsl.w	r3, r2, r3
 80083a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a1a      	ldr	r2, [r3, #32]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	43db      	mvns	r3, r3
 80083aa:	401a      	ands	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a1a      	ldr	r2, [r3, #32]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	fa01 f303 	lsl.w	r3, r1, r3
 80083c0:	431a      	orrs	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083e8:	2302      	movs	r3, #2
 80083ea:	e074      	b.n	80084d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a34      	ldr	r2, [pc, #208]	@ (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d009      	beq.n	800842a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a33      	ldr	r2, [pc, #204]	@ (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d004      	beq.n	800842a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a31      	ldr	r2, [pc, #196]	@ (80084ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d108      	bne.n	800843c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008430:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4313      	orrs	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a21      	ldr	r2, [pc, #132]	@ (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d022      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800846c:	d01d      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a1f      	ldr	r2, [pc, #124]	@ (80084f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d018      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a1d      	ldr	r2, [pc, #116]	@ (80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d013      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1c      	ldr	r2, [pc, #112]	@ (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d00e      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a15      	ldr	r2, [pc, #84]	@ (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d009      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a18      	ldr	r2, [pc, #96]	@ (80084fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d004      	beq.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a11      	ldr	r2, [pc, #68]	@ (80084ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d10c      	bne.n	80084c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40015000 	.word	0x40015000
 80084f0:	40000400 	.word	0x40000400
 80084f4:	40000800 	.word	0x40000800
 80084f8:	40000c00 	.word	0x40000c00
 80084fc:	40014000 	.word	0x40014000

08008500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008518:	2302      	movs	r3, #2
 800851a:	e078      	b.n	800860e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	4313      	orrs	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	041b      	lsls	r3, r3, #16
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a1c      	ldr	r2, [pc, #112]	@ (800861c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d009      	beq.n	80085c2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d004      	beq.n	80085c2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a19      	ldr	r2, [pc, #100]	@ (8008624 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d11c      	bne.n	80085fc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085cc:	051b      	lsls	r3, r3, #20
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40012c00 	.word	0x40012c00
 8008620:	40013400 	.word	0x40013400
 8008624:	40015000 	.word	0x40015000

08008628 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e042      	b.n	800874c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7fb f9a7 	bl	8003a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2224      	movs	r2, #36	@ 0x24
 80086e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0201 	bic.w	r2, r2, #1
 80086f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fb24 	bl	8008d4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f825 	bl	8008754 <UART_SetConfig>
 800870a:	4603      	mov	r3, r0
 800870c:	2b01      	cmp	r3, #1
 800870e:	d101      	bne.n	8008714 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e01b      	b.n	800874c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689a      	ldr	r2, [r3, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0201 	orr.w	r2, r2, #1
 8008742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fba3 	bl	8008e90 <UART_CheckIdleState>
 800874a:	4603      	mov	r3, r0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008758:	b08c      	sub	sp, #48	@ 0x30
 800875a:	af00      	add	r7, sp, #0
 800875c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	431a      	orrs	r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	431a      	orrs	r2, r3
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	4313      	orrs	r3, r2
 800877a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4baa      	ldr	r3, [pc, #680]	@ (8008a2c <UART_SetConfig+0x2d8>)
 8008784:	4013      	ands	r3, r2
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	6812      	ldr	r2, [r2, #0]
 800878a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800878c:	430b      	orrs	r3, r1
 800878e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a9f      	ldr	r2, [pc, #636]	@ (8008a30 <UART_SetConfig+0x2dc>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d004      	beq.n	80087c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087bc:	4313      	orrs	r3, r2
 80087be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80087ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	6812      	ldr	r2, [r2, #0]
 80087d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087d4:	430b      	orrs	r3, r1
 80087d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087de:	f023 010f 	bic.w	r1, r3, #15
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a90      	ldr	r2, [pc, #576]	@ (8008a34 <UART_SetConfig+0x2e0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d125      	bne.n	8008844 <UART_SetConfig+0xf0>
 80087f8:	4b8f      	ldr	r3, [pc, #572]	@ (8008a38 <UART_SetConfig+0x2e4>)
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087fe:	f003 0303 	and.w	r3, r3, #3
 8008802:	2b03      	cmp	r3, #3
 8008804:	d81a      	bhi.n	800883c <UART_SetConfig+0xe8>
 8008806:	a201      	add	r2, pc, #4	@ (adr r2, 800880c <UART_SetConfig+0xb8>)
 8008808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880c:	0800881d 	.word	0x0800881d
 8008810:	0800882d 	.word	0x0800882d
 8008814:	08008825 	.word	0x08008825
 8008818:	08008835 	.word	0x08008835
 800881c:	2301      	movs	r3, #1
 800881e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008822:	e116      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008824:	2302      	movs	r3, #2
 8008826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800882a:	e112      	b.n	8008a52 <UART_SetConfig+0x2fe>
 800882c:	2304      	movs	r3, #4
 800882e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008832:	e10e      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008834:	2308      	movs	r3, #8
 8008836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800883a:	e10a      	b.n	8008a52 <UART_SetConfig+0x2fe>
 800883c:	2310      	movs	r3, #16
 800883e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008842:	e106      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a7c      	ldr	r2, [pc, #496]	@ (8008a3c <UART_SetConfig+0x2e8>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d138      	bne.n	80088c0 <UART_SetConfig+0x16c>
 800884e:	4b7a      	ldr	r3, [pc, #488]	@ (8008a38 <UART_SetConfig+0x2e4>)
 8008850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008854:	f003 030c 	and.w	r3, r3, #12
 8008858:	2b0c      	cmp	r3, #12
 800885a:	d82d      	bhi.n	80088b8 <UART_SetConfig+0x164>
 800885c:	a201      	add	r2, pc, #4	@ (adr r2, 8008864 <UART_SetConfig+0x110>)
 800885e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008862:	bf00      	nop
 8008864:	08008899 	.word	0x08008899
 8008868:	080088b9 	.word	0x080088b9
 800886c:	080088b9 	.word	0x080088b9
 8008870:	080088b9 	.word	0x080088b9
 8008874:	080088a9 	.word	0x080088a9
 8008878:	080088b9 	.word	0x080088b9
 800887c:	080088b9 	.word	0x080088b9
 8008880:	080088b9 	.word	0x080088b9
 8008884:	080088a1 	.word	0x080088a1
 8008888:	080088b9 	.word	0x080088b9
 800888c:	080088b9 	.word	0x080088b9
 8008890:	080088b9 	.word	0x080088b9
 8008894:	080088b1 	.word	0x080088b1
 8008898:	2300      	movs	r3, #0
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800889e:	e0d8      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80088a0:	2302      	movs	r3, #2
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088a6:	e0d4      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80088a8:	2304      	movs	r3, #4
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ae:	e0d0      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80088b0:	2308      	movs	r3, #8
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b6:	e0cc      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80088b8:	2310      	movs	r3, #16
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088be:	e0c8      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a5e      	ldr	r2, [pc, #376]	@ (8008a40 <UART_SetConfig+0x2ec>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d125      	bne.n	8008916 <UART_SetConfig+0x1c2>
 80088ca:	4b5b      	ldr	r3, [pc, #364]	@ (8008a38 <UART_SetConfig+0x2e4>)
 80088cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80088d4:	2b30      	cmp	r3, #48	@ 0x30
 80088d6:	d016      	beq.n	8008906 <UART_SetConfig+0x1b2>
 80088d8:	2b30      	cmp	r3, #48	@ 0x30
 80088da:	d818      	bhi.n	800890e <UART_SetConfig+0x1ba>
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d00a      	beq.n	80088f6 <UART_SetConfig+0x1a2>
 80088e0:	2b20      	cmp	r3, #32
 80088e2:	d814      	bhi.n	800890e <UART_SetConfig+0x1ba>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <UART_SetConfig+0x19a>
 80088e8:	2b10      	cmp	r3, #16
 80088ea:	d008      	beq.n	80088fe <UART_SetConfig+0x1aa>
 80088ec:	e00f      	b.n	800890e <UART_SetConfig+0x1ba>
 80088ee:	2300      	movs	r3, #0
 80088f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088f4:	e0ad      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80088f6:	2302      	movs	r3, #2
 80088f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088fc:	e0a9      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80088fe:	2304      	movs	r3, #4
 8008900:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008904:	e0a5      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008906:	2308      	movs	r3, #8
 8008908:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800890c:	e0a1      	b.n	8008a52 <UART_SetConfig+0x2fe>
 800890e:	2310      	movs	r3, #16
 8008910:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008914:	e09d      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a4a      	ldr	r2, [pc, #296]	@ (8008a44 <UART_SetConfig+0x2f0>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d125      	bne.n	800896c <UART_SetConfig+0x218>
 8008920:	4b45      	ldr	r3, [pc, #276]	@ (8008a38 <UART_SetConfig+0x2e4>)
 8008922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008926:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800892a:	2bc0      	cmp	r3, #192	@ 0xc0
 800892c:	d016      	beq.n	800895c <UART_SetConfig+0x208>
 800892e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008930:	d818      	bhi.n	8008964 <UART_SetConfig+0x210>
 8008932:	2b80      	cmp	r3, #128	@ 0x80
 8008934:	d00a      	beq.n	800894c <UART_SetConfig+0x1f8>
 8008936:	2b80      	cmp	r3, #128	@ 0x80
 8008938:	d814      	bhi.n	8008964 <UART_SetConfig+0x210>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <UART_SetConfig+0x1f0>
 800893e:	2b40      	cmp	r3, #64	@ 0x40
 8008940:	d008      	beq.n	8008954 <UART_SetConfig+0x200>
 8008942:	e00f      	b.n	8008964 <UART_SetConfig+0x210>
 8008944:	2300      	movs	r3, #0
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894a:	e082      	b.n	8008a52 <UART_SetConfig+0x2fe>
 800894c:	2302      	movs	r3, #2
 800894e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008952:	e07e      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008954:	2304      	movs	r3, #4
 8008956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800895a:	e07a      	b.n	8008a52 <UART_SetConfig+0x2fe>
 800895c:	2308      	movs	r3, #8
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008962:	e076      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800896a:	e072      	b.n	8008a52 <UART_SetConfig+0x2fe>
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a35      	ldr	r2, [pc, #212]	@ (8008a48 <UART_SetConfig+0x2f4>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d12a      	bne.n	80089cc <UART_SetConfig+0x278>
 8008976:	4b30      	ldr	r3, [pc, #192]	@ (8008a38 <UART_SetConfig+0x2e4>)
 8008978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800897c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008980:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008984:	d01a      	beq.n	80089bc <UART_SetConfig+0x268>
 8008986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800898a:	d81b      	bhi.n	80089c4 <UART_SetConfig+0x270>
 800898c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008990:	d00c      	beq.n	80089ac <UART_SetConfig+0x258>
 8008992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008996:	d815      	bhi.n	80089c4 <UART_SetConfig+0x270>
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <UART_SetConfig+0x250>
 800899c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089a0:	d008      	beq.n	80089b4 <UART_SetConfig+0x260>
 80089a2:	e00f      	b.n	80089c4 <UART_SetConfig+0x270>
 80089a4:	2300      	movs	r3, #0
 80089a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089aa:	e052      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80089ac:	2302      	movs	r3, #2
 80089ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089b2:	e04e      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80089b4:	2304      	movs	r3, #4
 80089b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ba:	e04a      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80089bc:	2308      	movs	r3, #8
 80089be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089c2:	e046      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80089c4:	2310      	movs	r3, #16
 80089c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ca:	e042      	b.n	8008a52 <UART_SetConfig+0x2fe>
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a17      	ldr	r2, [pc, #92]	@ (8008a30 <UART_SetConfig+0x2dc>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d13a      	bne.n	8008a4c <UART_SetConfig+0x2f8>
 80089d6:	4b18      	ldr	r3, [pc, #96]	@ (8008a38 <UART_SetConfig+0x2e4>)
 80089d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80089e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089e4:	d01a      	beq.n	8008a1c <UART_SetConfig+0x2c8>
 80089e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089ea:	d81b      	bhi.n	8008a24 <UART_SetConfig+0x2d0>
 80089ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089f0:	d00c      	beq.n	8008a0c <UART_SetConfig+0x2b8>
 80089f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089f6:	d815      	bhi.n	8008a24 <UART_SetConfig+0x2d0>
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d003      	beq.n	8008a04 <UART_SetConfig+0x2b0>
 80089fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a00:	d008      	beq.n	8008a14 <UART_SetConfig+0x2c0>
 8008a02:	e00f      	b.n	8008a24 <UART_SetConfig+0x2d0>
 8008a04:	2300      	movs	r3, #0
 8008a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a0a:	e022      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a12:	e01e      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008a14:	2304      	movs	r3, #4
 8008a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a1a:	e01a      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008a1c:	2308      	movs	r3, #8
 8008a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a22:	e016      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008a24:	2310      	movs	r3, #16
 8008a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a2a:	e012      	b.n	8008a52 <UART_SetConfig+0x2fe>
 8008a2c:	cfff69f3 	.word	0xcfff69f3
 8008a30:	40008000 	.word	0x40008000
 8008a34:	40013800 	.word	0x40013800
 8008a38:	40021000 	.word	0x40021000
 8008a3c:	40004400 	.word	0x40004400
 8008a40:	40004800 	.word	0x40004800
 8008a44:	40004c00 	.word	0x40004c00
 8008a48:	40005000 	.word	0x40005000
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4aae      	ldr	r2, [pc, #696]	@ (8008d10 <UART_SetConfig+0x5bc>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	f040 8097 	bne.w	8008b8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a62:	2b08      	cmp	r3, #8
 8008a64:	d823      	bhi.n	8008aae <UART_SetConfig+0x35a>
 8008a66:	a201      	add	r2, pc, #4	@ (adr r2, 8008a6c <UART_SetConfig+0x318>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008a91 	.word	0x08008a91
 8008a70:	08008aaf 	.word	0x08008aaf
 8008a74:	08008a99 	.word	0x08008a99
 8008a78:	08008aaf 	.word	0x08008aaf
 8008a7c:	08008a9f 	.word	0x08008a9f
 8008a80:	08008aaf 	.word	0x08008aaf
 8008a84:	08008aaf 	.word	0x08008aaf
 8008a88:	08008aaf 	.word	0x08008aaf
 8008a8c:	08008aa7 	.word	0x08008aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a90:	f7fd fe26 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 8008a94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a96:	e010      	b.n	8008aba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a98:	4b9e      	ldr	r3, [pc, #632]	@ (8008d14 <UART_SetConfig+0x5c0>)
 8008a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a9c:	e00d      	b.n	8008aba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a9e:	f7fd fdb1 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8008aa2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008aa4:	e009      	b.n	8008aba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008aac:	e005      	b.n	8008aba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ab8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 8130 	beq.w	8008d22 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac6:	4a94      	ldr	r2, [pc, #592]	@ (8008d18 <UART_SetConfig+0x5c4>)
 8008ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	4613      	mov	r3, r2
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	4413      	add	r3, r2
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d305      	bcc.n	8008af2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d903      	bls.n	8008afa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008af8:	e113      	b.n	8008d22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	2200      	movs	r2, #0
 8008afe:	60bb      	str	r3, [r7, #8]
 8008b00:	60fa      	str	r2, [r7, #12]
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b06:	4a84      	ldr	r2, [pc, #528]	@ (8008d18 <UART_SetConfig+0x5c4>)
 8008b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	2200      	movs	r2, #0
 8008b10:	603b      	str	r3, [r7, #0]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b1c:	f7f7 feb2 	bl	8000884 <__aeabi_uldivmod>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	4610      	mov	r0, r2
 8008b26:	4619      	mov	r1, r3
 8008b28:	f04f 0200 	mov.w	r2, #0
 8008b2c:	f04f 0300 	mov.w	r3, #0
 8008b30:	020b      	lsls	r3, r1, #8
 8008b32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b36:	0202      	lsls	r2, r0, #8
 8008b38:	6979      	ldr	r1, [r7, #20]
 8008b3a:	6849      	ldr	r1, [r1, #4]
 8008b3c:	0849      	lsrs	r1, r1, #1
 8008b3e:	2000      	movs	r0, #0
 8008b40:	460c      	mov	r4, r1
 8008b42:	4605      	mov	r5, r0
 8008b44:	eb12 0804 	adds.w	r8, r2, r4
 8008b48:	eb43 0905 	adc.w	r9, r3, r5
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	469a      	mov	sl, r3
 8008b54:	4693      	mov	fp, r2
 8008b56:	4652      	mov	r2, sl
 8008b58:	465b      	mov	r3, fp
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	f7f7 fe91 	bl	8000884 <__aeabi_uldivmod>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4613      	mov	r3, r2
 8008b68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b70:	d308      	bcc.n	8008b84 <UART_SetConfig+0x430>
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b78:	d204      	bcs.n	8008b84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6a3a      	ldr	r2, [r7, #32]
 8008b80:	60da      	str	r2, [r3, #12]
 8008b82:	e0ce      	b.n	8008d22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b8a:	e0ca      	b.n	8008d22 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b94:	d166      	bne.n	8008c64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008b96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b9a:	2b08      	cmp	r3, #8
 8008b9c:	d827      	bhi.n	8008bee <UART_SetConfig+0x49a>
 8008b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <UART_SetConfig+0x450>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bc9 	.word	0x08008bc9
 8008ba8:	08008bd1 	.word	0x08008bd1
 8008bac:	08008bd9 	.word	0x08008bd9
 8008bb0:	08008bef 	.word	0x08008bef
 8008bb4:	08008bdf 	.word	0x08008bdf
 8008bb8:	08008bef 	.word	0x08008bef
 8008bbc:	08008bef 	.word	0x08008bef
 8008bc0:	08008bef 	.word	0x08008bef
 8008bc4:	08008be7 	.word	0x08008be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bc8:	f7fd fd8a 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 8008bcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bce:	e014      	b.n	8008bfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bd0:	f7fd fd9c 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 8008bd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bd6:	e010      	b.n	8008bfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bd8:	4b4e      	ldr	r3, [pc, #312]	@ (8008d14 <UART_SetConfig+0x5c0>)
 8008bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bdc:	e00d      	b.n	8008bfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bde:	f7fd fd11 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8008be2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008be4:	e009      	b.n	8008bfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bec:	e005      	b.n	8008bfa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008bf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 8090 	beq.w	8008d22 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c06:	4a44      	ldr	r2, [pc, #272]	@ (8008d18 <UART_SetConfig+0x5c4>)
 8008c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c14:	005a      	lsls	r2, r3, #1
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	441a      	add	r2, r3
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	2b0f      	cmp	r3, #15
 8008c2c:	d916      	bls.n	8008c5c <UART_SetConfig+0x508>
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c34:	d212      	bcs.n	8008c5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	f023 030f 	bic.w	r3, r3, #15
 8008c3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	085b      	lsrs	r3, r3, #1
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	8bfb      	ldrh	r3, [r7, #30]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	8bfa      	ldrh	r2, [r7, #30]
 8008c58:	60da      	str	r2, [r3, #12]
 8008c5a:	e062      	b.n	8008d22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c62:	e05e      	b.n	8008d22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d828      	bhi.n	8008cbe <UART_SetConfig+0x56a>
 8008c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c74 <UART_SetConfig+0x520>)
 8008c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c72:	bf00      	nop
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008ca1 	.word	0x08008ca1
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	08008cbf 	.word	0x08008cbf
 8008c84:	08008caf 	.word	0x08008caf
 8008c88:	08008cbf 	.word	0x08008cbf
 8008c8c:	08008cbf 	.word	0x08008cbf
 8008c90:	08008cbf 	.word	0x08008cbf
 8008c94:	08008cb7 	.word	0x08008cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c98:	f7fd fd22 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 8008c9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c9e:	e014      	b.n	8008cca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ca0:	f7fd fd34 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 8008ca4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ca6:	e010      	b.n	8008cca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d14 <UART_SetConfig+0x5c0>)
 8008caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cac:	e00d      	b.n	8008cca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cae:	f7fd fca9 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8008cb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cb4:	e009      	b.n	8008cca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cbc:	e005      	b.n	8008cca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008cc8:	bf00      	nop
    }

    if (pclk != 0U)
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d028      	beq.n	8008d22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd4:	4a10      	ldr	r2, [pc, #64]	@ (8008d18 <UART_SetConfig+0x5c4>)
 8008cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cde:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	085b      	lsrs	r3, r3, #1
 8008ce8:	441a      	add	r2, r3
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	2b0f      	cmp	r3, #15
 8008cf8:	d910      	bls.n	8008d1c <UART_SetConfig+0x5c8>
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d00:	d20c      	bcs.n	8008d1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60da      	str	r2, [r3, #12]
 8008d0c:	e009      	b.n	8008d22 <UART_SetConfig+0x5ce>
 8008d0e:	bf00      	nop
 8008d10:	40008000 	.word	0x40008000
 8008d14:	00f42400 	.word	0x00f42400
 8008d18:	08009418 	.word	0x08009418
      }
      else
      {
        ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2200      	movs	r2, #0
 8008d36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3730      	adds	r7, #48	@ 0x30
 8008d46:	46bd      	mov	sp, r7
 8008d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d58:	f003 0308 	and.w	r3, r3, #8
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00a      	beq.n	8008d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	430a      	orrs	r2, r1
 8008d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00a      	beq.n	8008dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de0:	f003 0310 	and.w	r3, r3, #16
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e02:	f003 0320 	and.w	r3, r3, #32
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01a      	beq.n	8008e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e4a:	d10a      	bne.n	8008e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	605a      	str	r2, [r3, #4]
  }
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b098      	sub	sp, #96	@ 0x60
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ea0:	f7fb f902 	bl	80040a8 <HAL_GetTick>
 8008ea4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d12f      	bne.n	8008f14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f88e 	bl	8008fe4 <UART_WaitOnFlagUntilTimeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d022      	beq.n	8008f14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ee2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ef4:	e841 2300 	strex	r3, r2, [r1]
 8008ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e6      	bne.n	8008ece <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e063      	b.n	8008fdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0304 	and.w	r3, r3, #4
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d149      	bne.n	8008fb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f857 	bl	8008fe4 <UART_WaitOnFlagUntilTimeout>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d03c      	beq.n	8008fb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	623b      	str	r3, [r7, #32]
   return(result);
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e6      	bne.n	8008f3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3308      	adds	r3, #8
 8008f74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f023 0301 	bic.w	r3, r3, #1
 8008f84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f8e:	61fa      	str	r2, [r7, #28]
 8008f90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	69b9      	ldr	r1, [r7, #24]
 8008f94:	69fa      	ldr	r2, [r7, #28]
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e5      	bne.n	8008f6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e012      	b.n	8008fdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3758      	adds	r7, #88	@ 0x58
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	603b      	str	r3, [r7, #0]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ff4:	e04f      	b.n	8009096 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d04b      	beq.n	8009096 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ffe:	f7fb f853 	bl	80040a8 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	429a      	cmp	r2, r3
 800900c:	d302      	bcc.n	8009014 <UART_WaitOnFlagUntilTimeout+0x30>
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e04e      	b.n	80090b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	d037      	beq.n	8009096 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b80      	cmp	r3, #128	@ 0x80
 800902a:	d034      	beq.n	8009096 <UART_WaitOnFlagUntilTimeout+0xb2>
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2b40      	cmp	r3, #64	@ 0x40
 8009030:	d031      	beq.n	8009096 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	f003 0308 	and.w	r3, r3, #8
 800903c:	2b08      	cmp	r3, #8
 800903e:	d110      	bne.n	8009062 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2208      	movs	r2, #8
 8009046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f838 	bl	80090be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2208      	movs	r2, #8
 8009052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e029      	b.n	80090b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800906c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009070:	d111      	bne.n	8009096 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800907a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 f81e 	bl	80090be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2220      	movs	r2, #32
 8009086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e00f      	b.n	80090b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69da      	ldr	r2, [r3, #28]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4013      	ands	r3, r2
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	bf0c      	ite	eq
 80090a6:	2301      	moveq	r3, #1
 80090a8:	2300      	movne	r3, #0
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	461a      	mov	r2, r3
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d0a0      	beq.n	8008ff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090be:	b480      	push	{r7}
 80090c0:	b095      	sub	sp, #84	@ 0x54
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80090e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	61fb      	str	r3, [r7, #28]
   return(result);
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3308      	adds	r3, #8
 800911a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800911c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800911e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e3      	bne.n	80090f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009134:	2b01      	cmp	r3, #1
 8009136:	d118      	bne.n	800916a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	60bb      	str	r3, [r7, #8]
   return(result);
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	f023 0310 	bic.w	r3, r3, #16
 800914c:	647b      	str	r3, [r7, #68]	@ 0x44
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009156:	61bb      	str	r3, [r7, #24]
 8009158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915a:	6979      	ldr	r1, [r7, #20]
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	613b      	str	r3, [r7, #16]
   return(result);
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e6      	bne.n	8009138 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800917e:	bf00      	nop
 8009180:	3754      	adds	r7, #84	@ 0x54
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800918a:	b480      	push	{r7}
 800918c:	b085      	sub	sp, #20
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800919c:	2302      	movs	r3, #2
 800919e:	e027      	b.n	80091f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2224      	movs	r2, #36	@ 0x24
 80091ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0201 	bic.w	r2, r2, #1
 80091c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80091ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009210:	2302      	movs	r3, #2
 8009212:	e02d      	b.n	8009270 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2224      	movs	r2, #36	@ 0x24
 8009220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0201 	bic.w	r2, r2, #1
 800923a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f84f 	bl	80092f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2220      	movs	r2, #32
 8009262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800928c:	2302      	movs	r3, #2
 800928e:	e02d      	b.n	80092ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2224      	movs	r2, #36	@ 0x24
 800929c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0201 	bic.w	r2, r2, #1
 80092b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f811 	bl	80092f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2220      	movs	r2, #32
 80092de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009300:	2b00      	cmp	r3, #0
 8009302:	d108      	bne.n	8009316 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009314:	e031      	b.n	800937a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009316:	2308      	movs	r3, #8
 8009318:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800931a:	2308      	movs	r3, #8
 800931c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	0e5b      	lsrs	r3, r3, #25
 8009326:	b2db      	uxtb	r3, r3
 8009328:	f003 0307 	and.w	r3, r3, #7
 800932c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	0f5b      	lsrs	r3, r3, #29
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	7b3a      	ldrb	r2, [r7, #12]
 8009342:	4911      	ldr	r1, [pc, #68]	@ (8009388 <UARTEx_SetNbDataToProcess+0x94>)
 8009344:	5c8a      	ldrb	r2, [r1, r2]
 8009346:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800934a:	7b3a      	ldrb	r2, [r7, #12]
 800934c:	490f      	ldr	r1, [pc, #60]	@ (800938c <UARTEx_SetNbDataToProcess+0x98>)
 800934e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009350:	fb93 f3f2 	sdiv	r3, r3, r2
 8009354:	b29a      	uxth	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	7b7a      	ldrb	r2, [r7, #13]
 8009360:	4909      	ldr	r1, [pc, #36]	@ (8009388 <UARTEx_SetNbDataToProcess+0x94>)
 8009362:	5c8a      	ldrb	r2, [r1, r2]
 8009364:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009368:	7b7a      	ldrb	r2, [r7, #13]
 800936a:	4908      	ldr	r1, [pc, #32]	@ (800938c <UARTEx_SetNbDataToProcess+0x98>)
 800936c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800936e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800937a:	bf00      	nop
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	08009430 	.word	0x08009430
 800938c:	08009438 	.word	0x08009438

08009390 <memset>:
 8009390:	4402      	add	r2, r0
 8009392:	4603      	mov	r3, r0
 8009394:	4293      	cmp	r3, r2
 8009396:	d100      	bne.n	800939a <memset+0xa>
 8009398:	4770      	bx	lr
 800939a:	f803 1b01 	strb.w	r1, [r3], #1
 800939e:	e7f9      	b.n	8009394 <memset+0x4>

080093a0 <__libc_init_array>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	4d0d      	ldr	r5, [pc, #52]	@ (80093d8 <__libc_init_array+0x38>)
 80093a4:	4c0d      	ldr	r4, [pc, #52]	@ (80093dc <__libc_init_array+0x3c>)
 80093a6:	1b64      	subs	r4, r4, r5
 80093a8:	10a4      	asrs	r4, r4, #2
 80093aa:	2600      	movs	r6, #0
 80093ac:	42a6      	cmp	r6, r4
 80093ae:	d109      	bne.n	80093c4 <__libc_init_array+0x24>
 80093b0:	4d0b      	ldr	r5, [pc, #44]	@ (80093e0 <__libc_init_array+0x40>)
 80093b2:	4c0c      	ldr	r4, [pc, #48]	@ (80093e4 <__libc_init_array+0x44>)
 80093b4:	f000 f818 	bl	80093e8 <_init>
 80093b8:	1b64      	subs	r4, r4, r5
 80093ba:	10a4      	asrs	r4, r4, #2
 80093bc:	2600      	movs	r6, #0
 80093be:	42a6      	cmp	r6, r4
 80093c0:	d105      	bne.n	80093ce <__libc_init_array+0x2e>
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c8:	4798      	blx	r3
 80093ca:	3601      	adds	r6, #1
 80093cc:	e7ee      	b.n	80093ac <__libc_init_array+0xc>
 80093ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d2:	4798      	blx	r3
 80093d4:	3601      	adds	r6, #1
 80093d6:	e7f2      	b.n	80093be <__libc_init_array+0x1e>
 80093d8:	08009448 	.word	0x08009448
 80093dc:	08009448 	.word	0x08009448
 80093e0:	08009448 	.word	0x08009448
 80093e4:	0800944c 	.word	0x0800944c

080093e8 <_init>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	bf00      	nop
 80093ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ee:	bc08      	pop	{r3}
 80093f0:	469e      	mov	lr, r3
 80093f2:	4770      	bx	lr

080093f4 <_fini>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	bf00      	nop
 80093f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fa:	bc08      	pop	{r3}
 80093fc:	469e      	mov	lr, r3
 80093fe:	4770      	bx	lr
