
TestEnvoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080055d8  080055d8  000065d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005618  08005618  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005618  08005618  00006618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005620  08005620  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005620  08005620  00006620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005624  08005624  00006624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005628  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000010  08005634  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08005634  00007234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017023  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e7  00000000  00000000  0001e05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00020a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe6  00000000  00000000  00021ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a5b  00000000  00000000  00022e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173f7  00000000  00000000  0004a8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ea33  00000000  00000000  00061cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017070b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005868  00000000  00000000  00170750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00175fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080055c0 	.word	0x080055c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080055c0 	.word	0x080055c0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc0d 	bl	8000d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f826 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f9c2 	bl	800089c <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f996 	bl	8000848 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051c:	f000 f8f4 	bl	8000708 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000520:	f000 f93c 	bl	800079c <MX_TIM3_Init>
  MX_ADC3_Init();
 8000524:	f000 f868 	bl	80005f8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000528:	213c      	movs	r1, #60	@ 0x3c
 800052a:	4809      	ldr	r0, [pc, #36]	@ (8000550 <main+0x48>)
 800052c:	f003 fde8 	bl	8004100 <HAL_TIM_Encoder_Start>
  HAL_ADC_Start_DMA(&hadc3, ADC_RawRead, 40);
 8000530:	2228      	movs	r2, #40	@ 0x28
 8000532:	4908      	ldr	r1, [pc, #32]	@ (8000554 <main+0x4c>)
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <main+0x50>)
 8000536:	f001 f843 	bl	80015c0 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 800053a:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <main+0x48>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000540:	2200      	movs	r2, #0
 8000542:	461c      	mov	r4, r3
 8000544:	4615      	mov	r5, r2
 8000546:	4b05      	ldr	r3, [pc, #20]	@ (800055c <main+0x54>)
 8000548:	e9c3 4500 	strd	r4, r5, [r3]
 800054c:	e7f5      	b.n	800053a <main+0x32>
 800054e:	bf00      	nop
 8000550:	2000018c 	.word	0x2000018c
 8000554:	200001e0 	.word	0x200001e0
 8000558:	2000002c 	.word	0x2000002c
 800055c:	200001d8 	.word	0x200001d8

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	2238      	movs	r2, #56	@ 0x38
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fffa 	bl	8005568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000582:	2000      	movs	r0, #0
 8000584:	f002 fce6 	bl	8002f54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2340      	movs	r3, #64	@ 0x40
 8000594:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059e:	2304      	movs	r3, #4
 80005a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a2:	2355      	movs	r3, #85	@ 0x55
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fd80 	bl	80030bc <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c2:	f000 f9d9 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2104      	movs	r1, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 f87e 	bl	80036e0 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ea:	f000 f9c5 	bl	8000978 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	@ 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	@ 0x30
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2220      	movs	r2, #32
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f004 ffa9 	bl	8005568 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000616:	4b38      	ldr	r3, [pc, #224]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000618:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_ADC3_Init+0x104>)
 800061a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061c:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC3_Init+0x100>)
 800061e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000622:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000624:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062a:	4b33      	ldr	r3, [pc, #204]	@ (80006f8 <MX_ADC3_Init+0x100>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000630:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000636:	4b30      	ldr	r3, [pc, #192]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063c:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC3_Init+0x100>)
 800063e:	2204      	movs	r2, #4
 8000640:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000642:	4b2d      	ldr	r3, [pc, #180]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000644:	2200      	movs	r2, #0
 8000646:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000648:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC3_Init+0x100>)
 800064a:	2201      	movs	r2, #1
 800064c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 800064e:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000650:	2202      	movs	r2, #2
 8000652:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_ADC3_Init+0x100>)
 800065e:	2200      	movs	r2, #0
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_ADC3_Init+0x100>)
 800066a:	2201      	movs	r2, #1
 800066c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000670:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000672:	2200      	movs	r2, #0
 8000674:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000676:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800067e:	481e      	ldr	r0, [pc, #120]	@ (80006f8 <MX_ADC3_Init+0x100>)
 8000680:	f000 fde2 	bl	8001248 <HAL_ADC_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800068a:	f000 f975 	bl	8000978 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	4619      	mov	r1, r3
 8000698:	4817      	ldr	r0, [pc, #92]	@ (80006f8 <MX_ADC3_Init+0x100>)
 800069a:	f001 fe13 	bl	80022c4 <HAL_ADCEx_MultiModeConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80006a4:	f000 f968 	bl	8000978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a8:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_ADC3_Init+0x108>)
 80006aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ac:	2306      	movs	r3, #6
 80006ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b4:	237f      	movs	r3, #127	@ 0x7f
 80006b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b8:	2304      	movs	r3, #4
 80006ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_ADC3_Init+0x100>)
 80006c6:	f001 f86d 	bl	80017a4 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80006d0:	f000 f952 	bl	8000978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_ADC3_Init+0x10c>)
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d8:	230c      	movs	r3, #12
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_ADC3_Init+0x100>)
 80006e2:	f001 f85f 	bl	80017a4 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 80006ec:	f000 f944 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3730      	adds	r7, #48	@ 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	50000400 	.word	0x50000400
 8000700:	04300002 	.word	0x04300002
 8000704:	14f00020 	.word	0x14f00020

08000708 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800070e:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000710:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800074a:	4812      	ldr	r0, [pc, #72]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800074c:	f004 f89e 	bl	800488c <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f90f 	bl	8000978 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	f004 fe39 	bl	80053d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000768:	f000 f906 	bl	8000978 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	f004 fe6e 	bl	8005450 <HAL_UARTEx_SetRxFifoThreshold>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800077a:	f000 f8fd 	bl	8000978 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000780:	f004 fdef 	bl	8005362 <HAL_UARTEx_DisableFifoMode>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800078a:	f000 f8f5 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000f8 	.word	0x200000f8
 8000798:	40008000 	.word	0x40008000

0800079c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	@ 0x30
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2224      	movs	r2, #36	@ 0x24
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 fedc 	bl	8005568 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ba:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <MX_TIM3_Init+0xa4>)
 80007bc:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <MX_TIM3_Init+0xa8>)
 80007be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <MX_TIM3_Init+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_TIM3_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_TIM3_Init+0xa4>)
 80007ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_TIM3_Init+0xa4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_TIM3_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007e0:	2303      	movs	r3, #3
 80007e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007e8:	2301      	movs	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007f8:	2301      	movs	r3, #1
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	480d      	ldr	r0, [pc, #52]	@ (8000840 <MX_TIM3_Init+0xa4>)
 800080c:	f003 fbd2 	bl	8003fb4 <HAL_TIM_Encoder_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000816:	f000 f8af 	bl	8000978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	@ (8000840 <MX_TIM3_Init+0xa4>)
 8000828:	f003 ff54 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000832:	f000 f8a1 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3730      	adds	r7, #48	@ 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000018c 	.word	0x2000018c
 8000844:	40000400 	.word	0x40000400

08000848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_DMA_Init+0x50>)
 8000850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000852:	4a11      	ldr	r2, [pc, #68]	@ (8000898 <MX_DMA_Init+0x50>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6493      	str	r3, [r2, #72]	@ 0x48
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_DMA_Init+0x50>)
 800085c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_DMA_Init+0x50>)
 8000868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800086a:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <MX_DMA_Init+0x50>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6493      	str	r3, [r2, #72]	@ 0x48
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_DMA_Init+0x50>)
 8000874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200b      	movs	r0, #11
 8000884:	f001 ff01 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000888:	200b      	movs	r0, #11
 800088a:	f001 ff18 	bl	80026be <HAL_NVIC_EnableIRQ>

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b2c      	ldr	r3, [pc, #176]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	4b29      	ldr	r3, [pc, #164]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a28      	ldr	r2, [pc, #160]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_GPIO_Init+0xd4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <MX_GPIO_Init+0xd4>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_GPIO_Init+0xd4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091a:	f002 fadf 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000924:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	480f      	ldr	r0, [pc, #60]	@ (8000974 <MX_GPIO_Init+0xd8>)
 8000936:	f002 f94f 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800093a:	2320      	movs	r3, #32
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000954:	f002 f940 	bl	8002bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2028      	movs	r0, #40	@ 0x28
 800095e:	f001 fe94 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000962:	2028      	movs	r0, #40	@ 0x28
 8000964:	f001 feab 	bl	80026be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	@ 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	48000800 	.word	0x48000800

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800098e:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <HAL_MspInit+0x44>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6613      	str	r3, [r2, #96]	@ 0x60
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <HAL_MspInit+0x44>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <HAL_MspInit+0x44>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_MspInit+0x44>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009ba:	f002 fb6f 	bl	800309c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09e      	sub	sp, #120	@ 0x78
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2254      	movs	r2, #84	@ 0x54
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 fdbb 	bl	8005568 <memset>
  if(hadc->Instance==ADC3)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a33      	ldr	r2, [pc, #204]	@ (8000ac4 <HAL_ADC_MspInit+0xf8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d15f      	bne.n	8000abc <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80009fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000a02:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000a06:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 f883 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a18:	f7ff ffae 	bl	8000978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac8 <HAL_ADC_MspInit+0xfc>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a20:	4a29      	ldr	r2, [pc, #164]	@ (8000ac8 <HAL_ADC_MspInit+0xfc>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a28:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <HAL_ADC_MspInit+0xfc>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <HAL_ADC_MspInit+0xfc>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a38:	4a23      	ldr	r2, [pc, #140]	@ (8000ac8 <HAL_ADC_MspInit+0xfc>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a40:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <HAL_ADC_MspInit+0xfc>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8000a4c:	f242 0302 	movw	r3, #8194	@ 0x2002
 8000a50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a52:	2303      	movs	r3, #3
 8000a54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481a      	ldr	r0, [pc, #104]	@ (8000acc <HAL_ADC_MspInit+0x100>)
 8000a62:	f002 f8b9 	bl	8002bd8 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel1;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000a68:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad4 <HAL_ADC_MspInit+0x108>)
 8000a6a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000a6e:	2225      	movs	r2, #37	@ 0x25
 8000a70:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a72:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000a86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a8a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000a8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000a96:	2220      	movs	r2, #32
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000aa0:	480b      	ldr	r0, [pc, #44]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000aa2:	f001 fe27 	bl	80026f4 <HAL_DMA_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000aac:	f7ff ff64 	bl	8000978 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000ab4:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ab6:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <HAL_ADC_MspInit+0x104>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3778      	adds	r7, #120	@ 0x78
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	50000400 	.word	0x50000400
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000400 	.word	0x48000400
 8000ad0:	20000098 	.word	0x20000098
 8000ad4:	40020008 	.word	0x40020008

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09e      	sub	sp, #120	@ 0x78
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	2254      	movs	r2, #84	@ 0x54
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 fd35 	bl	8005568 <memset>
  if(huart->Instance==LPUART1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1f      	ldr	r2, [pc, #124]	@ (8000b80 <HAL_UART_MspInit+0xa8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d136      	bne.n	8000b76 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 ffff 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b20:	f7ff ff2a 	bl	8000978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b24:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b28:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a10      	ldr	r2, [pc, #64]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <HAL_UART_MspInit+0xac>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b54:	230c      	movs	r3, #12
 8000b56:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b64:	230c      	movs	r3, #12
 8000b66:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f002 f831 	bl	8002bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3778      	adds	r7, #120	@ 0x78
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40008000 	.word	0x40008000
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c14 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d130      	bne.n	8000c0c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <HAL_TIM_Encoder_MspInit+0x90>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bae:	4a1a      	ldr	r2, [pc, #104]	@ (8000c18 <HAL_TIM_Encoder_MspInit+0x90>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_TIM_Encoder_MspInit+0x90>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_TIM_Encoder_MspInit+0x90>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <HAL_TIM_Encoder_MspInit+0x90>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_TIM_Encoder_MspInit+0x90>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bda:	23c0      	movs	r3, #192	@ 0xc0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bea:	2302      	movs	r3, #2
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f001 ffee 	bl	8002bd8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	201d      	movs	r0, #29
 8000c02:	f001 fd42 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c06:	201d      	movs	r0, #29
 8000c08:	f001 fd59 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	@ 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40000400 	.word	0x40000400
 8000c18:	40021000 	.word	0x40021000

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c72:	f000 f8ad 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <DMA1_Channel1_IRQHandler+0x10>)
 8000c82:	f001 fe5a 	bl	800293a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000098 	.word	0x20000098

08000c90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c94:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <TIM3_IRQHandler+0x10>)
 8000c96:	f003 fac1 	bl	800421c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000018c 	.word	0x2000018c

08000ca4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ca8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cac:	f002 f92e 	bl	8002f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff ffea 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	@ (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f004 fc37 	bl	8005578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fbfd 	bl	8000508 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d1c:	08005628 	.word	0x08005628
  ldr r2, =_sbss
 8000d20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d24:	20000234 	.word	0x20000234

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>

08000d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f001 fc9d 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f80e 	bl	8000d5c <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	e001      	b.n	8000d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4c:	f7ff fe1a 	bl	8000984 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d50:	79fb      	ldrb	r3, [r7, #7]

}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d68:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <HAL_InitTick+0x68>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d022      	beq.n	8000db6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_InitTick+0x6c>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <HAL_InitTick+0x68>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fca8 	bl	80026da <HAL_SYSTICK_Config>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10f      	bne.n	8000db0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b0f      	cmp	r3, #15
 8000d94:	d809      	bhi.n	8000daa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d96:	2200      	movs	r2, #0
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9e:	f001 fc74 	bl	800268a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_InitTick+0x70>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e007      	b.n	8000dba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e004      	b.n	8000dba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e001      	b.n	8000dba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <HAL_IncTick+0x1c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HAL_IncTick+0x20>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a03      	ldr	r2, [pc, #12]	@ (8000dec <HAL_IncTick+0x1c>)
 8000de0:	6013      	str	r3, [r2, #0]
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	20000230 	.word	0x20000230
 8000df0:	20000008 	.word	0x20000008

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000230 	.word	0x20000230

08000e0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	609a      	str	r2, [r3, #8]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3360      	adds	r3, #96	@ 0x60
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <LL_ADC_SetOffset+0x44>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000eac:	bf00      	nop
 8000eae:	371c      	adds	r7, #28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	03fff000 	.word	0x03fff000

08000ebc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3360      	adds	r3, #96	@ 0x60
 8000eca:	461a      	mov	r2, r3
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3360      	adds	r3, #96	@ 0x60
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f12:	bf00      	nop
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b087      	sub	sp, #28
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3360      	adds	r3, #96	@ 0x60
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3360      	adds	r3, #96	@ 0x60
 8000f64:	461a      	mov	r2, r3
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f7e:	bf00      	nop
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	615a      	str	r2, [r3, #20]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3330      	adds	r3, #48	@ 0x30
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	4413      	add	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	f003 031f 	and.w	r3, r3, #31
 8001000:	211f      	movs	r1, #31
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	401a      	ands	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	0e9b      	lsrs	r3, r3, #26
 800100e:	f003 011f 	and.w	r1, r3, #31
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	f003 031f 	and.w	r3, r3, #31
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	431a      	orrs	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800102e:	b480      	push	{r7}
 8001030:	b087      	sub	sp, #28
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3314      	adds	r3, #20
 800103e:	461a      	mov	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	0e5b      	lsrs	r3, r3, #25
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	4413      	add	r3, r2
 800104c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	0d1b      	lsrs	r3, r3, #20
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	2107      	movs	r1, #7
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	401a      	ands	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	0d1b      	lsrs	r3, r3, #20
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	431a      	orrs	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0318 	and.w	r3, r3, #24
 80010a6:	4908      	ldr	r1, [pc, #32]	@ (80010c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010a8:	40d9      	lsrs	r1, r3
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	400b      	ands	r3, r1
 80010ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010b2:	431a      	orrs	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	0007ffff 	.word	0x0007ffff

080010cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 031f 	and.w	r3, r3, #31
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80010f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6093      	str	r3, [r2, #8]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800111c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001120:	d101      	bne.n	8001126 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001144:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001148:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001170:	d101      	bne.n	8001176 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001194:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001198:	f043 0201 	orr.w	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <LL_ADC_IsEnabled+0x18>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <LL_ADC_IsEnabled+0x1a>
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011e6:	f043 0204 	orr.w	r2, r3, #4
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	2b04      	cmp	r3, #4
 800120c:	d101      	bne.n	8001212 <LL_ADC_REG_IsConversionOngoing+0x18>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b08      	cmp	r3, #8
 8001232:	d101      	bne.n	8001238 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e1a9      	b.n	80015b6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fbab 	bl	80009cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff3f 	bl	800110c <LL_ADC_IsDeepPowerDownEnabled>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff25 	bl	80010e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff5a 	bl	800115c <LL_ADC_IsInternalRegulatorEnabled>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d115      	bne.n	80012da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff3e 	bl	8001134 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012b8:	4b9c      	ldr	r3, [pc, #624]	@ (800152c <HAL_ADC_Init+0x2e4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	099b      	lsrs	r3, r3, #6
 80012be:	4a9c      	ldr	r2, [pc, #624]	@ (8001530 <HAL_ADC_Init+0x2e8>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	3301      	adds	r3, #1
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012cc:	e002      	b.n	80012d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f9      	bne.n	80012ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff3c 	bl	800115c <LL_ADC_IsInternalRegulatorEnabled>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10d      	bne.n	8001306 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ee:	f043 0210 	orr.w	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fa:	f043 0201 	orr.w	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff75 	bl	80011fa <LL_ADC_REG_IsConversionOngoing>
 8001310:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 8142 	bne.w	80015a4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 813e 	bne.w	80015a4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001330:	f043 0202 	orr.w	r2, r3, #2
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff35 	bl	80011ac <LL_ADC_IsEnabled>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d141      	bne.n	80013cc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001350:	d004      	beq.n	800135c <HAL_ADC_Init+0x114>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a77      	ldr	r2, [pc, #476]	@ (8001534 <HAL_ADC_Init+0x2ec>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d10f      	bne.n	800137c <HAL_ADC_Init+0x134>
 800135c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001360:	f7ff ff24 	bl	80011ac <LL_ADC_IsEnabled>
 8001364:	4604      	mov	r4, r0
 8001366:	4873      	ldr	r0, [pc, #460]	@ (8001534 <HAL_ADC_Init+0x2ec>)
 8001368:	f7ff ff20 	bl	80011ac <LL_ADC_IsEnabled>
 800136c:	4603      	mov	r3, r0
 800136e:	4323      	orrs	r3, r4
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf0c      	ite	eq
 8001374:	2301      	moveq	r3, #1
 8001376:	2300      	movne	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	e012      	b.n	80013a2 <HAL_ADC_Init+0x15a>
 800137c:	486e      	ldr	r0, [pc, #440]	@ (8001538 <HAL_ADC_Init+0x2f0>)
 800137e:	f7ff ff15 	bl	80011ac <LL_ADC_IsEnabled>
 8001382:	4604      	mov	r4, r0
 8001384:	486d      	ldr	r0, [pc, #436]	@ (800153c <HAL_ADC_Init+0x2f4>)
 8001386:	f7ff ff11 	bl	80011ac <LL_ADC_IsEnabled>
 800138a:	4603      	mov	r3, r0
 800138c:	431c      	orrs	r4, r3
 800138e:	486c      	ldr	r0, [pc, #432]	@ (8001540 <HAL_ADC_Init+0x2f8>)
 8001390:	f7ff ff0c 	bl	80011ac <LL_ADC_IsEnabled>
 8001394:	4603      	mov	r3, r0
 8001396:	4323      	orrs	r3, r4
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf0c      	ite	eq
 800139c:	2301      	moveq	r3, #1
 800139e:	2300      	movne	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013ae:	d004      	beq.n	80013ba <HAL_ADC_Init+0x172>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001534 <HAL_ADC_Init+0x2ec>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Init+0x176>
 80013ba:	4a62      	ldr	r2, [pc, #392]	@ (8001544 <HAL_ADC_Init+0x2fc>)
 80013bc:	e000      	b.n	80013c0 <HAL_ADC_Init+0x178>
 80013be:	4a62      	ldr	r2, [pc, #392]	@ (8001548 <HAL_ADC_Init+0x300>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f7ff fd20 	bl	8000e0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7f5b      	ldrb	r3, [r3, #29]
 80013d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80013dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80013e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d106      	bne.n	8001408 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fe:	3b01      	subs	r3, #1
 8001400:	045b      	lsls	r3, r3, #17
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001414:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	4b48      	ldr	r3, [pc, #288]	@ (800154c <HAL_ADC_Init+0x304>)
 800142c:	4013      	ands	r3, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	430b      	orrs	r3, r1
 8001436:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fee4 	bl	8001220 <LL_ADC_INJ_IsConversionOngoing>
 8001458:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d17f      	bne.n	8001560 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d17c      	bne.n	8001560 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800146a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001472:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001482:	f023 0302 	bic.w	r3, r3, #2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	430b      	orrs	r3, r1
 800148e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d017      	beq.n	80014c8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80014a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80014b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80014b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6911      	ldr	r1, [r2, #16]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	430b      	orrs	r3, r1
 80014c2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80014c6:	e013      	b.n	80014f0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80014d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80014e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014ec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d12a      	bne.n	8001550 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001510:	4311      	orrs	r1, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001516:	4311      	orrs	r1, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800151c:	430a      	orrs	r2, r1
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0201 	orr.w	r2, r2, #1
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	e019      	b.n	8001560 <HAL_ADC_Init+0x318>
 800152c:	20000000 	.word	0x20000000
 8001530:	053e2d63 	.word	0x053e2d63
 8001534:	50000100 	.word	0x50000100
 8001538:	50000400 	.word	0x50000400
 800153c:	50000500 	.word	0x50000500
 8001540:	50000600 	.word	0x50000600
 8001544:	50000300 	.word	0x50000300
 8001548:	50000700 	.word	0x50000700
 800154c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10c      	bne.n	8001582 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f023 010f 	bic.w	r1, r3, #15
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001580:	e007      	b.n	8001592 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020f 	bic.w	r2, r2, #15
 8001590:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001596:	f023 0303 	bic.w	r3, r3, #3
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015a2:	e007      	b.n	80015b4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a8:	f043 0210 	orr.w	r2, r3, #16
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	bf00      	nop

080015c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_Start_DMA+0x20>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a5a      	ldr	r2, [pc, #360]	@ (8001744 <HAL_ADC_Start_DMA+0x184>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x24>
 80015e0:	4b59      	ldr	r3, [pc, #356]	@ (8001748 <HAL_ADC_Start_DMA+0x188>)
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_Start_DMA+0x26>
 80015e4:	4b59      	ldr	r3, [pc, #356]	@ (800174c <HAL_ADC_Start_DMA+0x18c>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fd70 	bl	80010cc <LL_ADC_GetMultimode>
 80015ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe01 	bl	80011fa <LL_ADC_REG_IsConversionOngoing>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 809b 	bne.w	8001736 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_ADC_Start_DMA+0x4e>
 800160a:	2302      	movs	r3, #2
 800160c:	e096      	b.n	800173c <HAL_ADC_Start_DMA+0x17c>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a4d      	ldr	r2, [pc, #308]	@ (8001750 <HAL_ADC_Start_DMA+0x190>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d008      	beq.n	8001632 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	2b05      	cmp	r3, #5
 800162a:	d002      	beq.n	8001632 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b09      	cmp	r3, #9
 8001630:	d17a      	bne.n	8001728 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fcf6 	bl	8002024 <ADC_Enable>
 8001638:	4603      	mov	r3, r0
 800163a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d16d      	bne.n	800171e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001646:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a3a      	ldr	r2, [pc, #232]	@ (8001744 <HAL_ADC_Start_DMA+0x184>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d009      	beq.n	8001674 <HAL_ADC_Start_DMA+0xb4>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a3b      	ldr	r2, [pc, #236]	@ (8001754 <HAL_ADC_Start_DMA+0x194>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d002      	beq.n	8001670 <HAL_ADC_Start_DMA+0xb0>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	e003      	b.n	8001678 <HAL_ADC_Start_DMA+0xb8>
 8001670:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <HAL_ADC_Start_DMA+0x198>)
 8001672:	e001      	b.n	8001678 <HAL_ADC_Start_DMA+0xb8>
 8001674:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4293      	cmp	r3, r2
 800167e:	d002      	beq.n	8001686 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d105      	bne.n	8001692 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001696:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a2:	f023 0206 	bic.w	r2, r3, #6
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80016aa:	e002      	b.n	80016b2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b6:	4a29      	ldr	r2, [pc, #164]	@ (800175c <HAL_ADC_Start_DMA+0x19c>)
 80016b8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016be:	4a28      	ldr	r2, [pc, #160]	@ (8001760 <HAL_ADC_Start_DMA+0x1a0>)
 80016c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c6:	4a27      	ldr	r2, [pc, #156]	@ (8001764 <HAL_ADC_Start_DMA+0x1a4>)
 80016c8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	221c      	movs	r2, #28
 80016d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0210 	orr.w	r2, r2, #16
 80016e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3340      	adds	r3, #64	@ 0x40
 8001704:	4619      	mov	r1, r3
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f001 f89b 	bl	8002844 <HAL_DMA_Start_IT>
 800170e:	4603      	mov	r3, r0
 8001710:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fd5b 	bl	80011d2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800171c:	e00d      	b.n	800173a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001726:	e008      	b.n	800173a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001734:	e001      	b.n	800173a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001736:	2302      	movs	r3, #2
 8001738:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800173a:	7dfb      	ldrb	r3, [r7, #23]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	50000100 	.word	0x50000100
 8001748:	50000300 	.word	0x50000300
 800174c:	50000700 	.word	0x50000700
 8001750:	50000600 	.word	0x50000600
 8001754:	50000500 	.word	0x50000500
 8001758:	50000400 	.word	0x50000400
 800175c:	08002151 	.word	0x08002151
 8001760:	08002229 	.word	0x08002229
 8001764:	08002245 	.word	0x08002245

08001768 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0b6      	sub	sp, #216	@ 0xd8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d102      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x24>
 80017c2:	2302      	movs	r3, #2
 80017c4:	f000 bc13 	b.w	8001fee <HAL_ADC_ConfigChannel+0x84a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fd10 	bl	80011fa <LL_ADC_REG_IsConversionOngoing>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f040 83f3 	bne.w	8001fc8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	f7ff fbf1 	bl	8000fd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fcfe 	bl	80011fa <LL_ADC_REG_IsConversionOngoing>
 80017fe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fd0a 	bl	8001220 <LL_ADC_INJ_IsConversionOngoing>
 800180c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001810:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 81d9 	bne.w	8001bcc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800181a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 81d4 	bne.w	8001bcc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800182c:	d10f      	bne.n	800184e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff fbf8 	bl	800102e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fb9f 	bl	8000f8a <LL_ADC_SetSamplingTimeCommonConfig>
 800184c:	e00e      	b.n	800186c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	461a      	mov	r2, r3
 800185c:	f7ff fbe7 	bl	800102e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb8f 	bl	8000f8a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	08db      	lsrs	r3, r3, #3
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b04      	cmp	r3, #4
 800188c:	d022      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6919      	ldr	r1, [r3, #16]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800189e:	f7ff fae9 	bl	8000e74 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	6919      	ldr	r1, [r3, #16]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	461a      	mov	r2, r3
 80018b0:	f7ff fb35 	bl	8000f1e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d102      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x126>
 80018c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018c8:	e000      	b.n	80018cc <HAL_ADC_ConfigChannel+0x128>
 80018ca:	2300      	movs	r3, #0
 80018cc:	461a      	mov	r2, r3
 80018ce:	f7ff fb41 	bl	8000f54 <LL_ADC_SetOffsetSaturation>
 80018d2:	e17b      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff faee 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x15c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fae3 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	0e9b      	lsrs	r3, r3, #26
 80018fa:	f003 021f 	and.w	r2, r3, #31
 80018fe:	e01e      	b.n	800193e <HAL_ADC_ConfigChannel+0x19a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fad8 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800191e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001922:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001926:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800192e:	2320      	movs	r3, #32
 8001930:	e004      	b.n	800193c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x1b2>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	0e9b      	lsrs	r3, r3, #26
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	e018      	b.n	8001988 <HAL_ADC_ConfigChannel+0x1e4>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800196a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800196e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e004      	b.n	8001988 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800197e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001988:	429a      	cmp	r2, r3
 800198a:	d106      	bne.n	800199a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff faa7 	bl	8000ee8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2101      	movs	r1, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa8b 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x222>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fa80 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	e01e      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x260>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2101      	movs	r1, #1
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fa75 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80019e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80019ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80019f4:	2320      	movs	r3, #32
 80019f6:	e004      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80019f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x278>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	0e9b      	lsrs	r3, r3, #26
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	e018      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x2aa>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001a40:	2320      	movs	r3, #32
 8001a42:	e004      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d106      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fa44 	bl	8000ee8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2102      	movs	r1, #2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fa28 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x2e8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fa1d 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	f003 021f 	and.w	r2, r3, #31
 8001a8a:	e01e      	b.n	8001aca <HAL_ADC_ConfigChannel+0x326>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2102      	movs	r1, #2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fa12 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001aaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001aba:	2320      	movs	r3, #32
 8001abc:	e004      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x33e>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	e016      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x36c>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001af4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001af6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001b02:	2320      	movs	r3, #32
 8001b04:	e004      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d106      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f9e3 	bl	8000ee8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2103      	movs	r1, #3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff f9c7 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x3aa>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2103      	movs	r1, #3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f9bc 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	0e9b      	lsrs	r3, r3, #26
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	e017      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x3da>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2103      	movs	r1, #3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f9b1 	bl	8000ebc <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b68:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001b6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001b70:	2320      	movs	r3, #32
 8001b72:	e003      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x3f2>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	e011      	b.n	8001bba <HAL_ADC_ConfigChannel+0x416>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e003      	b.n	8001bba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d106      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2103      	movs	r1, #3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f98e 	bl	8000ee8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff faeb 	bl	80011ac <LL_ADC_IsEnabled>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f040 813d 	bne.w	8001e58 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f7ff fa4a 	bl	8001084 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4aa2      	ldr	r2, [pc, #648]	@ (8001e80 <HAL_ADC_ConfigChannel+0x6dc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	f040 812e 	bne.w	8001e58 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10b      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x480>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0e9b      	lsrs	r3, r3, #26
 8001c12:	3301      	adds	r3, #1
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	bf94      	ite	ls
 8001c1c:	2301      	movls	r3, #1
 8001c1e:	2300      	movhi	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e019      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x4b4>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c34:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001c36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	e003      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001c40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	2b09      	cmp	r3, #9
 8001c50:	bf94      	ite	ls
 8001c52:	2301      	movls	r3, #1
 8001c54:	2300      	movhi	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d079      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x4d4>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0e9b      	lsrs	r3, r3, #26
 8001c6e:	3301      	adds	r3, #1
 8001c70:	069b      	lsls	r3, r3, #26
 8001c72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c76:	e015      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x500>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001c90:	2320      	movs	r3, #32
 8001c92:	e003      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	069b      	lsls	r3, r3, #26
 8001ca0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x520>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	e017      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x550>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	e003      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	ea42 0103 	orr.w	r1, r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10a      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x576>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	051b      	lsls	r3, r3, #20
 8001d18:	e018      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x5a8>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001d32:	2320      	movs	r3, #32
 8001d34:	e003      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	e07e      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d107      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x5c8>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	3301      	adds	r3, #1
 8001d64:	069b      	lsls	r3, r3, #26
 8001d66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d6a:	e015      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x5f4>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001d84:	2320      	movs	r3, #32
 8001d86:	e003      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	069b      	lsls	r3, r3, #26
 8001d94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x614>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	3301      	adds	r3, #1
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	e017      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x644>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	61fb      	str	r3, [r7, #28]
  return result;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	e003      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	ea42 0103 	orr.w	r1, r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10d      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x670>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b1e      	subs	r3, #30
 8001e0c:	051b      	lsls	r3, r3, #20
 8001e0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	e01b      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x6a8>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	613b      	str	r3, [r7, #16]
  return result;
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	e003      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f003 021f 	and.w	r2, r3, #31
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	3b1e      	subs	r3, #30
 8001e46:	051b      	lsls	r3, r3, #20
 8001e48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e4c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7ff f8eb 	bl	800102e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_ADC_ConfigChannel+0x6e0>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80be 	beq.w	8001fe2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e6e:	d004      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x6d6>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <HAL_ADC_ConfigChannel+0x6e4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10a      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x6ec>
 8001e7a:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <HAL_ADC_ConfigChannel+0x6e8>)
 8001e7c:	e009      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x6ee>
 8001e7e:	bf00      	nop
 8001e80:	407f0000 	.word	0x407f0000
 8001e84:	80080000 	.word	0x80080000
 8001e88:	50000100 	.word	0x50000100
 8001e8c:	50000300 	.word	0x50000300
 8001e90:	4b59      	ldr	r3, [pc, #356]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x854>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe ffe0 	bl	8000e58 <LL_ADC_GetCommonPathInternalCh>
 8001e98:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a56      	ldr	r2, [pc, #344]	@ (8001ffc <HAL_ADC_ConfigChannel+0x858>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_ADC_ConfigChannel+0x70c>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a55      	ldr	r2, [pc, #340]	@ (8002000 <HAL_ADC_ConfigChannel+0x85c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d13a      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d134      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ec4:	d005      	beq.n	8001ed2 <HAL_ADC_ConfigChannel+0x72e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a4e      	ldr	r2, [pc, #312]	@ (8002004 <HAL_ADC_ConfigChannel+0x860>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	f040 8085 	bne.w	8001fdc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eda:	d004      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x742>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a49      	ldr	r2, [pc, #292]	@ (8002008 <HAL_ADC_ConfigChannel+0x864>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x746>
 8001ee6:	4a49      	ldr	r2, [pc, #292]	@ (800200c <HAL_ADC_ConfigChannel+0x868>)
 8001ee8:	e000      	b.n	8001eec <HAL_ADC_ConfigChannel+0x748>
 8001eea:	4a43      	ldr	r2, [pc, #268]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x854>)
 8001eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ef0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	f7fe ff9b 	bl	8000e32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001efc:	4b44      	ldr	r3, [pc, #272]	@ (8002010 <HAL_ADC_ConfigChannel+0x86c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	4a44      	ldr	r2, [pc, #272]	@ (8002014 <HAL_ADC_ConfigChannel+0x870>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f16:	e002      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f9      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f24:	e05a      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002018 <HAL_ADC_ConfigChannel+0x874>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d125      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d11f      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <HAL_ADC_ConfigChannel+0x864>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d104      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x7ac>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a34      	ldr	r2, [pc, #208]	@ (800201c <HAL_ADC_ConfigChannel+0x878>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d047      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f58:	d004      	beq.n	8001f64 <HAL_ADC_ConfigChannel+0x7c0>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002008 <HAL_ADC_ConfigChannel+0x864>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x7c4>
 8001f64:	4a29      	ldr	r2, [pc, #164]	@ (800200c <HAL_ADC_ConfigChannel+0x868>)
 8001f66:	e000      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x7c6>
 8001f68:	4a23      	ldr	r2, [pc, #140]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x854>)
 8001f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f7fe ff5c 	bl	8000e32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f7a:	e031      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a27      	ldr	r2, [pc, #156]	@ (8002020 <HAL_ADC_ConfigChannel+0x87c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d12d      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d127      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1c      	ldr	r2, [pc, #112]	@ (8002008 <HAL_ADC_ConfigChannel+0x864>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d022      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fa4:	d004      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0x80c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a17      	ldr	r2, [pc, #92]	@ (8002008 <HAL_ADC_ConfigChannel+0x864>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x810>
 8001fb0:	4a16      	ldr	r2, [pc, #88]	@ (800200c <HAL_ADC_ConfigChannel+0x868>)
 8001fb2:	e000      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x812>
 8001fb4:	4a10      	ldr	r2, [pc, #64]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x854>)
 8001fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f7fe ff36 	bl	8000e32 <LL_ADC_SetCommonPathInternalCh>
 8001fc6:	e00c      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fdc:	bf00      	nop
 8001fde:	e000      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	37d8      	adds	r7, #216	@ 0xd8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	50000700 	.word	0x50000700
 8001ffc:	c3210000 	.word	0xc3210000
 8002000:	90c00010 	.word	0x90c00010
 8002004:	50000600 	.word	0x50000600
 8002008:	50000100 	.word	0x50000100
 800200c:	50000300 	.word	0x50000300
 8002010:	20000000 	.word	0x20000000
 8002014:	053e2d63 	.word	0x053e2d63
 8002018:	c7520000 	.word	0xc7520000
 800201c:	50000500 	.word	0x50000500
 8002020:	cb840000 	.word	0xcb840000

08002024 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f8b9 	bl	80011ac <LL_ADC_IsEnabled>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d176      	bne.n	800212e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <ADC_Enable+0x114>)
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00d      	beq.n	800206a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e062      	b.n	8002130 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f888 	bl	8001184 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800207c:	d004      	beq.n	8002088 <ADC_Enable+0x64>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2e      	ldr	r2, [pc, #184]	@ (800213c <ADC_Enable+0x118>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <ADC_Enable+0x68>
 8002088:	4b2d      	ldr	r3, [pc, #180]	@ (8002140 <ADC_Enable+0x11c>)
 800208a:	e000      	b.n	800208e <ADC_Enable+0x6a>
 800208c:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <ADC_Enable+0x120>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fee2 	bl	8000e58 <LL_ADC_GetCommonPathInternalCh>
 8002094:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002096:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800209a:	2b00      	cmp	r3, #0
 800209c:	d013      	beq.n	80020c6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800209e:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <ADC_Enable+0x124>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	4a29      	ldr	r2, [pc, #164]	@ (800214c <ADC_Enable+0x128>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020b8:	e002      	b.n	80020c0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3b01      	subs	r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f9      	bne.n	80020ba <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020c6:	f7fe fe95 	bl	8000df4 <HAL_GetTick>
 80020ca:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020cc:	e028      	b.n	8002120 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f86a 	bl	80011ac <LL_ADC_IsEnabled>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f84e 	bl	8001184 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020e8:	f7fe fe84 	bl	8000df4 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d914      	bls.n	8002120 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d00d      	beq.n	8002120 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002108:	f043 0210 	orr.w	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e007      	b.n	8002130 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d1cf      	bne.n	80020ce <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	8000003f 	.word	0x8000003f
 800213c:	50000100 	.word	0x50000100
 8002140:	50000300 	.word	0x50000300
 8002144:	50000700 	.word	0x50000700
 8002148:	20000000 	.word	0x20000000
 800214c:	053e2d63 	.word	0x053e2d63

08002150 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002162:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002166:	2b00      	cmp	r3, #0
 8002168:	d14b      	bne.n	8002202 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d021      	beq.n	80021c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe ff11 	bl	8000fb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d032      	beq.n	80021fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d12b      	bne.n	80021fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11f      	bne.n	80021fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021c6:	e018      	b.n	80021fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d111      	bne.n	80021fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff fab4 	bl	8001768 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002200:	e00e      	b.n	8002220 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f7ff fabe 	bl	8001790 <HAL_ADC_ErrorCallback>
}
 8002214:	e004      	b.n	8002220 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff faa0 	bl	800177c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002262:	f043 0204 	orr.w	r2, r3, #4
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7ff fa90 	bl	8001790 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <LL_ADC_IsEnabled>:
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <LL_ADC_IsEnabled+0x18>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <LL_ADC_IsEnabled+0x1a>
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <LL_ADC_REG_IsConversionOngoing>:
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d101      	bne.n	80022b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b0a1      	sub	sp, #132	@ 0x84
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022de:	2302      	movs	r3, #2
 80022e0:	e0e7      	b.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80022ea:	2300      	movs	r3, #0
 80022ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80022ee:	2300      	movs	r3, #0
 80022f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022fa:	d102      	bne.n	8002302 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80022fc:	4b6f      	ldr	r3, [pc, #444]	@ (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	e009      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6e      	ldr	r2, [pc, #440]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d102      	bne.n	8002312 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800230c:	4b6d      	ldr	r3, [pc, #436]	@ (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	e001      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002320:	f043 0220 	orr.w	r2, r3, #32
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0be      	b.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ffb1 	bl	800229e <LL_ADC_REG_IsConversionOngoing>
 800233c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ffab 	bl	800229e <LL_ADC_REG_IsConversionOngoing>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 80a0 	bne.w	8002490 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 809c 	bne.w	8002490 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002360:	d004      	beq.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a55      	ldr	r2, [pc, #340]	@ (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800236c:	4b56      	ldr	r3, [pc, #344]	@ (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800236e:	e000      	b.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002370:	4b56      	ldr	r3, [pc, #344]	@ (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002372:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d04b      	beq.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800237c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800238e:	035b      	lsls	r3, r3, #13
 8002390:	430b      	orrs	r3, r1
 8002392:	431a      	orrs	r2, r3
 8002394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002396:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023a0:	d004      	beq.n	80023ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a45      	ldr	r2, [pc, #276]	@ (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d10f      	bne.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80023ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80023b0:	f7ff ff62 	bl	8002278 <LL_ADC_IsEnabled>
 80023b4:	4604      	mov	r4, r0
 80023b6:	4841      	ldr	r0, [pc, #260]	@ (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80023b8:	f7ff ff5e 	bl	8002278 <LL_ADC_IsEnabled>
 80023bc:	4603      	mov	r3, r0
 80023be:	4323      	orrs	r3, r4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e012      	b.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80023cc:	483c      	ldr	r0, [pc, #240]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80023ce:	f7ff ff53 	bl	8002278 <LL_ADC_IsEnabled>
 80023d2:	4604      	mov	r4, r0
 80023d4:	483b      	ldr	r0, [pc, #236]	@ (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80023d6:	f7ff ff4f 	bl	8002278 <LL_ADC_IsEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	431c      	orrs	r4, r3
 80023de:	483c      	ldr	r0, [pc, #240]	@ (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80023e0:	f7ff ff4a 	bl	8002278 <LL_ADC_IsEnabled>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4323      	orrs	r3, r4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d056      	beq.n	80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80023fe:	f023 030f 	bic.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	6811      	ldr	r1, [r2, #0]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	6892      	ldr	r2, [r2, #8]
 800240a:	430a      	orrs	r2, r1
 800240c:	431a      	orrs	r2, r3
 800240e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002410:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002412:	e047      	b.n	80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800241c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800241e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002428:	d004      	beq.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a23      	ldr	r2, [pc, #140]	@ (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d10f      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002434:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002438:	f7ff ff1e 	bl	8002278 <LL_ADC_IsEnabled>
 800243c:	4604      	mov	r4, r0
 800243e:	481f      	ldr	r0, [pc, #124]	@ (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002440:	f7ff ff1a 	bl	8002278 <LL_ADC_IsEnabled>
 8002444:	4603      	mov	r3, r0
 8002446:	4323      	orrs	r3, r4
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	e012      	b.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002454:	481a      	ldr	r0, [pc, #104]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002456:	f7ff ff0f 	bl	8002278 <LL_ADC_IsEnabled>
 800245a:	4604      	mov	r4, r0
 800245c:	4819      	ldr	r0, [pc, #100]	@ (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800245e:	f7ff ff0b 	bl	8002278 <LL_ADC_IsEnabled>
 8002462:	4603      	mov	r3, r0
 8002464:	431c      	orrs	r4, r3
 8002466:	481a      	ldr	r0, [pc, #104]	@ (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002468:	f7ff ff06 	bl	8002278 <LL_ADC_IsEnabled>
 800246c:	4603      	mov	r3, r0
 800246e:	4323      	orrs	r3, r4
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800247e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002486:	f023 030f 	bic.w	r3, r3, #15
 800248a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800248c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800248e:	e009      	b.n	80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80024a2:	e000      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3784      	adds	r7, #132	@ 0x84
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	bf00      	nop
 80024bc:	50000100 	.word	0x50000100
 80024c0:	50000400 	.word	0x50000400
 80024c4:	50000500 	.word	0x50000500
 80024c8:	50000300 	.word	0x50000300
 80024cc:	50000700 	.word	0x50000700
 80024d0:	50000600 	.word	0x50000600

080024d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	@ (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <__NVIC_GetPriorityGrouping+0x18>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0307 	and.w	r3, r3, #7
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	db0b      	blt.n	8002562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	4907      	ldr	r1, [pc, #28]	@ (8002570 <__NVIC_EnableIRQ+0x38>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2001      	movs	r0, #1
 800255a:	fa00 f202 	lsl.w	r2, r0, r2
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	@ (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	@ (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	@ 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff8e 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff29 	bl	80024d4 <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff40 	bl	800251c <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff90 	bl	80025c8 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff5f 	bl	8002574 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff33 	bl	8002538 <__NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ffa4 	bl	8002630 <SysTick_Config>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e08d      	b.n	8002822 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_DMA_Init+0x138>)
 800270e:	429a      	cmp	r2, r3
 8002710:	d80f      	bhi.n	8002732 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	4b45      	ldr	r3, [pc, #276]	@ (8002830 <HAL_DMA_Init+0x13c>)
 800271a:	4413      	add	r3, r2
 800271c:	4a45      	ldr	r2, [pc, #276]	@ (8002834 <HAL_DMA_Init+0x140>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	009a      	lsls	r2, r3, #2
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a42      	ldr	r2, [pc, #264]	@ (8002838 <HAL_DMA_Init+0x144>)
 800272e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002730:	e00e      	b.n	8002750 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	4b40      	ldr	r3, [pc, #256]	@ (800283c <HAL_DMA_Init+0x148>)
 800273a:	4413      	add	r3, r2
 800273c:	4a3d      	ldr	r2, [pc, #244]	@ (8002834 <HAL_DMA_Init+0x140>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	009a      	lsls	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a3c      	ldr	r2, [pc, #240]	@ (8002840 <HAL_DMA_Init+0x14c>)
 800274e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800276a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f9b6 	bl	8002b14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027b0:	d102      	bne.n	80027b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d010      	beq.n	80027f8 <HAL_DMA_Init+0x104>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d80c      	bhi.n	80027f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f9d6 	bl	8002b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	e008      	b.n	800280a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40020407 	.word	0x40020407
 8002830:	bffdfff8 	.word	0xbffdfff8
 8002834:	cccccccd 	.word	0xcccccccd
 8002838:	40020000 	.word	0x40020000
 800283c:	bffdfbf8 	.word	0xbffdfbf8
 8002840:	40020400 	.word	0x40020400

08002844 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_DMA_Start_IT+0x20>
 8002860:	2302      	movs	r3, #2
 8002862:	e066      	b.n	8002932 <HAL_DMA_Start_IT+0xee>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d155      	bne.n	8002924 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f8fb 	bl	8002a98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 020e 	orr.w	r2, r2, #14
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e00f      	b.n	80028dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0204 	bic.w	r2, r2, #4
 80028ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 020a 	orr.w	r2, r2, #10
 80028da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002910:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e005      	b.n	8002930 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800292c:	2302      	movs	r3, #2
 800292e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002930:	7dfb      	ldrb	r3, [r7, #23]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2204      	movs	r2, #4
 800295c:	409a      	lsls	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d026      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x7a>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d021      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0204 	bic.w	r2, r2, #4
 800298c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	f003 021f 	and.w	r2, r3, #31
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	2104      	movs	r1, #4
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d071      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029b2:	e06c      	b.n	8002a8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2202      	movs	r2, #2
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02e      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d029      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 020a 	bic.w	r2, r2, #10
 80029ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	2102      	movs	r1, #2
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d038      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a24:	e033      	b.n	8002a8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	2208      	movs	r2, #8
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d02a      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d025      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 020e 	bic.w	r2, r2, #14
 8002a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a8e:	bf00      	nop
 8002a90:	bf00      	nop
}
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002aae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ac0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f003 021f 	and.w	r2, r3, #31
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d108      	bne.n	8002af8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002af6:	e007      	b.n	8002b08 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b16      	ldr	r3, [pc, #88]	@ (8002b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d802      	bhi.n	8002b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002b28:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	e001      	b.n	8002b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b30:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3b08      	subs	r3, #8
 8002b3e:	4a12      	ldr	r2, [pc, #72]	@ (8002b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002b5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40020407 	.word	0x40020407
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020820 	.word	0x40020820
 8002b88:	cccccccd 	.word	0xcccccccd
 8002b8c:	40020880 	.word	0x40020880

08002b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a08      	ldr	r2, [pc, #32]	@ (8002bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002bb2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	1000823f 	.word	0x1000823f
 8002bd4:	40020940 	.word	0x40020940

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002be6:	e15a      	b.n	8002e9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	2101      	movs	r1, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 814c 	beq.w	8002e98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d005      	beq.n	8002c18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d130      	bne.n	8002c7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c4e:	2201      	movs	r2, #1
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f003 0201 	and.w	r2, r3, #1
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d017      	beq.n	8002cb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d123      	bne.n	8002d0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	6939      	ldr	r1, [r7, #16]
 8002d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0203 	and.w	r2, r3, #3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80a6 	beq.w	8002e98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4c:	4b5b      	ldr	r3, [pc, #364]	@ (8002ebc <HAL_GPIO_Init+0x2e4>)
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d50:	4a5a      	ldr	r2, [pc, #360]	@ (8002ebc <HAL_GPIO_Init+0x2e4>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d58:	4b58      	ldr	r3, [pc, #352]	@ (8002ebc <HAL_GPIO_Init+0x2e4>)
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d64:	4a56      	ldr	r2, [pc, #344]	@ (8002ec0 <HAL_GPIO_Init+0x2e8>)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d8e:	d01f      	beq.n	8002dd0 <HAL_GPIO_Init+0x1f8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec4 <HAL_GPIO_Init+0x2ec>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d019      	beq.n	8002dcc <HAL_GPIO_Init+0x1f4>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec8 <HAL_GPIO_Init+0x2f0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_GPIO_Init+0x1f0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ecc <HAL_GPIO_Init+0x2f4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00d      	beq.n	8002dc4 <HAL_GPIO_Init+0x1ec>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a49      	ldr	r2, [pc, #292]	@ (8002ed0 <HAL_GPIO_Init+0x2f8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <HAL_GPIO_Init+0x1e8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a48      	ldr	r2, [pc, #288]	@ (8002ed4 <HAL_GPIO_Init+0x2fc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d101      	bne.n	8002dbc <HAL_GPIO_Init+0x1e4>
 8002db8:	2305      	movs	r3, #5
 8002dba:	e00a      	b.n	8002dd2 <HAL_GPIO_Init+0x1fa>
 8002dbc:	2306      	movs	r3, #6
 8002dbe:	e008      	b.n	8002dd2 <HAL_GPIO_Init+0x1fa>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	e006      	b.n	8002dd2 <HAL_GPIO_Init+0x1fa>
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e004      	b.n	8002dd2 <HAL_GPIO_Init+0x1fa>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e002      	b.n	8002dd2 <HAL_GPIO_Init+0x1fa>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_GPIO_Init+0x1fa>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	f002 0203 	and.w	r2, r2, #3
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	4093      	lsls	r3, r2
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de2:	4937      	ldr	r1, [pc, #220]	@ (8002ec0 <HAL_GPIO_Init+0x2e8>)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002df0:	4b39      	ldr	r3, [pc, #228]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e14:	4a30      	ldr	r2, [pc, #192]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e3e:	4a26      	ldr	r2, [pc, #152]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002e44:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e68:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e92:	4a11      	ldr	r2, [pc, #68]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f ae9d 	bne.w	8002be8 <HAL_GPIO_Init+0x10>
  }
}
 8002eae:	bf00      	nop
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	48000400 	.word	0x48000400
 8002ec8:	48000800 	.word	0x48000800
 8002ecc:	48000c00 	.word	0x48000c00
 8002ed0:	48001000 	.word	0x48001000
 8002ed4:	48001400 	.word	0x48001400
 8002ed8:	40010400 	.word	0x40010400

08002edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	807b      	strh	r3, [r7, #2]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eec:	787b      	ldrb	r3, [r7, #1]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ef8:	e002      	b.n	8002f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f22:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f806 	bl	8002f3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d141      	bne.n	8002fe6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f62:	4b4b      	ldr	r3, [pc, #300]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6e:	d131      	bne.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f70:	4b47      	ldr	r3, [pc, #284]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f76:	4a46      	ldr	r2, [pc, #280]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f80:	4b43      	ldr	r3, [pc, #268]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f88:	4a41      	ldr	r2, [pc, #260]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f90:	4b40      	ldr	r3, [pc, #256]	@ (8003094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2232      	movs	r2, #50	@ 0x32
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	0c9b      	lsrs	r3, r3, #18
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa6:	e002      	b.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fae:	4b38      	ldr	r3, [pc, #224]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fba:	d102      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f2      	bne.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fc2:	4b33      	ldr	r3, [pc, #204]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fce:	d158      	bne.n	8003082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e057      	b.n	8003084 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fda:	4a2d      	ldr	r2, [pc, #180]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fe4:	e04d      	b.n	8003082 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fec:	d141      	bne.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fee:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffa:	d131      	bne.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ffc:	4b24      	ldr	r3, [pc, #144]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003002:	4a23      	ldr	r2, [pc, #140]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800300c:	4b20      	ldr	r3, [pc, #128]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003014:	4a1e      	ldr	r2, [pc, #120]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800301a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800301c:	4b1d      	ldr	r3, [pc, #116]	@ (8003094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2232      	movs	r2, #50	@ 0x32
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	0c9b      	lsrs	r3, r3, #18
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003032:	e002      	b.n	800303a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3b01      	subs	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800303a:	4b15      	ldr	r3, [pc, #84]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003046:	d102      	bne.n	800304e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f2      	bne.n	8003034 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305a:	d112      	bne.n	8003082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e011      	b.n	8003084 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003066:	4a0a      	ldr	r2, [pc, #40]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003070:	e007      	b.n	8003082 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003072:	4b07      	ldr	r3, [pc, #28]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800307a:	4a05      	ldr	r2, [pc, #20]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003080:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40007000 	.word	0x40007000
 8003094:	20000000 	.word	0x20000000
 8003098:	431bde83 	.word	0x431bde83

0800309c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030aa:	6093      	str	r3, [r2, #8]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40007000 	.word	0x40007000

080030bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e2fe      	b.n	80036cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d075      	beq.n	80031c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030da:	4b97      	ldr	r3, [pc, #604]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e4:	4b94      	ldr	r3, [pc, #592]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b0c      	cmp	r3, #12
 80030f2:	d102      	bne.n	80030fa <HAL_RCC_OscConfig+0x3e>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d002      	beq.n	8003100 <HAL_RCC_OscConfig+0x44>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d10b      	bne.n	8003118 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	4b8d      	ldr	r3, [pc, #564]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d05b      	beq.n	80031c4 <HAL_RCC_OscConfig+0x108>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d157      	bne.n	80031c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e2d9      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003120:	d106      	bne.n	8003130 <HAL_RCC_OscConfig+0x74>
 8003122:	4b85      	ldr	r3, [pc, #532]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a84      	ldr	r2, [pc, #528]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e01d      	b.n	800316c <HAL_RCC_OscConfig+0xb0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0x98>
 800313a:	4b7f      	ldr	r3, [pc, #508]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a7e      	ldr	r2, [pc, #504]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b7c      	ldr	r3, [pc, #496]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a7b      	ldr	r2, [pc, #492]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0xb0>
 8003154:	4b78      	ldr	r3, [pc, #480]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a77      	ldr	r2, [pc, #476]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b75      	ldr	r3, [pc, #468]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a74      	ldr	r2, [pc, #464]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fd fe3e 	bl	8000df4 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7fd fe3a 	bl	8000df4 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	@ 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e29e      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318e:	4b6a      	ldr	r3, [pc, #424]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0xc0>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fd fe2a 	bl	8000df4 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fd fe26 	bl	8000df4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	@ 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e28a      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b6:	4b60      	ldr	r3, [pc, #384]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0xe8>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d075      	beq.n	80032be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d2:	4b59      	ldr	r3, [pc, #356]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031dc:	4b56      	ldr	r3, [pc, #344]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b0c      	cmp	r3, #12
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_OscConfig+0x136>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d002      	beq.n	80031f8 <HAL_RCC_OscConfig+0x13c>
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d11f      	bne.n	8003238 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_OscConfig+0x154>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e25d      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003210:	4b49      	ldr	r3, [pc, #292]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	4946      	ldr	r1, [pc, #280]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003224:	4b45      	ldr	r3, [pc, #276]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fd97 	bl	8000d5c <HAL_InitTick>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d043      	beq.n	80032bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e249      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d023      	beq.n	8003288 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b3d      	ldr	r3, [pc, #244]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a3c      	ldr	r2, [pc, #240]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fd fdd2 	bl	8000df4 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003254:	f7fd fdce 	bl	8000df4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e232      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003266:	4b34      	ldr	r3, [pc, #208]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b31      	ldr	r3, [pc, #196]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	492d      	ldr	r1, [pc, #180]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
 8003286:	e01a      	b.n	80032be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003288:	4b2b      	ldr	r3, [pc, #172]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2a      	ldr	r2, [pc, #168]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 800328e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fd fdae 	bl	8000df4 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329c:	f7fd fdaa 	bl	8000df4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e20e      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032ae:	4b22      	ldr	r3, [pc, #136]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1e0>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d041      	beq.n	800334e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01c      	beq.n	800330c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80032d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d8:	4a17      	ldr	r2, [pc, #92]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fd fd87 	bl	8000df4 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ea:	f7fd fd83 	bl	8000df4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e1e7      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 80032fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ef      	beq.n	80032ea <HAL_RCC_OscConfig+0x22e>
 800330a:	e020      	b.n	800334e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330c:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 800330e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003312:	4a09      	ldr	r2, [pc, #36]	@ (8003338 <HAL_RCC_OscConfig+0x27c>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fd fd6a 	bl	8000df4 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003322:	e00d      	b.n	8003340 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003324:	f7fd fd66 	bl	8000df4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d906      	bls.n	8003340 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1ca      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003340:	4b8c      	ldr	r3, [pc, #560]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ea      	bne.n	8003324 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80a6 	beq.w	80034a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335c:	2300      	movs	r3, #0
 800335e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003360:	4b84      	ldr	r3, [pc, #528]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_OscConfig+0x2b4>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x2b6>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	4b7f      	ldr	r3, [pc, #508]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	4a7e      	ldr	r2, [pc, #504]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	@ 0x58
 8003382:	4b7c      	ldr	r3, [pc, #496]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800338e:	2301      	movs	r3, #1
 8003390:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003392:	4b79      	ldr	r3, [pc, #484]	@ (8003578 <HAL_RCC_OscConfig+0x4bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d118      	bne.n	80033d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800339e:	4b76      	ldr	r3, [pc, #472]	@ (8003578 <HAL_RCC_OscConfig+0x4bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a75      	ldr	r2, [pc, #468]	@ (8003578 <HAL_RCC_OscConfig+0x4bc>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033aa:	f7fd fd23 	bl	8000df4 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b2:	f7fd fd1f 	bl	8000df4 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e183      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003578 <HAL_RCC_OscConfig+0x4bc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d108      	bne.n	80033ea <HAL_RCC_OscConfig+0x32e>
 80033d8:	4b66      	ldr	r3, [pc, #408]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	4a65      	ldr	r2, [pc, #404]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033e8:	e024      	b.n	8003434 <HAL_RCC_OscConfig+0x378>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d110      	bne.n	8003414 <HAL_RCC_OscConfig+0x358>
 80033f2:	4b60      	ldr	r3, [pc, #384]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80033fa:	f043 0304 	orr.w	r3, r3, #4
 80033fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003402:	4b5c      	ldr	r3, [pc, #368]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003408:	4a5a      	ldr	r2, [pc, #360]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003412:	e00f      	b.n	8003434 <HAL_RCC_OscConfig+0x378>
 8003414:	4b57      	ldr	r3, [pc, #348]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	4a56      	ldr	r2, [pc, #344]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003424:	4b53      	ldr	r3, [pc, #332]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	4a52      	ldr	r2, [pc, #328]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fd fcda 	bl	8000df4 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fd fcd6 	bl	8000df4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e138      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345a:	4b46      	ldr	r3, [pc, #280]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ed      	beq.n	8003444 <HAL_RCC_OscConfig+0x388>
 8003468:	e015      	b.n	8003496 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346a:	f7fd fcc3 	bl	8000df4 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fd fcbf 	bl	8000df4 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e121      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003488:	4b3a      	ldr	r3, [pc, #232]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ed      	bne.n	8003472 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003496:	7ffb      	ldrb	r3, [r7, #31]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349c:	4b35      	ldr	r3, [pc, #212]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	4a34      	ldr	r2, [pc, #208]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d03c      	beq.n	800352e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80034be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fd fc92 	bl	8000df4 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d4:	f7fd fc8e 	bl	8000df4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0f2      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034e6:	4b23      	ldr	r3, [pc, #140]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80034e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ef      	beq.n	80034d4 <HAL_RCC_OscConfig+0x418>
 80034f4:	e01b      	b.n	800352e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80034f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fd fc75 	bl	8000df4 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800350e:	f7fd fc71 	bl	8000df4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0d5      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003520:	4b14      	ldr	r3, [pc, #80]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003522:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ef      	bne.n	800350e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80c9 	beq.w	80036ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003538:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b0c      	cmp	r3, #12
 8003542:	f000 8083 	beq.w	800364c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d15e      	bne.n	800360c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a08      	ldr	r2, [pc, #32]	@ (8003574 <HAL_RCC_OscConfig+0x4b8>)
 8003554:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd fc4b 	bl	8000df4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003560:	e00c      	b.n	800357c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003562:	f7fd fc47 	bl	8000df4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d905      	bls.n	800357c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0ab      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
 8003574:	40021000 	.word	0x40021000
 8003578:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357c:	4b55      	ldr	r3, [pc, #340]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ec      	bne.n	8003562 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003588:	4b52      	ldr	r3, [pc, #328]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	4b52      	ldr	r3, [pc, #328]	@ (80036d8 <HAL_RCC_OscConfig+0x61c>)
 800358e:	4013      	ands	r3, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6a11      	ldr	r1, [r2, #32]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003598:	3a01      	subs	r2, #1
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	4311      	orrs	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035a2:	0212      	lsls	r2, r2, #8
 80035a4:	4311      	orrs	r1, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035aa:	0852      	lsrs	r2, r2, #1
 80035ac:	3a01      	subs	r2, #1
 80035ae:	0552      	lsls	r2, r2, #21
 80035b0:	4311      	orrs	r1, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035b6:	0852      	lsrs	r2, r2, #1
 80035b8:	3a01      	subs	r2, #1
 80035ba:	0652      	lsls	r2, r2, #25
 80035bc:	4311      	orrs	r1, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035c2:	06d2      	lsls	r2, r2, #27
 80035c4:	430a      	orrs	r2, r1
 80035c6:	4943      	ldr	r1, [pc, #268]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035cc:	4b41      	ldr	r3, [pc, #260]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a40      	ldr	r2, [pc, #256]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 80035d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d8:	4b3e      	ldr	r3, [pc, #248]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a3d      	ldr	r2, [pc, #244]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 80035de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fd fc06 	bl	8000df4 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fd fc02 	bl	8000df4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e066      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	4b35      	ldr	r3, [pc, #212]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x530>
 800360a:	e05e      	b.n	80036ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b31      	ldr	r3, [pc, #196]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a30      	ldr	r2, [pc, #192]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 8003612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fd fbec 	bl	8000df4 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7fd fbe8 	bl	8000df4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e04c      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003632:	4b28      	ldr	r3, [pc, #160]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800363e:	4b25      	ldr	r3, [pc, #148]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	4924      	ldr	r1, [pc, #144]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 8003644:	4b25      	ldr	r3, [pc, #148]	@ (80036dc <HAL_RCC_OscConfig+0x620>)
 8003646:	4013      	ands	r3, r2
 8003648:	60cb      	str	r3, [r1, #12]
 800364a:	e03e      	b.n	80036ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e039      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003658:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <HAL_RCC_OscConfig+0x618>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 0203 	and.w	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	429a      	cmp	r2, r3
 800366a:	d12c      	bne.n	80036c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	3b01      	subs	r3, #1
 8003678:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d123      	bne.n	80036c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d11b      	bne.n	80036c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003698:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d113      	bne.n	80036c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d109      	bne.n	80036c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	3b01      	subs	r3, #1
 80036c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	019f800c 	.word	0x019f800c
 80036dc:	feeefffc 	.word	0xfeeefffc

080036e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e11e      	b.n	8003936 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b91      	ldr	r3, [pc, #580]	@ (8003940 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d910      	bls.n	8003728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b8e      	ldr	r3, [pc, #568]	@ (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 020f 	bic.w	r2, r3, #15
 800370e:	498c      	ldr	r1, [pc, #560]	@ (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b8a      	ldr	r3, [pc, #552]	@ (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e106      	b.n	8003936 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d073      	beq.n	800381c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d129      	bne.n	8003790 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373c:	4b81      	ldr	r3, [pc, #516]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0f4      	b.n	8003936 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800374c:	f000 f99e 	bl	8003a8c <RCC_GetSysClockFreqFromPLLSource>
 8003750:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4a7c      	ldr	r2, [pc, #496]	@ (8003948 <HAL_RCC_ClockConfig+0x268>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d93f      	bls.n	80037da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800375a:	4b7a      	ldr	r3, [pc, #488]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800376e:	2b00      	cmp	r3, #0
 8003770:	d033      	beq.n	80037da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003776:	2b00      	cmp	r3, #0
 8003778:	d12f      	bne.n	80037da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800377a:	4b72      	ldr	r3, [pc, #456]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003782:	4a70      	ldr	r2, [pc, #448]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 8003784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003788:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e024      	b.n	80037da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003798:	4b6a      	ldr	r3, [pc, #424]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0c6      	b.n	8003936 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0be      	b.n	8003936 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037b8:	f000 f8ce 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4a61      	ldr	r2, [pc, #388]	@ (8003948 <HAL_RCC_ClockConfig+0x268>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d909      	bls.n	80037da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 80037d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037d6:	2380      	movs	r3, #128	@ 0x80
 80037d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b5a      	ldr	r3, [pc, #360]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4957      	ldr	r1, [pc, #348]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fd fb02 	bl	8000df4 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fd fafe 	bl	8000df4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e095      	b.n	8003936 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b4e      	ldr	r3, [pc, #312]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d023      	beq.n	8003870 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003834:	4b43      	ldr	r3, [pc, #268]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a42      	ldr	r2, [pc, #264]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800383a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800383e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800384c:	4b3d      	ldr	r3, [pc, #244]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003854:	4a3b      	ldr	r2, [pc, #236]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 8003856:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800385a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385c:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4936      	ldr	r1, [pc, #216]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
 800386e:	e008      	b.n	8003882 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b80      	cmp	r3, #128	@ 0x80
 8003874:	d105      	bne.n	8003882 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003876:	4b33      	ldr	r3, [pc, #204]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4a32      	ldr	r2, [pc, #200]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 800387c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003880:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003882:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d21d      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003890:	4b2b      	ldr	r3, [pc, #172]	@ (8003940 <HAL_RCC_ClockConfig+0x260>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 020f 	bic.w	r2, r3, #15
 8003898:	4929      	ldr	r1, [pc, #164]	@ (8003940 <HAL_RCC_ClockConfig+0x260>)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038a0:	f7fd faa8 	bl	8000df4 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fd faa4 	bl	8000df4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e03b      	b.n	8003936 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <HAL_RCC_ClockConfig+0x260>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1ed      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4917      	ldr	r1, [pc, #92]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f6:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	490f      	ldr	r1, [pc, #60]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800390a:	f000 f825 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <HAL_RCC_ClockConfig+0x264>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	490c      	ldr	r1, [pc, #48]	@ (800394c <HAL_RCC_ClockConfig+0x26c>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	fa22 f303 	lsr.w	r3, r2, r3
 8003926:	4a0a      	ldr	r2, [pc, #40]	@ (8003950 <HAL_RCC_ClockConfig+0x270>)
 8003928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800392a:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <HAL_RCC_ClockConfig+0x274>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fa14 	bl	8000d5c <HAL_InitTick>
 8003934:	4603      	mov	r3, r0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40022000 	.word	0x40022000
 8003944:	40021000 	.word	0x40021000
 8003948:	04c4b400 	.word	0x04c4b400
 800394c:	080055d8 	.word	0x080055d8
 8003950:	20000000 	.word	0x20000000
 8003954:	20000004 	.word	0x20000004

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800395e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b04      	cmp	r3, #4
 8003968:	d102      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800396a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e047      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003970:	4b27      	ldr	r3, [pc, #156]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d102      	bne.n	8003982 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800397c:	4b26      	ldr	r3, [pc, #152]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e03e      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003982:	4b23      	ldr	r3, [pc, #140]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d136      	bne.n	80039fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800398e:	4b20      	ldr	r3, [pc, #128]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003998:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3301      	adds	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d10c      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	4a16      	ldr	r2, [pc, #88]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b6:	68d2      	ldr	r2, [r2, #12]
 80039b8:	0a12      	lsrs	r2, r2, #8
 80039ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	617b      	str	r3, [r7, #20]
      break;
 80039c4:	e00c      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039c6:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	4a10      	ldr	r2, [pc, #64]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	0a12      	lsrs	r2, r2, #8
 80039d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
      break;
 80039de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0e5b      	lsrs	r3, r3, #25
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	3301      	adds	r3, #1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	e001      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a00:	693b      	ldr	r3, [r7, #16]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	00f42400 	.word	0x00f42400
 8003a18:	016e3600 	.word	0x016e3600

08003a1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a20:	4b03      	ldr	r3, [pc, #12]	@ (8003a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000000 	.word	0x20000000

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a38:	f7ff fff0 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4904      	ldr	r1, [pc, #16]	@ (8003a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	080055e8 	.word	0x080055e8

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a64:	f7ff ffda 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0adb      	lsrs	r3, r3, #11
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4904      	ldr	r1, [pc, #16]	@ (8003a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	080055e8 	.word	0x080055e8

08003a8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d10c      	bne.n	8003aca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab0:	4a17      	ldr	r2, [pc, #92]	@ (8003b10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	4a14      	ldr	r2, [pc, #80]	@ (8003b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aba:	68d2      	ldr	r2, [r2, #12]
 8003abc:	0a12      	lsrs	r2, r2, #8
 8003abe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	617b      	str	r3, [r7, #20]
    break;
 8003ac8:	e00c      	b.n	8003ae4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aca:	4a12      	ldr	r2, [pc, #72]	@ (8003b14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8003b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	0a12      	lsrs	r2, r2, #8
 8003ad8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]
    break;
 8003ae2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae4:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	0e5b      	lsrs	r3, r3, #25
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003afe:	687b      	ldr	r3, [r7, #4]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	016e3600 	.word	0x016e3600
 8003b14:	00f42400 	.word	0x00f42400

08003b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b20:	2300      	movs	r3, #0
 8003b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b24:	2300      	movs	r3, #0
 8003b26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8098 	beq.w	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b36:	2300      	movs	r3, #0
 8003b38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3a:	4b43      	ldr	r3, [pc, #268]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10d      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b46:	4b40      	ldr	r3, [pc, #256]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b52:	4b3d      	ldr	r3, [pc, #244]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b62:	4b3a      	ldr	r3, [pc, #232]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a39      	ldr	r2, [pc, #228]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b6e:	f7fd f941 	bl	8000df4 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b74:	e009      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b76:	f7fd f93d 	bl	8000df4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d902      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	74fb      	strb	r3, [r7, #19]
        break;
 8003b88:	e005      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b8a:	4b30      	ldr	r3, [pc, #192]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ef      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d159      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01e      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d019      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bb8:	4b23      	ldr	r3, [pc, #140]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bc4:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bca:	4a1f      	ldr	r2, [pc, #124]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bda:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003be4:	4a18      	ldr	r2, [pc, #96]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fd f8fd 	bl	8000df4 <HAL_GetTick>
 8003bfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfc:	e00b      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fd f8f9 	bl	8000df4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d902      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	74fb      	strb	r3, [r7, #19]
            break;
 8003c14:	e006      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c16:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ec      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10b      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c2a:	4b07      	ldr	r3, [pc, #28]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c38:	4903      	ldr	r1, [pc, #12]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c40:	e008      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	74bb      	strb	r3, [r7, #18]
 8003c46:	e005      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c54:	7c7b      	ldrb	r3, [r7, #17]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5e:	4aa6      	ldr	r2, [pc, #664]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c72:	4ba1      	ldr	r3, [pc, #644]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f023 0203 	bic.w	r2, r3, #3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	499d      	ldr	r1, [pc, #628]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c94:	4b98      	ldr	r3, [pc, #608]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9a:	f023 020c 	bic.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	4995      	ldr	r1, [pc, #596]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cb6:	4b90      	ldr	r3, [pc, #576]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	498c      	ldr	r1, [pc, #560]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cd8:	4b87      	ldr	r3, [pc, #540]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	4984      	ldr	r1, [pc, #528]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	497b      	ldr	r1, [pc, #492]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d1c:	4b76      	ldr	r3, [pc, #472]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	4973      	ldr	r1, [pc, #460]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	496a      	ldr	r1, [pc, #424]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d60:	4b65      	ldr	r3, [pc, #404]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4962      	ldr	r1, [pc, #392]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d82:	4b5d      	ldr	r3, [pc, #372]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	4959      	ldr	r1, [pc, #356]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003da4:	4b54      	ldr	r3, [pc, #336]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db2:	4951      	ldr	r1, [pc, #324]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dc6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dcc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	4948      	ldr	r1, [pc, #288]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de8:	4b43      	ldr	r3, [pc, #268]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	4940      	ldr	r1, [pc, #256]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e06:	d105      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e08:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d015      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e20:	4b35      	ldr	r3, [pc, #212]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2e:	4932      	ldr	r1, [pc, #200]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e40:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e4a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e58:	4b27      	ldr	r3, [pc, #156]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e66:	4924      	ldr	r1, [pc, #144]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e76:	d105      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e78:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d015      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e90:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9e:	4916      	ldr	r1, [pc, #88]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eae:	d105      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a10      	ldr	r2, [pc, #64]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d019      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	4908      	ldr	r1, [pc, #32]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ee6:	d109      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a02      	ldr	r2, [pc, #8]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ef2:	60d3      	str	r3, [r2, #12]
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f08:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	4926      	ldr	r1, [pc, #152]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f26:	d105      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f28:	4b21      	ldr	r3, [pc, #132]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f32:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f40:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4e:	4918      	ldr	r1, [pc, #96]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f60:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a12      	ldr	r2, [pc, #72]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f78:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f86:	490a      	ldr	r1, [pc, #40]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e097      	b.n	80040f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fc fdd3 	bl	8000b88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003ff8:	f023 0307 	bic.w	r3, r3, #7
 8003ffc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 fa89 	bl	8004520 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	4313      	orrs	r3, r2
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004054:	f023 030c 	bic.w	r3, r3, #12
 8004058:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004060:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	4313      	orrs	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	011a      	lsls	r2, r3, #4
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	031b      	lsls	r3, r3, #12
 8004084:	4313      	orrs	r3, r2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	4313      	orrs	r3, r2
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004110:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004118:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004120:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004128:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d110      	bne.n	8004152 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d102      	bne.n	800413c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004136:	7b7b      	ldrb	r3, [r7, #13]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d001      	beq.n	8004140 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e069      	b.n	8004214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004150:	e031      	b.n	80041b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d110      	bne.n	800417a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d102      	bne.n	8004164 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800415e:	7b3b      	ldrb	r3, [r7, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d001      	beq.n	8004168 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e055      	b.n	8004214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004178:	e01d      	b.n	80041b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d108      	bne.n	8004192 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004180:	7bbb      	ldrb	r3, [r7, #14]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004186:	7b7b      	ldrb	r3, [r7, #13]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d102      	bne.n	8004192 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800418c:	7b3b      	ldrb	r3, [r7, #12]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e03e      	b.n	8004214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_TIM_Encoder_Start+0xc4>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d008      	beq.n	80041d4 <HAL_TIM_Encoder_Start+0xd4>
 80041c2:	e00f      	b.n	80041e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2201      	movs	r2, #1
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fa5b 	bl	8004688 <TIM_CCxChannelCmd>
      break;
 80041d2:	e016      	b.n	8004202 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	2104      	movs	r1, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fa53 	bl	8004688 <TIM_CCxChannelCmd>
      break;
 80041e2:	e00e      	b.n	8004202 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fa4b 	bl	8004688 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	2104      	movs	r1, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fa44 	bl	8004688 <TIM_CCxChannelCmd>
      break;
 8004200:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d020      	beq.n	8004280 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01b      	beq.n	8004280 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0202 	mvn.w	r2, #2
 8004250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f93b 	bl	80044e2 <HAL_TIM_IC_CaptureCallback>
 800426c:	e005      	b.n	800427a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f92d 	bl	80044ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f93e 	bl	80044f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d020      	beq.n	80042cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01b      	beq.n	80042cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0204 	mvn.w	r2, #4
 800429c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f915 	bl	80044e2 <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f907 	bl	80044ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f918 	bl	80044f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d020      	beq.n	8004318 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01b      	beq.n	8004318 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0208 	mvn.w	r2, #8
 80042e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2204      	movs	r2, #4
 80042ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8ef 	bl	80044e2 <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8e1 	bl	80044ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f8f2 	bl	80044f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	d020      	beq.n	8004364 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0210 	mvn.w	r2, #16
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2208      	movs	r2, #8
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8c9 	bl	80044e2 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8bb 	bl	80044ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f8cc 	bl	80044f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0201 	mvn.w	r2, #1
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f899 	bl	80044ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa2f 	bl	8004814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00c      	beq.n	80043da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fa27 	bl	8004828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00c      	beq.n	80043fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f886 	bl	800450a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00c      	beq.n	8004422 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0220 	mvn.w	r2, #32
 800441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f9ef 	bl	8004800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00c      	beq.n	8004446 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800443e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f9fb 	bl	800483c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f9f3 	bl	8004850 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f9eb 	bl	8004864 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00c      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80044aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f9e3 	bl	8004878 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a4c      	ldr	r2, [pc, #304]	@ (8004664 <TIM_Base_SetConfig+0x144>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d017      	beq.n	8004568 <TIM_Base_SetConfig+0x48>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453e:	d013      	beq.n	8004568 <TIM_Base_SetConfig+0x48>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a49      	ldr	r2, [pc, #292]	@ (8004668 <TIM_Base_SetConfig+0x148>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00f      	beq.n	8004568 <TIM_Base_SetConfig+0x48>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a48      	ldr	r2, [pc, #288]	@ (800466c <TIM_Base_SetConfig+0x14c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00b      	beq.n	8004568 <TIM_Base_SetConfig+0x48>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a47      	ldr	r2, [pc, #284]	@ (8004670 <TIM_Base_SetConfig+0x150>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d007      	beq.n	8004568 <TIM_Base_SetConfig+0x48>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a46      	ldr	r2, [pc, #280]	@ (8004674 <TIM_Base_SetConfig+0x154>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d003      	beq.n	8004568 <TIM_Base_SetConfig+0x48>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a45      	ldr	r2, [pc, #276]	@ (8004678 <TIM_Base_SetConfig+0x158>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d108      	bne.n	800457a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a39      	ldr	r2, [pc, #228]	@ (8004664 <TIM_Base_SetConfig+0x144>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d023      	beq.n	80045ca <TIM_Base_SetConfig+0xaa>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004588:	d01f      	beq.n	80045ca <TIM_Base_SetConfig+0xaa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a36      	ldr	r2, [pc, #216]	@ (8004668 <TIM_Base_SetConfig+0x148>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01b      	beq.n	80045ca <TIM_Base_SetConfig+0xaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a35      	ldr	r2, [pc, #212]	@ (800466c <TIM_Base_SetConfig+0x14c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d017      	beq.n	80045ca <TIM_Base_SetConfig+0xaa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a34      	ldr	r2, [pc, #208]	@ (8004670 <TIM_Base_SetConfig+0x150>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <TIM_Base_SetConfig+0xaa>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a33      	ldr	r2, [pc, #204]	@ (8004674 <TIM_Base_SetConfig+0x154>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_Base_SetConfig+0xaa>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a33      	ldr	r2, [pc, #204]	@ (800467c <TIM_Base_SetConfig+0x15c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0xaa>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a32      	ldr	r2, [pc, #200]	@ (8004680 <TIM_Base_SetConfig+0x160>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0xaa>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a31      	ldr	r2, [pc, #196]	@ (8004684 <TIM_Base_SetConfig+0x164>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0xaa>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004678 <TIM_Base_SetConfig+0x158>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a18      	ldr	r2, [pc, #96]	@ (8004664 <TIM_Base_SetConfig+0x144>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d013      	beq.n	8004630 <TIM_Base_SetConfig+0x110>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a1a      	ldr	r2, [pc, #104]	@ (8004674 <TIM_Base_SetConfig+0x154>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00f      	beq.n	8004630 <TIM_Base_SetConfig+0x110>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <TIM_Base_SetConfig+0x15c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00b      	beq.n	8004630 <TIM_Base_SetConfig+0x110>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a19      	ldr	r2, [pc, #100]	@ (8004680 <TIM_Base_SetConfig+0x160>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d007      	beq.n	8004630 <TIM_Base_SetConfig+0x110>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a18      	ldr	r2, [pc, #96]	@ (8004684 <TIM_Base_SetConfig+0x164>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d003      	beq.n	8004630 <TIM_Base_SetConfig+0x110>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a13      	ldr	r2, [pc, #76]	@ (8004678 <TIM_Base_SetConfig+0x158>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d103      	bne.n	8004638 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b01      	cmp	r3, #1
 8004648:	d105      	bne.n	8004656 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f023 0201 	bic.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	611a      	str	r2, [r3, #16]
  }
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40012c00 	.word	0x40012c00
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40000c00 	.word	0x40000c00
 8004674:	40013400 	.word	0x40013400
 8004678:	40015000 	.word	0x40015000
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2201      	movs	r2, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	fa01 f303 	lsl.w	r3, r1, r3
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e074      	b.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a34      	ldr	r2, [pc, #208]	@ (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a33      	ldr	r2, [pc, #204]	@ (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a31      	ldr	r2, [pc, #196]	@ (80047ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004730:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a21      	ldr	r2, [pc, #132]	@ (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d022      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476c:	d01d      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1f      	ldr	r2, [pc, #124]	@ (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d018      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1d      	ldr	r2, [pc, #116]	@ (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a15      	ldr	r2, [pc, #84]	@ (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a11      	ldr	r2, [pc, #68]	@ (80047ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10c      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	40013400 	.word	0x40013400
 80047ec:	40015000 	.word	0x40015000
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	40014000 	.word	0x40014000

08004800 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e042      	b.n	8004924 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7fc f911 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2224      	movs	r2, #36	@ 0x24
 80048ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb24 	bl	8004f24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f825 	bl	800492c <UART_SetConfig>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e01b      	b.n	8004924 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800490a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fba3 	bl	8005068 <UART_CheckIdleState>
 8004922:	4603      	mov	r3, r0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800492c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004930:	b08c      	sub	sp, #48	@ 0x30
 8004932:	af00      	add	r7, sp, #0
 8004934:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	431a      	orrs	r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	431a      	orrs	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	4313      	orrs	r3, r2
 8004952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4baa      	ldr	r3, [pc, #680]	@ (8004c04 <UART_SetConfig+0x2d8>)
 800495c:	4013      	ands	r3, r2
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004964:	430b      	orrs	r3, r1
 8004966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a9f      	ldr	r2, [pc, #636]	@ (8004c08 <UART_SetConfig+0x2dc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004994:	4313      	orrs	r3, r2
 8004996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80049a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	f023 010f 	bic.w	r1, r3, #15
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a90      	ldr	r2, [pc, #576]	@ (8004c0c <UART_SetConfig+0x2e0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d125      	bne.n	8004a1c <UART_SetConfig+0xf0>
 80049d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004c10 <UART_SetConfig+0x2e4>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d81a      	bhi.n	8004a14 <UART_SetConfig+0xe8>
 80049de:	a201      	add	r2, pc, #4	@ (adr r2, 80049e4 <UART_SetConfig+0xb8>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	080049f5 	.word	0x080049f5
 80049e8:	08004a05 	.word	0x08004a05
 80049ec:	080049fd 	.word	0x080049fd
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fa:	e116      	b.n	8004c2a <UART_SetConfig+0x2fe>
 80049fc:	2302      	movs	r3, #2
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a02:	e112      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0a:	e10e      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a12:	e10a      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a1a:	e106      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a7c      	ldr	r2, [pc, #496]	@ (8004c14 <UART_SetConfig+0x2e8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d138      	bne.n	8004a98 <UART_SetConfig+0x16c>
 8004a26:	4b7a      	ldr	r3, [pc, #488]	@ (8004c10 <UART_SetConfig+0x2e4>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	d82d      	bhi.n	8004a90 <UART_SetConfig+0x164>
 8004a34:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <UART_SetConfig+0x110>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a91 	.word	0x08004a91
 8004a44:	08004a91 	.word	0x08004a91
 8004a48:	08004a91 	.word	0x08004a91
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004a91 	.word	0x08004a91
 8004a54:	08004a91 	.word	0x08004a91
 8004a58:	08004a91 	.word	0x08004a91
 8004a5c:	08004a79 	.word	0x08004a79
 8004a60:	08004a91 	.word	0x08004a91
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a89 	.word	0x08004a89
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a76:	e0d8      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7e:	e0d4      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004a80:	2304      	movs	r3, #4
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a86:	e0d0      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004a88:	2308      	movs	r3, #8
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a8e:	e0cc      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004a90:	2310      	movs	r3, #16
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a96:	e0c8      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a5e      	ldr	r2, [pc, #376]	@ (8004c18 <UART_SetConfig+0x2ec>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d125      	bne.n	8004aee <UART_SetConfig+0x1c2>
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c10 <UART_SetConfig+0x2e4>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004aac:	2b30      	cmp	r3, #48	@ 0x30
 8004aae:	d016      	beq.n	8004ade <UART_SetConfig+0x1b2>
 8004ab0:	2b30      	cmp	r3, #48	@ 0x30
 8004ab2:	d818      	bhi.n	8004ae6 <UART_SetConfig+0x1ba>
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d00a      	beq.n	8004ace <UART_SetConfig+0x1a2>
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d814      	bhi.n	8004ae6 <UART_SetConfig+0x1ba>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <UART_SetConfig+0x19a>
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d008      	beq.n	8004ad6 <UART_SetConfig+0x1aa>
 8004ac4:	e00f      	b.n	8004ae6 <UART_SetConfig+0x1ba>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004acc:	e0ad      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad4:	e0a9      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004adc:	e0a5      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004ade:	2308      	movs	r3, #8
 8004ae0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae4:	e0a1      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004ae6:	2310      	movs	r3, #16
 8004ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aec:	e09d      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a4a      	ldr	r2, [pc, #296]	@ (8004c1c <UART_SetConfig+0x2f0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d125      	bne.n	8004b44 <UART_SetConfig+0x218>
 8004af8:	4b45      	ldr	r3, [pc, #276]	@ (8004c10 <UART_SetConfig+0x2e4>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b04:	d016      	beq.n	8004b34 <UART_SetConfig+0x208>
 8004b06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b08:	d818      	bhi.n	8004b3c <UART_SetConfig+0x210>
 8004b0a:	2b80      	cmp	r3, #128	@ 0x80
 8004b0c:	d00a      	beq.n	8004b24 <UART_SetConfig+0x1f8>
 8004b0e:	2b80      	cmp	r3, #128	@ 0x80
 8004b10:	d814      	bhi.n	8004b3c <UART_SetConfig+0x210>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <UART_SetConfig+0x1f0>
 8004b16:	2b40      	cmp	r3, #64	@ 0x40
 8004b18:	d008      	beq.n	8004b2c <UART_SetConfig+0x200>
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x210>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b22:	e082      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004b24:	2302      	movs	r3, #2
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2a:	e07e      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b32:	e07a      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b3a:	e076      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b42:	e072      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a35      	ldr	r2, [pc, #212]	@ (8004c20 <UART_SetConfig+0x2f4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d12a      	bne.n	8004ba4 <UART_SetConfig+0x278>
 8004b4e:	4b30      	ldr	r3, [pc, #192]	@ (8004c10 <UART_SetConfig+0x2e4>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b5c:	d01a      	beq.n	8004b94 <UART_SetConfig+0x268>
 8004b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b62:	d81b      	bhi.n	8004b9c <UART_SetConfig+0x270>
 8004b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b68:	d00c      	beq.n	8004b84 <UART_SetConfig+0x258>
 8004b6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b6e:	d815      	bhi.n	8004b9c <UART_SetConfig+0x270>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <UART_SetConfig+0x250>
 8004b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b78:	d008      	beq.n	8004b8c <UART_SetConfig+0x260>
 8004b7a:	e00f      	b.n	8004b9c <UART_SetConfig+0x270>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b82:	e052      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004b84:	2302      	movs	r3, #2
 8004b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8a:	e04e      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b92:	e04a      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004b94:	2308      	movs	r3, #8
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b9a:	e046      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba2:	e042      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a17      	ldr	r2, [pc, #92]	@ (8004c08 <UART_SetConfig+0x2dc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d13a      	bne.n	8004c24 <UART_SetConfig+0x2f8>
 8004bae:	4b18      	ldr	r3, [pc, #96]	@ (8004c10 <UART_SetConfig+0x2e4>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bbc:	d01a      	beq.n	8004bf4 <UART_SetConfig+0x2c8>
 8004bbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bc2:	d81b      	bhi.n	8004bfc <UART_SetConfig+0x2d0>
 8004bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bc8:	d00c      	beq.n	8004be4 <UART_SetConfig+0x2b8>
 8004bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bce:	d815      	bhi.n	8004bfc <UART_SetConfig+0x2d0>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <UART_SetConfig+0x2b0>
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd8:	d008      	beq.n	8004bec <UART_SetConfig+0x2c0>
 8004bda:	e00f      	b.n	8004bfc <UART_SetConfig+0x2d0>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be2:	e022      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004be4:	2302      	movs	r3, #2
 8004be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bea:	e01e      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bf2:	e01a      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfa:	e016      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c02:	e012      	b.n	8004c2a <UART_SetConfig+0x2fe>
 8004c04:	cfff69f3 	.word	0xcfff69f3
 8004c08:	40008000 	.word	0x40008000
 8004c0c:	40013800 	.word	0x40013800
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40004400 	.word	0x40004400
 8004c18:	40004800 	.word	0x40004800
 8004c1c:	40004c00 	.word	0x40004c00
 8004c20:	40005000 	.word	0x40005000
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4aae      	ldr	r2, [pc, #696]	@ (8004ee8 <UART_SetConfig+0x5bc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	f040 8097 	bne.w	8004d64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d823      	bhi.n	8004c86 <UART_SetConfig+0x35a>
 8004c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c44 <UART_SetConfig+0x318>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c87 	.word	0x08004c87
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c87 	.word	0x08004c87
 8004c54:	08004c77 	.word	0x08004c77
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c87 	.word	0x08004c87
 8004c60:	08004c87 	.word	0x08004c87
 8004c64:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c68:	f7fe fee4 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8004c6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c6e:	e010      	b.n	8004c92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b9e      	ldr	r3, [pc, #632]	@ (8004eec <UART_SetConfig+0x5c0>)
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c74:	e00d      	b.n	8004c92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fe fe6f 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004c7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c7c:	e009      	b.n	8004c92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c84:	e005      	b.n	8004c92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8130 	beq.w	8004efa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	4a94      	ldr	r2, [pc, #592]	@ (8004ef0 <UART_SetConfig+0x5c4>)
 8004ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	4413      	add	r3, r2
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d305      	bcc.n	8004cca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d903      	bls.n	8004cd2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004cd0:	e113      	b.n	8004efa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	60fa      	str	r2, [r7, #12]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	4a84      	ldr	r2, [pc, #528]	@ (8004ef0 <UART_SetConfig+0x5c4>)
 8004ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cf4:	f7fb fa90 	bl	8000218 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	020b      	lsls	r3, r1, #8
 8004d0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d0e:	0202      	lsls	r2, r0, #8
 8004d10:	6979      	ldr	r1, [r7, #20]
 8004d12:	6849      	ldr	r1, [r1, #4]
 8004d14:	0849      	lsrs	r1, r1, #1
 8004d16:	2000      	movs	r0, #0
 8004d18:	460c      	mov	r4, r1
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	eb12 0804 	adds.w	r8, r2, r4
 8004d20:	eb43 0905 	adc.w	r9, r3, r5
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	469a      	mov	sl, r3
 8004d2c:	4693      	mov	fp, r2
 8004d2e:	4652      	mov	r2, sl
 8004d30:	465b      	mov	r3, fp
 8004d32:	4640      	mov	r0, r8
 8004d34:	4649      	mov	r1, r9
 8004d36:	f7fb fa6f 	bl	8000218 <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4613      	mov	r3, r2
 8004d40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d48:	d308      	bcc.n	8004d5c <UART_SetConfig+0x430>
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d50:	d204      	bcs.n	8004d5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a3a      	ldr	r2, [r7, #32]
 8004d58:	60da      	str	r2, [r3, #12]
 8004d5a:	e0ce      	b.n	8004efa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d62:	e0ca      	b.n	8004efa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d6c:	d166      	bne.n	8004e3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d827      	bhi.n	8004dc6 <UART_SetConfig+0x49a>
 8004d76:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <UART_SetConfig+0x450>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004db1 	.word	0x08004db1
 8004d88:	08004dc7 	.word	0x08004dc7
 8004d8c:	08004db7 	.word	0x08004db7
 8004d90:	08004dc7 	.word	0x08004dc7
 8004d94:	08004dc7 	.word	0x08004dc7
 8004d98:	08004dc7 	.word	0x08004dc7
 8004d9c:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da0:	f7fe fe48 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8004da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004da6:	e014      	b.n	8004dd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da8:	f7fe fe5a 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8004dac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dae:	e010      	b.n	8004dd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b4e      	ldr	r3, [pc, #312]	@ (8004eec <UART_SetConfig+0x5c0>)
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004db4:	e00d      	b.n	8004dd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db6:	f7fe fdcf 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004dba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dbc:	e009      	b.n	8004dd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dc4:	e005      	b.n	8004dd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8090 	beq.w	8004efa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	4a44      	ldr	r2, [pc, #272]	@ (8004ef0 <UART_SetConfig+0x5c4>)
 8004de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dec:	005a      	lsls	r2, r3, #1
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	441a      	add	r2, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	d916      	bls.n	8004e34 <UART_SetConfig+0x508>
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e0c:	d212      	bcs.n	8004e34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f023 030f 	bic.w	r3, r3, #15
 8004e16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	8bfb      	ldrh	r3, [r7, #30]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	8bfa      	ldrh	r2, [r7, #30]
 8004e30:	60da      	str	r2, [r3, #12]
 8004e32:	e062      	b.n	8004efa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e3a:	e05e      	b.n	8004efa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d828      	bhi.n	8004e96 <UART_SetConfig+0x56a>
 8004e44:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <UART_SetConfig+0x520>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e97 	.word	0x08004e97
 8004e5c:	08004e87 	.word	0x08004e87
 8004e60:	08004e97 	.word	0x08004e97
 8004e64:	08004e97 	.word	0x08004e97
 8004e68:	08004e97 	.word	0x08004e97
 8004e6c:	08004e8f 	.word	0x08004e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7fe fde0 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8004e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e76:	e014      	b.n	8004ea2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e78:	f7fe fdf2 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8004e7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e7e:	e010      	b.n	8004ea2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e80:	4b1a      	ldr	r3, [pc, #104]	@ (8004eec <UART_SetConfig+0x5c0>)
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e84:	e00d      	b.n	8004ea2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e86:	f7fe fd67 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004e8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e8c:	e009      	b.n	8004ea2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e94:	e005      	b.n	8004ea2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ea0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d028      	beq.n	8004efa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	4a10      	ldr	r2, [pc, #64]	@ (8004ef0 <UART_SetConfig+0x5c4>)
 8004eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	441a      	add	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	2b0f      	cmp	r3, #15
 8004ed0:	d910      	bls.n	8004ef4 <UART_SetConfig+0x5c8>
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed8:	d20c      	bcs.n	8004ef4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60da      	str	r2, [r3, #12]
 8004ee4:	e009      	b.n	8004efa <UART_SetConfig+0x5ce>
 8004ee6:	bf00      	nop
 8004ee8:	40008000 	.word	0x40008000
 8004eec:	00f42400 	.word	0x00f42400
 8004ef0:	080055f0 	.word	0x080055f0
      }
      else
      {
        ret = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f16:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3730      	adds	r7, #48	@ 0x30
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01a      	beq.n	800503a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005022:	d10a      	bne.n	800503a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b098      	sub	sp, #96	@ 0x60
 800506c:	af02      	add	r7, sp, #8
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005078:	f7fb febc 	bl	8000df4 <HAL_GetTick>
 800507c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b08      	cmp	r3, #8
 800508a:	d12f      	bne.n	80050ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800508c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005094:	2200      	movs	r2, #0
 8005096:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f88e 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d022      	beq.n	80050ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e6      	bne.n	80050a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e063      	b.n	80051b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d149      	bne.n	800518e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005102:	2200      	movs	r2, #0
 8005104:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f857 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d03c      	beq.n	800518e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	623b      	str	r3, [r7, #32]
   return(result);
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005128:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005132:	633b      	str	r3, [r7, #48]	@ 0x30
 8005134:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e6      	bne.n	8005114 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3308      	adds	r3, #8
 800514c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	60fb      	str	r3, [r7, #12]
   return(result);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f023 0301 	bic.w	r3, r3, #1
 800515c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3308      	adds	r3, #8
 8005164:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005166:	61fa      	str	r2, [r7, #28]
 8005168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	69b9      	ldr	r1, [r7, #24]
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	617b      	str	r3, [r7, #20]
   return(result);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e5      	bne.n	8005146 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e012      	b.n	80051b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3758      	adds	r7, #88	@ 0x58
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051cc:	e04f      	b.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d04b      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fb fe0d 	bl	8000df4 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <UART_WaitOnFlagUntilTimeout+0x30>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e04e      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d037      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b80      	cmp	r3, #128	@ 0x80
 8005202:	d034      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b40      	cmp	r3, #64	@ 0x40
 8005208:	d031      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b08      	cmp	r3, #8
 8005216:	d110      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2208      	movs	r2, #8
 800521e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f838 	bl	8005296 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2208      	movs	r2, #8
 800522a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e029      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005248:	d111      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f81e 	bl	8005296 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e00f      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4013      	ands	r3, r2
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	429a      	cmp	r2, r3
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	429a      	cmp	r2, r3
 800528a:	d0a0      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005296:	b480      	push	{r7}
 8005298:	b095      	sub	sp, #84	@ 0x54
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80052be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e6      	bne.n	800529e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3308      	adds	r3, #8
 80052d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	61fb      	str	r3, [r7, #28]
   return(result);
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3308      	adds	r3, #8
 80052f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e3      	bne.n	80052d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d118      	bne.n	8005342 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	60bb      	str	r3, [r7, #8]
   return(result);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	647b      	str	r3, [r7, #68]	@ 0x44
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	613b      	str	r3, [r7, #16]
   return(result);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005356:	bf00      	nop
 8005358:	3754      	adds	r7, #84	@ 0x54
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_UARTEx_DisableFifoMode+0x16>
 8005374:	2302      	movs	r3, #2
 8005376:	e027      	b.n	80053c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	@ 0x24
 8005384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80053a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e02d      	b.n	8005448 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	@ 0x24
 80053f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f84f 	bl	80054cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005464:	2302      	movs	r3, #2
 8005466:	e02d      	b.n	80054c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2224      	movs	r2, #36	@ 0x24
 8005474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f811 	bl	80054cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d108      	bne.n	80054ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054ec:	e031      	b.n	8005552 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054ee:	2308      	movs	r3, #8
 80054f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054f2:	2308      	movs	r3, #8
 80054f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	0e5b      	lsrs	r3, r3, #25
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	0f5b      	lsrs	r3, r3, #29
 800550e:	b2db      	uxtb	r3, r3
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005516:	7bbb      	ldrb	r3, [r7, #14]
 8005518:	7b3a      	ldrb	r2, [r7, #12]
 800551a:	4911      	ldr	r1, [pc, #68]	@ (8005560 <UARTEx_SetNbDataToProcess+0x94>)
 800551c:	5c8a      	ldrb	r2, [r1, r2]
 800551e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005522:	7b3a      	ldrb	r2, [r7, #12]
 8005524:	490f      	ldr	r1, [pc, #60]	@ (8005564 <UARTEx_SetNbDataToProcess+0x98>)
 8005526:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005528:	fb93 f3f2 	sdiv	r3, r3, r2
 800552c:	b29a      	uxth	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	7b7a      	ldrb	r2, [r7, #13]
 8005538:	4909      	ldr	r1, [pc, #36]	@ (8005560 <UARTEx_SetNbDataToProcess+0x94>)
 800553a:	5c8a      	ldrb	r2, [r1, r2]
 800553c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005540:	7b7a      	ldrb	r2, [r7, #13]
 8005542:	4908      	ldr	r1, [pc, #32]	@ (8005564 <UARTEx_SetNbDataToProcess+0x98>)
 8005544:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005546:	fb93 f3f2 	sdiv	r3, r3, r2
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	08005608 	.word	0x08005608
 8005564:	08005610 	.word	0x08005610

08005568 <memset>:
 8005568:	4402      	add	r2, r0
 800556a:	4603      	mov	r3, r0
 800556c:	4293      	cmp	r3, r2
 800556e:	d100      	bne.n	8005572 <memset+0xa>
 8005570:	4770      	bx	lr
 8005572:	f803 1b01 	strb.w	r1, [r3], #1
 8005576:	e7f9      	b.n	800556c <memset+0x4>

08005578 <__libc_init_array>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	4d0d      	ldr	r5, [pc, #52]	@ (80055b0 <__libc_init_array+0x38>)
 800557c:	4c0d      	ldr	r4, [pc, #52]	@ (80055b4 <__libc_init_array+0x3c>)
 800557e:	1b64      	subs	r4, r4, r5
 8005580:	10a4      	asrs	r4, r4, #2
 8005582:	2600      	movs	r6, #0
 8005584:	42a6      	cmp	r6, r4
 8005586:	d109      	bne.n	800559c <__libc_init_array+0x24>
 8005588:	4d0b      	ldr	r5, [pc, #44]	@ (80055b8 <__libc_init_array+0x40>)
 800558a:	4c0c      	ldr	r4, [pc, #48]	@ (80055bc <__libc_init_array+0x44>)
 800558c:	f000 f818 	bl	80055c0 <_init>
 8005590:	1b64      	subs	r4, r4, r5
 8005592:	10a4      	asrs	r4, r4, #2
 8005594:	2600      	movs	r6, #0
 8005596:	42a6      	cmp	r6, r4
 8005598:	d105      	bne.n	80055a6 <__libc_init_array+0x2e>
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a0:	4798      	blx	r3
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7ee      	b.n	8005584 <__libc_init_array+0xc>
 80055a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055aa:	4798      	blx	r3
 80055ac:	3601      	adds	r6, #1
 80055ae:	e7f2      	b.n	8005596 <__libc_init_array+0x1e>
 80055b0:	08005620 	.word	0x08005620
 80055b4:	08005620 	.word	0x08005620
 80055b8:	08005620 	.word	0x08005620
 80055bc:	08005624 	.word	0x08005624

080055c0 <_init>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr

080055cc <_fini>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr
