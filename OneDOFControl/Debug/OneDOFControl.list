
OneDOFControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003698  08003698  00004698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d8  080036d8  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  080036d8  080036d8  000046d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036e0  080036e0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e0  080036e0  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036e4  080036e4  000046e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080036e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000018  080036fc  00005018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080036fc  000050f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c116  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac7  00000000  00000000  0001115a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  00012c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072e  00000000  00000000  00013580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248a2  00000000  00000000  00013cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd3e  00000000  00000000  00038550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e91b5  00000000  00000000  0004428e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  0012d488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0012fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003680 	.word	0x08003680

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08003680 	.word	0x08003680

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b96a 	b.w	8000b70 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	460c      	mov	r4, r1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d14e      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c0:	4694      	mov	ip, r2
 80008c2:	458c      	cmp	ip, r1
 80008c4:	4686      	mov	lr, r0
 80008c6:	fab2 f282 	clz	r2, r2
 80008ca:	d962      	bls.n	8000992 <__udivmoddi4+0xde>
 80008cc:	b14a      	cbz	r2, 80008e2 <__udivmoddi4+0x2e>
 80008ce:	f1c2 0320 	rsb	r3, r2, #32
 80008d2:	4091      	lsls	r1, r2
 80008d4:	fa20 f303 	lsr.w	r3, r0, r3
 80008d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008dc:	4319      	orrs	r1, r3
 80008de:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e6:	fa1f f68c 	uxth.w	r6, ip
 80008ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb07 1114 	mls	r1, r7, r4, r1
 80008f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fa:	fb04 f106 	mul.w	r1, r4, r6
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f104 30ff 	add.w	r0, r4, #4294967295
 800090a:	f080 8112 	bcs.w	8000b32 <__udivmoddi4+0x27e>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 810f 	bls.w	8000b32 <__udivmoddi4+0x27e>
 8000914:	3c02      	subs	r4, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a59      	subs	r1, r3, r1
 800091a:	fa1f f38e 	uxth.w	r3, lr
 800091e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000922:	fb07 1110 	mls	r1, r7, r0, r1
 8000926:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800092a:	fb00 f606 	mul.w	r6, r0, r6
 800092e:	429e      	cmp	r6, r3
 8000930:	d90a      	bls.n	8000948 <__udivmoddi4+0x94>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f100 31ff 	add.w	r1, r0, #4294967295
 800093a:	f080 80fc 	bcs.w	8000b36 <__udivmoddi4+0x282>
 800093e:	429e      	cmp	r6, r3
 8000940:	f240 80f9 	bls.w	8000b36 <__udivmoddi4+0x282>
 8000944:	4463      	add	r3, ip
 8000946:	3802      	subs	r0, #2
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800094e:	2100      	movs	r1, #0
 8000950:	b11d      	cbz	r5, 800095a <__udivmoddi4+0xa6>
 8000952:	40d3      	lsrs	r3, r2
 8000954:	2200      	movs	r2, #0
 8000956:	e9c5 3200 	strd	r3, r2, [r5]
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d905      	bls.n	800096e <__udivmoddi4+0xba>
 8000962:	b10d      	cbz	r5, 8000968 <__udivmoddi4+0xb4>
 8000964:	e9c5 0100 	strd	r0, r1, [r5]
 8000968:	2100      	movs	r1, #0
 800096a:	4608      	mov	r0, r1
 800096c:	e7f5      	b.n	800095a <__udivmoddi4+0xa6>
 800096e:	fab3 f183 	clz	r1, r3
 8000972:	2900      	cmp	r1, #0
 8000974:	d146      	bne.n	8000a04 <__udivmoddi4+0x150>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xcc>
 800097a:	4290      	cmp	r0, r2
 800097c:	f0c0 80f0 	bcc.w	8000b60 <__udivmoddi4+0x2ac>
 8000980:	1a86      	subs	r6, r0, r2
 8000982:	eb64 0303 	sbc.w	r3, r4, r3
 8000986:	2001      	movs	r0, #1
 8000988:	2d00      	cmp	r5, #0
 800098a:	d0e6      	beq.n	800095a <__udivmoddi4+0xa6>
 800098c:	e9c5 6300 	strd	r6, r3, [r5]
 8000990:	e7e3      	b.n	800095a <__udivmoddi4+0xa6>
 8000992:	2a00      	cmp	r2, #0
 8000994:	f040 8090 	bne.w	8000ab8 <__udivmoddi4+0x204>
 8000998:	eba1 040c 	sub.w	r4, r1, ip
 800099c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a0:	fa1f f78c 	uxth.w	r7, ip
 80009a4:	2101      	movs	r1, #1
 80009a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80009aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ae:	fb08 4416 	mls	r4, r8, r6, r4
 80009b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009b6:	fb07 f006 	mul.w	r0, r7, r6
 80009ba:	4298      	cmp	r0, r3
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x11c>
 80009be:	eb1c 0303 	adds.w	r3, ip, r3
 80009c2:	f106 34ff 	add.w	r4, r6, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x11a>
 80009c8:	4298      	cmp	r0, r3
 80009ca:	f200 80cd 	bhi.w	8000b68 <__udivmoddi4+0x2b4>
 80009ce:	4626      	mov	r6, r4
 80009d0:	1a1c      	subs	r4, r3, r0
 80009d2:	fa1f f38e 	uxth.w	r3, lr
 80009d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009da:	fb08 4410 	mls	r4, r8, r0, r4
 80009de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009e2:	fb00 f707 	mul.w	r7, r0, r7
 80009e6:	429f      	cmp	r7, r3
 80009e8:	d908      	bls.n	80009fc <__udivmoddi4+0x148>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f100 34ff 	add.w	r4, r0, #4294967295
 80009f2:	d202      	bcs.n	80009fa <__udivmoddi4+0x146>
 80009f4:	429f      	cmp	r7, r3
 80009f6:	f200 80b0 	bhi.w	8000b5a <__udivmoddi4+0x2a6>
 80009fa:	4620      	mov	r0, r4
 80009fc:	1bdb      	subs	r3, r3, r7
 80009fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a02:	e7a5      	b.n	8000950 <__udivmoddi4+0x9c>
 8000a04:	f1c1 0620 	rsb	r6, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a0e:	431f      	orrs	r7, r3
 8000a10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a14:	fa04 f301 	lsl.w	r3, r4, r1
 8000a18:	ea43 030c 	orr.w	r3, r3, ip
 8000a1c:	40f4      	lsrs	r4, r6
 8000a1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a22:	0c38      	lsrs	r0, r7, #16
 8000a24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a28:	fbb4 fef0 	udiv	lr, r4, r0
 8000a2c:	fa1f fc87 	uxth.w	ip, r7
 8000a30:	fb00 441e 	mls	r4, r0, lr, r4
 8000a34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a38:	fb0e f90c 	mul.w	r9, lr, ip
 8000a3c:	45a1      	cmp	r9, r4
 8000a3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a42:	d90a      	bls.n	8000a5a <__udivmoddi4+0x1a6>
 8000a44:	193c      	adds	r4, r7, r4
 8000a46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a4a:	f080 8084 	bcs.w	8000b56 <__udivmoddi4+0x2a2>
 8000a4e:	45a1      	cmp	r9, r4
 8000a50:	f240 8081 	bls.w	8000b56 <__udivmoddi4+0x2a2>
 8000a54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a58:	443c      	add	r4, r7
 8000a5a:	eba4 0409 	sub.w	r4, r4, r9
 8000a5e:	fa1f f983 	uxth.w	r9, r3
 8000a62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a66:	fb00 4413 	mls	r4, r0, r3, r4
 8000a6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a72:	45a4      	cmp	ip, r4
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x1d2>
 8000a76:	193c      	adds	r4, r7, r4
 8000a78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a7c:	d267      	bcs.n	8000b4e <__udivmoddi4+0x29a>
 8000a7e:	45a4      	cmp	ip, r4
 8000a80:	d965      	bls.n	8000b4e <__udivmoddi4+0x29a>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	443c      	add	r4, r7
 8000a86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	429c      	cmp	r4, r3
 8000a94:	46ce      	mov	lr, r9
 8000a96:	469c      	mov	ip, r3
 8000a98:	d351      	bcc.n	8000b3e <__udivmoddi4+0x28a>
 8000a9a:	d04e      	beq.n	8000b3a <__udivmoddi4+0x286>
 8000a9c:	b155      	cbz	r5, 8000ab4 <__udivmoddi4+0x200>
 8000a9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000aa2:	eb64 040c 	sbc.w	r4, r4, ip
 8000aa6:	fa04 f606 	lsl.w	r6, r4, r6
 8000aaa:	40cb      	lsrs	r3, r1
 8000aac:	431e      	orrs	r6, r3
 8000aae:	40cc      	lsrs	r4, r1
 8000ab0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	e750      	b.n	800095a <__udivmoddi4+0xa6>
 8000ab8:	f1c2 0320 	rsb	r3, r2, #32
 8000abc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	430c      	orrs	r4, r1
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ad4:	fa1f f78c 	uxth.w	r7, ip
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae0:	0c23      	lsrs	r3, r4, #16
 8000ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae6:	fb00 f107 	mul.w	r1, r0, r7
 8000aea:	4299      	cmp	r1, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x24c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000af6:	d22c      	bcs.n	8000b52 <__udivmoddi4+0x29e>
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d92a      	bls.n	8000b52 <__udivmoddi4+0x29e>
 8000afc:	3802      	subs	r0, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b08:	fb08 3311 	mls	r3, r8, r1, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb01 f307 	mul.w	r3, r1, r7
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x276>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b20:	d213      	bcs.n	8000b4a <__udivmoddi4+0x296>
 8000b22:	42a3      	cmp	r3, r4
 8000b24:	d911      	bls.n	8000b4a <__udivmoddi4+0x296>
 8000b26:	3902      	subs	r1, #2
 8000b28:	4464      	add	r4, ip
 8000b2a:	1ae4      	subs	r4, r4, r3
 8000b2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b30:	e739      	b.n	80009a6 <__udivmoddi4+0xf2>
 8000b32:	4604      	mov	r4, r0
 8000b34:	e6f0      	b.n	8000918 <__udivmoddi4+0x64>
 8000b36:	4608      	mov	r0, r1
 8000b38:	e706      	b.n	8000948 <__udivmoddi4+0x94>
 8000b3a:	45c8      	cmp	r8, r9
 8000b3c:	d2ae      	bcs.n	8000a9c <__udivmoddi4+0x1e8>
 8000b3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b46:	3801      	subs	r0, #1
 8000b48:	e7a8      	b.n	8000a9c <__udivmoddi4+0x1e8>
 8000b4a:	4631      	mov	r1, r6
 8000b4c:	e7ed      	b.n	8000b2a <__udivmoddi4+0x276>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	e799      	b.n	8000a86 <__udivmoddi4+0x1d2>
 8000b52:	4630      	mov	r0, r6
 8000b54:	e7d4      	b.n	8000b00 <__udivmoddi4+0x24c>
 8000b56:	46d6      	mov	lr, sl
 8000b58:	e77f      	b.n	8000a5a <__udivmoddi4+0x1a6>
 8000b5a:	4463      	add	r3, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	e74d      	b.n	80009fc <__udivmoddi4+0x148>
 8000b60:	4606      	mov	r6, r0
 8000b62:	4623      	mov	r3, r4
 8000b64:	4608      	mov	r0, r1
 8000b66:	e70f      	b.n	8000988 <__udivmoddi4+0xd4>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	e730      	b.n	80009d0 <__udivmoddi4+0x11c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	0000      	movs	r0, r0
	...

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f000 fb75 	bl	800126e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f97a 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 fa0e 	bl	8000fa8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000b8c:	f000 f9c2 	bl	8000f14 <MX_LPUART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp =0;
	  if(timestamp < HAL_GetTick())
 8000b90:	f000 fbd2 	bl	8001338 <HAL_GetTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2200      	movs	r2, #0
 8000b98:	461c      	mov	r4, r3
 8000b9a:	4615      	mov	r5, r2
 8000b9c:	4bac      	ldr	r3, [pc, #688]	@ (8000e50 <main+0x2d8>)
 8000b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba2:	42a2      	cmp	r2, r4
 8000ba4:	41ab      	sbcs	r3, r5
 8000ba6:	d2f3      	bcs.n	8000b90 <main+0x18>
	  {
		  switch(state_Tra)
 8000ba8:	4baa      	ldr	r3, [pc, #680]	@ (8000e54 <main+0x2dc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	f200 812c 	bhi.w	8000e0a <main+0x292>
 8000bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb8 <main+0x40>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000bc9 	.word	0x08000bc9
 8000bbc:	08000c9d 	.word	0x08000c9d
 8000bc0:	08000d15 	.word	0x08000d15
 8000bc4:	08000de3 	.word	0x08000de3
		  	  		  {
		  	  		  case 0:
		  	  			  	q_Pos = Pos_Start + (Velo_Start*t)+(0.5*Max_Acc)*(t*t);
 8000bc8:	4ba3      	ldr	r3, [pc, #652]	@ (8000e58 <main+0x2e0>)
 8000bca:	ed93 7a00 	vldr	s14, [r3]
 8000bce:	4ba3      	ldr	r3, [pc, #652]	@ (8000e5c <main+0x2e4>)
 8000bd0:	edd3 7a00 	vldr	s15, [r3]
 8000bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bd8:	4ba1      	ldr	r3, [pc, #644]	@ (8000e60 <main+0x2e8>)
 8000bda:	edd3 7a00 	vldr	s15, [r3]
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	ee17 0a90 	vmov	r0, s15
 8000be6:	f7ff fda5 	bl	8000734 <__aeabi_f2d>
 8000bea:	4680      	mov	r8, r0
 8000bec:	4689      	mov	r9, r1
 8000bee:	4b9d      	ldr	r3, [pc, #628]	@ (8000e64 <main+0x2ec>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fd9e 	bl	8000734 <__aeabi_f2d>
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8000e68 <main+0x2f0>)
 8000bfe:	f7ff fb0b 	bl	8000218 <__aeabi_dmul>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	e9c7 2300 	strd	r2, r3, [r7]
 8000c0a:	4b94      	ldr	r3, [pc, #592]	@ (8000e5c <main+0x2e4>)
 8000c0c:	ed93 7a00 	vldr	s14, [r3]
 8000c10:	4b92      	ldr	r3, [pc, #584]	@ (8000e5c <main+0x2e4>)
 8000c12:	edd3 7a00 	vldr	s15, [r3]
 8000c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1a:	ee17 0a90 	vmov	r0, s15
 8000c1e:	f7ff fd89 	bl	8000734 <__aeabi_f2d>
 8000c22:	4602      	mov	r2, r0
 8000c24:	460b      	mov	r3, r1
 8000c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c2a:	f7ff faf5 	bl	8000218 <__aeabi_dmul>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	460b      	mov	r3, r1
 8000c32:	4640      	mov	r0, r8
 8000c34:	4649      	mov	r1, r9
 8000c36:	f7ff fc1f 	bl	8000478 <__adddf3>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4610      	mov	r0, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	f7ff fdcf 	bl	80007e4 <__aeabi_d2f>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a88      	ldr	r2, [pc, #544]	@ (8000e6c <main+0x2f4>)
 8000c4a:	6013      	str	r3, [r2, #0]
		  	  			  	q_Velo = Velo_Start + Max_Acc*t;
 8000c4c:	4b85      	ldr	r3, [pc, #532]	@ (8000e64 <main+0x2ec>)
 8000c4e:	ed93 7a00 	vldr	s14, [r3]
 8000c52:	4b82      	ldr	r3, [pc, #520]	@ (8000e5c <main+0x2e4>)
 8000c54:	edd3 7a00 	vldr	s15, [r3]
 8000c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c5c:	4b7e      	ldr	r3, [pc, #504]	@ (8000e58 <main+0x2e0>)
 8000c5e:	edd3 7a00 	vldr	s15, [r3]
 8000c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c66:	4b82      	ldr	r3, [pc, #520]	@ (8000e70 <main+0x2f8>)
 8000c68:	edc3 7a00 	vstr	s15, [r3]
		  	  			  	q_Acc = Max_Acc;
 8000c6c:	4b7d      	ldr	r3, [pc, #500]	@ (8000e64 <main+0x2ec>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a80      	ldr	r2, [pc, #512]	@ (8000e74 <main+0x2fc>)
 8000c72:	6013      	str	r3, [r2, #0]
		  	  			  if(q_Velo >= Max_Velo)
 8000c74:	4b7e      	ldr	r3, [pc, #504]	@ (8000e70 <main+0x2f8>)
 8000c76:	ed93 7a00 	vldr	s14, [r3]
 8000c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e78 <main+0x300>)
 8000c7c:	edd3 7a00 	vldr	s15, [r3]
 8000c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c88:	da00      	bge.n	8000c8c <main+0x114>
		  	  				{
		  	  					state_Tra = 1;
		  	  					Pos_Start = q_Pos;
		  	  				}
		  	  			  	break;
 8000c8a:	e0be      	b.n	8000e0a <main+0x292>
		  	  					state_Tra = 1;
 8000c8c:	4b71      	ldr	r3, [pc, #452]	@ (8000e54 <main+0x2dc>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
		  	  					Pos_Start = q_Pos;
 8000c92:	4b76      	ldr	r3, [pc, #472]	@ (8000e6c <main+0x2f4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a72      	ldr	r2, [pc, #456]	@ (8000e60 <main+0x2e8>)
 8000c98:	6013      	str	r3, [r2, #0]
		  	  			  	break;
 8000c9a:	e0b6      	b.n	8000e0a <main+0x292>
		  	  		  case 1:
		  	  			  	q_Pos = Pos_Start +(Velo_Start*t);
 8000c9c:	4b6e      	ldr	r3, [pc, #440]	@ (8000e58 <main+0x2e0>)
 8000c9e:	ed93 7a00 	vldr	s14, [r3]
 8000ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8000e5c <main+0x2e4>)
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cac:	4b6c      	ldr	r3, [pc, #432]	@ (8000e60 <main+0x2e8>)
 8000cae:	edd3 7a00 	vldr	s15, [r3]
 8000cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8000e6c <main+0x2f4>)
 8000cb8:	edc3 7a00 	vstr	s15, [r3]
		  	  			  	q_Velo = q_Velo;
 8000cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8000e70 <main+0x2f8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8000e70 <main+0x2f8>)
 8000cc2:	6013      	str	r3, [r2, #0]
		  	  			  	q_Acc = 0;
 8000cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8000e74 <main+0x2fc>)
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
		  	  			  if(q_Pos <= (q_Velo*q_Velo)/(2*Max_Acc))
 8000ccc:	4b68      	ldr	r3, [pc, #416]	@ (8000e70 <main+0x2f8>)
 8000cce:	ed93 7a00 	vldr	s14, [r3]
 8000cd2:	4b67      	ldr	r3, [pc, #412]	@ (8000e70 <main+0x2f8>)
 8000cd4:	edd3 7a00 	vldr	s15, [r3]
 8000cd8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000cdc:	4b61      	ldr	r3, [pc, #388]	@ (8000e64 <main+0x2ec>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cea:	4b60      	ldr	r3, [pc, #384]	@ (8000e6c <main+0x2f4>)
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf8:	da00      	bge.n	8000cfc <main+0x184>
		  	  				{
		  	  					state_Tra = 2;
		  	  					Pos_Start = q_Pos;
		  	  					Velo_Start = q_Velo;
		  	  				}
		  	  			  	break;
 8000cfa:	e086      	b.n	8000e0a <main+0x292>
		  	  					state_Tra = 2;
 8000cfc:	4b55      	ldr	r3, [pc, #340]	@ (8000e54 <main+0x2dc>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	601a      	str	r2, [r3, #0]
		  	  					Pos_Start = q_Pos;
 8000d02:	4b5a      	ldr	r3, [pc, #360]	@ (8000e6c <main+0x2f4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a56      	ldr	r2, [pc, #344]	@ (8000e60 <main+0x2e8>)
 8000d08:	6013      	str	r3, [r2, #0]
		  	  					Velo_Start = q_Velo;
 8000d0a:	4b59      	ldr	r3, [pc, #356]	@ (8000e70 <main+0x2f8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a52      	ldr	r2, [pc, #328]	@ (8000e58 <main+0x2e0>)
 8000d10:	6013      	str	r3, [r2, #0]
		  	  			  	break;
 8000d12:	e07a      	b.n	8000e0a <main+0x292>
		  	  		  case 2:
		  	  			  	q_Pos = Pos_Start + (Velo_Start*t)-(0.5*Max_Acc)*(t*t);
 8000d14:	4b50      	ldr	r3, [pc, #320]	@ (8000e58 <main+0x2e0>)
 8000d16:	ed93 7a00 	vldr	s14, [r3]
 8000d1a:	4b50      	ldr	r3, [pc, #320]	@ (8000e5c <main+0x2e4>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d24:	4b4e      	ldr	r3, [pc, #312]	@ (8000e60 <main+0x2e8>)
 8000d26:	edd3 7a00 	vldr	s15, [r3]
 8000d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d2e:	ee17 0a90 	vmov	r0, s15
 8000d32:	f7ff fcff 	bl	8000734 <__aeabi_f2d>
 8000d36:	4680      	mov	r8, r0
 8000d38:	4689      	mov	r9, r1
 8000d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e64 <main+0x2ec>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fcf8 	bl	8000734 <__aeabi_f2d>
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	4b47      	ldr	r3, [pc, #284]	@ (8000e68 <main+0x2f0>)
 8000d4a:	f7ff fa65 	bl	8000218 <__aeabi_dmul>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	e9c7 2300 	strd	r2, r3, [r7]
 8000d56:	4b41      	ldr	r3, [pc, #260]	@ (8000e5c <main+0x2e4>)
 8000d58:	ed93 7a00 	vldr	s14, [r3]
 8000d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e5c <main+0x2e4>)
 8000d5e:	edd3 7a00 	vldr	s15, [r3]
 8000d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d66:	ee17 0a90 	vmov	r0, s15
 8000d6a:	f7ff fce3 	bl	8000734 <__aeabi_f2d>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d76:	f7ff fa4f 	bl	8000218 <__aeabi_dmul>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4640      	mov	r0, r8
 8000d80:	4649      	mov	r1, r9
 8000d82:	f7ff fb77 	bl	8000474 <__aeabi_dsub>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f7ff fd29 	bl	80007e4 <__aeabi_d2f>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a35      	ldr	r2, [pc, #212]	@ (8000e6c <main+0x2f4>)
 8000d96:	6013      	str	r3, [r2, #0]
		  	  			  	q_Velo = Velo_Start - Max_Acc*t;
 8000d98:	4b2f      	ldr	r3, [pc, #188]	@ (8000e58 <main+0x2e0>)
 8000d9a:	ed93 7a00 	vldr	s14, [r3]
 8000d9e:	4b31      	ldr	r3, [pc, #196]	@ (8000e64 <main+0x2ec>)
 8000da0:	edd3 6a00 	vldr	s13, [r3]
 8000da4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e5c <main+0x2e4>)
 8000da6:	edd3 7a00 	vldr	s15, [r3]
 8000daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <main+0x2f8>)
 8000db4:	edc3 7a00 	vstr	s15, [r3]
		  	  			  	q_Acc = -Max_Acc;
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <main+0x2ec>)
 8000dba:	edd3 7a00 	vldr	s15, [r3]
 8000dbe:	eef1 7a67 	vneg.f32	s15, s15
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <main+0x2fc>)
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
		  	  			  if(q_Velo <= 0)
 8000dc8:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <main+0x2f8>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	d900      	bls.n	8000dda <main+0x262>
		  	  				{
		  	  					state_Tra = 3;
		  	  				}
		  	  			  	break;
 8000dd8:	e017      	b.n	8000e0a <main+0x292>
		  	  					state_Tra = 3;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <main+0x2dc>)
 8000ddc:	2203      	movs	r2, #3
 8000dde:	601a      	str	r2, [r3, #0]
		  	  			  	break;
 8000de0:	e013      	b.n	8000e0a <main+0x292>
		  	  		  case 3:
		  	  			  	q_Pos = 0;
 8000de2:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <main+0x2f4>)
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
		  	  			  	q_Velo = 0;
 8000dea:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <main+0x2f8>)
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
		  	  			  	q_Acc = 0;
 8000df2:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <main+0x2fc>)
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
		  	  			  	t = 0;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <main+0x2e4>)
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
		  	  			  	state_Tra = 0;
 8000e02:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <main+0x2dc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
		  	  			  	break;
 8000e08:	bf00      	nop
		  	  		  }
	  t = t+0.01;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <main+0x2e4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fc90 	bl	8000734 <__aeabi_f2d>
 8000e14:	a30c      	add	r3, pc, #48	@ (adr r3, 8000e48 <main+0x2d0>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	f7ff fb2d 	bl	8000478 <__adddf3>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f7ff fcdd 	bl	80007e4 <__aeabi_d2f>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <main+0x2e4>)
 8000e2e:	6013      	str	r3, [r2, #0]
	  timestamp = HAL_GetTick()+10;
 8000e30:	f000 fa82 	bl	8001338 <HAL_GetTick>
 8000e34:	4603      	mov	r3, r0
 8000e36:	330a      	adds	r3, #10
 8000e38:	2200      	movs	r2, #0
 8000e3a:	469a      	mov	sl, r3
 8000e3c:	4693      	mov	fp, r2
 8000e3e:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <main+0x2d8>)
 8000e40:	e9c3 ab00 	strd	sl, fp, [r3]
  {
 8000e44:	e6a4      	b.n	8000b90 <main+0x18>
 8000e46:	bf00      	nop
 8000e48:	47ae147b 	.word	0x47ae147b
 8000e4c:	3f847ae1 	.word	0x3f847ae1
 8000e50:	200000e8 	.word	0x200000e8
 8000e54:	200000e0 	.word	0x200000e0
 8000e58:	200000cc 	.word	0x200000cc
 8000e5c:	200000dc 	.word	0x200000dc
 8000e60:	200000c8 	.word	0x200000c8
 8000e64:	20000004 	.word	0x20000004
 8000e68:	3fe00000 	.word	0x3fe00000
 8000e6c:	200000d0 	.word	0x200000d0
 8000e70:	200000d4 	.word	0x200000d4
 8000e74:	200000d8 	.word	0x200000d8
 8000e78:	20000000 	.word	0x20000000

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	@ 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	2238      	movs	r2, #56	@ 0x38
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fbcc 	bl	8003628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 fd24 	bl	80018ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eae:	2340      	movs	r3, #64	@ 0x40
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ebe:	2355      	movs	r3, #85	@ 0x55
 8000ec0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fdbe 	bl	8001a54 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ede:	f000 f8d1 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2104      	movs	r1, #4
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 f8bc 	bl	8002078 <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f06:	f000 f8bd 	bl	8001084 <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3750      	adds	r7, #80	@ 0x50
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f18:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f1a:	4a22      	ldr	r2, [pc, #136]	@ (8000fa4 <MX_LPUART1_UART_Init+0x90>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f56:	4812      	ldr	r0, [pc, #72]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f58:	f001 fcf8 	bl	800294c <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f62:	f000 f88f 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f66:	2100      	movs	r1, #0
 8000f68:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f6a:	f002 fa93 	bl	8003494 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f74:	f000 f886 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4809      	ldr	r0, [pc, #36]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f7c:	f002 fac8 	bl	8003510 <HAL_UARTEx_SetRxFifoThreshold>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f86:	f000 f87d 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_LPUART1_UART_Init+0x8c>)
 8000f8c:	f002 fa49 	bl	8003422 <HAL_UARTEx_DisableFifoMode>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f96:	f000 f875 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000034 	.word	0x20000034
 8000fa4:	40008000 	.word	0x40008000

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <MX_GPIO_Init+0xd4>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800107c <MX_GPIO_Init+0xd4>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fca:	4b2c      	ldr	r3, [pc, #176]	@ (800107c <MX_GPIO_Init+0xd4>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd6:	4b29      	ldr	r3, [pc, #164]	@ (800107c <MX_GPIO_Init+0xd4>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a28      	ldr	r2, [pc, #160]	@ (800107c <MX_GPIO_Init+0xd4>)
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe2:	4b26      	ldr	r3, [pc, #152]	@ (800107c <MX_GPIO_Init+0xd4>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	f003 0320 	and.w	r3, r3, #32
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b23      	ldr	r3, [pc, #140]	@ (800107c <MX_GPIO_Init+0xd4>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	4a22      	ldr	r2, [pc, #136]	@ (800107c <MX_GPIO_Init+0xd4>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <MX_GPIO_Init+0xd4>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_GPIO_Init+0xd4>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <MX_GPIO_Init+0xd4>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_GPIO_Init+0xd4>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2120      	movs	r1, #32
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f000 fc25 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800102a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001030:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480f      	ldr	r0, [pc, #60]	@ (8001080 <MX_GPIO_Init+0xd8>)
 8001042:	f000 fa95 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001046:	2320      	movs	r3, #32
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001060:	f000 fa86 	bl	8001570 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2028      	movs	r0, #40	@ 0x28
 800106a:	f000 fa4c 	bl	8001506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800106e:	2028      	movs	r0, #40	@ 0x28
 8001070:	f000 fa63 	bl	800153a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	@ 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	48000800 	.word	0x48000800

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <Error_Handler+0x8>

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_MspInit+0x44>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <HAL_MspInit+0x44>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_MspInit+0x44>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <HAL_MspInit+0x44>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <HAL_MspInit+0x44>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_MspInit+0x44>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010c6:	f000 fcb5 	bl	8001a34 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09e      	sub	sp, #120	@ 0x78
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2254      	movs	r2, #84	@ 0x54
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 fa95 	bl	8003628 <memset>
  if(huart->Instance==LPUART1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1f      	ldr	r2, [pc, #124]	@ (8001180 <HAL_UART_MspInit+0xa8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d136      	bne.n	8001176 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001108:	2320      	movs	r3, #32
 800110a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f001 f9cb 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001120:	f7ff ffb0 	bl	8001084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_UART_MspInit+0xac>)
 8001126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001128:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <HAL_UART_MspInit+0xac>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <HAL_UART_MspInit+0xac>)
 8001132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_UART_MspInit+0xac>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <HAL_UART_MspInit+0xac>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <HAL_UART_MspInit+0xac>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001154:	230c      	movs	r3, #12
 8001156:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001164:	230c      	movs	r3, #12
 8001166:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001172:	f000 f9fd 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3778      	adds	r7, #120	@ 0x78
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40008000 	.word	0x40008000
 8001184:	40021000 	.word	0x40021000

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <NMI_Handler+0x4>

08001190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <MemManage_Handler+0x4>

080011a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <UsageFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011de:	f000 f899 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011ea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011ee:	f000 fb59 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <SystemInit+0x20>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001202:	4a05      	ldr	r2, [pc, #20]	@ (8001218 <SystemInit+0x20>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800121c:	480d      	ldr	r0, [pc, #52]	@ (8001254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800121e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001220:	f7ff ffea 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001224:	480c      	ldr	r0, [pc, #48]	@ (8001258 <LoopForever+0x6>)
  ldr r1, =_edata
 8001226:	490d      	ldr	r1, [pc, #52]	@ (800125c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001228:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <LoopForever+0xe>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800123c:	4c0a      	ldr	r4, [pc, #40]	@ (8001268 <LoopForever+0x16>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f002 f9f5 	bl	8003638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800124e:	f7ff fc93 	bl	8000b78 <main>

08001252 <LoopForever>:

LoopForever:
    b LoopForever
 8001252:	e7fe      	b.n	8001252 <LoopForever>
  ldr   r0, =_estack
 8001254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001260:	080036e8 	.word	0x080036e8
  ldr r2, =_sbss
 8001264:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001268:	200000f4 	.word	0x200000f4

0800126c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC1_2_IRQHandler>

0800126e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f939 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f80e 	bl	80012a0 <HAL_InitTick>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	e001      	b.n	8001294 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001290:	f7ff fefe 	bl	8001090 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001294:	79fb      	ldrb	r3, [r7, #7]

}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <HAL_InitTick+0x68>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d022      	beq.n	80012fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_InitTick+0x6c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <HAL_InitTick+0x68>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f944 	bl	8001556 <HAL_SYSTICK_Config>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10f      	bne.n	80012f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	d809      	bhi.n	80012ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012da:	2200      	movs	r2, #0
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	f04f 30ff 	mov.w	r0, #4294967295
 80012e2:	f000 f910 	bl	8001506 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <HAL_InitTick+0x70>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e007      	b.n	80012fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e004      	b.n	80012fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e001      	b.n	80012fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000010 	.word	0x20000010
 800130c:	20000008 	.word	0x20000008
 8001310:	2000000c 	.word	0x2000000c

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_IncTick+0x1c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_IncTick+0x20>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4413      	add	r3, r2
 8001322:	4a03      	ldr	r2, [pc, #12]	@ (8001330 <HAL_IncTick+0x1c>)
 8001324:	6013      	str	r3, [r2, #0]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	200000f0 	.word	0x200000f0
 8001334:	20000010 	.word	0x20000010

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	@ (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	200000f0 	.word	0x200000f0

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	@ (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	@ (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff29 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff40 	bl	8001398 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff90 	bl	8001444 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5f 	bl	80013f0 <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff33 	bl	80013b4 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa4 	bl	80014ac <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800157e:	e15a      	b.n	8001836 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 814c 	beq.w	8001830 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d005      	beq.n	80015b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d130      	bne.n	8001612 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015e6:	2201      	movs	r2, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	f003 0201 	and.w	r2, r3, #1
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b03      	cmp	r3, #3
 800161c:	d017      	beq.n	800164e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d123      	bne.n	80016a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	6939      	ldr	r1, [r7, #16]
 800169e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0203 	and.w	r2, r3, #3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80a6 	beq.w	8001830 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001854 <HAL_GPIO_Init+0x2e4>)
 80016e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e8:	4a5a      	ldr	r2, [pc, #360]	@ (8001854 <HAL_GPIO_Init+0x2e4>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80016f0:	4b58      	ldr	r3, [pc, #352]	@ (8001854 <HAL_GPIO_Init+0x2e4>)
 80016f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fc:	4a56      	ldr	r2, [pc, #344]	@ (8001858 <HAL_GPIO_Init+0x2e8>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001726:	d01f      	beq.n	8001768 <HAL_GPIO_Init+0x1f8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4c      	ldr	r2, [pc, #304]	@ (800185c <HAL_GPIO_Init+0x2ec>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d019      	beq.n	8001764 <HAL_GPIO_Init+0x1f4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a4b      	ldr	r2, [pc, #300]	@ (8001860 <HAL_GPIO_Init+0x2f0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d013      	beq.n	8001760 <HAL_GPIO_Init+0x1f0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a4a      	ldr	r2, [pc, #296]	@ (8001864 <HAL_GPIO_Init+0x2f4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00d      	beq.n	800175c <HAL_GPIO_Init+0x1ec>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a49      	ldr	r2, [pc, #292]	@ (8001868 <HAL_GPIO_Init+0x2f8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d007      	beq.n	8001758 <HAL_GPIO_Init+0x1e8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a48      	ldr	r2, [pc, #288]	@ (800186c <HAL_GPIO_Init+0x2fc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_GPIO_Init+0x1e4>
 8001750:	2305      	movs	r3, #5
 8001752:	e00a      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001754:	2306      	movs	r3, #6
 8001756:	e008      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001758:	2304      	movs	r3, #4
 800175a:	e006      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 800175c:	2303      	movs	r3, #3
 800175e:	e004      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001760:	2302      	movs	r3, #2
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_GPIO_Init+0x1fa>
 8001768:	2300      	movs	r3, #0
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	f002 0203 	and.w	r2, r2, #3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4093      	lsls	r3, r2
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800177a:	4937      	ldr	r1, [pc, #220]	@ (8001858 <HAL_GPIO_Init+0x2e8>)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001788:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <HAL_GPIO_Init+0x300>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017ac:	4a30      	ldr	r2, [pc, #192]	@ (8001870 <HAL_GPIO_Init+0x300>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <HAL_GPIO_Init+0x300>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017d6:	4a26      	ldr	r2, [pc, #152]	@ (8001870 <HAL_GPIO_Init+0x300>)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80017dc:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <HAL_GPIO_Init+0x300>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001800:	4a1b      	ldr	r2, [pc, #108]	@ (8001870 <HAL_GPIO_Init+0x300>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001806:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <HAL_GPIO_Init+0x300>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800182a:	4a11      	ldr	r2, [pc, #68]	@ (8001870 <HAL_GPIO_Init+0x300>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f ae9d 	bne.w	8001580 <HAL_GPIO_Init+0x10>
  }
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	48000400 	.word	0x48000400
 8001860:	48000800 	.word	0x48000800
 8001864:	48000c00 	.word	0x48000c00
 8001868:	48001000 	.word	0x48001000
 800186c:	48001400 	.word	0x48001400
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001890:	e002      	b.n	8001898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ae:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f806 	bl	80018d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d141      	bne.n	800197e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001906:	d131      	bne.n	800196c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001908:	4b47      	ldr	r3, [pc, #284]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800190e:	4a46      	ldr	r2, [pc, #280]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001914:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001918:	4b43      	ldr	r3, [pc, #268]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001920:	4a41      	ldr	r2, [pc, #260]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001922:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001926:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001928:	4b40      	ldr	r3, [pc, #256]	@ (8001a2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2232      	movs	r2, #50	@ 0x32
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	4a3f      	ldr	r2, [pc, #252]	@ (8001a30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	0c9b      	lsrs	r3, r3, #18
 800193a:	3301      	adds	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800193e:	e002      	b.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3b01      	subs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001946:	4b38      	ldr	r3, [pc, #224]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001952:	d102      	bne.n	800195a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f2      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800195a:	4b33      	ldr	r3, [pc, #204]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001966:	d158      	bne.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e057      	b.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800196c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001972:	4a2d      	ldr	r2, [pc, #180]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001978:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800197c:	e04d      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001984:	d141      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001986:	4b28      	ldr	r3, [pc, #160]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001992:	d131      	bne.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001994:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800199a:	4a23      	ldr	r2, [pc, #140]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a4:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2232      	movs	r2, #50	@ 0x32
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	0c9b      	lsrs	r3, r3, #18
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ca:	e002      	b.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019de:	d102      	bne.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f2      	bne.n	80019cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019f2:	d112      	bne.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e011      	b.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a08:	e007      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a12:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	431bde83 	.word	0x431bde83

08001a34 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a42:	6093      	str	r3, [r2, #8]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40007000 	.word	0x40007000

08001a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e2fe      	b.n	8002064 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d075      	beq.n	8001b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a72:	4b97      	ldr	r3, [pc, #604]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7c:	4b94      	ldr	r3, [pc, #592]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3e>
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_OscConfig+0x44>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d10b      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	4b8d      	ldr	r3, [pc, #564]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d05b      	beq.n	8001b5c <HAL_RCC_OscConfig+0x108>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d157      	bne.n	8001b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e2d9      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ab8:	d106      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x74>
 8001aba:	4b85      	ldr	r3, [pc, #532]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a84      	ldr	r2, [pc, #528]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e01d      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x98>
 8001ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b7c      	ldr	r3, [pc, #496]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7b      	ldr	r2, [pc, #492]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001aec:	4b78      	ldr	r3, [pc, #480]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a77      	ldr	r2, [pc, #476]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b75      	ldr	r3, [pc, #468]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a74      	ldr	r2, [pc, #464]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fc14 	bl	8001338 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff fc10 	bl	8001338 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	@ 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e29e      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b26:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0xc0>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fc00 	bl	8001338 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fbfc 	bl	8001338 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	@ 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e28a      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b4e:	4b60      	ldr	r3, [pc, #384]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0xe8>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d075      	beq.n	8001c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6a:	4b59      	ldr	r3, [pc, #356]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b74:	4b56      	ldr	r3, [pc, #344]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0x136>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_OscConfig+0x13c>
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d11f      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b90:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x154>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e25d      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b49      	ldr	r3, [pc, #292]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	061b      	lsls	r3, r3, #24
 8001bb6:	4946      	ldr	r1, [pc, #280]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bbc:	4b45      	ldr	r3, [pc, #276]	@ (8001cd4 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fb6d 	bl	80012a0 <HAL_InitTick>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d043      	beq.n	8001c54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e249      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d023      	beq.n	8001c20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fba8 	bl	8001338 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff fba4 	bl	8001338 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e232      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	061b      	lsls	r3, r3, #24
 8001c18:	492d      	ldr	r1, [pc, #180]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
 8001c1e:	e01a      	b.n	8001c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c20:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2a      	ldr	r2, [pc, #168]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fb84 	bl	8001338 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff fb80 	bl	8001338 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e20e      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c46:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1e0>
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d041      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6a:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c70:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fb5d 	bl	8001338 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c82:	f7ff fb59 	bl	8001338 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1e7      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0ef      	beq.n	8001c82 <HAL_RCC_OscConfig+0x22e>
 8001ca2:	e020      	b.n	8001ce6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001caa:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fb40 	bl	8001338 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cba:	e00d      	b.n	8001cd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fb3c 	bl	8001338 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d906      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1ca      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ea      	bne.n	8001cbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80a6 	beq.w	8001e40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cf8:	4b84      	ldr	r3, [pc, #528]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2b4>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x2b6>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00d      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	4a7e      	ldr	r2, [pc, #504]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2a:	4b79      	ldr	r3, [pc, #484]	@ (8001f10 <HAL_RCC_OscConfig+0x4bc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d36:	4b76      	ldr	r3, [pc, #472]	@ (8001f10 <HAL_RCC_OscConfig+0x4bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a75      	ldr	r2, [pc, #468]	@ (8001f10 <HAL_RCC_OscConfig+0x4bc>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7ff faf9 	bl	8001338 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff faf5 	bl	8001338 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e183      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f10 <HAL_RCC_OscConfig+0x4bc>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d108      	bne.n	8001d82 <HAL_RCC_OscConfig+0x32e>
 8001d70:	4b66      	ldr	r3, [pc, #408]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d76:	4a65      	ldr	r2, [pc, #404]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d80:	e024      	b.n	8001dcc <HAL_RCC_OscConfig+0x378>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d110      	bne.n	8001dac <HAL_RCC_OscConfig+0x358>
 8001d8a:	4b60      	ldr	r3, [pc, #384]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d90:	4a5e      	ldr	r2, [pc, #376]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001daa:	e00f      	b.n	8001dcc <HAL_RCC_OscConfig+0x378>
 8001dac:	4b57      	ldr	r3, [pc, #348]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db2:	4a56      	ldr	r2, [pc, #344]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dbc:	4b53      	ldr	r3, [pc, #332]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc2:	4a52      	ldr	r2, [pc, #328]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fab0 	bl	8001338 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7ff faac 	bl	8001338 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e138      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ed      	beq.n	8001ddc <HAL_RCC_OscConfig+0x388>
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e02:	f7ff fa99 	bl	8001338 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fa95 	bl	8001338 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e121      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e20:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ed      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e2e:	7ffb      	ldrb	r3, [r7, #31]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e34:	4b35      	ldr	r3, [pc, #212]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	4a34      	ldr	r2, [pc, #208]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d03c      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01c      	beq.n	8001e8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e54:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7ff fa68 	bl	8001338 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e6c:	f7ff fa64 	bl	8001338 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0f2      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e7e:	4b23      	ldr	r3, [pc, #140]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ef      	beq.n	8001e6c <HAL_RCC_OscConfig+0x418>
 8001e8c:	e01b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e94:	4a1d      	ldr	r2, [pc, #116]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fa4b 	bl	8001338 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea6:	f7ff fa47 	bl	8001338 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0d5      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eb8:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ef      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80c9 	beq.w	8002062 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	f000 8083 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d15e      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a08      	ldr	r2, [pc, #32]	@ (8001f0c <HAL_RCC_OscConfig+0x4b8>)
 8001eec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fa21 	bl	8001338 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef8:	e00c      	b.n	8001f14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff fa1d 	bl	8001338 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d905      	bls.n	8001f14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0ab      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f14:	4b55      	ldr	r3, [pc, #340]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ec      	bne.n	8001efa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f20:	4b52      	ldr	r3, [pc, #328]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4b52      	ldr	r3, [pc, #328]	@ (8002070 <HAL_RCC_OscConfig+0x61c>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6a11      	ldr	r1, [r2, #32]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f30:	3a01      	subs	r2, #1
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001f3a:	0212      	lsls	r2, r2, #8
 8001f3c:	4311      	orrs	r1, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f42:	0852      	lsrs	r2, r2, #1
 8001f44:	3a01      	subs	r2, #1
 8001f46:	0552      	lsls	r2, r2, #21
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f4e:	0852      	lsrs	r2, r2, #1
 8001f50:	3a01      	subs	r2, #1
 8001f52:	0652      	lsls	r2, r2, #25
 8001f54:	4311      	orrs	r1, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f5a:	06d2      	lsls	r2, r2, #27
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	4943      	ldr	r1, [pc, #268]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b41      	ldr	r3, [pc, #260]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a40      	ldr	r2, [pc, #256]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f70:	4b3e      	ldr	r3, [pc, #248]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a3d      	ldr	r2, [pc, #244]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f9dc 	bl	8001338 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff f9d8 	bl	8001338 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e066      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	4b35      	ldr	r3, [pc, #212]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x530>
 8001fa2:	e05e      	b.n	8002062 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b31      	ldr	r3, [pc, #196]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a30      	ldr	r2, [pc, #192]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f9c2 	bl	8001338 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f9be 	bl	8001338 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e04c      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fd6:	4b25      	ldr	r3, [pc, #148]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	4924      	ldr	r1, [pc, #144]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001fdc:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <HAL_RCC_OscConfig+0x620>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60cb      	str	r3, [r1, #12]
 8001fe2:	e03e      	b.n	8002062 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e039      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <HAL_RCC_OscConfig+0x618>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	429a      	cmp	r2, r3
 8002002:	d12c      	bne.n	800205e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	3b01      	subs	r3, #1
 8002010:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d123      	bne.n	800205e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d11b      	bne.n	800205e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002030:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d113      	bne.n	800205e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	3b01      	subs	r3, #1
 8002044:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d109      	bne.n	800205e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	019f800c 	.word	0x019f800c
 8002074:	feeefffc 	.word	0xfeeefffc

08002078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e11e      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b91      	ldr	r3, [pc, #580]	@ (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b8e      	ldr	r3, [pc, #568]	@ (80022d8 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 020f 	bic.w	r2, r3, #15
 80020a6:	498c      	ldr	r1, [pc, #560]	@ (80022d8 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b8a      	ldr	r3, [pc, #552]	@ (80022d8 <HAL_RCC_ClockConfig+0x260>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e106      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d073      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d129      	bne.n	8002128 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d4:	4b81      	ldr	r3, [pc, #516]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0f4      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020e4:	f000 f99e 	bl	8002424 <RCC_GetSysClockFreqFromPLLSource>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4a7c      	ldr	r2, [pc, #496]	@ (80022e0 <HAL_RCC_ClockConfig+0x268>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d93f      	bls.n	8002172 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020f2:	4b7a      	ldr	r3, [pc, #488]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002106:	2b00      	cmp	r3, #0
 8002108:	d033      	beq.n	8002172 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800210e:	2b00      	cmp	r3, #0
 8002110:	d12f      	bne.n	8002172 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002112:	4b72      	ldr	r3, [pc, #456]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800211a:	4a70      	ldr	r2, [pc, #448]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 800211c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002120:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e024      	b.n	8002172 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d107      	bne.n	8002140 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002130:	4b6a      	ldr	r3, [pc, #424]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0c6      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002140:	4b66      	ldr	r3, [pc, #408]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0be      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002150:	f000 f8ce 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 8002154:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4a61      	ldr	r2, [pc, #388]	@ (80022e0 <HAL_RCC_ClockConfig+0x268>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d909      	bls.n	8002172 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800215e:	4b5f      	ldr	r3, [pc, #380]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002166:	4a5d      	ldr	r2, [pc, #372]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800216c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800216e:	2380      	movs	r3, #128	@ 0x80
 8002170:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002172:	4b5a      	ldr	r3, [pc, #360]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4957      	ldr	r1, [pc, #348]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002184:	f7ff f8d8 	bl	8001338 <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7ff f8d4 	bl	8001338 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e095      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b4e      	ldr	r3, [pc, #312]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 020c 	and.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1eb      	bne.n	800218c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d023      	beq.n	8002208 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b43      	ldr	r3, [pc, #268]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a42      	ldr	r2, [pc, #264]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021e4:	4b3d      	ldr	r3, [pc, #244]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80021ec:	4a3b      	ldr	r2, [pc, #236]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b39      	ldr	r3, [pc, #228]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4936      	ldr	r1, [pc, #216]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
 8002206:	e008      	b.n	800221a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b80      	cmp	r3, #128	@ 0x80
 800220c:	d105      	bne.n	800221a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800220e:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4a32      	ldr	r2, [pc, #200]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002214:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002218:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800221a:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <HAL_RCC_ClockConfig+0x260>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d21d      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002228:	4b2b      	ldr	r3, [pc, #172]	@ (80022d8 <HAL_RCC_ClockConfig+0x260>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 020f 	bic.w	r2, r3, #15
 8002230:	4929      	ldr	r1, [pc, #164]	@ (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002238:	f7ff f87e 	bl	8001338 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff f87a 	bl	8001338 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e03b      	b.n	80022ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <HAL_RCC_ClockConfig+0x260>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d1ed      	bne.n	8002240 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4917      	ldr	r1, [pc, #92]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228e:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	490f      	ldr	r1, [pc, #60]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022a2:	f000 f825 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <HAL_RCC_ClockConfig+0x264>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	490c      	ldr	r1, [pc, #48]	@ (80022e4 <HAL_RCC_ClockConfig+0x26c>)
 80022b4:	5ccb      	ldrb	r3, [r1, r3]
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <HAL_RCC_ClockConfig+0x270>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <HAL_RCC_ClockConfig+0x274>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe ffea 	bl	80012a0 <HAL_InitTick>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40021000 	.word	0x40021000
 80022e0:	04c4b400 	.word	0x04c4b400
 80022e4:	08003698 	.word	0x08003698
 80022e8:	20000008 	.word	0x20000008
 80022ec:	2000000c 	.word	0x2000000c

080022f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022f6:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d102      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002302:	4b2a      	ldr	r3, [pc, #168]	@ (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e047      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002308:	4b27      	ldr	r3, [pc, #156]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d102      	bne.n	800231a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002314:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e03e      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800231a:	4b23      	ldr	r3, [pc, #140]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d136      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3301      	adds	r3, #1
 800233c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d10c      	bne.n	800235e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002344:	4a1a      	ldr	r2, [pc, #104]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	4a16      	ldr	r2, [pc, #88]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800234e:	68d2      	ldr	r2, [r2, #12]
 8002350:	0a12      	lsrs	r2, r2, #8
 8002352:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	617b      	str	r3, [r7, #20]
      break;
 800235c:	e00c      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800235e:	4a13      	ldr	r2, [pc, #76]	@ (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002368:	68d2      	ldr	r2, [r2, #12]
 800236a:	0a12      	lsrs	r2, r2, #8
 800236c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
      break;
 8002376:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0e5b      	lsrs	r3, r3, #25
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e001      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002398:	693b      	ldr	r3, [r7, #16]
}
 800239a:	4618      	mov	r0, r3
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	016e3600 	.word	0x016e3600

080023b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000008 	.word	0x20000008

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4904      	ldr	r1, [pc, #16]	@ (80023f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	080036a8 	.word	0x080036a8

080023f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023fc:	f7ff ffda 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0adb      	lsrs	r3, r3, #11
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4904      	ldr	r1, [pc, #16]	@ (8002420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	080036a8 	.word	0x080036a8

08002424 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800242a:	4b1e      	ldr	r3, [pc, #120]	@ (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002434:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3301      	adds	r3, #1
 8002440:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d10c      	bne.n	8002462 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002448:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002450:	4a14      	ldr	r2, [pc, #80]	@ (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002452:	68d2      	ldr	r2, [r2, #12]
 8002454:	0a12      	lsrs	r2, r2, #8
 8002456:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	617b      	str	r3, [r7, #20]
    break;
 8002460:	e00c      	b.n	800247c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002462:	4a12      	ldr	r2, [pc, #72]	@ (80024ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4a0e      	ldr	r2, [pc, #56]	@ (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800246c:	68d2      	ldr	r2, [r2, #12]
 800246e:	0a12      	lsrs	r2, r2, #8
 8002470:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
    break;
 800247a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0e5b      	lsrs	r3, r3, #25
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	3301      	adds	r3, #1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002496:	687b      	ldr	r3, [r7, #4]
}
 8002498:	4618      	mov	r0, r3
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40021000 	.word	0x40021000
 80024a8:	016e3600 	.word	0x016e3600
 80024ac:	00f42400 	.word	0x00f42400

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b8:	2300      	movs	r3, #0
 80024ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024bc:	2300      	movs	r3, #0
 80024be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8098 	beq.w	80025fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d2:	4b43      	ldr	r3, [pc, #268]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	4b40      	ldr	r3, [pc, #256]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e2:	4a3f      	ldr	r2, [pc, #252]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ea:	4b3d      	ldr	r3, [pc, #244]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024fa:	4b3a      	ldr	r3, [pc, #232]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a39      	ldr	r2, [pc, #228]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002504:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002506:	f7fe ff17 	bl	8001338 <HAL_GetTick>
 800250a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800250c:	e009      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe ff13 	bl	8001338 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d902      	bls.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	74fb      	strb	r3, [r7, #19]
        break;
 8002520:	e005      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002522:	4b30      	ldr	r3, [pc, #192]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ef      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d159      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002534:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800253e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01e      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	d019      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002550:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800255a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800255c:	4b20      	ldr	r3, [pc, #128]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	4a1f      	ldr	r2, [pc, #124]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002572:	4a1b      	ldr	r2, [pc, #108]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800257c:	4a18      	ldr	r2, [pc, #96]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fed3 	bl	8001338 <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002594:	e00b      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe fecf 	bl	8001338 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d902      	bls.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	74fb      	strb	r3, [r7, #19]
            break;
 80025ac:	e006      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ae:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ec      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c2:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d0:	4903      	ldr	r1, [pc, #12]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025d8:	e008      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	74bb      	strb	r3, [r7, #18]
 80025de:	e005      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ec:	7c7b      	ldrb	r3, [r7, #17]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4ba7      	ldr	r3, [pc, #668]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	4aa6      	ldr	r2, [pc, #664]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800260a:	4ba1      	ldr	r3, [pc, #644]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002610:	f023 0203 	bic.w	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	499d      	ldr	r1, [pc, #628]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800262c:	4b98      	ldr	r3, [pc, #608]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002632:	f023 020c 	bic.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4995      	ldr	r1, [pc, #596]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800264e:	4b90      	ldr	r3, [pc, #576]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002654:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	498c      	ldr	r1, [pc, #560]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002670:	4b87      	ldr	r3, [pc, #540]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002676:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	4984      	ldr	r1, [pc, #528]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002692:	4b7f      	ldr	r3, [pc, #508]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002698:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	497b      	ldr	r1, [pc, #492]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026b4:	4b76      	ldr	r3, [pc, #472]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	4973      	ldr	r1, [pc, #460]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	496a      	ldr	r1, [pc, #424]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f8:	4b65      	ldr	r3, [pc, #404]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4962      	ldr	r1, [pc, #392]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800271a:	4b5d      	ldr	r3, [pc, #372]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002720:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	4959      	ldr	r1, [pc, #356]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800273c:	4b54      	ldr	r3, [pc, #336]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	4951      	ldr	r1, [pc, #324]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800275e:	4b4c      	ldr	r3, [pc, #304]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002764:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276c:	4948      	ldr	r1, [pc, #288]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002780:	4b43      	ldr	r3, [pc, #268]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002786:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4940      	ldr	r1, [pc, #256]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800279e:	d105      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c6:	4932      	ldr	r1, [pc, #200]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d6:	d105      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d015      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027f0:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fe:	4924      	ldr	r1, [pc, #144]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280e:	d105      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002810:	4b1f      	ldr	r3, [pc, #124]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a1e      	ldr	r2, [pc, #120]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800281a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002828:	4b19      	ldr	r3, [pc, #100]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002836:	4916      	ldr	r1, [pc, #88]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002846:	d105      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a10      	ldr	r2, [pc, #64]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002852:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d019      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002860:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002866:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4908      	ldr	r1, [pc, #32]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800287e:	d109      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002880:	4b03      	ldr	r3, [pc, #12]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a02      	ldr	r2, [pc, #8]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800288a:	60d3      	str	r3, [r2, #12]
 800288c:	e002      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028a0:	4b29      	ldr	r3, [pc, #164]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	4926      	ldr	r1, [pc, #152]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028c0:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a20      	ldr	r2, [pc, #128]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80028d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e6:	4918      	ldr	r1, [pc, #96]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002902:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002910:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002912:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002916:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800292e:	d105      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800293a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800293c:	7cbb      	ldrb	r3, [r7, #18]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e042      	b.n	80029e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fe fbb1 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2224      	movs	r2, #36	@ 0x24
 800297a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fb24 	bl	8002fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f825 	bl	80029ec <UART_SetConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e01b      	b.n	80029e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fba3 	bl	8003128 <UART_CheckIdleState>
 80029e2:	4603      	mov	r3, r0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f0:	b08c      	sub	sp, #48	@ 0x30
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4baa      	ldr	r3, [pc, #680]	@ (8002cc4 <UART_SetConfig+0x2d8>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a9f      	ldr	r2, [pc, #636]	@ (8002cc8 <UART_SetConfig+0x2dc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a54:	4313      	orrs	r3, r2
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002a62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a76:	f023 010f 	bic.w	r1, r3, #15
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a90      	ldr	r2, [pc, #576]	@ (8002ccc <UART_SetConfig+0x2e0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d125      	bne.n	8002adc <UART_SetConfig+0xf0>
 8002a90:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd0 <UART_SetConfig+0x2e4>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d81a      	bhi.n	8002ad4 <UART_SetConfig+0xe8>
 8002a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa4 <UART_SetConfig+0xb8>)
 8002aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa4:	08002ab5 	.word	0x08002ab5
 8002aa8:	08002ac5 	.word	0x08002ac5
 8002aac:	08002abd 	.word	0x08002abd
 8002ab0:	08002acd 	.word	0x08002acd
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aba:	e116      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002abc:	2302      	movs	r3, #2
 8002abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ac2:	e112      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aca:	e10e      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002acc:	2308      	movs	r3, #8
 8002ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ad2:	e10a      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002ad4:	2310      	movs	r3, #16
 8002ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ada:	e106      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a7c      	ldr	r2, [pc, #496]	@ (8002cd4 <UART_SetConfig+0x2e8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d138      	bne.n	8002b58 <UART_SetConfig+0x16c>
 8002ae6:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd0 <UART_SetConfig+0x2e4>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d82d      	bhi.n	8002b50 <UART_SetConfig+0x164>
 8002af4:	a201      	add	r2, pc, #4	@ (adr r2, 8002afc <UART_SetConfig+0x110>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b31 	.word	0x08002b31
 8002b00:	08002b51 	.word	0x08002b51
 8002b04:	08002b51 	.word	0x08002b51
 8002b08:	08002b51 	.word	0x08002b51
 8002b0c:	08002b41 	.word	0x08002b41
 8002b10:	08002b51 	.word	0x08002b51
 8002b14:	08002b51 	.word	0x08002b51
 8002b18:	08002b51 	.word	0x08002b51
 8002b1c:	08002b39 	.word	0x08002b39
 8002b20:	08002b51 	.word	0x08002b51
 8002b24:	08002b51 	.word	0x08002b51
 8002b28:	08002b51 	.word	0x08002b51
 8002b2c:	08002b49 	.word	0x08002b49
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b36:	e0d8      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b3e:	e0d4      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002b40:	2304      	movs	r3, #4
 8002b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b46:	e0d0      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002b48:	2308      	movs	r3, #8
 8002b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b4e:	e0cc      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002b50:	2310      	movs	r3, #16
 8002b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b56:	e0c8      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a5e      	ldr	r2, [pc, #376]	@ (8002cd8 <UART_SetConfig+0x2ec>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d125      	bne.n	8002bae <UART_SetConfig+0x1c2>
 8002b62:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd0 <UART_SetConfig+0x2e4>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b6c:	2b30      	cmp	r3, #48	@ 0x30
 8002b6e:	d016      	beq.n	8002b9e <UART_SetConfig+0x1b2>
 8002b70:	2b30      	cmp	r3, #48	@ 0x30
 8002b72:	d818      	bhi.n	8002ba6 <UART_SetConfig+0x1ba>
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d00a      	beq.n	8002b8e <UART_SetConfig+0x1a2>
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d814      	bhi.n	8002ba6 <UART_SetConfig+0x1ba>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <UART_SetConfig+0x19a>
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d008      	beq.n	8002b96 <UART_SetConfig+0x1aa>
 8002b84:	e00f      	b.n	8002ba6 <UART_SetConfig+0x1ba>
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b8c:	e0ad      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b94:	e0a9      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002b96:	2304      	movs	r3, #4
 8002b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b9c:	e0a5      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ba4:	e0a1      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002ba6:	2310      	movs	r3, #16
 8002ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bac:	e09d      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8002cdc <UART_SetConfig+0x2f0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d125      	bne.n	8002c04 <UART_SetConfig+0x218>
 8002bb8:	4b45      	ldr	r3, [pc, #276]	@ (8002cd0 <UART_SetConfig+0x2e4>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bc4:	d016      	beq.n	8002bf4 <UART_SetConfig+0x208>
 8002bc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bc8:	d818      	bhi.n	8002bfc <UART_SetConfig+0x210>
 8002bca:	2b80      	cmp	r3, #128	@ 0x80
 8002bcc:	d00a      	beq.n	8002be4 <UART_SetConfig+0x1f8>
 8002bce:	2b80      	cmp	r3, #128	@ 0x80
 8002bd0:	d814      	bhi.n	8002bfc <UART_SetConfig+0x210>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <UART_SetConfig+0x1f0>
 8002bd6:	2b40      	cmp	r3, #64	@ 0x40
 8002bd8:	d008      	beq.n	8002bec <UART_SetConfig+0x200>
 8002bda:	e00f      	b.n	8002bfc <UART_SetConfig+0x210>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002be2:	e082      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002be4:	2302      	movs	r3, #2
 8002be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bea:	e07e      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002bec:	2304      	movs	r3, #4
 8002bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bf2:	e07a      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bfa:	e076      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c02:	e072      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a35      	ldr	r2, [pc, #212]	@ (8002ce0 <UART_SetConfig+0x2f4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d12a      	bne.n	8002c64 <UART_SetConfig+0x278>
 8002c0e:	4b30      	ldr	r3, [pc, #192]	@ (8002cd0 <UART_SetConfig+0x2e4>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c1c:	d01a      	beq.n	8002c54 <UART_SetConfig+0x268>
 8002c1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c22:	d81b      	bhi.n	8002c5c <UART_SetConfig+0x270>
 8002c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c28:	d00c      	beq.n	8002c44 <UART_SetConfig+0x258>
 8002c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2e:	d815      	bhi.n	8002c5c <UART_SetConfig+0x270>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <UART_SetConfig+0x250>
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c38:	d008      	beq.n	8002c4c <UART_SetConfig+0x260>
 8002c3a:	e00f      	b.n	8002c5c <UART_SetConfig+0x270>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c42:	e052      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002c44:	2302      	movs	r3, #2
 8002c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c4a:	e04e      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c52:	e04a      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002c54:	2308      	movs	r3, #8
 8002c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c5a:	e046      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c62:	e042      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a17      	ldr	r2, [pc, #92]	@ (8002cc8 <UART_SetConfig+0x2dc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d13a      	bne.n	8002ce4 <UART_SetConfig+0x2f8>
 8002c6e:	4b18      	ldr	r3, [pc, #96]	@ (8002cd0 <UART_SetConfig+0x2e4>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c7c:	d01a      	beq.n	8002cb4 <UART_SetConfig+0x2c8>
 8002c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c82:	d81b      	bhi.n	8002cbc <UART_SetConfig+0x2d0>
 8002c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c88:	d00c      	beq.n	8002ca4 <UART_SetConfig+0x2b8>
 8002c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c8e:	d815      	bhi.n	8002cbc <UART_SetConfig+0x2d0>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <UART_SetConfig+0x2b0>
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c98:	d008      	beq.n	8002cac <UART_SetConfig+0x2c0>
 8002c9a:	e00f      	b.n	8002cbc <UART_SetConfig+0x2d0>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ca2:	e022      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002caa:	e01e      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002cac:	2304      	movs	r3, #4
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cb2:	e01a      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cba:	e016      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cc2:	e012      	b.n	8002cea <UART_SetConfig+0x2fe>
 8002cc4:	cfff69f3 	.word	0xcfff69f3
 8002cc8:	40008000 	.word	0x40008000
 8002ccc:	40013800 	.word	0x40013800
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40004400 	.word	0x40004400
 8002cd8:	40004800 	.word	0x40004800
 8002cdc:	40004c00 	.word	0x40004c00
 8002ce0:	40005000 	.word	0x40005000
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4aae      	ldr	r2, [pc, #696]	@ (8002fa8 <UART_SetConfig+0x5bc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	f040 8097 	bne.w	8002e24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d823      	bhi.n	8002d46 <UART_SetConfig+0x35a>
 8002cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <UART_SetConfig+0x318>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d47 	.word	0x08002d47
 8002d0c:	08002d31 	.word	0x08002d31
 8002d10:	08002d47 	.word	0x08002d47
 8002d14:	08002d37 	.word	0x08002d37
 8002d18:	08002d47 	.word	0x08002d47
 8002d1c:	08002d47 	.word	0x08002d47
 8002d20:	08002d47 	.word	0x08002d47
 8002d24:	08002d3f 	.word	0x08002d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7ff fb50 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8002d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d2e:	e010      	b.n	8002d52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d30:	4b9e      	ldr	r3, [pc, #632]	@ (8002fac <UART_SetConfig+0x5c0>)
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d34:	e00d      	b.n	8002d52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d36:	f7ff fadb 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 8002d3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d3c:	e009      	b.n	8002d52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d44:	e005      	b.n	8002d52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8130 	beq.w	8002fba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	4a94      	ldr	r2, [pc, #592]	@ (8002fb0 <UART_SetConfig+0x5c4>)
 8002d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d64:	461a      	mov	r2, r3
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d305      	bcc.n	8002d8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d903      	bls.n	8002d92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d90:	e113      	b.n	8002fba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	2200      	movs	r2, #0
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	60fa      	str	r2, [r7, #12]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	4a84      	ldr	r2, [pc, #528]	@ (8002fb0 <UART_SetConfig+0x5c4>)
 8002da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2200      	movs	r2, #0
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002db0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002db4:	f7fd fd66 	bl	8000884 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	020b      	lsls	r3, r1, #8
 8002dca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002dce:	0202      	lsls	r2, r0, #8
 8002dd0:	6979      	ldr	r1, [r7, #20]
 8002dd2:	6849      	ldr	r1, [r1, #4]
 8002dd4:	0849      	lsrs	r1, r1, #1
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	460c      	mov	r4, r1
 8002dda:	4605      	mov	r5, r0
 8002ddc:	eb12 0804 	adds.w	r8, r2, r4
 8002de0:	eb43 0905 	adc.w	r9, r3, r5
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	469a      	mov	sl, r3
 8002dec:	4693      	mov	fp, r2
 8002dee:	4652      	mov	r2, sl
 8002df0:	465b      	mov	r3, fp
 8002df2:	4640      	mov	r0, r8
 8002df4:	4649      	mov	r1, r9
 8002df6:	f7fd fd45 	bl	8000884 <__aeabi_uldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4613      	mov	r3, r2
 8002e00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e08:	d308      	bcc.n	8002e1c <UART_SetConfig+0x430>
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e10:	d204      	bcs.n	8002e1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a3a      	ldr	r2, [r7, #32]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	e0ce      	b.n	8002fba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e22:	e0ca      	b.n	8002fba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e2c:	d166      	bne.n	8002efc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d827      	bhi.n	8002e86 <UART_SetConfig+0x49a>
 8002e36:	a201      	add	r2, pc, #4	@ (adr r2, 8002e3c <UART_SetConfig+0x450>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e61 	.word	0x08002e61
 8002e40:	08002e69 	.word	0x08002e69
 8002e44:	08002e71 	.word	0x08002e71
 8002e48:	08002e87 	.word	0x08002e87
 8002e4c:	08002e77 	.word	0x08002e77
 8002e50:	08002e87 	.word	0x08002e87
 8002e54:	08002e87 	.word	0x08002e87
 8002e58:	08002e87 	.word	0x08002e87
 8002e5c:	08002e7f 	.word	0x08002e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e60:	f7ff fab4 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8002e64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e66:	e014      	b.n	8002e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e68:	f7ff fac6 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 8002e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e6e:	e010      	b.n	8002e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e70:	4b4e      	ldr	r3, [pc, #312]	@ (8002fac <UART_SetConfig+0x5c0>)
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e74:	e00d      	b.n	8002e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e76:	f7ff fa3b 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 8002e7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e7c:	e009      	b.n	8002e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e84:	e005      	b.n	8002e92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8090 	beq.w	8002fba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	4a44      	ldr	r2, [pc, #272]	@ (8002fb0 <UART_SetConfig+0x5c4>)
 8002ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eac:	005a      	lsls	r2, r3, #1
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	441a      	add	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	d916      	bls.n	8002ef4 <UART_SetConfig+0x508>
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ecc:	d212      	bcs.n	8002ef4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	f023 030f 	bic.w	r3, r3, #15
 8002ed6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	8bfb      	ldrh	r3, [r7, #30]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	8bfa      	ldrh	r2, [r7, #30]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	e062      	b.n	8002fba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002efa:	e05e      	b.n	8002fba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002efc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d828      	bhi.n	8002f56 <UART_SetConfig+0x56a>
 8002f04:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <UART_SetConfig+0x520>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f57 	.word	0x08002f57
 8002f1c:	08002f47 	.word	0x08002f47
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f57 	.word	0x08002f57
 8002f28:	08002f57 	.word	0x08002f57
 8002f2c:	08002f4f 	.word	0x08002f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7ff fa4c 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8002f34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f36:	e014      	b.n	8002f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f38:	f7ff fa5e 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 8002f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f3e:	e010      	b.n	8002f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <UART_SetConfig+0x5c0>)
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f44:	e00d      	b.n	8002f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f46:	f7ff f9d3 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 8002f4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f4c:	e009      	b.n	8002f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f54:	e005      	b.n	8002f62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f60:	bf00      	nop
    }

    if (pclk != 0U)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d028      	beq.n	8002fba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	4a10      	ldr	r2, [pc, #64]	@ (8002fb0 <UART_SetConfig+0x5c4>)
 8002f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f72:	461a      	mov	r2, r3
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	441a      	add	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	d910      	bls.n	8002fb4 <UART_SetConfig+0x5c8>
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f98:	d20c      	bcs.n	8002fb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60da      	str	r2, [r3, #12]
 8002fa4:	e009      	b.n	8002fba <UART_SetConfig+0x5ce>
 8002fa6:	bf00      	nop
 8002fa8:	40008000 	.word	0x40008000
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	080036b0 	.word	0x080036b0
      }
      else
      {
        ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002fd6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3730      	adds	r7, #48	@ 0x30
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01a      	beq.n	80030fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030e2:	d10a      	bne.n	80030fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  }
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b098      	sub	sp, #96	@ 0x60
 800312c:	af02      	add	r7, sp, #8
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003138:	f7fe f8fe 	bl	8001338 <HAL_GetTick>
 800313c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b08      	cmp	r3, #8
 800314a:	d12f      	bne.n	80031ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800314c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003154:	2200      	movs	r2, #0
 8003156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f88e 	bl	800327c <UART_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d022      	beq.n	80031ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800317a:	653b      	str	r3, [r7, #80]	@ 0x50
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003184:	647b      	str	r3, [r7, #68]	@ 0x44
 8003186:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800318a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800318c:	e841 2300 	strex	r3, r2, [r1]
 8003190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e6      	bne.n	8003166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e063      	b.n	8003274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d149      	bne.n	800324e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c2:	2200      	movs	r2, #0
 80031c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f857 	bl	800327c <UART_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d03c      	beq.n	800324e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	623b      	str	r3, [r7, #32]
   return(result);
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80031f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e6      	bne.n	80031d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3308      	adds	r3, #8
 800320c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	60fb      	str	r3, [r7, #12]
   return(result);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3308      	adds	r3, #8
 8003224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003226:	61fa      	str	r2, [r7, #28]
 8003228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	69b9      	ldr	r1, [r7, #24]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	617b      	str	r3, [r7, #20]
   return(result);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e5      	bne.n	8003206 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e012      	b.n	8003274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3758      	adds	r7, #88	@ 0x58
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328c:	e04f      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d04b      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7fe f84f 	bl	8001338 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <UART_WaitOnFlagUntilTimeout+0x30>
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e04e      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d037      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb2>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b80      	cmp	r3, #128	@ 0x80
 80032c2:	d034      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb2>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b40      	cmp	r3, #64	@ 0x40
 80032c8:	d031      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d110      	bne.n	80032fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2208      	movs	r2, #8
 80032de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f838 	bl	8003356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2208      	movs	r2, #8
 80032ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e029      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003308:	d111      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f81e 	bl	8003356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e00f      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	429a      	cmp	r2, r3
 800334a:	d0a0      	beq.n	800328e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003356:	b480      	push	{r7}
 8003358:	b095      	sub	sp, #84	@ 0x54
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800336c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800337c:	643b      	str	r3, [r7, #64]	@ 0x40
 800337e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003382:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800338a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e6      	bne.n	800335e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3308      	adds	r3, #8
 8003396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e3      	bne.n	8003390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d118      	bne.n	8003402 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f023 0310 	bic.w	r3, r3, #16
 80033e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	613b      	str	r3, [r7, #16]
   return(result);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e6      	bne.n	80033d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003416:	bf00      	nop
 8003418:	3754      	adds	r7, #84	@ 0x54
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_UARTEx_DisableFifoMode+0x16>
 8003434:	2302      	movs	r3, #2
 8003436:	e027      	b.n	8003488 <HAL_UARTEx_DisableFifoMode+0x66>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2224      	movs	r2, #36	@ 0x24
 8003444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003466:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e02d      	b.n	8003508 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	@ 0x24
 80034b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f84f 	bl	800358c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003524:	2302      	movs	r3, #2
 8003526:	e02d      	b.n	8003584 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	@ 0x24
 8003534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f811 	bl	800358c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003598:	2b00      	cmp	r3, #0
 800359a:	d108      	bne.n	80035ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80035ac:	e031      	b.n	8003612 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80035ae:	2308      	movs	r3, #8
 80035b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80035b2:	2308      	movs	r3, #8
 80035b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	0e5b      	lsrs	r3, r3, #25
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	0f5b      	lsrs	r3, r3, #29
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035d6:	7bbb      	ldrb	r3, [r7, #14]
 80035d8:	7b3a      	ldrb	r2, [r7, #12]
 80035da:	4911      	ldr	r1, [pc, #68]	@ (8003620 <UARTEx_SetNbDataToProcess+0x94>)
 80035dc:	5c8a      	ldrb	r2, [r1, r2]
 80035de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80035e2:	7b3a      	ldrb	r2, [r7, #12]
 80035e4:	490f      	ldr	r1, [pc, #60]	@ (8003624 <UARTEx_SetNbDataToProcess+0x98>)
 80035e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	7b7a      	ldrb	r2, [r7, #13]
 80035f8:	4909      	ldr	r1, [pc, #36]	@ (8003620 <UARTEx_SetNbDataToProcess+0x94>)
 80035fa:	5c8a      	ldrb	r2, [r1, r2]
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003600:	7b7a      	ldrb	r2, [r7, #13]
 8003602:	4908      	ldr	r1, [pc, #32]	@ (8003624 <UARTEx_SetNbDataToProcess+0x98>)
 8003604:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003606:	fb93 f3f2 	sdiv	r3, r3, r2
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	080036c8 	.word	0x080036c8
 8003624:	080036d0 	.word	0x080036d0

08003628 <memset>:
 8003628:	4402      	add	r2, r0
 800362a:	4603      	mov	r3, r0
 800362c:	4293      	cmp	r3, r2
 800362e:	d100      	bne.n	8003632 <memset+0xa>
 8003630:	4770      	bx	lr
 8003632:	f803 1b01 	strb.w	r1, [r3], #1
 8003636:	e7f9      	b.n	800362c <memset+0x4>

08003638 <__libc_init_array>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	4d0d      	ldr	r5, [pc, #52]	@ (8003670 <__libc_init_array+0x38>)
 800363c:	4c0d      	ldr	r4, [pc, #52]	@ (8003674 <__libc_init_array+0x3c>)
 800363e:	1b64      	subs	r4, r4, r5
 8003640:	10a4      	asrs	r4, r4, #2
 8003642:	2600      	movs	r6, #0
 8003644:	42a6      	cmp	r6, r4
 8003646:	d109      	bne.n	800365c <__libc_init_array+0x24>
 8003648:	4d0b      	ldr	r5, [pc, #44]	@ (8003678 <__libc_init_array+0x40>)
 800364a:	4c0c      	ldr	r4, [pc, #48]	@ (800367c <__libc_init_array+0x44>)
 800364c:	f000 f818 	bl	8003680 <_init>
 8003650:	1b64      	subs	r4, r4, r5
 8003652:	10a4      	asrs	r4, r4, #2
 8003654:	2600      	movs	r6, #0
 8003656:	42a6      	cmp	r6, r4
 8003658:	d105      	bne.n	8003666 <__libc_init_array+0x2e>
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003660:	4798      	blx	r3
 8003662:	3601      	adds	r6, #1
 8003664:	e7ee      	b.n	8003644 <__libc_init_array+0xc>
 8003666:	f855 3b04 	ldr.w	r3, [r5], #4
 800366a:	4798      	blx	r3
 800366c:	3601      	adds	r6, #1
 800366e:	e7f2      	b.n	8003656 <__libc_init_array+0x1e>
 8003670:	080036e0 	.word	0x080036e0
 8003674:	080036e0 	.word	0x080036e0
 8003678:	080036e0 	.word	0x080036e0
 800367c:	080036e4 	.word	0x080036e4

08003680 <_init>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	bf00      	nop
 8003684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003686:	bc08      	pop	{r3}
 8003688:	469e      	mov	lr, r3
 800368a:	4770      	bx	lr

0800368c <_fini>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr
