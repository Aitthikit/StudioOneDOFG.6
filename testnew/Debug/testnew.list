
testnew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd34  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bf0c  0800bf0c  0000cf0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf4c  0800bf4c  0000d224  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf4c  0800bf4c  0000cf4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf54  0800bf54  0000d224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf54  0800bf54  0000cf54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf58  0800bf58  0000cf58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800bf5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e4  20000228  0800c180  0000d228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000140c  0800c180  0000d40c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b09c  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f59  00000000  00000000  000282f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0002b250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ba  00000000  00000000  0002c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002871b  00000000  00000000  0002da5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ef8  00000000  00000000  00056175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011378f  00000000  00000000  0007006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001837fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006328  00000000  00000000  00183840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00189b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000228 	.word	0x20000228
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bef4 	.word	0x0800bef4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000022c 	.word	0x2000022c
 8000214:	0800bef4 	.word	0x0800bef4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000244 	.word	0x20000244

08000ed4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <modbus_3t5_Timeout+0x1c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	755a      	strb	r2, [r3, #21]

}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	20000244 	.word	0x20000244

08000ef4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f009 fe97 	bl	800ac30 <HAL_UART_GetError>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d101      	bne.n	8000f0c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f08:	f7ff ffc4 	bl	8000e94 <modbus_1t5_Timeout>

	}
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f1e:	4a25      	ldr	r2, [pc, #148]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f24:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <Modbus_init+0xa4>)
 8000f32:	210e      	movs	r1, #14
 8000f34:	4618      	mov	r0, r3
 8000f36:	f008 f953 	bl	80091e0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4618      	mov	r0, r3
 8000f42:	f009 fe1f 	bl	800ab84 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f009 fe36 	bl	800abbc <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <Modbus_init+0xa8>)
 8000f56:	2104      	movs	r1, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f009 f8fd 	bl	800a158 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f70:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f74:	4413      	add	r3, r2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f009 fa25 	bl	800a3cc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10c      	bne.n	8000fac <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 f8f3 	bl	8008184 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <Modbus_init+0xa0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f007 fb4c 	bl	8008644 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000244 	.word	0x20000244
 8000fb8:	08000ed5 	.word	0x08000ed5
 8000fbc:	08000ef5 	.word	0x08000ef5

08000fc0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000fcc:	23ff      	movs	r3, #255	@ 0xff
 8000fce:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000fd0:	23ff      	movs	r3, #255	@ 0xff
 8000fd2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000fd4:	e013      	b.n	8000ffe <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	4053      	eors	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <CRC16+0x64>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <CRC16+0x68>)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000ffe:	883b      	ldrh	r3, [r7, #0]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	803a      	strh	r2, [r7, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1e6      	bne.n	8000fd6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29b      	uxth	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000100 	.word	0x20000100
 8001028:	20000000 	.word	0x20000000

0800102c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001032:	4b7e      	ldr	r3, [pc, #504]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	7ddb      	ldrb	r3, [r3, #23]
 8001038:	3b01      	subs	r3, #1
 800103a:	2b03      	cmp	r3, #3
 800103c:	d80a      	bhi.n	8001054 <Modbus_Protocal_Worker+0x28>
 800103e:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <Modbus_Protocal_Worker+0x18>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	0800105f 	.word	0x0800105f
 8001048:	080011f3 	.word	0x080011f3
 800104c:	080010eb 	.word	0x080010eb
 8001050:	0800112f 	.word	0x0800112f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001054:	4b75      	ldr	r3, [pc, #468]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	75da      	strb	r2, [r3, #23]
		break;
 800105c:	e0e1      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800105e:	4b73      	ldr	r3, [pc, #460]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800106a:	4b70      	ldr	r3, [pc, #448]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2202      	movs	r2, #2
 8001070:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001072:	f000 f9cd 	bl	8001410 <Modbus_Emission>
 8001076:	e018      	b.n	80010aa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001078:	4b6c      	ldr	r3, [pc, #432]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001082:	4b6a      	ldr	r3, [pc, #424]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800108c:	b29b      	uxth	r3, r3
 800108e:	429a      	cmp	r2, r3
 8001090:	d00b      	beq.n	80010aa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001092:	4b66      	ldr	r3, [pc, #408]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800109a:	4b64      	ldr	r3, [pc, #400]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010a2:	4b62      	ldr	r3, [pc, #392]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2203      	movs	r2, #3
 80010a8:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010aa:	4b60      	ldr	r3, [pc, #384]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b4:	2b20      	cmp	r3, #32
 80010b6:	f040 80ad 	bne.w	8001214 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010ba:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b57      	ldr	r3, [pc, #348]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010d6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010da:	4413      	add	r3, r2
 80010dc:	3302      	adds	r3, #2
 80010de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010e2:	4619      	mov	r1, r3
 80010e4:	f009 f972 	bl	800a3cc <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80010e8:	e094      	b.n	8001214 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	7d1b      	ldrb	r3, [r3, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8091 	beq.w	8001218 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80010f6:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	22fe      	movs	r2, #254	@ 0xfe
 80010fc:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80010fe:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001108:	4b48      	ldr	r3, [pc, #288]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001118:	4b44      	ldr	r3, [pc, #272]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800111a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800111c:	1a8a      	subs	r2, r1, r2
 800111e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001120:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800112c:	e074      	b.n	8001218 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800112e:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001136:	f113 0f02 	cmn.w	r3, #2
 800113a:	d150      	bne.n	80011de <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800113c:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001144:	4b39      	ldr	r3, [pc, #228]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800114c:	4b37      	ldr	r3, [pc, #220]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001154:	3b02      	subs	r3, #2
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff ff31 	bl	8000fc0 <CRC16>
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001162:	793a      	ldrb	r2, [r7, #4]
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	4b30      	ldr	r3, [pc, #192]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001170:	3b02      	subs	r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001178:	429a      	cmp	r2, r3
 800117a:	d10c      	bne.n	8001196 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800117c:	797a      	ldrb	r2, [r7, #5]
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800118a:	3b01      	subs	r3, #1
 800118c:	440b      	add	r3, r1
 800118e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001192:	429a      	cmp	r2, r3
 8001194:	d004      	beq.n	80011a0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	22ff      	movs	r2, #255	@ 0xff
 800119c:	759a      	strb	r2, [r3, #22]
				break;
 800119e:	e040      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d113      	bne.n	80011da <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80011c2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011cc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80011ce:	461a      	mov	r2, r3
 80011d0:	f00a fe82 	bl	800bed8 <memcpy>

			//execute command
			Modbus_frame_response();
 80011d4:	f000 f904 	bl	80013e0 <Modbus_frame_response>
 80011d8:	e001      	b.n	80011de <Modbus_Protocal_Worker+0x1b2>
				break;
 80011da:	bf00      	nop
					}
		break;


	}
}
 80011dc:	e021      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	7d5b      	ldrb	r3, [r3, #21]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d019      	beq.n	800121c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	75da      	strb	r2, [r3, #23]
		break;
 80011f0:	e014      	b.n	800121c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fc:	2b20      	cmp	r3, #32
 80011fe:	d10f      	bne.n	8001220 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	75da      	strb	r2, [r3, #23]
		break;
 8001212:	e005      	b.n	8001220 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001214:	bf00      	nop
 8001216:	e004      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001218:	bf00      	nop
 800121a:	e002      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 800121c:	bf00      	nop
 800121e:	e000      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001220:	bf00      	nop
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000244 	.word	0x20000244

08001230 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	7e5b      	ldrb	r3, [r3, #25]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	4a1a      	ldr	r2, [pc, #104]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	7e92      	ldrb	r2, [r2, #26]
 8001246:	4413      	add	r3, r2
 8001248:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800124a:	88fa      	ldrh	r2, [r7, #6]
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <modbusWrite1Register+0x7c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	429a      	cmp	r2, r3
 8001254:	d903      	bls.n	800125e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001256:	2002      	movs	r0, #2
 8001258:	f000 f8a0 	bl	800139c <ModbusErrorReply>
			 return;
 800125c:	e023      	b.n	80012a6 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	440b      	add	r3, r1
 800126e:	7ed2      	ldrb	r2, [r2, #27]
 8001270:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	7f12      	ldrb	r2, [r2, #28]
 8001284:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001294:	2208      	movs	r2, #8
 8001296:	4619      	mov	r1, r3
 8001298:	f00a fe1e 	bl	800bed8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <modbusWrite1Register+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000244 	.word	0x20000244

080012b0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <modbusRead1Register+0xe8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	7edb      	ldrb	r3, [r3, #27]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4a35      	ldr	r2, [pc, #212]	@ (8001398 <modbusRead1Register+0xe8>)
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	7f12      	ldrb	r2, [r2, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80012ca:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <modbusRead1Register+0xe8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	7e5b      	ldrb	r3, [r3, #25]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4a30      	ldr	r2, [pc, #192]	@ (8001398 <modbusRead1Register+0xe8>)
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	7e92      	ldrb	r2, [r2, #26]
 80012da:	4413      	add	r3, r2
 80012dc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <modbusRead1Register+0x3a>
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	2b7d      	cmp	r3, #125	@ 0x7d
 80012e8:	d903      	bls.n	80012f2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 f856 	bl	800139c <ModbusErrorReply>
		 return;
 80012f0:	e04e      	b.n	8001390 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <modbusRead1Register+0xe8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d808      	bhi.n	8001310 <modbusRead1Register+0x60>
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4413      	add	r3, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <modbusRead1Register+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	429a      	cmp	r2, r3
 800130e:	d903      	bls.n	8001318 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001310:	2002      	movs	r0, #2
 8001312:	f000 f843 	bl	800139c <ModbusErrorReply>
		 return;
 8001316:	e03b      	b.n	8001390 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <modbusRead1Register+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <modbusRead1Register+0xe8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0052      	lsls	r2, r2, #1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001332:	2400      	movs	r4, #0
 8001334:	e020      	b.n	8001378 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <modbusRead1Register+0xe8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	4423      	add	r3, r4
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	18d1      	adds	r1, r2, r3
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <modbusRead1Register+0xe8>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	1c63      	adds	r3, r4, #1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	7849      	ldrb	r1, [r1, #1]
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <modbusRead1Register+0xe8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	4423      	add	r3, r4
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <modbusRead1Register+0xe8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	0063      	lsls	r3, r4, #1
 800136a:	3303      	adds	r3, #3
 800136c:	7809      	ldrb	r1, [r1, #0]
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001376:	3401      	adds	r4, #1
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	429c      	cmp	r4, r3
 800137c:	dbdb      	blt.n	8001336 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	3301      	adds	r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <modbusRead1Register+0xe8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0052      	lsls	r2, r2, #1
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	20000244 	.word	0x20000244

0800139c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <ModbusErrorReply+0x40>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	7e1a      	ldrb	r2, [r3, #24]
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <ModbusErrorReply+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <ModbusErrorReply+0x40>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <ModbusErrorReply+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2202      	movs	r2, #2
 80013ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000244 	.word	0x20000244

080013e0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <Modbus_frame_response+0x2c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	7e1b      	ldrb	r3, [r3, #24]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d004      	beq.n	80013f8 <Modbus_frame_response+0x18>
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d105      	bne.n	80013fe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80013f2:	f7ff ff1d 	bl	8001230 <modbusWrite1Register>
		break;
 80013f6:	e006      	b.n	8001406 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80013f8:	f7ff ff5a 	bl	80012b0 <modbusRead1Register>
		break;
 80013fc:	e003      	b.n	8001406 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff ffcc 	bl	800139c <ModbusErrorReply>
		break;
 8001404:	bf00      	nop

	}
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000244 	.word	0x20000244

08001410 <Modbus_Emission>:

void Modbus_Emission()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001420:	2b20      	cmp	r3, #32
 8001422:	d15d      	bne.n	80014e0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <Modbus_Emission+0xe8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800143a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <Modbus_Emission+0xe8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800144c:	461a      	mov	r2, r3
 800144e:	f00a fd43 	bl	800bed8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800145a:	461a      	mov	r2, r3
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <Modbus_Emission+0xe8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3203      	adds	r2, #3
 8001462:	b292      	uxth	r2, r2
 8001464:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <Modbus_Emission+0xe8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001478:	3b02      	subs	r3, #2
 800147a:	4619      	mov	r1, r3
 800147c:	4610      	mov	r0, r2
 800147e:	f7ff fd9f 	bl	8000fc0 <CRC16>
 8001482:	4603      	mov	r3, r0
 8001484:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <Modbus_Emission+0xe8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001492:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001494:	7939      	ldrb	r1, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014aa:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014ac:	7979      	ldrb	r1, [r7, #5]
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d10d      	bne.n	80014e0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014da:	461a      	mov	r2, r3
 80014dc:	f008 fef6 	bl	800a2cc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	755a      	strb	r2, [r3, #21]

}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000244 	.word	0x20000244

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001504:	f003 fa2b 	bl	800495e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 fbf6 	bl	8001cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f000 ffca 	bl	80024a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001510:	f000 ff8e 	bl	8002430 <MX_DMA_Init>
  MX_TIM1_Init();
 8001514:	f000 fcc4 	bl	8001ea0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001518:	f000 fd16 	bl	8001f48 <MX_TIM2_Init>
  MX_TIM3_Init();
 800151c:	f000 fd62 	bl	8001fe4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001520:	f000 fdb6 	bl	8002090 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001524:	f000 feb2 	bl	800228c <MX_TIM8_Init>
  MX_TIM5_Init();
 8001528:	f000 fe2a 	bl	8002180 <MX_TIM5_Init>
  MX_ADC3_Init();
 800152c:	f000 fc30 	bl	8001d90 <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8001530:	f000 ff30 	bl	8002394 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001534:	f000 fefe 	bl	8002334 <MX_TIM16_Init>
  MX_TIM6_Init();
 8001538:	f000 fe70 	bl	800221c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 800153c:	4895      	ldr	r0, [pc, #596]	@ (8001794 <main+0x298>)
 800153e:	f006 fdb1 	bl	80080a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001542:	2100      	movs	r1, #0
 8001544:	4893      	ldr	r0, [pc, #588]	@ (8001794 <main+0x298>)
 8001546:	f006 ff03 	bl	8008350 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800154a:	213c      	movs	r1, #60	@ 0x3c
 800154c:	4892      	ldr	r0, [pc, #584]	@ (8001798 <main+0x29c>)
 800154e:	f007 f9bb 	bl	80088c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001552:	4892      	ldr	r0, [pc, #584]	@ (800179c <main+0x2a0>)
 8001554:	f006 fe16 	bl	8008184 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001558:	4891      	ldr	r0, [pc, #580]	@ (80017a0 <main+0x2a4>)
 800155a:	f006 fe13 	bl	8008184 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800155e:	217f      	movs	r1, #127	@ 0x7f
 8001560:	4890      	ldr	r0, [pc, #576]	@ (80017a4 <main+0x2a8>)
 8001562:	f004 fd7b 	bl	800605c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joyAnalogRead, 40);
 8001566:	2228      	movs	r2, #40	@ 0x28
 8001568:	498f      	ldr	r1, [pc, #572]	@ (80017a8 <main+0x2ac>)
 800156a:	488e      	ldr	r0, [pc, #568]	@ (80017a4 <main+0x2a8>)
 800156c:	f003 fe68 	bl	8005240 <HAL_ADC_Start_DMA>
  _micros = 0;
 8001570:	498e      	ldr	r1, [pc, #568]	@ (80017ac <main+0x2b0>)
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9c1 2300 	strd	r2, r3, [r1]

	Velocontrol.kp = 0.12;//157;//225;//180
 800157e:	4b8c      	ldr	r3, [pc, #560]	@ (80017b0 <main+0x2b4>)
 8001580:	4a8c      	ldr	r2, [pc, #560]	@ (80017b4 <main+0x2b8>)
 8001582:	619a      	str	r2, [r3, #24]
	Velocontrol.ki = 0.0001;//74;//2;//25
 8001584:	4b8a      	ldr	r3, [pc, #552]	@ (80017b0 <main+0x2b4>)
 8001586:	4a8c      	ldr	r2, [pc, #560]	@ (80017b8 <main+0x2bc>)
 8001588:	61da      	str	r2, [r3, #28]
	Velocontrol.kd = 0;
 800158a:	4b89      	ldr	r3, [pc, #548]	@ (80017b0 <main+0x2b4>)
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
	Velocontrol.T = 0.0001;
 8001592:	4b87      	ldr	r3, [pc, #540]	@ (80017b0 <main+0x2b4>)
 8001594:	4a88      	ldr	r2, [pc, #544]	@ (80017b8 <main+0x2bc>)
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol.kp = 50;//0.123;//2.1;//1;//0.5667;//2.015,0.6
 8001598:	4b88      	ldr	r3, [pc, #544]	@ (80017bc <main+0x2c0>)
 800159a:	4a89      	ldr	r2, [pc, #548]	@ (80017c0 <main+0x2c4>)
 800159c:	619a      	str	r2, [r3, #24]
	Poscontrol.ki = 0.06;//1;//0.46;//0.4;//1.29;//4.5425,1.34
 800159e:	4b87      	ldr	r3, [pc, #540]	@ (80017bc <main+0x2c0>)
 80015a0:	4a88      	ldr	r2, [pc, #544]	@ (80017c4 <main+0x2c8>)
 80015a2:	61da      	str	r2, [r3, #28]
	Poscontrol.kd = 0;//0.00005;//0.0000007;//0.000001;//0.0000021,0.0000004
 80015a4:	4b85      	ldr	r3, [pc, #532]	@ (80017bc <main+0x2c0>)
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
	Poscontrol.T = 0.0001;
 80015ac:	4b83      	ldr	r3, [pc, #524]	@ (80017bc <main+0x2c0>)
 80015ae:	4a82      	ldr	r2, [pc, #520]	@ (80017b8 <main+0x2bc>)
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24

	Velocontrol2.kp = 50;//225;//180
 80015b2:	4b85      	ldr	r3, [pc, #532]	@ (80017c8 <main+0x2cc>)
 80015b4:	4a82      	ldr	r2, [pc, #520]	@ (80017c0 <main+0x2c4>)
 80015b6:	619a      	str	r2, [r3, #24]
	Velocontrol2.ki = 1;//2;//25
 80015b8:	4b83      	ldr	r3, [pc, #524]	@ (80017c8 <main+0x2cc>)
 80015ba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015be:	61da      	str	r2, [r3, #28]
	Velocontrol2.kd = 0;
 80015c0:	4b81      	ldr	r3, [pc, #516]	@ (80017c8 <main+0x2cc>)
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
	Velocontrol2.T = 0.0001;
 80015c8:	4b7f      	ldr	r3, [pc, #508]	@ (80017c8 <main+0x2cc>)
 80015ca:	4a7b      	ldr	r2, [pc, #492]	@ (80017b8 <main+0x2bc>)
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol2.kp = 10;//0.5667;//2.015,0.6
 80015ce:	4b7f      	ldr	r3, [pc, #508]	@ (80017cc <main+0x2d0>)
 80015d0:	4a7f      	ldr	r2, [pc, #508]	@ (80017d0 <main+0x2d4>)
 80015d2:	619a      	str	r2, [r3, #24]
	Poscontrol2.ki = 1;//1.29;//4.5425,1.34
 80015d4:	4b7d      	ldr	r3, [pc, #500]	@ (80017cc <main+0x2d0>)
 80015d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015da:	61da      	str	r2, [r3, #28]
	Poscontrol2.kd = 0.0000007;//0.000001;//0.0000021,0.0000004
 80015dc:	4b7b      	ldr	r3, [pc, #492]	@ (80017cc <main+0x2d0>)
 80015de:	4a7d      	ldr	r2, [pc, #500]	@ (80017d4 <main+0x2d8>)
 80015e0:	621a      	str	r2, [r3, #32]
	Poscontrol2.T = 0.0001;
 80015e2:	4b7a      	ldr	r3, [pc, #488]	@ (80017cc <main+0x2d0>)
 80015e4:	4a74      	ldr	r2, [pc, #464]	@ (80017b8 <main+0x2bc>)
 80015e6:	625a      	str	r2, [r3, #36]	@ 0x24

	hmodbus.huart = &huart2;
 80015e8:	4b7b      	ldr	r3, [pc, #492]	@ (80017d8 <main+0x2dc>)
 80015ea:	4a7c      	ldr	r2, [pc, #496]	@ (80017dc <main+0x2e0>)
 80015ec:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80015ee:	4b7a      	ldr	r3, [pc, #488]	@ (80017d8 <main+0x2dc>)
 80015f0:	4a7b      	ldr	r2, [pc, #492]	@ (80017e0 <main+0x2e4>)
 80015f2:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015f4:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <main+0x2dc>)
 80015f6:	2215      	movs	r2, #21
 80015f8:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize =200;
 80015fa:	4b77      	ldr	r3, [pc, #476]	@ (80017d8 <main+0x2dc>)
 80015fc:	22c8      	movs	r2, #200	@ 0xc8
 80015fe:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001600:	4978      	ldr	r1, [pc, #480]	@ (80017e4 <main+0x2e8>)
 8001602:	4875      	ldr	r0, [pc, #468]	@ (80017d8 <main+0x2dc>)
 8001604:	f7ff fc86 	bl	8000f14 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ModBus
	  Modbus_Protocal_Worker();
 8001608:	f7ff fd10 	bl	800102c <Modbus_Protocal_Worker>
	  State_To_Mode();
 800160c:	f002 fa38 	bl	8003a80 <State_To_Mode>
//	  HAL_Delay(1000);
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);//PULL/PUSH
//	  HAL_Delay(1000);
	  //ModBus
	  static uint64_t Heartbeattime =0;
	  if(Heartbeattime < HAL_GetTick())
 8001610:	f003 fa0a 	bl	8004a28 <HAL_GetTick>
 8001614:	4603      	mov	r3, r0
 8001616:	2200      	movs	r2, #0
 8001618:	461c      	mov	r4, r3
 800161a:	4615      	mov	r5, r2
 800161c:	4b72      	ldr	r3, [pc, #456]	@ (80017e8 <main+0x2ec>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	42a2      	cmp	r2, r4
 8001624:	41ab      	sbcs	r3, r5
 8001626:	d211      	bcs.n	800164c <main+0x150>
	  {
	  Heartbeat();
 8001628:	f002 fac6 	bl	8003bb8 <Heartbeat>
	  UpdatePosRoutine();
 800162c:	f002 fae8 	bl	8003c00 <UpdatePosRoutine>
	  Routine();
 8001630:	f002 fad0 	bl	8003bd4 <Routine>
	  Heartbeattime = HAL_GetTick()+100;
 8001634:	f003 f9f8 	bl	8004a28 <HAL_GetTick>
 8001638:	4603      	mov	r3, r0
 800163a:	3364      	adds	r3, #100	@ 0x64
 800163c:	2200      	movs	r2, #0
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	60fa      	str	r2, [r7, #12]
 8001642:	4b69      	ldr	r3, [pc, #420]	@ (80017e8 <main+0x2ec>)
 8001644:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001648:	e9c3 1200 	strd	r1, r2, [r3]
	  }

	  //Timer SET
	  int64_t currentTime = micros();
 800164c:	f002 fdf4 	bl	8004238 <micros>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  static uint64_t timestamp =0;
	  static uint64_t timestamp5 =0;
	  //Timer SET

		//ReadSensor
		if(currentTime > timestamp)
 8001658:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800165c:	4963      	ldr	r1, [pc, #396]	@ (80017ec <main+0x2f0>)
 800165e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001662:	4290      	cmp	r0, r2
 8001664:	eb71 0303 	sbcs.w	r3, r1, r3
 8001668:	d20e      	bcs.n	8001688 <main+0x18c>
			{
			QEIEncoderPos_Update();
 800166a:	f001 fbfd 	bl	8002e68 <QEIEncoderPos_Update>
			QEIEncoderVel_Update();
 800166e:	f001 fc67 	bl	8002f40 <QEIEncoderVel_Update>
			timestamp =currentTime + 50;//us
 8001672:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001676:	f112 0832 	adds.w	r8, r2, #50	@ 0x32
 800167a:	f143 0900 	adc.w	r9, r3, #0
 800167e:	4642      	mov	r2, r8
 8001680:	464b      	mov	r3, r9
 8001682:	495a      	ldr	r1, [pc, #360]	@ (80017ec <main+0x2f0>)
 8001684:	e9c1 2300 	strd	r2, r3, [r1]
			}
		SensorRead();
 8001688:	f002 fd26 	bl	80040d8 <SensorRead>
		//ReadSensor

	  switch (state_ALL)
 800168c:	4b58      	ldr	r3, [pc, #352]	@ (80017f0 <main+0x2f4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b07      	cmp	r3, #7
 8001692:	d8b9      	bhi.n	8001608 <main+0x10c>
 8001694:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <main+0x1a0>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016bd 	.word	0x080016bd
 80016a0:	080016c3 	.word	0x080016c3
 80016a4:	080016f1 	.word	0x080016f1
 80016a8:	08001731 	.word	0x08001731
 80016ac:	080019a1 	.word	0x080019a1
 80016b0:	080019ab 	.word	0x080019ab
 80016b4:	08001aff 	.word	0x08001aff
 80016b8:	08001609 	.word	0x08001609
	  			{
	  			case 0://HOME
	  				SetHome();
 80016bc:	f002 fb8c 	bl	8003dd8 <SetHome>
	  				break;
 80016c0:	e2fe      	b.n	8001cc0 <main+0x7c4>
	  			case 1://Standby
	  				if(start == 1)//MODBUS HERE
 80016c2:	4b4c      	ldr	r3, [pc, #304]	@ (80017f4 <main+0x2f8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d102      	bne.n	80016d0 <main+0x1d4>
	  				{
	  					state_ALL = 2;
 80016ca:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <main+0x2f4>)
 80016cc:	2202      	movs	r2, #2
 80016ce:	601a      	str	r2, [r3, #0]
	  				}
	  				if(ButtonTest[1] == 0)//MODBUS HERE
 80016d0:	4b49      	ldr	r3, [pc, #292]	@ (80017f8 <main+0x2fc>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <main+0x1e2>
					{
						state_ALL = 4;
 80016d8:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <main+0x2f4>)
 80016da:	2204      	movs	r2, #4
 80016dc:	601a      	str	r2, [r3, #0]
					}
	  				if(start == 1)//HOME Button
 80016de:	4b45      	ldr	r3, [pc, #276]	@ (80017f4 <main+0x2f8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	f040 82e4 	bne.w	8001cb0 <main+0x7b4>
					{
						state_ALL = 2;
 80016e8:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <main+0x2f4>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	601a      	str	r2, [r3, #0]
					}
	  				break;
 80016ee:	e2df      	b.n	8001cb0 <main+0x7b4>
	  			case 2://JOY SET
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2108      	movs	r1, #8
 80016f4:	4841      	ldr	r0, [pc, #260]	@ (80017fc <main+0x300>)
 80016f6:	f005 fbf7 	bl	8006ee8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2104      	movs	r1, #4
 80016fe:	483f      	ldr	r0, [pc, #252]	@ (80017fc <main+0x300>)
 8001700:	f005 fbf2 	bl	8006ee8 <HAL_GPIO_WritePin>
	  				Joy_State();
 8001704:	f001 f80c 	bl	8002720 <Joy_State>
	  				Vacuum();
 8001708:	f002 faec 	bl	8003ce4 <Vacuum>
	  				GripperMovement();
 800170c:	f002 fb08 	bl	8003d20 <GripperMovement>
	  				if(ButtonTest[0] == 0)//HOME Button
 8001710:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <main+0x2fc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 82cd 	bne.w	8001cb4 <main+0x7b8>
					{
	  					Pos_Target = 0;
 800171a:	4b39      	ldr	r3, [pc, #228]	@ (8001800 <main+0x304>)
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
						state_ALL = 0;
 8001722:	4b33      	ldr	r3, [pc, #204]	@ (80017f0 <main+0x2f4>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
						Mode = 0;
 8001728:	4b36      	ldr	r3, [pc, #216]	@ (8001804 <main+0x308>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
//	  				{
////	  					state_ALL = 3;
////	  					start = 0;
//						Trajectory();
//	  				}
	  				break;
 800172e:	e2c1      	b.n	8001cb4 <main+0x7b8>
	  			case 3://PID
	  				if(Mode == 1)
 8001730:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <main+0x308>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	f040 80bd 	bne.w	80018b4 <main+0x3b8>
	  				{
	  					Trajectory();
 800173a:	f001 fd65 	bl	8003208 <Trajectory>
						if(CountSetpoint < 100)
 800173e:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <main+0x30c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b63      	cmp	r3, #99	@ 0x63
 8001744:	dc02      	bgt.n	800174c <main+0x250>
						{
							PIDposition();
 8001746:	f001 ffb5 	bl	80036b4 <PIDposition>
 800174a:	e077      	b.n	800183c <main+0x340>
						}
						else
						{
							if(state_ALL_Old == 5 || state_ALL_Old == 0 || state_ALL_Old == 7 || state_ALL_Old == 8)
 800174c:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <main+0x310>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b05      	cmp	r3, #5
 8001752:	d00b      	beq.n	800176c <main+0x270>
 8001754:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <main+0x310>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <main+0x270>
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <main+0x310>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b07      	cmp	r3, #7
 8001762:	d003      	beq.n	800176c <main+0x270>
 8001764:	4b29      	ldr	r3, [pc, #164]	@ (800180c <main+0x310>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d151      	bne.n	8001810 <main+0x314>
							{
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2101      	movs	r1, #1
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f005 fbb8 	bl	8006ee8 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <main+0x298>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001780:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 8001782:	f001 fa5b 	bl	8002c3c <reset>
							state_ALL = 6;
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <main+0x2f4>)
 8001788:	2206      	movs	r2, #6
 800178a:	601a      	str	r2, [r3, #0]
	//						state_ALL = 2;
							CountSetpoint = 0;
 800178c:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <main+0x30c>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e050      	b.n	8001836 <main+0x33a>
 8001794:	20000578 	.word	0x20000578
 8001798:	200004ac 	.word	0x200004ac
 800179c:	20000710 	.word	0x20000710
 80017a0:	20000644 	.word	0x20000644
 80017a4:	20000248 	.word	0x20000248
 80017a8:	200012ec 	.word	0x200012ec
 80017ac:	200013a0 	.word	0x200013a0
 80017b0:	20001228 	.word	0x20001228
 80017b4:	3df5c28f 	.word	0x3df5c28f
 80017b8:	38d1b717 	.word	0x38d1b717
 80017bc:	20001250 	.word	0x20001250
 80017c0:	42480000 	.word	0x42480000
 80017c4:	3d75c28f 	.word	0x3d75c28f
 80017c8:	20001278 	.word	0x20001278
 80017cc:	200012a0 	.word	0x200012a0
 80017d0:	41200000 	.word	0x41200000
 80017d4:	353be7a2 	.word	0x353be7a2
 80017d8:	20000b00 	.word	0x20000b00
 80017dc:	20000974 	.word	0x20000974
 80017e0:	200008a8 	.word	0x200008a8
 80017e4:	20000fd8 	.word	0x20000fd8
 80017e8:	200013a8 	.word	0x200013a8
 80017ec:	200013b0 	.word	0x200013b0
 80017f0:	20000204 	.word	0x20000204
 80017f4:	200011b8 	.word	0x200011b8
 80017f8:	200011cc 	.word	0x200011cc
 80017fc:	48000800 	.word	0x48000800
 8001800:	200012cc 	.word	0x200012cc
 8001804:	2000116c 	.word	0x2000116c
 8001808:	200011ec 	.word	0x200011ec
 800180c:	200011bc 	.word	0x200011bc
							}
							else
							{
							state_ALL = 2;
 8001810:	4b9a      	ldr	r3, [pc, #616]	@ (8001a7c <main+0x580>)
 8001812:	2202      	movs	r2, #2
 8001814:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 8001816:	4b9a      	ldr	r3, [pc, #616]	@ (8001a80 <main+0x584>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2101      	movs	r1, #1
 8001820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001824:	f005 fb60 	bl	8006ee8 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
 8001828:	4b96      	ldr	r3, [pc, #600]	@ (8001a84 <main+0x588>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001830:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 8001832:	f001 fa03 	bl	8002c3c <reset>
							}
							registerFrame[0x10].U16 = 0b0000;
 8001836:	4b94      	ldr	r3, [pc, #592]	@ (8001a88 <main+0x58c>)
 8001838:	2200      	movs	r2, #0
 800183a:	841a      	strh	r2, [r3, #32]

						}
						if(ButtonTest[0] == 0)//HOME Button
 800183c:	4b93      	ldr	r3, [pc, #588]	@ (8001a8c <main+0x590>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d107      	bne.n	8001854 <main+0x358>
						{
							state_ALL = 0;
 8001844:	4b8d      	ldr	r3, [pc, #564]	@ (8001a7c <main+0x580>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
							Mode = 0;
 800184a:	4b91      	ldr	r3, [pc, #580]	@ (8001a90 <main+0x594>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
							reset();
 8001850:	f001 f9f4 	bl	8002c3c <reset>
						}
						if(fabs(Pos-Pos_Target) <= 1)//Limit
 8001854:	4b8f      	ldr	r3, [pc, #572]	@ (8001a94 <main+0x598>)
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	4b8f      	ldr	r3, [pc, #572]	@ (8001a98 <main+0x59c>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	eef0 7ae7 	vabs.f32	s15, s15
 8001868:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800186c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	d81a      	bhi.n	80018ac <main+0x3b0>
						{
							if(currentTime > timestamp5)
 8001876:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800187a:	4988      	ldr	r1, [pc, #544]	@ (8001a9c <main+0x5a0>)
 800187c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001880:	4290      	cmp	r0, r2
 8001882:	eb71 0303 	sbcs.w	r3, r1, r3
 8001886:	f080 8217 	bcs.w	8001cb8 <main+0x7bc>
						  {
								CountSetpoint++;
 800188a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a80 <main+0x584>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a7b      	ldr	r2, [pc, #492]	@ (8001a80 <main+0x584>)
 8001892:	6013      	str	r3, [r2, #0]
								timestamp5 =currentTime + 1000;
 8001894:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001898:	f512 7a7a 	adds.w	sl, r2, #1000	@ 0x3e8
 800189c:	f143 0b00 	adc.w	fp, r3, #0
 80018a0:	4652      	mov	r2, sl
 80018a2:	465b      	mov	r3, fp
 80018a4:	497d      	ldr	r1, [pc, #500]	@ (8001a9c <main+0x5a0>)
 80018a6:	e9c1 2300 	strd	r2, r3, [r1]
						{
							CountSetpoint = 0;
						}
	  				}

	  				break;
 80018aa:	e205      	b.n	8001cb8 <main+0x7bc>
							CountSetpoint = 0;
 80018ac:	4b74      	ldr	r3, [pc, #464]	@ (8001a80 <main+0x584>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
	  				break;
 80018b2:	e201      	b.n	8001cb8 <main+0x7bc>
	  					Trajectory();
 80018b4:	f001 fca8 	bl	8003208 <Trajectory>
						if(CountSetpoint < 100)
 80018b8:	4b71      	ldr	r3, [pc, #452]	@ (8001a80 <main+0x584>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b63      	cmp	r3, #99	@ 0x63
 80018be:	dc02      	bgt.n	80018c6 <main+0x3ca>
							PIDposition();
 80018c0:	f001 fef8 	bl	80036b4 <PIDposition>
 80018c4:	e02e      	b.n	8001924 <main+0x428>
							if(state_ALL_Old == 5 || state_ALL_Old == 0)
 80018c6:	4b76      	ldr	r3, [pc, #472]	@ (8001aa0 <main+0x5a4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d003      	beq.n	80018d6 <main+0x3da>
 80018ce:	4b74      	ldr	r3, [pc, #464]	@ (8001aa0 <main+0x5a4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d113      	bne.n	80018fe <main+0x402>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2101      	movs	r1, #1
 80018da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018de:	f005 fb03 	bl	8006ee8 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
 80018e2:	4b68      	ldr	r3, [pc, #416]	@ (8001a84 <main+0x588>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018ea:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 80018ec:	f001 f9a6 	bl	8002c3c <reset>
							state_ALL = 2;
 80018f0:	4b62      	ldr	r3, [pc, #392]	@ (8001a7c <main+0x580>)
 80018f2:	2202      	movs	r2, #2
 80018f4:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 80018f6:	4b62      	ldr	r3, [pc, #392]	@ (8001a80 <main+0x584>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e012      	b.n	8001924 <main+0x428>
							state_ALL = 2;
 80018fe:	4b5f      	ldr	r3, [pc, #380]	@ (8001a7c <main+0x580>)
 8001900:	2202      	movs	r2, #2
 8001902:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 8001904:	4b5e      	ldr	r3, [pc, #376]	@ (8001a80 <main+0x584>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2101      	movs	r1, #1
 800190e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001912:	f005 fae9 	bl	8006ee8 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
 8001916:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <main+0x588>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800191e:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 8001920:	f001 f98c 	bl	8002c3c <reset>
						if(ButtonTest[0] == 0)//HOME Button
 8001924:	4b59      	ldr	r3, [pc, #356]	@ (8001a8c <main+0x590>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d107      	bne.n	800193c <main+0x440>
							state_ALL = 0;
 800192c:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <main+0x580>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
							Mode = 0;
 8001932:	4b57      	ldr	r3, [pc, #348]	@ (8001a90 <main+0x594>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
							reset();
 8001938:	f001 f980 	bl	8002c3c <reset>
						if(fabs(Pos-Pos_Target) <= 1)//Limit
 800193c:	4b55      	ldr	r3, [pc, #340]	@ (8001a94 <main+0x598>)
 800193e:	ed93 7a00 	vldr	s14, [r3]
 8001942:	4b55      	ldr	r3, [pc, #340]	@ (8001a98 <main+0x59c>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194c:	eef0 7ae7 	vabs.f32	s15, s15
 8001950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d81c      	bhi.n	8001998 <main+0x49c>
							if(currentTime > timestamp5)
 800195e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001962:	494e      	ldr	r1, [pc, #312]	@ (8001a9c <main+0x5a0>)
 8001964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001968:	4290      	cmp	r0, r2
 800196a:	eb71 0303 	sbcs.w	r3, r1, r3
 800196e:	f080 81a3 	bcs.w	8001cb8 <main+0x7bc>
								CountSetpoint++;
 8001972:	4b43      	ldr	r3, [pc, #268]	@ (8001a80 <main+0x584>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	4a41      	ldr	r2, [pc, #260]	@ (8001a80 <main+0x584>)
 800197a:	6013      	str	r3, [r2, #0]
								timestamp5 =currentTime + 1000;
 800197c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001980:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	f143 0300 	adc.w	r3, r3, #0
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001990:	4942      	ldr	r1, [pc, #264]	@ (8001a9c <main+0x5a0>)
 8001992:	e9c1 2300 	strd	r2, r3, [r1]
	  				break;
 8001996:	e18f      	b.n	8001cb8 <main+0x7bc>
							CountSetpoint = 0;
 8001998:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <main+0x584>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
	  				break;
 800199e:	e18b      	b.n	8001cb8 <main+0x7bc>
	  			case 4://TEST
	  				Joy_State();
 80019a0:	f000 febe 	bl	8002720 <Joy_State>
	  				ButtonMem();
 80019a4:	f001 f874 	bl	8002a90 <ButtonMem>
					break;
 80019a8:	e18a      	b.n	8001cc0 <main+0x7c4>
	  			case 5://JOG MODE
	  				if(Mode == 1)
 80019aa:	4b39      	ldr	r3, [pc, #228]	@ (8001a90 <main+0x594>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	f040 8084 	bne.w	8001abc <main+0x5c0>
	  				{
						switch(state_Pick_Place){
 80019b4:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <main+0x5a8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <main+0x4c6>
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d036      	beq.n	8001a2e <main+0x532>
						i = 0;
						}

						PIDreset();
	  				}
					break;
 80019c0:	e17e      	b.n	8001cc0 <main+0x7c4>
								registerFrame[0x10].U16 = 0b0100;
 80019c2:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <main+0x58c>)
 80019c4:	2204      	movs	r2, #4
 80019c6:	841a      	strh	r2, [r3, #32]
								Pos_Target = MemPos[Pick_Order[Pick]-1];
 80019c8:	4b37      	ldr	r3, [pc, #220]	@ (8001aa8 <main+0x5ac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a37      	ldr	r2, [pc, #220]	@ (8001aac <main+0x5b0>)
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	4a36      	ldr	r2, [pc, #216]	@ (8001ab0 <main+0x5b4>)
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001a98 <main+0x59c>)
 80019de:	6013      	str	r3, [r2, #0]
								Pick++;
 80019e0:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <main+0x5ac>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a30      	ldr	r2, [pc, #192]	@ (8001aa8 <main+0x5ac>)
 80019e8:	6013      	str	r3, [r2, #0]
								state_ALL = 3;
 80019ea:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <main+0x580>)
 80019ec:	2203      	movs	r2, #3
 80019ee:	601a      	str	r2, [r3, #0]
								state_ALL_Old = 7;
 80019f0:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <main+0x5a4>)
 80019f2:	2207      	movs	r2, #7
 80019f4:	601a      	str	r2, [r3, #0]
								state_Pick_Place = 1;
 80019f6:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <main+0x5a8>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
								if(Place == 5)
 80019fc:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <main+0x5b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d111      	bne.n	8001a28 <main+0x52c>
									state_ALL = 2;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <main+0x580>)
 8001a06:	2202      	movs	r2, #2
 8001a08:	601a      	str	r2, [r3, #0]
									Place = 0;
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab4 <main+0x5b8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
									Pick = 0;
 8001a10:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <main+0x5ac>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
									Mode = 0;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <main+0x594>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
									state_Pick_Place = 0;
 8001a1c:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <main+0x5a8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
									registerFrame[0x10].U16 = 0b0000;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <main+0x58c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	841a      	strh	r2, [r3, #32]
								PIDreset();
 8001a28:	f001 f9e0 	bl	8002dec <PIDreset>
								break;
 8001a2c:	e066      	b.n	8001afc <main+0x600>
								registerFrame[0x10].U16 = 0b1000;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <main+0x58c>)
 8001a30:	2208      	movs	r2, #8
 8001a32:	841a      	strh	r2, [r3, #32]
								Pos_Target = MemPos[Place_Order[Place]-1]+10;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <main+0x5b8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab8 <main+0x5bc>)
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab0 <main+0x5b4>)
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a52:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <main+0x59c>)
 8001a54:	edc3 7a00 	vstr	s15, [r3]
								Place++;
 8001a58:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <main+0x5b8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	4a15      	ldr	r2, [pc, #84]	@ (8001ab4 <main+0x5b8>)
 8001a60:	6013      	str	r3, [r2, #0]
								state_ALL = 3;
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <main+0x580>)
 8001a64:	2203      	movs	r2, #3
 8001a66:	601a      	str	r2, [r3, #0]
								state_ALL_Old = 8;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <main+0x5a4>)
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	601a      	str	r2, [r3, #0]
								state_Pick_Place = 0;
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <main+0x5a8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
								PIDreset();
 8001a74:	f001 f9ba 	bl	8002dec <PIDreset>
								break;
 8001a78:	e040      	b.n	8001afc <main+0x600>
 8001a7a:	bf00      	nop
 8001a7c:	20000204 	.word	0x20000204
 8001a80:	200011ec 	.word	0x200011ec
 8001a84:	20000578 	.word	0x20000578
 8001a88:	20000fd8 	.word	0x20000fd8
 8001a8c:	200011cc 	.word	0x200011cc
 8001a90:	2000116c 	.word	0x2000116c
 8001a94:	20001364 	.word	0x20001364
 8001a98:	200012cc 	.word	0x200012cc
 8001a9c:	200013b8 	.word	0x200013b8
 8001aa0:	200011bc 	.word	0x200011bc
 8001aa4:	200011c4 	.word	0x200011c4
 8001aa8:	20001214 	.word	0x20001214
 8001aac:	2000117c 	.word	0x2000117c
 8001ab0:	200011fc 	.word	0x200011fc
 8001ab4:	20001218 	.word	0x20001218
 8001ab8:	20001190 	.word	0x20001190
	  					Pos_Target = MemPos[i];
 8001abc:	4b81      	ldr	r3, [pc, #516]	@ (8001cc4 <main+0x7c8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a81      	ldr	r2, [pc, #516]	@ (8001cc8 <main+0x7cc>)
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a80      	ldr	r2, [pc, #512]	@ (8001ccc <main+0x7d0>)
 8001aca:	6013      	str	r3, [r2, #0]
						state_ALL = 3;
 8001acc:	4b80      	ldr	r3, [pc, #512]	@ (8001cd0 <main+0x7d4>)
 8001ace:	2203      	movs	r2, #3
 8001ad0:	601a      	str	r2, [r3, #0]
						state_ALL_Old = 5;
 8001ad2:	4b80      	ldr	r3, [pc, #512]	@ (8001cd4 <main+0x7d8>)
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	601a      	str	r2, [r3, #0]
						i++;
 8001ad8:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc4 <main+0x7c8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a79      	ldr	r2, [pc, #484]	@ (8001cc4 <main+0x7c8>)
 8001ae0:	6013      	str	r3, [r2, #0]
						if(i == 5)
 8001ae2:	4b78      	ldr	r3, [pc, #480]	@ (8001cc4 <main+0x7c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d105      	bne.n	8001af6 <main+0x5fa>
						state_ALL_Old = 0;
 8001aea:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd4 <main+0x7d8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
						i = 0;
 8001af0:	4b74      	ldr	r3, [pc, #464]	@ (8001cc4 <main+0x7c8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
						PIDreset();
 8001af6:	f001 f979 	bl	8002dec <PIDreset>
					break;
 8001afa:	e0e1      	b.n	8001cc0 <main+0x7c4>
 8001afc:	e0e0      	b.n	8001cc0 <main+0x7c4>
	  			case 6://Gripper
	  				switch (state_Griper)
 8001afe:	4b76      	ldr	r3, [pc, #472]	@ (8001cd8 <main+0x7dc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d074      	beq.n	8001bf0 <main+0x6f4>
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	f300 80d8 	bgt.w	8001cbc <main+0x7c0>
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <main+0x61a>
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d069      	beq.n	8001be8 <main+0x6ec>
	  						break;

	  				}


	  				break;
 8001b14:	e0d2      	b.n	8001cbc <main+0x7c0>
	  							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2140      	movs	r1, #64	@ 0x40
 8001b1a:	4870      	ldr	r0, [pc, #448]	@ (8001cdc <main+0x7e0>)
 8001b1c:	f005 f9e4 	bl	8006ee8 <HAL_GPIO_WritePin>
								if(LeadSW[0] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 8001b20:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce0 <main+0x7e4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <main+0x63c>
 8001b28:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce0 <main+0x7e4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d10f      	bne.n	8001b50 <main+0x654>
 8001b30:	4b6b      	ldr	r3, [pc, #428]	@ (8001ce0 <main+0x7e4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d10b      	bne.n	8001b50 <main+0x654>
									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	4867      	ldr	r0, [pc, #412]	@ (8001cdc <main+0x7e0>)
 8001b3e:	f005 f9d3 	bl	8006ee8 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b48:	4864      	ldr	r0, [pc, #400]	@ (8001cdc <main+0x7e0>)
 8001b4a:	f005 f9cd 	bl	8006ee8 <HAL_GPIO_WritePin>
	  						break;
 8001b4e:	e0ab      	b.n	8001ca8 <main+0x7ac>
								else if(LeadSW[1] == 0)
 8001b50:	4b63      	ldr	r3, [pc, #396]	@ (8001ce0 <main+0x7e4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 80a7 	bne.w	8001ca8 <main+0x7ac>
									if(CountGriper > 15)
 8001b5a:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <main+0x7e8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	dd2f      	ble.n	8001bc2 <main+0x6c6>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2120      	movs	r1, #32
 8001b66:	485d      	ldr	r0, [pc, #372]	@ (8001cdc <main+0x7e0>)
 8001b68:	f005 f9be 	bl	8006ee8 <HAL_GPIO_WritePin>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b72:	485a      	ldr	r0, [pc, #360]	@ (8001cdc <main+0x7e0>)
 8001b74:	f005 f9b8 	bl	8006ee8 <HAL_GPIO_WritePin>
										state_Griper = 1;
 8001b78:	4b57      	ldr	r3, [pc, #348]	@ (8001cd8 <main+0x7dc>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 8001b7e:	4b59      	ldr	r3, [pc, #356]	@ (8001ce4 <main+0x7e8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
										if(VacuumNF == 0)
 8001b84:	4b58      	ldr	r3, [pc, #352]	@ (8001ce8 <main+0x7ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d108      	bne.n	8001b9e <main+0x6a2>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2140      	movs	r1, #64	@ 0x40
 8001b90:	4852      	ldr	r0, [pc, #328]	@ (8001cdc <main+0x7e0>)
 8001b92:	f005 f9a9 	bl	8006ee8 <HAL_GPIO_WritePin>
											VacuumNF = 1;
 8001b96:	4b54      	ldr	r3, [pc, #336]	@ (8001ce8 <main+0x7ec>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e007      	b.n	8001bae <main+0x6b2>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2140      	movs	r1, #64	@ 0x40
 8001ba2:	484e      	ldr	r0, [pc, #312]	@ (8001cdc <main+0x7e0>)
 8001ba4:	f005 f9a0 	bl	8006ee8 <HAL_GPIO_WritePin>
											VacuumNF = 0;
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce8 <main+0x7ec>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
										if(state_ALL_Old == 8)
 8001bae:	4b49      	ldr	r3, [pc, #292]	@ (8001cd4 <main+0x7d8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d178      	bne.n	8001ca8 <main+0x7ac>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2140      	movs	r1, #64	@ 0x40
 8001bba:	4848      	ldr	r0, [pc, #288]	@ (8001cdc <main+0x7e0>)
 8001bbc:	f005 f994 	bl	8006ee8 <HAL_GPIO_WritePin>
	  						break;
 8001bc0:	e072      	b.n	8001ca8 <main+0x7ac>
										if(timeGriper < HAL_GetTick())
 8001bc2:	f002 ff31 	bl	8004a28 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b48      	ldr	r3, [pc, #288]	@ (8001cec <main+0x7f0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d96b      	bls.n	8001ca8 <main+0x7ac>
											CountGriper++;
 8001bd0:	4b44      	ldr	r3, [pc, #272]	@ (8001ce4 <main+0x7e8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4a43      	ldr	r2, [pc, #268]	@ (8001ce4 <main+0x7e8>)
 8001bd8:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 8001bda:	f002 ff25 	bl	8004a28 <HAL_GetTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	330a      	adds	r3, #10
 8001be2:	4a42      	ldr	r2, [pc, #264]	@ (8001cec <main+0x7f0>)
 8001be4:	6013      	str	r3, [r2, #0]
	  						break;
 8001be6:	e05f      	b.n	8001ca8 <main+0x7ac>
	  							state_Griper = 2;
 8001be8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <main+0x7dc>)
 8001bea:	2202      	movs	r2, #2
 8001bec:	601a      	str	r2, [r3, #0]
								break;
 8001bee:	e05e      	b.n	8001cae <main+0x7b2>
	  							if(LeadSW[1] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce0 <main+0x7e4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <main+0x70c>
 8001bf8:	4b39      	ldr	r3, [pc, #228]	@ (8001ce0 <main+0x7e4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d10f      	bne.n	8001c20 <main+0x724>
 8001c00:	4b37      	ldr	r3, [pc, #220]	@ (8001ce0 <main+0x7e4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10b      	bne.n	8001c20 <main+0x724>
	  								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	4833      	ldr	r0, [pc, #204]	@ (8001cdc <main+0x7e0>)
 8001c0e:	f005 f96b 	bl	8006ee8 <HAL_GPIO_WritePin>
	  								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,1);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c18:	4830      	ldr	r0, [pc, #192]	@ (8001cdc <main+0x7e0>)
 8001c1a:	f005 f965 	bl	8006ee8 <HAL_GPIO_WritePin>
 8001c1e:	e042      	b.n	8001ca6 <main+0x7aa>
	  							else if(LeadSW[0] == 0)
 8001c20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce0 <main+0x7e4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d141      	bne.n	8001cac <main+0x7b0>
	  								if(CountGriper > 15)
 8001c28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce4 <main+0x7e8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	dd27      	ble.n	8001c80 <main+0x784>
	  									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2120      	movs	r1, #32
 8001c34:	4829      	ldr	r0, [pc, #164]	@ (8001cdc <main+0x7e0>)
 8001c36:	f005 f957 	bl	8006ee8 <HAL_GPIO_WritePin>
	  									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c40:	4826      	ldr	r0, [pc, #152]	@ (8001cdc <main+0x7e0>)
 8001c42:	f005 f951 	bl	8006ee8 <HAL_GPIO_WritePin>
	  									state_Griper = 0;
 8001c46:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <main+0x7dc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 8001c4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <main+0x7e8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
										if(state_ALL_Old == 5 || state_ALL_Old == 7 || state_ALL_Old == 8)
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <main+0x7d8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d007      	beq.n	8001c6a <main+0x76e>
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <main+0x7d8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b07      	cmp	r3, #7
 8001c60:	d003      	beq.n	8001c6a <main+0x76e>
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <main+0x7d8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d103      	bne.n	8001c72 <main+0x776>
											state_ALL = 5;
 8001c6a:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <main+0x7d4>)
 8001c6c:	2205      	movs	r2, #5
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e019      	b.n	8001ca6 <main+0x7aa>
											state_ALL = 0;
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <main+0x7d4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
											Mode = 0;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf0 <main+0x7f4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
	  						break;
 8001c7e:	e015      	b.n	8001cac <main+0x7b0>
										if(timeGriper < HAL_GetTick())
 8001c80:	f002 fed2 	bl	8004a28 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <main+0x7f8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d90e      	bls.n	8001cac <main+0x7b0>
											CountGriper++;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <main+0x7e8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <main+0x7e8>)
 8001c96:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 8001c98:	f002 fec6 	bl	8004a28 <HAL_GetTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	330a      	adds	r3, #10
 8001ca0:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <main+0x7f8>)
 8001ca2:	6013      	str	r3, [r2, #0]
	  						break;
 8001ca4:	e002      	b.n	8001cac <main+0x7b0>
 8001ca6:	e001      	b.n	8001cac <main+0x7b0>
	  						break;
 8001ca8:	bf00      	nop
 8001caa:	e007      	b.n	8001cbc <main+0x7c0>
	  						break;
 8001cac:	bf00      	nop
	  				break;
 8001cae:	e005      	b.n	8001cbc <main+0x7c0>
	  				break;
 8001cb0:	bf00      	nop
 8001cb2:	e4a9      	b.n	8001608 <main+0x10c>
	  				break;
 8001cb4:	bf00      	nop
 8001cb6:	e4a7      	b.n	8001608 <main+0x10c>
	  				break;
 8001cb8:	bf00      	nop
 8001cba:	e4a5      	b.n	8001608 <main+0x10c>
	  				break;
 8001cbc:	bf00      	nop
 8001cbe:	e4a3      	b.n	8001608 <main+0x10c>
  {
 8001cc0:	e4a2      	b.n	8001608 <main+0x10c>
 8001cc2:	bf00      	nop
 8001cc4:	20001210 	.word	0x20001210
 8001cc8:	200011fc 	.word	0x200011fc
 8001ccc:	200012cc 	.word	0x200012cc
 8001cd0:	20000204 	.word	0x20000204
 8001cd4:	200011bc 	.word	0x200011bc
 8001cd8:	200011c0 	.word	0x200011c0
 8001cdc:	48000800 	.word	0x48000800
 8001ce0:	200011e4 	.word	0x200011e4
 8001ce4:	200011f0 	.word	0x200011f0
 8001ce8:	200011f8 	.word	0x200011f8
 8001cec:	200013c0 	.word	0x200013c0
 8001cf0:	2000116c 	.word	0x2000116c
 8001cf4:	200013c4 	.word	0x200013c4

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b094      	sub	sp, #80	@ 0x50
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	2238      	movs	r2, #56	@ 0x38
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00a f8ba 	bl	800be80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f005 f92e 	bl	8006f7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d2a:	2340      	movs	r3, #64	@ 0x40
 8001d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d32:	2302      	movs	r3, #2
 8001d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d36:	2304      	movs	r3, #4
 8001d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d3a:	2355      	movs	r3, #85	@ 0x55
 8001d3c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d46:	2302      	movs	r3, #2
 8001d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d4a:	f107 0318 	add.w	r3, r7, #24
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 f9c8 	bl	80070e4 <HAL_RCC_OscConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d5a:	f002 fa9b 	bl	8004294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5e:	230f      	movs	r3, #15
 8001d60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d62:	2303      	movs	r3, #3
 8001d64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2104      	movs	r1, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f005 fcc6 	bl	8007708 <HAL_RCC_ClockConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d82:	f002 fa87 	bl	8004294 <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3750      	adds	r7, #80	@ 0x50
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	@ 0x30
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2220      	movs	r2, #32
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f00a f869 	bl	800be80 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001db0:	4a38      	ldr	r2, [pc, #224]	@ (8001e94 <MX_ADC3_Init+0x104>)
 8001db2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001db4:	4b36      	ldr	r3, [pc, #216]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001db6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001dbc:	4b34      	ldr	r3, [pc, #208]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dc2:	4b33      	ldr	r3, [pc, #204]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001dc8:	4b31      	ldr	r3, [pc, #196]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001dce:	4b30      	ldr	r3, [pc, #192]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001dda:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001de0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8001de6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001de8:	2202      	movs	r2, #2
 8001dea:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001dec:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001df4:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dfa:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001e00:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e08:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e16:	481e      	ldr	r0, [pc, #120]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001e18:	f003 f856 	bl	8004ec8 <HAL_ADC_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001e22:	f002 fa37 	bl	8004294 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4817      	ldr	r0, [pc, #92]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001e32:	f004 f975 	bl	8006120 <HAL_ADCEx_MultiModeConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001e3c:	f002 fa2a 	bl	8004294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <MX_ADC3_Init+0x108>)
 8001e42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e44:	2306      	movs	r3, #6
 8001e46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e4c:	237f      	movs	r3, #127	@ 0x7f
 8001e4e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e50:	2304      	movs	r3, #4
 8001e52:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480c      	ldr	r0, [pc, #48]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001e5e:	f003 fae1 	bl	8005424 <HAL_ADC_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001e68:	f002 fa14 	bl	8004294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <MX_ADC3_Init+0x10c>)
 8001e6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e70:	230c      	movs	r3, #12
 8001e72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <MX_ADC3_Init+0x100>)
 8001e7a:	f003 fad3 	bl	8005424 <HAL_ADC_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 8001e84:	f002 fa06 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	3730      	adds	r7, #48	@ 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000248 	.word	0x20000248
 8001e94:	50000400 	.word	0x50000400
 8001e98:	04300002 	.word	0x04300002
 8001e9c:	14f00020 	.word	0x14f00020

08001ea0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001ec0:	4a20      	ldr	r2, [pc, #128]	@ (8001f44 <MX_TIM1_Init+0xa4>)
 8001ec2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001ed2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ede:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eea:	4815      	ldr	r0, [pc, #84]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001eec:	f006 f876 	bl	8007fdc <HAL_TIM_Base_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001ef6:	f002 f9cd 	bl	8004294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	4619      	mov	r1, r3
 8001f06:	480e      	ldr	r0, [pc, #56]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001f08:	f006 fffa 	bl	8008f00 <HAL_TIM_ConfigClockSource>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001f12:	f002 f9bf 	bl	8004294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	@ (8001f40 <MX_TIM1_Init+0xa0>)
 8001f28:	f007 ffd0 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f32:	f002 f9af 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000314 	.word	0x20000314
 8001f44:	40012c00 	.word	0x40012c00

08001f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <MX_TIM2_Init+0x98>)
 8001f68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <MX_TIM2_Init+0x98>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <MX_TIM2_Init+0x98>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <MX_TIM2_Init+0x98>)
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f82:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <MX_TIM2_Init+0x98>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <MX_TIM2_Init+0x98>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f8e:	4814      	ldr	r0, [pc, #80]	@ (8001fe0 <MX_TIM2_Init+0x98>)
 8001f90:	f006 f824 	bl	8007fdc <HAL_TIM_Base_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f9a:	f002 f97b 	bl	8004294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <MX_TIM2_Init+0x98>)
 8001fac:	f006 ffa8 	bl	8008f00 <HAL_TIM_ConfigClockSource>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fb6:	f002 f96d 	bl	8004294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4806      	ldr	r0, [pc, #24]	@ (8001fe0 <MX_TIM2_Init+0x98>)
 8001fc8:	f007 ff80 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fd2:	f002 f95f 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200003e0 	.word	0x200003e0

08001fe4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	@ 0x30
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	2224      	movs	r2, #36	@ 0x24
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f009 ff44 	bl	800be80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002002:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <MX_TIM3_Init+0xa4>)
 8002004:	4a21      	ldr	r2, [pc, #132]	@ (800208c <MX_TIM3_Init+0xa8>)
 8002006:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002008:	4b1f      	ldr	r3, [pc, #124]	@ (8002088 <MX_TIM3_Init+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <MX_TIM3_Init+0xa4>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002014:	4b1c      	ldr	r3, [pc, #112]	@ (8002088 <MX_TIM3_Init+0xa4>)
 8002016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800201a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201c:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <MX_TIM3_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <MX_TIM3_Init+0xa4>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002028:	2303      	movs	r3, #3
 800202a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002030:	2301      	movs	r3, #1
 8002032:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8002038:	2302      	movs	r3, #2
 800203a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002040:	2301      	movs	r3, #1
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 8002048:	2302      	movs	r3, #2
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	480d      	ldr	r0, [pc, #52]	@ (8002088 <MX_TIM3_Init+0xa4>)
 8002054:	f006 fb84 	bl	8008760 <HAL_TIM_Encoder_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800205e:	f002 f919 	bl	8004294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800206a:	463b      	mov	r3, r7
 800206c:	4619      	mov	r1, r3
 800206e:	4806      	ldr	r0, [pc, #24]	@ (8002088 <MX_TIM3_Init+0xa4>)
 8002070:	f007 ff2c 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800207a:	f002 f90b 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	3730      	adds	r7, #48	@ 0x30
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200004ac 	.word	0x200004ac
 800208c:	40000400 	.word	0x40000400

08002090 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	@ 0x38
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002096:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b0:	463b      	mov	r3, r7
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]
 80020be:	615a      	str	r2, [r3, #20]
 80020c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002178 <MX_TIM4_Init+0xe8>)
 80020c4:	4a2d      	ldr	r2, [pc, #180]	@ (800217c <MX_TIM4_Init+0xec>)
 80020c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80020c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002178 <MX_TIM4_Init+0xe8>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <MX_TIM4_Init+0xe8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42499;
 80020d4:	4b28      	ldr	r3, [pc, #160]	@ (8002178 <MX_TIM4_Init+0xe8>)
 80020d6:	f24a 6203 	movw	r2, #42499	@ 0xa603
 80020da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020dc:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <MX_TIM4_Init+0xe8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <MX_TIM4_Init+0xe8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020e8:	4823      	ldr	r0, [pc, #140]	@ (8002178 <MX_TIM4_Init+0xe8>)
 80020ea:	f005 ff77 	bl	8007fdc <HAL_TIM_Base_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80020f4:	f002 f8ce 	bl	8004294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002102:	4619      	mov	r1, r3
 8002104:	481c      	ldr	r0, [pc, #112]	@ (8002178 <MX_TIM4_Init+0xe8>)
 8002106:	f006 fefb 	bl	8008f00 <HAL_TIM_ConfigClockSource>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002110:	f002 f8c0 	bl	8004294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002114:	4818      	ldr	r0, [pc, #96]	@ (8002178 <MX_TIM4_Init+0xe8>)
 8002116:	f006 f8ad 	bl	8008274 <HAL_TIM_PWM_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002120:	f002 f8b8 	bl	8004294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4811      	ldr	r0, [pc, #68]	@ (8002178 <MX_TIM4_Init+0xe8>)
 8002134:	f007 feca 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800213e:	f002 f8a9 	bl	8004294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002142:	2360      	movs	r3, #96	@ 0x60
 8002144:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002152:	463b      	mov	r3, r7
 8002154:	2200      	movs	r2, #0
 8002156:	4619      	mov	r1, r3
 8002158:	4807      	ldr	r0, [pc, #28]	@ (8002178 <MX_TIM4_Init+0xe8>)
 800215a:	f006 fdbd 	bl	8008cd8 <HAL_TIM_PWM_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002164:	f002 f896 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002168:	4803      	ldr	r0, [pc, #12]	@ (8002178 <MX_TIM4_Init+0xe8>)
 800216a:	f002 fa39 	bl	80045e0 <HAL_TIM_MspPostInit>

}
 800216e:	bf00      	nop
 8002170:	3738      	adds	r7, #56	@ 0x38
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000578 	.word	0x20000578
 800217c:	40000800 	.word	0x40000800

08002180 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0310 	add.w	r3, r7, #16
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <MX_TIM5_Init+0x94>)
 80021a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002218 <MX_TIM5_Init+0x98>)
 80021a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <MX_TIM5_Init+0x94>)
 80021a6:	22a9      	movs	r2, #169	@ 0xa9
 80021a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <MX_TIM5_Init+0x94>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80021b0:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <MX_TIM5_Init+0x94>)
 80021b2:	f04f 32ff 	mov.w	r2, #4294967295
 80021b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <MX_TIM5_Init+0x94>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <MX_TIM5_Init+0x94>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021c4:	4813      	ldr	r0, [pc, #76]	@ (8002214 <MX_TIM5_Init+0x94>)
 80021c6:	f005 ff09 	bl	8007fdc <HAL_TIM_Base_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80021d0:	f002 f860 	bl	8004294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	4619      	mov	r1, r3
 80021e0:	480c      	ldr	r0, [pc, #48]	@ (8002214 <MX_TIM5_Init+0x94>)
 80021e2:	f006 fe8d 	bl	8008f00 <HAL_TIM_ConfigClockSource>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80021ec:	f002 f852 	bl	8004294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021f0:	2320      	movs	r3, #32
 80021f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	@ (8002214 <MX_TIM5_Init+0x94>)
 80021fe:	f007 fe65 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002208:	f002 f844 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	3720      	adds	r7, #32
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000644 	.word	0x20000644
 8002218:	40000c00 	.word	0x40000c00

0800221c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800222c:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <MX_TIM6_Init+0x68>)
 800222e:	4a16      	ldr	r2, [pc, #88]	@ (8002288 <MX_TIM6_Init+0x6c>)
 8002230:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_TIM6_Init+0x68>)
 8002234:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002238:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <MX_TIM6_Init+0x68>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8002240:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <MX_TIM6_Init+0x68>)
 8002242:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002246:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <MX_TIM6_Init+0x68>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800224e:	480d      	ldr	r0, [pc, #52]	@ (8002284 <MX_TIM6_Init+0x68>)
 8002250:	f005 fec4 	bl	8007fdc <HAL_TIM_Base_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800225a:	f002 f81b 	bl	8004294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <MX_TIM6_Init+0x68>)
 800226c:	f007 fe2e 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002276:	f002 f80d 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000710 	.word	0x20000710
 8002288:	40001000 	.word	0x40001000

0800228c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022ac:	4a20      	ldr	r2, [pc, #128]	@ (8002330 <MX_TIM8_Init+0xa4>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80022b0:	4b1e      	ldr	r3, [pc, #120]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022b2:	22a9      	movs	r2, #169	@ 0xa9
 80022b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b19      	ldr	r3, [pc, #100]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	4b16      	ldr	r3, [pc, #88]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022d6:	4815      	ldr	r0, [pc, #84]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022d8:	f005 fe80 	bl	8007fdc <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80022e2:	f001 ffd7 	bl	8004294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	4619      	mov	r1, r3
 80022f2:	480e      	ldr	r0, [pc, #56]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022f4:	f006 fe04 	bl	8008f00 <HAL_TIM_ConfigClockSource>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80022fe:	f001 ffc9 	bl	8004294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	4619      	mov	r1, r3
 8002312:	4806      	ldr	r0, [pc, #24]	@ (800232c <MX_TIM8_Init+0xa0>)
 8002314:	f007 fdda 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800231e:	f001 ffb9 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002322:	bf00      	nop
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200007dc 	.word	0x200007dc
 8002330:	40013400 	.word	0x40013400

08002334 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002338:	4b14      	ldr	r3, [pc, #80]	@ (800238c <MX_TIM16_Init+0x58>)
 800233a:	4a15      	ldr	r2, [pc, #84]	@ (8002390 <MX_TIM16_Init+0x5c>)
 800233c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800233e:	4b13      	ldr	r3, [pc, #76]	@ (800238c <MX_TIM16_Init+0x58>)
 8002340:	22a9      	movs	r2, #169	@ 0xa9
 8002342:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b11      	ldr	r3, [pc, #68]	@ (800238c <MX_TIM16_Init+0x58>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800234a:	4b10      	ldr	r3, [pc, #64]	@ (800238c <MX_TIM16_Init+0x58>)
 800234c:	f240 4279 	movw	r2, #1145	@ 0x479
 8002350:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002352:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <MX_TIM16_Init+0x58>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <MX_TIM16_Init+0x58>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <MX_TIM16_Init+0x58>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002364:	4809      	ldr	r0, [pc, #36]	@ (800238c <MX_TIM16_Init+0x58>)
 8002366:	f005 fe39 	bl	8007fdc <HAL_TIM_Base_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002370:	f001 ff90 	bl	8004294 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002374:	2108      	movs	r1, #8
 8002376:	4805      	ldr	r0, [pc, #20]	@ (800238c <MX_TIM16_Init+0x58>)
 8002378:	f006 f8fc 	bl	8008574 <HAL_TIM_OnePulse_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002382:	f001 ff87 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200008a8 	.word	0x200008a8
 8002390:	40014400 	.word	0x40014400

08002394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002398:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 800239a:	4a24      	ldr	r2, [pc, #144]	@ (800242c <MX_USART2_UART_Init+0x98>)
 800239c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800239e:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023a0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80023a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80023a6:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023ac:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80023b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023be:	220c      	movs	r2, #12
 80023c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c2:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c8:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ce:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023da:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023e0:	4811      	ldr	r0, [pc, #68]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023e2:	f007 fe59 	bl	800a098 <HAL_UART_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80023ec:	f001 ff52 	bl	8004294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f0:	2100      	movs	r1, #0
 80023f2:	480d      	ldr	r0, [pc, #52]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 80023f4:	f009 fc79 	bl	800bcea <HAL_UARTEx_SetTxFifoThreshold>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80023fe:	f001 ff49 	bl	8004294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002402:	2100      	movs	r1, #0
 8002404:	4808      	ldr	r0, [pc, #32]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 8002406:	f009 fcae 	bl	800bd66 <HAL_UARTEx_SetRxFifoThreshold>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002410:	f001 ff40 	bl	8004294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002414:	4804      	ldr	r0, [pc, #16]	@ (8002428 <MX_USART2_UART_Init+0x94>)
 8002416:	f009 fc2f 	bl	800bc78 <HAL_UARTEx_DisableFifoMode>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002420:	f001 ff38 	bl	8004294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000974 	.word	0x20000974
 800242c:	40004400 	.word	0x40004400

08002430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002436:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <MX_DMA_Init+0x70>)
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	4a19      	ldr	r2, [pc, #100]	@ (80024a0 <MX_DMA_Init+0x70>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6493      	str	r3, [r2, #72]	@ 0x48
 8002442:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <MX_DMA_Init+0x70>)
 8002444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <MX_DMA_Init+0x70>)
 8002450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002452:	4a13      	ldr	r2, [pc, #76]	@ (80024a0 <MX_DMA_Init+0x70>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6493      	str	r3, [r2, #72]	@ 0x48
 800245a:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <MX_DMA_Init+0x70>)
 800245c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	200b      	movs	r0, #11
 800246c:	f004 f83b 	bl	80064e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002470:	200b      	movs	r0, #11
 8002472:	f004 f852 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	200c      	movs	r0, #12
 800247c:	f004 f833 	bl	80064e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002480:	200c      	movs	r0, #12
 8002482:	f004 f84a 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	200d      	movs	r0, #13
 800248c:	f004 f82b 	bl	80064e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002490:	200d      	movs	r0, #13
 8002492:	f004 f842 	bl	800651a <HAL_NVIC_EnableIRQ>

}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000

080024a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	@ 0x28
 80024a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	4a6a      	ldr	r2, [pc, #424]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c6:	4b68      	ldr	r3, [pc, #416]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d2:	4b65      	ldr	r3, [pc, #404]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	4a64      	ldr	r2, [pc, #400]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024de:	4b62      	ldr	r3, [pc, #392]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	4b59      	ldr	r3, [pc, #356]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002506:	4a58      	ldr	r2, [pc, #352]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800250e:	4b56      	ldr	r3, [pc, #344]	@ (8002668 <MX_GPIO_Init+0x1c4>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LAMP1_Pin|LAMP2_Pin|PUSH_Pin|Vacuum_Pin, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002520:	4852      	ldr	r0, [pc, #328]	@ (800266c <MX_GPIO_Init+0x1c8>)
 8002522:	f004 fce1 	bl	8006ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	2123      	movs	r1, #35	@ 0x23
 800252a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800252e:	f004 fcdb 	bl	8006ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULL_GPIO_Port, PULL_Pin, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	2120      	movs	r1, #32
 8002536:	484d      	ldr	r0, [pc, #308]	@ (800266c <MX_GPIO_Init+0x1c8>)
 8002538:	f004 fcd6 	bl	8006ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800253c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002542:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	4846      	ldr	r0, [pc, #280]	@ (800266c <MX_GPIO_Init+0x1c8>)
 8002554:	f004 fb2e 	bl	8006bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWJoy_Pin LeadSW1_Pin Floor4_Pin */
  GPIO_InitStruct.Pin = SWJoy_Pin|LeadSW1_Pin|Floor4_Pin;
 8002558:	2383      	movs	r3, #131	@ 0x83
 800255a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002560:	2301      	movs	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4619      	mov	r1, r3
 800256a:	4840      	ldr	r0, [pc, #256]	@ (800266c <MX_GPIO_Init+0x1c8>)
 800256c:	f004 fb22 	bl	8006bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAMP1_Pin LAMP2_Pin PULL_Pin PUSH_Pin
                           Vacuum_Pin */
  GPIO_InitStruct.Pin = LAMP1_Pin|LAMP2_Pin|PULL_Pin|PUSH_Pin
 8002570:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002574:	617b      	str	r3, [r7, #20]
                          |Vacuum_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002576:	2301      	movs	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4838      	ldr	r0, [pc, #224]	@ (800266c <MX_GPIO_Init+0x1c8>)
 800258a:	f004 fb13 	bl	8006bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DirectionMotor_Pin AnotherDMotor_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin;
 800258e:	2323      	movs	r3, #35	@ 0x23
 8002590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002592:	2301      	movs	r3, #1
 8002594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a8:	f004 fb04 	bl	8006bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ResetSw_Pin */
  GPIO_InitStruct.Pin = ResetSw_Pin;
 80025ac:	2310      	movs	r3, #16
 80025ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ResetSw_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025c2:	f004 faf7 	bl	8006bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeadSW2_Pin Floor1_Pin Floor5_Pin */
  GPIO_InitStruct.Pin = LeadSW2_Pin|Floor1_Pin|Floor5_Pin;
 80025c6:	f240 4341 	movw	r3, #1089	@ 0x441
 80025ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d0:	2301      	movs	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4619      	mov	r1, r3
 80025da:	4825      	ldr	r0, [pc, #148]	@ (8002670 <MX_GPIO_Init+0x1cc>)
 80025dc:	f004 faea 	bl	8006bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EmergencySw_Pin */
  GPIO_InitStruct.Pin = EmergencySw_Pin;
 80025e0:	2304      	movs	r3, #4
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EmergencySw_GPIO_Port, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	481f      	ldr	r0, [pc, #124]	@ (8002670 <MX_GPIO_Init+0x1cc>)
 80025f4:	f004 fade 	bl	8006bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Floor2_Pin Floor3_Pin HomeButton_Pin */
  GPIO_InitStruct.Pin = Floor2_Pin|Floor3_Pin|HomeButton_Pin;
 80025f8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80025fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002602:	2301      	movs	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002610:	f004 fad0 	bl	8006bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lowerprox_Pin UpperProx_Pin */
  GPIO_InitStruct.Pin = Lowerprox_Pin|UpperProx_Pin;
 8002614:	2330      	movs	r3, #48	@ 0x30
 8002616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002618:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800261c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261e:	2301      	movs	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	4811      	ldr	r0, [pc, #68]	@ (8002670 <MX_GPIO_Init+0x1cc>)
 800262a:	f004 fac3 	bl	8006bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	200a      	movs	r0, #10
 8002634:	f003 ff57 	bl	80064e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002638:	200a      	movs	r0, #10
 800263a:	f003 ff6e 	bl	800651a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	2017      	movs	r0, #23
 8002644:	f003 ff4f 	bl	80064e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002648:	2017      	movs	r0, #23
 800264a:	f003 ff66 	bl	800651a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	2028      	movs	r0, #40	@ 0x28
 8002654:	f003 ff47 	bl	80064e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002658:	2028      	movs	r0, #40	@ 0x28
 800265a:	f003 ff5e 	bl	800651a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800265e:	bf00      	nop
 8002660:	3728      	adds	r7, #40	@ 0x28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	48000800 	.word	0x48000800
 8002670:	48000400 	.word	0x48000400

08002674 <Joy_Averaged>:

/* USER CODE BEGIN 4 */
void Joy_Averaged()
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	e017      	b.n	80026b0 <Joy_Averaged+0x3c>
	{
		joySum[0] += joyAnalogRead[2*i];
 8002680:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <Joy_Averaged+0x94>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	0052      	lsls	r2, r2, #1
 8002688:	4920      	ldr	r1, [pc, #128]	@ (800270c <Joy_Averaged+0x98>)
 800268a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800268e:	4413      	add	r3, r2
 8002690:	4a1d      	ldr	r2, [pc, #116]	@ (8002708 <Joy_Averaged+0x94>)
 8002692:	6013      	str	r3, [r2, #0]
		joySum[1] += joyAnalogRead[1+(2*i)];
 8002694:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <Joy_Averaged+0x94>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	0052      	lsls	r2, r2, #1
 800269c:	3201      	adds	r2, #1
 800269e:	491b      	ldr	r1, [pc, #108]	@ (800270c <Joy_Averaged+0x98>)
 80026a0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a18      	ldr	r2, [pc, #96]	@ (8002708 <Joy_Averaged+0x94>)
 80026a8:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 20; i++)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3301      	adds	r3, #1
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b13      	cmp	r3, #19
 80026b4:	dde4      	ble.n	8002680 <Joy_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	e014      	b.n	80026e6 <Joy_Averaged+0x72>
	{
		joyAvg[i] = joySum[i] / 20;
 80026bc:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <Joy_Averaged+0x94>)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	4a12      	ldr	r2, [pc, #72]	@ (8002710 <Joy_Averaged+0x9c>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	b299      	uxth	r1, r3
 80026ce:	4a11      	ldr	r2, [pc, #68]	@ (8002714 <Joy_Averaged+0xa0>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		joySum[i] = 0;
 80026d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002708 <Joy_Averaged+0x94>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2100      	movs	r1, #0
 80026dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	dde7      	ble.n	80026bc <Joy_Averaged+0x48>
	}

	joyX = joyAvg[0];
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <Joy_Averaged+0xa0>)
 80026ee:	881a      	ldrh	r2, [r3, #0]
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <Joy_Averaged+0xa4>)
 80026f2:	801a      	strh	r2, [r3, #0]
	joyY = joyAvg[1];
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <Joy_Averaged+0xa0>)
 80026f6:	885a      	ldrh	r2, [r3, #2]
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <Joy_Averaged+0xa8>)
 80026fa:	801a      	strh	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	20001344 	.word	0x20001344
 800270c:	200012ec 	.word	0x200012ec
 8002710:	cccccccd 	.word	0xcccccccd
 8002714:	20001340 	.word	0x20001340
 8002718:	2000134c 	.word	0x2000134c
 800271c:	2000134e 	.word	0x2000134e

08002720 <Joy_State>:
void Joy_State()
{
 8002720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002728:	2101      	movs	r1, #1
 800272a:	48af      	ldr	r0, [pc, #700]	@ (80029e8 <Joy_State+0x2c8>)
 800272c:	f004 fbc4 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8002730:	4603      	mov	r3, r0
 8002732:	4aae      	ldr	r2, [pc, #696]	@ (80029ec <Joy_State+0x2cc>)
 8002734:	7013      	strb	r3, [r2, #0]
if(state == 0)
 8002736:	4bae      	ldr	r3, [pc, #696]	@ (80029f0 <Joy_State+0x2d0>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d14a      	bne.n	80027d4 <Joy_State+0xb4>
	if (joyY > 3000)
	{
//		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 800273e:	f002 f973 	bl	8004a28 <HAL_GetTick>
 8002742:	4603      	mov	r3, r0
 8002744:	2200      	movs	r2, #0
 8002746:	469a      	mov	sl, r3
 8002748:	4693      	mov	fp, r2
 800274a:	4baa      	ldr	r3, [pc, #680]	@ (80029f4 <Joy_State+0x2d4>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	4552      	cmp	r2, sl
 8002752:	eb73 030b 	sbcs.w	r3, r3, fp
 8002756:	f080 8105 	bcs.w	8002964 <Joy_State+0x244>
	{
		if(joyX > 3000)
 800275a:	4ba7      	ldr	r3, [pc, #668]	@ (80029f8 <Joy_State+0x2d8>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002762:	4293      	cmp	r3, r2
 8002764:	d909      	bls.n	800277a <Joy_State+0x5a>
		{
			X_Actual_Position = X_Actual_Position-10;
 8002766:	4ba5      	ldr	r3, [pc, #660]	@ (80029fc <Joy_State+0x2dc>)
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002774:	4ba1      	ldr	r3, [pc, #644]	@ (80029fc <Joy_State+0x2dc>)
 8002776:	edc3 7a00 	vstr	s15, [r3]
		}
		if(joyX < 1600)
 800277a:	4b9f      	ldr	r3, [pc, #636]	@ (80029f8 <Joy_State+0x2d8>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002782:	d209      	bcs.n	8002798 <Joy_State+0x78>
		{
			X_Actual_Position = X_Actual_Position+10;
 8002784:	4b9d      	ldr	r3, [pc, #628]	@ (80029fc <Joy_State+0x2dc>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800278e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002792:	4b9a      	ldr	r3, [pc, #616]	@ (80029fc <Joy_State+0x2dc>)
 8002794:	edc3 7a00 	vstr	s15, [r3]
		}
		if(X_Actual_Position <= 0)X_Actual_Position=0;
 8002798:	4b98      	ldr	r3, [pc, #608]	@ (80029fc <Joy_State+0x2dc>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a6:	d803      	bhi.n	80027b0 <Joy_State+0x90>
 80027a8:	4b94      	ldr	r3, [pc, #592]	@ (80029fc <Joy_State+0x2dc>)
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 80027b0:	f002 f93a 	bl	8004a28 <HAL_GetTick>
 80027b4:	4603      	mov	r3, r0
 80027b6:	3364      	adds	r3, #100	@ 0x64
 80027b8:	2200      	movs	r2, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	617a      	str	r2, [r7, #20]
 80027be:	4b8d      	ldr	r3, [pc, #564]	@ (80029f4 <Joy_State+0x2d4>)
 80027c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80027c4:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80027c8:	2120      	movs	r1, #32
 80027ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027ce:	f004 fba3 	bl	8006f18 <HAL_GPIO_TogglePin>
 80027d2:	e0c7      	b.n	8002964 <Joy_State+0x244>
	}
}

else if(state == 1)
 80027d4:	4b86      	ldr	r3, [pc, #536]	@ (80029f0 <Joy_State+0x2d0>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d16e      	bne.n	80028ba <Joy_State+0x19a>
{
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 80027dc:	f002 f924 	bl	8004a28 <HAL_GetTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2200      	movs	r2, #0
 80027e4:	4698      	mov	r8, r3
 80027e6:	4691      	mov	r9, r2
 80027e8:	4b85      	ldr	r3, [pc, #532]	@ (8002a00 <Joy_State+0x2e0>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	4542      	cmp	r2, r8
 80027f0:	eb73 0309 	sbcs.w	r3, r3, r9
 80027f4:	d22c      	bcs.n	8002850 <Joy_State+0x130>
	{
		if(joyX > 3000)
 80027f6:	4b80      	ldr	r3, [pc, #512]	@ (80029f8 <Joy_State+0x2d8>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80027fe:	4293      	cmp	r3, r2
 8002800:	d904      	bls.n	800280c <Joy_State+0xec>
		{
			A = A-250;
 8002802:	4b80      	ldr	r3, [pc, #512]	@ (8002a04 <Joy_State+0x2e4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3bfa      	subs	r3, #250	@ 0xfa
 8002808:	4a7e      	ldr	r2, [pc, #504]	@ (8002a04 <Joy_State+0x2e4>)
 800280a:	6013      	str	r3, [r2, #0]
		}
		if(joyX < 1600)
 800280c:	4b7a      	ldr	r3, [pc, #488]	@ (80029f8 <Joy_State+0x2d8>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002814:	d204      	bcs.n	8002820 <Joy_State+0x100>
		{
			A = A+250;
 8002816:	4b7b      	ldr	r3, [pc, #492]	@ (8002a04 <Joy_State+0x2e4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	33fa      	adds	r3, #250	@ 0xfa
 800281c:	4a79      	ldr	r2, [pc, #484]	@ (8002a04 <Joy_State+0x2e4>)
 800281e:	6013      	str	r3, [r2, #0]
		}
		if(A <= 0)A=0;
 8002820:	4b78      	ldr	r3, [pc, #480]	@ (8002a04 <Joy_State+0x2e4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	dc02      	bgt.n	800282e <Joy_State+0x10e>
 8002828:	4b76      	ldr	r3, [pc, #472]	@ (8002a04 <Joy_State+0x2e4>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 800282e:	f002 f8fb 	bl	8004a28 <HAL_GetTick>
 8002832:	4603      	mov	r3, r0
 8002834:	3364      	adds	r3, #100	@ 0x64
 8002836:	2200      	movs	r2, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	60fa      	str	r2, [r7, #12]
 800283c:	4b70      	ldr	r3, [pc, #448]	@ (8002a00 <Joy_State+0x2e0>)
 800283e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002842:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002846:	2120      	movs	r1, #32
 8002848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800284c:	f004 fb64 	bl	8006f18 <HAL_GPIO_TogglePin>
	}
	if(joyY > 3000 || joyY < 1600)
 8002850:	4b6d      	ldr	r3, [pc, #436]	@ (8002a08 <Joy_State+0x2e8>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002858:	4293      	cmp	r3, r2
 800285a:	d804      	bhi.n	8002866 <Joy_State+0x146>
 800285c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a08 <Joy_State+0x2e8>)
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8002864:	d21d      	bcs.n	80028a2 <Joy_State+0x182>
	{
		if (joyY > 3000)
 8002866:	4b68      	ldr	r3, [pc, #416]	@ (8002a08 <Joy_State+0x2e8>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800286e:	4293      	cmp	r3, r2
 8002870:	d90b      	bls.n	800288a <Joy_State+0x16a>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8002872:	2201      	movs	r2, #1
 8002874:	2101      	movs	r1, #1
 8002876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800287a:	f004 fb35 	bl	8006ee8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 800287e:	4b61      	ldr	r3, [pc, #388]	@ (8002a04 <Joy_State+0x2e4>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b62      	ldr	r3, [pc, #392]	@ (8002a0c <Joy_State+0x2ec>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 8002888:	e06c      	b.n	8002964 <Joy_State+0x244>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2101      	movs	r1, #1
 800288e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002892:	f004 fb29 	bl	8006ee8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 8002896:	4b5b      	ldr	r3, [pc, #364]	@ (8002a04 <Joy_State+0x2e4>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b5c      	ldr	r3, [pc, #368]	@ (8002a0c <Joy_State+0x2ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 80028a0:	e060      	b.n	8002964 <Joy_State+0x244>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2101      	movs	r1, #1
 80028a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028aa:	f004 fb1d 	bl	8006ee8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
 80028ae:	4b57      	ldr	r3, [pc, #348]	@ (8002a0c <Joy_State+0x2ec>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80028b8:	e054      	b.n	8002964 <Joy_State+0x244>
	}
}

else if(state == 2)
 80028ba:	4b4d      	ldr	r3, [pc, #308]	@ (80029f0 <Joy_State+0x2d0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d145      	bne.n	800294e <Joy_State+0x22e>
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 80028c2:	2201      	movs	r2, #1
 80028c4:	2120      	movs	r1, #32
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ca:	f004 fb0d 	bl	8006ee8 <HAL_GPIO_WritePin>
	if(joyY > 3000 || joyY < 1600)
 80028ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002a08 <Joy_State+0x2e8>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d804      	bhi.n	80028e4 <Joy_State+0x1c4>
 80028da:	4b4b      	ldr	r3, [pc, #300]	@ (8002a08 <Joy_State+0x2e8>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80028e2:	d225      	bcs.n	8002930 <Joy_State+0x210>
	{
		if (joyY > 3000)
 80028e4:	4b48      	ldr	r3, [pc, #288]	@ (8002a08 <Joy_State+0x2e8>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d90f      	bls.n	8002910 <Joy_State+0x1f0>
		{
			A = 10625;
 80028f0:	4b44      	ldr	r3, [pc, #272]	@ (8002a04 <Joy_State+0x2e4>)
 80028f2:	f642 1281 	movw	r2, #10625	@ 0x2981
 80028f6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80028f8:	2201      	movs	r2, #1
 80028fa:	2101      	movs	r1, #1
 80028fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002900:	f004 faf2 	bl	8006ee8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 8002904:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <Joy_State+0x2ec>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f642 020a 	movw	r2, #10250	@ 0x280a
 800290c:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 800290e:	e029      	b.n	8002964 <Joy_State+0x244>
		}
		else
		{
			A = -10625;
 8002910:	4b3c      	ldr	r3, [pc, #240]	@ (8002a04 <Joy_State+0x2e4>)
 8002912:	f46f 5226 	mvn.w	r2, #10624	@ 0x2980
 8002916:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	2101      	movs	r1, #1
 800291c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002920:	f004 fae2 	bl	8006ee8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 8002924:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <Joy_State+0x2ec>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f642 020a 	movw	r2, #10250	@ 0x280a
 800292c:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 800292e:	e019      	b.n	8002964 <Joy_State+0x244>
		}
	}
	else
	{
		A = 0;
 8002930:	4b34      	ldr	r3, [pc, #208]	@ (8002a04 <Joy_State+0x2e4>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2101      	movs	r1, #1
 800293a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800293e:	f004 fad3 	bl	8006ee8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 8002942:	4b32      	ldr	r3, [pc, #200]	@ (8002a0c <Joy_State+0x2ec>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34
 800294c:	e00a      	b.n	8002964 <Joy_State+0x244>
//	}
//	PIDposition2();
//}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2101      	movs	r1, #1
 8002952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002956:	f004 fac7 	bl	8006ee8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 800295a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a0c <Joy_State+0x2ec>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002962:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	static uint64_t timestamp2 =0;
	if(timestamp2 < HAL_GetTick())
 8002964:	f002 f860 	bl	8004a28 <HAL_GetTick>
 8002968:	4603      	mov	r3, r0
 800296a:	2200      	movs	r2, #0
 800296c:	461c      	mov	r4, r3
 800296e:	4615      	mov	r5, r2
 8002970:	4b27      	ldr	r3, [pc, #156]	@ (8002a10 <Joy_State+0x2f0>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	42a2      	cmp	r2, r4
 8002978:	41ab      	sbcs	r3, r5
 800297a:	d279      	bcs.n	8002a70 <Joy_State+0x350>
	{
		if (joySW == 0)
 800297c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <Joy_State+0x2cc>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d169      	bne.n	8002a58 <Joy_State+0x338>
		{
			switch (state)
 8002984:	4b1a      	ldr	r3, [pc, #104]	@ (80029f0 <Joy_State+0x2d0>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d865      	bhi.n	8002a58 <Joy_State+0x338>
 800298c:	a201      	add	r2, pc, #4	@ (adr r2, 8002994 <Joy_State+0x274>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029c7 	.word	0x080029c7
 800299c:	08002a15 	.word	0x08002a15
 80029a0:	08002a37 	.word	0x08002a37
			{
			case 0:
				state = 1;
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <Joy_State+0x2d0>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029aa:	e007      	b.n	80029bc <Joy_State+0x29c>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80029ac:	2101      	movs	r1, #1
 80029ae:	480e      	ldr	r0, [pc, #56]	@ (80029e8 <Joy_State+0x2c8>)
 80029b0:	f004 fa82 	bl	8006eb8 <HAL_GPIO_ReadPin>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <Joy_State+0x2cc>)
 80029ba:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <Joy_State+0x2cc>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f3      	beq.n	80029ac <Joy_State+0x28c>
				}
				break;
 80029c4:	e048      	b.n	8002a58 <Joy_State+0x338>
			case 1:
				state = 2;
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <Joy_State+0x2d0>)
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029cc:	e007      	b.n	80029de <Joy_State+0x2be>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80029ce:	2101      	movs	r1, #1
 80029d0:	4805      	ldr	r0, [pc, #20]	@ (80029e8 <Joy_State+0x2c8>)
 80029d2:	f004 fa71 	bl	8006eb8 <HAL_GPIO_ReadPin>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <Joy_State+0x2cc>)
 80029dc:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029de:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <Joy_State+0x2cc>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f3      	beq.n	80029ce <Joy_State+0x2ae>
				}
				break;
 80029e6:	e037      	b.n	8002a58 <Joy_State+0x338>
 80029e8:	48000800 	.word	0x48000800
 80029ec:	2000133c 	.word	0x2000133c
 80029f0:	2000133d 	.word	0x2000133d
 80029f4:	200013c8 	.word	0x200013c8
 80029f8:	2000134c 	.word	0x2000134c
 80029fc:	20001168 	.word	0x20001168
 8002a00:	200013d0 	.word	0x200013d0
 8002a04:	20000200 	.word	0x20000200
 8002a08:	2000134e 	.word	0x2000134e
 8002a0c:	20000578 	.word	0x20000578
 8002a10:	200013d8 	.word	0x200013d8
			case 2:
				state = 3;
 8002a14:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <Joy_State+0x360>)
 8002a16:	2203      	movs	r2, #3
 8002a18:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a1a:	e007      	b.n	8002a2c <Joy_State+0x30c>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4819      	ldr	r0, [pc, #100]	@ (8002a84 <Joy_State+0x364>)
 8002a20:	f004 fa4a 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <Joy_State+0x368>)
 8002a2a:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a2c:	4b16      	ldr	r3, [pc, #88]	@ (8002a88 <Joy_State+0x368>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f3      	beq.n	8002a1c <Joy_State+0x2fc>
				}
				break;
 8002a34:	e010      	b.n	8002a58 <Joy_State+0x338>
			case 3:
				state = 0;
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <Joy_State+0x360>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a3c:	e007      	b.n	8002a4e <Joy_State+0x32e>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002a3e:	2101      	movs	r1, #1
 8002a40:	4810      	ldr	r0, [pc, #64]	@ (8002a84 <Joy_State+0x364>)
 8002a42:	f004 fa39 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <Joy_State+0x368>)
 8002a4c:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <Joy_State+0x368>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f3      	beq.n	8002a3e <Joy_State+0x31e>
				}
				break;
 8002a56:	bf00      	nop
			}
		}
		timestamp2 = HAL_GetTick() + 100;
 8002a58:	f001 ffe6 	bl	8004a28 <HAL_GetTick>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	3364      	adds	r3, #100	@ 0x64
 8002a60:	2200      	movs	r2, #0
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <Joy_State+0x36c>)
 8002a68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002a6c:	e9c3 1200 	strd	r1, r2, [r3]
	}
	Joy_Averaged();
 8002a70:	f7ff fe00 	bl	8002674 <Joy_Averaged>
}
 8002a74:	bf00      	nop
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000133d 	.word	0x2000133d
 8002a84:	48000800 	.word	0x48000800
 8002a88:	2000133c 	.word	0x2000133c
 8002a8c:	200013d8 	.word	0x200013d8

08002a90 <ButtonMem>:
void ButtonMem(){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
	if(Mode == 1)
 8002a94:	4b62      	ldr	r3, [pc, #392]	@ (8002c20 <ButtonMem+0x190>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 8087 	bne.w	8002bac <ButtonMem+0x11c>
		{
			if(ButtonTest[1] == 0)
 8002a9e:	4b61      	ldr	r3, [pc, #388]	@ (8002c24 <ButtonMem+0x194>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d112      	bne.n	8002acc <ButtonMem+0x3c>
			{
				registerFrame[0x23].U16 = Pos*10;
 8002aa6:	4b60      	ldr	r3, [pc, #384]	@ (8002c28 <ButtonMem+0x198>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab8:	ee17 3a90 	vmov	r3, s15
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b5b      	ldr	r3, [pc, #364]	@ (8002c2c <ButtonMem+0x19c>)
 8002ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				MemPos[0] = Pos;
 8002ac4:	4b58      	ldr	r3, [pc, #352]	@ (8002c28 <ButtonMem+0x198>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a59      	ldr	r2, [pc, #356]	@ (8002c30 <ButtonMem+0x1a0>)
 8002aca:	6013      	str	r3, [r2, #0]
			}
			if(ButtonTest[2] == 0)
 8002acc:	4b55      	ldr	r3, [pc, #340]	@ (8002c24 <ButtonMem+0x194>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d112      	bne.n	8002afa <ButtonMem+0x6a>
			{
				registerFrame[0x24].U16 = Pos*10;
 8002ad4:	4b54      	ldr	r3, [pc, #336]	@ (8002c28 <ButtonMem+0x198>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae6:	ee17 3a90 	vmov	r3, s15
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	4b4f      	ldr	r3, [pc, #316]	@ (8002c2c <ButtonMem+0x19c>)
 8002aee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
				MemPos[1] = Pos;
 8002af2:	4b4d      	ldr	r3, [pc, #308]	@ (8002c28 <ButtonMem+0x198>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4e      	ldr	r2, [pc, #312]	@ (8002c30 <ButtonMem+0x1a0>)
 8002af8:	6053      	str	r3, [r2, #4]
			}
			if(ButtonTest[3] == 0)
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <ButtonMem+0x194>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d112      	bne.n	8002b28 <ButtonMem+0x98>
			{
				registerFrame[0x25].U16 = Pos*10;
 8002b02:	4b49      	ldr	r3, [pc, #292]	@ (8002c28 <ButtonMem+0x198>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b14:	ee17 3a90 	vmov	r3, s15
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	4b44      	ldr	r3, [pc, #272]	@ (8002c2c <ButtonMem+0x19c>)
 8002b1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
				MemPos[2] = Pos;
 8002b20:	4b41      	ldr	r3, [pc, #260]	@ (8002c28 <ButtonMem+0x198>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a42      	ldr	r2, [pc, #264]	@ (8002c30 <ButtonMem+0x1a0>)
 8002b26:	6093      	str	r3, [r2, #8]
			}
			if(ButtonTest[4] == 0)
 8002b28:	4b3e      	ldr	r3, [pc, #248]	@ (8002c24 <ButtonMem+0x194>)
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d112      	bne.n	8002b56 <ButtonMem+0xc6>
			{
				registerFrame[0x26].U16 = Pos*10;
 8002b30:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <ButtonMem+0x198>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b42:	ee17 3a90 	vmov	r3, s15
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b38      	ldr	r3, [pc, #224]	@ (8002c2c <ButtonMem+0x19c>)
 8002b4a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
				MemPos[3] = Pos;
 8002b4e:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <ButtonMem+0x198>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a37      	ldr	r2, [pc, #220]	@ (8002c30 <ButtonMem+0x1a0>)
 8002b54:	60d3      	str	r3, [r2, #12]
			}
			if(ButtonTest[5] == 0)
 8002b56:	4b33      	ldr	r3, [pc, #204]	@ (8002c24 <ButtonMem+0x194>)
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d112      	bne.n	8002b84 <ButtonMem+0xf4>
			{
				registerFrame[0x27].U16 = Pos*10;
 8002b5e:	4b32      	ldr	r3, [pc, #200]	@ (8002c28 <ButtonMem+0x198>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b70:	ee17 3a90 	vmov	r3, s15
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b2d      	ldr	r3, [pc, #180]	@ (8002c2c <ButtonMem+0x19c>)
 8002b78:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
				MemPos[4] = Pos;
 8002b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <ButtonMem+0x198>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2b      	ldr	r2, [pc, #172]	@ (8002c30 <ButtonMem+0x1a0>)
 8002b82:	6113      	str	r3, [r2, #16]
			}
			if(ButtonTest[0] == 0)//HOME Button
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <ButtonMem+0x194>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d147      	bne.n	8002c1c <ButtonMem+0x18c>
			{
				registerFrame[0x10].U16 = 0b0000;
 8002b8c:	4b27      	ldr	r3, [pc, #156]	@ (8002c2c <ButtonMem+0x19c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	841a      	strh	r2, [r3, #32]
				resetHome();
 8002b92:	f000 f8a9 	bl	8002ce8 <resetHome>
				Pos_Target = 0;
 8002b96:	4b27      	ldr	r3, [pc, #156]	@ (8002c34 <ButtonMem+0x1a4>)
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
				Mode = 0;
 8002b9e:	4b20      	ldr	r3, [pc, #128]	@ (8002c20 <ButtonMem+0x190>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
				state_ALL = 0;
 8002ba4:	4b24      	ldr	r3, [pc, #144]	@ (8002c38 <ButtonMem+0x1a8>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
				Mode = 0;
				Pos_Target = 0;
				resetHome();
			}
		}
}
 8002baa:	e037      	b.n	8002c1c <ButtonMem+0x18c>
			if(ButtonTest[1] == 0)
 8002bac:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <ButtonMem+0x194>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <ButtonMem+0x12c>
				MemPos[0] = Pos;
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c28 <ButtonMem+0x198>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c30 <ButtonMem+0x1a0>)
 8002bba:	6013      	str	r3, [r2, #0]
			if(ButtonTest[2] == 0)
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <ButtonMem+0x194>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d103      	bne.n	8002bcc <ButtonMem+0x13c>
				MemPos[1] = Pos;
 8002bc4:	4b18      	ldr	r3, [pc, #96]	@ (8002c28 <ButtonMem+0x198>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a19      	ldr	r2, [pc, #100]	@ (8002c30 <ButtonMem+0x1a0>)
 8002bca:	6053      	str	r3, [r2, #4]
			if(ButtonTest[3] == 0)
 8002bcc:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <ButtonMem+0x194>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <ButtonMem+0x14c>
				MemPos[2] = Pos;
 8002bd4:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <ButtonMem+0x198>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <ButtonMem+0x1a0>)
 8002bda:	6093      	str	r3, [r2, #8]
			if(ButtonTest[4] == 0)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <ButtonMem+0x194>)
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <ButtonMem+0x15c>
				MemPos[3] = Pos;
 8002be4:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <ButtonMem+0x198>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a11      	ldr	r2, [pc, #68]	@ (8002c30 <ButtonMem+0x1a0>)
 8002bea:	60d3      	str	r3, [r2, #12]
			if(ButtonTest[5] == 0)
 8002bec:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <ButtonMem+0x194>)
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <ButtonMem+0x16c>
				MemPos[4] = Pos;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <ButtonMem+0x198>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c30 <ButtonMem+0x1a0>)
 8002bfa:	6113      	str	r3, [r2, #16]
			if(ButtonTest[0] == 0)//HOME Button
 8002bfc:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <ButtonMem+0x194>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <ButtonMem+0x18c>
				state_ALL = 0;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <ButtonMem+0x1a8>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
				Mode = 0;
 8002c0a:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <ButtonMem+0x190>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
				Pos_Target = 0;
 8002c10:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <ButtonMem+0x1a4>)
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
				resetHome();
 8002c18:	f000 f866 	bl	8002ce8 <resetHome>
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	2000116c 	.word	0x2000116c
 8002c24:	200011cc 	.word	0x200011cc
 8002c28:	20001364 	.word	0x20001364
 8002c2c:	20000fd8 	.word	0x20000fd8
 8002c30:	200011fc 	.word	0x200011fc
 8002c34:	200012cc 	.word	0x200012cc
 8002c38:	20000204 	.word	0x20000204

08002c3c <reset>:

void reset(){
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002c40:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <reset+0x90>)
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002c48:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <reset+0x90>)
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002c50:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <reset+0x90>)
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002c58:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <reset+0x90>)
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002c60:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <reset+0x90>)
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002c68:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <reset+0x90>)
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002c70:	4b17      	ldr	r3, [pc, #92]	@ (8002cd0 <reset+0x94>)
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002c78:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <reset+0x94>)
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002c80:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <reset+0x94>)
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <reset+0x94>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <reset+0x94>)
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 8002c98:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd0 <reset+0x94>)
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
	PWMmap = 0;
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <reset+0x98>)
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
	Pos_Start = Pos;
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <reset+0x9c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0b      	ldr	r2, [pc, #44]	@ (8002cdc <reset+0xa0>)
 8002cae:	6013      	str	r3, [r2, #0]
	Velo_Start = 0;
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <reset+0xa4>)
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
	t = 0;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <reset+0xa8>)
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20001228 	.word	0x20001228
 8002cd0:	20001250 	.word	0x20001250
 8002cd4:	200011a4 	.word	0x200011a4
 8002cd8:	20001364 	.word	0x20001364
 8002cdc:	200012c8 	.word	0x200012c8
 8002ce0:	200012d4 	.word	0x200012d4
 8002ce4:	200012e4 	.word	0x200012e4

08002ce8 <resetHome>:
void resetHome(){
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002cec:	4b38      	ldr	r3, [pc, #224]	@ (8002dd0 <resetHome+0xe8>)
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002cf4:	4b36      	ldr	r3, [pc, #216]	@ (8002dd0 <resetHome+0xe8>)
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002cfc:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <resetHome+0xe8>)
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002d04:	4b32      	ldr	r3, [pc, #200]	@ (8002dd0 <resetHome+0xe8>)
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002d0c:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <resetHome+0xe8>)
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002d14:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd0 <resetHome+0xe8>)
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <resetHome+0xec>)
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002d24:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd4 <resetHome+0xec>)
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002d2c:	4b29      	ldr	r3, [pc, #164]	@ (8002dd4 <resetHome+0xec>)
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <resetHome+0xec>)
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002d3c:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <resetHome+0xec>)
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 8002d44:	4b23      	ldr	r3, [pc, #140]	@ (8002dd4 <resetHome+0xec>)
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
	Velocontrol.Error[NEW] = 0;
 8002d4c:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <resetHome+0xe8>)
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	60da      	str	r2, [r3, #12]

	Velocontrol2.Error[OLD] = 0;
 8002d54:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <resetHome+0xf0>)
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
	Velocontrol2.Error[OLDER] = 0;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <resetHome+0xf0>)
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
	Velocontrol2.Output[NEW] = 0;
 8002d64:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <resetHome+0xf0>)
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
	Velocontrol2.Output[OLD] = 0;
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <resetHome+0xf0>)
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]
	Velocontrol2.Output[OLDER] = 0;
 8002d74:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <resetHome+0xf0>)
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]

	Poscontrol2.Error[NEW] = 0;
 8002d7c:	4b17      	ldr	r3, [pc, #92]	@ (8002ddc <resetHome+0xf4>)
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
	Poscontrol2.Error[OLD] = 0;
 8002d84:	4b15      	ldr	r3, [pc, #84]	@ (8002ddc <resetHome+0xf4>)
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
	Poscontrol2.Error[OLDER] = 0;
 8002d8c:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <resetHome+0xf4>)
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	615a      	str	r2, [r3, #20]
	Poscontrol2.Output[NEW] = 0;
 8002d94:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <resetHome+0xf4>)
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
	Poscontrol2.Output[OLD] = 0;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <resetHome+0xf4>)
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	605a      	str	r2, [r3, #4]
	Poscontrol2.Output[OLDER] = 0;
 8002da4:	4b0d      	ldr	r3, [pc, #52]	@ (8002ddc <resetHome+0xf4>)
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
	Pos_Start = 0;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <resetHome+0xf8>)
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
	Velo_Start = 0;
 8002db4:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <resetHome+0xfc>)
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
	t = 0;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <resetHome+0x100>)
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20001228 	.word	0x20001228
 8002dd4:	20001250 	.word	0x20001250
 8002dd8:	20001278 	.word	0x20001278
 8002ddc:	200012a0 	.word	0x200012a0
 8002de0:	200012c8 	.word	0x200012c8
 8002de4:	200012d4 	.word	0x200012d4
 8002de8:	200012e4 	.word	0x200012e4

08002dec <PIDreset>:
void PIDreset(){
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002df0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e5c <PIDreset+0x70>)
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002df8:	4b18      	ldr	r3, [pc, #96]	@ (8002e5c <PIDreset+0x70>)
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002e00:	4b16      	ldr	r3, [pc, #88]	@ (8002e5c <PIDreset+0x70>)
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002e08:	4b14      	ldr	r3, [pc, #80]	@ (8002e5c <PIDreset+0x70>)
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002e10:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <PIDreset+0x70>)
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002e18:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <PIDreset+0x70>)
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <PIDreset+0x74>)
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002e28:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <PIDreset+0x74>)
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <PIDreset+0x74>)
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 8002e38:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <PIDreset+0x74>)
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002e40:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <PIDreset+0x74>)
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <PIDreset+0x74>)
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20001228 	.word	0x20001228
 8002e60:	20001250 	.word	0x20001250
 8002e64:	00000000 	.word	0x00000000

08002e68 <QEIEncoderPos_Update>:
void QEIEncoderPos_Update()
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8002e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f28 <QEIEncoderPos_Update+0xc0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b2d      	ldr	r3, [pc, #180]	@ (8002f2c <QEIEncoderPos_Update+0xc4>)
 8002e76:	601a      	str	r2, [r3, #0]
//	Pos = ((QEIReadRaw)*25*3.14)/8192;
	if(Count >= 0)
 8002e78:	4b2d      	ldr	r3, [pc, #180]	@ (8002f30 <QEIEncoderPos_Update+0xc8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db21      	blt.n	8002ec4 <QEIEncoderPos_Update+0x5c>
	{
//		Pos = ((QEIReadRaw+(Count*57344))*25*3.14)/8192;
		Pos = ((QEIReadRaw)*25*3.14)/8192;
 8002e80:	4b2a      	ldr	r3, [pc, #168]	@ (8002f2c <QEIEncoderPos_Update+0xc4>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009a      	lsls	r2, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb14 	bl	80004bc <__aeabi_i2d>
 8002e94:	a322      	add	r3, pc, #136	@ (adr r3, 8002f20 <QEIEncoderPos_Update+0xb8>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f7fd fb79 	bl	8000590 <__aeabi_dmul>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	4b22      	ldr	r3, [pc, #136]	@ (8002f34 <QEIEncoderPos_Update+0xcc>)
 8002eac:	f7fd fc9a 	bl	80007e4 <__aeabi_ddiv>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f7fd fe24 	bl	8000b04 <__aeabi_d2f>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f38 <QEIEncoderPos_Update+0xd0>)
 8002ec0:	6013      	str	r3, [r2, #0]
	else
	{
//		Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
		Pos	= -(((65535-QEIReadRaw)*25*3.14)/8192);
	}
}
 8002ec2:	e028      	b.n	8002f16 <QEIEncoderPos_Update+0xae>
		Pos	= -(((65535-QEIReadRaw)*25*3.14)/8192);
 8002ec4:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <QEIEncoderPos_Update+0xc4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f5c3 427f 	rsb	r2, r3, #65280	@ 0xff00
 8002ecc:	32ff      	adds	r2, #255	@ 0xff
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009a      	lsls	r2, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd faef 	bl	80004bc <__aeabi_i2d>
 8002ede:	a310      	add	r3, pc, #64	@ (adr r3, 8002f20 <QEIEncoderPos_Update+0xb8>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fb54 	bl	8000590 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <QEIEncoderPos_Update+0xcc>)
 8002ef6:	f7fd fc75 	bl	80007e4 <__aeabi_ddiv>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7fd fdff 	bl	8000b04 <__aeabi_d2f>
 8002f06:	4603      	mov	r3, r0
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eef1 7a67 	vneg.f32	s15, s15
 8002f10:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <QEIEncoderPos_Update+0xd0>)
 8002f12:	edc3 7a00 	vstr	s15, [r3]
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	f3af 8000 	nop.w
 8002f20:	51eb851f 	.word	0x51eb851f
 8002f24:	40091eb8 	.word	0x40091eb8
 8002f28:	200004ac 	.word	0x200004ac
 8002f2c:	20001370 	.word	0x20001370
 8002f30:	2000136c 	.word	0x2000136c
 8002f34:	40c00000 	.word	0x40c00000
 8002f38:	20001364 	.word	0x20001364
 8002f3c:	00000000 	.word	0x00000000

08002f40 <QEIEncoderVel_Update>:
void QEIEncoderVel_Update()
{
 8002f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 8002f48:	f001 f976 	bl	8004238 <micros>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	49a1      	ldr	r1, [pc, #644]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8002f52:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8002f56:	4ba1      	ldr	r3, [pc, #644]	@ (80031dc <QEIEncoderVel_Update+0x29c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	4a9e      	ldr	r2, [pc, #632]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8002f5e:	6013      	str	r3, [r2, #0]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002f60:	4b9d      	ldr	r3, [pc, #628]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f68:	ee07 3a90 	vmov	s15, r3
 8002f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f70:	4b99      	ldr	r3, [pc, #612]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8002f72:	edc3 7a06 	vstr	s15, [r3, #24]
//calculate dx
int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002f76:	4b98      	ldr	r3, [pc, #608]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b97      	ldr	r3, [pc, #604]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	607b      	str	r3, [r7, #4]
//Handle Warp around
if(diffPosition > 28672)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002f88:	dd08      	ble.n	8002f9c <QEIEncoderVel_Update+0x5c>
{
diffPosition -=57344;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f5a3 4360 	sub.w	r3, r3, #57344	@ 0xe000
 8002f90:	607b      	str	r3, [r7, #4]
Count-=1;
 8002f92:	4b93      	ldr	r3, [pc, #588]	@ (80031e0 <QEIEncoderVel_Update+0x2a0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	4a91      	ldr	r2, [pc, #580]	@ (80031e0 <QEIEncoderVel_Update+0x2a0>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
if(diffPosition < -28672)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f513 4fe0 	cmn.w	r3, #28672	@ 0x7000
 8002fa2:	da08      	bge.n	8002fb6 <QEIEncoderVel_Update+0x76>
{
diffPosition +=57344;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8002faa:	607b      	str	r3, [r7, #4]
Count+=1;
 8002fac:	4b8c      	ldr	r3, [pc, #560]	@ (80031e0 <QEIEncoderVel_Update+0x2a0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	4a8b      	ldr	r2, [pc, #556]	@ (80031e0 <QEIEncoderVel_Update+0x2a0>)
 8002fb4:	6013      	str	r3, [r2, #0]
}
//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8002fb6:	4b88      	ldr	r3, [pc, #544]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8002fb8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002fbc:	4b86      	ldr	r3, [pc, #536]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8002fbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fc2:	ebb0 0802 	subs.w	r8, r0, r2
 8002fc6:	eb61 0903 	sbc.w	r9, r1, r3
 8002fca:	4640      	mov	r0, r8
 8002fcc:	4649      	mov	r1, r9
 8002fce:	f7fd faa9 	bl	8000524 <__aeabi_ul2d>
 8002fd2:	a375      	add	r3, pc, #468	@ (adr r3, 80031a8 <QEIEncoderVel_Update+0x268>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd fada 	bl	8000590 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fd fd8e 	bl	8000b04 <__aeabi_d2f>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	603b      	str	r3, [r7, #0]
//calculate anglar velocity
QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ff6:	ed97 7a00 	vldr	s14, [r7]
 8002ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ffe:	4b76      	ldr	r3, [pc, #472]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8003000:	edc3 7a07 	vstr	s15, [r3, #28]
speed = ((QEIdata.QEIAngularVelocity)/8192)*12.5*2*3.14;
 8003004:	4b74      	ldr	r3, [pc, #464]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8003006:	edd3 7a07 	vldr	s15, [r3, #28]
 800300a:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80031e4 <QEIEncoderVel_Update+0x2a4>
 800300e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003012:	ee16 0a90 	vmov	r0, s13
 8003016:	f7fd fa63 	bl	80004e0 <__aeabi_f2d>
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	4b72      	ldr	r3, [pc, #456]	@ (80031e8 <QEIEncoderVel_Update+0x2a8>)
 8003020:	f7fd fab6 	bl	8000590 <__aeabi_dmul>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	f7fd f8f8 	bl	8000224 <__adddf3>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	a35c      	add	r3, pc, #368	@ (adr r3, 80031b0 <QEIEncoderVel_Update+0x270>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f7fd faa5 	bl	8000590 <__aeabi_dmul>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	f7fd fd59 	bl	8000b04 <__aeabi_d2f>
 8003052:	4603      	mov	r3, r0
 8003054:	4a65      	ldr	r2, [pc, #404]	@ (80031ec <QEIEncoderVel_Update+0x2ac>)
 8003056:	6013      	str	r3, [r2, #0]

speed_fill = (0.969*speed_fill_1)+(0.0155*speed)+(0.0155*speed_1);
 8003058:	4b65      	ldr	r3, [pc, #404]	@ (80031f0 <QEIEncoderVel_Update+0x2b0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa3f 	bl	80004e0 <__aeabi_f2d>
 8003062:	a355      	add	r3, pc, #340	@ (adr r3, 80031b8 <QEIEncoderVel_Update+0x278>)
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f7fd fa92 	bl	8000590 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4690      	mov	r8, r2
 8003072:	4699      	mov	r9, r3
 8003074:	4b5d      	ldr	r3, [pc, #372]	@ (80031ec <QEIEncoderVel_Update+0x2ac>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fa31 	bl	80004e0 <__aeabi_f2d>
 800307e:	a350      	add	r3, pc, #320	@ (adr r3, 80031c0 <QEIEncoderVel_Update+0x280>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f7fd fa84 	bl	8000590 <__aeabi_dmul>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4640      	mov	r0, r8
 800308e:	4649      	mov	r1, r9
 8003090:	f7fd f8c8 	bl	8000224 <__adddf3>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4690      	mov	r8, r2
 800309a:	4699      	mov	r9, r3
 800309c:	4b55      	ldr	r3, [pc, #340]	@ (80031f4 <QEIEncoderVel_Update+0x2b4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fa1d 	bl	80004e0 <__aeabi_f2d>
 80030a6:	a346      	add	r3, pc, #280	@ (adr r3, 80031c0 <QEIEncoderVel_Update+0x280>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd fa70 	bl	8000590 <__aeabi_dmul>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4640      	mov	r0, r8
 80030b6:	4649      	mov	r1, r9
 80030b8:	f7fd f8b4 	bl	8000224 <__adddf3>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7fd fd1e 	bl	8000b04 <__aeabi_d2f>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4a4b      	ldr	r2, [pc, #300]	@ (80031f8 <QEIEncoderVel_Update+0x2b8>)
 80030cc:	6013      	str	r3, [r2, #0]
speed_1 = speed;
 80030ce:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <QEIEncoderVel_Update+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a48      	ldr	r2, [pc, #288]	@ (80031f4 <QEIEncoderVel_Update+0x2b4>)
 80030d4:	6013      	str	r3, [r2, #0]
speed_fill_1 = speed_fill;
 80030d6:	4b48      	ldr	r3, [pc, #288]	@ (80031f8 <QEIEncoderVel_Update+0x2b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a45      	ldr	r2, [pc, #276]	@ (80031f0 <QEIEncoderVel_Update+0x2b0>)
 80030dc:	6013      	str	r3, [r2, #0]
if(fabs(speed_fill) < 0.0001 )
 80030de:	4b46      	ldr	r3, [pc, #280]	@ (80031f8 <QEIEncoderVel_Update+0x2b8>)
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	eef0 7ae7 	vabs.f32	s15, s15
 80030e8:	ee17 0a90 	vmov	r0, s15
 80030ec:	f7fd f9f8 	bl	80004e0 <__aeabi_f2d>
 80030f0:	a335      	add	r3, pc, #212	@ (adr r3, 80031c8 <QEIEncoderVel_Update+0x288>)
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	f7fd fcbd 	bl	8000a74 <__aeabi_dcmplt>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <QEIEncoderVel_Update+0x1c8>
{
	speed_fill = 0;
 8003100:	4b3d      	ldr	r3, [pc, #244]	@ (80031f8 <QEIEncoderVel_Update+0x2b8>)
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
}
static uint64_t timestamp_Accelation =0;
if(timestamp_Accelation < HAL_GetTick())
 8003108:	f001 fc8e 	bl	8004a28 <HAL_GetTick>
 800310c:	4603      	mov	r3, r0
 800310e:	2200      	movs	r2, #0
 8003110:	461c      	mov	r4, r3
 8003112:	4615      	mov	r5, r2
 8003114:	4b39      	ldr	r3, [pc, #228]	@ (80031fc <QEIEncoderVel_Update+0x2bc>)
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	42a2      	cmp	r2, r4
 800311c:	41ab      	sbcs	r3, r5
 800311e:	d225      	bcs.n	800316c <QEIEncoderVel_Update+0x22c>
{
Accelation = fabs(speed_fill-speed_fill_1)/0.01;
 8003120:	4b35      	ldr	r3, [pc, #212]	@ (80031f8 <QEIEncoderVel_Update+0x2b8>)
 8003122:	ed93 7a00 	vldr	s14, [r3]
 8003126:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <QEIEncoderVel_Update+0x2b0>)
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003130:	eef0 7ae7 	vabs.f32	s15, s15
 8003134:	ee17 0a90 	vmov	r0, s15
 8003138:	f7fd f9d2 	bl	80004e0 <__aeabi_f2d>
 800313c:	a324      	add	r3, pc, #144	@ (adr r3, 80031d0 <QEIEncoderVel_Update+0x290>)
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f7fd fb4f 	bl	80007e4 <__aeabi_ddiv>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	f7fd fcd9 	bl	8000b04 <__aeabi_d2f>
 8003152:	4603      	mov	r3, r0
 8003154:	4a2a      	ldr	r2, [pc, #168]	@ (8003200 <QEIEncoderVel_Update+0x2c0>)
 8003156:	6013      	str	r3, [r2, #0]
timestamp_Accelation = HAL_GetTick()+10;
 8003158:	f001 fc66 	bl	8004a28 <HAL_GetTick>
 800315c:	4603      	mov	r3, r0
 800315e:	330a      	adds	r3, #10
 8003160:	2200      	movs	r2, #0
 8003162:	469a      	mov	sl, r3
 8003164:	4693      	mov	fp, r2
 8003166:	4b25      	ldr	r3, [pc, #148]	@ (80031fc <QEIEncoderVel_Update+0x2bc>)
 8003168:	e9c3 ab00 	strd	sl, fp, [r3]





if(speed_fill>MAXspeed)
 800316c:	4b22      	ldr	r3, [pc, #136]	@ (80031f8 <QEIEncoderVel_Update+0x2b8>)
 800316e:	ed93 7a00 	vldr	s14, [r3]
 8003172:	4b24      	ldr	r3, [pc, #144]	@ (8003204 <QEIEncoderVel_Update+0x2c4>)
 8003174:	edd3 7a00 	vldr	s15, [r3]
 8003178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	dd03      	ble.n	800318a <QEIEncoderVel_Update+0x24a>
{
	MAXspeed = speed_fill;
 8003182:	4b1d      	ldr	r3, [pc, #116]	@ (80031f8 <QEIEncoderVel_Update+0x2b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <QEIEncoderVel_Update+0x2c4>)
 8003188:	6013      	str	r3, [r2, #0]
}
//store value for next loop
QEIdata.Position[OLD] = QEIdata.Position[NEW];
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8003190:	6053      	str	r3, [r2, #4]
QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8003192:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 8003194:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003198:	490f      	ldr	r1, [pc, #60]	@ (80031d8 <QEIEncoderVel_Update+0x298>)
 800319a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80031ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80031b0:	51eb851f 	.word	0x51eb851f
 80031b4:	40091eb8 	.word	0x40091eb8
 80031b8:	49ba5e35 	.word	0x49ba5e35
 80031bc:	3fef020c 	.word	0x3fef020c
 80031c0:	c8b43958 	.word	0xc8b43958
 80031c4:	3f8fbe76 	.word	0x3f8fbe76
 80031c8:	eb1c432d 	.word	0xeb1c432d
 80031cc:	3f1a36e2 	.word	0x3f1a36e2
 80031d0:	47ae147b 	.word	0x47ae147b
 80031d4:	3f847ae1 	.word	0x3f847ae1
 80031d8:	20001378 	.word	0x20001378
 80031dc:	200004ac 	.word	0x200004ac
 80031e0:	2000136c 	.word	0x2000136c
 80031e4:	46000000 	.word	0x46000000
 80031e8:	40290000 	.word	0x40290000
 80031ec:	20001350 	.word	0x20001350
 80031f0:	20001360 	.word	0x20001360
 80031f4:	20001354 	.word	0x20001354
 80031f8:	2000135c 	.word	0x2000135c
 80031fc:	200013e0 	.word	0x200013e0
 8003200:	20001368 	.word	0x20001368
 8003204:	20001358 	.word	0x20001358

08003208 <Trajectory>:

void Trajectory()
{
 8003208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
	static uint64_t timestamp_Traject =0;
		int64_t currentTime = micros();
 8003210:	f001 f812 	bl	8004238 <micros>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	e9c7 2300 	strd	r2, r3, [r7]
		  if(timestamp_Traject < currentTime)
 800321c:	4b99      	ldr	r3, [pc, #612]	@ (8003484 <Trajectory+0x27c>)
 800321e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003226:	4290      	cmp	r0, r2
 8003228:	eb71 0303 	sbcs.w	r3, r1, r3
 800322c:	f080 8219 	bcs.w	8003662 <Trajectory+0x45a>
		  {
			  switch(state_Tra)
 8003230:	4b95      	ldr	r3, [pc, #596]	@ (8003488 <Trajectory+0x280>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b03      	cmp	r3, #3
 8003236:	f200 81f6 	bhi.w	8003626 <Trajectory+0x41e>
 800323a:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <Trajectory+0x38>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	08003251 	.word	0x08003251
 8003244:	080033f5 	.word	0x080033f5
 8003248:	080034b9 	.word	0x080034b9
 800324c:	080035cf 	.word	0x080035cf
			  	  		  {
			  	  		  case 0:
			  	  			  if(Pos_Start > Pos_Target)
 8003250:	4b8e      	ldr	r3, [pc, #568]	@ (800348c <Trajectory+0x284>)
 8003252:	ed93 7a00 	vldr	s14, [r3]
 8003256:	4b8e      	ldr	r3, [pc, #568]	@ (8003490 <Trajectory+0x288>)
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003264:	dd04      	ble.n	8003270 <Trajectory+0x68>
			  	  			  {
			  	  				  direction = -1;
 8003266:	4b8b      	ldr	r3, [pc, #556]	@ (8003494 <Trajectory+0x28c>)
 8003268:	f04f 32ff 	mov.w	r2, #4294967295
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e002      	b.n	8003276 <Trajectory+0x6e>
			  	  			  }
			  	  			  else
			  	  			  {
			  	  				  direction = 1;
 8003270:	4b88      	ldr	r3, [pc, #544]	@ (8003494 <Trajectory+0x28c>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]
			  	  			  }
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)+((direction*0.5*Max_Acc)*(t*t));
 8003276:	4b88      	ldr	r3, [pc, #544]	@ (8003498 <Trajectory+0x290>)
 8003278:	ed93 7a00 	vldr	s14, [r3]
 800327c:	4b87      	ldr	r3, [pc, #540]	@ (800349c <Trajectory+0x294>)
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003286:	4b81      	ldr	r3, [pc, #516]	@ (800348c <Trajectory+0x284>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	ee17 0a90 	vmov	r0, s15
 8003294:	f7fd f924 	bl	80004e0 <__aeabi_f2d>
 8003298:	4680      	mov	r8, r0
 800329a:	4689      	mov	r9, r1
 800329c:	4b7d      	ldr	r3, [pc, #500]	@ (8003494 <Trajectory+0x28c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f90b 	bl	80004bc <__aeabi_i2d>
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	4b7d      	ldr	r3, [pc, #500]	@ (80034a0 <Trajectory+0x298>)
 80032ac:	f7fd f970 	bl	8000590 <__aeabi_dmul>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4692      	mov	sl, r2
 80032b6:	469b      	mov	fp, r3
 80032b8:	4b7a      	ldr	r3, [pc, #488]	@ (80034a4 <Trajectory+0x29c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd f90f 	bl	80004e0 <__aeabi_f2d>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4650      	mov	r0, sl
 80032c8:	4659      	mov	r1, fp
 80032ca:	f7fd f961 	bl	8000590 <__aeabi_dmul>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4692      	mov	sl, r2
 80032d4:	469b      	mov	fp, r3
 80032d6:	4b71      	ldr	r3, [pc, #452]	@ (800349c <Trajectory+0x294>)
 80032d8:	ed93 7a00 	vldr	s14, [r3]
 80032dc:	4b6f      	ldr	r3, [pc, #444]	@ (800349c <Trajectory+0x294>)
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e6:	ee17 0a90 	vmov	r0, s15
 80032ea:	f7fd f8f9 	bl	80004e0 <__aeabi_f2d>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4650      	mov	r0, sl
 80032f4:	4659      	mov	r1, fp
 80032f6:	f7fd f94b 	bl	8000590 <__aeabi_dmul>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4640      	mov	r0, r8
 8003300:	4649      	mov	r1, r9
 8003302:	f7fc ff8f 	bl	8000224 <__adddf3>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	f7fd fbf9 	bl	8000b04 <__aeabi_d2f>
 8003312:	4603      	mov	r3, r0
 8003314:	4a64      	ldr	r2, [pc, #400]	@ (80034a8 <Trajectory+0x2a0>)
 8003316:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start + direction*Max_Acc*t;
 8003318:	4b5e      	ldr	r3, [pc, #376]	@ (8003494 <Trajectory+0x28c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003324:	4b5f      	ldr	r3, [pc, #380]	@ (80034a4 <Trajectory+0x29c>)
 8003326:	edd3 7a00 	vldr	s15, [r3]
 800332a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800332e:	4b5b      	ldr	r3, [pc, #364]	@ (800349c <Trajectory+0x294>)
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003338:	4b57      	ldr	r3, [pc, #348]	@ (8003498 <Trajectory+0x290>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003342:	4b5a      	ldr	r3, [pc, #360]	@ (80034ac <Trajectory+0x2a4>)
 8003344:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = Max_Acc*direction;
 8003348:	4b52      	ldr	r3, [pc, #328]	@ (8003494 <Trajectory+0x28c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003354:	4b53      	ldr	r3, [pc, #332]	@ (80034a4 <Trajectory+0x29c>)
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335e:	4b54      	ldr	r3, [pc, #336]	@ (80034b0 <Trajectory+0x2a8>)
 8003360:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) >= Max_Velo)
 8003364:	4b51      	ldr	r3, [pc, #324]	@ (80034ac <Trajectory+0x2a4>)
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	eeb0 7ae7 	vabs.f32	s14, s15
 800336e:	4b51      	ldr	r3, [pc, #324]	@ (80034b4 <Trajectory+0x2ac>)
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	db0e      	blt.n	800339c <Trajectory+0x194>
			  	  				{
			  	  					state_Tra = 1;
 800337e:	4b42      	ldr	r3, [pc, #264]	@ (8003488 <Trajectory+0x280>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8003384:	4b48      	ldr	r3, [pc, #288]	@ (80034a8 <Trajectory+0x2a0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a40      	ldr	r2, [pc, #256]	@ (800348c <Trajectory+0x284>)
 800338a:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 800338c:	4b47      	ldr	r3, [pc, #284]	@ (80034ac <Trajectory+0x2a4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a41      	ldr	r2, [pc, #260]	@ (8003498 <Trajectory+0x290>)
 8003392:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8003394:	4b41      	ldr	r3, [pc, #260]	@ (800349c <Trajectory+0x294>)
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
			  	  				}
			  	  			  if(fabs((q_Pos-Pos_Start)*2) >= fabs(Pos_Target-Pos_Start))
 800339c:	4b42      	ldr	r3, [pc, #264]	@ (80034a8 <Trajectory+0x2a0>)
 800339e:	ed93 7a00 	vldr	s14, [r3]
 80033a2:	4b3a      	ldr	r3, [pc, #232]	@ (800348c <Trajectory+0x284>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033b0:	eeb0 7ae7 	vabs.f32	s14, s15
 80033b4:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <Trajectory+0x288>)
 80033b6:	edd3 6a00 	vldr	s13, [r3]
 80033ba:	4b34      	ldr	r3, [pc, #208]	@ (800348c <Trajectory+0x284>)
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033c4:	eef0 7ae7 	vabs.f32	s15, s15
 80033c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d0:	da00      	bge.n	80033d4 <Trajectory+0x1cc>
			  	  				state_Tra = 2;
								Pos_Start = q_Pos;
								Velo_Start = q_Velo;
								t = 0;
			  	  			  }
			  	  			  	break;
 80033d2:	e128      	b.n	8003626 <Trajectory+0x41e>
			  	  				state_Tra = 2;
 80033d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003488 <Trajectory+0x280>)
 80033d6:	2202      	movs	r2, #2
 80033d8:	601a      	str	r2, [r3, #0]
								Pos_Start = q_Pos;
 80033da:	4b33      	ldr	r3, [pc, #204]	@ (80034a8 <Trajectory+0x2a0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2b      	ldr	r2, [pc, #172]	@ (800348c <Trajectory+0x284>)
 80033e0:	6013      	str	r3, [r2, #0]
								Velo_Start = q_Velo;
 80033e2:	4b32      	ldr	r3, [pc, #200]	@ (80034ac <Trajectory+0x2a4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003498 <Trajectory+0x290>)
 80033e8:	6013      	str	r3, [r2, #0]
								t = 0;
 80033ea:	4b2c      	ldr	r3, [pc, #176]	@ (800349c <Trajectory+0x294>)
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 80033f2:	e118      	b.n	8003626 <Trajectory+0x41e>
			  	  		  case 1:
			  	  			  	q_Pos = Pos_Start +(Velo_Start*t);
 80033f4:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <Trajectory+0x290>)
 80033f6:	ed93 7a00 	vldr	s14, [r3]
 80033fa:	4b28      	ldr	r3, [pc, #160]	@ (800349c <Trajectory+0x294>)
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003404:	4b21      	ldr	r3, [pc, #132]	@ (800348c <Trajectory+0x284>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340e:	4b26      	ldr	r3, [pc, #152]	@ (80034a8 <Trajectory+0x2a0>)
 8003410:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Velo = Velo_Start;
 8003414:	4b20      	ldr	r3, [pc, #128]	@ (8003498 <Trajectory+0x290>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a24      	ldr	r2, [pc, #144]	@ (80034ac <Trajectory+0x2a4>)
 800341a:	6013      	str	r3, [r2, #0]
			  	  			  	q_Acc = 0;
 800341c:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <Trajectory+0x2a8>)
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
			  	  			  if(fabs(Pos_Target-q_Pos) <= (q_Velo*q_Velo)/(2*Max_Acc))
 8003424:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <Trajectory+0x288>)
 8003426:	ed93 7a00 	vldr	s14, [r3]
 800342a:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <Trajectory+0x2a0>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003434:	eeb0 7ae7 	vabs.f32	s14, s15
 8003438:	4b1c      	ldr	r3, [pc, #112]	@ (80034ac <Trajectory+0x2a4>)
 800343a:	edd3 6a00 	vldr	s13, [r3]
 800343e:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <Trajectory+0x2a4>)
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003448:	4b16      	ldr	r3, [pc, #88]	@ (80034a4 <Trajectory+0x29c>)
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003452:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	d900      	bls.n	8003462 <Trajectory+0x25a>
			  	  					state_Tra = 2;
			  	  					Pos_Start = q_Pos;
			  	  					Velo_Start = q_Velo;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 8003460:	e0e1      	b.n	8003626 <Trajectory+0x41e>
			  	  					state_Tra = 2;
 8003462:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <Trajectory+0x280>)
 8003464:	2202      	movs	r2, #2
 8003466:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <Trajectory+0x2a0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a07      	ldr	r2, [pc, #28]	@ (800348c <Trajectory+0x284>)
 800346e:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 8003470:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <Trajectory+0x2a4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <Trajectory+0x290>)
 8003476:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8003478:	4b08      	ldr	r3, [pc, #32]	@ (800349c <Trajectory+0x294>)
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8003480:	e0d1      	b.n	8003626 <Trajectory+0x41e>
 8003482:	bf00      	nop
 8003484:	200013e8 	.word	0x200013e8
 8003488:	200012e8 	.word	0x200012e8
 800348c:	200012c8 	.word	0x200012c8
 8003490:	200012cc 	.word	0x200012cc
 8003494:	20000214 	.word	0x20000214
 8003498:	200012d4 	.word	0x200012d4
 800349c:	200012e4 	.word	0x200012e4
 80034a0:	3fe00000 	.word	0x3fe00000
 80034a4:	20000210 	.word	0x20000210
 80034a8:	200012d8 	.word	0x200012d8
 80034ac:	200012dc 	.word	0x200012dc
 80034b0:	200012e0 	.word	0x200012e0
 80034b4:	2000020c 	.word	0x2000020c
			  	  		  case 2:
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)-((direction*0.5*Max_Acc)*(t*t));
 80034b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003678 <Trajectory+0x470>)
 80034ba:	ed93 7a00 	vldr	s14, [r3]
 80034be:	4b6f      	ldr	r3, [pc, #444]	@ (800367c <Trajectory+0x474>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034c8:	4b6d      	ldr	r3, [pc, #436]	@ (8003680 <Trajectory+0x478>)
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d2:	ee17 0a90 	vmov	r0, s15
 80034d6:	f7fd f803 	bl	80004e0 <__aeabi_f2d>
 80034da:	4680      	mov	r8, r0
 80034dc:	4689      	mov	r9, r1
 80034de:	4b69      	ldr	r3, [pc, #420]	@ (8003684 <Trajectory+0x47c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fc ffea 	bl	80004bc <__aeabi_i2d>
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	4b66      	ldr	r3, [pc, #408]	@ (8003688 <Trajectory+0x480>)
 80034ee:	f7fd f84f 	bl	8000590 <__aeabi_dmul>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4692      	mov	sl, r2
 80034f8:	469b      	mov	fp, r3
 80034fa:	4b64      	ldr	r3, [pc, #400]	@ (800368c <Trajectory+0x484>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fc ffee 	bl	80004e0 <__aeabi_f2d>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4650      	mov	r0, sl
 800350a:	4659      	mov	r1, fp
 800350c:	f7fd f840 	bl	8000590 <__aeabi_dmul>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4692      	mov	sl, r2
 8003516:	469b      	mov	fp, r3
 8003518:	4b58      	ldr	r3, [pc, #352]	@ (800367c <Trajectory+0x474>)
 800351a:	ed93 7a00 	vldr	s14, [r3]
 800351e:	4b57      	ldr	r3, [pc, #348]	@ (800367c <Trajectory+0x474>)
 8003520:	edd3 7a00 	vldr	s15, [r3]
 8003524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003528:	ee17 0a90 	vmov	r0, s15
 800352c:	f7fc ffd8 	bl	80004e0 <__aeabi_f2d>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4650      	mov	r0, sl
 8003536:	4659      	mov	r1, fp
 8003538:	f7fd f82a 	bl	8000590 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4640      	mov	r0, r8
 8003542:	4649      	mov	r1, r9
 8003544:	f7fc fe6c 	bl	8000220 <__aeabi_dsub>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	f7fd fad8 	bl	8000b04 <__aeabi_d2f>
 8003554:	4603      	mov	r3, r0
 8003556:	4a4e      	ldr	r2, [pc, #312]	@ (8003690 <Trajectory+0x488>)
 8003558:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start - direction*Max_Acc*t;
 800355a:	4b47      	ldr	r3, [pc, #284]	@ (8003678 <Trajectory+0x470>)
 800355c:	ed93 7a00 	vldr	s14, [r3]
 8003560:	4b48      	ldr	r3, [pc, #288]	@ (8003684 <Trajectory+0x47c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800356c:	4b47      	ldr	r3, [pc, #284]	@ (800368c <Trajectory+0x484>)
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003576:	4b41      	ldr	r3, [pc, #260]	@ (800367c <Trajectory+0x474>)
 8003578:	edd3 7a00 	vldr	s15, [r3]
 800357c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003584:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <Trajectory+0x48c>)
 8003586:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = -direction*Max_Acc;
 800358a:	4b3e      	ldr	r3, [pc, #248]	@ (8003684 <Trajectory+0x47c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	425b      	negs	r3, r3
 8003590:	ee07 3a90 	vmov	s15, r3
 8003594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003598:	4b3c      	ldr	r3, [pc, #240]	@ (800368c <Trajectory+0x484>)
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003698 <Trajectory+0x490>)
 80035a4:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) <= 0)
 80035a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003694 <Trajectory+0x48c>)
 80035aa:	edd3 7a00 	vldr	s15, [r3]
 80035ae:	eef0 7ae7 	vabs.f32	s15, s15
 80035b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ba:	d900      	bls.n	80035be <Trajectory+0x3b6>
			  	  				{
			  	  					state_Tra = 3;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 80035bc:	e033      	b.n	8003626 <Trajectory+0x41e>
			  	  					state_Tra = 3;
 80035be:	4b37      	ldr	r3, [pc, #220]	@ (800369c <Trajectory+0x494>)
 80035c0:	2203      	movs	r2, #3
 80035c2:	601a      	str	r2, [r3, #0]
			  	  					t = 0;
 80035c4:	4b2d      	ldr	r3, [pc, #180]	@ (800367c <Trajectory+0x474>)
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 80035cc:	e02b      	b.n	8003626 <Trajectory+0x41e>
			  	  		  case 3:
			  	  			  	if (FirstTraject == 1)
 80035ce:	4b34      	ldr	r3, [pc, #208]	@ (80036a0 <Trajectory+0x498>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d106      	bne.n	80035e4 <Trajectory+0x3dc>
			  	  			  	{
			  	  			  	Old_Target = Pos_Target;
 80035d6:	4b33      	ldr	r3, [pc, #204]	@ (80036a4 <Trajectory+0x49c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a33      	ldr	r2, [pc, #204]	@ (80036a8 <Trajectory+0x4a0>)
 80035dc:	6013      	str	r3, [r2, #0]
			  	  			  	FirstTraject = 0;
 80035de:	4b30      	ldr	r3, [pc, #192]	@ (80036a0 <Trajectory+0x498>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
			  	  			  	}
			  	  			  	if(Pos_Target != Old_Target)
 80035e4:	4b2f      	ldr	r3, [pc, #188]	@ (80036a4 <Trajectory+0x49c>)
 80035e6:	ed93 7a00 	vldr	s14, [r3]
 80035ea:	4b2f      	ldr	r3, [pc, #188]	@ (80036a8 <Trajectory+0x4a0>)
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80035f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f8:	d014      	beq.n	8003624 <Trajectory+0x41c>
			  	  			  	{
			  	  			  		state_Tra = 0;
 80035fa:	4b28      	ldr	r3, [pc, #160]	@ (800369c <Trajectory+0x494>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
			  	  			  		t = 0;
 8003600:	4b1e      	ldr	r3, [pc, #120]	@ (800367c <Trajectory+0x474>)
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
			  	  			  		Pos_Start = Pos;
 8003608:	4b28      	ldr	r3, [pc, #160]	@ (80036ac <Trajectory+0x4a4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <Trajectory+0x478>)
 800360e:	6013      	str	r3, [r2, #0]
//			  	  			  		Pos_Start = q_Pos;
			  	  			  		Velo_Start = q_Velo;
 8003610:	4b20      	ldr	r3, [pc, #128]	@ (8003694 <Trajectory+0x48c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <Trajectory+0x470>)
 8003616:	6013      	str	r3, [r2, #0]
			  	  			  		Old_Target = Pos_Target;
 8003618:	4b22      	ldr	r3, [pc, #136]	@ (80036a4 <Trajectory+0x49c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a22      	ldr	r2, [pc, #136]	@ (80036a8 <Trajectory+0x4a0>)
 800361e:	6013      	str	r3, [r2, #0]
			  	  			  		PIDreset();
 8003620:	f7ff fbe4 	bl	8002dec <PIDreset>

			  	  			  	}
			  	  			  	break;
 8003624:	bf00      	nop
			  	  		  }
		  t = t+0.0001;
 8003626:	4b15      	ldr	r3, [pc, #84]	@ (800367c <Trajectory+0x474>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff58 	bl	80004e0 <__aeabi_f2d>
 8003630:	a30f      	add	r3, pc, #60	@ (adr r3, 8003670 <Trajectory+0x468>)
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f7fc fdf5 	bl	8000224 <__adddf3>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	f7fd fa5f 	bl	8000b04 <__aeabi_d2f>
 8003646:	4603      	mov	r3, r0
 8003648:	4a0c      	ldr	r2, [pc, #48]	@ (800367c <Trajectory+0x474>)
 800364a:	6013      	str	r3, [r2, #0]
		  timestamp_Traject = currentTime + 100;
 800364c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003650:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8003654:	f143 0500 	adc.w	r5, r3, #0
 8003658:	4622      	mov	r2, r4
 800365a:	462b      	mov	r3, r5
 800365c:	4914      	ldr	r1, [pc, #80]	@ (80036b0 <Trajectory+0x4a8>)
 800365e:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366c:	f3af 8000 	nop.w
 8003670:	eb1c432d 	.word	0xeb1c432d
 8003674:	3f1a36e2 	.word	0x3f1a36e2
 8003678:	200012d4 	.word	0x200012d4
 800367c:	200012e4 	.word	0x200012e4
 8003680:	200012c8 	.word	0x200012c8
 8003684:	20000214 	.word	0x20000214
 8003688:	3fe00000 	.word	0x3fe00000
 800368c:	20000210 	.word	0x20000210
 8003690:	200012d8 	.word	0x200012d8
 8003694:	200012dc 	.word	0x200012dc
 8003698:	200012e0 	.word	0x200012e0
 800369c:	200012e8 	.word	0x200012e8
 80036a0:	20000208 	.word	0x20000208
 80036a4:	200012cc 	.word	0x200012cc
 80036a8:	200012d0 	.word	0x200012d0
 80036ac:	20001364 	.word	0x20001364
 80036b0:	200013e8 	.word	0x200013e8

080036b4 <PIDposition>:

void PIDposition()
{
 80036b4:	b5b0      	push	{r4, r5, r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
	static uint64_t timestamp3 =0;
	int64_t currentTime = micros();
 80036ba:	f000 fdbd 	bl	8004238 <micros>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentTime > timestamp3)
 80036c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ca:	49c7      	ldr	r1, [pc, #796]	@ (80039e8 <PIDposition+0x334>)
 80036cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036d0:	4290      	cmp	r0, r2
 80036d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80036d6:	f080 8169 	bcs.w	80039ac <PIDposition+0x2f8>
	  {
			Poscontrol.Error[NEW] = q_Pos - Pos;//
 80036da:	4bc4      	ldr	r3, [pc, #784]	@ (80039ec <PIDposition+0x338>)
 80036dc:	ed93 7a00 	vldr	s14, [r3]
 80036e0:	4bc3      	ldr	r3, [pc, #780]	@ (80039f0 <PIDposition+0x33c>)
 80036e2:	edd3 7a00 	vldr	s15, [r3]
 80036e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ea:	4bc2      	ldr	r3, [pc, #776]	@ (80039f4 <PIDposition+0x340>)
 80036ec:	edc3 7a03 	vstr	s15, [r3, #12]
//			Poscontrol.Output[NEW] = ((((Poscontrol.kp*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*Poscontrol.T)+(2*Poscontrol.kd))*Poscontrol.Error[OLD])+(Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*Poscontrol.T))/Poscontrol.T;
			Poscontrol.Output[NEW] = ((((Poscontrol.kp*2*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(2*Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*2*Poscontrol.T)-(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(4*Poscontrol.kd))*Poscontrol.Error[OLD])+(2*Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*2*Poscontrol.T))/(2*Poscontrol.T);
 80036f0:	4bc0      	ldr	r3, [pc, #768]	@ (80039f4 <PIDposition+0x340>)
 80036f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80036f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80036fa:	4bbe      	ldr	r3, [pc, #760]	@ (80039f4 <PIDposition+0x340>)
 80036fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003704:	4bbb      	ldr	r3, [pc, #748]	@ (80039f4 <PIDposition+0x340>)
 8003706:	edd3 6a07 	vldr	s13, [r3, #28]
 800370a:	4bba      	ldr	r3, [pc, #744]	@ (80039f4 <PIDposition+0x340>)
 800370c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003710:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003714:	4bb7      	ldr	r3, [pc, #732]	@ (80039f4 <PIDposition+0x340>)
 8003716:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800371a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800371e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003722:	4bb4      	ldr	r3, [pc, #720]	@ (80039f4 <PIDposition+0x340>)
 8003724:	edd3 7a08 	vldr	s15, [r3, #32]
 8003728:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800372c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003730:	4bb0      	ldr	r3, [pc, #704]	@ (80039f4 <PIDposition+0x340>)
 8003732:	edd3 7a03 	vldr	s15, [r3, #12]
 8003736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800373a:	4bae      	ldr	r3, [pc, #696]	@ (80039f4 <PIDposition+0x340>)
 800373c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003740:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003744:	4bab      	ldr	r3, [pc, #684]	@ (80039f4 <PIDposition+0x340>)
 8003746:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800374a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800374e:	4ba9      	ldr	r3, [pc, #676]	@ (80039f4 <PIDposition+0x340>)
 8003750:	ed93 6a07 	vldr	s12, [r3, #28]
 8003754:	4ba7      	ldr	r3, [pc, #668]	@ (80039f4 <PIDposition+0x340>)
 8003756:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800375a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800375e:	4ba5      	ldr	r3, [pc, #660]	@ (80039f4 <PIDposition+0x340>)
 8003760:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003764:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003768:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800376c:	4ba1      	ldr	r3, [pc, #644]	@ (80039f4 <PIDposition+0x340>)
 800376e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003772:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8003776:	ee67 7a86 	vmul.f32	s15, s15, s12
 800377a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800377e:	4b9d      	ldr	r3, [pc, #628]	@ (80039f4 <PIDposition+0x340>)
 8003780:	edd3 7a04 	vldr	s15, [r3, #16]
 8003784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003788:	ee37 7a67 	vsub.f32	s14, s14, s15
 800378c:	4b99      	ldr	r3, [pc, #612]	@ (80039f4 <PIDposition+0x340>)
 800378e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003792:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003796:	4b97      	ldr	r3, [pc, #604]	@ (80039f4 <PIDposition+0x340>)
 8003798:	edd3 7a05 	vldr	s15, [r3, #20]
 800379c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a4:	4b93      	ldr	r3, [pc, #588]	@ (80039f4 <PIDposition+0x340>)
 80037a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80037aa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80037ae:	4b91      	ldr	r3, [pc, #580]	@ (80039f4 <PIDposition+0x340>)
 80037b0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80037b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b8:	ee77 6a27 	vadd.f32	s13, s14, s15
 80037bc:	4b8d      	ldr	r3, [pc, #564]	@ (80039f4 <PIDposition+0x340>)
 80037be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80037c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80037c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ca:	4b8a      	ldr	r3, [pc, #552]	@ (80039f4 <PIDposition+0x340>)
 80037cc:	edc3 7a00 	vstr	s15, [r3]
			Poscontrol.Error[OLDER] = Poscontrol.Error[OLD];
 80037d0:	4b88      	ldr	r3, [pc, #544]	@ (80039f4 <PIDposition+0x340>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	4a87      	ldr	r2, [pc, #540]	@ (80039f4 <PIDposition+0x340>)
 80037d6:	6153      	str	r3, [r2, #20]
			Poscontrol.Error[OLD] = Poscontrol.Error[NEW];
 80037d8:	4b86      	ldr	r3, [pc, #536]	@ (80039f4 <PIDposition+0x340>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a85      	ldr	r2, [pc, #532]	@ (80039f4 <PIDposition+0x340>)
 80037de:	6113      	str	r3, [r2, #16]
			Poscontrol.Output[OLDER] = Poscontrol.Output[OLD];
 80037e0:	4b84      	ldr	r3, [pc, #528]	@ (80039f4 <PIDposition+0x340>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a83      	ldr	r2, [pc, #524]	@ (80039f4 <PIDposition+0x340>)
 80037e6:	6093      	str	r3, [r2, #8]
			Poscontrol.Output[OLD] = Poscontrol.Output[NEW];
 80037e8:	4b82      	ldr	r3, [pc, #520]	@ (80039f4 <PIDposition+0x340>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a81      	ldr	r2, [pc, #516]	@ (80039f4 <PIDposition+0x340>)
 80037ee:	6053      	str	r3, [r2, #4]

			Velocontrol.Error[NEW] = Poscontrol.Output[NEW]+q_Velo-speed_fill;//-speed_fill
 80037f0:	4b80      	ldr	r3, [pc, #512]	@ (80039f4 <PIDposition+0x340>)
 80037f2:	ed93 7a00 	vldr	s14, [r3]
 80037f6:	4b80      	ldr	r3, [pc, #512]	@ (80039f8 <PIDposition+0x344>)
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003800:	4b7e      	ldr	r3, [pc, #504]	@ (80039fc <PIDposition+0x348>)
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800380a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a00 <PIDposition+0x34c>)
 800380c:	edc3 7a03 	vstr	s15, [r3, #12]
			ONE = (((Velocontrol.kp*2*Velocontrol.T)+(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(2*Velocontrol.kd))*Velocontrol.Error[NEW])/(2*Velocontrol.T);
 8003810:	4b7b      	ldr	r3, [pc, #492]	@ (8003a00 <PIDposition+0x34c>)
 8003812:	edd3 7a06 	vldr	s15, [r3, #24]
 8003816:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800381a:	4b79      	ldr	r3, [pc, #484]	@ (8003a00 <PIDposition+0x34c>)
 800381c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003824:	4b76      	ldr	r3, [pc, #472]	@ (8003a00 <PIDposition+0x34c>)
 8003826:	edd3 6a07 	vldr	s13, [r3, #28]
 800382a:	4b75      	ldr	r3, [pc, #468]	@ (8003a00 <PIDposition+0x34c>)
 800382c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003830:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003834:	4b72      	ldr	r3, [pc, #456]	@ (8003a00 <PIDposition+0x34c>)
 8003836:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800383a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800383e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003842:	4b6f      	ldr	r3, [pc, #444]	@ (8003a00 <PIDposition+0x34c>)
 8003844:	edd3 7a08 	vldr	s15, [r3, #32]
 8003848:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800384c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003850:	4b6b      	ldr	r3, [pc, #428]	@ (8003a00 <PIDposition+0x34c>)
 8003852:	edd3 7a03 	vldr	s15, [r3, #12]
 8003856:	ee67 6a27 	vmul.f32	s13, s14, s15
 800385a:	4b69      	ldr	r3, [pc, #420]	@ (8003a00 <PIDposition+0x34c>)
 800385c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003860:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003868:	4b66      	ldr	r3, [pc, #408]	@ (8003a04 <PIDposition+0x350>)
 800386a:	edc3 7a00 	vstr	s15, [r3]
			TWO = (((Velocontrol.kp*2*Velocontrol.T)-(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(4*Velocontrol.kd))*Velocontrol.Error[OLD])/(2*Velocontrol.T);
 800386e:	4b64      	ldr	r3, [pc, #400]	@ (8003a00 <PIDposition+0x34c>)
 8003870:	edd3 7a06 	vldr	s15, [r3, #24]
 8003874:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003878:	4b61      	ldr	r3, [pc, #388]	@ (8003a00 <PIDposition+0x34c>)
 800387a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800387e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003882:	4b5f      	ldr	r3, [pc, #380]	@ (8003a00 <PIDposition+0x34c>)
 8003884:	edd3 6a07 	vldr	s13, [r3, #28]
 8003888:	4b5d      	ldr	r3, [pc, #372]	@ (8003a00 <PIDposition+0x34c>)
 800388a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800388e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003892:	4b5b      	ldr	r3, [pc, #364]	@ (8003a00 <PIDposition+0x34c>)
 8003894:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800389c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038a0:	4b57      	ldr	r3, [pc, #348]	@ (8003a00 <PIDposition+0x34c>)
 80038a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80038a6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80038aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b2:	4b53      	ldr	r3, [pc, #332]	@ (8003a00 <PIDposition+0x34c>)
 80038b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80038b8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80038bc:	4b50      	ldr	r3, [pc, #320]	@ (8003a00 <PIDposition+0x34c>)
 80038be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80038c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003a08 <PIDposition+0x354>)
 80038cc:	edc3 7a00 	vstr	s15, [r3]
			THREE = (2*Velocontrol.kd*Velocontrol.Error[OLDER])/(2*Velocontrol.T);
 80038d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003a00 <PIDposition+0x34c>)
 80038d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80038d6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038da:	4b49      	ldr	r3, [pc, #292]	@ (8003a00 <PIDposition+0x34c>)
 80038dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80038e0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80038e4:	4b46      	ldr	r3, [pc, #280]	@ (8003a00 <PIDposition+0x34c>)
 80038e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80038ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f2:	4b46      	ldr	r3, [pc, #280]	@ (8003a0c <PIDposition+0x358>)
 80038f4:	edc3 7a00 	vstr	s15, [r3]
			FOUR = (Velocontrol.Output[OLD]*2*Velocontrol.T)/(2*Velocontrol.T);
 80038f8:	4b41      	ldr	r3, [pc, #260]	@ (8003a00 <PIDposition+0x34c>)
 80038fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80038fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003902:	4b3f      	ldr	r3, [pc, #252]	@ (8003a00 <PIDposition+0x34c>)
 8003904:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003908:	ee67 6a27 	vmul.f32	s13, s14, s15
 800390c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a00 <PIDposition+0x34c>)
 800390e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003912:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a10 <PIDposition+0x35c>)
 800391c:	edc3 7a00 	vstr	s15, [r3]
			Velocontrol.Output[NEW] = (ONE-TWO+THREE+FOUR);//
 8003920:	4b38      	ldr	r3, [pc, #224]	@ (8003a04 <PIDposition+0x350>)
 8003922:	ed93 7a00 	vldr	s14, [r3]
 8003926:	4b38      	ldr	r3, [pc, #224]	@ (8003a08 <PIDposition+0x354>)
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003930:	4b36      	ldr	r3, [pc, #216]	@ (8003a0c <PIDposition+0x358>)
 8003932:	edd3 7a00 	vldr	s15, [r3]
 8003936:	ee37 7a27 	vadd.f32	s14, s14, s15
 800393a:	4b35      	ldr	r3, [pc, #212]	@ (8003a10 <PIDposition+0x35c>)
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003944:	4b2e      	ldr	r3, [pc, #184]	@ (8003a00 <PIDposition+0x34c>)
 8003946:	edc3 7a00 	vstr	s15, [r3]
//			test = (ONE-TWO+THREE+FOUR);
			if(Velocontrol.Output[NEW]>24)Velocontrol.Output[NEW]=24;
 800394a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a00 <PIDposition+0x34c>)
 800394c:	edd3 7a00 	vldr	s15, [r3]
 8003950:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8003954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395c:	dd02      	ble.n	8003964 <PIDposition+0x2b0>
 800395e:	4b28      	ldr	r3, [pc, #160]	@ (8003a00 <PIDposition+0x34c>)
 8003960:	4a2c      	ldr	r2, [pc, #176]	@ (8003a14 <PIDposition+0x360>)
 8003962:	601a      	str	r2, [r3, #0]
			if(Velocontrol.Output[NEW]<-24)Velocontrol.Output[NEW]=-24;
 8003964:	4b26      	ldr	r3, [pc, #152]	@ (8003a00 <PIDposition+0x34c>)
 8003966:	edd3 7a00 	vldr	s15, [r3]
 800396a:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 800396e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003976:	d502      	bpl.n	800397e <PIDposition+0x2ca>
 8003978:	4b21      	ldr	r3, [pc, #132]	@ (8003a00 <PIDposition+0x34c>)
 800397a:	4a27      	ldr	r2, [pc, #156]	@ (8003a18 <PIDposition+0x364>)
 800397c:	601a      	str	r2, [r3, #0]
			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
 800397e:	4b20      	ldr	r3, [pc, #128]	@ (8003a00 <PIDposition+0x34c>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	4a1f      	ldr	r2, [pc, #124]	@ (8003a00 <PIDposition+0x34c>)
 8003984:	6153      	str	r3, [r2, #20]
			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
 8003986:	4b1e      	ldr	r3, [pc, #120]	@ (8003a00 <PIDposition+0x34c>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a00 <PIDposition+0x34c>)
 800398c:	6113      	str	r3, [r2, #16]
			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
 800398e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a00 <PIDposition+0x34c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1b      	ldr	r2, [pc, #108]	@ (8003a00 <PIDposition+0x34c>)
 8003994:	6053      	str	r3, [r2, #4]
//			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
//			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
//			Velocontrol.Output[OLDER] = Velocontrol.Output[OLD];
//			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
	//					if(fabs(Pos_Target-Pos) <= 0.1)start = 0;
			timestamp3 =currentTime + 100;
 8003996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800399a:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 800399e:	f143 0500 	adc.w	r5, r3, #0
 80039a2:	4622      	mov	r2, r4
 80039a4:	462b      	mov	r3, r5
 80039a6:	4910      	ldr	r1, [pc, #64]	@ (80039e8 <PIDposition+0x334>)
 80039a8:	e9c1 2300 	strd	r2, r3, [r1]
	  }
		PWMmap = mapFloat(Velocontrol.Output[NEW],-24.0,24.0,-42500,42500);
 80039ac:	4b14      	ldr	r3, [pc, #80]	@ (8003a00 <PIDposition+0x34c>)
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8003a1c <PIDposition+0x368>
 80039b6:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8003a20 <PIDposition+0x36c>
 80039ba:	eeb3 1a08 	vmov.f32	s2, #56	@ 0x41c00000  24.0
 80039be:	eefb 0a08 	vmov.f32	s1, #184	@ 0xc1c00000 -24.0
 80039c2:	eeb0 0a67 	vmov.f32	s0, s15
 80039c6:	f000 fbef 	bl	80041a8 <mapFloat>
 80039ca:	eef0 7a40 	vmov.f32	s15, s0
 80039ce:	4b15      	ldr	r3, [pc, #84]	@ (8003a24 <PIDposition+0x370>)
 80039d0:	edc3 7a00 	vstr	s15, [r3]
	  if(PWMmap > 0)
 80039d4:	4b13      	ldr	r3, [pc, #76]	@ (8003a24 <PIDposition+0x370>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e2:	dd32      	ble.n	8003a4a <PIDposition+0x396>
 80039e4:	e020      	b.n	8003a28 <PIDposition+0x374>
 80039e6:	bf00      	nop
 80039e8:	200013f0 	.word	0x200013f0
 80039ec:	200012d8 	.word	0x200012d8
 80039f0:	20001364 	.word	0x20001364
 80039f4:	20001250 	.word	0x20001250
 80039f8:	200012dc 	.word	0x200012dc
 80039fc:	2000135c 	.word	0x2000135c
 8003a00:	20001228 	.word	0x20001228
 8003a04:	200011a8 	.word	0x200011a8
 8003a08:	200011ac 	.word	0x200011ac
 8003a0c:	200011b0 	.word	0x200011b0
 8003a10:	200011b4 	.word	0x200011b4
 8003a14:	41c00000 	.word	0x41c00000
 8003a18:	c1c00000 	.word	0xc1c00000
 8003a1c:	47260400 	.word	0x47260400
 8003a20:	c7260400 	.word	0xc7260400
 8003a24:	200011a4 	.word	0x200011a4
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a30:	f003 fa5a 	bl	8006ee8 <HAL_GPIO_WritePin>
//		  }
//		  else
//		  {
//		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Velocontrol.Output[NEW]);
//		  }
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMmap);
 8003a34:	4b10      	ldr	r3, [pc, #64]	@ (8003a78 <PIDposition+0x3c4>)
 8003a36:	edd3 7a00 	vldr	s15, [r3]
 8003a3a:	4b10      	ldr	r3, [pc, #64]	@ (8003a7c <PIDposition+0x3c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a42:	ee17 2a90 	vmov	r2, s15
 8003a46:	635a      	str	r2, [r3, #52]	@ 0x34
//			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
//		  }
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(PWMmap));

	  }
}
 8003a48:	e011      	b.n	8003a6e <PIDposition+0x3ba>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a52:	f003 fa49 	bl	8006ee8 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(PWMmap));
 8003a56:	4b08      	ldr	r3, [pc, #32]	@ (8003a78 <PIDposition+0x3c4>)
 8003a58:	edd3 7a00 	vldr	s15, [r3]
 8003a5c:	eef0 7ae7 	vabs.f32	s15, s15
 8003a60:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <PIDposition+0x3c8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a68:	ee17 2a90 	vmov	r2, s15
 8003a6c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bdb0      	pop	{r4, r5, r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200011a4 	.word	0x200011a4
 8003a7c:	20000578 	.word	0x20000578

08003a80 <State_To_Mode>:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol2.Output[NEW]));
	  }
}

void State_To_Mode(){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
        if(registerFrame[0x01].U16 == 0b0001){
 8003a84:	4b42      	ldr	r3, [pc, #264]	@ (8003b90 <State_To_Mode+0x110>)
 8003a86:	885b      	ldrh	r3, [r3, #2]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d115      	bne.n	8003ab8 <State_To_Mode+0x38>
        	registerFrame[0x01].U16 = 0b0000;
 8003a8c:	4b40      	ldr	r3, [pc, #256]	@ (8003b90 <State_To_Mode+0x110>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0001;
 8003a92:	4b3f      	ldr	r3, [pc, #252]	@ (8003b90 <State_To_Mode+0x110>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	841a      	strh	r2, [r3, #32]
        	Mode = 1;
 8003a98:	4b3e      	ldr	r3, [pc, #248]	@ (8003b94 <State_To_Mode+0x114>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
        	state_ALL = 4;
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b98 <State_To_Mode+0x118>)
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	601a      	str	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2108      	movs	r1, #8
 8003aa8:	483c      	ldr	r0, [pc, #240]	@ (8003b9c <State_To_Mode+0x11c>)
 8003aaa:	f003 fa1d 	bl	8006ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 8003aae:	2201      	movs	r2, #1
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	483a      	ldr	r0, [pc, #232]	@ (8003b9c <State_To_Mode+0x11c>)
 8003ab4:	f003 fa18 	bl	8006ee8 <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b0010){
 8003ab8:	4b35      	ldr	r3, [pc, #212]	@ (8003b90 <State_To_Mode+0x110>)
 8003aba:	885b      	ldrh	r3, [r3, #2]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d10f      	bne.n	8003ae0 <State_To_Mode+0x60>
//            Mode = 2;
        	Mode = 1;
 8003ac0:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <State_To_Mode+0x114>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
            state_ALL = 0;
 8003ac6:	4b34      	ldr	r3, [pc, #208]	@ (8003b98 <State_To_Mode+0x118>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8003acc:	2200      	movs	r2, #0
 8003ace:	2108      	movs	r1, #8
 8003ad0:	4832      	ldr	r0, [pc, #200]	@ (8003b9c <State_To_Mode+0x11c>)
 8003ad2:	f003 fa09 	bl	8006ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	2104      	movs	r1, #4
 8003ada:	4830      	ldr	r0, [pc, #192]	@ (8003b9c <State_To_Mode+0x11c>)
 8003adc:	f003 fa04 	bl	8006ee8 <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b0100){
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b90 <State_To_Mode+0x110>)
 8003ae2:	885b      	ldrh	r3, [r3, #2]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d120      	bne.n	8003b2a <State_To_Mode+0xaa>
//            Mode = 3;
        	Mode = 1;
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <State_To_Mode+0x114>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
        	registerFrame[0x01].U16 = 0b0000;
 8003aee:	4b28      	ldr	r3, [pc, #160]	@ (8003b90 <State_To_Mode+0x110>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	805a      	strh	r2, [r3, #2]
			splitInteger(registerFrame[0x21].U16, Pick_Order);
 8003af4:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <State_To_Mode+0x110>)
 8003af6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003afa:	4929      	ldr	r1, [pc, #164]	@ (8003ba0 <State_To_Mode+0x120>)
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fab7 	bl	8004070 <splitInteger>
			splitInteger(registerFrame[0x22].U16, Place_Order);
 8003b02:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <State_To_Mode+0x110>)
 8003b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b08:	4926      	ldr	r1, [pc, #152]	@ (8003ba4 <State_To_Mode+0x124>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fab0 	bl	8004070 <splitInteger>
			state_ALL = 5;
 8003b10:	4b21      	ldr	r3, [pc, #132]	@ (8003b98 <State_To_Mode+0x118>)
 8003b12:	2205      	movs	r2, #5
 8003b14:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2108      	movs	r1, #8
 8003b1a:	4820      	ldr	r0, [pc, #128]	@ (8003b9c <State_To_Mode+0x11c>)
 8003b1c:	f003 f9e4 	bl	8006ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 8003b20:	2201      	movs	r2, #1
 8003b22:	2104      	movs	r1, #4
 8003b24:	481d      	ldr	r0, [pc, #116]	@ (8003b9c <State_To_Mode+0x11c>)
 8003b26:	f003 f9df 	bl	8006ee8 <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b1000){
 8003b2a:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <State_To_Mode+0x110>)
 8003b2c:	885b      	ldrh	r3, [r3, #2]
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d12c      	bne.n	8003b8c <State_To_Mode+0x10c>
//          Point Mode
        	Mode = 1;
 8003b32:	4b18      	ldr	r3, [pc, #96]	@ (8003b94 <State_To_Mode+0x114>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
        	registerFrame[0x01].U16 = 0b0000;
 8003b38:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <State_To_Mode+0x110>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b00010000;
 8003b3e:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <State_To_Mode+0x110>)
 8003b40:	2210      	movs	r2, #16
 8003b42:	841a      	strh	r2, [r3, #32]
			Goal_Point = registerFrame[0x30].U16/10;
 8003b44:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <State_To_Mode+0x110>)
 8003b46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003b4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ba8 <State_To_Mode+0x128>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	08db      	lsrs	r3, r3, #3
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <State_To_Mode+0x12c>)
 8003b58:	601a      	str	r2, [r3, #0]
			Pos_Target = Goal_Point;
 8003b5a:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <State_To_Mode+0x12c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b66:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <State_To_Mode+0x130>)
 8003b68:	edc3 7a00 	vstr	s15, [r3]
			state_ALL = 3;
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <State_To_Mode+0x118>)
 8003b6e:	2203      	movs	r2, #3
 8003b70:	601a      	str	r2, [r3, #0]
			state_ALL_Old = 2;
 8003b72:	4b10      	ldr	r3, [pc, #64]	@ (8003bb4 <State_To_Mode+0x134>)
 8003b74:	2202      	movs	r2, #2
 8003b76:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2108      	movs	r1, #8
 8003b7c:	4807      	ldr	r0, [pc, #28]	@ (8003b9c <State_To_Mode+0x11c>)
 8003b7e:	f003 f9b3 	bl	8006ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 8003b82:	2201      	movs	r2, #1
 8003b84:	2104      	movs	r1, #4
 8003b86:	4805      	ldr	r0, [pc, #20]	@ (8003b9c <State_To_Mode+0x11c>)
 8003b88:	f003 f9ae 	bl	8006ee8 <HAL_GPIO_WritePin>
        }
}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000fd8 	.word	0x20000fd8
 8003b94:	2000116c 	.word	0x2000116c
 8003b98:	20000204 	.word	0x20000204
 8003b9c:	48000800 	.word	0x48000800
 8003ba0:	2000117c 	.word	0x2000117c
 8003ba4:	20001190 	.word	0x20001190
 8003ba8:	cccccccd 	.word	0xcccccccd
 8003bac:	20001178 	.word	0x20001178
 8003bb0:	200012cc 	.word	0x200012cc
 8003bb4:	200011bc 	.word	0x200011bc

08003bb8 <Heartbeat>:

void Heartbeat(){
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
        registerFrame[0x00].U16 =22881;
 8003bbc:	4b04      	ldr	r3, [pc, #16]	@ (8003bd0 <Heartbeat+0x18>)
 8003bbe:	f645 1261 	movw	r2, #22881	@ 0x5961
 8003bc2:	801a      	strh	r2, [r3, #0]
    }
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000fd8 	.word	0x20000fd8

08003bd4 <Routine>:

void Routine () {
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
        if (registerFrame[0x00].U16 == 18537){
 8003bd8:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <Routine+0x28>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f644 0269 	movw	r2, #18537	@ 0x4869
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d105      	bne.n	8003bf0 <Routine+0x1c>
//            registerFrame[0x04].U16 = Gripper_Movement_Actual_Status;
            registerFrame[0x10].U16 = 0b0001;
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <Routine+0x28>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	841a      	strh	r2, [r3, #32]
            registerFrame[0x10].U16 = 0b0000;
 8003bea:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <Routine+0x28>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	841a      	strh	r2, [r3, #32]
        }
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000fd8 	.word	0x20000fd8

08003c00 <UpdatePosRoutine>:
void UpdatePosRoutine()
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
	if(LeadSW[0] == 0)
 8003c04:	4b30      	ldr	r3, [pc, #192]	@ (8003cc8 <UpdatePosRoutine+0xc8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <UpdatePosRoutine+0x14>
	{
		registerFrame[0x04].U16 = 0b0001;
 8003c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003ccc <UpdatePosRoutine+0xcc>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	811a      	strh	r2, [r3, #8]
 8003c12:	e00a      	b.n	8003c2a <UpdatePosRoutine+0x2a>
	}
	else if(LeadSW[1] == 0)
 8003c14:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc8 <UpdatePosRoutine+0xc8>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <UpdatePosRoutine+0x24>
	{
		registerFrame[0x04].U16 = 0b0010;
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ccc <UpdatePosRoutine+0xcc>)
 8003c1e:	2202      	movs	r2, #2
 8003c20:	811a      	strh	r2, [r3, #8]
 8003c22:	e002      	b.n	8003c2a <UpdatePosRoutine+0x2a>
	}
	else
	{
		registerFrame[0x04].U16 = 0b0000;
 8003c24:	4b29      	ldr	r3, [pc, #164]	@ (8003ccc <UpdatePosRoutine+0xcc>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	811a      	strh	r2, [r3, #8]
	}
	registerFrame[0x11].U16 = fabs(Pos)*10;
 8003c2a:	4b29      	ldr	r3, [pc, #164]	@ (8003cd0 <UpdatePosRoutine+0xd0>)
 8003c2c:	edd3 7a00 	vldr	s15, [r3]
 8003c30:	eef0 7ae7 	vabs.f32	s15, s15
 8003c34:	ee17 0a90 	vmov	r0, s15
 8003c38:	f7fc fc52 	bl	80004e0 <__aeabi_f2d>
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	4b24      	ldr	r3, [pc, #144]	@ (8003cd4 <UpdatePosRoutine+0xd4>)
 8003c42:	f7fc fca5 	bl	8000590 <__aeabi_dmul>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f7fc ff39 	bl	8000ac4 <__aeabi_d2uiz>
 8003c52:	4603      	mov	r3, r0
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <UpdatePosRoutine+0xcc>)
 8003c58:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[0x12].U16 = fabs(speed_fill)*10;
 8003c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd8 <UpdatePosRoutine+0xd8>)
 8003c5c:	edd3 7a00 	vldr	s15, [r3]
 8003c60:	eef0 7ae7 	vabs.f32	s15, s15
 8003c64:	ee17 0a90 	vmov	r0, s15
 8003c68:	f7fc fc3a 	bl	80004e0 <__aeabi_f2d>
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	4b18      	ldr	r3, [pc, #96]	@ (8003cd4 <UpdatePosRoutine+0xd4>)
 8003c72:	f7fc fc8d 	bl	8000590 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f7fc ff21 	bl	8000ac4 <__aeabi_d2uiz>
 8003c82:	4603      	mov	r3, r0
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <UpdatePosRoutine+0xcc>)
 8003c88:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 = Accelation*10;
 8003c8a:	4b14      	ldr	r3, [pc, #80]	@ (8003cdc <UpdatePosRoutine+0xdc>)
 8003c8c:	edd3 7a00 	vldr	s15, [r3]
 8003c90:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c9c:	ee17 3a90 	vmov	r3, s15
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <UpdatePosRoutine+0xcc>)
 8003ca4:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 = X_Actual_Position*10;
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce0 <UpdatePosRoutine+0xe0>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb8:	ee17 3a90 	vmov	r3, s15
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <UpdatePosRoutine+0xcc>)
 8003cc0:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200011e4 	.word	0x200011e4
 8003ccc:	20000fd8 	.word	0x20000fd8
 8003cd0:	20001364 	.word	0x20001364
 8003cd4:	40240000 	.word	0x40240000
 8003cd8:	2000135c 	.word	0x2000135c
 8003cdc:	20001368 	.word	0x20001368
 8003ce0:	20001168 	.word	0x20001168

08003ce4 <Vacuum>:
void Vacuum() {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
        Vacuum_Status = registerFrame[0x02].U16;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d14 <Vacuum+0x30>)
 8003cea:	889b      	ldrh	r3, [r3, #4]
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <Vacuum+0x34>)
 8003cf0:	601a      	str	r2, [r3, #0]
        if(Vacuum_Status == 1)
 8003cf2:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <Vacuum+0x34>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d105      	bne.n	8003d06 <Vacuum+0x22>
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2140      	movs	r1, #64	@ 0x40
 8003cfe:	4807      	ldr	r0, [pc, #28]	@ (8003d1c <Vacuum+0x38>)
 8003d00:	f003 f8f2 	bl	8006ee8 <HAL_GPIO_WritePin>
        }
        else
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
        }
}
 8003d04:	e004      	b.n	8003d10 <Vacuum+0x2c>
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2140      	movs	r1, #64	@ 0x40
 8003d0a:	4804      	ldr	r0, [pc, #16]	@ (8003d1c <Vacuum+0x38>)
 8003d0c:	f003 f8ec 	bl	8006ee8 <HAL_GPIO_WritePin>
}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000fd8 	.word	0x20000fd8
 8003d18:	20001170 	.word	0x20001170
 8003d1c:	48000800 	.word	0x48000800

08003d20 <GripperMovement>:
//Write Gripper Movement Status
void GripperMovement() {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
        Gripper_Movement_Status = registerFrame[0x03].U16;
 8003d24:	4b28      	ldr	r3, [pc, #160]	@ (8003dc8 <GripperMovement+0xa8>)
 8003d26:	88db      	ldrh	r3, [r3, #6]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b28      	ldr	r3, [pc, #160]	@ (8003dcc <GripperMovement+0xac>)
 8003d2c:	601a      	str	r2, [r3, #0]
        if( Gripper_Movement_Status == 1)
 8003d2e:	4b27      	ldr	r3, [pc, #156]	@ (8003dcc <GripperMovement+0xac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d11b      	bne.n	8003d6e <GripperMovement+0x4e>
	   {
        	if(LeadSW[1] == 0)
 8003d36:	4b26      	ldr	r3, [pc, #152]	@ (8003dd0 <GripperMovement+0xb0>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <GripperMovement+0x36>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2120      	movs	r1, #32
 8003d42:	4824      	ldr	r0, [pc, #144]	@ (8003dd4 <GripperMovement+0xb4>)
 8003d44:	f003 f8d0 	bl	8006ee8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d4e:	4821      	ldr	r0, [pc, #132]	@ (8003dd4 <GripperMovement+0xb4>)
 8003d50:	f003 f8ca 	bl	8006ee8 <HAL_GPIO_WritePin>
	   else
	   {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
	   }
}
 8003d54:	e036      	b.n	8003dc4 <GripperMovement+0xa4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,1);
 8003d56:	2201      	movs	r2, #1
 8003d58:	2120      	movs	r1, #32
 8003d5a:	481e      	ldr	r0, [pc, #120]	@ (8003dd4 <GripperMovement+0xb4>)
 8003d5c:	f003 f8c4 	bl	8006ee8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003d60:	2200      	movs	r2, #0
 8003d62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d66:	481b      	ldr	r0, [pc, #108]	@ (8003dd4 <GripperMovement+0xb4>)
 8003d68:	f003 f8be 	bl	8006ee8 <HAL_GPIO_WritePin>
}
 8003d6c:	e02a      	b.n	8003dc4 <GripperMovement+0xa4>
        else if(Gripper_Movement_Status == 0)
 8003d6e:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <GripperMovement+0xac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d11b      	bne.n	8003dae <GripperMovement+0x8e>
        	if(LeadSW[0] == 0)
 8003d76:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <GripperMovement+0xb0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10b      	bne.n	8003d96 <GripperMovement+0x76>
        		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2120      	movs	r1, #32
 8003d82:	4814      	ldr	r0, [pc, #80]	@ (8003dd4 <GripperMovement+0xb4>)
 8003d84:	f003 f8b0 	bl	8006ee8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d8e:	4811      	ldr	r0, [pc, #68]	@ (8003dd4 <GripperMovement+0xb4>)
 8003d90:	f003 f8aa 	bl	8006ee8 <HAL_GPIO_WritePin>
}
 8003d94:	e016      	b.n	8003dc4 <GripperMovement+0xa4>
        		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2120      	movs	r1, #32
 8003d9a:	480e      	ldr	r0, [pc, #56]	@ (8003dd4 <GripperMovement+0xb4>)
 8003d9c:	f003 f8a4 	bl	8006ee8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,1);
 8003da0:	2201      	movs	r2, #1
 8003da2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003da6:	480b      	ldr	r0, [pc, #44]	@ (8003dd4 <GripperMovement+0xb4>)
 8003da8:	f003 f89e 	bl	8006ee8 <HAL_GPIO_WritePin>
}
 8003dac:	e00a      	b.n	8003dc4 <GripperMovement+0xa4>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003dae:	2200      	movs	r2, #0
 8003db0:	2120      	movs	r1, #32
 8003db2:	4808      	ldr	r0, [pc, #32]	@ (8003dd4 <GripperMovement+0xb4>)
 8003db4:	f003 f898 	bl	8006ee8 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003db8:	2200      	movs	r2, #0
 8003dba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003dbe:	4805      	ldr	r0, [pc, #20]	@ (8003dd4 <GripperMovement+0xb4>)
 8003dc0:	f003 f892 	bl	8006ee8 <HAL_GPIO_WritePin>
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000fd8 	.word	0x20000fd8
 8003dcc:	20001174 	.word	0x20001174
 8003dd0:	200011e4 	.word	0x200011e4
 8003dd4:	48000800 	.word	0x48000800

08003dd8 <SetHome>:
void SetHome() {
 8003dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
	if(Mode == 1)
 8003de0:	4b90      	ldr	r3, [pc, #576]	@ (8004024 <SetHome+0x24c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	f040 8091 	bne.w	8003f0c <SetHome+0x134>
		{
			registerFrame[0x01].U16 = 0b0000;
 8003dea:	4b8f      	ldr	r3, [pc, #572]	@ (8004028 <SetHome+0x250>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0010;
 8003df0:	4b8d      	ldr	r3, [pc, #564]	@ (8004028 <SetHome+0x250>)
 8003df2:	2202      	movs	r2, #2
 8003df4:	841a      	strh	r2, [r3, #32]
			if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8003df6:	4b8d      	ldr	r3, [pc, #564]	@ (800402c <SetHome+0x254>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d006      	beq.n	8003e0c <SetHome+0x34>
 8003dfe:	2110      	movs	r1, #16
 8003e00:	488b      	ldr	r0, [pc, #556]	@ (8004030 <SetHome+0x258>)
 8003e02:	f003 f859 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d170      	bne.n	8003eee <SetHome+0x116>
			{
				if(CountHome > 100)
 8003e0c:	4b89      	ldr	r3, [pc, #548]	@ (8004034 <SetHome+0x25c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b64      	cmp	r3, #100	@ 0x64
 8003e12:	dd66      	ble.n	8003ee2 <SetHome+0x10a>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003e14:	2201      	movs	r2, #1
 8003e16:	2101      	movs	r1, #1
 8003e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e1c:	f003 f864 	bl	8006ee8 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003e20:	4b85      	ldr	r3, [pc, #532]	@ (8004038 <SetHome+0x260>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2200      	movs	r2, #0
 8003e26:	635a      	str	r2, [r3, #52]	@ 0x34
					static uint64_t DelayTime = 0;
					if(DelayTime < HAL_GetTick())
 8003e28:	f000 fdfe 	bl	8004a28 <HAL_GetTick>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4698      	mov	r8, r3
 8003e32:	4691      	mov	r9, r2
 8003e34:	4b81      	ldr	r3, [pc, #516]	@ (800403c <SetHome+0x264>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	4542      	cmp	r2, r8
 8003e3c:	eb73 0309 	sbcs.w	r3, r3, r9
 8003e40:	d211      	bcs.n	8003e66 <SetHome+0x8e>
					{
						 CountingDelay++;
 8003e42:	4b7f      	ldr	r3, [pc, #508]	@ (8004040 <SetHome+0x268>)
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	4b7d      	ldr	r3, [pc, #500]	@ (8004040 <SetHome+0x268>)
 8003e4c:	801a      	strh	r2, [r3, #0]
						 DelayTime = HAL_GetTick()+10;
 8003e4e:	f000 fdeb 	bl	8004a28 <HAL_GetTick>
 8003e52:	4603      	mov	r3, r0
 8003e54:	330a      	adds	r3, #10
 8003e56:	2200      	movs	r2, #0
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	4b77      	ldr	r3, [pc, #476]	@ (800403c <SetHome+0x264>)
 8003e5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e62:	e9c3 1200 	strd	r1, r2, [r3]
					}
					//HAL_Delay(1000);
					if(CountingDelay > 100)
 8003e66:	4b76      	ldr	r3, [pc, #472]	@ (8004040 <SetHome+0x268>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	f240 80d2 	bls.w	8004014 <SetHome+0x23c>
					{
						HOME = 0;
 8003e70:	4b6e      	ldr	r3, [pc, #440]	@ (800402c <SetHome+0x254>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(&htim3,0);
 8003e76:	4b73      	ldr	r3, [pc, #460]	@ (8004044 <SetHome+0x26c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	625a      	str	r2, [r3, #36]	@ 0x24
						Count = 0;
 8003e7e:	4b72      	ldr	r3, [pc, #456]	@ (8004048 <SetHome+0x270>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
						QEIdata.Position[NEW] = 0;
 8003e84:	4b71      	ldr	r3, [pc, #452]	@ (800404c <SetHome+0x274>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
						QEIdata.Position[OLD] = 0;
 8003e8a:	4b70      	ldr	r3, [pc, #448]	@ (800404c <SetHome+0x274>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	605a      	str	r2, [r3, #4]
						Pos_Start = 0;
 8003e90:	4b6f      	ldr	r3, [pc, #444]	@ (8004050 <SetHome+0x278>)
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
						state_ALL = 2;
 8003e98:	4b6e      	ldr	r3, [pc, #440]	@ (8004054 <SetHome+0x27c>)
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	601a      	str	r2, [r3, #0]
						state_Tra = 0;
 8003e9e:	4b6e      	ldr	r3, [pc, #440]	@ (8004058 <SetHome+0x280>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
						CountHome = 0;
 8003ea4:	4b63      	ldr	r3, [pc, #396]	@ (8004034 <SetHome+0x25c>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
						Place = 0;
 8003eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800405c <SetHome+0x284>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
						Pick = 0;
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	@ (8004060 <SetHome+0x288>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
						state_Pick_Place = 0;
 8003eb6:	4b6b      	ldr	r3, [pc, #428]	@ (8004064 <SetHome+0x28c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
						registerFrame[0x10].U16 = 0b0000;//Reset ModBus
 8003ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8004028 <SetHome+0x250>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	841a      	strh	r2, [r3, #32]
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2108      	movs	r1, #8
 8003ec6:	4868      	ldr	r0, [pc, #416]	@ (8004068 <SetHome+0x290>)
 8003ec8:	f003 f80e 	bl	8006ee8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2104      	movs	r1, #4
 8003ed0:	4865      	ldr	r0, [pc, #404]	@ (8004068 <SetHome+0x290>)
 8003ed2:	f003 f809 	bl	8006ee8 <HAL_GPIO_WritePin>
						resetHome();
 8003ed6:	f7fe ff07 	bl	8002ce8 <resetHome>
						CountingDelay = 0;
 8003eda:	4b59      	ldr	r3, [pc, #356]	@ (8004040 <SetHome+0x268>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	801a      	strh	r2, [r3, #0]
				if(CountHome > 100)
 8003ee0:	e098      	b.n	8004014 <SetHome+0x23c>
					}

				}
				else
				{
					CountHome++;
 8003ee2:	4b54      	ldr	r3, [pc, #336]	@ (8004034 <SetHome+0x25c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a52      	ldr	r2, [pc, #328]	@ (8004034 <SetHome+0x25c>)
 8003eea:	6013      	str	r3, [r2, #0]
				if(CountHome > 100)
 8003eec:	e092      	b.n	8004014 <SetHome+0x23c>
				}
			}
			else
			{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003eee:	2201      	movs	r2, #1
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ef6:	f002 fff7 	bl	8006ee8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 8000);
 8003efa:	4b4f      	ldr	r3, [pc, #316]	@ (8004038 <SetHome+0x260>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003f02:	635a      	str	r2, [r3, #52]	@ 0x34
			CountHome = 0;
 8003f04:	4b4b      	ldr	r3, [pc, #300]	@ (8004034 <SetHome+0x25c>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 8000);
			CountHome = 0;
			}
		}
    }
 8003f0a:	e086      	b.n	800401a <SetHome+0x242>
			if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8003f0c:	4b47      	ldr	r3, [pc, #284]	@ (800402c <SetHome+0x254>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d006      	beq.n	8003f22 <SetHome+0x14a>
 8003f14:	2110      	movs	r1, #16
 8003f16:	4846      	ldr	r0, [pc, #280]	@ (8004030 <SetHome+0x258>)
 8003f18:	f002 ffce 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d169      	bne.n	8003ff6 <SetHome+0x21e>
				if(CountHome > 100)
 8003f22:	4b44      	ldr	r3, [pc, #272]	@ (8004034 <SetHome+0x25c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b64      	cmp	r3, #100	@ 0x64
 8003f28:	dd5f      	ble.n	8003fea <SetHome+0x212>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f32:	f002 ffd9 	bl	8006ee8 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003f36:	4b40      	ldr	r3, [pc, #256]	@ (8004038 <SetHome+0x260>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	635a      	str	r2, [r3, #52]	@ 0x34
					if(DelayTime < HAL_GetTick())
 8003f3e:	f000 fd73 	bl	8004a28 <HAL_GetTick>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2200      	movs	r2, #0
 8003f46:	461c      	mov	r4, r3
 8003f48:	4615      	mov	r5, r2
 8003f4a:	4b48      	ldr	r3, [pc, #288]	@ (800406c <SetHome+0x294>)
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	42a2      	cmp	r2, r4
 8003f52:	41ab      	sbcs	r3, r5
 8003f54:	d20f      	bcs.n	8003f76 <SetHome+0x19e>
						 CountingDelay++;
 8003f56:	4b3a      	ldr	r3, [pc, #232]	@ (8004040 <SetHome+0x268>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	4b38      	ldr	r3, [pc, #224]	@ (8004040 <SetHome+0x268>)
 8003f60:	801a      	strh	r2, [r3, #0]
						 DelayTime = HAL_GetTick()+10;
 8003f62:	f000 fd61 	bl	8004a28 <HAL_GetTick>
 8003f66:	4603      	mov	r3, r0
 8003f68:	330a      	adds	r3, #10
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	469a      	mov	sl, r3
 8003f6e:	4693      	mov	fp, r2
 8003f70:	4b3e      	ldr	r3, [pc, #248]	@ (800406c <SetHome+0x294>)
 8003f72:	e9c3 ab00 	strd	sl, fp, [r3]
					if(CountingDelay > 100)
 8003f76:	4b32      	ldr	r3, [pc, #200]	@ (8004040 <SetHome+0x268>)
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	2b64      	cmp	r3, #100	@ 0x64
 8003f7c:	d94c      	bls.n	8004018 <SetHome+0x240>
					HOME = 0;
 8003f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800402c <SetHome+0x254>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3,0);
 8003f84:	4b2f      	ldr	r3, [pc, #188]	@ (8004044 <SetHome+0x26c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	625a      	str	r2, [r3, #36]	@ 0x24
					Count = 0;
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004048 <SetHome+0x270>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
					QEIdata.Position[NEW] = 0;
 8003f92:	4b2e      	ldr	r3, [pc, #184]	@ (800404c <SetHome+0x274>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
					QEIdata.Position[OLD] = 0;
 8003f98:	4b2c      	ldr	r3, [pc, #176]	@ (800404c <SetHome+0x274>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	605a      	str	r2, [r3, #4]
					Pos_Start = 0;
 8003f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004050 <SetHome+0x278>)
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
					state_ALL = 2;
 8003fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8004054 <SetHome+0x27c>)
 8003fa8:	2202      	movs	r2, #2
 8003faa:	601a      	str	r2, [r3, #0]
					state_Tra = 0;
 8003fac:	4b2a      	ldr	r3, [pc, #168]	@ (8004058 <SetHome+0x280>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
					CountHome = 0;
 8003fb2:	4b20      	ldr	r3, [pc, #128]	@ (8004034 <SetHome+0x25c>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
					Place = 0;
 8003fb8:	4b28      	ldr	r3, [pc, #160]	@ (800405c <SetHome+0x284>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
					Pick = 0;
 8003fbe:	4b28      	ldr	r3, [pc, #160]	@ (8004060 <SetHome+0x288>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
					state_Pick_Place = 0;
 8003fc4:	4b27      	ldr	r3, [pc, #156]	@ (8004064 <SetHome+0x28c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8003fca:	2201      	movs	r2, #1
 8003fcc:	2108      	movs	r1, #8
 8003fce:	4826      	ldr	r0, [pc, #152]	@ (8004068 <SetHome+0x290>)
 8003fd0:	f002 ff8a 	bl	8006ee8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	4823      	ldr	r0, [pc, #140]	@ (8004068 <SetHome+0x290>)
 8003fda:	f002 ff85 	bl	8006ee8 <HAL_GPIO_WritePin>
					resetHome();
 8003fde:	f7fe fe83 	bl	8002ce8 <resetHome>
					CountingDelay = 0;
 8003fe2:	4b17      	ldr	r3, [pc, #92]	@ (8004040 <SetHome+0x268>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	801a      	strh	r2, [r3, #0]
				if(CountHome > 100)
 8003fe8:	e016      	b.n	8004018 <SetHome+0x240>
					CountHome++;
 8003fea:	4b12      	ldr	r3, [pc, #72]	@ (8004034 <SetHome+0x25c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	4a10      	ldr	r2, [pc, #64]	@ (8004034 <SetHome+0x25c>)
 8003ff2:	6013      	str	r3, [r2, #0]
				if(CountHome > 100)
 8003ff4:	e010      	b.n	8004018 <SetHome+0x240>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ffe:	f002 ff73 	bl	8006ee8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 8000);
 8004002:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <SetHome+0x260>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800400a:	635a      	str	r2, [r3, #52]	@ 0x34
			CountHome = 0;
 800400c:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <SetHome+0x25c>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
    }
 8004012:	e002      	b.n	800401a <SetHome+0x242>
				if(CountHome > 100)
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <SetHome+0x242>
				if(CountHome > 100)
 8004018:	bf00      	nop
    }
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004024:	2000116c 	.word	0x2000116c
 8004028:	20000fd8 	.word	0x20000fd8
 800402c:	200011c8 	.word	0x200011c8
 8004030:	48000400 	.word	0x48000400
 8004034:	200011f4 	.word	0x200011f4
 8004038:	20000578 	.word	0x20000578
 800403c:	200013f8 	.word	0x200013f8
 8004040:	20001224 	.word	0x20001224
 8004044:	200004ac 	.word	0x200004ac
 8004048:	2000136c 	.word	0x2000136c
 800404c:	20001378 	.word	0x20001378
 8004050:	200012c8 	.word	0x200012c8
 8004054:	20000204 	.word	0x20000204
 8004058:	200012e8 	.word	0x200012e8
 800405c:	20001218 	.word	0x20001218
 8004060:	20001214 	.word	0x20001214
 8004064:	200011c4 	.word	0x200011c4
 8004068:	48000800 	.word	0x48000800
 800406c:	20001400 	.word	0x20001400

08004070 <splitInteger>:

void splitInteger(int number, int *digitsArray) {
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
    int temp = number;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]
    for (int b = 0; b < 5; b++) {
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	e01d      	b.n	80040c0 <splitInteger+0x50>
        digitsArray[4 - b] = temp % 10;  // Getting the last digit
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f1c3 0304 	rsb	r3, r3, #4
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	18d0      	adds	r0, r2, r3
 8004090:	68f9      	ldr	r1, [r7, #12]
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <splitInteger+0x64>)
 8004094:	fb83 2301 	smull	r2, r3, r3, r1
 8004098:	109a      	asrs	r2, r3, #2
 800409a:	17cb      	asrs	r3, r1, #31
 800409c:	1ad2      	subs	r2, r2, r3
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	1aca      	subs	r2, r1, r3
 80040a8:	6002      	str	r2, [r0, #0]
        temp /= 10;  // Removing the last digit
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a09      	ldr	r2, [pc, #36]	@ (80040d4 <splitInteger+0x64>)
 80040ae:	fb82 1203 	smull	r1, r2, r2, r3
 80040b2:	1092      	asrs	r2, r2, #2
 80040b4:	17db      	asrs	r3, r3, #31
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	60fb      	str	r3, [r7, #12]
    for (int b = 0; b < 5; b++) {
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	3301      	adds	r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	ddde      	ble.n	8004084 <splitInteger+0x14>
    }
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	66666667 	.word	0x66666667

080040d8 <SensorRead>:
void SensorRead()
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
	ButtonTest[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80040dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040e4:	f002 fee8 	bl	8006eb8 <HAL_GPIO_ReadPin>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b28      	ldr	r3, [pc, #160]	@ (8004190 <SensorRead+0xb8>)
 80040ee:	601a      	str	r2, [r3, #0]
	ButtonTest[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80040f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040f4:	4827      	ldr	r0, [pc, #156]	@ (8004194 <SensorRead+0xbc>)
 80040f6:	f002 fedf 	bl	8006eb8 <HAL_GPIO_ReadPin>
 80040fa:	4603      	mov	r3, r0
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <SensorRead+0xb8>)
 8004100:	605a      	str	r2, [r3, #4]
	ButtonTest[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8004102:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800410a:	f002 fed5 	bl	8006eb8 <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	461a      	mov	r2, r3
 8004112:	4b1f      	ldr	r3, [pc, #124]	@ (8004190 <SensorRead+0xb8>)
 8004114:	609a      	str	r2, [r3, #8]
	ButtonTest[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8004116:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800411a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800411e:	f002 fecb 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8004122:	4603      	mov	r3, r0
 8004124:	461a      	mov	r2, r3
 8004126:	4b1a      	ldr	r3, [pc, #104]	@ (8004190 <SensorRead+0xb8>)
 8004128:	60da      	str	r2, [r3, #12]
	ButtonTest[4] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 800412a:	2180      	movs	r1, #128	@ 0x80
 800412c:	481a      	ldr	r0, [pc, #104]	@ (8004198 <SensorRead+0xc0>)
 800412e:	f002 fec3 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4b16      	ldr	r3, [pc, #88]	@ (8004190 <SensorRead+0xb8>)
 8004138:	611a      	str	r2, [r3, #16]
	ButtonTest[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800413a:	2140      	movs	r1, #64	@ 0x40
 800413c:	4815      	ldr	r0, [pc, #84]	@ (8004194 <SensorRead+0xbc>)
 800413e:	f002 febb 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	4b12      	ldr	r3, [pc, #72]	@ (8004190 <SensorRead+0xb8>)
 8004148:	615a      	str	r2, [r3, #20]
	LeadSW[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 800414a:	2101      	movs	r1, #1
 800414c:	4811      	ldr	r0, [pc, #68]	@ (8004194 <SensorRead+0xbc>)
 800414e:	f002 feb3 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8004152:	4603      	mov	r3, r0
 8004154:	461a      	mov	r2, r3
 8004156:	4b11      	ldr	r3, [pc, #68]	@ (800419c <SensorRead+0xc4>)
 8004158:	601a      	str	r2, [r3, #0]
	LeadSW[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 800415a:	2102      	movs	r1, #2
 800415c:	480e      	ldr	r0, [pc, #56]	@ (8004198 <SensorRead+0xc0>)
 800415e:	f002 feab 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8004162:	4603      	mov	r3, r0
 8004164:	461a      	mov	r2, r3
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <SensorRead+0xc4>)
 8004168:	605a      	str	r2, [r3, #4]
	emer = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //emer
 800416a:	2110      	movs	r1, #16
 800416c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004170:	f002 fea2 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8004174:	4603      	mov	r3, r0
 8004176:	461a      	mov	r2, r3
 8004178:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <SensorRead+0xc8>)
 800417a:	601a      	str	r2, [r3, #0]
	resetBut = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2); //reset
 800417c:	2104      	movs	r1, #4
 800417e:	4805      	ldr	r0, [pc, #20]	@ (8004194 <SensorRead+0xbc>)
 8004180:	f002 fe9a 	bl	8006eb8 <HAL_GPIO_ReadPin>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	4b06      	ldr	r3, [pc, #24]	@ (80041a4 <SensorRead+0xcc>)
 800418a:	601a      	str	r2, [r3, #0]
}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}
 8004190:	200011cc 	.word	0x200011cc
 8004194:	48000400 	.word	0x48000400
 8004198:	48000800 	.word	0x48000800
 800419c:	200011e4 	.word	0x200011e4
 80041a0:	2000121c 	.word	0x2000121c
 80041a4:	20001220 	.word	0x20001220

080041a8 <mapFloat>:
//	else
//	{
//		CountProxi = 0;
//	}
//}
float mapFloat(float x, float in_min, float in_max, float out_min, float out_max) {
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80041b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80041b6:	ed87 1a03 	vstr	s2, [r7, #12]
 80041ba:	edc7 1a02 	vstr	s3, [r7, #8]
 80041be:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80041c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80041c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041ce:	edd7 6a01 	vldr	s13, [r7, #4]
 80041d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80041d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80041da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80041de:	ed97 7a03 	vldr	s14, [r7, #12]
 80041e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80041e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80041f2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80041f6:	eeb0 0a67 	vmov.f32	s0, s15
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b4b0      	push	{r4, r5, r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a08      	ldr	r2, [pc, #32]	@ (8004230 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 8004214:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	1e54      	subs	r4, r2, #1
 800421c:	f143 0500 	adc.w	r5, r3, #0
 8004220:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004222:	e9c3 4500 	strd	r4, r5, [r3]
if(htim == &htim6)
{
//	Heartbeat();
//	Routine();
}
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bcb0      	pop	{r4, r5, r7}
 800422e:	4770      	bx	lr
 8004230:	20000644 	.word	0x20000644
 8004234:	200013a0 	.word	0x200013a0

08004238 <micros>:
uint64_t micros()
{
 8004238:	b4b0      	push	{r4, r5, r7}
 800423a:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 800423c:	4b09      	ldr	r3, [pc, #36]	@ (8004264 <micros+0x2c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	2200      	movs	r2, #0
 8004244:	4618      	mov	r0, r3
 8004246:	4611      	mov	r1, r2
 8004248:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <micros+0x30>)
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	1884      	adds	r4, r0, r2
 8004250:	eb41 0503 	adc.w	r5, r1, r3
 8004254:	4622      	mov	r2, r4
 8004256:	462b      	mov	r3, r5
}
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	bcb0      	pop	{r4, r5, r7}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000644 	.word	0x20000644
 8004268:	200013a0 	.word	0x200013a0

0800426c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427c:	d102      	bne.n	8004284 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start  = 1;
 800427e:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <HAL_GPIO_EXTI_Callback+0x24>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
//	if(GPIO_Pin == GPIO_PIN_5)
//	{
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//		HOME = 2;
//	}
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	200011b8 	.word	0x200011b8

08004294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004298:	b672      	cpsid	i
}
 800429a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800429c:	bf00      	nop
 800429e:	e7fd      	b.n	800429c <Error_Handler+0x8>

080042a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a6:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <HAL_MspInit+0x44>)
 80042a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042aa:	4a0e      	ldr	r2, [pc, #56]	@ (80042e4 <HAL_MspInit+0x44>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80042b2:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <HAL_MspInit+0x44>)
 80042b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <HAL_MspInit+0x44>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c2:	4a08      	ldr	r2, [pc, #32]	@ (80042e4 <HAL_MspInit+0x44>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ca:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <HAL_MspInit+0x44>)
 80042cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80042d6:	f002 fef5 	bl	80070c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000

080042e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b09e      	sub	sp, #120	@ 0x78
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	60da      	str	r2, [r3, #12]
 80042fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004300:	f107 0310 	add.w	r3, r7, #16
 8004304:	2254      	movs	r2, #84	@ 0x54
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f007 fdb9 	bl	800be80 <memset>
  if(hadc->Instance==ADC3)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a33      	ldr	r2, [pc, #204]	@ (80043e0 <HAL_ADC_MspInit+0xf8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d15f      	bne.n	80043d8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8004318:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800431c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800431e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004322:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004324:	f107 0310 	add.w	r3, r7, #16
 8004328:	4618      	mov	r0, r3
 800432a:	f003 fc09 	bl	8007b40 <HAL_RCCEx_PeriphCLKConfig>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004334:	f7ff ffae 	bl	8004294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8004338:	4b2a      	ldr	r3, [pc, #168]	@ (80043e4 <HAL_ADC_MspInit+0xfc>)
 800433a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433c:	4a29      	ldr	r2, [pc, #164]	@ (80043e4 <HAL_ADC_MspInit+0xfc>)
 800433e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004344:	4b27      	ldr	r3, [pc, #156]	@ (80043e4 <HAL_ADC_MspInit+0xfc>)
 8004346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004350:	4b24      	ldr	r3, [pc, #144]	@ (80043e4 <HAL_ADC_MspInit+0xfc>)
 8004352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004354:	4a23      	ldr	r2, [pc, #140]	@ (80043e4 <HAL_ADC_MspInit+0xfc>)
 8004356:	f043 0302 	orr.w	r3, r3, #2
 800435a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800435c:	4b21      	ldr	r3, [pc, #132]	@ (80043e4 <HAL_ADC_MspInit+0xfc>)
 800435e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = JOY_Y_Pin|JOY_X_Pin;
 8004368:	f242 0302 	movw	r3, #8194	@ 0x2002
 800436c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800436e:	2303      	movs	r3, #3
 8004370:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004376:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800437a:	4619      	mov	r1, r3
 800437c:	481a      	ldr	r0, [pc, #104]	@ (80043e8 <HAL_ADC_MspInit+0x100>)
 800437e:	f002 fc19 	bl	8006bb4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel3;
 8004382:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 8004384:	4a1a      	ldr	r2, [pc, #104]	@ (80043f0 <HAL_ADC_MspInit+0x108>)
 8004386:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8004388:	4b18      	ldr	r3, [pc, #96]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 800438a:	2225      	movs	r2, #37	@ 0x25
 800438c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800438e:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004394:	4b15      	ldr	r3, [pc, #84]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800439a:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 800439c:	2280      	movs	r2, #128	@ 0x80
 800439e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043a0:	4b12      	ldr	r3, [pc, #72]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 80043a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043a6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043a8:	4b10      	ldr	r3, [pc, #64]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 80043aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043ae:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80043b0:	4b0e      	ldr	r3, [pc, #56]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 80043b2:	2220      	movs	r2, #32
 80043b4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80043b6:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80043bc:	480b      	ldr	r0, [pc, #44]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 80043be:	f002 f8c7 	bl	8006550 <HAL_DMA_Init>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80043c8:	f7ff ff64 	bl	8004294 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a07      	ldr	r2, [pc, #28]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80043d2:	4a06      	ldr	r2, [pc, #24]	@ (80043ec <HAL_ADC_MspInit+0x104>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80043d8:	bf00      	nop
 80043da:	3778      	adds	r7, #120	@ 0x78
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	50000400 	.word	0x50000400
 80043e4:	40021000 	.word	0x40021000
 80043e8:	48000400 	.word	0x48000400
 80043ec:	200002b4 	.word	0x200002b4
 80043f0:	40020030 	.word	0x40020030

080043f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	@ 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a4f      	ldr	r2, [pc, #316]	@ (8004540 <HAL_TIM_Base_MspInit+0x14c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d114      	bne.n	8004430 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004406:	4b4f      	ldr	r3, [pc, #316]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440a:	4a4e      	ldr	r2, [pc, #312]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 800440c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004410:	6613      	str	r3, [r2, #96]	@ 0x60
 8004412:	4b4c      	ldr	r3, [pc, #304]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800441a:	627b      	str	r3, [r7, #36]	@ 0x24
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	2100      	movs	r1, #0
 8004422:	2019      	movs	r0, #25
 8004424:	f002 f85f 	bl	80064e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004428:	2019      	movs	r0, #25
 800442a:	f002 f876 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800442e:	e082      	b.n	8004536 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004438:	d10c      	bne.n	8004454 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800443a:	4b42      	ldr	r3, [pc, #264]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443e:	4a41      	ldr	r2, [pc, #260]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6593      	str	r3, [r2, #88]	@ 0x58
 8004446:	4b3f      	ldr	r3, [pc, #252]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	623b      	str	r3, [r7, #32]
 8004450:	6a3b      	ldr	r3, [r7, #32]
}
 8004452:	e070      	b.n	8004536 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3b      	ldr	r2, [pc, #236]	@ (8004548 <HAL_TIM_Base_MspInit+0x154>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d10c      	bne.n	8004478 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800445e:	4b39      	ldr	r3, [pc, #228]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	4a38      	ldr	r2, [pc, #224]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	6593      	str	r3, [r2, #88]	@ 0x58
 800446a:	4b36      	ldr	r3, [pc, #216]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	69fb      	ldr	r3, [r7, #28]
}
 8004476:	e05e      	b.n	8004536 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM5)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a33      	ldr	r2, [pc, #204]	@ (800454c <HAL_TIM_Base_MspInit+0x158>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d114      	bne.n	80044ac <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004482:	4b30      	ldr	r3, [pc, #192]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004486:	4a2f      	ldr	r2, [pc, #188]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004488:	f043 0308 	orr.w	r3, r3, #8
 800448c:	6593      	str	r3, [r2, #88]	@ 0x58
 800448e:	4b2d      	ldr	r3, [pc, #180]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	2100      	movs	r1, #0
 800449e:	2032      	movs	r0, #50	@ 0x32
 80044a0:	f002 f821 	bl	80064e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80044a4:	2032      	movs	r0, #50	@ 0x32
 80044a6:	f002 f838 	bl	800651a <HAL_NVIC_EnableIRQ>
}
 80044aa:	e044      	b.n	8004536 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a27      	ldr	r2, [pc, #156]	@ (8004550 <HAL_TIM_Base_MspInit+0x15c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d114      	bne.n	80044e0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80044b6:	4b23      	ldr	r3, [pc, #140]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	4a22      	ldr	r2, [pc, #136]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 80044bc:	f043 0310 	orr.w	r3, r3, #16
 80044c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044c2:	4b20      	ldr	r3, [pc, #128]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80044ce:	2200      	movs	r2, #0
 80044d0:	2100      	movs	r1, #0
 80044d2:	2036      	movs	r0, #54	@ 0x36
 80044d4:	f002 f807 	bl	80064e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80044d8:	2036      	movs	r0, #54	@ 0x36
 80044da:	f002 f81e 	bl	800651a <HAL_NVIC_EnableIRQ>
}
 80044de:	e02a      	b.n	8004536 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004554 <HAL_TIM_Base_MspInit+0x160>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10c      	bne.n	8004504 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80044ea:	4b16      	ldr	r3, [pc, #88]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 80044ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ee:	4a15      	ldr	r2, [pc, #84]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 80044f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80044f6:	4b13      	ldr	r3, [pc, #76]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 80044f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	693b      	ldr	r3, [r7, #16]
}
 8004502:	e018      	b.n	8004536 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a13      	ldr	r2, [pc, #76]	@ (8004558 <HAL_TIM_Base_MspInit+0x164>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d113      	bne.n	8004536 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004512:	4a0c      	ldr	r2, [pc, #48]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 8004514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004518:	6613      	str	r3, [r2, #96]	@ 0x60
 800451a:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <HAL_TIM_Base_MspInit+0x150>)
 800451c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004526:	2200      	movs	r2, #0
 8004528:	2100      	movs	r1, #0
 800452a:	2019      	movs	r0, #25
 800452c:	f001 ffdb 	bl	80064e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004530:	2019      	movs	r0, #25
 8004532:	f001 fff2 	bl	800651a <HAL_NVIC_EnableIRQ>
}
 8004536:	bf00      	nop
 8004538:	3728      	adds	r7, #40	@ 0x28
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40021000 	.word	0x40021000
 8004548:	40000800 	.word	0x40000800
 800454c:	40000c00 	.word	0x40000c00
 8004550:	40001000 	.word	0x40001000
 8004554:	40013400 	.word	0x40013400
 8004558:	40014400 	.word	0x40014400

0800455c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	@ 0x28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004564:	f107 0314 	add.w	r3, r7, #20
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a17      	ldr	r2, [pc, #92]	@ (80045d8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d128      	bne.n	80045d0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800457e:	4b17      	ldr	r3, [pc, #92]	@ (80045dc <HAL_TIM_Encoder_MspInit+0x80>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	4a16      	ldr	r2, [pc, #88]	@ (80045dc <HAL_TIM_Encoder_MspInit+0x80>)
 8004584:	f043 0302 	orr.w	r3, r3, #2
 8004588:	6593      	str	r3, [r2, #88]	@ 0x58
 800458a:	4b14      	ldr	r3, [pc, #80]	@ (80045dc <HAL_TIM_Encoder_MspInit+0x80>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004596:	4b11      	ldr	r3, [pc, #68]	@ (80045dc <HAL_TIM_Encoder_MspInit+0x80>)
 8004598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800459a:	4a10      	ldr	r2, [pc, #64]	@ (80045dc <HAL_TIM_Encoder_MspInit+0x80>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045a2:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <HAL_TIM_Encoder_MspInit+0x80>)
 80045a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_Encoder_A_Pin|TIM3_Encoder_B_Pin;
 80045ae:	23c0      	movs	r3, #192	@ 0xc0
 80045b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b2:	2302      	movs	r3, #2
 80045b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045be:	2302      	movs	r3, #2
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c2:	f107 0314 	add.w	r3, r7, #20
 80045c6:	4619      	mov	r1, r3
 80045c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045cc:	f002 faf2 	bl	8006bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80045d0:	bf00      	nop
 80045d2:	3728      	adds	r7, #40	@ 0x28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40021000 	.word	0x40021000

080045e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 030c 	add.w	r3, r7, #12
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a12      	ldr	r2, [pc, #72]	@ (8004648 <HAL_TIM_MspPostInit+0x68>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d11d      	bne.n	800463e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004602:	4b12      	ldr	r3, [pc, #72]	@ (800464c <HAL_TIM_MspPostInit+0x6c>)
 8004604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004606:	4a11      	ldr	r2, [pc, #68]	@ (800464c <HAL_TIM_MspPostInit+0x6c>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800460e:	4b0f      	ldr	r3, [pc, #60]	@ (800464c <HAL_TIM_MspPostInit+0x6c>)
 8004610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_PWM_Pin;
 800461a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800461e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004620:	2302      	movs	r3, #2
 8004622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004628:	2300      	movs	r3, #0
 800462a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800462c:	230a      	movs	r3, #10
 800462e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_PWM_GPIO_Port, &GPIO_InitStruct);
 8004630:	f107 030c 	add.w	r3, r7, #12
 8004634:	4619      	mov	r1, r3
 8004636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800463a:	f002 fabb 	bl	8006bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800463e:	bf00      	nop
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40000800 	.word	0x40000800
 800464c:	40021000 	.word	0x40021000

08004650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b09e      	sub	sp, #120	@ 0x78
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004658:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	609a      	str	r2, [r3, #8]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004668:	f107 0310 	add.w	r3, r7, #16
 800466c:	2254      	movs	r2, #84	@ 0x54
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f007 fc05 	bl	800be80 <memset>
  if(huart->Instance==USART2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4d      	ldr	r2, [pc, #308]	@ (80047b0 <HAL_UART_MspInit+0x160>)
 800467c:	4293      	cmp	r3, r2
 800467e:	f040 8092 	bne.w	80047a6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004682:	2302      	movs	r3, #2
 8004684:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800468a:	f107 0310 	add.w	r3, r7, #16
 800468e:	4618      	mov	r0, r3
 8004690:	f003 fa56 	bl	8007b40 <HAL_RCCEx_PeriphCLKConfig>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800469a:	f7ff fdfb 	bl	8004294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800469e:	4b45      	ldr	r3, [pc, #276]	@ (80047b4 <HAL_UART_MspInit+0x164>)
 80046a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a2:	4a44      	ldr	r2, [pc, #272]	@ (80047b4 <HAL_UART_MspInit+0x164>)
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80046aa:	4b42      	ldr	r3, [pc, #264]	@ (80047b4 <HAL_UART_MspInit+0x164>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b6:	4b3f      	ldr	r3, [pc, #252]	@ (80047b4 <HAL_UART_MspInit+0x164>)
 80046b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ba:	4a3e      	ldr	r2, [pc, #248]	@ (80047b4 <HAL_UART_MspInit+0x164>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046c2:	4b3c      	ldr	r3, [pc, #240]	@ (80047b4 <HAL_UART_MspInit+0x164>)
 80046c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046ce:	230c      	movs	r3, #12
 80046d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d2:	2302      	movs	r3, #2
 80046d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046da:	2300      	movs	r3, #0
 80046dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046de:	2307      	movs	r3, #7
 80046e0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80046e6:	4619      	mov	r1, r3
 80046e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046ec:	f002 fa62 	bl	8006bb4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80046f0:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 80046f2:	4a32      	ldr	r2, [pc, #200]	@ (80047bc <HAL_UART_MspInit+0x16c>)
 80046f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80046f6:	4b30      	ldr	r3, [pc, #192]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 80046f8:	221a      	movs	r2, #26
 80046fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046fc:	4b2e      	ldr	r3, [pc, #184]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004702:	4b2d      	ldr	r3, [pc, #180]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 8004704:	2200      	movs	r2, #0
 8004706:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004708:	4b2b      	ldr	r3, [pc, #172]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 800470a:	2280      	movs	r2, #128	@ 0x80
 800470c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800470e:	4b2a      	ldr	r3, [pc, #168]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 8004710:	2200      	movs	r2, #0
 8004712:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004714:	4b28      	ldr	r3, [pc, #160]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 8004716:	2200      	movs	r2, #0
 8004718:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800471a:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 800471c:	2200      	movs	r2, #0
 800471e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004720:	4b25      	ldr	r3, [pc, #148]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 8004722:	2200      	movs	r2, #0
 8004724:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004726:	4824      	ldr	r0, [pc, #144]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 8004728:	f001 ff12 	bl	8006550 <HAL_DMA_Init>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004732:	f7ff fdaf 	bl	8004294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1f      	ldr	r2, [pc, #124]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 800473a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800473e:	4a1e      	ldr	r2, [pc, #120]	@ (80047b8 <HAL_UART_MspInit+0x168>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004744:	4b1e      	ldr	r3, [pc, #120]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 8004746:	4a1f      	ldr	r2, [pc, #124]	@ (80047c4 <HAL_UART_MspInit+0x174>)
 8004748:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800474a:	4b1d      	ldr	r3, [pc, #116]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 800474c:	221b      	movs	r2, #27
 800474e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004750:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 8004752:	2210      	movs	r2, #16
 8004754:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004756:	4b1a      	ldr	r3, [pc, #104]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 8004758:	2200      	movs	r2, #0
 800475a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800475c:	4b18      	ldr	r3, [pc, #96]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 800475e:	2280      	movs	r2, #128	@ 0x80
 8004760:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004762:	4b17      	ldr	r3, [pc, #92]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 8004764:	2200      	movs	r2, #0
 8004766:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004768:	4b15      	ldr	r3, [pc, #84]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 800476a:	2200      	movs	r2, #0
 800476c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800476e:	4b14      	ldr	r3, [pc, #80]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 8004770:	2200      	movs	r2, #0
 8004772:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004774:	4b12      	ldr	r3, [pc, #72]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 8004776:	2200      	movs	r2, #0
 8004778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800477a:	4811      	ldr	r0, [pc, #68]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 800477c:	f001 fee8 	bl	8006550 <HAL_DMA_Init>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004786:	f7ff fd85 	bl	8004294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a0c      	ldr	r2, [pc, #48]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 800478e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004790:	4a0b      	ldr	r2, [pc, #44]	@ (80047c0 <HAL_UART_MspInit+0x170>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	2100      	movs	r1, #0
 800479a:	2026      	movs	r0, #38	@ 0x26
 800479c:	f001 fea3 	bl	80064e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047a0:	2026      	movs	r0, #38	@ 0x26
 80047a2:	f001 feba 	bl	800651a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047a6:	bf00      	nop
 80047a8:	3778      	adds	r7, #120	@ 0x78
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40004400 	.word	0x40004400
 80047b4:	40021000 	.word	0x40021000
 80047b8:	20000a40 	.word	0x20000a40
 80047bc:	40020008 	.word	0x40020008
 80047c0:	20000aa0 	.word	0x20000aa0
 80047c4:	4002001c 	.word	0x4002001c

080047c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <NMI_Handler+0x4>

080047d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047d4:	bf00      	nop
 80047d6:	e7fd      	b.n	80047d4 <HardFault_Handler+0x4>

080047d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047dc:	bf00      	nop
 80047de:	e7fd      	b.n	80047dc <MemManage_Handler+0x4>

080047e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <BusFault_Handler+0x4>

080047e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <UsageFault_Handler+0x4>

080047f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800481e:	f000 f8f1 	bl	8004a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}

08004826 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lowerprox_Pin);
 800482a:	2010      	movs	r0, #16
 800482c:	f002 fb8e 	bl	8006f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}

08004834 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004838:	4802      	ldr	r0, [pc, #8]	@ (8004844 <DMA1_Channel1_IRQHandler+0x10>)
 800483a:	f002 f86c 	bl	8006916 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000a40 	.word	0x20000a40

08004848 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800484c:	4802      	ldr	r0, [pc, #8]	@ (8004858 <DMA1_Channel2_IRQHandler+0x10>)
 800484e:	f002 f862 	bl	8006916 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000aa0 	.word	0x20000aa0

0800485c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004860:	4802      	ldr	r0, [pc, #8]	@ (800486c <DMA1_Channel3_IRQHandler+0x10>)
 8004862:	f002 f858 	bl	8006916 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	200002b4 	.word	0x200002b4

08004870 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UpperProx_Pin);
 8004874:	2020      	movs	r0, #32
 8004876:	f002 fb69 	bl	8006f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004884:	4803      	ldr	r0, [pc, #12]	@ (8004894 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004886:	f004 f8ad 	bl	80089e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800488a:	4803      	ldr	r0, [pc, #12]	@ (8004898 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800488c:	f004 f8aa 	bl	80089e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000314 	.word	0x20000314
 8004898:	200008a8 	.word	0x200008a8

0800489c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048a0:	4802      	ldr	r0, [pc, #8]	@ (80048ac <USART2_IRQHandler+0x10>)
 80048a2:	f005 fddf 	bl	800a464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000974 	.word	0x20000974

080048b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80048b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80048b8:	f002 fb48 	bl	8006f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048bc:	bf00      	nop
 80048be:	bd80      	pop	{r7, pc}

080048c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80048c4:	4802      	ldr	r0, [pc, #8]	@ (80048d0 <TIM5_IRQHandler+0x10>)
 80048c6:	f004 f88d 	bl	80089e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000644 	.word	0x20000644

080048d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048d8:	4802      	ldr	r0, [pc, #8]	@ (80048e4 <TIM6_DAC_IRQHandler+0x10>)
 80048da:	f004 f883 	bl	80089e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000710 	.word	0x20000710

080048e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <SystemInit+0x20>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f2:	4a05      	ldr	r2, [pc, #20]	@ (8004908 <SystemInit+0x20>)
 80048f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800490c:	480d      	ldr	r0, [pc, #52]	@ (8004944 <LoopForever+0x2>)

  mov   sp, r0          /* set stack pointer */
 800490e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004910:	f7ff ffea 	bl	80048e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004914:	480c      	ldr	r0, [pc, #48]	@ (8004948 <LoopForever+0x6>)
  ldr r1, =_edata
 8004916:	490d      	ldr	r1, [pc, #52]	@ (800494c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004918:	4a0d      	ldr	r2, [pc, #52]	@ (8004950 <LoopForever+0xe>)
  movs r3, #0
 800491a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800491c:	e002      	b.n	8004924 <LoopCopyDataInit>

0800491e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800491e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004922:	3304      	adds	r3, #4

08004924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004928:	d3f9      	bcc.n	800491e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800492a:	4a0a      	ldr	r2, [pc, #40]	@ (8004954 <LoopForever+0x12>)
  ldr r4, =_ebss
 800492c:	4c0a      	ldr	r4, [pc, #40]	@ (8004958 <LoopForever+0x16>)
  movs r3, #0
 800492e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004930:	e001      	b.n	8004936 <LoopFillZerobss>

08004932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004934:	3204      	adds	r2, #4

08004936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004938:	d3fb      	bcc.n	8004932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800493a:	f007 faa9 	bl	800be90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800493e:	f7fc fddd 	bl	80014fc <main>

08004942 <LoopForever>:

LoopForever:
    b LoopForever
 8004942:	e7fe      	b.n	8004942 <LoopForever>
  ldr   r0, =_estack
 8004944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800494c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8004950:	0800bf5c 	.word	0x0800bf5c
  ldr r2, =_sbss
 8004954:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8004958:	2000140c 	.word	0x2000140c

0800495c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800495c:	e7fe      	b.n	800495c <ADC1_2_IRQHandler>

0800495e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004968:	2003      	movs	r0, #3
 800496a:	f001 fdb1 	bl	80064d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800496e:	2000      	movs	r0, #0
 8004970:	f000 f80e 	bl	8004990 <HAL_InitTick>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	71fb      	strb	r3, [r7, #7]
 800497e:	e001      	b.n	8004984 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004980:	f7ff fc8e 	bl	80042a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004984:	79fb      	ldrb	r3, [r7, #7]

}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800499c:	4b16      	ldr	r3, [pc, #88]	@ (80049f8 <HAL_InitTick+0x68>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d022      	beq.n	80049ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80049a4:	4b15      	ldr	r3, [pc, #84]	@ (80049fc <HAL_InitTick+0x6c>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <HAL_InitTick+0x68>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80049b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 fdbc 	bl	8006536 <HAL_SYSTICK_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10f      	bne.n	80049e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	d809      	bhi.n	80049de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049ca:	2200      	movs	r2, #0
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	f001 fd88 	bl	80064e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004a00 <HAL_InitTick+0x70>)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e007      	b.n	80049ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	e004      	b.n	80049ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e001      	b.n	80049ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000220 	.word	0x20000220
 80049fc:	20000218 	.word	0x20000218
 8004a00:	2000021c 	.word	0x2000021c

08004a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <HAL_IncTick+0x1c>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <HAL_IncTick+0x20>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4413      	add	r3, r2
 8004a12:	4a03      	ldr	r2, [pc, #12]	@ (8004a20 <HAL_IncTick+0x1c>)
 8004a14:	6013      	str	r3, [r2, #0]
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	20001408 	.word	0x20001408
 8004a24:	20000220 	.word	0x20000220

08004a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a2c:	4b03      	ldr	r3, [pc, #12]	@ (8004a3c <HAL_GetTick+0x14>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	20001408 	.word	0x20001408

08004a40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	609a      	str	r2, [r3, #8]
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3360      	adds	r3, #96	@ 0x60
 8004aba:	461a      	mov	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b08      	ldr	r3, [pc, #32]	@ (8004aec <LL_ADC_SetOffset+0x44>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	03fff000 	.word	0x03fff000

08004af0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3360      	adds	r3, #96	@ 0x60
 8004afe:	461a      	mov	r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3360      	adds	r3, #96	@ 0x60
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b087      	sub	sp, #28
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3360      	adds	r3, #96	@ 0x60
 8004b62:	461a      	mov	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3360      	adds	r3, #96	@ 0x60
 8004b98:	461a      	mov	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	431a      	orrs	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	615a      	str	r2, [r3, #20]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b087      	sub	sp, #28
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3330      	adds	r3, #48	@ 0x30
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	f003 030c 	and.w	r3, r3, #12
 8004c26:	4413      	add	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	211f      	movs	r1, #31
 8004c36:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	401a      	ands	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0e9b      	lsrs	r3, r3, #26
 8004c42:	f003 011f 	and.w	r1, r3, #31
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	431a      	orrs	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b087      	sub	sp, #28
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3314      	adds	r3, #20
 8004c72:	461a      	mov	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	0e5b      	lsrs	r3, r3, #25
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	4413      	add	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	0d1b      	lsrs	r3, r3, #20
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2107      	movs	r1, #7
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	0d1b      	lsrs	r3, r3, #20
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004cac:	bf00      	nop
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f003 0318 	and.w	r3, r3, #24
 8004cda:	4908      	ldr	r1, [pc, #32]	@ (8004cfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8004cdc:	40d9      	lsrs	r1, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	400b      	ands	r3, r1
 8004ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	0007ffff 	.word	0x0007ffff

08004d00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004d2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6093      	str	r3, [r2, #8]
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d54:	d101      	bne.n	8004d5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004d78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004da4:	d101      	bne.n	8004daa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dcc:	f043 0201 	orr.w	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004df4:	f043 0202 	orr.w	r2, r3, #2
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <LL_ADC_IsEnabled+0x18>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <LL_ADC_IsEnabled+0x1a>
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d101      	bne.n	8004e46 <LL_ADC_IsDisableOngoing+0x18>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <LL_ADC_IsDisableOngoing+0x1a>
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e68:	f043 0204 	orr.w	r2, r3, #4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d101      	bne.n	8004e94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d101      	bne.n	8004eba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ec8:	b590      	push	{r4, r7, lr}
 8004eca:	b089      	sub	sp, #36	@ 0x24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e1a9      	b.n	8005236 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff f9f9 	bl	80042e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff ff19 	bl	8004d40 <LL_ADC_IsDeepPowerDownEnabled>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff feff 	bl	8004d1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff ff34 	bl	8004d90 <LL_ADC_IsInternalRegulatorEnabled>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d115      	bne.n	8004f5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff18 	bl	8004d68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f38:	4b9c      	ldr	r3, [pc, #624]	@ (80051ac <HAL_ADC_Init+0x2e4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	4a9c      	ldr	r2, [pc, #624]	@ (80051b0 <HAL_ADC_Init+0x2e8>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	099b      	lsrs	r3, r3, #6
 8004f46:	3301      	adds	r3, #1
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f4c:	e002      	b.n	8004f54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f9      	bne.n	8004f4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff ff16 	bl	8004d90 <LL_ADC_IsInternalRegulatorEnabled>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10d      	bne.n	8004f86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6e:	f043 0210 	orr.w	r2, r3, #16
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ff76 	bl	8004e7c <LL_ADC_REG_IsConversionOngoing>
 8004f90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 8142 	bne.w	8005224 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f040 813e 	bne.w	8005224 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004fb0:	f043 0202 	orr.w	r2, r3, #2
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff ff23 	bl	8004e08 <LL_ADC_IsEnabled>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d141      	bne.n	800504c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fd0:	d004      	beq.n	8004fdc <HAL_ADC_Init+0x114>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a77      	ldr	r2, [pc, #476]	@ (80051b4 <HAL_ADC_Init+0x2ec>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d10f      	bne.n	8004ffc <HAL_ADC_Init+0x134>
 8004fdc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004fe0:	f7ff ff12 	bl	8004e08 <LL_ADC_IsEnabled>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	4873      	ldr	r0, [pc, #460]	@ (80051b4 <HAL_ADC_Init+0x2ec>)
 8004fe8:	f7ff ff0e 	bl	8004e08 <LL_ADC_IsEnabled>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4323      	orrs	r3, r4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2301      	moveq	r3, #1
 8004ff6:	2300      	movne	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e012      	b.n	8005022 <HAL_ADC_Init+0x15a>
 8004ffc:	486e      	ldr	r0, [pc, #440]	@ (80051b8 <HAL_ADC_Init+0x2f0>)
 8004ffe:	f7ff ff03 	bl	8004e08 <LL_ADC_IsEnabled>
 8005002:	4604      	mov	r4, r0
 8005004:	486d      	ldr	r0, [pc, #436]	@ (80051bc <HAL_ADC_Init+0x2f4>)
 8005006:	f7ff feff 	bl	8004e08 <LL_ADC_IsEnabled>
 800500a:	4603      	mov	r3, r0
 800500c:	431c      	orrs	r4, r3
 800500e:	486c      	ldr	r0, [pc, #432]	@ (80051c0 <HAL_ADC_Init+0x2f8>)
 8005010:	f7ff fefa 	bl	8004e08 <LL_ADC_IsEnabled>
 8005014:	4603      	mov	r3, r0
 8005016:	4323      	orrs	r3, r4
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d012      	beq.n	800504c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800502e:	d004      	beq.n	800503a <HAL_ADC_Init+0x172>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a5f      	ldr	r2, [pc, #380]	@ (80051b4 <HAL_ADC_Init+0x2ec>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d101      	bne.n	800503e <HAL_ADC_Init+0x176>
 800503a:	4a62      	ldr	r2, [pc, #392]	@ (80051c4 <HAL_ADC_Init+0x2fc>)
 800503c:	e000      	b.n	8005040 <HAL_ADC_Init+0x178>
 800503e:	4a62      	ldr	r2, [pc, #392]	@ (80051c8 <HAL_ADC_Init+0x300>)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7ff fcfa 	bl	8004a40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	7f5b      	ldrb	r3, [r3, #29]
 8005050:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005056:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800505c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005062:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800506a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800506c:	4313      	orrs	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005076:	2b01      	cmp	r3, #1
 8005078:	d106      	bne.n	8005088 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507e:	3b01      	subs	r3, #1
 8005080:	045b      	lsls	r3, r3, #17
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005094:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	4b48      	ldr	r3, [pc, #288]	@ (80051cc <HAL_ADC_Init+0x304>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	69b9      	ldr	r1, [r7, #24]
 80050b4:	430b      	orrs	r3, r1
 80050b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fee5 	bl	8004ea2 <LL_ADC_INJ_IsConversionOngoing>
 80050d8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d17f      	bne.n	80051e0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d17c      	bne.n	80051e0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80050ea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005102:	f023 0302 	bic.w	r3, r3, #2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	69b9      	ldr	r1, [r7, #24]
 800510c:	430b      	orrs	r3, r1
 800510e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d017      	beq.n	8005148 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005126:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005130:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005134:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6911      	ldr	r1, [r2, #16]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	430b      	orrs	r3, r1
 8005142:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005146:	e013      	b.n	8005170 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005156:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005168:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800516c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005176:	2b01      	cmp	r3, #1
 8005178:	d12a      	bne.n	80051d0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005190:	4311      	orrs	r1, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005196:	4311      	orrs	r1, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800519c:	430a      	orrs	r2, r1
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	611a      	str	r2, [r3, #16]
 80051aa:	e019      	b.n	80051e0 <HAL_ADC_Init+0x318>
 80051ac:	20000218 	.word	0x20000218
 80051b0:	053e2d63 	.word	0x053e2d63
 80051b4:	50000100 	.word	0x50000100
 80051b8:	50000400 	.word	0x50000400
 80051bc:	50000500 	.word	0x50000500
 80051c0:	50000600 	.word	0x50000600
 80051c4:	50000300 	.word	0x50000300
 80051c8:	50000700 	.word	0x50000700
 80051cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10c      	bne.n	8005202 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	f023 010f 	bic.w	r1, r3, #15
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	1e5a      	subs	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8005200:	e007      	b.n	8005212 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 020f 	bic.w	r2, r2, #15
 8005210:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	f043 0201 	orr.w	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005222:	e007      	b.n	8005234 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005228:	f043 0210 	orr.w	r2, r3, #16
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005234:	7ffb      	ldrb	r3, [r7, #31]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3724      	adds	r7, #36	@ 0x24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd90      	pop	{r4, r7, pc}
 800523e:	bf00      	nop

08005240 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005254:	d004      	beq.n	8005260 <HAL_ADC_Start_DMA+0x20>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a5a      	ldr	r2, [pc, #360]	@ (80053c4 <HAL_ADC_Start_DMA+0x184>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d101      	bne.n	8005264 <HAL_ADC_Start_DMA+0x24>
 8005260:	4b59      	ldr	r3, [pc, #356]	@ (80053c8 <HAL_ADC_Start_DMA+0x188>)
 8005262:	e000      	b.n	8005266 <HAL_ADC_Start_DMA+0x26>
 8005264:	4b59      	ldr	r3, [pc, #356]	@ (80053cc <HAL_ADC_Start_DMA+0x18c>)
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fd4a 	bl	8004d00 <LL_ADC_GetMultimode>
 800526c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fe02 	bl	8004e7c <LL_ADC_REG_IsConversionOngoing>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	f040 809b 	bne.w	80053b6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_ADC_Start_DMA+0x4e>
 800528a:	2302      	movs	r3, #2
 800528c:	e096      	b.n	80053bc <HAL_ADC_Start_DMA+0x17c>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a4d      	ldr	r2, [pc, #308]	@ (80053d0 <HAL_ADC_Start_DMA+0x190>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d008      	beq.n	80052b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b05      	cmp	r3, #5
 80052aa:	d002      	beq.n	80052b2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b09      	cmp	r3, #9
 80052b0:	d17a      	bne.n	80053a8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fcf6 	bl	8005ca4 <ADC_Enable>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d16d      	bne.n	800539e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a3a      	ldr	r2, [pc, #232]	@ (80053c4 <HAL_ADC_Start_DMA+0x184>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d009      	beq.n	80052f4 <HAL_ADC_Start_DMA+0xb4>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3b      	ldr	r2, [pc, #236]	@ (80053d4 <HAL_ADC_Start_DMA+0x194>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d002      	beq.n	80052f0 <HAL_ADC_Start_DMA+0xb0>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	e003      	b.n	80052f8 <HAL_ADC_Start_DMA+0xb8>
 80052f0:	4b39      	ldr	r3, [pc, #228]	@ (80053d8 <HAL_ADC_Start_DMA+0x198>)
 80052f2:	e001      	b.n	80052f8 <HAL_ADC_Start_DMA+0xb8>
 80052f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d002      	beq.n	8005306 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d105      	bne.n	8005312 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005316:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d006      	beq.n	800532c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005322:	f023 0206 	bic.w	r2, r3, #6
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	661a      	str	r2, [r3, #96]	@ 0x60
 800532a:	e002      	b.n	8005332 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005336:	4a29      	ldr	r2, [pc, #164]	@ (80053dc <HAL_ADC_Start_DMA+0x19c>)
 8005338:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533e:	4a28      	ldr	r2, [pc, #160]	@ (80053e0 <HAL_ADC_Start_DMA+0x1a0>)
 8005340:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005346:	4a27      	ldr	r2, [pc, #156]	@ (80053e4 <HAL_ADC_Start_DMA+0x1a4>)
 8005348:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	221c      	movs	r2, #28
 8005350:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0210 	orr.w	r2, r2, #16
 8005368:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3340      	adds	r3, #64	@ 0x40
 8005384:	4619      	mov	r1, r3
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f001 f989 	bl	80066a0 <HAL_DMA_Start_IT>
 800538e:	4603      	mov	r3, r0
 8005390:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fd5c 	bl	8004e54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800539c:	e00d      	b.n	80053ba <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80053a6:	e008      	b.n	80053ba <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80053b4:	e001      	b.n	80053ba <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80053b6:	2302      	movs	r3, #2
 80053b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	50000100 	.word	0x50000100
 80053c8:	50000300 	.word	0x50000300
 80053cc:	50000700 	.word	0x50000700
 80053d0:	50000600 	.word	0x50000600
 80053d4:	50000500 	.word	0x50000500
 80053d8:	50000400 	.word	0x50000400
 80053dc:	08005e8f 	.word	0x08005e8f
 80053e0:	08005f67 	.word	0x08005f67
 80053e4:	08005f83 	.word	0x08005f83

080053e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b0b6      	sub	sp, #216	@ 0xd8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_ADC_ConfigChannel+0x24>
 8005442:	2302      	movs	r3, #2
 8005444:	f000 bc13 	b.w	8005c6e <HAL_ADC_ConfigChannel+0x84a>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fd11 	bl	8004e7c <LL_ADC_REG_IsConversionOngoing>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 83f3 	bne.w	8005c48 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6859      	ldr	r1, [r3, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f7ff fbcb 	bl	8004c0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fcff 	bl	8004e7c <LL_ADC_REG_IsConversionOngoing>
 800547e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fd0b 	bl	8004ea2 <LL_ADC_INJ_IsConversionOngoing>
 800548c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005490:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005494:	2b00      	cmp	r3, #0
 8005496:	f040 81d9 	bne.w	800584c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800549a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f040 81d4 	bne.w	800584c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054ac:	d10f      	bne.n	80054ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2200      	movs	r2, #0
 80054b8:	4619      	mov	r1, r3
 80054ba:	f7ff fbd2 	bl	8004c62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fb79 	bl	8004bbe <LL_ADC_SetSamplingTimeCommonConfig>
 80054cc:	e00e      	b.n	80054ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	461a      	mov	r2, r3
 80054dc:	f7ff fbc1 	bl	8004c62 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fb69 	bl	8004bbe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	08db      	lsrs	r3, r3, #3
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b04      	cmp	r3, #4
 800550c:	d022      	beq.n	8005554 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6919      	ldr	r1, [r3, #16]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800551e:	f7ff fac3 	bl	8004aa8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6919      	ldr	r1, [r3, #16]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	461a      	mov	r2, r3
 8005530:	f7ff fb0f 	bl	8004b52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005540:	2b01      	cmp	r3, #1
 8005542:	d102      	bne.n	800554a <HAL_ADC_ConfigChannel+0x126>
 8005544:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005548:	e000      	b.n	800554c <HAL_ADC_ConfigChannel+0x128>
 800554a:	2300      	movs	r3, #0
 800554c:	461a      	mov	r2, r3
 800554e:	f7ff fb1b 	bl	8004b88 <LL_ADC_SetOffsetSaturation>
 8005552:	e17b      	b.n	800584c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fac8 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 8005560:	4603      	mov	r3, r0
 8005562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x15c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fabd 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 8005576:	4603      	mov	r3, r0
 8005578:	0e9b      	lsrs	r3, r3, #26
 800557a:	f003 021f 	and.w	r2, r3, #31
 800557e:	e01e      	b.n	80055be <HAL_ADC_ConfigChannel+0x19a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2100      	movs	r1, #0
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fab2 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 800558c:	4603      	mov	r3, r0
 800558e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800559e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80055a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80055ae:	2320      	movs	r3, #32
 80055b0:	e004      	b.n	80055bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80055b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x1b2>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	0e9b      	lsrs	r3, r3, #26
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	e018      	b.n	8005608 <HAL_ADC_ConfigChannel+0x1e4>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80055ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80055f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80055fa:	2320      	movs	r3, #32
 80055fc:	e004      	b.n	8005608 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80055fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005602:	fab3 f383 	clz	r3, r3
 8005606:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005608:	429a      	cmp	r2, r3
 800560a:	d106      	bne.n	800561a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2200      	movs	r2, #0
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fa81 	bl	8004b1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2101      	movs	r1, #1
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fa65 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 8005626:	4603      	mov	r3, r0
 8005628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <HAL_ADC_ConfigChannel+0x222>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2101      	movs	r1, #1
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fa5a 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 800563c:	4603      	mov	r3, r0
 800563e:	0e9b      	lsrs	r3, r3, #26
 8005640:	f003 021f 	and.w	r2, r3, #31
 8005644:	e01e      	b.n	8005684 <HAL_ADC_ConfigChannel+0x260>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2101      	movs	r1, #1
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff fa4f 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 8005652:	4603      	mov	r3, r0
 8005654:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800565c:	fa93 f3a3 	rbit	r3, r3
 8005660:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005668:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800566c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005674:	2320      	movs	r3, #32
 8005676:	e004      	b.n	8005682 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800567c:	fab3 f383 	clz	r3, r3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <HAL_ADC_ConfigChannel+0x278>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0e9b      	lsrs	r3, r3, #26
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	e018      	b.n	80056ce <HAL_ADC_ConfigChannel+0x2aa>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056a8:	fa93 f3a3 	rbit	r3, r3
 80056ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80056b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80056b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80056c0:	2320      	movs	r3, #32
 80056c2:	e004      	b.n	80056ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80056c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056c8:	fab3 f383 	clz	r3, r3
 80056cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d106      	bne.n	80056e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	2101      	movs	r1, #1
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff fa1e 	bl	8004b1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2102      	movs	r1, #2
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fa02 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <HAL_ADC_ConfigChannel+0x2e8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2102      	movs	r1, #2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff f9f7 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 8005702:	4603      	mov	r3, r0
 8005704:	0e9b      	lsrs	r3, r3, #26
 8005706:	f003 021f 	and.w	r2, r3, #31
 800570a:	e01e      	b.n	800574a <HAL_ADC_ConfigChannel+0x326>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2102      	movs	r1, #2
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff f9ec 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 8005718:	4603      	mov	r3, r0
 800571a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005722:	fa93 f3a3 	rbit	r3, r3
 8005726:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800572a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800572e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005732:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800573a:	2320      	movs	r3, #32
 800573c:	e004      	b.n	8005748 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800573e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005742:	fab3 f383 	clz	r3, r3
 8005746:	b2db      	uxtb	r3, r3
 8005748:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005752:	2b00      	cmp	r3, #0
 8005754:	d105      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x33e>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	0e9b      	lsrs	r3, r3, #26
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	e016      	b.n	8005790 <HAL_ADC_ConfigChannel+0x36c>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800576e:	fa93 f3a3 	rbit	r3, r3
 8005772:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005774:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800577a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005782:	2320      	movs	r3, #32
 8005784:	e004      	b.n	8005790 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005786:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800578a:	fab3 f383 	clz	r3, r3
 800578e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005790:	429a      	cmp	r2, r3
 8005792:	d106      	bne.n	80057a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2200      	movs	r2, #0
 800579a:	2102      	movs	r1, #2
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff f9bd 	bl	8004b1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2103      	movs	r1, #3
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff f9a1 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <HAL_ADC_ConfigChannel+0x3aa>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2103      	movs	r1, #3
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff f996 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 80057c4:	4603      	mov	r3, r0
 80057c6:	0e9b      	lsrs	r3, r3, #26
 80057c8:	f003 021f 	and.w	r2, r3, #31
 80057cc:	e017      	b.n	80057fe <HAL_ADC_ConfigChannel+0x3da>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2103      	movs	r1, #3
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff f98b 	bl	8004af0 <LL_ADC_GetOffsetChannel>
 80057da:	4603      	mov	r3, r0
 80057dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057e0:	fa93 f3a3 	rbit	r3, r3
 80057e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80057e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80057ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80057f0:	2320      	movs	r3, #32
 80057f2:	e003      	b.n	80057fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80057f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x3f2>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	0e9b      	lsrs	r3, r3, #26
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	e011      	b.n	800583a <HAL_ADC_ConfigChannel+0x416>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800581e:	fa93 f3a3 	rbit	r3, r3
 8005822:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005826:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800582e:	2320      	movs	r3, #32
 8005830:	e003      	b.n	800583a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005834:	fab3 f383 	clz	r3, r3
 8005838:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800583a:	429a      	cmp	r2, r3
 800583c:	d106      	bne.n	800584c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	2103      	movs	r1, #3
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff f968 	bl	8004b1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff fad9 	bl	8004e08 <LL_ADC_IsEnabled>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	f040 813d 	bne.w	8005ad8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6819      	ldr	r1, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	461a      	mov	r2, r3
 800586c:	f7ff fa24 	bl	8004cb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4aa2      	ldr	r2, [pc, #648]	@ (8005b00 <HAL_ADC_ConfigChannel+0x6dc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	f040 812e 	bne.w	8005ad8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10b      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0x480>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	0e9b      	lsrs	r3, r3, #26
 8005892:	3301      	adds	r3, #1
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	2b09      	cmp	r3, #9
 800589a:	bf94      	ite	ls
 800589c:	2301      	movls	r3, #1
 800589e:	2300      	movhi	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e019      	b.n	80058d8 <HAL_ADC_ConfigChannel+0x4b4>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ac:	fa93 f3a3 	rbit	r3, r3
 80058b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80058b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80058b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80058bc:	2320      	movs	r3, #32
 80058be:	e003      	b.n	80058c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80058c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058c2:	fab3 f383 	clz	r3, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	3301      	adds	r3, #1
 80058ca:	f003 031f 	and.w	r3, r3, #31
 80058ce:	2b09      	cmp	r3, #9
 80058d0:	bf94      	ite	ls
 80058d2:	2301      	movls	r3, #1
 80058d4:	2300      	movhi	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d079      	beq.n	80059d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d107      	bne.n	80058f8 <HAL_ADC_ConfigChannel+0x4d4>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	0e9b      	lsrs	r3, r3, #26
 80058ee:	3301      	adds	r3, #1
 80058f0:	069b      	lsls	r3, r3, #26
 80058f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058f6:	e015      	b.n	8005924 <HAL_ADC_ConfigChannel+0x500>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005900:	fa93 f3a3 	rbit	r3, r3
 8005904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005908:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800590a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005910:	2320      	movs	r3, #32
 8005912:	e003      	b.n	800591c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005916:	fab3 f383 	clz	r3, r3
 800591a:	b2db      	uxtb	r3, r3
 800591c:	3301      	adds	r3, #1
 800591e:	069b      	lsls	r3, r3, #26
 8005920:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592c:	2b00      	cmp	r3, #0
 800592e:	d109      	bne.n	8005944 <HAL_ADC_ConfigChannel+0x520>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	0e9b      	lsrs	r3, r3, #26
 8005936:	3301      	adds	r3, #1
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	e017      	b.n	8005974 <HAL_ADC_ConfigChannel+0x550>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800594c:	fa93 f3a3 	rbit	r3, r3
 8005950:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005954:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800595c:	2320      	movs	r3, #32
 800595e:	e003      	b.n	8005968 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005962:	fab3 f383 	clz	r3, r3
 8005966:	b2db      	uxtb	r3, r3
 8005968:	3301      	adds	r3, #1
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	2101      	movs	r1, #1
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	ea42 0103 	orr.w	r1, r2, r3
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <HAL_ADC_ConfigChannel+0x576>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	0e9b      	lsrs	r3, r3, #26
 800598a:	3301      	adds	r3, #1
 800598c:	f003 021f 	and.w	r2, r3, #31
 8005990:	4613      	mov	r3, r2
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	4413      	add	r3, r2
 8005996:	051b      	lsls	r3, r3, #20
 8005998:	e018      	b.n	80059cc <HAL_ADC_ConfigChannel+0x5a8>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a2:	fa93 f3a3 	rbit	r3, r3
 80059a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80059a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80059ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80059b2:	2320      	movs	r3, #32
 80059b4:	e003      	b.n	80059be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80059b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b8:	fab3 f383 	clz	r3, r3
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	3301      	adds	r3, #1
 80059c0:	f003 021f 	and.w	r2, r3, #31
 80059c4:	4613      	mov	r3, r2
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	4413      	add	r3, r2
 80059ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059cc:	430b      	orrs	r3, r1
 80059ce:	e07e      	b.n	8005ace <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d107      	bne.n	80059ec <HAL_ADC_ConfigChannel+0x5c8>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	0e9b      	lsrs	r3, r3, #26
 80059e2:	3301      	adds	r3, #1
 80059e4:	069b      	lsls	r3, r3, #26
 80059e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059ea:	e015      	b.n	8005a18 <HAL_ADC_ConfigChannel+0x5f4>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	fa93 f3a3 	rbit	r3, r3
 80059f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005a04:	2320      	movs	r3, #32
 8005a06:	e003      	b.n	8005a10 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	fab3 f383 	clz	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	3301      	adds	r3, #1
 8005a12:	069b      	lsls	r3, r3, #26
 8005a14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <HAL_ADC_ConfigChannel+0x614>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	0e9b      	lsrs	r3, r3, #26
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	e017      	b.n	8005a68 <HAL_ADC_ConfigChannel+0x644>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	fa93 f3a3 	rbit	r3, r3
 8005a44:	61fb      	str	r3, [r7, #28]
  return result;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005a50:	2320      	movs	r3, #32
 8005a52:	e003      	b.n	8005a5c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	fab3 f383 	clz	r3, r3
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	2101      	movs	r1, #1
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	ea42 0103 	orr.w	r1, r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10d      	bne.n	8005a94 <HAL_ADC_ConfigChannel+0x670>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	0e9b      	lsrs	r3, r3, #26
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f003 021f 	and.w	r2, r3, #31
 8005a84:	4613      	mov	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	3b1e      	subs	r3, #30
 8005a8c:	051b      	lsls	r3, r3, #20
 8005a8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a92:	e01b      	b.n	8005acc <HAL_ADC_ConfigChannel+0x6a8>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	fa93 f3a3 	rbit	r3, r3
 8005aa0:	613b      	str	r3, [r7, #16]
  return result;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005aac:	2320      	movs	r3, #32
 8005aae:	e003      	b.n	8005ab8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	fab3 f383 	clz	r3, r3
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	3301      	adds	r3, #1
 8005aba:	f003 021f 	and.w	r2, r3, #31
 8005abe:	4613      	mov	r3, r2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3b1e      	subs	r3, #30
 8005ac6:	051b      	lsls	r3, r3, #20
 8005ac8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005acc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f7ff f8c5 	bl	8004c62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	4b09      	ldr	r3, [pc, #36]	@ (8005b04 <HAL_ADC_ConfigChannel+0x6e0>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80be 	beq.w	8005c62 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aee:	d004      	beq.n	8005afa <HAL_ADC_ConfigChannel+0x6d6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a04      	ldr	r2, [pc, #16]	@ (8005b08 <HAL_ADC_ConfigChannel+0x6e4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d10a      	bne.n	8005b10 <HAL_ADC_ConfigChannel+0x6ec>
 8005afa:	4b04      	ldr	r3, [pc, #16]	@ (8005b0c <HAL_ADC_ConfigChannel+0x6e8>)
 8005afc:	e009      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x6ee>
 8005afe:	bf00      	nop
 8005b00:	407f0000 	.word	0x407f0000
 8005b04:	80080000 	.word	0x80080000
 8005b08:	50000100 	.word	0x50000100
 8005b0c:	50000300 	.word	0x50000300
 8005b10:	4b59      	ldr	r3, [pc, #356]	@ (8005c78 <HAL_ADC_ConfigChannel+0x854>)
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe ffba 	bl	8004a8c <LL_ADC_GetCommonPathInternalCh>
 8005b18:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a56      	ldr	r2, [pc, #344]	@ (8005c7c <HAL_ADC_ConfigChannel+0x858>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d004      	beq.n	8005b30 <HAL_ADC_ConfigChannel+0x70c>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a55      	ldr	r2, [pc, #340]	@ (8005c80 <HAL_ADC_ConfigChannel+0x85c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d13a      	bne.n	8005ba6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d134      	bne.n	8005ba6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b44:	d005      	beq.n	8005b52 <HAL_ADC_ConfigChannel+0x72e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8005c84 <HAL_ADC_ConfigChannel+0x860>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	f040 8085 	bne.w	8005c5c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b5a:	d004      	beq.n	8005b66 <HAL_ADC_ConfigChannel+0x742>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a49      	ldr	r2, [pc, #292]	@ (8005c88 <HAL_ADC_ConfigChannel+0x864>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d101      	bne.n	8005b6a <HAL_ADC_ConfigChannel+0x746>
 8005b66:	4a49      	ldr	r2, [pc, #292]	@ (8005c8c <HAL_ADC_ConfigChannel+0x868>)
 8005b68:	e000      	b.n	8005b6c <HAL_ADC_ConfigChannel+0x748>
 8005b6a:	4a43      	ldr	r2, [pc, #268]	@ (8005c78 <HAL_ADC_ConfigChannel+0x854>)
 8005b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f7fe ff75 	bl	8004a66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b7c:	4b44      	ldr	r3, [pc, #272]	@ (8005c90 <HAL_ADC_ConfigChannel+0x86c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	099b      	lsrs	r3, r3, #6
 8005b82:	4a44      	ldr	r2, [pc, #272]	@ (8005c94 <HAL_ADC_ConfigChannel+0x870>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	099b      	lsrs	r3, r3, #6
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b96:	e002      	b.n	8005b9e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f9      	bne.n	8005b98 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ba4:	e05a      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a3b      	ldr	r2, [pc, #236]	@ (8005c98 <HAL_ADC_ConfigChannel+0x874>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d125      	bne.n	8005bfc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d11f      	bne.n	8005bfc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a31      	ldr	r2, [pc, #196]	@ (8005c88 <HAL_ADC_ConfigChannel+0x864>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d104      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x7ac>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a34      	ldr	r2, [pc, #208]	@ (8005c9c <HAL_ADC_ConfigChannel+0x878>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d047      	beq.n	8005c60 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bd8:	d004      	beq.n	8005be4 <HAL_ADC_ConfigChannel+0x7c0>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a2a      	ldr	r2, [pc, #168]	@ (8005c88 <HAL_ADC_ConfigChannel+0x864>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d101      	bne.n	8005be8 <HAL_ADC_ConfigChannel+0x7c4>
 8005be4:	4a29      	ldr	r2, [pc, #164]	@ (8005c8c <HAL_ADC_ConfigChannel+0x868>)
 8005be6:	e000      	b.n	8005bea <HAL_ADC_ConfigChannel+0x7c6>
 8005be8:	4a23      	ldr	r2, [pc, #140]	@ (8005c78 <HAL_ADC_ConfigChannel+0x854>)
 8005bea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f7fe ff36 	bl	8004a66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bfa:	e031      	b.n	8005c60 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a27      	ldr	r2, [pc, #156]	@ (8005ca0 <HAL_ADC_ConfigChannel+0x87c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d12d      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d127      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1c      	ldr	r2, [pc, #112]	@ (8005c88 <HAL_ADC_ConfigChannel+0x864>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d022      	beq.n	8005c62 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c24:	d004      	beq.n	8005c30 <HAL_ADC_ConfigChannel+0x80c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	@ (8005c88 <HAL_ADC_ConfigChannel+0x864>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d101      	bne.n	8005c34 <HAL_ADC_ConfigChannel+0x810>
 8005c30:	4a16      	ldr	r2, [pc, #88]	@ (8005c8c <HAL_ADC_ConfigChannel+0x868>)
 8005c32:	e000      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x812>
 8005c34:	4a10      	ldr	r2, [pc, #64]	@ (8005c78 <HAL_ADC_ConfigChannel+0x854>)
 8005c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f7fe ff10 	bl	8004a66 <LL_ADC_SetCommonPathInternalCh>
 8005c46:	e00c      	b.n	8005c62 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4c:	f043 0220 	orr.w	r2, r3, #32
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005c5a:	e002      	b.n	8005c62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c5c:	bf00      	nop
 8005c5e:	e000      	b.n	8005c62 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	37d8      	adds	r7, #216	@ 0xd8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	50000700 	.word	0x50000700
 8005c7c:	c3210000 	.word	0xc3210000
 8005c80:	90c00010 	.word	0x90c00010
 8005c84:	50000600 	.word	0x50000600
 8005c88:	50000100 	.word	0x50000100
 8005c8c:	50000300 	.word	0x50000300
 8005c90:	20000218 	.word	0x20000218
 8005c94:	053e2d63 	.word	0x053e2d63
 8005c98:	c7520000 	.word	0xc7520000
 8005c9c:	50000500 	.word	0x50000500
 8005ca0:	cb840000 	.word	0xcb840000

08005ca4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff f8a7 	bl	8004e08 <LL_ADC_IsEnabled>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d176      	bne.n	8005dae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8005db8 <ADC_Enable+0x114>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd2:	f043 0210 	orr.w	r2, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cde:	f043 0201 	orr.w	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e062      	b.n	8005db0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff f862 	bl	8004db8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cfc:	d004      	beq.n	8005d08 <ADC_Enable+0x64>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2e      	ldr	r2, [pc, #184]	@ (8005dbc <ADC_Enable+0x118>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d101      	bne.n	8005d0c <ADC_Enable+0x68>
 8005d08:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc0 <ADC_Enable+0x11c>)
 8005d0a:	e000      	b.n	8005d0e <ADC_Enable+0x6a>
 8005d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc4 <ADC_Enable+0x120>)
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe febc 	bl	8004a8c <LL_ADC_GetCommonPathInternalCh>
 8005d14:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d013      	beq.n	8005d46 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc8 <ADC_Enable+0x124>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	099b      	lsrs	r3, r3, #6
 8005d24:	4a29      	ldr	r2, [pc, #164]	@ (8005dcc <ADC_Enable+0x128>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	099b      	lsrs	r3, r3, #6
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	4613      	mov	r3, r2
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005d38:	e002      	b.n	8005d40 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f9      	bne.n	8005d3a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005d46:	f7fe fe6f 	bl	8004a28 <HAL_GetTick>
 8005d4a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d4c:	e028      	b.n	8005da0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff f858 	bl	8004e08 <LL_ADC_IsEnabled>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff f828 	bl	8004db8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d68:	f7fe fe5e 	bl	8004a28 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d914      	bls.n	8005da0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d00d      	beq.n	8005da0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d88:	f043 0210 	orr.w	r2, r3, #16
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d94:	f043 0201 	orr.w	r2, r3, #1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e007      	b.n	8005db0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d1cf      	bne.n	8005d4e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	8000003f 	.word	0x8000003f
 8005dbc:	50000100 	.word	0x50000100
 8005dc0:	50000300 	.word	0x50000300
 8005dc4:	50000700 	.word	0x50000700
 8005dc8:	20000218 	.word	0x20000218
 8005dcc:	053e2d63 	.word	0x053e2d63

08005dd0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff f826 	bl	8004e2e <LL_ADC_IsDisableOngoing>
 8005de2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff f80d 	bl	8004e08 <LL_ADC_IsEnabled>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d047      	beq.n	8005e84 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d144      	bne.n	8005e84 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 030d 	and.w	r3, r3, #13
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10c      	bne.n	8005e22 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe ffe7 	bl	8004de0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2203      	movs	r2, #3
 8005e18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e1a:	f7fe fe05 	bl	8004a28 <HAL_GetTick>
 8005e1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e20:	e029      	b.n	8005e76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e26:	f043 0210 	orr.w	r2, r3, #16
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e32:	f043 0201 	orr.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e023      	b.n	8005e86 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005e3e:	f7fe fdf3 	bl	8004a28 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d914      	bls.n	8005e76 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00d      	beq.n	8005e76 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e5e:	f043 0210 	orr.w	r2, r3, #16
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e6a:	f043 0201 	orr.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e007      	b.n	8005e86 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1dc      	bne.n	8005e3e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d14b      	bne.n	8005f40 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d021      	beq.n	8005f06 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fe8c 	bl	8004be4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d032      	beq.n	8005f38 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d12b      	bne.n	8005f38 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11f      	bne.n	8005f38 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efc:	f043 0201 	orr.w	r2, r3, #1
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f04:	e018      	b.n	8005f38 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d111      	bne.n	8005f38 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f30:	f043 0201 	orr.w	r2, r3, #1
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff fa55 	bl	80053e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005f3e:	e00e      	b.n	8005f5e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7ff fa5f 	bl	8005410 <HAL_ADC_ErrorCallback>
}
 8005f52:	e004      	b.n	8005f5e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fa41 	bl	80053fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa0:	f043 0204 	orr.w	r2, r3, #4
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fa31 	bl	8005410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <LL_ADC_IsEnabled>:
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <LL_ADC_IsEnabled+0x18>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e000      	b.n	8005fd0 <LL_ADC_IsEnabled+0x1a>
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <LL_ADC_StartCalibration>:
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005fee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	609a      	str	r2, [r3, #8]
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <LL_ADC_IsCalibrationOnGoing>:
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800601e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006022:	d101      	bne.n	8006028 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <LL_ADC_REG_IsConversionOngoing>:
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b04      	cmp	r3, #4
 8006048:	d101      	bne.n	800604e <LL_ADC_REG_IsConversionOngoing+0x18>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_ADCEx_Calibration_Start+0x1c>
 8006074:	2302      	movs	r3, #2
 8006076:	e04d      	b.n	8006114 <HAL_ADCEx_Calibration_Start+0xb8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff fea5 	bl	8005dd0 <ADC_Disable>
 8006086:	4603      	mov	r3, r0
 8006088:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d136      	bne.n	80060fe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006094:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006098:	f023 0302 	bic.w	r3, r3, #2
 800609c:	f043 0202 	orr.w	r2, r3, #2
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff ff96 	bl	8005fdc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80060b0:	e014      	b.n	80060dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	3301      	adds	r3, #1
 80060b6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4a18      	ldr	r2, [pc, #96]	@ (800611c <HAL_ADCEx_Calibration_Start+0xc0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d90d      	bls.n	80060dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c4:	f023 0312 	bic.w	r3, r3, #18
 80060c8:	f043 0210 	orr.w	r2, r3, #16
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e01b      	b.n	8006114 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff ff94 	bl	800600e <LL_ADC_IsCalibrationOnGoing>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e2      	bne.n	80060b2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f0:	f023 0303 	bic.w	r3, r3, #3
 80060f4:	f043 0201 	orr.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80060fc:	e005      	b.n	800610a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006102:	f043 0210 	orr.w	r2, r3, #16
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	0004de01 	.word	0x0004de01

08006120 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b0a1      	sub	sp, #132	@ 0x84
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800613a:	2302      	movs	r3, #2
 800613c:	e0e7      	b.n	800630e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006146:	2300      	movs	r3, #0
 8006148:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800614a:	2300      	movs	r3, #0
 800614c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006156:	d102      	bne.n	800615e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006158:	4b6f      	ldr	r3, [pc, #444]	@ (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800615a:	60bb      	str	r3, [r7, #8]
 800615c:	e009      	b.n	8006172 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a6e      	ldr	r2, [pc, #440]	@ (800631c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d102      	bne.n	800616e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006168:	4b6d      	ldr	r3, [pc, #436]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	e001      	b.n	8006172 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0be      	b.n	800630e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff ff4f 	bl	8006036 <LL_ADC_REG_IsConversionOngoing>
 8006198:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff ff49 	bl	8006036 <LL_ADC_REG_IsConversionOngoing>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 80a0 	bne.w	80062ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80061ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f040 809c 	bne.w	80062ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061bc:	d004      	beq.n	80061c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a55      	ldr	r2, [pc, #340]	@ (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80061c8:	4b56      	ldr	r3, [pc, #344]	@ (8006324 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80061ca:	e000      	b.n	80061ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80061cc:	4b56      	ldr	r3, [pc, #344]	@ (8006328 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80061ce:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d04b      	beq.n	8006270 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80061d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6859      	ldr	r1, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80061ea:	035b      	lsls	r3, r3, #13
 80061ec:	430b      	orrs	r3, r1
 80061ee:	431a      	orrs	r2, r3
 80061f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061fc:	d004      	beq.n	8006208 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a45      	ldr	r2, [pc, #276]	@ (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d10f      	bne.n	8006228 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006208:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800620c:	f7ff fed3 	bl	8005fb6 <LL_ADC_IsEnabled>
 8006210:	4604      	mov	r4, r0
 8006212:	4841      	ldr	r0, [pc, #260]	@ (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006214:	f7ff fecf 	bl	8005fb6 <LL_ADC_IsEnabled>
 8006218:	4603      	mov	r3, r0
 800621a:	4323      	orrs	r3, r4
 800621c:	2b00      	cmp	r3, #0
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	e012      	b.n	800624e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006228:	483c      	ldr	r0, [pc, #240]	@ (800631c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800622a:	f7ff fec4 	bl	8005fb6 <LL_ADC_IsEnabled>
 800622e:	4604      	mov	r4, r0
 8006230:	483b      	ldr	r0, [pc, #236]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006232:	f7ff fec0 	bl	8005fb6 <LL_ADC_IsEnabled>
 8006236:	4603      	mov	r3, r0
 8006238:	431c      	orrs	r4, r3
 800623a:	483c      	ldr	r0, [pc, #240]	@ (800632c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800623c:	f7ff febb 	bl	8005fb6 <LL_ADC_IsEnabled>
 8006240:	4603      	mov	r3, r0
 8006242:	4323      	orrs	r3, r4
 8006244:	2b00      	cmp	r3, #0
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d056      	beq.n	8006300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800625a:	f023 030f 	bic.w	r3, r3, #15
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	6811      	ldr	r1, [r2, #0]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	6892      	ldr	r2, [r2, #8]
 8006266:	430a      	orrs	r2, r1
 8006268:	431a      	orrs	r2, r3
 800626a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800626c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800626e:	e047      	b.n	8006300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006270:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800627a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006284:	d004      	beq.n	8006290 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a23      	ldr	r2, [pc, #140]	@ (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d10f      	bne.n	80062b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006290:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006294:	f7ff fe8f 	bl	8005fb6 <LL_ADC_IsEnabled>
 8006298:	4604      	mov	r4, r0
 800629a:	481f      	ldr	r0, [pc, #124]	@ (8006318 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800629c:	f7ff fe8b 	bl	8005fb6 <LL_ADC_IsEnabled>
 80062a0:	4603      	mov	r3, r0
 80062a2:	4323      	orrs	r3, r4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bf0c      	ite	eq
 80062a8:	2301      	moveq	r3, #1
 80062aa:	2300      	movne	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	e012      	b.n	80062d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80062b0:	481a      	ldr	r0, [pc, #104]	@ (800631c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80062b2:	f7ff fe80 	bl	8005fb6 <LL_ADC_IsEnabled>
 80062b6:	4604      	mov	r4, r0
 80062b8:	4819      	ldr	r0, [pc, #100]	@ (8006320 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80062ba:	f7ff fe7c 	bl	8005fb6 <LL_ADC_IsEnabled>
 80062be:	4603      	mov	r3, r0
 80062c0:	431c      	orrs	r4, r3
 80062c2:	481a      	ldr	r0, [pc, #104]	@ (800632c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80062c4:	f7ff fe77 	bl	8005fb6 <LL_ADC_IsEnabled>
 80062c8:	4603      	mov	r3, r0
 80062ca:	4323      	orrs	r3, r4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d012      	beq.n	8006300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80062e2:	f023 030f 	bic.w	r3, r3, #15
 80062e6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80062e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80062ea:	e009      	b.n	8006300 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80062fe:	e000      	b.n	8006302 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006300:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800630a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800630e:	4618      	mov	r0, r3
 8006310:	3784      	adds	r7, #132	@ 0x84
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	bf00      	nop
 8006318:	50000100 	.word	0x50000100
 800631c:	50000400 	.word	0x50000400
 8006320:	50000500 	.word	0x50000500
 8006324:	50000300 	.word	0x50000300
 8006328:	50000700 	.word	0x50000700
 800632c:	50000600 	.word	0x50000600

08006330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006340:	4b0c      	ldr	r3, [pc, #48]	@ (8006374 <__NVIC_SetPriorityGrouping+0x44>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800634c:	4013      	ands	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800635c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006362:	4a04      	ldr	r2, [pc, #16]	@ (8006374 <__NVIC_SetPriorityGrouping+0x44>)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	60d3      	str	r3, [r2, #12]
}
 8006368:	bf00      	nop
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	e000ed00 	.word	0xe000ed00

08006378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800637c:	4b04      	ldr	r3, [pc, #16]	@ (8006390 <__NVIC_GetPriorityGrouping+0x18>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	f003 0307 	and.w	r3, r3, #7
}
 8006386:	4618      	mov	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	e000ed00 	.word	0xe000ed00

08006394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800639e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	db0b      	blt.n	80063be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	f003 021f 	and.w	r2, r3, #31
 80063ac:	4907      	ldr	r1, [pc, #28]	@ (80063cc <__NVIC_EnableIRQ+0x38>)
 80063ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	2001      	movs	r0, #1
 80063b6:	fa00 f202 	lsl.w	r2, r0, r2
 80063ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	e000e100 	.word	0xe000e100

080063d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	6039      	str	r1, [r7, #0]
 80063da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	db0a      	blt.n	80063fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	490c      	ldr	r1, [pc, #48]	@ (800641c <__NVIC_SetPriority+0x4c>)
 80063ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ee:	0112      	lsls	r2, r2, #4
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	440b      	add	r3, r1
 80063f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063f8:	e00a      	b.n	8006410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	4908      	ldr	r1, [pc, #32]	@ (8006420 <__NVIC_SetPriority+0x50>)
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	3b04      	subs	r3, #4
 8006408:	0112      	lsls	r2, r2, #4
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	440b      	add	r3, r1
 800640e:	761a      	strb	r2, [r3, #24]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	e000e100 	.word	0xe000e100
 8006420:	e000ed00 	.word	0xe000ed00

08006424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	@ 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f1c3 0307 	rsb	r3, r3, #7
 800643e:	2b04      	cmp	r3, #4
 8006440:	bf28      	it	cs
 8006442:	2304      	movcs	r3, #4
 8006444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3304      	adds	r3, #4
 800644a:	2b06      	cmp	r3, #6
 800644c:	d902      	bls.n	8006454 <NVIC_EncodePriority+0x30>
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	3b03      	subs	r3, #3
 8006452:	e000      	b.n	8006456 <NVIC_EncodePriority+0x32>
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006458:	f04f 32ff 	mov.w	r2, #4294967295
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43da      	mvns	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	401a      	ands	r2, r3
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800646c:	f04f 31ff 	mov.w	r1, #4294967295
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	fa01 f303 	lsl.w	r3, r1, r3
 8006476:	43d9      	mvns	r1, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800647c:	4313      	orrs	r3, r2
         );
}
 800647e:	4618      	mov	r0, r3
 8006480:	3724      	adds	r7, #36	@ 0x24
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3b01      	subs	r3, #1
 8006498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800649c:	d301      	bcc.n	80064a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800649e:	2301      	movs	r3, #1
 80064a0:	e00f      	b.n	80064c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064a2:	4a0a      	ldr	r2, [pc, #40]	@ (80064cc <SysTick_Config+0x40>)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064aa:	210f      	movs	r1, #15
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295
 80064b0:	f7ff ff8e 	bl	80063d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <SysTick_Config+0x40>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064ba:	4b04      	ldr	r3, [pc, #16]	@ (80064cc <SysTick_Config+0x40>)
 80064bc:	2207      	movs	r2, #7
 80064be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	e000e010 	.word	0xe000e010

080064d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ff29 	bl	8006330 <__NVIC_SetPriorityGrouping>
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	4603      	mov	r3, r0
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064f4:	f7ff ff40 	bl	8006378 <__NVIC_GetPriorityGrouping>
 80064f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	6978      	ldr	r0, [r7, #20]
 8006500:	f7ff ff90 	bl	8006424 <NVIC_EncodePriority>
 8006504:	4602      	mov	r2, r0
 8006506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff5f 	bl	80063d0 <__NVIC_SetPriority>
}
 8006512:	bf00      	nop
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	4603      	mov	r3, r0
 8006522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff ff33 	bl	8006394 <__NVIC_EnableIRQ>
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ffa4 	bl	800648c <SysTick_Config>
 8006544:	4603      	mov	r3, r0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e08d      	b.n	800667e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	4b47      	ldr	r3, [pc, #284]	@ (8006688 <HAL_DMA_Init+0x138>)
 800656a:	429a      	cmp	r2, r3
 800656c:	d80f      	bhi.n	800658e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	4b45      	ldr	r3, [pc, #276]	@ (800668c <HAL_DMA_Init+0x13c>)
 8006576:	4413      	add	r3, r2
 8006578:	4a45      	ldr	r2, [pc, #276]	@ (8006690 <HAL_DMA_Init+0x140>)
 800657a:	fba2 2303 	umull	r2, r3, r2, r3
 800657e:	091b      	lsrs	r3, r3, #4
 8006580:	009a      	lsls	r2, r3, #2
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a42      	ldr	r2, [pc, #264]	@ (8006694 <HAL_DMA_Init+0x144>)
 800658a:	641a      	str	r2, [r3, #64]	@ 0x40
 800658c:	e00e      	b.n	80065ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	4b40      	ldr	r3, [pc, #256]	@ (8006698 <HAL_DMA_Init+0x148>)
 8006596:	4413      	add	r3, r2
 8006598:	4a3d      	ldr	r2, [pc, #244]	@ (8006690 <HAL_DMA_Init+0x140>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	091b      	lsrs	r3, r3, #4
 80065a0:	009a      	lsls	r2, r3, #2
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a3c      	ldr	r2, [pc, #240]	@ (800669c <HAL_DMA_Init+0x14c>)
 80065aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80065c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80065d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa76 	bl	8006af0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800660c:	d102      	bne.n	8006614 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006628:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d010      	beq.n	8006654 <HAL_DMA_Init+0x104>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b04      	cmp	r3, #4
 8006638:	d80c      	bhi.n	8006654 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa96 	bl	8006b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	e008      	b.n	8006666 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40020407 	.word	0x40020407
 800668c:	bffdfff8 	.word	0xbffdfff8
 8006690:	cccccccd 	.word	0xcccccccd
 8006694:	40020000 	.word	0x40020000
 8006698:	bffdfbf8 	.word	0xbffdfbf8
 800669c:	40020400 	.word	0x40020400

080066a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_DMA_Start_IT+0x20>
 80066bc:	2302      	movs	r3, #2
 80066be:	e066      	b.n	800678e <HAL_DMA_Start_IT+0xee>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d155      	bne.n	8006780 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0201 	bic.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f9bb 	bl	8006a74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 020e 	orr.w	r2, r2, #14
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	e00f      	b.n	8006738 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0204 	bic.w	r2, r2, #4
 8006726:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 020a 	orr.w	r2, r2, #10
 8006736:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006754:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800676c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0201 	orr.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e005      	b.n	800678c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006788:	2302      	movs	r3, #2
 800678a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d005      	beq.n	80067ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2204      	movs	r2, #4
 80067b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
 80067b8:	e037      	b.n	800682a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 020e 	bic.w	r2, r2, #14
 80067c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ee:	f003 021f 	and.w	r2, r3, #31
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	2101      	movs	r1, #1
 80067f8:	fa01 f202 	lsl.w	r2, r1, r2
 80067fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006806:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800681e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006828:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d00d      	beq.n	800687c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2204      	movs	r2, #4
 8006864:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	73fb      	strb	r3, [r7, #15]
 800687a:	e047      	b.n	800690c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 020e 	bic.w	r2, r2, #14
 800688a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0201 	bic.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b0:	f003 021f 	and.w	r2, r3, #31
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	2101      	movs	r1, #1
 80068ba:	fa01 f202 	lsl.w	r2, r1, r2
 80068be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80068c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80068ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
    }
  }
  return status;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	2204      	movs	r2, #4
 8006938:	409a      	lsls	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4013      	ands	r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d026      	beq.n	8006990 <HAL_DMA_IRQHandler+0x7a>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d021      	beq.n	8006990 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 0204 	bic.w	r2, r2, #4
 8006968:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696e:	f003 021f 	and.w	r2, r3, #31
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	2104      	movs	r1, #4
 8006978:	fa01 f202 	lsl.w	r2, r1, r2
 800697c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	2b00      	cmp	r3, #0
 8006984:	d071      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800698e:	e06c      	b.n	8006a6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	2202      	movs	r2, #2
 800699a:	409a      	lsls	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4013      	ands	r3, r2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d02e      	beq.n	8006a02 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d029      	beq.n	8006a02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 020a 	bic.w	r2, r2, #10
 80069ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d8:	f003 021f 	and.w	r2, r3, #31
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e0:	2102      	movs	r1, #2
 80069e2:	fa01 f202 	lsl.w	r2, r1, r2
 80069e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d038      	beq.n	8006a6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006a00:	e033      	b.n	8006a6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	409a      	lsls	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4013      	ands	r3, r2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d02a      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d025      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 020e 	bic.w	r2, r2, #14
 8006a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a34:	f003 021f 	and.w	r2, r3, #31
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006a42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
}
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006a9c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	f003 021f 	and.w	r2, r3, #31
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aaa:	2101      	movs	r1, #1
 8006aac:	fa01 f202 	lsl.w	r2, r1, r2
 8006ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	d108      	bne.n	8006ad4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ad2:	e007      	b.n	8006ae4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	60da      	str	r2, [r3, #12]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	4b16      	ldr	r3, [pc, #88]	@ (8006b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d802      	bhi.n	8006b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006b04:	4b15      	ldr	r3, [pc, #84]	@ (8006b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	e001      	b.n	8006b0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006b0a:	4b15      	ldr	r3, [pc, #84]	@ (8006b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006b0c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	3b08      	subs	r3, #8
 8006b1a:	4a12      	ldr	r2, [pc, #72]	@ (8006b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b20:	091b      	lsrs	r3, r3, #4
 8006b22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b28:	089b      	lsrs	r3, r3, #2
 8006b2a:	009a      	lsls	r2, r3, #2
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	4413      	add	r3, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a0b      	ldr	r2, [pc, #44]	@ (8006b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2201      	movs	r2, #1
 8006b44:	409a      	lsls	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	40020407 	.word	0x40020407
 8006b5c:	40020800 	.word	0x40020800
 8006b60:	40020820 	.word	0x40020820
 8006b64:	cccccccd 	.word	0xcccccccd
 8006b68:	40020880 	.word	0x40020880

08006b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	461a      	mov	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a08      	ldr	r2, [pc, #32]	@ (8006bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006b8e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	2201      	movs	r2, #1
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006ba0:	bf00      	nop
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	1000823f 	.word	0x1000823f
 8006bb0:	40020940 	.word	0x40020940

08006bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bc2:	e15a      	b.n	8006e7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	2101      	movs	r1, #1
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 814c 	beq.w	8006e74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d005      	beq.n	8006bf4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d130      	bne.n	8006c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	2203      	movs	r2, #3
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	43db      	mvns	r3, r3
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	fa02 f303 	lsl.w	r3, r2, r3
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	43db      	mvns	r3, r3
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4013      	ands	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	091b      	lsrs	r3, r3, #4
 8006c40:	f003 0201 	and.w	r2, r3, #1
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d017      	beq.n	8006c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	2203      	movs	r2, #3
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	43db      	mvns	r3, r3
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4013      	ands	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	fa02 f303 	lsl.w	r3, r2, r3
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d123      	bne.n	8006ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	08da      	lsrs	r2, r3, #3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3208      	adds	r2, #8
 8006ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	220f      	movs	r2, #15
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	08da      	lsrs	r2, r3, #3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3208      	adds	r2, #8
 8006ce0:	6939      	ldr	r1, [r7, #16]
 8006ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f003 0203 	and.w	r2, r3, #3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80a6 	beq.w	8006e74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d28:	4b5b      	ldr	r3, [pc, #364]	@ (8006e98 <HAL_GPIO_Init+0x2e4>)
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8006e98 <HAL_GPIO_Init+0x2e4>)
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	6613      	str	r3, [r2, #96]	@ 0x60
 8006d34:	4b58      	ldr	r3, [pc, #352]	@ (8006e98 <HAL_GPIO_Init+0x2e4>)
 8006d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d40:	4a56      	ldr	r2, [pc, #344]	@ (8006e9c <HAL_GPIO_Init+0x2e8>)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	089b      	lsrs	r3, r3, #2
 8006d46:	3302      	adds	r3, #2
 8006d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	220f      	movs	r2, #15
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4013      	ands	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006d6a:	d01f      	beq.n	8006dac <HAL_GPIO_Init+0x1f8>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a4c      	ldr	r2, [pc, #304]	@ (8006ea0 <HAL_GPIO_Init+0x2ec>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d019      	beq.n	8006da8 <HAL_GPIO_Init+0x1f4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a4b      	ldr	r2, [pc, #300]	@ (8006ea4 <HAL_GPIO_Init+0x2f0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d013      	beq.n	8006da4 <HAL_GPIO_Init+0x1f0>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8006ea8 <HAL_GPIO_Init+0x2f4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d00d      	beq.n	8006da0 <HAL_GPIO_Init+0x1ec>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a49      	ldr	r2, [pc, #292]	@ (8006eac <HAL_GPIO_Init+0x2f8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d007      	beq.n	8006d9c <HAL_GPIO_Init+0x1e8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a48      	ldr	r2, [pc, #288]	@ (8006eb0 <HAL_GPIO_Init+0x2fc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d101      	bne.n	8006d98 <HAL_GPIO_Init+0x1e4>
 8006d94:	2305      	movs	r3, #5
 8006d96:	e00a      	b.n	8006dae <HAL_GPIO_Init+0x1fa>
 8006d98:	2306      	movs	r3, #6
 8006d9a:	e008      	b.n	8006dae <HAL_GPIO_Init+0x1fa>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	e006      	b.n	8006dae <HAL_GPIO_Init+0x1fa>
 8006da0:	2303      	movs	r3, #3
 8006da2:	e004      	b.n	8006dae <HAL_GPIO_Init+0x1fa>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e002      	b.n	8006dae <HAL_GPIO_Init+0x1fa>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <HAL_GPIO_Init+0x1fa>
 8006dac:	2300      	movs	r3, #0
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	f002 0203 	and.w	r2, r2, #3
 8006db4:	0092      	lsls	r2, r2, #2
 8006db6:	4093      	lsls	r3, r2
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dbe:	4937      	ldr	r1, [pc, #220]	@ (8006e9c <HAL_GPIO_Init+0x2e8>)
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	089b      	lsrs	r3, r3, #2
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006dcc:	4b39      	ldr	r3, [pc, #228]	@ (8006eb4 <HAL_GPIO_Init+0x300>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006df0:	4a30      	ldr	r2, [pc, #192]	@ (8006eb4 <HAL_GPIO_Init+0x300>)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006df6:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb4 <HAL_GPIO_Init+0x300>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	43db      	mvns	r3, r3
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	4013      	ands	r3, r2
 8006e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e1a:	4a26      	ldr	r2, [pc, #152]	@ (8006eb4 <HAL_GPIO_Init+0x300>)
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006e20:	4b24      	ldr	r3, [pc, #144]	@ (8006eb4 <HAL_GPIO_Init+0x300>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e44:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb4 <HAL_GPIO_Init+0x300>)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb4 <HAL_GPIO_Init+0x300>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	43db      	mvns	r3, r3
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4013      	ands	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e6e:	4a11      	ldr	r2, [pc, #68]	@ (8006eb4 <HAL_GPIO_Init+0x300>)
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	3301      	adds	r3, #1
 8006e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f47f ae9d 	bne.w	8006bc4 <HAL_GPIO_Init+0x10>
  }
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	48000400 	.word	0x48000400
 8006ea4:	48000800 	.word	0x48000800
 8006ea8:	48000c00 	.word	0x48000c00
 8006eac:	48001000 	.word	0x48001000
 8006eb0:	48001400 	.word	0x48001400
 8006eb4:	40010400 	.word	0x40010400

08006eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	887b      	ldrh	r3, [r7, #2]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	73fb      	strb	r3, [r7, #15]
 8006ed4:	e001      	b.n	8006eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	807b      	strh	r3, [r7, #2]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ef8:	787b      	ldrb	r3, [r7, #1]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006efe:	887a      	ldrh	r2, [r7, #2]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f04:	e002      	b.n	8006f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f06:	887a      	ldrh	r2, [r7, #2]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f2a:	887a      	ldrh	r2, [r7, #2]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	041a      	lsls	r2, r3, #16
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	43d9      	mvns	r1, r3
 8006f36:	887b      	ldrh	r3, [r7, #2]
 8006f38:	400b      	ands	r3, r1
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	619a      	str	r2, [r3, #24]
}
 8006f40:	bf00      	nop
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	4603      	mov	r3, r0
 8006f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f56:	4b08      	ldr	r3, [pc, #32]	@ (8006f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f58:	695a      	ldr	r2, [r3, #20]
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d006      	beq.n	8006f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f62:	4a05      	ldr	r2, [pc, #20]	@ (8006f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f68:	88fb      	ldrh	r3, [r7, #6]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fd f97e 	bl	800426c <HAL_GPIO_EXTI_Callback>
  }
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40010400 	.word	0x40010400

08006f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d141      	bne.n	800700e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f8a:	4b4b      	ldr	r3, [pc, #300]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f96:	d131      	bne.n	8006ffc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f98:	4b47      	ldr	r3, [pc, #284]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f9e:	4a46      	ldr	r2, [pc, #280]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006fa8:	4b43      	ldr	r3, [pc, #268]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006fb0:	4a41      	ldr	r2, [pc, #260]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006fb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006fb8:	4b40      	ldr	r3, [pc, #256]	@ (80070bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2232      	movs	r2, #50	@ 0x32
 8006fbe:	fb02 f303 	mul.w	r3, r2, r3
 8006fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80070c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc8:	0c9b      	lsrs	r3, r3, #18
 8006fca:	3301      	adds	r3, #1
 8006fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fce:	e002      	b.n	8006fd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fd6:	4b38      	ldr	r3, [pc, #224]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe2:	d102      	bne.n	8006fea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1f2      	bne.n	8006fd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fea:	4b33      	ldr	r3, [pc, #204]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff6:	d158      	bne.n	80070aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e057      	b.n	80070ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007002:	4a2d      	ldr	r2, [pc, #180]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800700c:	e04d      	b.n	80070aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007014:	d141      	bne.n	800709a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007016:	4b28      	ldr	r3, [pc, #160]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800701e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007022:	d131      	bne.n	8007088 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007024:	4b24      	ldr	r3, [pc, #144]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800702a:	4a23      	ldr	r2, [pc, #140]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800702c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007030:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007034:	4b20      	ldr	r3, [pc, #128]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800703c:	4a1e      	ldr	r2, [pc, #120]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800703e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007044:	4b1d      	ldr	r3, [pc, #116]	@ (80070bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2232      	movs	r2, #50	@ 0x32
 800704a:	fb02 f303 	mul.w	r3, r2, r3
 800704e:	4a1c      	ldr	r2, [pc, #112]	@ (80070c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	0c9b      	lsrs	r3, r3, #18
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800705a:	e002      	b.n	8007062 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3b01      	subs	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007062:	4b15      	ldr	r3, [pc, #84]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800706a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800706e:	d102      	bne.n	8007076 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f2      	bne.n	800705c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007076:	4b10      	ldr	r3, [pc, #64]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800707e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007082:	d112      	bne.n	80070aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e011      	b.n	80070ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007088:	4b0b      	ldr	r3, [pc, #44]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800708e:	4a0a      	ldr	r2, [pc, #40]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007098:	e007      	b.n	80070aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800709a:	4b07      	ldr	r3, [pc, #28]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80070a2:	4a05      	ldr	r2, [pc, #20]	@ (80070b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80070a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	40007000 	.word	0x40007000
 80070bc:	20000218 	.word	0x20000218
 80070c0:	431bde83 	.word	0x431bde83

080070c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80070c8:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4a04      	ldr	r2, [pc, #16]	@ (80070e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070d2:	6093      	str	r3, [r2, #8]
}
 80070d4:	bf00      	nop
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40007000 	.word	0x40007000

080070e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e2fe      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d075      	beq.n	80071ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007102:	4b97      	ldr	r3, [pc, #604]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 030c 	and.w	r3, r3, #12
 800710a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800710c:	4b94      	ldr	r3, [pc, #592]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b0c      	cmp	r3, #12
 800711a:	d102      	bne.n	8007122 <HAL_RCC_OscConfig+0x3e>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b03      	cmp	r3, #3
 8007120:	d002      	beq.n	8007128 <HAL_RCC_OscConfig+0x44>
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b08      	cmp	r3, #8
 8007126:	d10b      	bne.n	8007140 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007128:	4b8d      	ldr	r3, [pc, #564]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d05b      	beq.n	80071ec <HAL_RCC_OscConfig+0x108>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d157      	bne.n	80071ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e2d9      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007148:	d106      	bne.n	8007158 <HAL_RCC_OscConfig+0x74>
 800714a:	4b85      	ldr	r3, [pc, #532]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a84      	ldr	r2, [pc, #528]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e01d      	b.n	8007194 <HAL_RCC_OscConfig+0xb0>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007160:	d10c      	bne.n	800717c <HAL_RCC_OscConfig+0x98>
 8007162:	4b7f      	ldr	r3, [pc, #508]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a7e      	ldr	r2, [pc, #504]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	4b7c      	ldr	r3, [pc, #496]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a7b      	ldr	r2, [pc, #492]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	e00b      	b.n	8007194 <HAL_RCC_OscConfig+0xb0>
 800717c:	4b78      	ldr	r3, [pc, #480]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a77      	ldr	r2, [pc, #476]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	4b75      	ldr	r3, [pc, #468]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a74      	ldr	r2, [pc, #464]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800718e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d013      	beq.n	80071c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719c:	f7fd fc44 	bl	8004a28 <HAL_GetTick>
 80071a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071a2:	e008      	b.n	80071b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071a4:	f7fd fc40 	bl	8004a28 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b64      	cmp	r3, #100	@ 0x64
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e29e      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0f0      	beq.n	80071a4 <HAL_RCC_OscConfig+0xc0>
 80071c2:	e014      	b.n	80071ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c4:	f7fd fc30 	bl	8004a28 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071cc:	f7fd fc2c 	bl	8004a28 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b64      	cmp	r3, #100	@ 0x64
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e28a      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071de:	4b60      	ldr	r3, [pc, #384]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1f0      	bne.n	80071cc <HAL_RCC_OscConfig+0xe8>
 80071ea:	e000      	b.n	80071ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d075      	beq.n	80072e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071fa:	4b59      	ldr	r3, [pc, #356]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 030c 	and.w	r3, r3, #12
 8007202:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007204:	4b56      	ldr	r3, [pc, #344]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b0c      	cmp	r3, #12
 8007212:	d102      	bne.n	800721a <HAL_RCC_OscConfig+0x136>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b02      	cmp	r3, #2
 8007218:	d002      	beq.n	8007220 <HAL_RCC_OscConfig+0x13c>
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b04      	cmp	r3, #4
 800721e:	d11f      	bne.n	8007260 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007220:	4b4f      	ldr	r3, [pc, #316]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <HAL_RCC_OscConfig+0x154>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e25d      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007238:	4b49      	ldr	r3, [pc, #292]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	061b      	lsls	r3, r3, #24
 8007246:	4946      	ldr	r1, [pc, #280]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007248:	4313      	orrs	r3, r2
 800724a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800724c:	4b45      	ldr	r3, [pc, #276]	@ (8007364 <HAL_RCC_OscConfig+0x280>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f7fd fb9d 	bl	8004990 <HAL_InitTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d043      	beq.n	80072e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e249      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d023      	beq.n	80072b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007268:	4b3d      	ldr	r3, [pc, #244]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a3c      	ldr	r2, [pc, #240]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800726e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007274:	f7fd fbd8 	bl	8004a28 <HAL_GetTick>
 8007278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727a:	e008      	b.n	800728e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800727c:	f7fd fbd4 	bl	8004a28 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e232      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800728e:	4b34      	ldr	r3, [pc, #208]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0f0      	beq.n	800727c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800729a:	4b31      	ldr	r3, [pc, #196]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	061b      	lsls	r3, r3, #24
 80072a8:	492d      	ldr	r1, [pc, #180]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	604b      	str	r3, [r1, #4]
 80072ae:	e01a      	b.n	80072e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 80072b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072bc:	f7fd fbb4 	bl	8004a28 <HAL_GetTick>
 80072c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072c4:	f7fd fbb0 	bl	8004a28 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e20e      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072d6:	4b22      	ldr	r3, [pc, #136]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1f0      	bne.n	80072c4 <HAL_RCC_OscConfig+0x1e0>
 80072e2:	e000      	b.n	80072e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d041      	beq.n	8007376 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d01c      	beq.n	8007334 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072fa:	4b19      	ldr	r3, [pc, #100]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 80072fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007300:	4a17      	ldr	r2, [pc, #92]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730a:	f7fd fb8d 	bl	8004a28 <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007312:	f7fd fb89 	bl	8004a28 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e1e7      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007324:	4b0e      	ldr	r3, [pc, #56]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0ef      	beq.n	8007312 <HAL_RCC_OscConfig+0x22e>
 8007332:	e020      	b.n	8007376 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007334:	4b0a      	ldr	r3, [pc, #40]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 8007336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800733a:	4a09      	ldr	r2, [pc, #36]	@ (8007360 <HAL_RCC_OscConfig+0x27c>)
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007344:	f7fd fb70 	bl	8004a28 <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800734a:	e00d      	b.n	8007368 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800734c:	f7fd fb6c 	bl	8004a28 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d906      	bls.n	8007368 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e1ca      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
 800735e:	bf00      	nop
 8007360:	40021000 	.word	0x40021000
 8007364:	2000021c 	.word	0x2000021c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007368:	4b8c      	ldr	r3, [pc, #560]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 800736a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1ea      	bne.n	800734c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 80a6 	beq.w	80074d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007384:	2300      	movs	r3, #0
 8007386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007388:	4b84      	ldr	r3, [pc, #528]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 800738a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800738c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <HAL_RCC_OscConfig+0x2b4>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <HAL_RCC_OscConfig+0x2b6>
 8007398:	2300      	movs	r3, #0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00d      	beq.n	80073ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739e:	4b7f      	ldr	r3, [pc, #508]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 80073a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a2:	4a7e      	ldr	r2, [pc, #504]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 80073a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80073aa:	4b7c      	ldr	r3, [pc, #496]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 80073ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80073b6:	2301      	movs	r3, #1
 80073b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073ba:	4b79      	ldr	r3, [pc, #484]	@ (80075a0 <HAL_RCC_OscConfig+0x4bc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d118      	bne.n	80073f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073c6:	4b76      	ldr	r3, [pc, #472]	@ (80075a0 <HAL_RCC_OscConfig+0x4bc>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a75      	ldr	r2, [pc, #468]	@ (80075a0 <HAL_RCC_OscConfig+0x4bc>)
 80073cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073d2:	f7fd fb29 	bl	8004a28 <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073d8:	e008      	b.n	80073ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073da:	f7fd fb25 	bl	8004a28 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e183      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073ec:	4b6c      	ldr	r3, [pc, #432]	@ (80075a0 <HAL_RCC_OscConfig+0x4bc>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0f0      	beq.n	80073da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d108      	bne.n	8007412 <HAL_RCC_OscConfig+0x32e>
 8007400:	4b66      	ldr	r3, [pc, #408]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007406:	4a65      	ldr	r2, [pc, #404]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007408:	f043 0301 	orr.w	r3, r3, #1
 800740c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007410:	e024      	b.n	800745c <HAL_RCC_OscConfig+0x378>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b05      	cmp	r3, #5
 8007418:	d110      	bne.n	800743c <HAL_RCC_OscConfig+0x358>
 800741a:	4b60      	ldr	r3, [pc, #384]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 800741c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007420:	4a5e      	ldr	r2, [pc, #376]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007422:	f043 0304 	orr.w	r3, r3, #4
 8007426:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800742a:	4b5c      	ldr	r3, [pc, #368]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 800742c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007430:	4a5a      	ldr	r2, [pc, #360]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800743a:	e00f      	b.n	800745c <HAL_RCC_OscConfig+0x378>
 800743c:	4b57      	ldr	r3, [pc, #348]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 800743e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007442:	4a56      	ldr	r2, [pc, #344]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800744c:	4b53      	ldr	r3, [pc, #332]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007452:	4a52      	ldr	r2, [pc, #328]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007454:	f023 0304 	bic.w	r3, r3, #4
 8007458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d016      	beq.n	8007492 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007464:	f7fd fae0 	bl	8004a28 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800746a:	e00a      	b.n	8007482 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746c:	f7fd fadc 	bl	8004a28 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e138      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007482:	4b46      	ldr	r3, [pc, #280]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0ed      	beq.n	800746c <HAL_RCC_OscConfig+0x388>
 8007490:	e015      	b.n	80074be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007492:	f7fd fac9 	bl	8004a28 <HAL_GetTick>
 8007496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007498:	e00a      	b.n	80074b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749a:	f7fd fac5 	bl	8004a28 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e121      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074b0:	4b3a      	ldr	r3, [pc, #232]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1ed      	bne.n	800749a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074be:	7ffb      	ldrb	r3, [r7, #31]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d105      	bne.n	80074d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c4:	4b35      	ldr	r3, [pc, #212]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 80074c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c8:	4a34      	ldr	r2, [pc, #208]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 80074ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d03c      	beq.n	8007556 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01c      	beq.n	800751e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074e4:	4b2d      	ldr	r3, [pc, #180]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 80074e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074ea:	4a2c      	ldr	r2, [pc, #176]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 80074ec:	f043 0301 	orr.w	r3, r3, #1
 80074f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f4:	f7fd fa98 	bl	8004a28 <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074fc:	f7fd fa94 	bl	8004a28 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e0f2      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800750e:	4b23      	ldr	r3, [pc, #140]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0ef      	beq.n	80074fc <HAL_RCC_OscConfig+0x418>
 800751c:	e01b      	b.n	8007556 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800751e:	4b1f      	ldr	r3, [pc, #124]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007520:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007524:	4a1d      	ldr	r2, [pc, #116]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007526:	f023 0301 	bic.w	r3, r3, #1
 800752a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752e:	f7fd fa7b 	bl	8004a28 <HAL_GetTick>
 8007532:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007534:	e008      	b.n	8007548 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007536:	f7fd fa77 	bl	8004a28 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d901      	bls.n	8007548 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e0d5      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007548:	4b14      	ldr	r3, [pc, #80]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 800754a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1ef      	bne.n	8007536 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80c9 	beq.w	80076f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007560:	4b0e      	ldr	r3, [pc, #56]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 030c 	and.w	r3, r3, #12
 8007568:	2b0c      	cmp	r3, #12
 800756a:	f000 8083 	beq.w	8007674 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d15e      	bne.n	8007634 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007576:	4b09      	ldr	r3, [pc, #36]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a08      	ldr	r2, [pc, #32]	@ (800759c <HAL_RCC_OscConfig+0x4b8>)
 800757c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007582:	f7fd fa51 	bl	8004a28 <HAL_GetTick>
 8007586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007588:	e00c      	b.n	80075a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800758a:	f7fd fa4d 	bl	8004a28 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d905      	bls.n	80075a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e0ab      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
 800759c:	40021000 	.word	0x40021000
 80075a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075a4:	4b55      	ldr	r3, [pc, #340]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1ec      	bne.n	800758a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075b0:	4b52      	ldr	r3, [pc, #328]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	4b52      	ldr	r3, [pc, #328]	@ (8007700 <HAL_RCC_OscConfig+0x61c>)
 80075b6:	4013      	ands	r3, r2
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6a11      	ldr	r1, [r2, #32]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075c0:	3a01      	subs	r2, #1
 80075c2:	0112      	lsls	r2, r2, #4
 80075c4:	4311      	orrs	r1, r2
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80075ca:	0212      	lsls	r2, r2, #8
 80075cc:	4311      	orrs	r1, r2
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80075d2:	0852      	lsrs	r2, r2, #1
 80075d4:	3a01      	subs	r2, #1
 80075d6:	0552      	lsls	r2, r2, #21
 80075d8:	4311      	orrs	r1, r2
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80075de:	0852      	lsrs	r2, r2, #1
 80075e0:	3a01      	subs	r2, #1
 80075e2:	0652      	lsls	r2, r2, #25
 80075e4:	4311      	orrs	r1, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80075ea:	06d2      	lsls	r2, r2, #27
 80075ec:	430a      	orrs	r2, r1
 80075ee:	4943      	ldr	r1, [pc, #268]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075f4:	4b41      	ldr	r3, [pc, #260]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a40      	ldr	r2, [pc, #256]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 80075fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007600:	4b3e      	ldr	r3, [pc, #248]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	4a3d      	ldr	r2, [pc, #244]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 8007606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800760a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fd fa0c 	bl	8004a28 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007614:	f7fd fa08 	bl	8004a28 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e066      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007626:	4b35      	ldr	r3, [pc, #212]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0x530>
 8007632:	e05e      	b.n	80076f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007634:	4b31      	ldr	r3, [pc, #196]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a30      	ldr	r2, [pc, #192]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 800763a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800763e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007640:	f7fd f9f2 	bl	8004a28 <HAL_GetTick>
 8007644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007646:	e008      	b.n	800765a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007648:	f7fd f9ee 	bl	8004a28 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e04c      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800765a:	4b28      	ldr	r3, [pc, #160]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1f0      	bne.n	8007648 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007666:	4b25      	ldr	r3, [pc, #148]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	4924      	ldr	r1, [pc, #144]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 800766c:	4b25      	ldr	r3, [pc, #148]	@ (8007704 <HAL_RCC_OscConfig+0x620>)
 800766e:	4013      	ands	r3, r2
 8007670:	60cb      	str	r3, [r1, #12]
 8007672:	e03e      	b.n	80076f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e039      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007680:	4b1e      	ldr	r3, [pc, #120]	@ (80076fc <HAL_RCC_OscConfig+0x618>)
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f003 0203 	and.w	r2, r3, #3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	429a      	cmp	r2, r3
 8007692:	d12c      	bne.n	80076ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769e:	3b01      	subs	r3, #1
 80076a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d123      	bne.n	80076ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d11b      	bne.n	80076ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d113      	bne.n	80076ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d0:	085b      	lsrs	r3, r3, #1
 80076d2:	3b01      	subs	r3, #1
 80076d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d109      	bne.n	80076ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	3b01      	subs	r3, #1
 80076e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d001      	beq.n	80076f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40021000 	.word	0x40021000
 8007700:	019f800c 	.word	0x019f800c
 8007704:	feeefffc 	.word	0xfeeefffc

08007708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e11e      	b.n	800795e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007720:	4b91      	ldr	r3, [pc, #580]	@ (8007968 <HAL_RCC_ClockConfig+0x260>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 030f 	and.w	r3, r3, #15
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d910      	bls.n	8007750 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800772e:	4b8e      	ldr	r3, [pc, #568]	@ (8007968 <HAL_RCC_ClockConfig+0x260>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f023 020f 	bic.w	r2, r3, #15
 8007736:	498c      	ldr	r1, [pc, #560]	@ (8007968 <HAL_RCC_ClockConfig+0x260>)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	4313      	orrs	r3, r2
 800773c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800773e:	4b8a      	ldr	r3, [pc, #552]	@ (8007968 <HAL_RCC_ClockConfig+0x260>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d001      	beq.n	8007750 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e106      	b.n	800795e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d073      	beq.n	8007844 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b03      	cmp	r3, #3
 8007762:	d129      	bne.n	80077b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007764:	4b81      	ldr	r3, [pc, #516]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e0f4      	b.n	800795e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007774:	f000 f99e 	bl	8007ab4 <RCC_GetSysClockFreqFromPLLSource>
 8007778:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	4a7c      	ldr	r2, [pc, #496]	@ (8007970 <HAL_RCC_ClockConfig+0x268>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d93f      	bls.n	8007802 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007782:	4b7a      	ldr	r3, [pc, #488]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007796:	2b00      	cmp	r3, #0
 8007798:	d033      	beq.n	8007802 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d12f      	bne.n	8007802 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077a2:	4b72      	ldr	r3, [pc, #456]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077aa:	4a70      	ldr	r2, [pc, #448]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 80077ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80077b2:	2380      	movs	r3, #128	@ 0x80
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e024      	b.n	8007802 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d107      	bne.n	80077d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077c0:	4b6a      	ldr	r3, [pc, #424]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e0c6      	b.n	800795e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077d0:	4b66      	ldr	r3, [pc, #408]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0be      	b.n	800795e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80077e0:	f000 f8ce 	bl	8007980 <HAL_RCC_GetSysClockFreq>
 80077e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	4a61      	ldr	r2, [pc, #388]	@ (8007970 <HAL_RCC_ClockConfig+0x268>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d909      	bls.n	8007802 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077ee:	4b5f      	ldr	r3, [pc, #380]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077f6:	4a5d      	ldr	r2, [pc, #372]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 80077f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80077fe:	2380      	movs	r3, #128	@ 0x80
 8007800:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007802:	4b5a      	ldr	r3, [pc, #360]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f023 0203 	bic.w	r2, r3, #3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	4957      	ldr	r1, [pc, #348]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007810:	4313      	orrs	r3, r2
 8007812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007814:	f7fd f908 	bl	8004a28 <HAL_GetTick>
 8007818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800781a:	e00a      	b.n	8007832 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800781c:	f7fd f904 	bl	8004a28 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800782a:	4293      	cmp	r3, r2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e095      	b.n	800795e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007832:	4b4e      	ldr	r3, [pc, #312]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 020c 	and.w	r2, r3, #12
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	429a      	cmp	r2, r3
 8007842:	d1eb      	bne.n	800781c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d023      	beq.n	8007898 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800785c:	4b43      	ldr	r3, [pc, #268]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	4a42      	ldr	r2, [pc, #264]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007862:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007866:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007874:	4b3d      	ldr	r3, [pc, #244]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800787c:	4a3b      	ldr	r2, [pc, #236]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 800787e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007882:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007884:	4b39      	ldr	r3, [pc, #228]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	4936      	ldr	r1, [pc, #216]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007892:	4313      	orrs	r3, r2
 8007894:	608b      	str	r3, [r1, #8]
 8007896:	e008      	b.n	80078aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b80      	cmp	r3, #128	@ 0x80
 800789c:	d105      	bne.n	80078aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800789e:	4b33      	ldr	r3, [pc, #204]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	4a32      	ldr	r2, [pc, #200]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 80078a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007968 <HAL_RCC_ClockConfig+0x260>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d21d      	bcs.n	80078f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007968 <HAL_RCC_ClockConfig+0x260>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f023 020f 	bic.w	r2, r3, #15
 80078c0:	4929      	ldr	r1, [pc, #164]	@ (8007968 <HAL_RCC_ClockConfig+0x260>)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80078c8:	f7fd f8ae 	bl	8004a28 <HAL_GetTick>
 80078cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ce:	e00a      	b.n	80078e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d0:	f7fd f8aa 	bl	8004a28 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e03b      	b.n	800795e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e6:	4b20      	ldr	r3, [pc, #128]	@ (8007968 <HAL_RCC_ClockConfig+0x260>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 030f 	and.w	r3, r3, #15
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d1ed      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d008      	beq.n	8007912 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007900:	4b1a      	ldr	r3, [pc, #104]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	4917      	ldr	r1, [pc, #92]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 800790e:	4313      	orrs	r3, r2
 8007910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800791e:	4b13      	ldr	r3, [pc, #76]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	490f      	ldr	r1, [pc, #60]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 800792e:	4313      	orrs	r3, r2
 8007930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007932:	f000 f825 	bl	8007980 <HAL_RCC_GetSysClockFreq>
 8007936:	4602      	mov	r2, r0
 8007938:	4b0c      	ldr	r3, [pc, #48]	@ (800796c <HAL_RCC_ClockConfig+0x264>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	091b      	lsrs	r3, r3, #4
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	490c      	ldr	r1, [pc, #48]	@ (8007974 <HAL_RCC_ClockConfig+0x26c>)
 8007944:	5ccb      	ldrb	r3, [r1, r3]
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	fa22 f303 	lsr.w	r3, r2, r3
 800794e:	4a0a      	ldr	r2, [pc, #40]	@ (8007978 <HAL_RCC_ClockConfig+0x270>)
 8007950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007952:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <HAL_RCC_ClockConfig+0x274>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f7fd f81a 	bl	8004990 <HAL_InitTick>
 800795c:	4603      	mov	r3, r0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40022000 	.word	0x40022000
 800796c:	40021000 	.word	0x40021000
 8007970:	04c4b400 	.word	0x04c4b400
 8007974:	0800bf0c 	.word	0x0800bf0c
 8007978:	20000218 	.word	0x20000218
 800797c:	2000021c 	.word	0x2000021c

08007980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007986:	4b2c      	ldr	r3, [pc, #176]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 030c 	and.w	r3, r3, #12
 800798e:	2b04      	cmp	r3, #4
 8007990:	d102      	bne.n	8007998 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007992:	4b2a      	ldr	r3, [pc, #168]	@ (8007a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007994:	613b      	str	r3, [r7, #16]
 8007996:	e047      	b.n	8007a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007998:	4b27      	ldr	r3, [pc, #156]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 030c 	and.w	r3, r3, #12
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d102      	bne.n	80079aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80079a4:	4b26      	ldr	r3, [pc, #152]	@ (8007a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	e03e      	b.n	8007a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80079aa:	4b23      	ldr	r3, [pc, #140]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 030c 	and.w	r3, r3, #12
 80079b2:	2b0c      	cmp	r3, #12
 80079b4:	d136      	bne.n	8007a24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079b6:	4b20      	ldr	r3, [pc, #128]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	091b      	lsrs	r3, r3, #4
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	3301      	adds	r3, #1
 80079cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d10c      	bne.n	80079ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079dc:	4a16      	ldr	r2, [pc, #88]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079de:	68d2      	ldr	r2, [r2, #12]
 80079e0:	0a12      	lsrs	r2, r2, #8
 80079e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
 80079ea:	617b      	str	r3, [r7, #20]
      break;
 80079ec:	e00c      	b.n	8007a08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079ee:	4a13      	ldr	r2, [pc, #76]	@ (8007a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	4a10      	ldr	r2, [pc, #64]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079f8:	68d2      	ldr	r2, [r2, #12]
 80079fa:	0a12      	lsrs	r2, r2, #8
 80079fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	617b      	str	r3, [r7, #20]
      break;
 8007a06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a08:	4b0b      	ldr	r3, [pc, #44]	@ (8007a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	0e5b      	lsrs	r3, r3, #25
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	3301      	adds	r3, #1
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	e001      	b.n	8007a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007a28:	693b      	ldr	r3, [r7, #16]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	00f42400 	.word	0x00f42400
 8007a40:	016e3600 	.word	0x016e3600

08007a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a48:	4b03      	ldr	r3, [pc, #12]	@ (8007a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000218 	.word	0x20000218

08007a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a60:	f7ff fff0 	bl	8007a44 <HAL_RCC_GetHCLKFreq>
 8007a64:	4602      	mov	r2, r0
 8007a66:	4b06      	ldr	r3, [pc, #24]	@ (8007a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	4904      	ldr	r1, [pc, #16]	@ (8007a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a72:	5ccb      	ldrb	r3, [r1, r3]
 8007a74:	f003 031f 	and.w	r3, r3, #31
 8007a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40021000 	.word	0x40021000
 8007a84:	0800bf1c 	.word	0x0800bf1c

08007a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a8c:	f7ff ffda 	bl	8007a44 <HAL_RCC_GetHCLKFreq>
 8007a90:	4602      	mov	r2, r0
 8007a92:	4b06      	ldr	r3, [pc, #24]	@ (8007aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	0adb      	lsrs	r3, r3, #11
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	4904      	ldr	r1, [pc, #16]	@ (8007ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a9e:	5ccb      	ldrb	r3, [r1, r3]
 8007aa0:	f003 031f 	and.w	r3, r3, #31
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40021000 	.word	0x40021000
 8007ab0:	0800bf1c 	.word	0x0800bf1c

08007ab4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aba:	4b1e      	ldr	r3, [pc, #120]	@ (8007b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f003 0303 	and.w	r3, r3, #3
 8007ac2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	091b      	lsrs	r3, r3, #4
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	3301      	adds	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d10c      	bne.n	8007af2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ad8:	4a17      	ldr	r2, [pc, #92]	@ (8007b38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae0:	4a14      	ldr	r2, [pc, #80]	@ (8007b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ae2:	68d2      	ldr	r2, [r2, #12]
 8007ae4:	0a12      	lsrs	r2, r2, #8
 8007ae6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007aea:	fb02 f303 	mul.w	r3, r2, r3
 8007aee:	617b      	str	r3, [r7, #20]
    break;
 8007af0:	e00c      	b.n	8007b0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007af2:	4a12      	ldr	r2, [pc, #72]	@ (8007b3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afa:	4a0e      	ldr	r2, [pc, #56]	@ (8007b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007afc:	68d2      	ldr	r2, [r2, #12]
 8007afe:	0a12      	lsrs	r2, r2, #8
 8007b00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007b04:	fb02 f303 	mul.w	r3, r2, r3
 8007b08:	617b      	str	r3, [r7, #20]
    break;
 8007b0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b0c:	4b09      	ldr	r3, [pc, #36]	@ (8007b34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	0e5b      	lsrs	r3, r3, #25
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	3301      	adds	r3, #1
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007b26:	687b      	ldr	r3, [r7, #4]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	40021000 	.word	0x40021000
 8007b38:	016e3600 	.word	0x016e3600
 8007b3c:	00f42400 	.word	0x00f42400

08007b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b48:	2300      	movs	r3, #0
 8007b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8098 	beq.w	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b62:	4b43      	ldr	r3, [pc, #268]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b6e:	4b40      	ldr	r3, [pc, #256]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b72:	4a3f      	ldr	r2, [pc, #252]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b78:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b86:	2301      	movs	r3, #1
 8007b88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a39      	ldr	r2, [pc, #228]	@ (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b96:	f7fc ff47 	bl	8004a28 <HAL_GetTick>
 8007b9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b9c:	e009      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b9e:	f7fc ff43 	bl	8004a28 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d902      	bls.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	74fb      	strb	r3, [r7, #19]
        break;
 8007bb0:	e005      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bb2:	4b30      	ldr	r3, [pc, #192]	@ (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0ef      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007bbe:	7cfb      	ldrb	r3, [r7, #19]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d159      	bne.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01e      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d019      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007be0:	4b23      	ldr	r3, [pc, #140]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bec:	4b20      	ldr	r3, [pc, #128]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c02:	4a1b      	ldr	r2, [pc, #108]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c0c:	4a18      	ldr	r2, [pc, #96]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d016      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1e:	f7fc ff03 	bl	8004a28 <HAL_GetTick>
 8007c22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c24:	e00b      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c26:	f7fc feff 	bl	8004a28 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d902      	bls.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	74fb      	strb	r3, [r7, #19]
            break;
 8007c3c:	e006      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0ec      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c4c:	7cfb      	ldrb	r3, [r7, #19]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c52:	4b07      	ldr	r3, [pc, #28]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c60:	4903      	ldr	r1, [pc, #12]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007c68:	e008      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c6a:	7cfb      	ldrb	r3, [r7, #19]
 8007c6c:	74bb      	strb	r3, [r7, #18]
 8007c6e:	e005      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c70:	40021000 	.word	0x40021000
 8007c74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c78:	7cfb      	ldrb	r3, [r7, #19]
 8007c7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c7c:	7c7b      	ldrb	r3, [r7, #17]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d105      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c82:	4ba7      	ldr	r3, [pc, #668]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c86:	4aa6      	ldr	r2, [pc, #664]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c9a:	4ba1      	ldr	r3, [pc, #644]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca0:	f023 0203 	bic.w	r2, r3, #3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	499d      	ldr	r1, [pc, #628]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cbc:	4b98      	ldr	r3, [pc, #608]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc2:	f023 020c 	bic.w	r2, r3, #12
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	4995      	ldr	r1, [pc, #596]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cde:	4b90      	ldr	r3, [pc, #576]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	498c      	ldr	r1, [pc, #560]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00a      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d00:	4b87      	ldr	r3, [pc, #540]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	4984      	ldr	r1, [pc, #528]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0310 	and.w	r3, r3, #16
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00a      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d22:	4b7f      	ldr	r3, [pc, #508]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	497b      	ldr	r1, [pc, #492]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00a      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d44:	4b76      	ldr	r3, [pc, #472]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	4973      	ldr	r1, [pc, #460]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d66:	4b6e      	ldr	r3, [pc, #440]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	496a      	ldr	r1, [pc, #424]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00a      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d88:	4b65      	ldr	r3, [pc, #404]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	4962      	ldr	r1, [pc, #392]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007daa:	4b5d      	ldr	r3, [pc, #372]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db8:	4959      	ldr	r1, [pc, #356]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dcc:	4b54      	ldr	r3, [pc, #336]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dd2:	f023 0203 	bic.w	r2, r3, #3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dda:	4951      	ldr	r1, [pc, #324]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dee:	4b4c      	ldr	r3, [pc, #304]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfc:	4948      	ldr	r1, [pc, #288]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d015      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e10:	4b43      	ldr	r3, [pc, #268]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1e:	4940      	ldr	r1, [pc, #256]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e2e:	d105      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e30:	4b3b      	ldr	r3, [pc, #236]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	4a3a      	ldr	r2, [pc, #232]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d015      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e48:	4b35      	ldr	r3, [pc, #212]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e56:	4932      	ldr	r1, [pc, #200]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e66:	d105      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e68:	4b2d      	ldr	r3, [pc, #180]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e72:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d015      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e80:	4b27      	ldr	r3, [pc, #156]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8e:	4924      	ldr	r1, [pc, #144]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e9e:	d105      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eaa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d015      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eb8:	4b19      	ldr	r3, [pc, #100]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ebe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ec6:	4916      	ldr	r1, [pc, #88]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ed6:	d105      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ed8:	4b11      	ldr	r3, [pc, #68]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4a10      	ldr	r2, [pc, #64]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ee2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d019      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ef6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efe:	4908      	ldr	r1, [pc, #32]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f0e:	d109      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f10:	4b03      	ldr	r3, [pc, #12]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	4a02      	ldr	r2, [pc, #8]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f1a:	60d3      	str	r3, [r2, #12]
 8007f1c:	e002      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007f1e:	bf00      	nop
 8007f20:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d015      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f30:	4b29      	ldr	r3, [pc, #164]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f3e:	4926      	ldr	r1, [pc, #152]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f4e:	d105      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f50:	4b21      	ldr	r3, [pc, #132]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4a20      	ldr	r2, [pc, #128]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d015      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007f68:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f6e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f76:	4918      	ldr	r1, [pc, #96]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f86:	d105      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f88:	4b13      	ldr	r3, [pc, #76]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	4a12      	ldr	r2, [pc, #72]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d015      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fa6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fae:	490a      	ldr	r1, [pc, #40]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fbe:	d105      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fc0:	4b05      	ldr	r3, [pc, #20]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	4a04      	ldr	r2, [pc, #16]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007fcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40021000 	.word	0x40021000

08007fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e054      	b.n	8008098 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d111      	bne.n	800801e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 feec 	bl	8009de0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a23      	ldr	r2, [pc, #140]	@ (80080a0 <HAL_TIM_Base_Init+0xc4>)
 8008014:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3304      	adds	r3, #4
 800802e:	4619      	mov	r1, r3
 8008030:	4610      	mov	r0, r2
 8008032:	f001 fa35 	bl	80094a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	080043f5 	.word	0x080043f5

080080a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d001      	beq.n	80080bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e04c      	b.n	8008156 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a26      	ldr	r2, [pc, #152]	@ (8008164 <HAL_TIM_Base_Start+0xc0>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d022      	beq.n	8008114 <HAL_TIM_Base_Start+0x70>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d6:	d01d      	beq.n	8008114 <HAL_TIM_Base_Start+0x70>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a22      	ldr	r2, [pc, #136]	@ (8008168 <HAL_TIM_Base_Start+0xc4>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d018      	beq.n	8008114 <HAL_TIM_Base_Start+0x70>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a21      	ldr	r2, [pc, #132]	@ (800816c <HAL_TIM_Base_Start+0xc8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d013      	beq.n	8008114 <HAL_TIM_Base_Start+0x70>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008170 <HAL_TIM_Base_Start+0xcc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00e      	beq.n	8008114 <HAL_TIM_Base_Start+0x70>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008174 <HAL_TIM_Base_Start+0xd0>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d009      	beq.n	8008114 <HAL_TIM_Base_Start+0x70>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a1c      	ldr	r2, [pc, #112]	@ (8008178 <HAL_TIM_Base_Start+0xd4>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d004      	beq.n	8008114 <HAL_TIM_Base_Start+0x70>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a1b      	ldr	r2, [pc, #108]	@ (800817c <HAL_TIM_Base_Start+0xd8>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d115      	bne.n	8008140 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	4b19      	ldr	r3, [pc, #100]	@ (8008180 <HAL_TIM_Base_Start+0xdc>)
 800811c:	4013      	ands	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b06      	cmp	r3, #6
 8008124:	d015      	beq.n	8008152 <HAL_TIM_Base_Start+0xae>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800812c:	d011      	beq.n	8008152 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0201 	orr.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813e:	e008      	b.n	8008152 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	e000      	b.n	8008154 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008152:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40012c00 	.word	0x40012c00
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40013400 	.word	0x40013400
 8008178:	40014000 	.word	0x40014000
 800817c:	40015000 	.word	0x40015000
 8008180:	00010007 	.word	0x00010007

08008184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	d001      	beq.n	800819c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e054      	b.n	8008246 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 0201 	orr.w	r2, r2, #1
 80081b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a26      	ldr	r2, [pc, #152]	@ (8008254 <HAL_TIM_Base_Start_IT+0xd0>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d022      	beq.n	8008204 <HAL_TIM_Base_Start_IT+0x80>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c6:	d01d      	beq.n	8008204 <HAL_TIM_Base_Start_IT+0x80>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a22      	ldr	r2, [pc, #136]	@ (8008258 <HAL_TIM_Base_Start_IT+0xd4>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d018      	beq.n	8008204 <HAL_TIM_Base_Start_IT+0x80>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a21      	ldr	r2, [pc, #132]	@ (800825c <HAL_TIM_Base_Start_IT+0xd8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d013      	beq.n	8008204 <HAL_TIM_Base_Start_IT+0x80>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008260 <HAL_TIM_Base_Start_IT+0xdc>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d00e      	beq.n	8008204 <HAL_TIM_Base_Start_IT+0x80>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008264 <HAL_TIM_Base_Start_IT+0xe0>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d009      	beq.n	8008204 <HAL_TIM_Base_Start_IT+0x80>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008268 <HAL_TIM_Base_Start_IT+0xe4>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d004      	beq.n	8008204 <HAL_TIM_Base_Start_IT+0x80>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1b      	ldr	r2, [pc, #108]	@ (800826c <HAL_TIM_Base_Start_IT+0xe8>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d115      	bne.n	8008230 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689a      	ldr	r2, [r3, #8]
 800820a:	4b19      	ldr	r3, [pc, #100]	@ (8008270 <HAL_TIM_Base_Start_IT+0xec>)
 800820c:	4013      	ands	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b06      	cmp	r3, #6
 8008214:	d015      	beq.n	8008242 <HAL_TIM_Base_Start_IT+0xbe>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800821c:	d011      	beq.n	8008242 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f042 0201 	orr.w	r2, r2, #1
 800822c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822e:	e008      	b.n	8008242 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	e000      	b.n	8008244 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40012c00 	.word	0x40012c00
 8008258:	40000400 	.word	0x40000400
 800825c:	40000800 	.word	0x40000800
 8008260:	40000c00 	.word	0x40000c00
 8008264:	40013400 	.word	0x40013400
 8008268:	40014000 	.word	0x40014000
 800826c:	40015000 	.word	0x40015000
 8008270:	00010007 	.word	0x00010007

08008274 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e054      	b.n	8008330 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d111      	bne.n	80082b6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f001 fda0 	bl	8009de0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a23      	ldr	r2, [pc, #140]	@ (8008338 <HAL_TIM_PWM_Init+0xc4>)
 80082ac:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3304      	adds	r3, #4
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f001 f8e9 	bl	80094a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	0800833d 	.word	0x0800833d

0800833c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d109      	bne.n	8008374 <HAL_TIM_PWM_Start+0x24>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b01      	cmp	r3, #1
 800836a:	bf14      	ite	ne
 800836c:	2301      	movne	r3, #1
 800836e:	2300      	moveq	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	e03c      	b.n	80083ee <HAL_TIM_PWM_Start+0x9e>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2b04      	cmp	r3, #4
 8008378:	d109      	bne.n	800838e <HAL_TIM_PWM_Start+0x3e>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b01      	cmp	r3, #1
 8008384:	bf14      	ite	ne
 8008386:	2301      	movne	r3, #1
 8008388:	2300      	moveq	r3, #0
 800838a:	b2db      	uxtb	r3, r3
 800838c:	e02f      	b.n	80083ee <HAL_TIM_PWM_Start+0x9e>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b08      	cmp	r3, #8
 8008392:	d109      	bne.n	80083a8 <HAL_TIM_PWM_Start+0x58>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b01      	cmp	r3, #1
 800839e:	bf14      	ite	ne
 80083a0:	2301      	movne	r3, #1
 80083a2:	2300      	moveq	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	e022      	b.n	80083ee <HAL_TIM_PWM_Start+0x9e>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b0c      	cmp	r3, #12
 80083ac:	d109      	bne.n	80083c2 <HAL_TIM_PWM_Start+0x72>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	bf14      	ite	ne
 80083ba:	2301      	movne	r3, #1
 80083bc:	2300      	moveq	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	e015      	b.n	80083ee <HAL_TIM_PWM_Start+0x9e>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	d109      	bne.n	80083dc <HAL_TIM_PWM_Start+0x8c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	bf14      	ite	ne
 80083d4:	2301      	movne	r3, #1
 80083d6:	2300      	moveq	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	e008      	b.n	80083ee <HAL_TIM_PWM_Start+0x9e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	bf14      	ite	ne
 80083e8:	2301      	movne	r3, #1
 80083ea:	2300      	moveq	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e0a6      	b.n	8008544 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d104      	bne.n	8008406 <HAL_TIM_PWM_Start+0xb6>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008404:	e023      	b.n	800844e <HAL_TIM_PWM_Start+0xfe>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b04      	cmp	r3, #4
 800840a:	d104      	bne.n	8008416 <HAL_TIM_PWM_Start+0xc6>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008414:	e01b      	b.n	800844e <HAL_TIM_PWM_Start+0xfe>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b08      	cmp	r3, #8
 800841a:	d104      	bne.n	8008426 <HAL_TIM_PWM_Start+0xd6>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008424:	e013      	b.n	800844e <HAL_TIM_PWM_Start+0xfe>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2b0c      	cmp	r3, #12
 800842a:	d104      	bne.n	8008436 <HAL_TIM_PWM_Start+0xe6>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008434:	e00b      	b.n	800844e <HAL_TIM_PWM_Start+0xfe>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b10      	cmp	r3, #16
 800843a:	d104      	bne.n	8008446 <HAL_TIM_PWM_Start+0xf6>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008444:	e003      	b.n	800844e <HAL_TIM_PWM_Start+0xfe>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2202      	movs	r2, #2
 800844a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2201      	movs	r2, #1
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f001 fc9c 	bl	8009d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a3a      	ldr	r2, [pc, #232]	@ (800854c <HAL_TIM_PWM_Start+0x1fc>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d018      	beq.n	8008498 <HAL_TIM_PWM_Start+0x148>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a39      	ldr	r2, [pc, #228]	@ (8008550 <HAL_TIM_PWM_Start+0x200>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d013      	beq.n	8008498 <HAL_TIM_PWM_Start+0x148>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a37      	ldr	r2, [pc, #220]	@ (8008554 <HAL_TIM_PWM_Start+0x204>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00e      	beq.n	8008498 <HAL_TIM_PWM_Start+0x148>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a36      	ldr	r2, [pc, #216]	@ (8008558 <HAL_TIM_PWM_Start+0x208>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d009      	beq.n	8008498 <HAL_TIM_PWM_Start+0x148>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a34      	ldr	r2, [pc, #208]	@ (800855c <HAL_TIM_PWM_Start+0x20c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d004      	beq.n	8008498 <HAL_TIM_PWM_Start+0x148>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a33      	ldr	r2, [pc, #204]	@ (8008560 <HAL_TIM_PWM_Start+0x210>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d101      	bne.n	800849c <HAL_TIM_PWM_Start+0x14c>
 8008498:	2301      	movs	r3, #1
 800849a:	e000      	b.n	800849e <HAL_TIM_PWM_Start+0x14e>
 800849c:	2300      	movs	r3, #0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d007      	beq.n	80084b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a25      	ldr	r2, [pc, #148]	@ (800854c <HAL_TIM_PWM_Start+0x1fc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d022      	beq.n	8008502 <HAL_TIM_PWM_Start+0x1b2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c4:	d01d      	beq.n	8008502 <HAL_TIM_PWM_Start+0x1b2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a26      	ldr	r2, [pc, #152]	@ (8008564 <HAL_TIM_PWM_Start+0x214>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d018      	beq.n	8008502 <HAL_TIM_PWM_Start+0x1b2>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a24      	ldr	r2, [pc, #144]	@ (8008568 <HAL_TIM_PWM_Start+0x218>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d013      	beq.n	8008502 <HAL_TIM_PWM_Start+0x1b2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a23      	ldr	r2, [pc, #140]	@ (800856c <HAL_TIM_PWM_Start+0x21c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00e      	beq.n	8008502 <HAL_TIM_PWM_Start+0x1b2>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a19      	ldr	r2, [pc, #100]	@ (8008550 <HAL_TIM_PWM_Start+0x200>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d009      	beq.n	8008502 <HAL_TIM_PWM_Start+0x1b2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a18      	ldr	r2, [pc, #96]	@ (8008554 <HAL_TIM_PWM_Start+0x204>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d004      	beq.n	8008502 <HAL_TIM_PWM_Start+0x1b2>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a18      	ldr	r2, [pc, #96]	@ (8008560 <HAL_TIM_PWM_Start+0x210>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d115      	bne.n	800852e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	4b19      	ldr	r3, [pc, #100]	@ (8008570 <HAL_TIM_PWM_Start+0x220>)
 800850a:	4013      	ands	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b06      	cmp	r3, #6
 8008512:	d015      	beq.n	8008540 <HAL_TIM_PWM_Start+0x1f0>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800851a:	d011      	beq.n	8008540 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0201 	orr.w	r2, r2, #1
 800852a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852c:	e008      	b.n	8008540 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0201 	orr.w	r2, r2, #1
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e000      	b.n	8008542 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008540:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40013400 	.word	0x40013400
 8008554:	40014000 	.word	0x40014000
 8008558:	40014400 	.word	0x40014400
 800855c:	40014800 	.word	0x40014800
 8008560:	40015000 	.word	0x40015000
 8008564:	40000400 	.word	0x40000400
 8008568:	40000800 	.word	0x40000800
 800856c:	40000c00 	.word	0x40000c00
 8008570:	00010007 	.word	0x00010007

08008574 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e04c      	b.n	8008622 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d111      	bne.n	80085b8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 fc1f 	bl	8009de0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d102      	bne.n	80085b0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a1f      	ldr	r2, [pc, #124]	@ (800862c <HAL_TIM_OnePulse_Init+0xb8>)
 80085ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f000 ff68 	bl	80094a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0208 	bic.w	r2, r2, #8
 80085de:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6819      	ldr	r1, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	08008631 	.word	0x08008631

08008630 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008654:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800865c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008664:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800866c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d108      	bne.n	8008686 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d105      	bne.n	8008686 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800867a:	7b7b      	ldrb	r3, [r7, #13]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d102      	bne.n	8008686 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008680:	7b3b      	ldrb	r3, [r7, #12]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d001      	beq.n	800868a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e059      	b.n	800873e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2202      	movs	r2, #2
 800868e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2202      	movs	r2, #2
 8008696:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2202      	movs	r2, #2
 800869e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2202      	movs	r2, #2
 80086a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f042 0202 	orr.w	r2, r2, #2
 80086b8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0204 	orr.w	r2, r2, #4
 80086c8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2201      	movs	r2, #1
 80086d0:	2100      	movs	r1, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 fb5e 	bl	8009d94 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2201      	movs	r2, #1
 80086de:	2104      	movs	r1, #4
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 fb57 	bl	8009d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a17      	ldr	r2, [pc, #92]	@ (8008748 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d018      	beq.n	8008722 <HAL_TIM_OnePulse_Start_IT+0xde>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a15      	ldr	r2, [pc, #84]	@ (800874c <HAL_TIM_OnePulse_Start_IT+0x108>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d013      	beq.n	8008722 <HAL_TIM_OnePulse_Start_IT+0xde>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a14      	ldr	r2, [pc, #80]	@ (8008750 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00e      	beq.n	8008722 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a12      	ldr	r2, [pc, #72]	@ (8008754 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d009      	beq.n	8008722 <HAL_TIM_OnePulse_Start_IT+0xde>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a11      	ldr	r2, [pc, #68]	@ (8008758 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d004      	beq.n	8008722 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a0f      	ldr	r2, [pc, #60]	@ (800875c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d101      	bne.n	8008726 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008722:	2301      	movs	r3, #1
 8008724:	e000      	b.n	8008728 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008726:	2300      	movs	r3, #0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800873a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	40012c00 	.word	0x40012c00
 800874c:	40013400 	.word	0x40013400
 8008750:	40014000 	.word	0x40014000
 8008754:	40014400 	.word	0x40014400
 8008758:	40014800 	.word	0x40014800
 800875c:	40015000 	.word	0x40015000

08008760 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e0a2      	b.n	80088ba <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d111      	bne.n	80087a4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f001 fb29 	bl	8009de0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008792:	2b00      	cmp	r3, #0
 8008794:	d102      	bne.n	800879c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a4a      	ldr	r2, [pc, #296]	@ (80088c4 <HAL_TIM_Encoder_Init+0x164>)
 800879a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6812      	ldr	r2, [r2, #0]
 80087b6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80087ba:	f023 0307 	bic.w	r3, r3, #7
 80087be:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3304      	adds	r3, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f000 fe68 	bl	80094a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087f8:	f023 0303 	bic.w	r3, r3, #3
 80087fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	4313      	orrs	r3, r2
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4313      	orrs	r3, r2
 800880e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008816:	f023 030c 	bic.w	r3, r3, #12
 800881a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008822:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	4313      	orrs	r3, r2
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	011a      	lsls	r2, r3, #4
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	031b      	lsls	r3, r3, #12
 8008846:	4313      	orrs	r3, r2
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008854:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800885c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685a      	ldr	r2, [r3, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	4313      	orrs	r3, r2
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	0800455d 	.word	0x0800455d

080088c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d110      	bne.n	800891a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d102      	bne.n	8008904 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80088fe:	7b7b      	ldrb	r3, [r7, #13]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d001      	beq.n	8008908 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e069      	b.n	80089dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2202      	movs	r2, #2
 800890c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008918:	e031      	b.n	800897e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b04      	cmp	r3, #4
 800891e:	d110      	bne.n	8008942 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d102      	bne.n	800892c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008926:	7b3b      	ldrb	r3, [r7, #12]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d001      	beq.n	8008930 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e055      	b.n	80089dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008940:	e01d      	b.n	800897e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008942:	7bfb      	ldrb	r3, [r7, #15]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d108      	bne.n	800895a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d105      	bne.n	800895a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800894e:	7b7b      	ldrb	r3, [r7, #13]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d102      	bne.n	800895a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008954:	7b3b      	ldrb	r3, [r7, #12]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d001      	beq.n	800895e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e03e      	b.n	80089dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2202      	movs	r2, #2
 8008962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2202      	movs	r2, #2
 800896a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2202      	movs	r2, #2
 8008972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2202      	movs	r2, #2
 800897a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d003      	beq.n	800898c <HAL_TIM_Encoder_Start+0xc4>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b04      	cmp	r3, #4
 8008988:	d008      	beq.n	800899c <HAL_TIM_Encoder_Start+0xd4>
 800898a:	e00f      	b.n	80089ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2201      	movs	r2, #1
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f001 f9fd 	bl	8009d94 <TIM_CCxChannelCmd>
      break;
 800899a:	e016      	b.n	80089ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2201      	movs	r2, #1
 80089a2:	2104      	movs	r1, #4
 80089a4:	4618      	mov	r0, r3
 80089a6:	f001 f9f5 	bl	8009d94 <TIM_CCxChannelCmd>
      break;
 80089aa:	e00e      	b.n	80089ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2201      	movs	r2, #1
 80089b2:	2100      	movs	r1, #0
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f9ed 	bl	8009d94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2201      	movs	r2, #1
 80089c0:	2104      	movs	r1, #4
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 f9e6 	bl	8009d94 <TIM_CCxChannelCmd>
      break;
 80089c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0201 	orr.w	r2, r2, #1
 80089d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d026      	beq.n	8008a54 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d021      	beq.n	8008a54 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0202 	mvn.w	r2, #2
 8008a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
 8008a38:	e009      	b.n	8008a4e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d026      	beq.n	8008aac <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d021      	beq.n	8008aac <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f06f 0204 	mvn.w	r2, #4
 8008a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
 8008a90:	e009      	b.n	8008aa6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f003 0308 	and.w	r3, r3, #8
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d026      	beq.n	8008b04 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f003 0308 	and.w	r3, r3, #8
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d021      	beq.n	8008b04 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f06f 0208 	mvn.w	r2, #8
 8008ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2204      	movs	r2, #4
 8008ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	f003 0303 	and.w	r3, r3, #3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d005      	beq.n	8008aea <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	4798      	blx	r3
 8008ae8:	e009      	b.n	8008afe <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f003 0310 	and.w	r3, r3, #16
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d026      	beq.n	8008b5c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d021      	beq.n	8008b5c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f06f 0210 	mvn.w	r2, #16
 8008b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2208      	movs	r2, #8
 8008b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d005      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	4798      	blx	r3
 8008b40:	e009      	b.n	8008b56 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00e      	beq.n	8008b84 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f06f 0201 	mvn.w	r2, #1
 8008b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d104      	bne.n	8008b98 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00e      	beq.n	8008bb6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d009      	beq.n	8008bb6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00e      	beq.n	8008bde <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00e      	beq.n	8008c06 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00e      	beq.n	8008c2e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f06f 0220 	mvn.w	r2, #32
 8008c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00e      	beq.n	8008c56 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00e      	beq.n	8008c7e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d009      	beq.n	8008c7e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00e      	beq.n	8008ca6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d009      	beq.n	8008ca6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00e      	beq.n	8008cce <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d009      	beq.n	8008cce <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cce:	bf00      	nop
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
	...

08008cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d101      	bne.n	8008cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	e0ff      	b.n	8008ef6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b14      	cmp	r3, #20
 8008d02:	f200 80f0 	bhi.w	8008ee6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d06:	a201      	add	r2, pc, #4	@ (adr r2, 8008d0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d61 	.word	0x08008d61
 8008d10:	08008ee7 	.word	0x08008ee7
 8008d14:	08008ee7 	.word	0x08008ee7
 8008d18:	08008ee7 	.word	0x08008ee7
 8008d1c:	08008da1 	.word	0x08008da1
 8008d20:	08008ee7 	.word	0x08008ee7
 8008d24:	08008ee7 	.word	0x08008ee7
 8008d28:	08008ee7 	.word	0x08008ee7
 8008d2c:	08008de3 	.word	0x08008de3
 8008d30:	08008ee7 	.word	0x08008ee7
 8008d34:	08008ee7 	.word	0x08008ee7
 8008d38:	08008ee7 	.word	0x08008ee7
 8008d3c:	08008e23 	.word	0x08008e23
 8008d40:	08008ee7 	.word	0x08008ee7
 8008d44:	08008ee7 	.word	0x08008ee7
 8008d48:	08008ee7 	.word	0x08008ee7
 8008d4c:	08008e65 	.word	0x08008e65
 8008d50:	08008ee7 	.word	0x08008ee7
 8008d54:	08008ee7 	.word	0x08008ee7
 8008d58:	08008ee7 	.word	0x08008ee7
 8008d5c:	08008ea5 	.word	0x08008ea5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 fc4e 	bl	8009608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	699a      	ldr	r2, [r3, #24]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f042 0208 	orr.w	r2, r2, #8
 8008d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0204 	bic.w	r2, r2, #4
 8008d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6999      	ldr	r1, [r3, #24]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	691a      	ldr	r2, [r3, #16]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	619a      	str	r2, [r3, #24]
      break;
 8008d9e:	e0a5      	b.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fcc8 	bl	800973c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699a      	ldr	r2, [r3, #24]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	699a      	ldr	r2, [r3, #24]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6999      	ldr	r1, [r3, #24]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	021a      	lsls	r2, r3, #8
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	619a      	str	r2, [r3, #24]
      break;
 8008de0:	e084      	b.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 fd3b 	bl	8009864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	69da      	ldr	r2, [r3, #28]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0208 	orr.w	r2, r2, #8
 8008dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69da      	ldr	r2, [r3, #28]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0204 	bic.w	r2, r2, #4
 8008e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69d9      	ldr	r1, [r3, #28]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	61da      	str	r2, [r3, #28]
      break;
 8008e20:	e064      	b.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68b9      	ldr	r1, [r7, #8]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 fdad 	bl	8009988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69da      	ldr	r2, [r3, #28]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69da      	ldr	r2, [r3, #28]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69d9      	ldr	r1, [r3, #28]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	021a      	lsls	r2, r3, #8
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	61da      	str	r2, [r3, #28]
      break;
 8008e62:	e043      	b.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68b9      	ldr	r1, [r7, #8]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fe20 	bl	8009ab0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f042 0208 	orr.w	r2, r2, #8
 8008e7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0204 	bic.w	r2, r2, #4
 8008e8e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	691a      	ldr	r2, [r3, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ea2:	e023      	b.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68b9      	ldr	r1, [r7, #8]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fe6a 	bl	8009b84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ebe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ece:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	021a      	lsls	r2, r3, #8
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ee4:	e002      	b.n	8008eec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8008eea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop

08008f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <HAL_TIM_ConfigClockSource+0x1c>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e0f6      	b.n	800910a <HAL_TIM_ConfigClockSource+0x20a>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008f3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a6f      	ldr	r2, [pc, #444]	@ (8009114 <HAL_TIM_ConfigClockSource+0x214>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	f000 80c1 	beq.w	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8008f5c:	4a6d      	ldr	r2, [pc, #436]	@ (8009114 <HAL_TIM_ConfigClockSource+0x214>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	f200 80c6 	bhi.w	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f64:	4a6c      	ldr	r2, [pc, #432]	@ (8009118 <HAL_TIM_ConfigClockSource+0x218>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	f000 80b9 	beq.w	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8008f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8009118 <HAL_TIM_ConfigClockSource+0x218>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	f200 80be 	bhi.w	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f74:	4a69      	ldr	r2, [pc, #420]	@ (800911c <HAL_TIM_ConfigClockSource+0x21c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	f000 80b1 	beq.w	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8008f7c:	4a67      	ldr	r2, [pc, #412]	@ (800911c <HAL_TIM_ConfigClockSource+0x21c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	f200 80b6 	bhi.w	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f84:	4a66      	ldr	r2, [pc, #408]	@ (8009120 <HAL_TIM_ConfigClockSource+0x220>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	f000 80a9 	beq.w	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8008f8c:	4a64      	ldr	r2, [pc, #400]	@ (8009120 <HAL_TIM_ConfigClockSource+0x220>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	f200 80ae 	bhi.w	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008f94:	4a63      	ldr	r2, [pc, #396]	@ (8009124 <HAL_TIM_ConfigClockSource+0x224>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	f000 80a1 	beq.w	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8008f9c:	4a61      	ldr	r2, [pc, #388]	@ (8009124 <HAL_TIM_ConfigClockSource+0x224>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	f200 80a6 	bhi.w	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fa4:	4a60      	ldr	r2, [pc, #384]	@ (8009128 <HAL_TIM_ConfigClockSource+0x228>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	f000 8099 	beq.w	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8008fac:	4a5e      	ldr	r2, [pc, #376]	@ (8009128 <HAL_TIM_ConfigClockSource+0x228>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	f200 809e 	bhi.w	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008fb8:	f000 8091 	beq.w	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8008fbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008fc0:	f200 8096 	bhi.w	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fc8:	f000 8089 	beq.w	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8008fcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fd0:	f200 808e 	bhi.w	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fd8:	d03e      	beq.n	8009058 <HAL_TIM_ConfigClockSource+0x158>
 8008fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fde:	f200 8087 	bhi.w	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fe6:	f000 8086 	beq.w	80090f6 <HAL_TIM_ConfigClockSource+0x1f6>
 8008fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fee:	d87f      	bhi.n	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ff0:	2b70      	cmp	r3, #112	@ 0x70
 8008ff2:	d01a      	beq.n	800902a <HAL_TIM_ConfigClockSource+0x12a>
 8008ff4:	2b70      	cmp	r3, #112	@ 0x70
 8008ff6:	d87b      	bhi.n	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ff8:	2b60      	cmp	r3, #96	@ 0x60
 8008ffa:	d050      	beq.n	800909e <HAL_TIM_ConfigClockSource+0x19e>
 8008ffc:	2b60      	cmp	r3, #96	@ 0x60
 8008ffe:	d877      	bhi.n	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009000:	2b50      	cmp	r3, #80	@ 0x50
 8009002:	d03c      	beq.n	800907e <HAL_TIM_ConfigClockSource+0x17e>
 8009004:	2b50      	cmp	r3, #80	@ 0x50
 8009006:	d873      	bhi.n	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009008:	2b40      	cmp	r3, #64	@ 0x40
 800900a:	d058      	beq.n	80090be <HAL_TIM_ConfigClockSource+0x1be>
 800900c:	2b40      	cmp	r3, #64	@ 0x40
 800900e:	d86f      	bhi.n	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009010:	2b30      	cmp	r3, #48	@ 0x30
 8009012:	d064      	beq.n	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8009014:	2b30      	cmp	r3, #48	@ 0x30
 8009016:	d86b      	bhi.n	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009018:	2b20      	cmp	r3, #32
 800901a:	d060      	beq.n	80090de <HAL_TIM_ConfigClockSource+0x1de>
 800901c:	2b20      	cmp	r3, #32
 800901e:	d867      	bhi.n	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8009020:	2b00      	cmp	r3, #0
 8009022:	d05c      	beq.n	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8009024:	2b10      	cmp	r3, #16
 8009026:	d05a      	beq.n	80090de <HAL_TIM_ConfigClockSource+0x1de>
 8009028:	e062      	b.n	80090f0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800903a:	f000 fe8b 	bl	8009d54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800904c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	609a      	str	r2, [r3, #8]
      break;
 8009056:	e04f      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009068:	f000 fe74 	bl	8009d54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689a      	ldr	r2, [r3, #8]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800907a:	609a      	str	r2, [r3, #8]
      break;
 800907c:	e03c      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800908a:	461a      	mov	r2, r3
 800908c:	f000 fde6 	bl	8009c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2150      	movs	r1, #80	@ 0x50
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fe3f 	bl	8009d1a <TIM_ITRx_SetConfig>
      break;
 800909c:	e02c      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090aa:	461a      	mov	r2, r3
 80090ac:	f000 fe05 	bl	8009cba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2160      	movs	r1, #96	@ 0x60
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fe2f 	bl	8009d1a <TIM_ITRx_SetConfig>
      break;
 80090bc:	e01c      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ca:	461a      	mov	r2, r3
 80090cc:	f000 fdc6 	bl	8009c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2140      	movs	r1, #64	@ 0x40
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fe1f 	bl	8009d1a <TIM_ITRx_SetConfig>
      break;
 80090dc:	e00c      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4619      	mov	r1, r3
 80090e8:	4610      	mov	r0, r2
 80090ea:	f000 fe16 	bl	8009d1a <TIM_ITRx_SetConfig>
      break;
 80090ee:	e003      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]
      break;
 80090f4:	e000      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80090f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009108:	7bfb      	ldrb	r3, [r7, #15]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	00100070 	.word	0x00100070
 8009118:	00100060 	.word	0x00100060
 800911c:	00100050 	.word	0x00100050
 8009120:	00100040 	.word	0x00100040
 8009124:	00100030 	.word	0x00100030
 8009128:	00100020 	.word	0x00100020

0800912c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	460b      	mov	r3, r1
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e14a      	b.n	8009492 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009202:	b2db      	uxtb	r3, r3
 8009204:	2b01      	cmp	r3, #1
 8009206:	f040 80dd 	bne.w	80093c4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	2b1f      	cmp	r3, #31
 800920e:	f200 80d6 	bhi.w	80093be <HAL_TIM_RegisterCallback+0x1de>
 8009212:	a201      	add	r2, pc, #4	@ (adr r2, 8009218 <HAL_TIM_RegisterCallback+0x38>)
 8009214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009218:	08009299 	.word	0x08009299
 800921c:	080092a1 	.word	0x080092a1
 8009220:	080092a9 	.word	0x080092a9
 8009224:	080092b1 	.word	0x080092b1
 8009228:	080092b9 	.word	0x080092b9
 800922c:	080092c1 	.word	0x080092c1
 8009230:	080092c9 	.word	0x080092c9
 8009234:	080092d1 	.word	0x080092d1
 8009238:	080092d9 	.word	0x080092d9
 800923c:	080092e1 	.word	0x080092e1
 8009240:	080092e9 	.word	0x080092e9
 8009244:	080092f1 	.word	0x080092f1
 8009248:	080092f9 	.word	0x080092f9
 800924c:	08009301 	.word	0x08009301
 8009250:	0800930b 	.word	0x0800930b
 8009254:	08009315 	.word	0x08009315
 8009258:	0800931f 	.word	0x0800931f
 800925c:	08009329 	.word	0x08009329
 8009260:	08009333 	.word	0x08009333
 8009264:	0800933d 	.word	0x0800933d
 8009268:	08009347 	.word	0x08009347
 800926c:	08009351 	.word	0x08009351
 8009270:	0800935b 	.word	0x0800935b
 8009274:	08009365 	.word	0x08009365
 8009278:	0800936f 	.word	0x0800936f
 800927c:	08009379 	.word	0x08009379
 8009280:	08009383 	.word	0x08009383
 8009284:	0800938d 	.word	0x0800938d
 8009288:	08009397 	.word	0x08009397
 800928c:	080093a1 	.word	0x080093a1
 8009290:	080093ab 	.word	0x080093ab
 8009294:	080093b5 	.word	0x080093b5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800929e:	e0f7      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80092a6:	e0f3      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80092ae:	e0ef      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80092b6:	e0eb      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80092be:	e0e7      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80092c6:	e0e3      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80092ce:	e0df      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80092d6:	e0db      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80092de:	e0d7      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80092e6:	e0d3      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80092ee:	e0cf      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80092f6:	e0cb      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80092fe:	e0c7      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009308:	e0c2      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009312:	e0bd      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800931c:	e0b8      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009326:	e0b3      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009330:	e0ae      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800933a:	e0a9      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009344:	e0a4      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800934e:	e09f      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009358:	e09a      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009362:	e095      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800936c:	e090      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009376:	e08b      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009380:	e086      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800938a:	e081      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009394:	e07c      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800939e:	e077      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80093a8:	e072      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80093b2:	e06d      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80093bc:	e068      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	75fb      	strb	r3, [r7, #23]
        break;
 80093c2:	e065      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d15d      	bne.n	800948c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80093d0:	7afb      	ldrb	r3, [r7, #11]
 80093d2:	2b0d      	cmp	r3, #13
 80093d4:	d857      	bhi.n	8009486 <HAL_TIM_RegisterCallback+0x2a6>
 80093d6:	a201      	add	r2, pc, #4	@ (adr r2, 80093dc <HAL_TIM_RegisterCallback+0x1fc>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	08009415 	.word	0x08009415
 80093e0:	0800941d 	.word	0x0800941d
 80093e4:	08009425 	.word	0x08009425
 80093e8:	0800942d 	.word	0x0800942d
 80093ec:	08009435 	.word	0x08009435
 80093f0:	0800943d 	.word	0x0800943d
 80093f4:	08009445 	.word	0x08009445
 80093f8:	0800944d 	.word	0x0800944d
 80093fc:	08009455 	.word	0x08009455
 8009400:	0800945d 	.word	0x0800945d
 8009404:	08009465 	.word	0x08009465
 8009408:	0800946d 	.word	0x0800946d
 800940c:	08009475 	.word	0x08009475
 8009410:	0800947d 	.word	0x0800947d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800941a:	e039      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009422:	e035      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800942a:	e031      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009432:	e02d      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800943a:	e029      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009442:	e025      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800944a:	e021      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009452:	e01d      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800945a:	e019      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009462:	e015      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800946a:	e011      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009472:	e00d      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800947a:	e009      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009484:	e004      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	75fb      	strb	r3, [r7, #23]
        break;
 800948a:	e001      	b.n	8009490 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
}
 8009492:	4618      	mov	r0, r3
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop

080094a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a4c      	ldr	r2, [pc, #304]	@ (80095e4 <TIM_Base_SetConfig+0x144>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d017      	beq.n	80094e8 <TIM_Base_SetConfig+0x48>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094be:	d013      	beq.n	80094e8 <TIM_Base_SetConfig+0x48>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a49      	ldr	r2, [pc, #292]	@ (80095e8 <TIM_Base_SetConfig+0x148>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00f      	beq.n	80094e8 <TIM_Base_SetConfig+0x48>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a48      	ldr	r2, [pc, #288]	@ (80095ec <TIM_Base_SetConfig+0x14c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00b      	beq.n	80094e8 <TIM_Base_SetConfig+0x48>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a47      	ldr	r2, [pc, #284]	@ (80095f0 <TIM_Base_SetConfig+0x150>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d007      	beq.n	80094e8 <TIM_Base_SetConfig+0x48>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a46      	ldr	r2, [pc, #280]	@ (80095f4 <TIM_Base_SetConfig+0x154>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d003      	beq.n	80094e8 <TIM_Base_SetConfig+0x48>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a45      	ldr	r2, [pc, #276]	@ (80095f8 <TIM_Base_SetConfig+0x158>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d108      	bne.n	80094fa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a39      	ldr	r2, [pc, #228]	@ (80095e4 <TIM_Base_SetConfig+0x144>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d023      	beq.n	800954a <TIM_Base_SetConfig+0xaa>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009508:	d01f      	beq.n	800954a <TIM_Base_SetConfig+0xaa>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a36      	ldr	r2, [pc, #216]	@ (80095e8 <TIM_Base_SetConfig+0x148>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d01b      	beq.n	800954a <TIM_Base_SetConfig+0xaa>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a35      	ldr	r2, [pc, #212]	@ (80095ec <TIM_Base_SetConfig+0x14c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d017      	beq.n	800954a <TIM_Base_SetConfig+0xaa>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a34      	ldr	r2, [pc, #208]	@ (80095f0 <TIM_Base_SetConfig+0x150>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d013      	beq.n	800954a <TIM_Base_SetConfig+0xaa>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a33      	ldr	r2, [pc, #204]	@ (80095f4 <TIM_Base_SetConfig+0x154>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d00f      	beq.n	800954a <TIM_Base_SetConfig+0xaa>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a33      	ldr	r2, [pc, #204]	@ (80095fc <TIM_Base_SetConfig+0x15c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d00b      	beq.n	800954a <TIM_Base_SetConfig+0xaa>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a32      	ldr	r2, [pc, #200]	@ (8009600 <TIM_Base_SetConfig+0x160>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d007      	beq.n	800954a <TIM_Base_SetConfig+0xaa>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a31      	ldr	r2, [pc, #196]	@ (8009604 <TIM_Base_SetConfig+0x164>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d003      	beq.n	800954a <TIM_Base_SetConfig+0xaa>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a2c      	ldr	r2, [pc, #176]	@ (80095f8 <TIM_Base_SetConfig+0x158>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d108      	bne.n	800955c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a18      	ldr	r2, [pc, #96]	@ (80095e4 <TIM_Base_SetConfig+0x144>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d013      	beq.n	80095b0 <TIM_Base_SetConfig+0x110>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a1a      	ldr	r2, [pc, #104]	@ (80095f4 <TIM_Base_SetConfig+0x154>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d00f      	beq.n	80095b0 <TIM_Base_SetConfig+0x110>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a1a      	ldr	r2, [pc, #104]	@ (80095fc <TIM_Base_SetConfig+0x15c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00b      	beq.n	80095b0 <TIM_Base_SetConfig+0x110>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a19      	ldr	r2, [pc, #100]	@ (8009600 <TIM_Base_SetConfig+0x160>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d007      	beq.n	80095b0 <TIM_Base_SetConfig+0x110>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a18      	ldr	r2, [pc, #96]	@ (8009604 <TIM_Base_SetConfig+0x164>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d003      	beq.n	80095b0 <TIM_Base_SetConfig+0x110>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a13      	ldr	r2, [pc, #76]	@ (80095f8 <TIM_Base_SetConfig+0x158>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d103      	bne.n	80095b8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	691a      	ldr	r2, [r3, #16]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d105      	bne.n	80095d6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	f023 0201 	bic.w	r2, r3, #1
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	611a      	str	r2, [r3, #16]
  }
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	40012c00 	.word	0x40012c00
 80095e8:	40000400 	.word	0x40000400
 80095ec:	40000800 	.word	0x40000800
 80095f0:	40000c00 	.word	0x40000c00
 80095f4:	40013400 	.word	0x40013400
 80095f8:	40015000 	.word	0x40015000
 80095fc:	40014000 	.word	0x40014000
 8009600:	40014400 	.word	0x40014400
 8009604:	40014800 	.word	0x40014800

08009608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	f023 0201 	bic.w	r2, r3, #1
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800963a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 0303 	bic.w	r3, r3, #3
 8009642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f023 0302 	bic.w	r3, r3, #2
 8009654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	4313      	orrs	r3, r2
 800965e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a30      	ldr	r2, [pc, #192]	@ (8009724 <TIM_OC1_SetConfig+0x11c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d013      	beq.n	8009690 <TIM_OC1_SetConfig+0x88>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a2f      	ldr	r2, [pc, #188]	@ (8009728 <TIM_OC1_SetConfig+0x120>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d00f      	beq.n	8009690 <TIM_OC1_SetConfig+0x88>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a2e      	ldr	r2, [pc, #184]	@ (800972c <TIM_OC1_SetConfig+0x124>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d00b      	beq.n	8009690 <TIM_OC1_SetConfig+0x88>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a2d      	ldr	r2, [pc, #180]	@ (8009730 <TIM_OC1_SetConfig+0x128>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d007      	beq.n	8009690 <TIM_OC1_SetConfig+0x88>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a2c      	ldr	r2, [pc, #176]	@ (8009734 <TIM_OC1_SetConfig+0x12c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d003      	beq.n	8009690 <TIM_OC1_SetConfig+0x88>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a2b      	ldr	r2, [pc, #172]	@ (8009738 <TIM_OC1_SetConfig+0x130>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d10c      	bne.n	80096aa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f023 0308 	bic.w	r3, r3, #8
 8009696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	4313      	orrs	r3, r2
 80096a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f023 0304 	bic.w	r3, r3, #4
 80096a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009724 <TIM_OC1_SetConfig+0x11c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d013      	beq.n	80096da <TIM_OC1_SetConfig+0xd2>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009728 <TIM_OC1_SetConfig+0x120>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d00f      	beq.n	80096da <TIM_OC1_SetConfig+0xd2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a1b      	ldr	r2, [pc, #108]	@ (800972c <TIM_OC1_SetConfig+0x124>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d00b      	beq.n	80096da <TIM_OC1_SetConfig+0xd2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a1a      	ldr	r2, [pc, #104]	@ (8009730 <TIM_OC1_SetConfig+0x128>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d007      	beq.n	80096da <TIM_OC1_SetConfig+0xd2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a19      	ldr	r2, [pc, #100]	@ (8009734 <TIM_OC1_SetConfig+0x12c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d003      	beq.n	80096da <TIM_OC1_SetConfig+0xd2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a18      	ldr	r2, [pc, #96]	@ (8009738 <TIM_OC1_SetConfig+0x130>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d111      	bne.n	80096fe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	621a      	str	r2, [r3, #32]
}
 8009718:	bf00      	nop
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	40012c00 	.word	0x40012c00
 8009728:	40013400 	.word	0x40013400
 800972c:	40014000 	.word	0x40014000
 8009730:	40014400 	.word	0x40014400
 8009734:	40014800 	.word	0x40014800
 8009738:	40015000 	.word	0x40015000

0800973c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	f023 0210 	bic.w	r2, r3, #16
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800976a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800976e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	021b      	lsls	r3, r3, #8
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	4313      	orrs	r3, r2
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f023 0320 	bic.w	r3, r3, #32
 800978a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	4313      	orrs	r3, r2
 8009796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a2c      	ldr	r2, [pc, #176]	@ (800984c <TIM_OC2_SetConfig+0x110>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d007      	beq.n	80097b0 <TIM_OC2_SetConfig+0x74>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a2b      	ldr	r2, [pc, #172]	@ (8009850 <TIM_OC2_SetConfig+0x114>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d003      	beq.n	80097b0 <TIM_OC2_SetConfig+0x74>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009854 <TIM_OC2_SetConfig+0x118>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d10d      	bne.n	80097cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	011b      	lsls	r3, r3, #4
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a1f      	ldr	r2, [pc, #124]	@ (800984c <TIM_OC2_SetConfig+0x110>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d013      	beq.n	80097fc <TIM_OC2_SetConfig+0xc0>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009850 <TIM_OC2_SetConfig+0x114>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d00f      	beq.n	80097fc <TIM_OC2_SetConfig+0xc0>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a1e      	ldr	r2, [pc, #120]	@ (8009858 <TIM_OC2_SetConfig+0x11c>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d00b      	beq.n	80097fc <TIM_OC2_SetConfig+0xc0>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a1d      	ldr	r2, [pc, #116]	@ (800985c <TIM_OC2_SetConfig+0x120>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d007      	beq.n	80097fc <TIM_OC2_SetConfig+0xc0>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009860 <TIM_OC2_SetConfig+0x124>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d003      	beq.n	80097fc <TIM_OC2_SetConfig+0xc0>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a17      	ldr	r2, [pc, #92]	@ (8009854 <TIM_OC2_SetConfig+0x118>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d113      	bne.n	8009824 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800980a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	4313      	orrs	r3, r2
 8009816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	4313      	orrs	r3, r2
 8009822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	621a      	str	r2, [r3, #32]
}
 800983e:	bf00      	nop
 8009840:	371c      	adds	r7, #28
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	40012c00 	.word	0x40012c00
 8009850:	40013400 	.word	0x40013400
 8009854:	40015000 	.word	0x40015000
 8009858:	40014000 	.word	0x40014000
 800985c:	40014400 	.word	0x40014400
 8009860:	40014800 	.word	0x40014800

08009864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009864:	b480      	push	{r7}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0303 	bic.w	r3, r3, #3
 800989e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	021b      	lsls	r3, r3, #8
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a2b      	ldr	r2, [pc, #172]	@ (8009970 <TIM_OC3_SetConfig+0x10c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d007      	beq.n	80098d6 <TIM_OC3_SetConfig+0x72>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a2a      	ldr	r2, [pc, #168]	@ (8009974 <TIM_OC3_SetConfig+0x110>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d003      	beq.n	80098d6 <TIM_OC3_SetConfig+0x72>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a29      	ldr	r2, [pc, #164]	@ (8009978 <TIM_OC3_SetConfig+0x114>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d10d      	bne.n	80098f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	021b      	lsls	r3, r3, #8
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a1e      	ldr	r2, [pc, #120]	@ (8009970 <TIM_OC3_SetConfig+0x10c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d013      	beq.n	8009922 <TIM_OC3_SetConfig+0xbe>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009974 <TIM_OC3_SetConfig+0x110>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00f      	beq.n	8009922 <TIM_OC3_SetConfig+0xbe>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a1d      	ldr	r2, [pc, #116]	@ (800997c <TIM_OC3_SetConfig+0x118>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00b      	beq.n	8009922 <TIM_OC3_SetConfig+0xbe>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a1c      	ldr	r2, [pc, #112]	@ (8009980 <TIM_OC3_SetConfig+0x11c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d007      	beq.n	8009922 <TIM_OC3_SetConfig+0xbe>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a1b      	ldr	r2, [pc, #108]	@ (8009984 <TIM_OC3_SetConfig+0x120>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d003      	beq.n	8009922 <TIM_OC3_SetConfig+0xbe>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a16      	ldr	r2, [pc, #88]	@ (8009978 <TIM_OC3_SetConfig+0x114>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d113      	bne.n	800994a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	4313      	orrs	r3, r2
 800993c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685a      	ldr	r2, [r3, #4]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	621a      	str	r2, [r3, #32]
}
 8009964:	bf00      	nop
 8009966:	371c      	adds	r7, #28
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	40012c00 	.word	0x40012c00
 8009974:	40013400 	.word	0x40013400
 8009978:	40015000 	.word	0x40015000
 800997c:	40014000 	.word	0x40014000
 8009980:	40014400 	.word	0x40014400
 8009984:	40014800 	.word	0x40014800

08009988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	021b      	lsls	r3, r3, #8
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80099d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	031b      	lsls	r3, r3, #12
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009a98 <TIM_OC4_SetConfig+0x110>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d007      	beq.n	80099fc <TIM_OC4_SetConfig+0x74>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a2b      	ldr	r2, [pc, #172]	@ (8009a9c <TIM_OC4_SetConfig+0x114>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d003      	beq.n	80099fc <TIM_OC4_SetConfig+0x74>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a2a      	ldr	r2, [pc, #168]	@ (8009aa0 <TIM_OC4_SetConfig+0x118>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d10d      	bne.n	8009a18 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	031b      	lsls	r3, r3, #12
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009a98 <TIM_OC4_SetConfig+0x110>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d013      	beq.n	8009a48 <TIM_OC4_SetConfig+0xc0>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a1e      	ldr	r2, [pc, #120]	@ (8009a9c <TIM_OC4_SetConfig+0x114>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00f      	beq.n	8009a48 <TIM_OC4_SetConfig+0xc0>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8009aa4 <TIM_OC4_SetConfig+0x11c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d00b      	beq.n	8009a48 <TIM_OC4_SetConfig+0xc0>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a1d      	ldr	r2, [pc, #116]	@ (8009aa8 <TIM_OC4_SetConfig+0x120>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d007      	beq.n	8009a48 <TIM_OC4_SetConfig+0xc0>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8009aac <TIM_OC4_SetConfig+0x124>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d003      	beq.n	8009a48 <TIM_OC4_SetConfig+0xc0>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a17      	ldr	r2, [pc, #92]	@ (8009aa0 <TIM_OC4_SetConfig+0x118>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d113      	bne.n	8009a70 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a4e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a56:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	695b      	ldr	r3, [r3, #20]
 8009a5c:	019b      	lsls	r3, r3, #6
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	019b      	lsls	r3, r3, #6
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	621a      	str	r2, [r3, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	40012c00 	.word	0x40012c00
 8009a9c:	40013400 	.word	0x40013400
 8009aa0:	40015000 	.word	0x40015000
 8009aa4:	40014000 	.word	0x40014000
 8009aa8:	40014400 	.word	0x40014400
 8009aac:	40014800 	.word	0x40014800

08009ab0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009af4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	041b      	lsls	r3, r3, #16
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a19      	ldr	r2, [pc, #100]	@ (8009b6c <TIM_OC5_SetConfig+0xbc>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d013      	beq.n	8009b32 <TIM_OC5_SetConfig+0x82>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a18      	ldr	r2, [pc, #96]	@ (8009b70 <TIM_OC5_SetConfig+0xc0>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d00f      	beq.n	8009b32 <TIM_OC5_SetConfig+0x82>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a17      	ldr	r2, [pc, #92]	@ (8009b74 <TIM_OC5_SetConfig+0xc4>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d00b      	beq.n	8009b32 <TIM_OC5_SetConfig+0x82>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a16      	ldr	r2, [pc, #88]	@ (8009b78 <TIM_OC5_SetConfig+0xc8>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d007      	beq.n	8009b32 <TIM_OC5_SetConfig+0x82>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a15      	ldr	r2, [pc, #84]	@ (8009b7c <TIM_OC5_SetConfig+0xcc>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d003      	beq.n	8009b32 <TIM_OC5_SetConfig+0x82>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a14      	ldr	r2, [pc, #80]	@ (8009b80 <TIM_OC5_SetConfig+0xd0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d109      	bne.n	8009b46 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	621a      	str	r2, [r3, #32]
}
 8009b60:	bf00      	nop
 8009b62:	371c      	adds	r7, #28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	40012c00 	.word	0x40012c00
 8009b70:	40013400 	.word	0x40013400
 8009b74:	40014000 	.word	0x40014000
 8009b78:	40014400 	.word	0x40014400
 8009b7c:	40014800 	.word	0x40014800
 8009b80:	40015000 	.word	0x40015000

08009b84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	021b      	lsls	r3, r3, #8
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	051b      	lsls	r3, r3, #20
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a1a      	ldr	r2, [pc, #104]	@ (8009c44 <TIM_OC6_SetConfig+0xc0>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d013      	beq.n	8009c08 <TIM_OC6_SetConfig+0x84>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a19      	ldr	r2, [pc, #100]	@ (8009c48 <TIM_OC6_SetConfig+0xc4>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00f      	beq.n	8009c08 <TIM_OC6_SetConfig+0x84>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a18      	ldr	r2, [pc, #96]	@ (8009c4c <TIM_OC6_SetConfig+0xc8>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d00b      	beq.n	8009c08 <TIM_OC6_SetConfig+0x84>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a17      	ldr	r2, [pc, #92]	@ (8009c50 <TIM_OC6_SetConfig+0xcc>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d007      	beq.n	8009c08 <TIM_OC6_SetConfig+0x84>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a16      	ldr	r2, [pc, #88]	@ (8009c54 <TIM_OC6_SetConfig+0xd0>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d003      	beq.n	8009c08 <TIM_OC6_SetConfig+0x84>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a15      	ldr	r2, [pc, #84]	@ (8009c58 <TIM_OC6_SetConfig+0xd4>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d109      	bne.n	8009c1c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	029b      	lsls	r3, r3, #10
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	621a      	str	r2, [r3, #32]
}
 8009c36:	bf00      	nop
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	40012c00 	.word	0x40012c00
 8009c48:	40013400 	.word	0x40013400
 8009c4c:	40014000 	.word	0x40014000
 8009c50:	40014400 	.word	0x40014400
 8009c54:	40014800 	.word	0x40014800
 8009c58:	40015000 	.word	0x40015000

08009c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	f023 0201 	bic.w	r2, r3, #1
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f023 030a 	bic.w	r3, r3, #10
 8009c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	621a      	str	r2, [r3, #32]
}
 8009cae:	bf00      	nop
 8009cb0:	371c      	adds	r7, #28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b087      	sub	sp, #28
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	60f8      	str	r0, [r7, #12]
 8009cc2:	60b9      	str	r1, [r7, #8]
 8009cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	f023 0210 	bic.w	r2, r3, #16
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	031b      	lsls	r3, r3, #12
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009cf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	011b      	lsls	r3, r3, #4
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	621a      	str	r2, [r3, #32]
}
 8009d0e:	bf00      	nop
 8009d10:	371c      	adds	r7, #28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	f043 0307 	orr.w	r3, r3, #7
 8009d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	609a      	str	r2, [r3, #8]
}
 8009d48:	bf00      	nop
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
 8009d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	021a      	lsls	r2, r3, #8
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	431a      	orrs	r2, r3
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	609a      	str	r2, [r3, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	371c      	adds	r7, #28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f003 031f 	and.w	r3, r3, #31
 8009da6:	2201      	movs	r2, #1
 8009da8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6a1a      	ldr	r2, [r3, #32]
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	43db      	mvns	r3, r3
 8009db6:	401a      	ands	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6a1a      	ldr	r2, [r3, #32]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f003 031f 	and.w	r3, r3, #31
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	621a      	str	r2, [r3, #32]
}
 8009dd2:	bf00      	nop
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
	...

08009de0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a26      	ldr	r2, [pc, #152]	@ (8009e84 <TIM_ResetCallback+0xa4>)
 8009dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a25      	ldr	r2, [pc, #148]	@ (8009e88 <TIM_ResetCallback+0xa8>)
 8009df4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a24      	ldr	r2, [pc, #144]	@ (8009e8c <TIM_ResetCallback+0xac>)
 8009dfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a23      	ldr	r2, [pc, #140]	@ (8009e90 <TIM_ResetCallback+0xb0>)
 8009e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a22      	ldr	r2, [pc, #136]	@ (8009e94 <TIM_ResetCallback+0xb4>)
 8009e0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a21      	ldr	r2, [pc, #132]	@ (8009e98 <TIM_ResetCallback+0xb8>)
 8009e14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a20      	ldr	r2, [pc, #128]	@ (8009e9c <TIM_ResetCallback+0xbc>)
 8009e1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a1f      	ldr	r2, [pc, #124]	@ (8009ea0 <TIM_ResetCallback+0xc0>)
 8009e24:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ea4 <TIM_ResetCallback+0xc4>)
 8009e2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea8 <TIM_ResetCallback+0xc8>)
 8009e34:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8009eac <TIM_ResetCallback+0xcc>)
 8009e3c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a1b      	ldr	r2, [pc, #108]	@ (8009eb0 <TIM_ResetCallback+0xd0>)
 8009e44:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8009eb4 <TIM_ResetCallback+0xd4>)
 8009e4c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a19      	ldr	r2, [pc, #100]	@ (8009eb8 <TIM_ResetCallback+0xd8>)
 8009e54:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a18      	ldr	r2, [pc, #96]	@ (8009ebc <TIM_ResetCallback+0xdc>)
 8009e5c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a17      	ldr	r2, [pc, #92]	@ (8009ec0 <TIM_ResetCallback+0xe0>)
 8009e64:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a16      	ldr	r2, [pc, #88]	@ (8009ec4 <TIM_ResetCallback+0xe4>)
 8009e6c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a15      	ldr	r2, [pc, #84]	@ (8009ec8 <TIM_ResetCallback+0xe8>)
 8009e74:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	08004205 	.word	0x08004205
 8009e88:	0800912d 	.word	0x0800912d
 8009e8c:	080091a5 	.word	0x080091a5
 8009e90:	080091b9 	.word	0x080091b9
 8009e94:	08009155 	.word	0x08009155
 8009e98:	08009169 	.word	0x08009169
 8009e9c:	08009141 	.word	0x08009141
 8009ea0:	0800917d 	.word	0x0800917d
 8009ea4:	08009191 	.word	0x08009191
 8009ea8:	080091cd 	.word	0x080091cd
 8009eac:	08009ff9 	.word	0x08009ff9
 8009eb0:	0800a00d 	.word	0x0800a00d
 8009eb4:	0800a021 	.word	0x0800a021
 8009eb8:	0800a035 	.word	0x0800a035
 8009ebc:	0800a049 	.word	0x0800a049
 8009ec0:	0800a05d 	.word	0x0800a05d
 8009ec4:	0800a071 	.word	0x0800a071
 8009ec8:	0800a085 	.word	0x0800a085

08009ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e074      	b.n	8009fce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a34      	ldr	r2, [pc, #208]	@ (8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d009      	beq.n	8009f22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a33      	ldr	r2, [pc, #204]	@ (8009fe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d004      	beq.n	8009f22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a31      	ldr	r2, [pc, #196]	@ (8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d108      	bne.n	8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009f28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a21      	ldr	r2, [pc, #132]	@ (8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d022      	beq.n	8009fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f64:	d01d      	beq.n	8009fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d018      	beq.n	8009fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a1d      	ldr	r2, [pc, #116]	@ (8009fec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d013      	beq.n	8009fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ff0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d00e      	beq.n	8009fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a15      	ldr	r2, [pc, #84]	@ (8009fe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d009      	beq.n	8009fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a18      	ldr	r2, [pc, #96]	@ (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d004      	beq.n	8009fa2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a11      	ldr	r2, [pc, #68]	@ (8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d10c      	bne.n	8009fbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	40012c00 	.word	0x40012c00
 8009fe0:	40013400 	.word	0x40013400
 8009fe4:	40015000 	.word	0x40015000
 8009fe8:	40000400 	.word	0x40000400
 8009fec:	40000800 	.word	0x40000800
 8009ff0:	40000c00 	.word	0x40000c00
 8009ff4:	40014000 	.word	0x40014000

08009ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e050      	b.n	800a14c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d114      	bne.n	800a0de <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fdc5 	bl	800ac4c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d103      	bne.n	800a0d4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a21      	ldr	r2, [pc, #132]	@ (800a154 <HAL_UART_Init+0xbc>)
 800a0d0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2224      	movs	r2, #36	@ 0x24
 800a0e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0201 	bic.w	r2, r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 f8f2 	bl	800b2e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fdf3 	bl	800acf0 <UART_SetConfig>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d101      	bne.n	800a114 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e01b      	b.n	800a14c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689a      	ldr	r2, [r3, #8]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f042 0201 	orr.w	r2, r2, #1
 800a142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f001 f971 	bl	800b42c <UART_CheckIdleState>
 800a14a:	4603      	mov	r3, r0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	08004651 	.word	0x08004651

0800a158 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a158:	b480      	push	{r7}
 800a15a:	b087      	sub	sp, #28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	460b      	mov	r3, r1
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d109      	bne.n	800a184 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a176:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e09c      	b.n	800a2be <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	d16c      	bne.n	800a268 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a18e:	7afb      	ldrb	r3, [r7, #11]
 800a190:	2b0c      	cmp	r3, #12
 800a192:	d85e      	bhi.n	800a252 <HAL_UART_RegisterCallback+0xfa>
 800a194:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <HAL_UART_RegisterCallback+0x44>)
 800a196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19a:	bf00      	nop
 800a19c:	0800a1d1 	.word	0x0800a1d1
 800a1a0:	0800a1db 	.word	0x0800a1db
 800a1a4:	0800a1e5 	.word	0x0800a1e5
 800a1a8:	0800a1ef 	.word	0x0800a1ef
 800a1ac:	0800a1f9 	.word	0x0800a1f9
 800a1b0:	0800a203 	.word	0x0800a203
 800a1b4:	0800a20d 	.word	0x0800a20d
 800a1b8:	0800a217 	.word	0x0800a217
 800a1bc:	0800a221 	.word	0x0800a221
 800a1c0:	0800a22b 	.word	0x0800a22b
 800a1c4:	0800a235 	.word	0x0800a235
 800a1c8:	0800a23f 	.word	0x0800a23f
 800a1cc:	0800a249 	.word	0x0800a249
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a1d8:	e070      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a1e2:	e06b      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a1ec:	e066      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a1f6:	e061      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a200:	e05c      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a20a:	e057      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a214:	e052      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a21e:	e04d      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a228:	e048      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a232:	e043      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a23c:	e03e      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a246:	e039      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a250:	e034      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a258:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	75fb      	strb	r3, [r7, #23]
        break;
 800a266:	e029      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d11a      	bne.n	800a2a8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a272:	7afb      	ldrb	r3, [r7, #11]
 800a274:	2b0b      	cmp	r3, #11
 800a276:	d002      	beq.n	800a27e <HAL_UART_RegisterCallback+0x126>
 800a278:	2b0c      	cmp	r3, #12
 800a27a:	d005      	beq.n	800a288 <HAL_UART_RegisterCallback+0x130>
 800a27c:	e009      	b.n	800a292 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a286:	e019      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a290:	e014      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a298:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	75fb      	strb	r3, [r7, #23]
        break;
 800a2a6:	e009      	b.n	800a2bc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	371c      	adds	r7, #28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop

0800a2cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08a      	sub	sp, #40	@ 0x28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2e0:	2b20      	cmp	r3, #32
 800a2e2:	d167      	bne.n	800a3b4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <HAL_UART_Transmit_DMA+0x24>
 800a2ea:	88fb      	ldrh	r3, [r7, #6]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e060      	b.n	800a3b6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	88fa      	ldrh	r2, [r7, #6]
 800a2fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	88fa      	ldrh	r2, [r7, #6]
 800a306:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2221      	movs	r2, #33	@ 0x21
 800a316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d028      	beq.n	800a374 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a326:	4a26      	ldr	r2, [pc, #152]	@ (800a3c0 <HAL_UART_Transmit_DMA+0xf4>)
 800a328:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a32e:	4a25      	ldr	r2, [pc, #148]	@ (800a3c4 <HAL_UART_Transmit_DMA+0xf8>)
 800a330:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a336:	4a24      	ldr	r2, [pc, #144]	@ (800a3c8 <HAL_UART_Transmit_DMA+0xfc>)
 800a338:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a33e:	2200      	movs	r2, #0
 800a340:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a34a:	4619      	mov	r1, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3328      	adds	r3, #40	@ 0x28
 800a352:	461a      	mov	r2, r3
 800a354:	88fb      	ldrh	r3, [r7, #6]
 800a356:	f7fc f9a3 	bl	80066a0 <HAL_DMA_Start_IT>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d009      	beq.n	800a374 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2210      	movs	r2, #16
 800a364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2220      	movs	r2, #32
 800a36c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e020      	b.n	800a3b6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2240      	movs	r2, #64	@ 0x40
 800a37a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3308      	adds	r3, #8
 800a382:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	e853 3f00 	ldrex	r3, [r3]
 800a38a:	613b      	str	r3, [r7, #16]
   return(result);
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a392:	627b      	str	r3, [r7, #36]	@ 0x24
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3308      	adds	r3, #8
 800a39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a39c:	623a      	str	r2, [r7, #32]
 800a39e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a0:	69f9      	ldr	r1, [r7, #28]
 800a3a2:	6a3a      	ldr	r2, [r7, #32]
 800a3a4:	e841 2300 	strex	r3, r2, [r1]
 800a3a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e5      	bne.n	800a37c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	e000      	b.n	800a3b6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a3b4:	2302      	movs	r3, #2
  }
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3728      	adds	r7, #40	@ 0x28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	0800b8f7 	.word	0x0800b8f7
 800a3c4:	0800b995 	.word	0x0800b995
 800a3c8:	0800bb2f 	.word	0x0800bb2f

0800a3cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08a      	sub	sp, #40	@ 0x28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3e0:	2b20      	cmp	r3, #32
 800a3e2:	d137      	bne.n	800a454 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <HAL_UART_Receive_DMA+0x24>
 800a3ea:	88fb      	ldrh	r3, [r7, #6]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d101      	bne.n	800a3f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e030      	b.n	800a456 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a18      	ldr	r2, [pc, #96]	@ (800a460 <HAL_UART_Receive_DMA+0x94>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d01f      	beq.n	800a444 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d018      	beq.n	800a444 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	613b      	str	r3, [r7, #16]
   return(result);
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a426:	627b      	str	r3, [r7, #36]	@ 0x24
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	461a      	mov	r2, r3
 800a42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a430:	623b      	str	r3, [r7, #32]
 800a432:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	69f9      	ldr	r1, [r7, #28]
 800a436:	6a3a      	ldr	r2, [r7, #32]
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e6      	bne.n	800a412 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a444:	88fb      	ldrh	r3, [r7, #6]
 800a446:	461a      	mov	r2, r3
 800a448:	68b9      	ldr	r1, [r7, #8]
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f001 f906 	bl	800b65c <UART_Start_Receive_DMA>
 800a450:	4603      	mov	r3, r0
 800a452:	e000      	b.n	800a456 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a454:	2302      	movs	r3, #2
  }
}
 800a456:	4618      	mov	r0, r3
 800a458:	3728      	adds	r7, #40	@ 0x28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	40008000 	.word	0x40008000

0800a464 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b0ba      	sub	sp, #232	@ 0xe8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a48a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a48e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a492:	4013      	ands	r3, r2
 800a494:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d11b      	bne.n	800a4d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a4a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4a4:	f003 0320 	and.w	r3, r3, #32
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d015      	beq.n	800a4d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4b0:	f003 0320 	and.w	r3, r3, #32
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d105      	bne.n	800a4c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a4b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d009      	beq.n	800a4d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 82f3 	beq.w	800aab4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
      }
      return;
 800a4d6:	e2ed      	b.n	800aab4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a4d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8129 	beq.w	800a734 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a4e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a4e6:	4b90      	ldr	r3, [pc, #576]	@ (800a728 <HAL_UART_IRQHandler+0x2c4>)
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a4ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a4f2:	4b8e      	ldr	r3, [pc, #568]	@ (800a72c <HAL_UART_IRQHandler+0x2c8>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 811c 	beq.w	800a734 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	d011      	beq.n	800a52c <HAL_UART_IRQHandler+0xc8>
 800a508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a50c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00b      	beq.n	800a52c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2201      	movs	r2, #1
 800a51a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a522:	f043 0201 	orr.w	r2, r3, #1
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a530:	f003 0302 	and.w	r3, r3, #2
 800a534:	2b00      	cmp	r3, #0
 800a536:	d011      	beq.n	800a55c <HAL_UART_IRQHandler+0xf8>
 800a538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00b      	beq.n	800a55c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2202      	movs	r2, #2
 800a54a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a552:	f043 0204 	orr.w	r2, r3, #4
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a55c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d011      	beq.n	800a58c <HAL_UART_IRQHandler+0x128>
 800a568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00b      	beq.n	800a58c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2204      	movs	r2, #4
 800a57a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a582:	f043 0202 	orr.w	r2, r3, #2
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a590:	f003 0308 	and.w	r3, r3, #8
 800a594:	2b00      	cmp	r3, #0
 800a596:	d017      	beq.n	800a5c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a59c:	f003 0320 	and.w	r3, r3, #32
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d105      	bne.n	800a5b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a5a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a5a8:	4b5f      	ldr	r3, [pc, #380]	@ (800a728 <HAL_UART_IRQHandler+0x2c4>)
 800a5aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00b      	beq.n	800a5c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2208      	movs	r2, #8
 800a5b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5be:	f043 0208 	orr.w	r2, r3, #8
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d012      	beq.n	800a5fa <HAL_UART_IRQHandler+0x196>
 800a5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00c      	beq.n	800a5fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5f0:	f043 0220 	orr.w	r2, r3, #32
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 8259 	beq.w	800aab8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a60a:	f003 0320 	and.w	r3, r3, #32
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d013      	beq.n	800a63a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a616:	f003 0320 	and.w	r3, r3, #32
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d105      	bne.n	800a62a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a61e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d007      	beq.n	800a63a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a640:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a64e:	2b40      	cmp	r3, #64	@ 0x40
 800a650:	d005      	beq.n	800a65e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a656:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d058      	beq.n	800a710 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f001 f8e3 	bl	800b82a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a66e:	2b40      	cmp	r3, #64	@ 0x40
 800a670:	d148      	bne.n	800a704 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3308      	adds	r3, #8
 800a678:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a680:	e853 3f00 	ldrex	r3, [r3]
 800a684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a688:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a68c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3308      	adds	r3, #8
 800a69a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a69e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a6a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a6aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a6b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1d9      	bne.n	800a672 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d017      	beq.n	800a6f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ce:	4a18      	ldr	r2, [pc, #96]	@ (800a730 <HAL_UART_IRQHandler+0x2cc>)
 800a6d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fc f8b5 	bl	8006848 <HAL_DMA_Abort_IT>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01f      	beq.n	800a724 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6f6:	e015      	b.n	800a724 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a702:	e00f      	b.n	800a724 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a70e:	e009      	b.n	800a724 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a722:	e1c9      	b.n	800aab8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a724:	bf00      	nop
    return;
 800a726:	e1c7      	b.n	800aab8 <HAL_UART_IRQHandler+0x654>
 800a728:	10000001 	.word	0x10000001
 800a72c:	04000120 	.word	0x04000120
 800a730:	0800bbb3 	.word	0x0800bbb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a738:	2b01      	cmp	r3, #1
 800a73a:	f040 8157 	bne.w	800a9ec <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a742:	f003 0310 	and.w	r3, r3, #16
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 8150 	beq.w	800a9ec <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a74c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a750:	f003 0310 	and.w	r3, r3, #16
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 8149 	beq.w	800a9ec <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2210      	movs	r2, #16
 800a760:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a76c:	2b40      	cmp	r3, #64	@ 0x40
 800a76e:	f040 80bd 	bne.w	800a8ec <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 8199 	beq.w	800aabc <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a790:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a794:	429a      	cmp	r2, r3
 800a796:	f080 8191 	bcs.w	800aabc <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0320 	and.w	r3, r3, #32
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f040 8087 	bne.w	800a8c6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a7cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a7e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a7ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a7f2:	e841 2300 	strex	r3, r2, [r1]
 800a7f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a7fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1da      	bne.n	800a7b8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3308      	adds	r3, #8
 800a808:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a814:	f023 0301 	bic.w	r3, r3, #1
 800a818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3308      	adds	r3, #8
 800a822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a826:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a82a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a82e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e1      	bne.n	800a802 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3308      	adds	r3, #8
 800a844:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a848:	e853 3f00 	ldrex	r3, [r3]
 800a84c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a84e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3308      	adds	r3, #8
 800a85e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a864:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a866:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a868:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a86a:	e841 2300 	strex	r3, r2, [r1]
 800a86e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1e3      	bne.n	800a83e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a894:	f023 0310 	bic.w	r3, r3, #16
 800a898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a8ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a8b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e4      	bne.n	800a884 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fb ff68 	bl	8006796 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a8de:	b292      	uxth	r2, r2
 800a8e0:	1a8a      	subs	r2, r1, r2
 800a8e2:	b292      	uxth	r2, r2
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8ea:	e0e7      	b.n	800aabc <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a906:	b29b      	uxth	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 80d9 	beq.w	800aac0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a90e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80d4 	beq.w	800aac0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a92c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	461a      	mov	r2, r3
 800a936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a93a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a93c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a940:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a942:	e841 2300 	strex	r3, r2, [r1]
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e4      	bne.n	800a918 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3308      	adds	r3, #8
 800a954:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a958:	e853 3f00 	ldrex	r3, [r3]
 800a95c:	623b      	str	r3, [r7, #32]
   return(result);
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a964:	f023 0301 	bic.w	r3, r3, #1
 800a968:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3308      	adds	r3, #8
 800a972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a976:	633a      	str	r2, [r7, #48]	@ 0x30
 800a978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a97c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e1      	bne.n	800a94e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2220      	movs	r2, #32
 800a98e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	e853 3f00 	ldrex	r3, [r3]
 800a9aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 0310 	bic.w	r3, r3, #16
 800a9b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a9c0:	61fb      	str	r3, [r7, #28]
 800a9c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c4:	69b9      	ldr	r1, [r7, #24]
 800a9c6:	69fa      	ldr	r2, [r7, #28]
 800a9c8:	e841 2300 	strex	r3, r2, [r1]
 800a9cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e4      	bne.n	800a99e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a9e0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9ea:	e069      	b.n	800aac0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d010      	beq.n	800aa1a <HAL_UART_IRQHandler+0x5b6>
 800a9f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00a      	beq.n	800aa1a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800aa0c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa18:	e055      	b.n	800aac6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aa1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d014      	beq.n	800aa50 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aa26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d105      	bne.n	800aa3e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aa32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d008      	beq.n	800aa50 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d03e      	beq.n	800aac4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	4798      	blx	r3
    }
    return;
 800aa4e:	e039      	b.n	800aac4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d009      	beq.n	800aa70 <HAL_UART_IRQHandler+0x60c>
 800aa5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d003      	beq.n	800aa70 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f001 f8ba 	bl	800bbe2 <UART_EndTransmit_IT>
    return;
 800aa6e:	e02a      	b.n	800aac6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aa70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00b      	beq.n	800aa94 <HAL_UART_IRQHandler+0x630>
 800aa7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d005      	beq.n	800aa94 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa92:	e018      	b.n	800aac6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d012      	beq.n	800aac6 <HAL_UART_IRQHandler+0x662>
 800aaa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	da0e      	bge.n	800aac6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aab2:	e008      	b.n	800aac6 <HAL_UART_IRQHandler+0x662>
      return;
 800aab4:	bf00      	nop
 800aab6:	e006      	b.n	800aac6 <HAL_UART_IRQHandler+0x662>
    return;
 800aab8:	bf00      	nop
 800aaba:	e004      	b.n	800aac6 <HAL_UART_IRQHandler+0x662>
      return;
 800aabc:	bf00      	nop
 800aabe:	e002      	b.n	800aac6 <HAL_UART_IRQHandler+0x662>
      return;
 800aac0:	bf00      	nop
 800aac2:	e000      	b.n	800aac6 <HAL_UART_IRQHandler+0x662>
    return;
 800aac4:	bf00      	nop
  }
}
 800aac6:	37e8      	adds	r7, #232	@ 0xe8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a09      	ldr	r2, [pc, #36]	@ (800abb8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d009      	beq.n	800abac <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	430a      	orrs	r2, r1
 800abaa:	615a      	str	r2, [r3, #20]
  }
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	40008000 	.word	0x40008000

0800abbc <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a18      	ldr	r2, [pc, #96]	@ (800ac2c <HAL_UART_EnableReceiverTimeout+0x70>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d027      	beq.n	800ac1e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abd4:	2b20      	cmp	r3, #32
 800abd6:	d120      	bne.n	800ac1a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d101      	bne.n	800abe6 <HAL_UART_EnableReceiverTimeout+0x2a>
 800abe2:	2302      	movs	r3, #2
 800abe4:	e01c      	b.n	800ac20 <HAL_UART_EnableReceiverTimeout+0x64>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2224      	movs	r2, #36	@ 0x24
 800abf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800ac04:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	e002      	b.n	800ac20 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e000      	b.n	800ac20 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
  }
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	40008000 	.word	0x40008000

0800ac30 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
	...

0800ac4c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a1a      	ldr	r2, [pc, #104]	@ (800acc0 <UART_InitCallbacksToDefault+0x74>)
 800ac58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a19      	ldr	r2, [pc, #100]	@ (800acc4 <UART_InitCallbacksToDefault+0x78>)
 800ac60:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a18      	ldr	r2, [pc, #96]	@ (800acc8 <UART_InitCallbacksToDefault+0x7c>)
 800ac68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a17      	ldr	r2, [pc, #92]	@ (800accc <UART_InitCallbacksToDefault+0x80>)
 800ac70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a16      	ldr	r2, [pc, #88]	@ (800acd0 <UART_InitCallbacksToDefault+0x84>)
 800ac78:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a15      	ldr	r2, [pc, #84]	@ (800acd4 <UART_InitCallbacksToDefault+0x88>)
 800ac80:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a14      	ldr	r2, [pc, #80]	@ (800acd8 <UART_InitCallbacksToDefault+0x8c>)
 800ac88:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a13      	ldr	r2, [pc, #76]	@ (800acdc <UART_InitCallbacksToDefault+0x90>)
 800ac90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a12      	ldr	r2, [pc, #72]	@ (800ace0 <UART_InitCallbacksToDefault+0x94>)
 800ac98:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a11      	ldr	r2, [pc, #68]	@ (800ace4 <UART_InitCallbacksToDefault+0x98>)
 800aca0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a10      	ldr	r2, [pc, #64]	@ (800ace8 <UART_InitCallbacksToDefault+0x9c>)
 800aca8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a0f      	ldr	r2, [pc, #60]	@ (800acec <UART_InitCallbacksToDefault+0xa0>)
 800acb0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	0800aae1 	.word	0x0800aae1
 800acc4:	0800aacd 	.word	0x0800aacd
 800acc8:	0800ab09 	.word	0x0800ab09
 800accc:	0800aaf5 	.word	0x0800aaf5
 800acd0:	0800ab1d 	.word	0x0800ab1d
 800acd4:	0800ab31 	.word	0x0800ab31
 800acd8:	0800ab45 	.word	0x0800ab45
 800acdc:	0800ab59 	.word	0x0800ab59
 800ace0:	0800bc3d 	.word	0x0800bc3d
 800ace4:	0800bc51 	.word	0x0800bc51
 800ace8:	0800bc65 	.word	0x0800bc65
 800acec:	0800ab6d 	.word	0x0800ab6d

0800acf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acf4:	b08c      	sub	sp, #48	@ 0x30
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	689a      	ldr	r2, [r3, #8]
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	431a      	orrs	r2, r3
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	431a      	orrs	r2, r3
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	69db      	ldr	r3, [r3, #28]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	4baa      	ldr	r3, [pc, #680]	@ (800afc8 <UART_SetConfig+0x2d8>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	6812      	ldr	r2, [r2, #0]
 800ad26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	68da      	ldr	r2, [r3, #12]
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	430a      	orrs	r2, r1
 800ad40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a9f      	ldr	r2, [pc, #636]	@ (800afcc <UART_SetConfig+0x2dc>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d004      	beq.n	800ad5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ad66:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	6812      	ldr	r2, [r2, #0]
 800ad6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad70:	430b      	orrs	r3, r1
 800ad72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad7a:	f023 010f 	bic.w	r1, r3, #15
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	430a      	orrs	r2, r1
 800ad88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a90      	ldr	r2, [pc, #576]	@ (800afd0 <UART_SetConfig+0x2e0>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d125      	bne.n	800ade0 <UART_SetConfig+0xf0>
 800ad94:	4b8f      	ldr	r3, [pc, #572]	@ (800afd4 <UART_SetConfig+0x2e4>)
 800ad96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d81a      	bhi.n	800add8 <UART_SetConfig+0xe8>
 800ada2:	a201      	add	r2, pc, #4	@ (adr r2, 800ada8 <UART_SetConfig+0xb8>)
 800ada4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada8:	0800adb9 	.word	0x0800adb9
 800adac:	0800adc9 	.word	0x0800adc9
 800adb0:	0800adc1 	.word	0x0800adc1
 800adb4:	0800add1 	.word	0x0800add1
 800adb8:	2301      	movs	r3, #1
 800adba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adbe:	e116      	b.n	800afee <UART_SetConfig+0x2fe>
 800adc0:	2302      	movs	r3, #2
 800adc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adc6:	e112      	b.n	800afee <UART_SetConfig+0x2fe>
 800adc8:	2304      	movs	r3, #4
 800adca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adce:	e10e      	b.n	800afee <UART_SetConfig+0x2fe>
 800add0:	2308      	movs	r3, #8
 800add2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800add6:	e10a      	b.n	800afee <UART_SetConfig+0x2fe>
 800add8:	2310      	movs	r3, #16
 800adda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adde:	e106      	b.n	800afee <UART_SetConfig+0x2fe>
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a7c      	ldr	r2, [pc, #496]	@ (800afd8 <UART_SetConfig+0x2e8>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d138      	bne.n	800ae5c <UART_SetConfig+0x16c>
 800adea:	4b7a      	ldr	r3, [pc, #488]	@ (800afd4 <UART_SetConfig+0x2e4>)
 800adec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adf0:	f003 030c 	and.w	r3, r3, #12
 800adf4:	2b0c      	cmp	r3, #12
 800adf6:	d82d      	bhi.n	800ae54 <UART_SetConfig+0x164>
 800adf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ae00 <UART_SetConfig+0x110>)
 800adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfe:	bf00      	nop
 800ae00:	0800ae35 	.word	0x0800ae35
 800ae04:	0800ae55 	.word	0x0800ae55
 800ae08:	0800ae55 	.word	0x0800ae55
 800ae0c:	0800ae55 	.word	0x0800ae55
 800ae10:	0800ae45 	.word	0x0800ae45
 800ae14:	0800ae55 	.word	0x0800ae55
 800ae18:	0800ae55 	.word	0x0800ae55
 800ae1c:	0800ae55 	.word	0x0800ae55
 800ae20:	0800ae3d 	.word	0x0800ae3d
 800ae24:	0800ae55 	.word	0x0800ae55
 800ae28:	0800ae55 	.word	0x0800ae55
 800ae2c:	0800ae55 	.word	0x0800ae55
 800ae30:	0800ae4d 	.word	0x0800ae4d
 800ae34:	2300      	movs	r3, #0
 800ae36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae3a:	e0d8      	b.n	800afee <UART_SetConfig+0x2fe>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae42:	e0d4      	b.n	800afee <UART_SetConfig+0x2fe>
 800ae44:	2304      	movs	r3, #4
 800ae46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae4a:	e0d0      	b.n	800afee <UART_SetConfig+0x2fe>
 800ae4c:	2308      	movs	r3, #8
 800ae4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae52:	e0cc      	b.n	800afee <UART_SetConfig+0x2fe>
 800ae54:	2310      	movs	r3, #16
 800ae56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae5a:	e0c8      	b.n	800afee <UART_SetConfig+0x2fe>
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a5e      	ldr	r2, [pc, #376]	@ (800afdc <UART_SetConfig+0x2ec>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d125      	bne.n	800aeb2 <UART_SetConfig+0x1c2>
 800ae66:	4b5b      	ldr	r3, [pc, #364]	@ (800afd4 <UART_SetConfig+0x2e4>)
 800ae68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ae70:	2b30      	cmp	r3, #48	@ 0x30
 800ae72:	d016      	beq.n	800aea2 <UART_SetConfig+0x1b2>
 800ae74:	2b30      	cmp	r3, #48	@ 0x30
 800ae76:	d818      	bhi.n	800aeaa <UART_SetConfig+0x1ba>
 800ae78:	2b20      	cmp	r3, #32
 800ae7a:	d00a      	beq.n	800ae92 <UART_SetConfig+0x1a2>
 800ae7c:	2b20      	cmp	r3, #32
 800ae7e:	d814      	bhi.n	800aeaa <UART_SetConfig+0x1ba>
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <UART_SetConfig+0x19a>
 800ae84:	2b10      	cmp	r3, #16
 800ae86:	d008      	beq.n	800ae9a <UART_SetConfig+0x1aa>
 800ae88:	e00f      	b.n	800aeaa <UART_SetConfig+0x1ba>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae90:	e0ad      	b.n	800afee <UART_SetConfig+0x2fe>
 800ae92:	2302      	movs	r3, #2
 800ae94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae98:	e0a9      	b.n	800afee <UART_SetConfig+0x2fe>
 800ae9a:	2304      	movs	r3, #4
 800ae9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aea0:	e0a5      	b.n	800afee <UART_SetConfig+0x2fe>
 800aea2:	2308      	movs	r3, #8
 800aea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aea8:	e0a1      	b.n	800afee <UART_SetConfig+0x2fe>
 800aeaa:	2310      	movs	r3, #16
 800aeac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb0:	e09d      	b.n	800afee <UART_SetConfig+0x2fe>
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a4a      	ldr	r2, [pc, #296]	@ (800afe0 <UART_SetConfig+0x2f0>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d125      	bne.n	800af08 <UART_SetConfig+0x218>
 800aebc:	4b45      	ldr	r3, [pc, #276]	@ (800afd4 <UART_SetConfig+0x2e4>)
 800aebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aec2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aec6:	2bc0      	cmp	r3, #192	@ 0xc0
 800aec8:	d016      	beq.n	800aef8 <UART_SetConfig+0x208>
 800aeca:	2bc0      	cmp	r3, #192	@ 0xc0
 800aecc:	d818      	bhi.n	800af00 <UART_SetConfig+0x210>
 800aece:	2b80      	cmp	r3, #128	@ 0x80
 800aed0:	d00a      	beq.n	800aee8 <UART_SetConfig+0x1f8>
 800aed2:	2b80      	cmp	r3, #128	@ 0x80
 800aed4:	d814      	bhi.n	800af00 <UART_SetConfig+0x210>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d002      	beq.n	800aee0 <UART_SetConfig+0x1f0>
 800aeda:	2b40      	cmp	r3, #64	@ 0x40
 800aedc:	d008      	beq.n	800aef0 <UART_SetConfig+0x200>
 800aede:	e00f      	b.n	800af00 <UART_SetConfig+0x210>
 800aee0:	2300      	movs	r3, #0
 800aee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aee6:	e082      	b.n	800afee <UART_SetConfig+0x2fe>
 800aee8:	2302      	movs	r3, #2
 800aeea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeee:	e07e      	b.n	800afee <UART_SetConfig+0x2fe>
 800aef0:	2304      	movs	r3, #4
 800aef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aef6:	e07a      	b.n	800afee <UART_SetConfig+0x2fe>
 800aef8:	2308      	movs	r3, #8
 800aefa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aefe:	e076      	b.n	800afee <UART_SetConfig+0x2fe>
 800af00:	2310      	movs	r3, #16
 800af02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af06:	e072      	b.n	800afee <UART_SetConfig+0x2fe>
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a35      	ldr	r2, [pc, #212]	@ (800afe4 <UART_SetConfig+0x2f4>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d12a      	bne.n	800af68 <UART_SetConfig+0x278>
 800af12:	4b30      	ldr	r3, [pc, #192]	@ (800afd4 <UART_SetConfig+0x2e4>)
 800af14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af20:	d01a      	beq.n	800af58 <UART_SetConfig+0x268>
 800af22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af26:	d81b      	bhi.n	800af60 <UART_SetConfig+0x270>
 800af28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af2c:	d00c      	beq.n	800af48 <UART_SetConfig+0x258>
 800af2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af32:	d815      	bhi.n	800af60 <UART_SetConfig+0x270>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d003      	beq.n	800af40 <UART_SetConfig+0x250>
 800af38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af3c:	d008      	beq.n	800af50 <UART_SetConfig+0x260>
 800af3e:	e00f      	b.n	800af60 <UART_SetConfig+0x270>
 800af40:	2300      	movs	r3, #0
 800af42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af46:	e052      	b.n	800afee <UART_SetConfig+0x2fe>
 800af48:	2302      	movs	r3, #2
 800af4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af4e:	e04e      	b.n	800afee <UART_SetConfig+0x2fe>
 800af50:	2304      	movs	r3, #4
 800af52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af56:	e04a      	b.n	800afee <UART_SetConfig+0x2fe>
 800af58:	2308      	movs	r3, #8
 800af5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af5e:	e046      	b.n	800afee <UART_SetConfig+0x2fe>
 800af60:	2310      	movs	r3, #16
 800af62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af66:	e042      	b.n	800afee <UART_SetConfig+0x2fe>
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a17      	ldr	r2, [pc, #92]	@ (800afcc <UART_SetConfig+0x2dc>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d13a      	bne.n	800afe8 <UART_SetConfig+0x2f8>
 800af72:	4b18      	ldr	r3, [pc, #96]	@ (800afd4 <UART_SetConfig+0x2e4>)
 800af74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800af7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af80:	d01a      	beq.n	800afb8 <UART_SetConfig+0x2c8>
 800af82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af86:	d81b      	bhi.n	800afc0 <UART_SetConfig+0x2d0>
 800af88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af8c:	d00c      	beq.n	800afa8 <UART_SetConfig+0x2b8>
 800af8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af92:	d815      	bhi.n	800afc0 <UART_SetConfig+0x2d0>
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <UART_SetConfig+0x2b0>
 800af98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af9c:	d008      	beq.n	800afb0 <UART_SetConfig+0x2c0>
 800af9e:	e00f      	b.n	800afc0 <UART_SetConfig+0x2d0>
 800afa0:	2300      	movs	r3, #0
 800afa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afa6:	e022      	b.n	800afee <UART_SetConfig+0x2fe>
 800afa8:	2302      	movs	r3, #2
 800afaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afae:	e01e      	b.n	800afee <UART_SetConfig+0x2fe>
 800afb0:	2304      	movs	r3, #4
 800afb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afb6:	e01a      	b.n	800afee <UART_SetConfig+0x2fe>
 800afb8:	2308      	movs	r3, #8
 800afba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afbe:	e016      	b.n	800afee <UART_SetConfig+0x2fe>
 800afc0:	2310      	movs	r3, #16
 800afc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afc6:	e012      	b.n	800afee <UART_SetConfig+0x2fe>
 800afc8:	cfff69f3 	.word	0xcfff69f3
 800afcc:	40008000 	.word	0x40008000
 800afd0:	40013800 	.word	0x40013800
 800afd4:	40021000 	.word	0x40021000
 800afd8:	40004400 	.word	0x40004400
 800afdc:	40004800 	.word	0x40004800
 800afe0:	40004c00 	.word	0x40004c00
 800afe4:	40005000 	.word	0x40005000
 800afe8:	2310      	movs	r3, #16
 800afea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4aae      	ldr	r2, [pc, #696]	@ (800b2ac <UART_SetConfig+0x5bc>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	f040 8097 	bne.w	800b128 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800affa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800affe:	2b08      	cmp	r3, #8
 800b000:	d823      	bhi.n	800b04a <UART_SetConfig+0x35a>
 800b002:	a201      	add	r2, pc, #4	@ (adr r2, 800b008 <UART_SetConfig+0x318>)
 800b004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b008:	0800b02d 	.word	0x0800b02d
 800b00c:	0800b04b 	.word	0x0800b04b
 800b010:	0800b035 	.word	0x0800b035
 800b014:	0800b04b 	.word	0x0800b04b
 800b018:	0800b03b 	.word	0x0800b03b
 800b01c:	0800b04b 	.word	0x0800b04b
 800b020:	0800b04b 	.word	0x0800b04b
 800b024:	0800b04b 	.word	0x0800b04b
 800b028:	0800b043 	.word	0x0800b043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b02c:	f7fc fd16 	bl	8007a5c <HAL_RCC_GetPCLK1Freq>
 800b030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b032:	e010      	b.n	800b056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b034:	4b9e      	ldr	r3, [pc, #632]	@ (800b2b0 <UART_SetConfig+0x5c0>)
 800b036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b038:	e00d      	b.n	800b056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b03a:	f7fc fca1 	bl	8007980 <HAL_RCC_GetSysClockFreq>
 800b03e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b040:	e009      	b.n	800b056 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b048:	e005      	b.n	800b056 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b054:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 8130 	beq.w	800b2be <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b062:	4a94      	ldr	r2, [pc, #592]	@ (800b2b4 <UART_SetConfig+0x5c4>)
 800b064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b068:	461a      	mov	r2, r3
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b070:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	4613      	mov	r3, r2
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	4413      	add	r3, r2
 800b07c:	69ba      	ldr	r2, [r7, #24]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d305      	bcc.n	800b08e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d903      	bls.n	800b096 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b094:	e113      	b.n	800b2be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b098:	2200      	movs	r2, #0
 800b09a:	60bb      	str	r3, [r7, #8]
 800b09c:	60fa      	str	r2, [r7, #12]
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a2:	4a84      	ldr	r2, [pc, #528]	@ (800b2b4 <UART_SetConfig+0x5c4>)
 800b0a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	603b      	str	r3, [r7, #0]
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b0b8:	f7f5 fd74 	bl	8000ba4 <__aeabi_uldivmod>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	f04f 0200 	mov.w	r2, #0
 800b0c8:	f04f 0300 	mov.w	r3, #0
 800b0cc:	020b      	lsls	r3, r1, #8
 800b0ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0d2:	0202      	lsls	r2, r0, #8
 800b0d4:	6979      	ldr	r1, [r7, #20]
 800b0d6:	6849      	ldr	r1, [r1, #4]
 800b0d8:	0849      	lsrs	r1, r1, #1
 800b0da:	2000      	movs	r0, #0
 800b0dc:	460c      	mov	r4, r1
 800b0de:	4605      	mov	r5, r0
 800b0e0:	eb12 0804 	adds.w	r8, r2, r4
 800b0e4:	eb43 0905 	adc.w	r9, r3, r5
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	469a      	mov	sl, r3
 800b0f0:	4693      	mov	fp, r2
 800b0f2:	4652      	mov	r2, sl
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	f7f5 fd53 	bl	8000ba4 <__aeabi_uldivmod>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	4613      	mov	r3, r2
 800b104:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b10c:	d308      	bcc.n	800b120 <UART_SetConfig+0x430>
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b114:	d204      	bcs.n	800b120 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6a3a      	ldr	r2, [r7, #32]
 800b11c:	60da      	str	r2, [r3, #12]
 800b11e:	e0ce      	b.n	800b2be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b126:	e0ca      	b.n	800b2be <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b130:	d166      	bne.n	800b200 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b132:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b136:	2b08      	cmp	r3, #8
 800b138:	d827      	bhi.n	800b18a <UART_SetConfig+0x49a>
 800b13a:	a201      	add	r2, pc, #4	@ (adr r2, 800b140 <UART_SetConfig+0x450>)
 800b13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b140:	0800b165 	.word	0x0800b165
 800b144:	0800b16d 	.word	0x0800b16d
 800b148:	0800b175 	.word	0x0800b175
 800b14c:	0800b18b 	.word	0x0800b18b
 800b150:	0800b17b 	.word	0x0800b17b
 800b154:	0800b18b 	.word	0x0800b18b
 800b158:	0800b18b 	.word	0x0800b18b
 800b15c:	0800b18b 	.word	0x0800b18b
 800b160:	0800b183 	.word	0x0800b183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b164:	f7fc fc7a 	bl	8007a5c <HAL_RCC_GetPCLK1Freq>
 800b168:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b16a:	e014      	b.n	800b196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b16c:	f7fc fc8c 	bl	8007a88 <HAL_RCC_GetPCLK2Freq>
 800b170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b172:	e010      	b.n	800b196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b174:	4b4e      	ldr	r3, [pc, #312]	@ (800b2b0 <UART_SetConfig+0x5c0>)
 800b176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b178:	e00d      	b.n	800b196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b17a:	f7fc fc01 	bl	8007980 <HAL_RCC_GetSysClockFreq>
 800b17e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b180:	e009      	b.n	800b196 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b188:	e005      	b.n	800b196 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 8090 	beq.w	800b2be <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a2:	4a44      	ldr	r2, [pc, #272]	@ (800b2b4 <UART_SetConfig+0x5c4>)
 800b1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1b0:	005a      	lsls	r2, r3, #1
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	441a      	add	r2, r3
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	2b0f      	cmp	r3, #15
 800b1c8:	d916      	bls.n	800b1f8 <UART_SetConfig+0x508>
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1d0:	d212      	bcs.n	800b1f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	f023 030f 	bic.w	r3, r3, #15
 800b1da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	085b      	lsrs	r3, r3, #1
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	8bfb      	ldrh	r3, [r7, #30]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	8bfa      	ldrh	r2, [r7, #30]
 800b1f4:	60da      	str	r2, [r3, #12]
 800b1f6:	e062      	b.n	800b2be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1fe:	e05e      	b.n	800b2be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b204:	2b08      	cmp	r3, #8
 800b206:	d828      	bhi.n	800b25a <UART_SetConfig+0x56a>
 800b208:	a201      	add	r2, pc, #4	@ (adr r2, 800b210 <UART_SetConfig+0x520>)
 800b20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20e:	bf00      	nop
 800b210:	0800b235 	.word	0x0800b235
 800b214:	0800b23d 	.word	0x0800b23d
 800b218:	0800b245 	.word	0x0800b245
 800b21c:	0800b25b 	.word	0x0800b25b
 800b220:	0800b24b 	.word	0x0800b24b
 800b224:	0800b25b 	.word	0x0800b25b
 800b228:	0800b25b 	.word	0x0800b25b
 800b22c:	0800b25b 	.word	0x0800b25b
 800b230:	0800b253 	.word	0x0800b253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b234:	f7fc fc12 	bl	8007a5c <HAL_RCC_GetPCLK1Freq>
 800b238:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b23a:	e014      	b.n	800b266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b23c:	f7fc fc24 	bl	8007a88 <HAL_RCC_GetPCLK2Freq>
 800b240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b242:	e010      	b.n	800b266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b244:	4b1a      	ldr	r3, [pc, #104]	@ (800b2b0 <UART_SetConfig+0x5c0>)
 800b246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b248:	e00d      	b.n	800b266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b24a:	f7fc fb99 	bl	8007980 <HAL_RCC_GetSysClockFreq>
 800b24e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b250:	e009      	b.n	800b266 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b258:	e005      	b.n	800b266 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b264:	bf00      	nop
    }

    if (pclk != 0U)
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d028      	beq.n	800b2be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b270:	4a10      	ldr	r2, [pc, #64]	@ (800b2b4 <UART_SetConfig+0x5c4>)
 800b272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b276:	461a      	mov	r2, r3
 800b278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	085b      	lsrs	r3, r3, #1
 800b284:	441a      	add	r2, r3
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b290:	6a3b      	ldr	r3, [r7, #32]
 800b292:	2b0f      	cmp	r3, #15
 800b294:	d910      	bls.n	800b2b8 <UART_SetConfig+0x5c8>
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b29c:	d20c      	bcs.n	800b2b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b29e:	6a3b      	ldr	r3, [r7, #32]
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60da      	str	r2, [r3, #12]
 800b2a8:	e009      	b.n	800b2be <UART_SetConfig+0x5ce>
 800b2aa:	bf00      	nop
 800b2ac:	40008000 	.word	0x40008000
 800b2b0:	00f42400 	.word	0x00f42400
 800b2b4:	0800bf24 	.word	0x0800bf24
      }
      else
      {
        ret = HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b2da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3730      	adds	r7, #48	@ 0x30
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b2e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f4:	f003 0308 	and.w	r3, r3, #8
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00a      	beq.n	800b312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00a      	beq.n	800b334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	430a      	orrs	r2, r1
 800b332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b338:	f003 0302 	and.w	r3, r3, #2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00a      	beq.n	800b356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	430a      	orrs	r2, r1
 800b354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00a      	beq.n	800b378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	430a      	orrs	r2, r1
 800b376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b37c:	f003 0310 	and.w	r3, r3, #16
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	f003 0320 	and.w	r3, r3, #32
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d01a      	beq.n	800b3fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3e6:	d10a      	bne.n	800b3fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00a      	beq.n	800b420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	430a      	orrs	r2, r1
 800b41e:	605a      	str	r2, [r3, #4]
  }
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b098      	sub	sp, #96	@ 0x60
 800b430:	af02      	add	r7, sp, #8
 800b432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b43c:	f7f9 faf4 	bl	8004a28 <HAL_GetTick>
 800b440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0308 	and.w	r3, r3, #8
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d12f      	bne.n	800b4b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b458:	2200      	movs	r2, #0
 800b45a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f88e 	bl	800b580 <UART_WaitOnFlagUntilTimeout>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d022      	beq.n	800b4b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b472:	e853 3f00 	ldrex	r3, [r3]
 800b476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b47e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	461a      	mov	r2, r3
 800b486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b488:	647b      	str	r3, [r7, #68]	@ 0x44
 800b48a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b48e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b490:	e841 2300 	strex	r3, r2, [r1]
 800b494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1e6      	bne.n	800b46a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2220      	movs	r2, #32
 800b4a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e063      	b.n	800b578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0304 	and.w	r3, r3, #4
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d149      	bne.n	800b552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f857 	bl	800b580 <UART_WaitOnFlagUntilTimeout>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d03c      	beq.n	800b552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e6      	bne.n	800b4d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3308      	adds	r3, #8
 800b510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	e853 3f00 	ldrex	r3, [r3]
 800b518:	60fb      	str	r3, [r7, #12]
   return(result);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f023 0301 	bic.w	r3, r3, #1
 800b520:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3308      	adds	r3, #8
 800b528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b52a:	61fa      	str	r2, [r7, #28]
 800b52c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52e:	69b9      	ldr	r1, [r7, #24]
 800b530:	69fa      	ldr	r2, [r7, #28]
 800b532:	e841 2300 	strex	r3, r2, [r1]
 800b536:	617b      	str	r3, [r7, #20]
   return(result);
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1e5      	bne.n	800b50a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2220      	movs	r2, #32
 800b542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	e012      	b.n	800b578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2220      	movs	r2, #32
 800b556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2220      	movs	r2, #32
 800b55e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3758      	adds	r7, #88	@ 0x58
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b590:	e04f      	b.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b598:	d04b      	beq.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b59a:	f7f9 fa45 	bl	8004a28 <HAL_GetTick>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d302      	bcc.n	800b5b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e04e      	b.n	800b652 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 0304 	and.w	r3, r3, #4
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d037      	beq.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2b80      	cmp	r3, #128	@ 0x80
 800b5c6:	d034      	beq.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b40      	cmp	r3, #64	@ 0x40
 800b5cc:	d031      	beq.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	69db      	ldr	r3, [r3, #28]
 800b5d4:	f003 0308 	and.w	r3, r3, #8
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d110      	bne.n	800b5fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f920 	bl	800b82a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2208      	movs	r2, #8
 800b5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e029      	b.n	800b652 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69db      	ldr	r3, [r3, #28]
 800b604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b60c:	d111      	bne.n	800b632 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 f906 	bl	800b82a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2220      	movs	r2, #32
 800b622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	e00f      	b.n	800b652 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	69da      	ldr	r2, [r3, #28]
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	4013      	ands	r3, r2
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	429a      	cmp	r2, r3
 800b640:	bf0c      	ite	eq
 800b642:	2301      	moveq	r3, #1
 800b644:	2300      	movne	r3, #0
 800b646:	b2db      	uxtb	r3, r3
 800b648:	461a      	mov	r2, r3
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d0a0      	beq.n	800b592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
	...

0800b65c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b096      	sub	sp, #88	@ 0x58
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	4613      	mov	r3, r2
 800b668:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	88fa      	ldrh	r2, [r7, #6]
 800b674:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2222      	movs	r2, #34	@ 0x22
 800b684:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d02d      	beq.n	800b6ee <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b698:	4a40      	ldr	r2, [pc, #256]	@ (800b79c <UART_Start_Receive_DMA+0x140>)
 800b69a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6a2:	4a3f      	ldr	r2, [pc, #252]	@ (800b7a0 <UART_Start_Receive_DMA+0x144>)
 800b6a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ac:	4a3d      	ldr	r2, [pc, #244]	@ (800b7a4 <UART_Start_Receive_DMA+0x148>)
 800b6ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	3324      	adds	r3, #36	@ 0x24
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	88fb      	ldrh	r3, [r7, #6]
 800b6d0:	f7fa ffe6 	bl	80066a0 <HAL_DMA_Start_IT>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d009      	beq.n	800b6ee <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2210      	movs	r2, #16
 800b6de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e051      	b.n	800b792 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d018      	beq.n	800b728 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6fe:	e853 3f00 	ldrex	r3, [r3]
 800b702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b70a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	461a      	mov	r2, r3
 800b712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b714:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b716:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b718:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b71a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b71c:	e841 2300 	strex	r3, r2, [r1]
 800b720:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1e6      	bne.n	800b6f6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3308      	adds	r3, #8
 800b72e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b732:	e853 3f00 	ldrex	r3, [r3]
 800b736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73a:	f043 0301 	orr.w	r3, r3, #1
 800b73e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3308      	adds	r3, #8
 800b746:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b748:	637a      	str	r2, [r7, #52]	@ 0x34
 800b74a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b74e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b750:	e841 2300 	strex	r3, r2, [r1]
 800b754:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1e5      	bne.n	800b728 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3308      	adds	r3, #8
 800b762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	e853 3f00 	ldrex	r3, [r3]
 800b76a:	613b      	str	r3, [r7, #16]
   return(result);
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3308      	adds	r3, #8
 800b77a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b77c:	623a      	str	r2, [r7, #32]
 800b77e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b780:	69f9      	ldr	r1, [r7, #28]
 800b782:	6a3a      	ldr	r2, [r7, #32]
 800b784:	e841 2300 	strex	r3, r2, [r1]
 800b788:	61bb      	str	r3, [r7, #24]
   return(result);
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1e5      	bne.n	800b75c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3758      	adds	r7, #88	@ 0x58
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	0800b9b5 	.word	0x0800b9b5
 800b7a0:	0800bae9 	.word	0x0800bae9
 800b7a4:	0800bb2f 	.word	0x0800bb2f

0800b7a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b08f      	sub	sp, #60	@ 0x3c
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b7c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7d0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e6      	bne.n	800b7b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b7f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3308      	adds	r3, #8
 800b800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b802:	61ba      	str	r2, [r7, #24]
 800b804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b806:	6979      	ldr	r1, [r7, #20]
 800b808:	69ba      	ldr	r2, [r7, #24]
 800b80a:	e841 2300 	strex	r3, r2, [r1]
 800b80e:	613b      	str	r3, [r7, #16]
   return(result);
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1e5      	bne.n	800b7e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2220      	movs	r2, #32
 800b81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b81e:	bf00      	nop
 800b820:	373c      	adds	r7, #60	@ 0x3c
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b095      	sub	sp, #84	@ 0x54
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b83a:	e853 3f00 	ldrex	r3, [r3]
 800b83e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	461a      	mov	r2, r3
 800b84e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b850:	643b      	str	r3, [r7, #64]	@ 0x40
 800b852:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b854:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b856:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b858:	e841 2300 	strex	r3, r2, [r1]
 800b85c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e6      	bne.n	800b832 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3308      	adds	r3, #8
 800b86a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	e853 3f00 	ldrex	r3, [r3]
 800b872:	61fb      	str	r3, [r7, #28]
   return(result);
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b87a:	f023 0301 	bic.w	r3, r3, #1
 800b87e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3308      	adds	r3, #8
 800b886:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b888:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b88a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b88e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e3      	bne.n	800b864 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d118      	bne.n	800b8d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	e853 3f00 	ldrex	r3, [r3]
 800b8b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	f023 0310 	bic.w	r3, r3, #16
 800b8b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8c2:	61bb      	str	r3, [r7, #24]
 800b8c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c6:	6979      	ldr	r1, [r7, #20]
 800b8c8:	69ba      	ldr	r2, [r7, #24]
 800b8ca:	e841 2300 	strex	r3, r2, [r1]
 800b8ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1e6      	bne.n	800b8a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2220      	movs	r2, #32
 800b8da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b8ea:	bf00      	nop
 800b8ec:	3754      	adds	r7, #84	@ 0x54
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b090      	sub	sp, #64	@ 0x40
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b902:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f003 0320 	and.w	r3, r3, #32
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d137      	bne.n	800b982 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b914:	2200      	movs	r2, #0
 800b916:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b91a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	3308      	adds	r3, #8
 800b920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b924:	e853 3f00 	ldrex	r3, [r3]
 800b928:	623b      	str	r3, [r7, #32]
   return(result);
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b930:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3308      	adds	r3, #8
 800b938:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b93a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b93c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b942:	e841 2300 	strex	r3, r2, [r1]
 800b946:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1e5      	bne.n	800b91a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	e853 3f00 	ldrex	r3, [r3]
 800b95a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b962:	637b      	str	r3, [r7, #52]	@ 0x34
 800b964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	461a      	mov	r2, r3
 800b96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b96c:	61fb      	str	r3, [r7, #28]
 800b96e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b970:	69b9      	ldr	r1, [r7, #24]
 800b972:	69fa      	ldr	r2, [r7, #28]
 800b974:	e841 2300 	strex	r3, r2, [r1]
 800b978:	617b      	str	r3, [r7, #20]
   return(result);
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1e6      	bne.n	800b94e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b980:	e004      	b.n	800b98c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b984:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b988:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b98a:	4798      	blx	r3
}
 800b98c:	bf00      	nop
 800b98e:	3740      	adds	r7, #64	@ 0x40
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9ac:	bf00      	nop
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b09c      	sub	sp, #112	@ 0x70
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0320 	and.w	r3, r3, #32
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d171      	bne.n	800bab4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b9d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9e0:	e853 3f00 	ldrex	r3, [r3]
 800b9e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b9e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b9f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b9fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9fe:	e841 2300 	strex	r3, r2, [r1]
 800ba02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ba04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1e6      	bne.n	800b9d8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	3308      	adds	r3, #8
 800ba10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba14:	e853 3f00 	ldrex	r3, [r3]
 800ba18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1c:	f023 0301 	bic.w	r3, r3, #1
 800ba20:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3308      	adds	r3, #8
 800ba28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba2a:	647a      	str	r2, [r7, #68]	@ 0x44
 800ba2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba32:	e841 2300 	strex	r3, r2, [r1]
 800ba36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1e5      	bne.n	800ba0a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3308      	adds	r3, #8
 800ba44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba48:	e853 3f00 	ldrex	r3, [r3]
 800ba4c:	623b      	str	r3, [r7, #32]
   return(result);
 800ba4e:	6a3b      	ldr	r3, [r7, #32]
 800ba50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba54:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba5e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba66:	e841 2300 	strex	r3, r2, [r1]
 800ba6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e5      	bne.n	800ba3e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba74:	2220      	movs	r2, #32
 800ba76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d118      	bne.n	800bab4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	e853 3f00 	ldrex	r3, [r3]
 800ba8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f023 0310 	bic.w	r3, r3, #16
 800ba96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa4:	69b9      	ldr	r1, [r7, #24]
 800baa6:	69fa      	ldr	r2, [r7, #28]
 800baa8:	e841 2300 	strex	r3, r2, [r1]
 800baac:	617b      	str	r3, [r7, #20]
   return(result);
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e6      	bne.n	800ba82 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bab6:	2200      	movs	r2, #0
 800bab8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800babc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d109      	bne.n	800bad6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800bac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bac4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bac8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800baca:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bace:	4611      	mov	r1, r2
 800bad0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bad2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bad4:	e004      	b.n	800bae0 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800bad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800badc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bade:	4798      	blx	r3
}
 800bae0:	bf00      	nop
 800bae2:	3770      	adds	r7, #112	@ 0x70
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d10b      	bne.n	800bb1c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800bb10:	0852      	lsrs	r2, r2, #1
 800bb12:	b292      	uxth	r2, r2
 800bb14:	4611      	mov	r1, r2
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb1a:	e004      	b.n	800bb26 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	4798      	blx	r3
}
 800bb26:	bf00      	nop
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b086      	sub	sp, #24
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb56:	2b80      	cmp	r3, #128	@ 0x80
 800bb58:	d109      	bne.n	800bb6e <UART_DMAError+0x40>
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b21      	cmp	r3, #33	@ 0x21
 800bb5e:	d106      	bne.n	800bb6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bb68:	6978      	ldr	r0, [r7, #20]
 800bb6a:	f7ff fe1d 	bl	800b7a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb78:	2b40      	cmp	r3, #64	@ 0x40
 800bb7a:	d109      	bne.n	800bb90 <UART_DMAError+0x62>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2b22      	cmp	r3, #34	@ 0x22
 800bb80:	d106      	bne.n	800bb90 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bb8a:	6978      	ldr	r0, [r7, #20]
 800bb8c:	f7ff fe4d 	bl	800b82a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb96:	f043 0210 	orr.w	r2, r3, #16
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bba6:	6978      	ldr	r0, [r7, #20]
 800bba8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbaa:	bf00      	nop
 800bbac:	3718      	adds	r7, #24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbda:	bf00      	nop
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b088      	sub	sp, #32
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	e853 3f00 	ldrex	r3, [r3]
 800bbf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbfe:	61fb      	str	r3, [r7, #28]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	461a      	mov	r2, r3
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	61bb      	str	r3, [r7, #24]
 800bc0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0c:	6979      	ldr	r1, [r7, #20]
 800bc0e:	69ba      	ldr	r2, [r7, #24]
 800bc10:	e841 2300 	strex	r3, r2, [r1]
 800bc14:	613b      	str	r3, [r7, #16]
   return(result);
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1e6      	bne.n	800bbea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2220      	movs	r2, #32
 800bc20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc34:	bf00      	nop
 800bc36:	3720      	adds	r7, #32
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc6c:	bf00      	nop
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d101      	bne.n	800bc8e <HAL_UARTEx_DisableFifoMode+0x16>
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	e027      	b.n	800bcde <HAL_UARTEx_DisableFifoMode+0x66>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2224      	movs	r2, #36	@ 0x24
 800bc9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f022 0201 	bic.w	r2, r2, #1
 800bcb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bcbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b084      	sub	sp, #16
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d101      	bne.n	800bd02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcfe:	2302      	movs	r3, #2
 800bd00:	e02d      	b.n	800bd5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2224      	movs	r2, #36	@ 0x24
 800bd0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f022 0201 	bic.w	r2, r2, #1
 800bd28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	430a      	orrs	r2, r1
 800bd3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f850 	bl	800bde4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2220      	movs	r2, #32
 800bd50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d101      	bne.n	800bd7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	e02d      	b.n	800bdda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2224      	movs	r2, #36	@ 0x24
 800bd8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f022 0201 	bic.w	r2, r2, #1
 800bda4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f812 	bl	800bde4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2220      	movs	r2, #32
 800bdcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d108      	bne.n	800be06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be04:	e031      	b.n	800be6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be06:	2308      	movs	r3, #8
 800be08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be0a:	2308      	movs	r3, #8
 800be0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	0e5b      	lsrs	r3, r3, #25
 800be16:	b2db      	uxtb	r3, r3
 800be18:	f003 0307 	and.w	r3, r3, #7
 800be1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	0f5b      	lsrs	r3, r3, #29
 800be26:	b2db      	uxtb	r3, r3
 800be28:	f003 0307 	and.w	r3, r3, #7
 800be2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be2e:	7bbb      	ldrb	r3, [r7, #14]
 800be30:	7b3a      	ldrb	r2, [r7, #12]
 800be32:	4911      	ldr	r1, [pc, #68]	@ (800be78 <UARTEx_SetNbDataToProcess+0x94>)
 800be34:	5c8a      	ldrb	r2, [r1, r2]
 800be36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be3a:	7b3a      	ldrb	r2, [r7, #12]
 800be3c:	490f      	ldr	r1, [pc, #60]	@ (800be7c <UARTEx_SetNbDataToProcess+0x98>)
 800be3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be40:	fb93 f3f2 	sdiv	r3, r3, r2
 800be44:	b29a      	uxth	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
 800be4e:	7b7a      	ldrb	r2, [r7, #13]
 800be50:	4909      	ldr	r1, [pc, #36]	@ (800be78 <UARTEx_SetNbDataToProcess+0x94>)
 800be52:	5c8a      	ldrb	r2, [r1, r2]
 800be54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be58:	7b7a      	ldrb	r2, [r7, #13]
 800be5a:	4908      	ldr	r1, [pc, #32]	@ (800be7c <UARTEx_SetNbDataToProcess+0x98>)
 800be5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be62:	b29a      	uxth	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be6a:	bf00      	nop
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	0800bf3c 	.word	0x0800bf3c
 800be7c:	0800bf44 	.word	0x0800bf44

0800be80 <memset>:
 800be80:	4402      	add	r2, r0
 800be82:	4603      	mov	r3, r0
 800be84:	4293      	cmp	r3, r2
 800be86:	d100      	bne.n	800be8a <memset+0xa>
 800be88:	4770      	bx	lr
 800be8a:	f803 1b01 	strb.w	r1, [r3], #1
 800be8e:	e7f9      	b.n	800be84 <memset+0x4>

0800be90 <__libc_init_array>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	4d0d      	ldr	r5, [pc, #52]	@ (800bec8 <__libc_init_array+0x38>)
 800be94:	4c0d      	ldr	r4, [pc, #52]	@ (800becc <__libc_init_array+0x3c>)
 800be96:	1b64      	subs	r4, r4, r5
 800be98:	10a4      	asrs	r4, r4, #2
 800be9a:	2600      	movs	r6, #0
 800be9c:	42a6      	cmp	r6, r4
 800be9e:	d109      	bne.n	800beb4 <__libc_init_array+0x24>
 800bea0:	4d0b      	ldr	r5, [pc, #44]	@ (800bed0 <__libc_init_array+0x40>)
 800bea2:	4c0c      	ldr	r4, [pc, #48]	@ (800bed4 <__libc_init_array+0x44>)
 800bea4:	f000 f826 	bl	800bef4 <_init>
 800bea8:	1b64      	subs	r4, r4, r5
 800beaa:	10a4      	asrs	r4, r4, #2
 800beac:	2600      	movs	r6, #0
 800beae:	42a6      	cmp	r6, r4
 800beb0:	d105      	bne.n	800bebe <__libc_init_array+0x2e>
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800beb8:	4798      	blx	r3
 800beba:	3601      	adds	r6, #1
 800bebc:	e7ee      	b.n	800be9c <__libc_init_array+0xc>
 800bebe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec2:	4798      	blx	r3
 800bec4:	3601      	adds	r6, #1
 800bec6:	e7f2      	b.n	800beae <__libc_init_array+0x1e>
 800bec8:	0800bf54 	.word	0x0800bf54
 800becc:	0800bf54 	.word	0x0800bf54
 800bed0:	0800bf54 	.word	0x0800bf54
 800bed4:	0800bf58 	.word	0x0800bf58

0800bed8 <memcpy>:
 800bed8:	440a      	add	r2, r1
 800beda:	4291      	cmp	r1, r2
 800bedc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bee0:	d100      	bne.n	800bee4 <memcpy+0xc>
 800bee2:	4770      	bx	lr
 800bee4:	b510      	push	{r4, lr}
 800bee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beee:	4291      	cmp	r1, r2
 800bef0:	d1f9      	bne.n	800bee6 <memcpy+0xe>
 800bef2:	bd10      	pop	{r4, pc}

0800bef4 <_init>:
 800bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef6:	bf00      	nop
 800bef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befa:	bc08      	pop	{r3}
 800befc:	469e      	mov	lr, r3
 800befe:	4770      	bx	lr

0800bf00 <_fini>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	bf00      	nop
 800bf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf06:	bc08      	pop	{r3}
 800bf08:	469e      	mov	lr, r3
 800bf0a:	4770      	bx	lr
