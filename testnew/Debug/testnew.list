
testnew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3ac  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a584  0800a584  0000b584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c4  0800a5c4  0000c020  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5c4  0800a5c4  0000b5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5cc  0800a5cc  0000c020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5cc  0800a5cc  0000b5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5d0  0800a5d0  0000b5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800a5d4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000020  0800a5f4  0000c020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  0800a5f4  0000c524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018178  00000000  00000000  0000c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aed  00000000  00000000  000241c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00026cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b5  00000000  00000000  000281d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b94  00000000  00000000  00029285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180e2  00000000  00000000  00050e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f2da  00000000  00000000  00068efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001781d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc4  00000000  00000000  00178218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0017dfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a56c 	.word	0x0800a56c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	0800a56c 	.word	0x0800a56c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e60:	f002 fa53 	bl	800330a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e64:	f000 fb48 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e68:	f000 fea0 	bl	8001bac <MX_GPIO_Init>
  MX_DMA_Init();
 8000e6c:	f000 fe74 	bl	8001b58 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e70:	f000 fc16 	bl	80016a0 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000e74:	f000 fc5e 	bl	8001734 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e78:	f000 fcb0 	bl	80017dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e7c:	f000 fcfc 	bl	8001878 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e80:	f000 fd50 	bl	8001924 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e84:	f000 fe14 	bl	8001ab0 <MX_TIM8_Init>
  MX_TIM5_Init();
 8000e88:	f000 fdc4 	bl	8001a14 <MX_TIM5_Init>
  MX_ADC3_Init();
 8000e8c:	f000 fb80 	bl	8001590 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000e90:	489b      	ldr	r0, [pc, #620]	@ (8001100 <main+0x2a8>)
 8000e92:	f005 fdf3 	bl	8006a7c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e96:	2100      	movs	r1, #0
 8000e98:	4899      	ldr	r0, [pc, #612]	@ (8001100 <main+0x2a8>)
 8000e9a:	f005 ff39 	bl	8006d10 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000e9e:	213c      	movs	r1, #60	@ 0x3c
 8000ea0:	4898      	ldr	r0, [pc, #608]	@ (8001104 <main+0x2ac>)
 8000ea2:	f006 f8ed 	bl	8007080 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000ea6:	4898      	ldr	r0, [pc, #608]	@ (8001108 <main+0x2b0>)
 8000ea8:	f005 fe58 	bl	8006b5c <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8000eac:	217f      	movs	r1, #127	@ 0x7f
 8000eae:	4897      	ldr	r0, [pc, #604]	@ (800110c <main+0x2b4>)
 8000eb0:	f003 fdcc 	bl	8004a4c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joyAnalogRead, 40);
 8000eb4:	2228      	movs	r2, #40	@ 0x28
 8000eb6:	4996      	ldr	r1, [pc, #600]	@ (8001110 <main+0x2b8>)
 8000eb8:	4894      	ldr	r0, [pc, #592]	@ (800110c <main+0x2b4>)
 8000eba:	f002 feb9 	bl	8003c30 <HAL_ADC_Start_DMA>
  _micros = 0;
 8000ebe:	4995      	ldr	r1, [pc, #596]	@ (8001114 <main+0x2bc>)
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
  UARTInterruptConfig();
 8000ecc:	f001 f938 	bl	8002140 <UARTInterruptConfig>

	Velocontrol.kp = 220;//180
 8000ed0:	4b91      	ldr	r3, [pc, #580]	@ (8001118 <main+0x2c0>)
 8000ed2:	4a92      	ldr	r2, [pc, #584]	@ (800111c <main+0x2c4>)
 8000ed4:	619a      	str	r2, [r3, #24]
	Velocontrol.ki = 32;//25
 8000ed6:	4b90      	ldr	r3, [pc, #576]	@ (8001118 <main+0x2c0>)
 8000ed8:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 8000edc:	61da      	str	r2, [r3, #28]
	Velocontrol.kd = 0;
 8000ede:	4b8e      	ldr	r3, [pc, #568]	@ (8001118 <main+0x2c0>)
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
	Velocontrol.T = 0.0001;
 8000ee6:	4b8c      	ldr	r3, [pc, #560]	@ (8001118 <main+0x2c0>)
 8000ee8:	4a8d      	ldr	r2, [pc, #564]	@ (8001120 <main+0x2c8>)
 8000eea:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol.kp = 0.5667;//2.015,0.6
 8000eec:	4b8d      	ldr	r3, [pc, #564]	@ (8001124 <main+0x2cc>)
 8000eee:	4a8e      	ldr	r2, [pc, #568]	@ (8001128 <main+0x2d0>)
 8000ef0:	619a      	str	r2, [r3, #24]
	Poscontrol.ki = 1.29;//4.5425,1.34
 8000ef2:	4b8c      	ldr	r3, [pc, #560]	@ (8001124 <main+0x2cc>)
 8000ef4:	4a8d      	ldr	r2, [pc, #564]	@ (800112c <main+0x2d4>)
 8000ef6:	61da      	str	r2, [r3, #28]
	Poscontrol.kd = 0.0000006;//0.0000021,0.0000004
 8000ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8001124 <main+0x2cc>)
 8000efa:	4a8d      	ldr	r2, [pc, #564]	@ (8001130 <main+0x2d8>)
 8000efc:	621a      	str	r2, [r3, #32]
	Poscontrol.T = 0.0001;
 8000efe:	4b89      	ldr	r3, [pc, #548]	@ (8001124 <main+0x2cc>)
 8000f00:	4a87      	ldr	r2, [pc, #540]	@ (8001120 <main+0x2c8>)
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Timer SET
	  int64_t currentTime = micros();
 8000f04:	f000 ff4e 	bl	8001da4 <micros>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	e9c7 2300 	strd	r2, r3, [r7]
	  static uint64_t timestamp =0;
	  static uint64_t timestamp5 =0;
	  //Timer SET
		if(currentTime > timestamp)
 8000f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f14:	4987      	ldr	r1, [pc, #540]	@ (8001134 <main+0x2dc>)
 8000f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	eb71 0303 	sbcs.w	r3, r1, r3
 8000f20:	d20e      	bcs.n	8000f40 <main+0xe8>
		{
		QEIEncoderPos_Update();
 8000f22:	f000 ff59 	bl	8001dd8 <QEIEncoderPos_Update>
		QEIEncoderVel_Update();
 8000f26:	f000 ffe7 	bl	8001ef8 <QEIEncoderVel_Update>
		timestamp =currentTime + 100;//us
 8000f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f2e:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8000f32:	f143 0500 	adc.w	r5, r3, #0
 8000f36:	4622      	mov	r2, r4
 8000f38:	462b      	mov	r3, r5
 8000f3a:	497e      	ldr	r1, [pc, #504]	@ (8001134 <main+0x2dc>)
 8000f3c:	e9c1 2300 	strd	r2, r3, [r1]
		}
//	  Joy_State();
	ButtonTest[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000f40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f004 fcae 	bl	80058a8 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b79      	ldr	r3, [pc, #484]	@ (8001138 <main+0x2e0>)
 8000f52:	601a      	str	r2, [r3, #0]
	ButtonTest[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8000f54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f58:	4878      	ldr	r0, [pc, #480]	@ (800113c <main+0x2e4>)
 8000f5a:	f004 fca5 	bl	80058a8 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b75      	ldr	r3, [pc, #468]	@ (8001138 <main+0x2e0>)
 8000f64:	605a      	str	r2, [r3, #4]
	ButtonTest[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6e:	f004 fc9b 	bl	80058a8 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b70      	ldr	r3, [pc, #448]	@ (8001138 <main+0x2e0>)
 8000f78:	609a      	str	r2, [r3, #8]
	ButtonTest[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000f7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f82:	f004 fc91 	bl	80058a8 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b6b      	ldr	r3, [pc, #428]	@ (8001138 <main+0x2e0>)
 8000f8c:	60da      	str	r2, [r3, #12]
	ButtonTest[4] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000f8e:	2180      	movs	r1, #128	@ 0x80
 8000f90:	486b      	ldr	r0, [pc, #428]	@ (8001140 <main+0x2e8>)
 8000f92:	f004 fc89 	bl	80058a8 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b67      	ldr	r3, [pc, #412]	@ (8001138 <main+0x2e0>)
 8000f9c:	611a      	str	r2, [r3, #16]
	ButtonTest[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000f9e:	2140      	movs	r1, #64	@ 0x40
 8000fa0:	4866      	ldr	r0, [pc, #408]	@ (800113c <main+0x2e4>)
 8000fa2:	f004 fc81 	bl	80058a8 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b63      	ldr	r3, [pc, #396]	@ (8001138 <main+0x2e0>)
 8000fac:	615a      	str	r2, [r3, #20]
	LeadSW[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4862      	ldr	r0, [pc, #392]	@ (800113c <main+0x2e4>)
 8000fb2:	f004 fc79 	bl	80058a8 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b62      	ldr	r3, [pc, #392]	@ (8001144 <main+0x2ec>)
 8000fbc:	601a      	str	r2, [r3, #0]
	LeadSW[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	485f      	ldr	r0, [pc, #380]	@ (8001140 <main+0x2e8>)
 8000fc2:	f004 fc71 	bl	80058a8 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b5e      	ldr	r3, [pc, #376]	@ (8001144 <main+0x2ec>)
 8000fcc:	605a      	str	r2, [r3, #4]
	test = LeadSW[1] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1);
 8000fce:	4b5d      	ldr	r3, [pc, #372]	@ (8001144 <main+0x2ec>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <main+0x18e>
 8000fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001144 <main+0x2ec>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d105      	bne.n	8000fea <main+0x192>
 8000fde:	4b59      	ldr	r3, [pc, #356]	@ (8001144 <main+0x2ec>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <main+0x192>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <main+0x194>
 8000fea:	2300      	movs	r3, #0
 8000fec:	4a56      	ldr	r2, [pc, #344]	@ (8001148 <main+0x2f0>)
 8000fee:	6013      	str	r3, [r2, #0]
	test2 = LeadSW[0] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1);
 8000ff0:	4b54      	ldr	r3, [pc, #336]	@ (8001144 <main+0x2ec>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d007      	beq.n	8001008 <main+0x1b0>
 8000ff8:	4b52      	ldr	r3, [pc, #328]	@ (8001144 <main+0x2ec>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <main+0x1b4>
 8001000:	4b50      	ldr	r3, [pc, #320]	@ (8001144 <main+0x2ec>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <main+0x1b4>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <main+0x1b6>
 800100c:	2300      	movs	r3, #0
 800100e:	4a4f      	ldr	r2, [pc, #316]	@ (800114c <main+0x2f4>)
 8001010:	6013      	str	r3, [r2, #0]
	  switch (state_ALL)
 8001012:	4b4f      	ldr	r3, [pc, #316]	@ (8001150 <main+0x2f8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b06      	cmp	r3, #6
 8001018:	f63f af74 	bhi.w	8000f04 <main+0xac>
 800101c:	a201      	add	r2, pc, #4	@ (adr r2, 8001024 <main+0x1cc>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	08001041 	.word	0x08001041
 8001028:	080010d1 	.word	0x080010d1
 800102c:	0800116d 	.word	0x0800116d
 8001030:	080011b3 	.word	0x080011b3
 8001034:	0800129b 	.word	0x0800129b
 8001038:	08001301 	.word	0x08001301
 800103c:	0800139d 	.word	0x0800139d
	  			{
	  			case 0://HOME
	  				test = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001040:	2120      	movs	r1, #32
 8001042:	483e      	ldr	r0, [pc, #248]	@ (800113c <main+0x2e4>)
 8001044:	f004 fc30 	bl	80058a8 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4b3e      	ldr	r3, [pc, #248]	@ (8001148 <main+0x2f0>)
 800104e:	601a      	str	r2, [r3, #0]
					if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8001050:	4b40      	ldr	r3, [pc, #256]	@ (8001154 <main+0x2fc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d006      	beq.n	8001066 <main+0x20e>
 8001058:	2120      	movs	r1, #32
 800105a:	4838      	ldr	r0, [pc, #224]	@ (800113c <main+0x2e4>)
 800105c:	f004 fc24 	bl	80058a8 <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d128      	bne.n	80010b8 <main+0x260>
					{
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	2101      	movs	r1, #1
 800106a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106e:	f004 fc33 	bl	80058d8 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001072:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <main+0x2a8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34
						HAL_Delay(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800107e:	f002 f9b5 	bl	80033ec <HAL_Delay>
						HOME = 0;
 8001082:	4b34      	ldr	r3, [pc, #208]	@ (8001154 <main+0x2fc>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(&htim3,0);
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <main+0x2ac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	@ 0x24
						Count = 0;
 8001090:	4b31      	ldr	r3, [pc, #196]	@ (8001158 <main+0x300>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
						QEIdata.Position[NEW] = 0;
 8001096:	4b31      	ldr	r3, [pc, #196]	@ (800115c <main+0x304>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
						QEIdata.Position[OLD] = 0;
 800109c:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <main+0x304>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
						Pos_Start = 0;
 80010a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001160 <main+0x308>)
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
						state_ALL = 2;
 80010aa:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <main+0x2f8>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	601a      	str	r2, [r3, #0]
						state_Tra = 0;
 80010b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001164 <main+0x30c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
						break;
 80010b6:	e210      	b.n	80014da <main+0x682>
					}
					else
					{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2101      	movs	r1, #1
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c0:	f004 fc0a 	bl	80058d8 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7500);
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <main+0x2a8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 80010cc:	635a      	str	r2, [r3, #52]	@ 0x34
					}
	  				break;
 80010ce:	e204      	b.n	80014da <main+0x682>
	  			case 1://Standby
	  				if(start == 1)//MODBUS HERE
 80010d0:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <main+0x310>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d102      	bne.n	80010de <main+0x286>
	  				{
	  					state_ALL = 2;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <main+0x2f8>)
 80010da:	2202      	movs	r2, #2
 80010dc:	601a      	str	r2, [r3, #0]
	  				}
	  				if(ButtonTest[1] == 0)//MODBUS HERE
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <main+0x2e0>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <main+0x294>
					{
						state_ALL = 4;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <main+0x2f8>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	601a      	str	r2, [r3, #0]
					}
	  				if(start == 1)//HOME Button
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <main+0x310>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	f040 81ea 	bne.w	80014ca <main+0x672>
					{
						state_ALL = 2;
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <main+0x2f8>)
 80010f8:	2202      	movs	r2, #2
 80010fa:	601a      	str	r2, [r3, #0]
					}
	  				break;
 80010fc:	e1e5      	b.n	80014ca <main+0x672>
 80010fe:	bf00      	nop
 8001100:	20000280 	.word	0x20000280
 8001104:	20000234 	.word	0x20000234
 8001108:	200002cc 	.word	0x200002cc
 800110c:	2000003c 	.word	0x2000003c
 8001110:	20000430 	.word	0x20000430
 8001114:	200004e0 	.word	0x200004e0
 8001118:	200003bc 	.word	0x200003bc
 800111c:	435c0000 	.word	0x435c0000
 8001120:	38d1b717 	.word	0x38d1b717
 8001124:	200003e4 	.word	0x200003e4
 8001128:	3f111340 	.word	0x3f111340
 800112c:	3fa51eb8 	.word	0x3fa51eb8
 8001130:	35210fb0 	.word	0x35210fb0
 8001134:	200004e8 	.word	0x200004e8
 8001138:	2000037c 	.word	0x2000037c
 800113c:	48000400 	.word	0x48000400
 8001140:	48000800 	.word	0x48000800
 8001144:	20000394 	.word	0x20000394
 8001148:	20000364 	.word	0x20000364
 800114c:	20000368 	.word	0x20000368
 8001150:	20000004 	.word	0x20000004
 8001154:	20000378 	.word	0x20000378
 8001158:	200004b4 	.word	0x200004b4
 800115c:	200004c0 	.word	0x200004c0
 8001160:	2000040c 	.word	0x2000040c
 8001164:	2000042c 	.word	0x2000042c
 8001168:	2000036c 	.word	0x2000036c
	  			case 2://JOY SET
//	  				Trajectory();
	  				Joy_State();
 800116c:	f001 f80e 	bl	800218c <Joy_State>
	  				if(ButtonTest[0] == 0)//HOME Button
 8001170:	4b91      	ldr	r3, [pc, #580]	@ (80013b8 <main+0x560>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <main+0x326>
					{
						state_ALL = 0;
 8001178:	4b90      	ldr	r3, [pc, #576]	@ (80013bc <main+0x564>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
					}
	  				if(ButtonTest[1] == 0)
 800117e:	4b8e      	ldr	r3, [pc, #568]	@ (80013b8 <main+0x560>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <main+0x334>
					{
						state_ALL = 4;
 8001186:	4b8d      	ldr	r3, [pc, #564]	@ (80013bc <main+0x564>)
 8001188:	2204      	movs	r2, #4
 800118a:	601a      	str	r2, [r3, #0]
					}
	  				if(ButtonTest[2] == 0)
 800118c:	4b8a      	ldr	r3, [pc, #552]	@ (80013b8 <main+0x560>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <main+0x342>
					{
						state_ALL = 5;
 8001194:	4b89      	ldr	r3, [pc, #548]	@ (80013bc <main+0x564>)
 8001196:	2205      	movs	r2, #5
 8001198:	601a      	str	r2, [r3, #0]
					}
	  				if(start == 1)
 800119a:	4b89      	ldr	r3, [pc, #548]	@ (80013c0 <main+0x568>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	f040 8195 	bne.w	80014ce <main+0x676>
	  				{
	  					state_ALL = 3;
 80011a4:	4b85      	ldr	r3, [pc, #532]	@ (80013bc <main+0x564>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	601a      	str	r2, [r3, #0]
	  					start = 0;
 80011aa:	4b85      	ldr	r3, [pc, #532]	@ (80013c0 <main+0x568>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
	  				}
	  				break;
 80011b0:	e18d      	b.n	80014ce <main+0x676>
	  			case 3://PID
					Trajectory();
 80011b2:	f001 f9f9 	bl	80025a8 <Trajectory>
					if(CountSetpoint < 100)
 80011b6:	4b83      	ldr	r3, [pc, #524]	@ (80013c4 <main+0x56c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b63      	cmp	r3, #99	@ 0x63
 80011bc:	dc02      	bgt.n	80011c4 <main+0x36c>
					{
						PIDposition();
 80011be:	f001 fc6f 	bl	8002aa0 <PIDposition>
 80011c2:	e02c      	b.n	800121e <main+0x3c6>
					}
					else
					{
						if(state_ALL_Old == 5 || state_ALL_Old == 0)
 80011c4:	4b80      	ldr	r3, [pc, #512]	@ (80013c8 <main+0x570>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d003      	beq.n	80011d4 <main+0x37c>
 80011cc:	4b7e      	ldr	r3, [pc, #504]	@ (80013c8 <main+0x570>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d112      	bne.n	80011fa <main+0x3a2>
						{

						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2101      	movs	r1, #1
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011dc:	f004 fb7c 	bl	80058d8 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80011e0:	4b7a      	ldr	r3, [pc, #488]	@ (80013cc <main+0x574>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	635a      	str	r2, [r3, #52]	@ 0x34
						reset();
 80011e8:	f001 f936 	bl	8002458 <reset>
//						state_ALL = 6;
						state_ALL = 2;
 80011ec:	4b73      	ldr	r3, [pc, #460]	@ (80013bc <main+0x564>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	601a      	str	r2, [r3, #0]
						CountSetpoint = 0;
 80011f2:	4b74      	ldr	r3, [pc, #464]	@ (80013c4 <main+0x56c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e011      	b.n	800121e <main+0x3c6>
						}
						else
						{
						state_ALL = 2;
 80011fa:	4b70      	ldr	r3, [pc, #448]	@ (80013bc <main+0x564>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	601a      	str	r2, [r3, #0]
						CountSetpoint = 0;
 8001200:	4b70      	ldr	r3, [pc, #448]	@ (80013c4 <main+0x56c>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2101      	movs	r1, #1
 800120a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120e:	f004 fb63 	bl	80058d8 <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001212:	4b6e      	ldr	r3, [pc, #440]	@ (80013cc <main+0x574>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	@ 0x34
						reset();
 800121a:	f001 f91d 	bl	8002458 <reset>
						}

					}
	  				if(ButtonTest[0] == 0)//HOME Button
 800121e:	4b66      	ldr	r3, [pc, #408]	@ (80013b8 <main+0x560>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d104      	bne.n	8001230 <main+0x3d8>
					{
						state_ALL = 0;
 8001226:	4b65      	ldr	r3, [pc, #404]	@ (80013bc <main+0x564>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
						reset();
 800122c:	f001 f914 	bl	8002458 <reset>
					}
	  				if(fabs(Pos-Pos_Target) <= 0.2)//Limit
 8001230:	4b67      	ldr	r3, [pc, #412]	@ (80013d0 <main+0x578>)
 8001232:	ed93 7a00 	vldr	s14, [r3]
 8001236:	4b67      	ldr	r3, [pc, #412]	@ (80013d4 <main+0x57c>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001240:	eef0 7ae7 	vabs.f32	s15, s15
 8001244:	ee17 0a90 	vmov	r0, s15
 8001248:	f7ff f94a 	bl	80004e0 <__aeabi_f2d>
 800124c:	a358      	add	r3, pc, #352	@ (adr r3, 80013b0 <main+0x558>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff fc19 	bl	8000a88 <__aeabi_dcmple>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d01a      	beq.n	8001292 <main+0x43a>
	  				{
	  					if(currentTime > timestamp5)
 800125c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001260:	495d      	ldr	r1, [pc, #372]	@ (80013d8 <main+0x580>)
 8001262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001266:	4290      	cmp	r0, r2
 8001268:	eb71 0303 	sbcs.w	r3, r1, r3
 800126c:	f080 8131 	bcs.w	80014d2 <main+0x67a>
					  {
							CountSetpoint++;
 8001270:	4b54      	ldr	r3, [pc, #336]	@ (80013c4 <main+0x56c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a53      	ldr	r2, [pc, #332]	@ (80013c4 <main+0x56c>)
 8001278:	6013      	str	r3, [r2, #0]
							timestamp5 =currentTime + 1000;
 800127a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800127e:	f512 787a 	adds.w	r8, r2, #1000	@ 0x3e8
 8001282:	f143 0900 	adc.w	r9, r3, #0
 8001286:	4642      	mov	r2, r8
 8001288:	464b      	mov	r3, r9
 800128a:	4953      	ldr	r1, [pc, #332]	@ (80013d8 <main+0x580>)
 800128c:	e9c1 2300 	strd	r2, r3, [r1]
	  				else
	  				{
	  					CountSetpoint = 0;
	  				}

	  				break;
 8001290:	e11f      	b.n	80014d2 <main+0x67a>
	  					CountSetpoint = 0;
 8001292:	4b4c      	ldr	r3, [pc, #304]	@ (80013c4 <main+0x56c>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
	  				break;
 8001298:	e11b      	b.n	80014d2 <main+0x67a>
	  			case 4://TEST
	  				Joy_State();
 800129a:	f000 ff77 	bl	800218c <Joy_State>
	  				if(ButtonTest[1] == 0)
 800129e:	4b46      	ldr	r3, [pc, #280]	@ (80013b8 <main+0x560>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <main+0x456>
	  				{
	  					MemPos[0] = Pos;
 80012a6:	4b4a      	ldr	r3, [pc, #296]	@ (80013d0 <main+0x578>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a4c      	ldr	r2, [pc, #304]	@ (80013dc <main+0x584>)
 80012ac:	6013      	str	r3, [r2, #0]
	  				}
	  				if(ButtonTest[2] == 0)
 80012ae:	4b42      	ldr	r3, [pc, #264]	@ (80013b8 <main+0x560>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d103      	bne.n	80012be <main+0x466>
	  				{
	  					MemPos[1] = Pos;
 80012b6:	4b46      	ldr	r3, [pc, #280]	@ (80013d0 <main+0x578>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a48      	ldr	r2, [pc, #288]	@ (80013dc <main+0x584>)
 80012bc:	6053      	str	r3, [r2, #4]
	  				}
	  				if(ButtonTest[3] == 0)
 80012be:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <main+0x560>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <main+0x476>
					{
	  					MemPos[2] = Pos;
 80012c6:	4b42      	ldr	r3, [pc, #264]	@ (80013d0 <main+0x578>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a44      	ldr	r2, [pc, #272]	@ (80013dc <main+0x584>)
 80012cc:	6093      	str	r3, [r2, #8]
					}
					if(ButtonTest[4] == 0)
 80012ce:	4b3a      	ldr	r3, [pc, #232]	@ (80013b8 <main+0x560>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d103      	bne.n	80012de <main+0x486>
					{
						MemPos[3] = Pos;
 80012d6:	4b3e      	ldr	r3, [pc, #248]	@ (80013d0 <main+0x578>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a40      	ldr	r2, [pc, #256]	@ (80013dc <main+0x584>)
 80012dc:	60d3      	str	r3, [r2, #12]
					}
					if(ButtonTest[5] == 0)
 80012de:	4b36      	ldr	r3, [pc, #216]	@ (80013b8 <main+0x560>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d103      	bne.n	80012ee <main+0x496>
					{
						MemPos[4] = Pos;
 80012e6:	4b3a      	ldr	r3, [pc, #232]	@ (80013d0 <main+0x578>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3c      	ldr	r2, [pc, #240]	@ (80013dc <main+0x584>)
 80012ec:	6113      	str	r3, [r2, #16]
					}
					if(ButtonTest[0] == 0)//HOME Button
 80012ee:	4b32      	ldr	r3, [pc, #200]	@ (80013b8 <main+0x560>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 80ef 	bne.w	80014d6 <main+0x67e>
					{
						state_ALL = 0;
 80012f8:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <main+0x564>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
					}
					break;
 80012fe:	e0ea      	b.n	80014d6 <main+0x67e>
	  			case 5://JOG MODE
	  				Pos_Target = MemPos[i];
 8001300:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <main+0x588>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a35      	ldr	r2, [pc, #212]	@ (80013dc <main+0x584>)
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a31      	ldr	r2, [pc, #196]	@ (80013d4 <main+0x57c>)
 800130e:	6013      	str	r3, [r2, #0]
	  				state_ALL = 3;
 8001310:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <main+0x564>)
 8001312:	2203      	movs	r2, #3
 8001314:	601a      	str	r2, [r3, #0]
	  				state_ALL_Old = 5;
 8001316:	4b2c      	ldr	r3, [pc, #176]	@ (80013c8 <main+0x570>)
 8001318:	2205      	movs	r2, #5
 800131a:	601a      	str	r2, [r3, #0]
	  				i++;
 800131c:	4b30      	ldr	r3, [pc, #192]	@ (80013e0 <main+0x588>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a2f      	ldr	r2, [pc, #188]	@ (80013e0 <main+0x588>)
 8001324:	6013      	str	r3, [r2, #0]
	  				if(i == 5)
 8001326:	4b2e      	ldr	r3, [pc, #184]	@ (80013e0 <main+0x588>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b05      	cmp	r3, #5
 800132c:	d105      	bne.n	800133a <main+0x4e2>
	  				{
	  				state_ALL_Old = 0;
 800132e:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <main+0x570>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
	  				i = 0;
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <main+0x588>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
	  				}

	  				Velocontrol.Error[NEW] = 0;
 800133a:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <main+0x58c>)
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
					Velocontrol.Error[OLD] = 0;
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <main+0x58c>)
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
					Velocontrol.Error[OLDER] = 0;
 800134a:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <main+0x58c>)
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
					Velocontrol.Output[NEW] = 0;
 8001352:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <main+0x58c>)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
					Velocontrol.Output[OLD] = 0;
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <main+0x58c>)
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
					Velocontrol.Output[OLDER] = 0;
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <main+0x58c>)
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	609a      	str	r2, [r3, #8]

					Poscontrol.Error[NEW] = 0;
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <main+0x590>)
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
					Poscontrol.Error[OLD] = 0;
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <main+0x590>)
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
					Poscontrol.Error[OLDER] = 0;
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <main+0x590>)
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
					Poscontrol.Output[NEW] = 0;
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <main+0x590>)
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
					Poscontrol.Output[OLD] = 0;
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <main+0x590>)
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
					Poscontrol.Output[OLDER] = 0;
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <main+0x590>)
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
					break;
 800139a:	e09e      	b.n	80014da <main+0x682>
	  			case 6://Gripper
	  				switch (state_Griper)
 800139c:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <main+0x594>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d025      	beq.n	80013f0 <main+0x598>
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d052      	beq.n	800144e <main+0x5f6>

	  						break;
	  				}


	  				break;
 80013a8:	e097      	b.n	80014da <main+0x682>
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w
 80013b0:	9999999a 	.word	0x9999999a
 80013b4:	3fc99999 	.word	0x3fc99999
 80013b8:	2000037c 	.word	0x2000037c
 80013bc:	20000004 	.word	0x20000004
 80013c0:	2000036c 	.word	0x2000036c
 80013c4:	2000039c 	.word	0x2000039c
 80013c8:	20000370 	.word	0x20000370
 80013cc:	20000280 	.word	0x20000280
 80013d0:	200004b0 	.word	0x200004b0
 80013d4:	20000410 	.word	0x20000410
 80013d8:	200004f0 	.word	0x200004f0
 80013dc:	200003a4 	.word	0x200003a4
 80013e0:	200003b8 	.word	0x200003b8
 80013e4:	200003bc 	.word	0x200003bc
 80013e8:	200003e4 	.word	0x200003e4
 80013ec:	20000374 	.word	0x20000374
								if(LeadSW[1] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 80013f0:	4b3a      	ldr	r3, [pc, #232]	@ (80014dc <main+0x684>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d064      	beq.n	80014c2 <main+0x66a>
 80013f8:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <main+0x684>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d103      	bne.n	8001408 <main+0x5b0>
 8001400:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <main+0x684>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d021      	beq.n	800144c <main+0x5f4>
								else if(LeadSW[0] == 0)
 8001408:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <main+0x684>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d158      	bne.n	80014c2 <main+0x66a>
									if(CountGriper > 100)
 8001410:	4b33      	ldr	r3, [pc, #204]	@ (80014e0 <main+0x688>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b64      	cmp	r3, #100	@ 0x64
 8001416:	dd06      	ble.n	8001426 <main+0x5ce>
										state_Griper = 1;
 8001418:	4b32      	ldr	r3, [pc, #200]	@ (80014e4 <main+0x68c>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 800141e:	4b30      	ldr	r3, [pc, #192]	@ (80014e0 <main+0x688>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
	  						break;
 8001424:	e04d      	b.n	80014c2 <main+0x66a>
										if(timeGriper < HAL_GetTick())
 8001426:	f001 ffd5 	bl	80033d4 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	4b2e      	ldr	r3, [pc, #184]	@ (80014e8 <main+0x690>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d946      	bls.n	80014c2 <main+0x66a>
											CountGriper++;
 8001434:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <main+0x688>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a29      	ldr	r2, [pc, #164]	@ (80014e0 <main+0x688>)
 800143c:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 800143e:	f001 ffc9 	bl	80033d4 <HAL_GetTick>
 8001442:	4603      	mov	r3, r0
 8001444:	330a      	adds	r3, #10
 8001446:	4a28      	ldr	r2, [pc, #160]	@ (80014e8 <main+0x690>)
 8001448:	6013      	str	r3, [r2, #0]
	  						break;
 800144a:	e03a      	b.n	80014c2 <main+0x66a>
 800144c:	e039      	b.n	80014c2 <main+0x66a>
	  							if(LeadSW[0] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 800144e:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <main+0x684>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d037      	beq.n	80014c6 <main+0x66e>
 8001456:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <main+0x684>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d103      	bne.n	8001466 <main+0x60e>
 800145e:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <main+0x684>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d02c      	beq.n	80014c0 <main+0x668>
	  							else if(LeadSW[1] == 0)
 8001466:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <main+0x684>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d12b      	bne.n	80014c6 <main+0x66e>
	  								if(CountGriper > 100)
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <main+0x688>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	dd11      	ble.n	800149a <main+0x642>
	  									state_Griper = 0;
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <main+0x68c>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <main+0x688>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
										if(state_ALL_Old == 5)
 8001482:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <main+0x694>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d103      	bne.n	8001492 <main+0x63a>
											state_ALL = 5;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <main+0x698>)
 800148c:	2205      	movs	r2, #5
 800148e:	601a      	str	r2, [r3, #0]
	  						break;
 8001490:	e019      	b.n	80014c6 <main+0x66e>
											state_ALL = 0;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <main+0x698>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
	  						break;
 8001498:	e015      	b.n	80014c6 <main+0x66e>
										if(timeGriper < HAL_GetTick())
 800149a:	f001 ff9b 	bl	80033d4 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <main+0x69c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d90e      	bls.n	80014c6 <main+0x66e>
											CountGriper++;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <main+0x688>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a0c      	ldr	r2, [pc, #48]	@ (80014e0 <main+0x688>)
 80014b0:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 80014b2:	f001 ff8f 	bl	80033d4 <HAL_GetTick>
 80014b6:	4603      	mov	r3, r0
 80014b8:	330a      	adds	r3, #10
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <main+0x69c>)
 80014bc:	6013      	str	r3, [r2, #0]
	  						break;
 80014be:	e002      	b.n	80014c6 <main+0x66e>
 80014c0:	e001      	b.n	80014c6 <main+0x66e>
	  						break;
 80014c2:	bf00      	nop
 80014c4:	e009      	b.n	80014da <main+0x682>
	  						break;
 80014c6:	bf00      	nop
	  				break;
 80014c8:	e007      	b.n	80014da <main+0x682>
	  				break;
 80014ca:	bf00      	nop
 80014cc:	e51a      	b.n	8000f04 <main+0xac>
	  				break;
 80014ce:	bf00      	nop
 80014d0:	e518      	b.n	8000f04 <main+0xac>
	  				break;
 80014d2:	bf00      	nop
 80014d4:	e516      	b.n	8000f04 <main+0xac>
					break;
 80014d6:	bf00      	nop
 80014d8:	e514      	b.n	8000f04 <main+0xac>
  {
 80014da:	e513      	b.n	8000f04 <main+0xac>
 80014dc:	20000394 	.word	0x20000394
 80014e0:	200003a0 	.word	0x200003a0
 80014e4:	20000374 	.word	0x20000374
 80014e8:	200004f8 	.word	0x200004f8
 80014ec:	20000370 	.word	0x20000370
 80014f0:	20000004 	.word	0x20000004
 80014f4:	200004fc 	.word	0x200004fc

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b094      	sub	sp, #80	@ 0x50
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	2238      	movs	r2, #56	@ 0x38
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f009 f804 	bl	800a514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800151a:	2000      	movs	r0, #0
 800151c:	f004 fa26 	bl	800596c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152a:	2340      	movs	r3, #64	@ 0x40
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001532:	2302      	movs	r3, #2
 8001534:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001536:	2304      	movs	r3, #4
 8001538:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800153a:	2355      	movs	r3, #85	@ 0x55
 800153c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001542:	2302      	movs	r3, #2
 8001544:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4618      	mov	r0, r3
 8001550:	f004 fac0 	bl	8005ad4 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800155a:	f001 fc27 	bl	8002dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2303      	movs	r3, #3
 8001564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2104      	movs	r1, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fdbe 	bl	80060f8 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001582:	f001 fc13 	bl	8002dac <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3750      	adds	r7, #80	@ 0x50
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	@ 0x30
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2220      	movs	r2, #32
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f008 ffb3 	bl	800a514 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015ae:	4b38      	ldr	r3, [pc, #224]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015b0:	4a38      	ldr	r2, [pc, #224]	@ (8001694 <MX_ADC3_Init+0x104>)
 80015b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b4:	4b36      	ldr	r3, [pc, #216]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015b6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015ba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015bc:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c2:	4b33      	ldr	r3, [pc, #204]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80015c8:	4b31      	ldr	r3, [pc, #196]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015ce:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015d6:	2204      	movs	r2, #4
 80015d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015dc:	2200      	movs	r2, #0
 80015de:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 80015e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f4:	4b26      	ldr	r3, [pc, #152]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fa:	4b25      	ldr	r3, [pc, #148]	@ (8001690 <MX_ADC3_Init+0x100>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001600:	4b23      	ldr	r3, [pc, #140]	@ (8001690 <MX_ADC3_Init+0x100>)
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001608:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <MX_ADC3_Init+0x100>)
 800160a:	2200      	movs	r2, #0
 800160c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <MX_ADC3_Init+0x100>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001616:	481e      	ldr	r0, [pc, #120]	@ (8001690 <MX_ADC3_Init+0x100>)
 8001618:	f002 f94e 	bl	80038b8 <HAL_ADC_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001622:	f001 fbc3 	bl	8002dac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800162a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	4817      	ldr	r0, [pc, #92]	@ (8001690 <MX_ADC3_Init+0x100>)
 8001632:	f003 fa6d 	bl	8004b10 <HAL_ADCEx_MultiModeConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800163c:	f001 fbb6 	bl	8002dac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <MX_ADC3_Init+0x108>)
 8001642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001644:	2306      	movs	r3, #6
 8001646:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800164c:	237f      	movs	r3, #127	@ 0x7f
 800164e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001650:	2304      	movs	r3, #4
 8001652:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <MX_ADC3_Init+0x100>)
 800165e:	f002 fbd9 	bl	8003e14 <HAL_ADC_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001668:	f001 fba0 	bl	8002dac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <MX_ADC3_Init+0x10c>)
 800166e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001670:	230c      	movs	r3, #12
 8001672:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_ADC3_Init+0x100>)
 800167a:	f002 fbcb 	bl	8003e14 <HAL_ADC_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 8001684:	f001 fb92 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3730      	adds	r7, #48	@ 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000003c 	.word	0x2000003c
 8001694:	50000400 	.word	0x50000400
 8001698:	04300002 	.word	0x04300002
 800169c:	14f00020 	.word	0x14f00020

080016a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016a4:	4b21      	ldr	r3, [pc, #132]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016a6:	4a22      	ldr	r2, [pc, #136]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b18      	ldr	r3, [pc, #96]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d0:	4b16      	ldr	r3, [pc, #88]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016e2:	4812      	ldr	r0, [pc, #72]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016e4:	f006 fe78 	bl	80083d8 <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ee:	f001 fb5d 	bl	8002dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f2:	2100      	movs	r1, #0
 80016f4:	480d      	ldr	r0, [pc, #52]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 80016f6:	f008 fe42 	bl	800a37e <HAL_UARTEx_SetTxFifoThreshold>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001700:	f001 fb54 	bl	8002dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001704:	2100      	movs	r1, #0
 8001706:	4809      	ldr	r0, [pc, #36]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 8001708:	f008 fe77 	bl	800a3fa <HAL_UARTEx_SetRxFifoThreshold>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001712:	f001 fb4b 	bl	8002dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_LPUART1_UART_Init+0x8c>)
 8001718:	f008 fdf8 	bl	800a30c <HAL_UARTEx_DisableFifoMode>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001722:	f001 fb43 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000108 	.word	0x20000108
 8001730:	40008000 	.word	0x40008000

08001734 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 8001754:	4a20      	ldr	r2, [pc, #128]	@ (80017d8 <MX_TIM1_Init+0xa4>)
 8001756:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001758:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 8001766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800176a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001772:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800177e:	4815      	ldr	r0, [pc, #84]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 8001780:	f005 f924 	bl	80069cc <HAL_TIM_Base_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800178a:	f001 fb0f 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001792:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	480e      	ldr	r0, [pc, #56]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 800179c:	f005 ff62 	bl	8007664 <HAL_TIM_ConfigClockSource>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80017a6:	f001 fb01 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	@ (80017d4 <MX_TIM1_Init+0xa0>)
 80017bc:	f006 fd30 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017c6:	f001 faf1 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000019c 	.word	0x2000019c
 80017d8:	40012c00 	.word	0x40012c00

080017dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <MX_TIM2_Init+0x98>)
 80017fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001800:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <MX_TIM2_Init+0x98>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <MX_TIM2_Init+0x98>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <MX_TIM2_Init+0x98>)
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <MX_TIM2_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <MX_TIM2_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001822:	4814      	ldr	r0, [pc, #80]	@ (8001874 <MX_TIM2_Init+0x98>)
 8001824:	f005 f8d2 	bl	80069cc <HAL_TIM_Base_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800182e:	f001 fabd 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001832:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001836:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	480d      	ldr	r0, [pc, #52]	@ (8001874 <MX_TIM2_Init+0x98>)
 8001840:	f005 ff10 	bl	8007664 <HAL_TIM_ConfigClockSource>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800184a:	f001 faaf 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <MX_TIM2_Init+0x98>)
 800185c:	f006 fce0 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001866:	f001 faa1 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200001e8 	.word	0x200001e8

08001878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	@ 0x30
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	2224      	movs	r2, #36	@ 0x24
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f008 fe44 	bl	800a514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	463b      	mov	r3, r7
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MX_TIM3_Init+0xa4>)
 8001898:	4a21      	ldr	r2, [pc, #132]	@ (8001920 <MX_TIM3_Init+0xa8>)
 800189a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_TIM3_Init+0xa4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <MX_TIM3_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 57343;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_TIM3_Init+0xa4>)
 80018aa:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 80018ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_TIM3_Init+0xa4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <MX_TIM3_Init+0xa4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018bc:	2303      	movs	r3, #3
 80018be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018c4:	2301      	movs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018d4:	2301      	movs	r3, #1
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	480d      	ldr	r0, [pc, #52]	@ (800191c <MX_TIM3_Init+0xa4>)
 80018e8:	f005 fb24 	bl	8006f34 <HAL_TIM_Encoder_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80018f2:	f001 fa5b 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	4619      	mov	r1, r3
 8001902:	4806      	ldr	r0, [pc, #24]	@ (800191c <MX_TIM3_Init+0xa4>)
 8001904:	f006 fc8c 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800190e:	f001 fa4d 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	3730      	adds	r7, #48	@ 0x30
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000234 	.word	0x20000234
 8001920:	40000400 	.word	0x40000400

08001924 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	@ 0x38
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001956:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 8001958:	4a2d      	ldr	r2, [pc, #180]	@ (8001a10 <MX_TIM4_Init+0xec>)
 800195a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800195c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 800195e:	2201      	movs	r2, #1
 8001960:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42499;
 8001968:	4b28      	ldr	r3, [pc, #160]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 800196a:	f24a 6203 	movw	r2, #42499	@ 0xa603
 800196e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001970:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800197c:	4823      	ldr	r0, [pc, #140]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 800197e:	f005 f825 	bl	80069cc <HAL_TIM_Base_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001988:	f001 fa10 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001992:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001996:	4619      	mov	r1, r3
 8001998:	481c      	ldr	r0, [pc, #112]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 800199a:	f005 fe63 	bl	8007664 <HAL_TIM_ConfigClockSource>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80019a4:	f001 fa02 	bl	8002dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019a8:	4818      	ldr	r0, [pc, #96]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 80019aa:	f005 f94f 	bl	8006c4c <HAL_TIM_PWM_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80019b4:	f001 f9fa 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4811      	ldr	r0, [pc, #68]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 80019c8:	f006 fc2a 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80019d2:	f001 f9eb 	bl	8002dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d6:	2360      	movs	r3, #96	@ 0x60
 80019d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e6:	463b      	mov	r3, r7
 80019e8:	2200      	movs	r2, #0
 80019ea:	4619      	mov	r1, r3
 80019ec:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 80019ee:	f005 fd25 	bl	800743c <HAL_TIM_PWM_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80019f8:	f001 f9d8 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019fc:	4803      	ldr	r0, [pc, #12]	@ (8001a0c <MX_TIM4_Init+0xe8>)
 80019fe:	f001 fba3 	bl	8003148 <HAL_TIM_MspPostInit>

}
 8001a02:	bf00      	nop
 8001a04:	3738      	adds	r7, #56	@ 0x38
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000280 	.word	0x20000280
 8001a10:	40000800 	.word	0x40000800

08001a14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <MX_TIM5_Init+0x94>)
 8001a34:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <MX_TIM5_Init+0x98>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <MX_TIM5_Init+0x94>)
 8001a3a:	22a9      	movs	r2, #169	@ 0xa9
 8001a3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <MX_TIM5_Init+0x94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <MX_TIM5_Init+0x94>)
 8001a46:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <MX_TIM5_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <MX_TIM5_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a58:	4813      	ldr	r0, [pc, #76]	@ (8001aa8 <MX_TIM5_Init+0x94>)
 8001a5a:	f004 ffb7 	bl	80069cc <HAL_TIM_Base_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001a64:	f001 f9a2 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <MX_TIM5_Init+0x94>)
 8001a76:	f005 fdf5 	bl	8007664 <HAL_TIM_ConfigClockSource>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001a80:	f001 f994 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a84:	2320      	movs	r3, #32
 8001a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_TIM5_Init+0x94>)
 8001a92:	f006 fbc5 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a9c:	f001 f986 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200002cc 	.word	0x200002cc
 8001aac:	40000c00 	.word	0x40000c00

08001ab0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001ad0:	4a20      	ldr	r2, [pc, #128]	@ (8001b54 <MX_TIM8_Init+0xa4>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001ad6:	22a9      	movs	r2, #169	@ 0xa9
 8001ad8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001ae2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ae6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001aee:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001afa:	4815      	ldr	r0, [pc, #84]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001afc:	f004 ff66 	bl	80069cc <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001b06:	f001 f951 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4619      	mov	r1, r3
 8001b16:	480e      	ldr	r0, [pc, #56]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001b18:	f005 fda4 	bl	8007664 <HAL_TIM_ConfigClockSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001b22:	f001 f943 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <MX_TIM8_Init+0xa0>)
 8001b38:	f006 fb72 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b42:	f001 f933 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000318 	.word	0x20000318
 8001b54:	40013400 	.word	0x40013400

08001b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <MX_DMA_Init+0x50>)
 8001b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b62:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <MX_DMA_Init+0x50>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <MX_DMA_Init+0x50>)
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <MX_DMA_Init+0x50>)
 8001b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba8 <MX_DMA_Init+0x50>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <MX_DMA_Init+0x50>)
 8001b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	200c      	movs	r0, #12
 8001b94:	f003 f99f 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b98:	200c      	movs	r0, #12
 8001b9a:	f003 f9b6 	bl	8004f0a <HAL_NVIC_EnableIRQ>

}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000

08001bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc2:	4b68      	ldr	r3, [pc, #416]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	4a67      	ldr	r2, [pc, #412]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bce:	4b65      	ldr	r3, [pc, #404]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bda:	4b62      	ldr	r3, [pc, #392]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	4a61      	ldr	r2, [pc, #388]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001be0:	f043 0320 	orr.w	r3, r3, #32
 8001be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfe:	4b59      	ldr	r3, [pc, #356]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b56      	ldr	r3, [pc, #344]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	4a55      	ldr	r2, [pc, #340]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c16:	4b53      	ldr	r3, [pc, #332]	@ (8001d64 <MX_GPIO_Init+0x1b8>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LAMP1_Pin|LAMP2_Pin|PULL_Pin|PUSH_Pin
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001c28:	484f      	ldr	r0, [pc, #316]	@ (8001d68 <MX_GPIO_Init+0x1bc>)
 8001c2a:	f003 fe55 	bl	80058d8 <HAL_GPIO_WritePin>
                          |Vacuum_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2123      	movs	r1, #35	@ 0x23
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c36:	f003 fe4f 	bl	80058d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4845      	ldr	r0, [pc, #276]	@ (8001d68 <MX_GPIO_Init+0x1bc>)
 8001c52:	f003 fca7 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWJoy_Pin LeadSW1_Pin Floor4_Pin */
  GPIO_InitStruct.Pin = SWJoy_Pin|LeadSW1_Pin|Floor4_Pin;
 8001c56:	2383      	movs	r3, #131	@ 0x83
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	483f      	ldr	r0, [pc, #252]	@ (8001d68 <MX_GPIO_Init+0x1bc>)
 8001c6a:	f003 fc9b 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAMP1_Pin LAMP2_Pin PULL_Pin PUSH_Pin
                           Vacuum_Pin */
  GPIO_InitStruct.Pin = LAMP1_Pin|LAMP2_Pin|PULL_Pin|PUSH_Pin
 8001c6e:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8001c72:	617b      	str	r3, [r7, #20]
                          |Vacuum_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4838      	ldr	r0, [pc, #224]	@ (8001d68 <MX_GPIO_Init+0x1bc>)
 8001c88:	f003 fc8c 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DirectionMotor_Pin AnotherDMotor_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin;
 8001c8c:	2323      	movs	r3, #35	@ 0x23
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca6:	f003 fc7d 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Read_Pin */
  GPIO_InitStruct.Pin = Emergency_Read_Pin;
 8001caa:	2310      	movs	r3, #16
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Read_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc0:	f003 fc70 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeadSW2_Pin Floor1_Pin Floor5_Pin */
  GPIO_InitStruct.Pin = LeadSW2_Pin|Floor1_Pin|Floor5_Pin;
 8001cc4:	f240 4341 	movw	r3, #1089	@ 0x441
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4824      	ldr	r0, [pc, #144]	@ (8001d6c <MX_GPIO_Init+0x1c0>)
 8001cda:	f003 fc63 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ResetSW_Pin */
  GPIO_InitStruct.Pin = ResetSW_Pin;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ResetSW_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481e      	ldr	r0, [pc, #120]	@ (8001d6c <MX_GPIO_Init+0x1c0>)
 8001cf2:	f003 fc57 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Floor2_Pin Floor3_Pin HomeButton_Pin */
  GPIO_InitStruct.Pin = Floor2_Pin|Floor3_Pin|HomeButton_Pin;
 8001cf6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0e:	f003 fc49 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lowerprox_Pin UpperProx_Pin */
  GPIO_InitStruct.Pin = Lowerprox_Pin|UpperProx_Pin;
 8001d12:	2330      	movs	r3, #48	@ 0x30
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4619      	mov	r1, r3
 8001d26:	4811      	ldr	r0, [pc, #68]	@ (8001d6c <MX_GPIO_Init+0x1c0>)
 8001d28:	f003 fc3c 	bl	80055a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	200a      	movs	r0, #10
 8001d32:	f003 f8d0 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d36:	200a      	movs	r0, #10
 8001d38:	f003 f8e7 	bl	8004f0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2017      	movs	r0, #23
 8001d42:	f003 f8c8 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d46:	2017      	movs	r0, #23
 8001d48:	f003 f8df 	bl	8004f0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2028      	movs	r0, #40	@ 0x28
 8001d52:	f003 f8c0 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d56:	2028      	movs	r0, #40	@ 0x28
 8001d58:	f003 f8d7 	bl	8004f0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48000800 	.word	0x48000800
 8001d6c:	48000400 	.word	0x48000400

08001d70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b4b0      	push	{r4, r5, r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a08      	ldr	r2, [pc, #32]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d108      	bne.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 8001d80:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	1e54      	subs	r4, r2, #1
 8001d88:	f143 0500 	adc.w	r5, r3, #0
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d8e:	e9c3 4500 	strd	r4, r5, [r3]
}
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bcb0      	pop	{r4, r5, r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	200002cc 	.word	0x200002cc
 8001da0:	200004e0 	.word	0x200004e0

08001da4 <micros>:

uint64_t micros()
{
 8001da4:	b4b0      	push	{r4, r5, r7}
 8001da6:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <micros+0x2c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	2200      	movs	r2, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	4611      	mov	r1, r2
 8001db4:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <micros+0x30>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	1884      	adds	r4, r0, r2
 8001dbc:	eb41 0503 	adc.w	r5, r1, r3
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	462b      	mov	r3, r5
}
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bcb0      	pop	{r4, r5, r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200002cc 	.word	0x200002cc
 8001dd4:	200004e0 	.word	0x200004e0

08001dd8 <QEIEncoderPos_Update>:

void QEIEncoderPos_Update()
{
 8001dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ddc:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8001dde:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed8 <QEIEncoderPos_Update+0x100>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b3d      	ldr	r3, [pc, #244]	@ (8001edc <QEIEncoderPos_Update+0x104>)
 8001de8:	601a      	str	r2, [r3, #0]
	if(Count >= 0)
 8001dea:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee0 <QEIEncoderPos_Update+0x108>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db29      	blt.n	8001e46 <QEIEncoderPos_Update+0x6e>
	{
		Pos = ((QEIReadRaw+(Count*57344))*25*3.14)/8192;
 8001df2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <QEIEncoderPos_Update+0x108>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	035b      	lsls	r3, r3, #13
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <QEIEncoderPos_Update+0x104>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	441a      	add	r2, r3
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009a      	lsls	r2, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb53 	bl	80004bc <__aeabi_i2d>
 8001e16:	a32e      	add	r3, pc, #184	@ (adr r3, 8001ed0 <QEIEncoderPos_Update+0xf8>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fbb8 	bl	8000590 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee4 <QEIEncoderPos_Update+0x10c>)
 8001e2e:	f7fe fcd9 	bl	80007e4 <__aeabi_ddiv>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe fe43 	bl	8000ac4 <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a29      	ldr	r2, [pc, #164]	@ (8001ee8 <QEIEncoderPos_Update+0x110>)
 8001e42:	6013      	str	r3, [r2, #0]
	}
	else
	{
		Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
	}
}
 8001e44:	e041      	b.n	8001eca <QEIEncoderPos_Update+0xf2>
		Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
 8001e46:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <QEIEncoderPos_Update+0x104>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb36 	bl	80004bc <__aeabi_i2d>
 8001e50:	4680      	mov	r8, r0
 8001e52:	4689      	mov	r9, r1
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <QEIEncoderPos_Update+0x108>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb2f 	bl	80004bc <__aeabi_i2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4614      	mov	r4, r2
 8001e64:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001eec <QEIEncoderPos_Update+0x114>)
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fb8d 	bl	8000590 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	f7fe f9cf 	bl	8000220 <__aeabi_dsub>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <QEIEncoderPos_Update+0x118>)
 8001e90:	f7fe fb7e 	bl	8000590 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001ed0 <QEIEncoderPos_Update+0xf8>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fb75 	bl	8000590 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <QEIEncoderPos_Update+0x10c>)
 8001eb4:	f7fe fc96 	bl	80007e4 <__aeabi_ddiv>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fe00 	bl	8000ac4 <__aeabi_d2f>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4a08      	ldr	r2, [pc, #32]	@ (8001ee8 <QEIEncoderPos_Update+0x110>)
 8001ec8:	6013      	str	r3, [r2, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ed0:	51eb851f 	.word	0x51eb851f
 8001ed4:	40091eb8 	.word	0x40091eb8
 8001ed8:	20000234 	.word	0x20000234
 8001edc:	200004b8 	.word	0x200004b8
 8001ee0:	200004b4 	.word	0x200004b4
 8001ee4:	40c00000 	.word	0x40c00000
 8001ee8:	200004b0 	.word	0x200004b0
 8001eec:	40ec0000 	.word	0x40ec0000
 8001ef0:	40390000 	.word	0x40390000
 8001ef4:	00000000 	.word	0x00000000

08001ef8 <QEIEncoderVel_Update>:
void QEIEncoderVel_Update()
{
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 8001efe:	f7ff ff51 	bl	8001da4 <micros>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4982      	ldr	r1, [pc, #520]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001f08:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8001f0c:	4b81      	ldr	r3, [pc, #516]	@ (8002114 <QEIEncoderVel_Update+0x21c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	4a7f      	ldr	r2, [pc, #508]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001f14:	6013      	str	r3, [r2, #0]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8001f16:	4b7e      	ldr	r3, [pc, #504]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f26:	4b7a      	ldr	r3, [pc, #488]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001f28:	edc3 7a06 	vstr	s15, [r3, #24]
//calculate dx
int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001f2c:	4b78      	ldr	r3, [pc, #480]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b77      	ldr	r3, [pc, #476]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	607b      	str	r3, [r7, #4]
//Handle Warp around
if(diffPosition > 28672)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001f3e:	dd08      	ble.n	8001f52 <QEIEncoderVel_Update+0x5a>
{
diffPosition -=57344;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f5a3 4360 	sub.w	r3, r3, #57344	@ 0xe000
 8001f46:	607b      	str	r3, [r7, #4]
Count-=1;
 8001f48:	4b73      	ldr	r3, [pc, #460]	@ (8002118 <QEIEncoderVel_Update+0x220>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4a72      	ldr	r2, [pc, #456]	@ (8002118 <QEIEncoderVel_Update+0x220>)
 8001f50:	6013      	str	r3, [r2, #0]
}
if(diffPosition < -28672)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f513 4fe0 	cmn.w	r3, #28672	@ 0x7000
 8001f58:	da08      	bge.n	8001f6c <QEIEncoderVel_Update+0x74>
{
diffPosition +=57344;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001f60:	607b      	str	r3, [r7, #4]
Count+=1;
 8001f62:	4b6d      	ldr	r3, [pc, #436]	@ (8002118 <QEIEncoderVel_Update+0x220>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	4a6b      	ldr	r2, [pc, #428]	@ (8002118 <QEIEncoderVel_Update+0x220>)
 8001f6a:	6013      	str	r3, [r2, #0]
}

//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8001f6c:	4b68      	ldr	r3, [pc, #416]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001f6e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f72:	4b67      	ldr	r3, [pc, #412]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001f74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f78:	1a84      	subs	r4, r0, r2
 8001f7a:	eb61 0503 	sbc.w	r5, r1, r3
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe facf 	bl	8000524 <__aeabi_ul2d>
 8001f86:	a35a      	add	r3, pc, #360	@ (adr r3, 80020f0 <QEIEncoderVel_Update+0x1f8>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fb00 	bl	8000590 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fd94 	bl	8000ac4 <__aeabi_d2f>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	603b      	str	r3, [r7, #0]
//calculate anglar velocity
QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001faa:	ed97 7a00 	vldr	s14, [r7]
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	4b57      	ldr	r3, [pc, #348]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001fb4:	edc3 7a07 	vstr	s15, [r3, #28]
RPSspeed = ((QEIdata.QEIAngularVelocity)/8192)*60;
 8001fb8:	4b55      	ldr	r3, [pc, #340]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001fba:	ed93 7a07 	vldr	s14, [r3, #28]
 8001fbe:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800211c <QEIEncoderVel_Update+0x224>
 8001fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc6:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002120 <QEIEncoderVel_Update+0x228>
 8001fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd2:	ee17 3a90 	vmov	r3, s15
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	4b52      	ldr	r3, [pc, #328]	@ (8002124 <QEIEncoderVel_Update+0x22c>)
 8001fda:	801a      	strh	r2, [r3, #0]
speed = ((QEIdata.QEIAngularVelocity)/8192)*12.5*2*3.14;
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 8001fde:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fe2:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800211c <QEIEncoderVel_Update+0x224>
 8001fe6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fea:	ee16 0a90 	vmov	r0, s13
 8001fee:	f7fe fa77 	bl	80004e0 <__aeabi_f2d>
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8002128 <QEIEncoderVel_Update+0x230>)
 8001ff8:	f7fe faca 	bl	8000590 <__aeabi_dmul>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	f7fe f90c 	bl	8000224 <__adddf3>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	a338      	add	r3, pc, #224	@ (adr r3, 80020f8 <QEIEncoderVel_Update+0x200>)
 8002016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201a:	f7fe fab9 	bl	8000590 <__aeabi_dmul>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f7fe fd4d 	bl	8000ac4 <__aeabi_d2f>
 800202a:	4603      	mov	r3, r0
 800202c:	4a3f      	ldr	r2, [pc, #252]	@ (800212c <QEIEncoderVel_Update+0x234>)
 800202e:	6013      	str	r3, [r2, #0]
speed_fill = (0.969*speed_fill_1)+(0.0155*speed)+(0.0155*speed_1);
 8002030:	4b3f      	ldr	r3, [pc, #252]	@ (8002130 <QEIEncoderVel_Update+0x238>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa53 	bl	80004e0 <__aeabi_f2d>
 800203a:	a331      	add	r3, pc, #196	@ (adr r3, 8002100 <QEIEncoderVel_Update+0x208>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe faa6 	bl	8000590 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4614      	mov	r4, r2
 800204a:	461d      	mov	r5, r3
 800204c:	4b37      	ldr	r3, [pc, #220]	@ (800212c <QEIEncoderVel_Update+0x234>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa45 	bl	80004e0 <__aeabi_f2d>
 8002056:	a32c      	add	r3, pc, #176	@ (adr r3, 8002108 <QEIEncoderVel_Update+0x210>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe fa98 	bl	8000590 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4620      	mov	r0, r4
 8002066:	4629      	mov	r1, r5
 8002068:	f7fe f8dc 	bl	8000224 <__adddf3>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4614      	mov	r4, r2
 8002072:	461d      	mov	r5, r3
 8002074:	4b2f      	ldr	r3, [pc, #188]	@ (8002134 <QEIEncoderVel_Update+0x23c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa31 	bl	80004e0 <__aeabi_f2d>
 800207e:	a322      	add	r3, pc, #136	@ (adr r3, 8002108 <QEIEncoderVel_Update+0x210>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe fa84 	bl	8000590 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4620      	mov	r0, r4
 800208e:	4629      	mov	r1, r5
 8002090:	f7fe f8c8 	bl	8000224 <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fd12 	bl	8000ac4 <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a25      	ldr	r2, [pc, #148]	@ (8002138 <QEIEncoderVel_Update+0x240>)
 80020a4:	6013      	str	r3, [r2, #0]
speed_1 = speed;
 80020a6:	4b21      	ldr	r3, [pc, #132]	@ (800212c <QEIEncoderVel_Update+0x234>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a22      	ldr	r2, [pc, #136]	@ (8002134 <QEIEncoderVel_Update+0x23c>)
 80020ac:	6013      	str	r3, [r2, #0]
speed_fill_1 = speed_fill;
 80020ae:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <QEIEncoderVel_Update+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002130 <QEIEncoderVel_Update+0x238>)
 80020b4:	6013      	str	r3, [r2, #0]
if(speed_fill>MAXspeed)
 80020b6:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <QEIEncoderVel_Update+0x240>)
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <QEIEncoderVel_Update+0x244>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ca:	dd03      	ble.n	80020d4 <QEIEncoderVel_Update+0x1dc>
{
	MAXspeed = speed_fill;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <QEIEncoderVel_Update+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <QEIEncoderVel_Update+0x244>)
 80020d2:	6013      	str	r3, [r2, #0]
}
//store value for next loop
QEIdata.Position[OLD] = QEIdata.Position[NEW];
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 80020da:	6053      	str	r3, [r2, #4]
QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 80020de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020e2:	490b      	ldr	r1, [pc, #44]	@ (8002110 <QEIEncoderVel_Update+0x218>)
 80020e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bdb0      	pop	{r4, r5, r7, pc}
 80020f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80020f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80020f8:	51eb851f 	.word	0x51eb851f
 80020fc:	40091eb8 	.word	0x40091eb8
 8002100:	49ba5e35 	.word	0x49ba5e35
 8002104:	3fef020c 	.word	0x3fef020c
 8002108:	c8b43958 	.word	0xc8b43958
 800210c:	3f8fbe76 	.word	0x3f8fbe76
 8002110:	200004c0 	.word	0x200004c0
 8002114:	20000234 	.word	0x20000234
 8002118:	200004b4 	.word	0x200004b4
 800211c:	46000000 	.word	0x46000000
 8002120:	42700000 	.word	0x42700000
 8002124:	2000049a 	.word	0x2000049a
 8002128:	40290000 	.word	0x40290000
 800212c:	2000049c 	.word	0x2000049c
 8002130:	200004ac 	.word	0x200004ac
 8002134:	200004a0 	.word	0x200004a0
 8002138:	200004a8 	.word	0x200004a8
 800213c:	200004a4 	.word	0x200004a4

08002140 <UARTInterruptConfig>:

void UARTInterruptConfig()
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Rx,4);
 8002144:	2204      	movs	r2, #4
 8002146:	4903      	ldr	r1, [pc, #12]	@ (8002154 <UARTInterruptConfig+0x14>)
 8002148:	4803      	ldr	r0, [pc, #12]	@ (8002158 <UARTInterruptConfig+0x18>)
 800214a:	f006 f995 	bl	8008478 <HAL_UART_Receive_IT>
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000494 	.word	0x20000494
 8002158:	20000108 	.word	0x20000108

0800215c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a07      	ldr	r2, [pc, #28]	@ (8002184 <HAL_UART_RxCpltCallback+0x28>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d107      	bne.n	800217c <HAL_UART_RxCpltCallback+0x20>
	{
		Rx[4] = '\0';
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_UART_RxCpltCallback+0x2c>)
 800216e:	2200      	movs	r2, #0
 8002170:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&hlpuart1, Rx, 4);
 8002172:	2204      	movs	r2, #4
 8002174:	4904      	ldr	r1, [pc, #16]	@ (8002188 <HAL_UART_RxCpltCallback+0x2c>)
 8002176:	4803      	ldr	r0, [pc, #12]	@ (8002184 <HAL_UART_RxCpltCallback+0x28>)
 8002178:	f006 f97e 	bl	8008478 <HAL_UART_Receive_IT>
	}
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000108 	.word	0x20000108
 8002188:	20000494 	.word	0x20000494

0800218c <Joy_State>:

void Joy_State()
{
 800218c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002194:	2101      	movs	r1, #1
 8002196:	48a6      	ldr	r0, [pc, #664]	@ (8002430 <Joy_State+0x2a4>)
 8002198:	f003 fb86 	bl	80058a8 <HAL_GPIO_ReadPin>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4ba4      	ldr	r3, [pc, #656]	@ (8002434 <Joy_State+0x2a8>)
 80021a2:	701a      	strb	r2, [r3, #0]

if(state == 0)
 80021a4:	4ba4      	ldr	r3, [pc, #656]	@ (8002438 <Joy_State+0x2ac>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <Joy_State+0x36>
{
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
	if (joyY > 4000)
 80021ac:	4ba3      	ldr	r3, [pc, #652]	@ (800243c <Joy_State+0x2b0>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80021b4:	f240 80c6 	bls.w	8002344 <Joy_State+0x1b8>
	{
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 80021b8:	4ba1      	ldr	r3, [pc, #644]	@ (8002440 <Joy_State+0x2b4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	625a      	str	r2, [r3, #36]	@ 0x24
 80021c0:	e0c0      	b.n	8002344 <Joy_State+0x1b8>
	}
}

else if(state == 1)
 80021c2:	4b9d      	ldr	r3, [pc, #628]	@ (8002438 <Joy_State+0x2ac>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d16a      	bne.n	80022a0 <Joy_State+0x114>
{
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 80021ca:	f001 f903 	bl	80033d4 <HAL_GetTick>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2200      	movs	r2, #0
 80021d2:	4698      	mov	r8, r3
 80021d4:	4691      	mov	r9, r2
 80021d6:	4b9b      	ldr	r3, [pc, #620]	@ (8002444 <Joy_State+0x2b8>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	4542      	cmp	r2, r8
 80021de:	eb73 0309 	sbcs.w	r3, r3, r9
 80021e2:	d22b      	bcs.n	800223c <Joy_State+0xb0>
	{
		if(joyX > 4000)
 80021e4:	4b98      	ldr	r3, [pc, #608]	@ (8002448 <Joy_State+0x2bc>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80021ec:	d904      	bls.n	80021f8 <Joy_State+0x6c>
		{
			A = A-250;
 80021ee:	4b97      	ldr	r3, [pc, #604]	@ (800244c <Joy_State+0x2c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3bfa      	subs	r3, #250	@ 0xfa
 80021f4:	4a95      	ldr	r2, [pc, #596]	@ (800244c <Joy_State+0x2c0>)
 80021f6:	6013      	str	r3, [r2, #0]
		}
		if(joyX < 2000)
 80021f8:	4b93      	ldr	r3, [pc, #588]	@ (8002448 <Joy_State+0x2bc>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002200:	d204      	bcs.n	800220c <Joy_State+0x80>
		{
			A = A+250;
 8002202:	4b92      	ldr	r3, [pc, #584]	@ (800244c <Joy_State+0x2c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	33fa      	adds	r3, #250	@ 0xfa
 8002208:	4a90      	ldr	r2, [pc, #576]	@ (800244c <Joy_State+0x2c0>)
 800220a:	6013      	str	r3, [r2, #0]
		}
		if(A <= 0)A=0;
 800220c:	4b8f      	ldr	r3, [pc, #572]	@ (800244c <Joy_State+0x2c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	dc02      	bgt.n	800221a <Joy_State+0x8e>
 8002214:	4b8d      	ldr	r3, [pc, #564]	@ (800244c <Joy_State+0x2c0>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 800221a:	f001 f8db 	bl	80033d4 <HAL_GetTick>
 800221e:	4603      	mov	r3, r0
 8002220:	3364      	adds	r3, #100	@ 0x64
 8002222:	2200      	movs	r2, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	4b86      	ldr	r3, [pc, #536]	@ (8002444 <Joy_State+0x2b8>)
 800222a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800222e:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002232:	2120      	movs	r1, #32
 8002234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002238:	f003 fb66 	bl	8005908 <HAL_GPIO_TogglePin>
	}
	if(joyY > 4000 || joyY < 2000)
 800223c:	4b7f      	ldr	r3, [pc, #508]	@ (800243c <Joy_State+0x2b0>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002244:	d804      	bhi.n	8002250 <Joy_State+0xc4>
 8002246:	4b7d      	ldr	r3, [pc, #500]	@ (800243c <Joy_State+0x2b0>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800224e:	d21c      	bcs.n	800228a <Joy_State+0xfe>
	{
		if (joyY > 4000)
 8002250:	4b7a      	ldr	r3, [pc, #488]	@ (800243c <Joy_State+0x2b0>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002258:	d90b      	bls.n	8002272 <Joy_State+0xe6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 800225a:	2201      	movs	r2, #1
 800225c:	2101      	movs	r1, #1
 800225e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002262:	f003 fb39 	bl	80058d8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 8002266:	4b79      	ldr	r3, [pc, #484]	@ (800244c <Joy_State+0x2c0>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b79      	ldr	r3, [pc, #484]	@ (8002450 <Joy_State+0x2c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 4000)
 8002270:	e068      	b.n	8002344 <Joy_State+0x1b8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2101      	movs	r1, #1
 8002276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800227a:	f003 fb2d 	bl	80058d8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 800227e:	4b73      	ldr	r3, [pc, #460]	@ (800244c <Joy_State+0x2c0>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b73      	ldr	r3, [pc, #460]	@ (8002450 <Joy_State+0x2c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 4000)
 8002288:	e05c      	b.n	8002344 <Joy_State+0x1b8>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2101      	movs	r1, #1
 800228e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002292:	f003 fb21 	bl	80058d8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002296:	4b6e      	ldr	r3, [pc, #440]	@ (8002450 <Joy_State+0x2c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	635a      	str	r2, [r3, #52]	@ 0x34
 800229e:	e051      	b.n	8002344 <Joy_State+0x1b8>
	}
}

else if(state == 2)
 80022a0:	4b65      	ldr	r3, [pc, #404]	@ (8002438 <Joy_State+0x2ac>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d143      	bne.n	8002330 <Joy_State+0x1a4>
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 80022a8:	2201      	movs	r2, #1
 80022aa:	2120      	movs	r1, #32
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b0:	f003 fb12 	bl	80058d8 <HAL_GPIO_WritePin>
	if(joyY > 3200 || joyY < 2700)
 80022b4:	4b61      	ldr	r3, [pc, #388]	@ (800243c <Joy_State+0x2b0>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80022bc:	d805      	bhi.n	80022ca <Joy_State+0x13e>
 80022be:	4b5f      	ldr	r3, [pc, #380]	@ (800243c <Joy_State+0x2b0>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	f640 228b 	movw	r2, #2699	@ 0xa8b
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d824      	bhi.n	8002314 <Joy_State+0x188>
	{
		if (joyY > 3200)
 80022ca:	4b5c      	ldr	r3, [pc, #368]	@ (800243c <Joy_State+0x2b0>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80022d2:	d90f      	bls.n	80022f4 <Joy_State+0x168>
		{
			A = 10625;
 80022d4:	4b5d      	ldr	r3, [pc, #372]	@ (800244c <Joy_State+0x2c0>)
 80022d6:	f642 1281 	movw	r2, #10625	@ 0x2981
 80022da:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80022dc:	2201      	movs	r2, #1
 80022de:	2101      	movs	r1, #1
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e4:	f003 faf8 	bl	80058d8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 80022e8:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <Joy_State+0x2c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f642 020a 	movw	r2, #10250	@ 0x280a
 80022f0:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3200)
 80022f2:	e027      	b.n	8002344 <Joy_State+0x1b8>
		}
		else
		{
			A = -10625;
 80022f4:	4b55      	ldr	r3, [pc, #340]	@ (800244c <Joy_State+0x2c0>)
 80022f6:	f46f 5226 	mvn.w	r2, #10624	@ 0x2980
 80022fa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2101      	movs	r1, #1
 8002300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002304:	f003 fae8 	bl	80058d8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 8002308:	4b51      	ldr	r3, [pc, #324]	@ (8002450 <Joy_State+0x2c4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f642 020a 	movw	r2, #10250	@ 0x280a
 8002310:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3200)
 8002312:	e017      	b.n	8002344 <Joy_State+0x1b8>
		}
	}
	else
	{
		A = 0;
 8002314:	4b4d      	ldr	r3, [pc, #308]	@ (800244c <Joy_State+0x2c0>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2101      	movs	r1, #1
 800231e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002322:	f003 fad9 	bl	80058d8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 8002326:	4b4a      	ldr	r3, [pc, #296]	@ (8002450 <Joy_State+0x2c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2200      	movs	r2, #0
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34
 800232e:	e009      	b.n	8002344 <Joy_State+0x1b8>
	}
 }
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2101      	movs	r1, #1
 8002334:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002338:	f003 face 	bl	80058d8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 800233c:	4b44      	ldr	r3, [pc, #272]	@ (8002450 <Joy_State+0x2c4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	static uint64_t timestamp2 =0;
	if(timestamp2 < HAL_GetTick())
 8002344:	f001 f846 	bl	80033d4 <HAL_GetTick>
 8002348:	4603      	mov	r3, r0
 800234a:	2200      	movs	r2, #0
 800234c:	461c      	mov	r4, r3
 800234e:	4615      	mov	r5, r2
 8002350:	4b40      	ldr	r3, [pc, #256]	@ (8002454 <Joy_State+0x2c8>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	42a2      	cmp	r2, r4
 8002358:	41ab      	sbcs	r3, r5
 800235a:	d261      	bcs.n	8002420 <Joy_State+0x294>
	{
		if (joySW == 0)
 800235c:	4b35      	ldr	r3, [pc, #212]	@ (8002434 <Joy_State+0x2a8>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d153      	bne.n	800240c <Joy_State+0x280>
		{
			switch (state)
 8002364:	4b34      	ldr	r3, [pc, #208]	@ (8002438 <Joy_State+0x2ac>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d84f      	bhi.n	800240c <Joy_State+0x280>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <Joy_State+0x1e8>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002385 	.word	0x08002385
 8002378:	080023a7 	.word	0x080023a7
 800237c:	080023c9 	.word	0x080023c9
 8002380:	080023eb 	.word	0x080023eb
			{
			case 0:
				state = 1;
 8002384:	4b2c      	ldr	r3, [pc, #176]	@ (8002438 <Joy_State+0x2ac>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 800238a:	e007      	b.n	800239c <Joy_State+0x210>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800238c:	2101      	movs	r1, #1
 800238e:	4828      	ldr	r0, [pc, #160]	@ (8002430 <Joy_State+0x2a4>)
 8002390:	f003 fa8a 	bl	80058a8 <HAL_GPIO_ReadPin>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	4b26      	ldr	r3, [pc, #152]	@ (8002434 <Joy_State+0x2a8>)
 800239a:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 800239c:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <Joy_State+0x2a8>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f3      	beq.n	800238c <Joy_State+0x200>
				}
				break;
 80023a4:	e032      	b.n	800240c <Joy_State+0x280>
			case 1:
				state = 2;
 80023a6:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <Joy_State+0x2ac>)
 80023a8:	2202      	movs	r2, #2
 80023aa:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80023ac:	e007      	b.n	80023be <Joy_State+0x232>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80023ae:	2101      	movs	r1, #1
 80023b0:	481f      	ldr	r0, [pc, #124]	@ (8002430 <Joy_State+0x2a4>)
 80023b2:	f003 fa79 	bl	80058a8 <HAL_GPIO_ReadPin>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <Joy_State+0x2a8>)
 80023bc:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80023be:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <Joy_State+0x2a8>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f3      	beq.n	80023ae <Joy_State+0x222>
				}
				break;
 80023c6:	e021      	b.n	800240c <Joy_State+0x280>
			case 2:
				state = 3;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <Joy_State+0x2ac>)
 80023ca:	2203      	movs	r2, #3
 80023cc:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80023ce:	e007      	b.n	80023e0 <Joy_State+0x254>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80023d0:	2101      	movs	r1, #1
 80023d2:	4817      	ldr	r0, [pc, #92]	@ (8002430 <Joy_State+0x2a4>)
 80023d4:	f003 fa68 	bl	80058a8 <HAL_GPIO_ReadPin>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <Joy_State+0x2a8>)
 80023de:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <Joy_State+0x2a8>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f3      	beq.n	80023d0 <Joy_State+0x244>
				}
				break;
 80023e8:	e010      	b.n	800240c <Joy_State+0x280>
			case 3:
				state = 0;
 80023ea:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <Joy_State+0x2ac>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80023f0:	e007      	b.n	8002402 <Joy_State+0x276>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80023f2:	2101      	movs	r1, #1
 80023f4:	480e      	ldr	r0, [pc, #56]	@ (8002430 <Joy_State+0x2a4>)
 80023f6:	f003 fa57 	bl	80058a8 <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <Joy_State+0x2a8>)
 8002400:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002402:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <Joy_State+0x2a8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f3      	beq.n	80023f2 <Joy_State+0x266>
				}
				break;
 800240a:	bf00      	nop
			}
		}
		timestamp2 = HAL_GetTick() + 100;
 800240c:	f000 ffe2 	bl	80033d4 <HAL_GetTick>
 8002410:	4603      	mov	r3, r0
 8002412:	3364      	adds	r3, #100	@ 0x64
 8002414:	2200      	movs	r2, #0
 8002416:	469a      	mov	sl, r3
 8002418:	4693      	mov	fp, r2
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <Joy_State+0x2c8>)
 800241c:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	Joy_Averaged();
 8002420:	f000 f86a 	bl	80024f8 <Joy_Averaged>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800242e:	bf00      	nop
 8002430:	48000800 	.word	0x48000800
 8002434:	20000480 	.word	0x20000480
 8002438:	20000481 	.word	0x20000481
 800243c:	20000492 	.word	0x20000492
 8002440:	20000234 	.word	0x20000234
 8002444:	20000500 	.word	0x20000500
 8002448:	20000490 	.word	0x20000490
 800244c:	20000000 	.word	0x20000000
 8002450:	20000280 	.word	0x20000280
 8002454:	20000508 	.word	0x20000508

08002458 <reset>:
void reset()
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 800245c:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <reset+0x88>)
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002464:	4b1e      	ldr	r3, [pc, #120]	@ (80024e0 <reset+0x88>)
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 800246c:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <reset+0x88>)
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002474:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <reset+0x88>)
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 800247c:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <reset+0x88>)
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002484:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <reset+0x88>)
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 800248c:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <reset+0x8c>)
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002494:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <reset+0x8c>)
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <reset+0x8c>)
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 80024a4:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <reset+0x8c>)
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 80024ac:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <reset+0x8c>)
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <reset+0x8c>)
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
	Pos_Start = Pos;
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <reset+0x90>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <reset+0x94>)
 80024c2:	6013      	str	r3, [r2, #0]
	Velo_Start = 0;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <reset+0x98>)
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
	t = 0;
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <reset+0x9c>)
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	200003bc 	.word	0x200003bc
 80024e4:	200003e4 	.word	0x200003e4
 80024e8:	200004b0 	.word	0x200004b0
 80024ec:	2000040c 	.word	0x2000040c
 80024f0:	20000418 	.word	0x20000418
 80024f4:	20000428 	.word	0x20000428

080024f8 <Joy_Averaged>:
void Joy_Averaged()
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++)
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	e017      	b.n	8002534 <Joy_Averaged+0x3c>
	{
		joySum[0] += joyAnalogRead[2*i];
 8002504:	4b21      	ldr	r3, [pc, #132]	@ (800258c <Joy_Averaged+0x94>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	0052      	lsls	r2, r2, #1
 800250c:	4920      	ldr	r1, [pc, #128]	@ (8002590 <Joy_Averaged+0x98>)
 800250e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002512:	4413      	add	r3, r2
 8002514:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <Joy_Averaged+0x94>)
 8002516:	6013      	str	r3, [r2, #0]
		joySum[1] += joyAnalogRead[1+(2*i)];
 8002518:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <Joy_Averaged+0x94>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	0052      	lsls	r2, r2, #1
 8002520:	3201      	adds	r2, #1
 8002522:	491b      	ldr	r1, [pc, #108]	@ (8002590 <Joy_Averaged+0x98>)
 8002524:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002528:	4413      	add	r3, r2
 800252a:	4a18      	ldr	r2, [pc, #96]	@ (800258c <Joy_Averaged+0x94>)
 800252c:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 20; i++)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3301      	adds	r3, #1
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b13      	cmp	r3, #19
 8002538:	dde4      	ble.n	8002504 <Joy_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 800253a:	2300      	movs	r3, #0
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	e014      	b.n	800256a <Joy_Averaged+0x72>
	{
		joyAvg[i] = joySum[i] / 20;
 8002540:	4a12      	ldr	r2, [pc, #72]	@ (800258c <Joy_Averaged+0x94>)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <Joy_Averaged+0x9c>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	b299      	uxth	r1, r3
 8002552:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <Joy_Averaged+0xa0>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		joySum[i] = 0;
 800255a:	4a0c      	ldr	r2, [pc, #48]	@ (800258c <Joy_Averaged+0x94>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2100      	movs	r1, #0
 8002560:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	dde7      	ble.n	8002540 <Joy_Averaged+0x48>
	}

	joyX = joyAvg[0];
 8002570:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <Joy_Averaged+0xa0>)
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <Joy_Averaged+0xa4>)
 8002576:	801a      	strh	r2, [r3, #0]
	joyY = joyAvg[1];
 8002578:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <Joy_Averaged+0xa0>)
 800257a:	885a      	ldrh	r2, [r3, #2]
 800257c:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <Joy_Averaged+0xa8>)
 800257e:	801a      	strh	r2, [r3, #0]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	20000488 	.word	0x20000488
 8002590:	20000430 	.word	0x20000430
 8002594:	cccccccd 	.word	0xcccccccd
 8002598:	20000484 	.word	0x20000484
 800259c:	20000490 	.word	0x20000490
 80025a0:	20000492 	.word	0x20000492
 80025a4:	00000000 	.word	0x00000000

080025a8 <Trajectory>:
void Trajectory()
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
	static uint64_t timestamp_Traject =0;
		int64_t currentTime = micros();
 80025b0:	f7ff fbf8 	bl	8001da4 <micros>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	e9c7 2300 	strd	r2, r3, [r7]
		  if(timestamp_Traject < currentTime)
 80025bc:	4b99      	ldr	r3, [pc, #612]	@ (8002824 <Trajectory+0x27c>)
 80025be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025c6:	4290      	cmp	r0, r2
 80025c8:	eb71 0303 	sbcs.w	r3, r1, r3
 80025cc:	f080 823c 	bcs.w	8002a48 <Trajectory+0x4a0>
		  {
			  switch(state_Tra)
 80025d0:	4b95      	ldr	r3, [pc, #596]	@ (8002828 <Trajectory+0x280>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	f200 8219 	bhi.w	8002a0c <Trajectory+0x464>
 80025da:	a201      	add	r2, pc, #4	@ (adr r2, 80025e0 <Trajectory+0x38>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	080025f1 	.word	0x080025f1
 80025e4:	08002795 	.word	0x08002795
 80025e8:	08002859 	.word	0x08002859
 80025ec:	0800296f 	.word	0x0800296f
			  	  		  {
			  	  		  case 0:
			  	  			  if(Pos_Start > Pos_Target)
 80025f0:	4b8e      	ldr	r3, [pc, #568]	@ (800282c <Trajectory+0x284>)
 80025f2:	ed93 7a00 	vldr	s14, [r3]
 80025f6:	4b8e      	ldr	r3, [pc, #568]	@ (8002830 <Trajectory+0x288>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002604:	dd04      	ble.n	8002610 <Trajectory+0x68>
			  	  			  {
			  	  				  direction = -1;
 8002606:	4b8b      	ldr	r3, [pc, #556]	@ (8002834 <Trajectory+0x28c>)
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	e002      	b.n	8002616 <Trajectory+0x6e>
			  	  			  }
			  	  			  else
			  	  			  {
			  	  				  direction = 1;
 8002610:	4b88      	ldr	r3, [pc, #544]	@ (8002834 <Trajectory+0x28c>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
			  	  			  }
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)+((direction*0.5*Max_Acc)*(t*t));
 8002616:	4b88      	ldr	r3, [pc, #544]	@ (8002838 <Trajectory+0x290>)
 8002618:	ed93 7a00 	vldr	s14, [r3]
 800261c:	4b87      	ldr	r3, [pc, #540]	@ (800283c <Trajectory+0x294>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002626:	4b81      	ldr	r3, [pc, #516]	@ (800282c <Trajectory+0x284>)
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002630:	ee17 0a90 	vmov	r0, s15
 8002634:	f7fd ff54 	bl	80004e0 <__aeabi_f2d>
 8002638:	4680      	mov	r8, r0
 800263a:	4689      	mov	r9, r1
 800263c:	4b7d      	ldr	r3, [pc, #500]	@ (8002834 <Trajectory+0x28c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff3b 	bl	80004bc <__aeabi_i2d>
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	4b7d      	ldr	r3, [pc, #500]	@ (8002840 <Trajectory+0x298>)
 800264c:	f7fd ffa0 	bl	8000590 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4692      	mov	sl, r2
 8002656:	469b      	mov	fp, r3
 8002658:	4b7a      	ldr	r3, [pc, #488]	@ (8002844 <Trajectory+0x29c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff3f 	bl	80004e0 <__aeabi_f2d>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4650      	mov	r0, sl
 8002668:	4659      	mov	r1, fp
 800266a:	f7fd ff91 	bl	8000590 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4692      	mov	sl, r2
 8002674:	469b      	mov	fp, r3
 8002676:	4b71      	ldr	r3, [pc, #452]	@ (800283c <Trajectory+0x294>)
 8002678:	ed93 7a00 	vldr	s14, [r3]
 800267c:	4b6f      	ldr	r3, [pc, #444]	@ (800283c <Trajectory+0x294>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002686:	ee17 0a90 	vmov	r0, s15
 800268a:	f7fd ff29 	bl	80004e0 <__aeabi_f2d>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4650      	mov	r0, sl
 8002694:	4659      	mov	r1, fp
 8002696:	f7fd ff7b 	bl	8000590 <__aeabi_dmul>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4640      	mov	r0, r8
 80026a0:	4649      	mov	r1, r9
 80026a2:	f7fd fdbf 	bl	8000224 <__adddf3>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fa09 	bl	8000ac4 <__aeabi_d2f>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a64      	ldr	r2, [pc, #400]	@ (8002848 <Trajectory+0x2a0>)
 80026b6:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start + direction*Max_Acc*t;
 80026b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002834 <Trajectory+0x28c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002844 <Trajectory+0x29c>)
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ce:	4b5b      	ldr	r3, [pc, #364]	@ (800283c <Trajectory+0x294>)
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026d8:	4b57      	ldr	r3, [pc, #348]	@ (8002838 <Trajectory+0x290>)
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e2:	4b5a      	ldr	r3, [pc, #360]	@ (800284c <Trajectory+0x2a4>)
 80026e4:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = Max_Acc*direction;
 80026e8:	4b52      	ldr	r3, [pc, #328]	@ (8002834 <Trajectory+0x28c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f4:	4b53      	ldr	r3, [pc, #332]	@ (8002844 <Trajectory+0x29c>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fe:	4b54      	ldr	r3, [pc, #336]	@ (8002850 <Trajectory+0x2a8>)
 8002700:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) >= Max_Velo)
 8002704:	4b51      	ldr	r3, [pc, #324]	@ (800284c <Trajectory+0x2a4>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	eeb0 7ae7 	vabs.f32	s14, s15
 800270e:	4b51      	ldr	r3, [pc, #324]	@ (8002854 <Trajectory+0x2ac>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	db0e      	blt.n	800273c <Trajectory+0x194>
			  	  				{
			  	  					state_Tra = 1;
 800271e:	4b42      	ldr	r3, [pc, #264]	@ (8002828 <Trajectory+0x280>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8002724:	4b48      	ldr	r3, [pc, #288]	@ (8002848 <Trajectory+0x2a0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a40      	ldr	r2, [pc, #256]	@ (800282c <Trajectory+0x284>)
 800272a:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 800272c:	4b47      	ldr	r3, [pc, #284]	@ (800284c <Trajectory+0x2a4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a41      	ldr	r2, [pc, #260]	@ (8002838 <Trajectory+0x290>)
 8002732:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8002734:	4b41      	ldr	r3, [pc, #260]	@ (800283c <Trajectory+0x294>)
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
			  	  				}
			  	  			  if(fabs((q_Pos-Pos_Start)*2) >= fabs(Pos_Target-Pos_Start))
 800273c:	4b42      	ldr	r3, [pc, #264]	@ (8002848 <Trajectory+0x2a0>)
 800273e:	ed93 7a00 	vldr	s14, [r3]
 8002742:	4b3a      	ldr	r3, [pc, #232]	@ (800282c <Trajectory+0x284>)
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002750:	eeb0 7ae7 	vabs.f32	s14, s15
 8002754:	4b36      	ldr	r3, [pc, #216]	@ (8002830 <Trajectory+0x288>)
 8002756:	edd3 6a00 	vldr	s13, [r3]
 800275a:	4b34      	ldr	r3, [pc, #208]	@ (800282c <Trajectory+0x284>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002764:	eef0 7ae7 	vabs.f32	s15, s15
 8002768:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	da00      	bge.n	8002774 <Trajectory+0x1cc>
			  	  				state_Tra = 2;
								Pos_Start = q_Pos;
								Velo_Start = q_Velo;
								t = 0;
			  	  			  }
			  	  			  	break;
 8002772:	e14b      	b.n	8002a0c <Trajectory+0x464>
			  	  				state_Tra = 2;
 8002774:	4b2c      	ldr	r3, [pc, #176]	@ (8002828 <Trajectory+0x280>)
 8002776:	2202      	movs	r2, #2
 8002778:	601a      	str	r2, [r3, #0]
								Pos_Start = q_Pos;
 800277a:	4b33      	ldr	r3, [pc, #204]	@ (8002848 <Trajectory+0x2a0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2b      	ldr	r2, [pc, #172]	@ (800282c <Trajectory+0x284>)
 8002780:	6013      	str	r3, [r2, #0]
								Velo_Start = q_Velo;
 8002782:	4b32      	ldr	r3, [pc, #200]	@ (800284c <Trajectory+0x2a4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2c      	ldr	r2, [pc, #176]	@ (8002838 <Trajectory+0x290>)
 8002788:	6013      	str	r3, [r2, #0]
								t = 0;
 800278a:	4b2c      	ldr	r3, [pc, #176]	@ (800283c <Trajectory+0x294>)
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8002792:	e13b      	b.n	8002a0c <Trajectory+0x464>
			  	  		  case 1:
			  	  			  	q_Pos = Pos_Start +(Velo_Start*t);
 8002794:	4b28      	ldr	r3, [pc, #160]	@ (8002838 <Trajectory+0x290>)
 8002796:	ed93 7a00 	vldr	s14, [r3]
 800279a:	4b28      	ldr	r3, [pc, #160]	@ (800283c <Trajectory+0x294>)
 800279c:	edd3 7a00 	vldr	s15, [r3]
 80027a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a4:	4b21      	ldr	r3, [pc, #132]	@ (800282c <Trajectory+0x284>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ae:	4b26      	ldr	r3, [pc, #152]	@ (8002848 <Trajectory+0x2a0>)
 80027b0:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Velo = Velo_Start;
 80027b4:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <Trajectory+0x290>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a24      	ldr	r2, [pc, #144]	@ (800284c <Trajectory+0x2a4>)
 80027ba:	6013      	str	r3, [r2, #0]
			  	  			  	q_Acc = 0;
 80027bc:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <Trajectory+0x2a8>)
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
			  	  			  if(fabs(Pos_Target-q_Pos) <= (q_Velo*q_Velo)/(2*Max_Acc))
 80027c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <Trajectory+0x288>)
 80027c6:	ed93 7a00 	vldr	s14, [r3]
 80027ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002848 <Trajectory+0x2a0>)
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d4:	eeb0 7ae7 	vabs.f32	s14, s15
 80027d8:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <Trajectory+0x2a4>)
 80027da:	edd3 6a00 	vldr	s13, [r3]
 80027de:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <Trajectory+0x2a4>)
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80027e8:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <Trajectory+0x29c>)
 80027ea:	edd3 7a00 	vldr	s15, [r3]
 80027ee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80027f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80027f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	d900      	bls.n	8002802 <Trajectory+0x25a>
			  	  					state_Tra = 2;
			  	  					Pos_Start = q_Pos;
			  	  					Velo_Start = q_Velo;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 8002800:	e104      	b.n	8002a0c <Trajectory+0x464>
			  	  					state_Tra = 2;
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <Trajectory+0x280>)
 8002804:	2202      	movs	r2, #2
 8002806:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <Trajectory+0x2a0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a07      	ldr	r2, [pc, #28]	@ (800282c <Trajectory+0x284>)
 800280e:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <Trajectory+0x2a4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a08      	ldr	r2, [pc, #32]	@ (8002838 <Trajectory+0x290>)
 8002816:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <Trajectory+0x294>)
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8002820:	e0f4      	b.n	8002a0c <Trajectory+0x464>
 8002822:	bf00      	nop
 8002824:	20000510 	.word	0x20000510
 8002828:	2000042c 	.word	0x2000042c
 800282c:	2000040c 	.word	0x2000040c
 8002830:	20000410 	.word	0x20000410
 8002834:	20000010 	.word	0x20000010
 8002838:	20000418 	.word	0x20000418
 800283c:	20000428 	.word	0x20000428
 8002840:	3fe00000 	.word	0x3fe00000
 8002844:	2000000c 	.word	0x2000000c
 8002848:	2000041c 	.word	0x2000041c
 800284c:	20000420 	.word	0x20000420
 8002850:	20000424 	.word	0x20000424
 8002854:	20000008 	.word	0x20000008
			  	  		  case 2:
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)-((direction*0.5*Max_Acc)*(t*t));
 8002858:	4b81      	ldr	r3, [pc, #516]	@ (8002a60 <Trajectory+0x4b8>)
 800285a:	ed93 7a00 	vldr	s14, [r3]
 800285e:	4b81      	ldr	r3, [pc, #516]	@ (8002a64 <Trajectory+0x4bc>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002868:	4b7f      	ldr	r3, [pc, #508]	@ (8002a68 <Trajectory+0x4c0>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002872:	ee17 0a90 	vmov	r0, s15
 8002876:	f7fd fe33 	bl	80004e0 <__aeabi_f2d>
 800287a:	4680      	mov	r8, r0
 800287c:	4689      	mov	r9, r1
 800287e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a6c <Trajectory+0x4c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe1a 	bl	80004bc <__aeabi_i2d>
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	4b78      	ldr	r3, [pc, #480]	@ (8002a70 <Trajectory+0x4c8>)
 800288e:	f7fd fe7f 	bl	8000590 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4692      	mov	sl, r2
 8002898:	469b      	mov	fp, r3
 800289a:	4b76      	ldr	r3, [pc, #472]	@ (8002a74 <Trajectory+0x4cc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe1e 	bl	80004e0 <__aeabi_f2d>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4650      	mov	r0, sl
 80028aa:	4659      	mov	r1, fp
 80028ac:	f7fd fe70 	bl	8000590 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4692      	mov	sl, r2
 80028b6:	469b      	mov	fp, r3
 80028b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a64 <Trajectory+0x4bc>)
 80028ba:	ed93 7a00 	vldr	s14, [r3]
 80028be:	4b69      	ldr	r3, [pc, #420]	@ (8002a64 <Trajectory+0x4bc>)
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c8:	ee17 0a90 	vmov	r0, s15
 80028cc:	f7fd fe08 	bl	80004e0 <__aeabi_f2d>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4650      	mov	r0, sl
 80028d6:	4659      	mov	r1, fp
 80028d8:	f7fd fe5a 	bl	8000590 <__aeabi_dmul>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4640      	mov	r0, r8
 80028e2:	4649      	mov	r1, r9
 80028e4:	f7fd fc9c 	bl	8000220 <__aeabi_dsub>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7fe f8e8 	bl	8000ac4 <__aeabi_d2f>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4a60      	ldr	r2, [pc, #384]	@ (8002a78 <Trajectory+0x4d0>)
 80028f8:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start - direction*Max_Acc*t;
 80028fa:	4b59      	ldr	r3, [pc, #356]	@ (8002a60 <Trajectory+0x4b8>)
 80028fc:	ed93 7a00 	vldr	s14, [r3]
 8002900:	4b5a      	ldr	r3, [pc, #360]	@ (8002a6c <Trajectory+0x4c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800290c:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <Trajectory+0x4cc>)
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002916:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <Trajectory+0x4bc>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002924:	4b55      	ldr	r3, [pc, #340]	@ (8002a7c <Trajectory+0x4d4>)
 8002926:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = -direction*Max_Acc;
 800292a:	4b50      	ldr	r3, [pc, #320]	@ (8002a6c <Trajectory+0x4c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	425b      	negs	r3, r3
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002938:	4b4e      	ldr	r3, [pc, #312]	@ (8002a74 <Trajectory+0x4cc>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	4b4f      	ldr	r3, [pc, #316]	@ (8002a80 <Trajectory+0x4d8>)
 8002944:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) <= 0)
 8002948:	4b4c      	ldr	r3, [pc, #304]	@ (8002a7c <Trajectory+0x4d4>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	eef0 7ae7 	vabs.f32	s15, s15
 8002952:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	d900      	bls.n	800295e <Trajectory+0x3b6>
			  	  				{
			  	  					state_Tra = 3;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 800295c:	e056      	b.n	8002a0c <Trajectory+0x464>
			  	  					state_Tra = 3;
 800295e:	4b49      	ldr	r3, [pc, #292]	@ (8002a84 <Trajectory+0x4dc>)
 8002960:	2203      	movs	r2, #3
 8002962:	601a      	str	r2, [r3, #0]
			  	  					t = 0;
 8002964:	4b3f      	ldr	r3, [pc, #252]	@ (8002a64 <Trajectory+0x4bc>)
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 800296c:	e04e      	b.n	8002a0c <Trajectory+0x464>
			  	  		  case 3:
			  	  			  	if(Pos_Target != Old_Target)
 800296e:	4b46      	ldr	r3, [pc, #280]	@ (8002a88 <Trajectory+0x4e0>)
 8002970:	ed93 7a00 	vldr	s14, [r3]
 8002974:	4b45      	ldr	r3, [pc, #276]	@ (8002a8c <Trajectory+0x4e4>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	eeb4 7a67 	vcmp.f32	s14, s15
 800297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002982:	d042      	beq.n	8002a0a <Trajectory+0x462>
			  	  			  	{


			  	  			  		state_Tra = 0;
 8002984:	4b3f      	ldr	r3, [pc, #252]	@ (8002a84 <Trajectory+0x4dc>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
			  	  			  		t = 0;
 800298a:	4b36      	ldr	r3, [pc, #216]	@ (8002a64 <Trajectory+0x4bc>)
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
			  	  			  		Pos_Start = Pos;
 8002992:	4b3f      	ldr	r3, [pc, #252]	@ (8002a90 <Trajectory+0x4e8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a34      	ldr	r2, [pc, #208]	@ (8002a68 <Trajectory+0x4c0>)
 8002998:	6013      	str	r3, [r2, #0]
			  	  			  		Velo_Start = q_Velo;
 800299a:	4b38      	ldr	r3, [pc, #224]	@ (8002a7c <Trajectory+0x4d4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a30      	ldr	r2, [pc, #192]	@ (8002a60 <Trajectory+0x4b8>)
 80029a0:	6013      	str	r3, [r2, #0]
			  	  			  		Old_Target = Pos_Target;
 80029a2:	4b39      	ldr	r3, [pc, #228]	@ (8002a88 <Trajectory+0x4e0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a39      	ldr	r2, [pc, #228]	@ (8002a8c <Trajectory+0x4e4>)
 80029a8:	6013      	str	r3, [r2, #0]
			  	  			  		Velocontrol.Error[NEW] = 0;
 80029aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002a94 <Trajectory+0x4ec>)
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
									Velocontrol.Error[OLD] = 0;
 80029b2:	4b38      	ldr	r3, [pc, #224]	@ (8002a94 <Trajectory+0x4ec>)
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
									Velocontrol.Error[OLDER] = 0;
 80029ba:	4b36      	ldr	r3, [pc, #216]	@ (8002a94 <Trajectory+0x4ec>)
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	615a      	str	r2, [r3, #20]
									Velocontrol.Output[NEW] = 0;
 80029c2:	4b34      	ldr	r3, [pc, #208]	@ (8002a94 <Trajectory+0x4ec>)
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
									Velocontrol.Output[OLD] = 0;
 80029ca:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <Trajectory+0x4ec>)
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	605a      	str	r2, [r3, #4]
									Velocontrol.Output[OLDER] = 0;
 80029d2:	4b30      	ldr	r3, [pc, #192]	@ (8002a94 <Trajectory+0x4ec>)
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]

									Poscontrol.Error[NEW] = 0;
 80029da:	4b2f      	ldr	r3, [pc, #188]	@ (8002a98 <Trajectory+0x4f0>)
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
									Poscontrol.Error[OLD] = 0;
 80029e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a98 <Trajectory+0x4f0>)
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
									Poscontrol.Error[OLDER] = 0;
 80029ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002a98 <Trajectory+0x4f0>)
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	615a      	str	r2, [r3, #20]
									Poscontrol.Output[NEW] = 0;
 80029f2:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <Trajectory+0x4f0>)
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
									Poscontrol.Output[OLD] = 0;
 80029fa:	4b27      	ldr	r3, [pc, #156]	@ (8002a98 <Trajectory+0x4f0>)
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
									Poscontrol.Output[OLDER] = 0;
 8002a02:	4b25      	ldr	r3, [pc, #148]	@ (8002a98 <Trajectory+0x4f0>)
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]

			  	  			  	}
			  	  			  	break;
 8002a0a:	bf00      	nop
//			  output = ((2*kp_Velo*T*error_Velo) - (2*kp_Velo*T*error_Velo_2) +(ki_Velo*T*T*error_Velo)+(2*ki_Velo*T*T*error_Velo_1)+(ki_Velo*T*T*error_Velo_2)+(4*kd_Velo*error_Velo)-(8*kd_Velo*error_Velo_1)-(4*kd_Velo*error_Velo_2)+(2*output_2*T))/(2*T);
//			  error_Velo_2 = error_Velo_1;
//			  error_Velo_1 = error_Velo;
//			  output_2 = output_1;
//			  output_1 = output;
		  t = t+0.0001;
 8002a0c:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <Trajectory+0x4bc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fd65 	bl	80004e0 <__aeabi_f2d>
 8002a16:	a310      	add	r3, pc, #64	@ (adr r3, 8002a58 <Trajectory+0x4b0>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fc02 	bl	8000224 <__adddf3>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f84c 	bl	8000ac4 <__aeabi_d2f>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <Trajectory+0x4bc>)
 8002a30:	6013      	str	r3, [r2, #0]
		  timestamp_Traject = currentTime + 100;
 8002a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a36:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8002a3a:	f143 0500 	adc.w	r5, r3, #0
 8002a3e:	4622      	mov	r2, r4
 8002a40:	462b      	mov	r3, r5
 8002a42:	4916      	ldr	r1, [pc, #88]	@ (8002a9c <Trajectory+0x4f4>)
 8002a44:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a52:	bf00      	nop
 8002a54:	f3af 8000 	nop.w
 8002a58:	eb1c432d 	.word	0xeb1c432d
 8002a5c:	3f1a36e2 	.word	0x3f1a36e2
 8002a60:	20000418 	.word	0x20000418
 8002a64:	20000428 	.word	0x20000428
 8002a68:	2000040c 	.word	0x2000040c
 8002a6c:	20000010 	.word	0x20000010
 8002a70:	3fe00000 	.word	0x3fe00000
 8002a74:	2000000c 	.word	0x2000000c
 8002a78:	2000041c 	.word	0x2000041c
 8002a7c:	20000420 	.word	0x20000420
 8002a80:	20000424 	.word	0x20000424
 8002a84:	2000042c 	.word	0x2000042c
 8002a88:	20000410 	.word	0x20000410
 8002a8c:	20000414 	.word	0x20000414
 8002a90:	200004b0 	.word	0x200004b0
 8002a94:	200003bc 	.word	0x200003bc
 8002a98:	200003e4 	.word	0x200003e4
 8002a9c:	20000510 	.word	0x20000510

08002aa0 <PIDposition>:
void PIDposition()
{
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
	static uint64_t timestamp3 =0;
	int64_t currentTime = micros();
 8002aa6:	f7ff f97d 	bl	8001da4 <micros>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentTime > timestamp3)
 8002ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab6:	499c      	ldr	r1, [pc, #624]	@ (8002d28 <PIDposition+0x288>)
 8002ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002abc:	4290      	cmp	r0, r2
 8002abe:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ac2:	f080 8102 	bcs.w	8002cca <PIDposition+0x22a>
	  {
			Poscontrol.Error[NEW] = q_Pos-Pos;
 8002ac6:	4b99      	ldr	r3, [pc, #612]	@ (8002d2c <PIDposition+0x28c>)
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	4b98      	ldr	r3, [pc, #608]	@ (8002d30 <PIDposition+0x290>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad6:	4b97      	ldr	r3, [pc, #604]	@ (8002d34 <PIDposition+0x294>)
 8002ad8:	edc3 7a03 	vstr	s15, [r3, #12]
			Poscontrol.Output[NEW] = ((((Poscontrol.kp*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[OLD])+(Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*Poscontrol.T))/Poscontrol.T;
 8002adc:	4b95      	ldr	r3, [pc, #596]	@ (8002d34 <PIDposition+0x294>)
 8002ade:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ae2:	4b94      	ldr	r3, [pc, #592]	@ (8002d34 <PIDposition+0x294>)
 8002ae4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aec:	4b91      	ldr	r3, [pc, #580]	@ (8002d34 <PIDposition+0x294>)
 8002aee:	edd3 6a07 	vldr	s13, [r3, #28]
 8002af2:	4b90      	ldr	r3, [pc, #576]	@ (8002d34 <PIDposition+0x294>)
 8002af4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002af8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002afc:	4b8d      	ldr	r3, [pc, #564]	@ (8002d34 <PIDposition+0x294>)
 8002afe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8002d34 <PIDposition+0x294>)
 8002b0c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b14:	4b87      	ldr	r3, [pc, #540]	@ (8002d34 <PIDposition+0x294>)
 8002b16:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b1e:	4b85      	ldr	r3, [pc, #532]	@ (8002d34 <PIDposition+0x294>)
 8002b20:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b24:	4b83      	ldr	r3, [pc, #524]	@ (8002d34 <PIDposition+0x294>)
 8002b26:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002b2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b2e:	4b81      	ldr	r3, [pc, #516]	@ (8002d34 <PIDposition+0x294>)
 8002b30:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b38:	4b7e      	ldr	r3, [pc, #504]	@ (8002d34 <PIDposition+0x294>)
 8002b3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b46:	4b7b      	ldr	r3, [pc, #492]	@ (8002d34 <PIDposition+0x294>)
 8002b48:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b4c:	4b79      	ldr	r3, [pc, #484]	@ (8002d34 <PIDposition+0x294>)
 8002b4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b5a:	4b76      	ldr	r3, [pc, #472]	@ (8002d34 <PIDposition+0x294>)
 8002b5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b60:	4b74      	ldr	r3, [pc, #464]	@ (8002d34 <PIDposition+0x294>)
 8002b62:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002b6e:	4b71      	ldr	r3, [pc, #452]	@ (8002d34 <PIDposition+0x294>)
 8002b70:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b78:	4b6e      	ldr	r3, [pc, #440]	@ (8002d34 <PIDposition+0x294>)
 8002b7a:	edc3 7a00 	vstr	s15, [r3]
			Poscontrol.Error[OLDER] = Poscontrol.Error[OLD];
 8002b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d34 <PIDposition+0x294>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	4a6c      	ldr	r2, [pc, #432]	@ (8002d34 <PIDposition+0x294>)
 8002b84:	6153      	str	r3, [r2, #20]
			Poscontrol.Error[OLD] = Poscontrol.Error[NEW];
 8002b86:	4b6b      	ldr	r3, [pc, #428]	@ (8002d34 <PIDposition+0x294>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	4a6a      	ldr	r2, [pc, #424]	@ (8002d34 <PIDposition+0x294>)
 8002b8c:	6113      	str	r3, [r2, #16]
			Poscontrol.Output[OLDER] = Poscontrol.Output[OLD];
 8002b8e:	4b69      	ldr	r3, [pc, #420]	@ (8002d34 <PIDposition+0x294>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a68      	ldr	r2, [pc, #416]	@ (8002d34 <PIDposition+0x294>)
 8002b94:	6093      	str	r3, [r2, #8]
			Poscontrol.Output[OLD] = Poscontrol.Output[NEW];
 8002b96:	4b67      	ldr	r3, [pc, #412]	@ (8002d34 <PIDposition+0x294>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a66      	ldr	r2, [pc, #408]	@ (8002d34 <PIDposition+0x294>)
 8002b9c:	6053      	str	r3, [r2, #4]

			Velocontrol.Error[NEW] = Poscontrol.Output[NEW]+q_Velo-speed_fill;
 8002b9e:	4b65      	ldr	r3, [pc, #404]	@ (8002d34 <PIDposition+0x294>)
 8002ba0:	ed93 7a00 	vldr	s14, [r3]
 8002ba4:	4b64      	ldr	r3, [pc, #400]	@ (8002d38 <PIDposition+0x298>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bae:	4b63      	ldr	r3, [pc, #396]	@ (8002d3c <PIDposition+0x29c>)
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb8:	4b61      	ldr	r3, [pc, #388]	@ (8002d40 <PIDposition+0x2a0>)
 8002bba:	edc3 7a03 	vstr	s15, [r3, #12]
			Velocontrol.Output[NEW] = ((((Velocontrol.kp*Velocontrol.T)+(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[NEW])-(((Velocontrol.kp*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[OLD])+(Velocontrol.kd*Velocontrol.Error[OLDER])+(Velocontrol.Output[OLD]*Velocontrol.T))/Velocontrol.T;
 8002bbe:	4b60      	ldr	r3, [pc, #384]	@ (8002d40 <PIDposition+0x2a0>)
 8002bc0:	ed93 7a06 	vldr	s14, [r3, #24]
 8002bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d40 <PIDposition+0x2a0>)
 8002bc6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bce:	4b5c      	ldr	r3, [pc, #368]	@ (8002d40 <PIDposition+0x2a0>)
 8002bd0:	edd3 6a07 	vldr	s13, [r3, #28]
 8002bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d40 <PIDposition+0x2a0>)
 8002bd6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002bda:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bde:	4b58      	ldr	r3, [pc, #352]	@ (8002d40 <PIDposition+0x2a0>)
 8002be0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	4b54      	ldr	r3, [pc, #336]	@ (8002d40 <PIDposition+0x2a0>)
 8002bee:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf6:	4b52      	ldr	r3, [pc, #328]	@ (8002d40 <PIDposition+0x2a0>)
 8002bf8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c00:	4b4f      	ldr	r3, [pc, #316]	@ (8002d40 <PIDposition+0x2a0>)
 8002c02:	edd3 6a06 	vldr	s13, [r3, #24]
 8002c06:	4b4e      	ldr	r3, [pc, #312]	@ (8002d40 <PIDposition+0x2a0>)
 8002c08:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002c0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c10:	4b4b      	ldr	r3, [pc, #300]	@ (8002d40 <PIDposition+0x2a0>)
 8002c12:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c1a:	4b49      	ldr	r3, [pc, #292]	@ (8002d40 <PIDposition+0x2a0>)
 8002c1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c28:	4b45      	ldr	r3, [pc, #276]	@ (8002d40 <PIDposition+0x2a0>)
 8002c2a:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c2e:	4b44      	ldr	r3, [pc, #272]	@ (8002d40 <PIDposition+0x2a0>)
 8002c30:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c3c:	4b40      	ldr	r3, [pc, #256]	@ (8002d40 <PIDposition+0x2a0>)
 8002c3e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c42:	4b3f      	ldr	r3, [pc, #252]	@ (8002d40 <PIDposition+0x2a0>)
 8002c44:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002c50:	4b3b      	ldr	r3, [pc, #236]	@ (8002d40 <PIDposition+0x2a0>)
 8002c52:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5a:	4b39      	ldr	r3, [pc, #228]	@ (8002d40 <PIDposition+0x2a0>)
 8002c5c:	edc3 7a00 	vstr	s15, [r3]
			if(Velocontrol.Output[NEW]>42500)Velocontrol.Output[NEW]=42500;
 8002c60:	4b37      	ldr	r3, [pc, #220]	@ (8002d40 <PIDposition+0x2a0>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002d44 <PIDposition+0x2a4>
 8002c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	dd02      	ble.n	8002c7a <PIDposition+0x1da>
 8002c74:	4b32      	ldr	r3, [pc, #200]	@ (8002d40 <PIDposition+0x2a0>)
 8002c76:	4a34      	ldr	r2, [pc, #208]	@ (8002d48 <PIDposition+0x2a8>)
 8002c78:	601a      	str	r2, [r3, #0]
			if(Velocontrol.Output[NEW]<-42500)Velocontrol.Output[NEW]=-42500;
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <PIDposition+0x2a0>)
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002d4c <PIDposition+0x2ac>
 8002c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	d502      	bpl.n	8002c94 <PIDposition+0x1f4>
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d40 <PIDposition+0x2a0>)
 8002c90:	4a2f      	ldr	r2, [pc, #188]	@ (8002d50 <PIDposition+0x2b0>)
 8002c92:	601a      	str	r2, [r3, #0]
			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
 8002c94:	4b2a      	ldr	r3, [pc, #168]	@ (8002d40 <PIDposition+0x2a0>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	4a29      	ldr	r2, [pc, #164]	@ (8002d40 <PIDposition+0x2a0>)
 8002c9a:	6153      	str	r3, [r2, #20]
			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
 8002c9c:	4b28      	ldr	r3, [pc, #160]	@ (8002d40 <PIDposition+0x2a0>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a27      	ldr	r2, [pc, #156]	@ (8002d40 <PIDposition+0x2a0>)
 8002ca2:	6113      	str	r3, [r2, #16]
			Velocontrol.Output[OLDER] = Velocontrol.Output[OLD];
 8002ca4:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <PIDposition+0x2a0>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a25      	ldr	r2, [pc, #148]	@ (8002d40 <PIDposition+0x2a0>)
 8002caa:	6093      	str	r3, [r2, #8]
			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
 8002cac:	4b24      	ldr	r3, [pc, #144]	@ (8002d40 <PIDposition+0x2a0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a23      	ldr	r2, [pc, #140]	@ (8002d40 <PIDposition+0x2a0>)
 8002cb2:	6053      	str	r3, [r2, #4]
	//					if(fabs(Pos_Target-Pos) <= 0.1)start = 0;
			timestamp3 =currentTime + 100;
 8002cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb8:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8002cbc:	f143 0500 	adc.w	r5, r3, #0
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	4918      	ldr	r1, [pc, #96]	@ (8002d28 <PIDposition+0x288>)
 8002cc6:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  if(Velocontrol.Output[NEW] > 0)
 8002cca:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <PIDposition+0x2a0>)
 8002ccc:	edd3 7a00 	vldr	s15, [r3]
 8002cd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd8:	dd10      	ble.n	8002cfc <PIDposition+0x25c>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2101      	movs	r1, #1
 8002cde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ce2:	f002 fdf9 	bl	80058d8 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Velocontrol.Output[NEW]);
 8002ce6:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <PIDposition+0x2a0>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <PIDposition+0x2b4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf4:	ee17 2a90 	vmov	r2, s15
 8002cf8:	635a      	str	r2, [r3, #52]	@ 0x34
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
	  }
}
 8002cfa:	e011      	b.n	8002d20 <PIDposition+0x280>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	2101      	movs	r1, #1
 8002d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d04:	f002 fde8 	bl	80058d8 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
 8002d08:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <PIDposition+0x2a0>)
 8002d0a:	edd3 7a00 	vldr	s15, [r3]
 8002d0e:	eef0 7ae7 	vabs.f32	s15, s15
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <PIDposition+0x2b4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d1a:	ee17 2a90 	vmov	r2, s15
 8002d1e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bdb0      	pop	{r4, r5, r7, pc}
 8002d28:	20000518 	.word	0x20000518
 8002d2c:	2000041c 	.word	0x2000041c
 8002d30:	200004b0 	.word	0x200004b0
 8002d34:	200003e4 	.word	0x200003e4
 8002d38:	20000420 	.word	0x20000420
 8002d3c:	200004a8 	.word	0x200004a8
 8002d40:	200003bc 	.word	0x200003bc
 8002d44:	47260400 	.word	0x47260400
 8002d48:	47260400 	.word	0x47260400
 8002d4c:	c7260400 	.word	0xc7260400
 8002d50:	c7260400 	.word	0xc7260400
 8002d54:	20000280 	.word	0x20000280

08002d58 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d68:	d102      	bne.n	8002d70 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start  = 1;
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002da4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_4)
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d107      	bne.n	8002d86 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002d76:	2120      	movs	r1, #32
 8002d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d7c:	f002 fdc4 	bl	8005908 <HAL_GPIO_TogglePin>
		HOME = 1;
 8002d80:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <HAL_GPIO_EXTI_Callback+0x50>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d107      	bne.n	8002d9c <HAL_GPIO_EXTI_Callback+0x44>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002d8c:	2120      	movs	r1, #32
 8002d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d92:	f002 fdb9 	bl	8005908 <HAL_GPIO_TogglePin>
		HOME = 2;
 8002d96:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <HAL_GPIO_EXTI_Callback+0x50>)
 8002d98:	2202      	movs	r2, #2
 8002d9a:	601a      	str	r2, [r3, #0]
	}
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	2000036c 	.word	0x2000036c
 8002da8:	20000378 	.word	0x20000378

08002dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002db0:	b672      	cpsid	i
}
 8002db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <Error_Handler+0x8>

08002db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <HAL_MspInit+0x44>)
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002dfc <HAL_MspInit+0x44>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dca:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <HAL_MspInit+0x44>)
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_MspInit+0x44>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	4a08      	ldr	r2, [pc, #32]	@ (8002dfc <HAL_MspInit+0x44>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_MspInit+0x44>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002dee:	f002 fe61 	bl	8005ab4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000

08002e00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b09e      	sub	sp, #120	@ 0x78
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e18:	f107 0310 	add.w	r3, r7, #16
 8002e1c:	2254      	movs	r2, #84	@ 0x54
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f007 fb77 	bl	800a514 <memset>
  if(hadc->Instance==ADC3)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a33      	ldr	r2, [pc, #204]	@ (8002ef8 <HAL_ADC_MspInit+0xf8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d15f      	bne.n	8002ef0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002e30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002e36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e3c:	f107 0310 	add.w	r3, r7, #16
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fb75 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002e4c:	f7ff ffae 	bl	8002dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8002e50:	4b2a      	ldr	r3, [pc, #168]	@ (8002efc <HAL_ADC_MspInit+0xfc>)
 8002e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e54:	4a29      	ldr	r2, [pc, #164]	@ (8002efc <HAL_ADC_MspInit+0xfc>)
 8002e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e5c:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <HAL_ADC_MspInit+0xfc>)
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e68:	4b24      	ldr	r3, [pc, #144]	@ (8002efc <HAL_ADC_MspInit+0xfc>)
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6c:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <HAL_ADC_MspInit+0xfc>)
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e74:	4b21      	ldr	r3, [pc, #132]	@ (8002efc <HAL_ADC_MspInit+0xfc>)
 8002e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = JOY_Y_Pin|JOY_X_Pin;
 8002e80:	f242 0302 	movw	r3, #8194	@ 0x2002
 8002e84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e86:	2303      	movs	r3, #3
 8002e88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e92:	4619      	mov	r1, r3
 8002e94:	481a      	ldr	r0, [pc, #104]	@ (8002f00 <HAL_ADC_MspInit+0x100>)
 8002e96:	f002 fb85 	bl	80055a4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel2;
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f08 <HAL_ADC_MspInit+0x108>)
 8002e9e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002ea0:	4b18      	ldr	r3, [pc, #96]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002ea2:	2225      	movs	r2, #37	@ 0x25
 8002ea4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ea6:	4b17      	ldr	r3, [pc, #92]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eac:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002eb2:	4b14      	ldr	r3, [pc, #80]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002eb4:	2280      	movs	r2, #128	@ 0x80
 8002eb6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002eb8:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ebe:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ec0:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002ec2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ec6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002eca:	2220      	movs	r2, #32
 8002ecc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002ece:	4b0d      	ldr	r3, [pc, #52]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002ed4:	480b      	ldr	r0, [pc, #44]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002ed6:	f002 f833 	bl	8004f40 <HAL_DMA_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002ee0:	f7ff ff64 	bl	8002dac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a07      	ldr	r2, [pc, #28]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002ee8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002eea:	4a06      	ldr	r2, [pc, #24]	@ (8002f04 <HAL_ADC_MspInit+0x104>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ef0:	bf00      	nop
 8002ef2:	3778      	adds	r7, #120	@ 0x78
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	50000400 	.word	0x50000400
 8002efc:	40021000 	.word	0x40021000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	200000a8 	.word	0x200000a8
 8002f08:	4002001c 	.word	0x4002001c

08002f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b09e      	sub	sp, #120	@ 0x78
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	2254      	movs	r2, #84	@ 0x54
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f007 faf1 	bl	800a514 <memset>
  if(huart->Instance==LPUART1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a23      	ldr	r2, [pc, #140]	@ (8002fc4 <HAL_UART_MspInit+0xb8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d13e      	bne.n	8002fba <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f44:	f107 0310 	add.w	r3, r7, #16
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 faf1 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f54:	f7ff ff2a 	bl	8002dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002f58:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc8 <HAL_UART_MspInit+0xbc>)
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc8 <HAL_UART_MspInit+0xbc>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002f64:	4b18      	ldr	r3, [pc, #96]	@ (8002fc8 <HAL_UART_MspInit+0xbc>)
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f70:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <HAL_UART_MspInit+0xbc>)
 8002f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f74:	4a14      	ldr	r2, [pc, #80]	@ (8002fc8 <HAL_UART_MspInit+0xbc>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <HAL_UART_MspInit+0xbc>)
 8002f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002f88:	230c      	movs	r3, #12
 8002f8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f94:	2300      	movs	r3, #0
 8002f96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002f98:	230c      	movs	r3, #12
 8002f9a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa6:	f002 fafd 	bl	80055a4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	205b      	movs	r0, #91	@ 0x5b
 8002fb0:	f001 ff91 	bl	8004ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002fb4:	205b      	movs	r0, #91	@ 0x5b
 8002fb6:	f001 ffa8 	bl	8004f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002fba:	bf00      	nop
 8002fbc:	3778      	adds	r7, #120	@ 0x78
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40008000 	.word	0x40008000
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a31      	ldr	r2, [pc, #196]	@ (80030a0 <HAL_TIM_Base_MspInit+0xd4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fde:	4b31      	ldr	r3, [pc, #196]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe2:	4a30      	ldr	r2, [pc, #192]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8002fe4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fe8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fea:	4b2e      	ldr	r3, [pc, #184]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8002fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ff6:	e04e      	b.n	8003096 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003000:	d10c      	bne.n	800301c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003002:	4b28      	ldr	r3, [pc, #160]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	4a27      	ldr	r2, [pc, #156]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6593      	str	r3, [r2, #88]	@ 0x58
 800300e:	4b25      	ldr	r3, [pc, #148]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	69bb      	ldr	r3, [r7, #24]
}
 800301a:	e03c      	b.n	8003096 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a21      	ldr	r2, [pc, #132]	@ (80030a8 <HAL_TIM_Base_MspInit+0xdc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10c      	bne.n	8003040 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003026:	4b1f      	ldr	r3, [pc, #124]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	4a1e      	ldr	r2, [pc, #120]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6593      	str	r3, [r2, #88]	@ 0x58
 8003032:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]
}
 800303e:	e02a      	b.n	8003096 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	@ (80030ac <HAL_TIM_Base_MspInit+0xe0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d114      	bne.n	8003074 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800304a:	4b16      	ldr	r3, [pc, #88]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304e:	4a15      	ldr	r2, [pc, #84]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6593      	str	r3, [r2, #88]	@ 0x58
 8003056:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	2032      	movs	r0, #50	@ 0x32
 8003068:	f001 ff35 	bl	8004ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800306c:	2032      	movs	r0, #50	@ 0x32
 800306e:	f001 ff4c 	bl	8004f0a <HAL_NVIC_EnableIRQ>
}
 8003072:	e010      	b.n	8003096 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0d      	ldr	r2, [pc, #52]	@ (80030b0 <HAL_TIM_Base_MspInit+0xe4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10b      	bne.n	8003096 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800307e:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8003080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003082:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 8003084:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003088:	6613      	str	r3, [r2, #96]	@ 0x60
 800308a:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
}
 8003096:	bf00      	nop
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40013400 	.word	0x40013400

080030b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	@ 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <HAL_TIM_Encoder_MspInit+0x8c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d130      	bne.n	8003138 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <HAL_TIM_Encoder_MspInit+0x90>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	4a1a      	ldr	r2, [pc, #104]	@ (8003144 <HAL_TIM_Encoder_MspInit+0x90>)
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e2:	4b18      	ldr	r3, [pc, #96]	@ (8003144 <HAL_TIM_Encoder_MspInit+0x90>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <HAL_TIM_Encoder_MspInit+0x90>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	4a14      	ldr	r2, [pc, #80]	@ (8003144 <HAL_TIM_Encoder_MspInit+0x90>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030fa:	4b12      	ldr	r3, [pc, #72]	@ (8003144 <HAL_TIM_Encoder_MspInit+0x90>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_Encoder_A_Pin|TIM3_Encoder_B_Pin;
 8003106:	23c0      	movs	r3, #192	@ 0xc0
 8003108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003116:	2302      	movs	r3, #2
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	f107 0314 	add.w	r3, r7, #20
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003124:	f002 fa3e 	bl	80055a4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	201d      	movs	r0, #29
 800312e:	f001 fed2 	bl	8004ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003132:	201d      	movs	r0, #29
 8003134:	f001 fee9 	bl	8004f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003138:	bf00      	nop
 800313a:	3728      	adds	r7, #40	@ 0x28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40000400 	.word	0x40000400
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a12      	ldr	r2, [pc, #72]	@ (80031b0 <HAL_TIM_MspPostInit+0x68>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d11d      	bne.n	80031a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_TIM_MspPostInit+0x6c>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	4a11      	ldr	r2, [pc, #68]	@ (80031b4 <HAL_TIM_MspPostInit+0x6c>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003176:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HAL_TIM_MspPostInit+0x6c>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_PWM_Pin;
 8003182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003186:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003188:	2302      	movs	r3, #2
 800318a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003194:	230a      	movs	r3, #10
 8003196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_PWM_GPIO_Port, &GPIO_InitStruct);
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	4619      	mov	r1, r3
 800319e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031a2:	f002 f9ff 	bl	80055a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80031a6:	bf00      	nop
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40021000 	.word	0x40021000

080031b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <NMI_Handler+0x4>

080031c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <HardFault_Handler+0x4>

080031c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <MemManage_Handler+0x4>

080031d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <BusFault_Handler+0x4>

080031d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <UsageFault_Handler+0x4>

080031e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800320e:	f000 f8cf 	bl	80033b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}

08003216 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lowerprox_Pin);
 800321a:	2010      	movs	r0, #16
 800321c:	f002 fb8e 	bl	800593c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}

08003224 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003228:	4802      	ldr	r0, [pc, #8]	@ (8003234 <DMA1_Channel2_IRQHandler+0x10>)
 800322a:	f002 f86c 	bl	8005306 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	200000a8 	.word	0x200000a8

08003238 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UpperProx_Pin);
 800323c:	2020      	movs	r0, #32
 800323e:	f002 fb7d 	bl	800593c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800324c:	4802      	ldr	r0, [pc, #8]	@ (8003258 <TIM3_IRQHandler+0x10>)
 800324e:	f003 ffa5 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000234 	.word	0x20000234

0800325c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003260:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003264:	f002 fb6a 	bl	800593c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}

0800326c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003270:	4802      	ldr	r0, [pc, #8]	@ (800327c <TIM5_IRQHandler+0x10>)
 8003272:	f003 ff93 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200002cc 	.word	0x200002cc

08003280 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003284:	4802      	ldr	r0, [pc, #8]	@ (8003290 <LPUART1_IRQHandler+0x10>)
 8003286:	f005 f943 	bl	8008510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000108 	.word	0x20000108

08003294 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <SystemInit+0x20>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	4a05      	ldr	r2, [pc, #20]	@ (80032b4 <SystemInit+0x20>)
 80032a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032b8:	480d      	ldr	r0, [pc, #52]	@ (80032f0 <LoopForever+0x2>)

  mov   sp, r0          /* set stack pointer */
 80032ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032bc:	f7ff ffea 	bl	8003294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c0:	480c      	ldr	r0, [pc, #48]	@ (80032f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80032c2:	490d      	ldr	r1, [pc, #52]	@ (80032f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032c4:	4a0d      	ldr	r2, [pc, #52]	@ (80032fc <LoopForever+0xe>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80032c8:	e002      	b.n	80032d0 <LoopCopyDataInit>

080032ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ce:	3304      	adds	r3, #4

080032d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d4:	d3f9      	bcc.n	80032ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003304 <LoopForever+0x16>)
  movs r3, #0
 80032da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032dc:	e001      	b.n	80032e2 <LoopFillZerobss>

080032de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e0:	3204      	adds	r2, #4

080032e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e4:	d3fb      	bcc.n	80032de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032e6:	f007 f91d 	bl	800a524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ea:	f7fd fdb5 	bl	8000e58 <main>

080032ee <LoopForever>:

LoopForever:
    b LoopForever
 80032ee:	e7fe      	b.n	80032ee <LoopForever>
  ldr   r0, =_estack
 80032f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80032fc:	0800a5d4 	.word	0x0800a5d4
  ldr r2, =_sbss
 8003300:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003304:	20000524 	.word	0x20000524

08003308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003308:	e7fe      	b.n	8003308 <ADC1_2_IRQHandler>

0800330a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003314:	2003      	movs	r0, #3
 8003316:	f001 fdd3 	bl	8004ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800331a:	2000      	movs	r0, #0
 800331c:	f000 f80e 	bl	800333c <HAL_InitTick>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	71fb      	strb	r3, [r7, #7]
 800332a:	e001      	b.n	8003330 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800332c:	f7ff fd44 	bl	8002db8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003330:	79fb      	ldrb	r3, [r7, #7]

}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003348:	4b16      	ldr	r3, [pc, #88]	@ (80033a4 <HAL_InitTick+0x68>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d022      	beq.n	8003396 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003350:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <HAL_InitTick+0x6c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <HAL_InitTick+0x68>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fdde 	bl	8004f26 <HAL_SYSTICK_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10f      	bne.n	8003390 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	d809      	bhi.n	800338a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003376:	2200      	movs	r2, #0
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	f04f 30ff 	mov.w	r0, #4294967295
 800337e:	f001 fdaa 	bl	8004ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003382:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <HAL_InitTick+0x70>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	e007      	b.n	800339a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	e004      	b.n	800339a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e001      	b.n	800339a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000001c 	.word	0x2000001c
 80033a8:	20000014 	.word	0x20000014
 80033ac:	20000018 	.word	0x20000018

080033b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b4:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <HAL_IncTick+0x1c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_IncTick+0x20>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	4a03      	ldr	r2, [pc, #12]	@ (80033cc <HAL_IncTick+0x1c>)
 80033c0:	6013      	str	r3, [r2, #0]
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	20000520 	.word	0x20000520
 80033d0:	2000001c 	.word	0x2000001c

080033d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return uwTick;
 80033d8:	4b03      	ldr	r3, [pc, #12]	@ (80033e8 <HAL_GetTick+0x14>)
 80033da:	681b      	ldr	r3, [r3, #0]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000520 	.word	0x20000520

080033ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033f4:	f7ff ffee 	bl	80033d4 <HAL_GetTick>
 80033f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d004      	beq.n	8003410 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003406:	4b09      	ldr	r3, [pc, #36]	@ (800342c <HAL_Delay+0x40>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003410:	bf00      	nop
 8003412:	f7ff ffdf 	bl	80033d4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	429a      	cmp	r2, r3
 8003420:	d8f7      	bhi.n	8003412 <HAL_Delay+0x26>
  {
  }
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	2000001c 	.word	0x2000001c

08003430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	609a      	str	r2, [r3, #8]
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3360      	adds	r3, #96	@ 0x60
 80034aa:	461a      	mov	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <LL_ADC_SetOffset+0x44>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	03fff000 	.word	0x03fff000

080034e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3360      	adds	r3, #96	@ 0x60
 80034ee:	461a      	mov	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3360      	adds	r3, #96	@ 0x60
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	431a      	orrs	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003542:	b480      	push	{r7}
 8003544:	b087      	sub	sp, #28
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3360      	adds	r3, #96	@ 0x60
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	431a      	orrs	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3360      	adds	r3, #96	@ 0x60
 8003588:	461a      	mov	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	431a      	orrs	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	615a      	str	r2, [r3, #20]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b087      	sub	sp, #28
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3330      	adds	r3, #48	@ 0x30
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	4413      	add	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	211f      	movs	r1, #31
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	401a      	ands	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	f003 011f 	and.w	r1, r3, #31
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	431a      	orrs	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003652:	b480      	push	{r7}
 8003654:	b087      	sub	sp, #28
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3314      	adds	r3, #20
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	0e5b      	lsrs	r3, r3, #25
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	4413      	add	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	0d1b      	lsrs	r3, r3, #20
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2107      	movs	r1, #7
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	401a      	ands	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	0d1b      	lsrs	r3, r3, #20
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	431a      	orrs	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c0:	43db      	mvns	r3, r3
 80036c2:	401a      	ands	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f003 0318 	and.w	r3, r3, #24
 80036ca:	4908      	ldr	r1, [pc, #32]	@ (80036ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80036cc:	40d9      	lsrs	r1, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	400b      	ands	r3, r1
 80036d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	0007ffff 	.word	0x0007ffff

080036f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 031f 	and.w	r3, r3, #31
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800371c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6093      	str	r3, [r2, #8]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003744:	d101      	bne.n	800374a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003768:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800376c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003794:	d101      	bne.n	800379a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037e4:	f043 0202 	orr.w	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <LL_ADC_IsEnabled+0x18>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <LL_ADC_IsEnabled+0x1a>
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	d101      	bne.n	8003836 <LL_ADC_IsDisableOngoing+0x18>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <LL_ADC_IsDisableOngoing+0x1a>
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003854:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003858:	f043 0204 	orr.w	r2, r3, #4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d101      	bne.n	8003884 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d101      	bne.n	80038aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1a9      	b.n	8003c26 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fa8d 	bl	8002e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff19 	bl	8003730 <LL_ADC_IsDeepPowerDownEnabled>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff feff 	bl	800370c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff34 	bl	8003780 <LL_ADC_IsInternalRegulatorEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d115      	bne.n	800394a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff ff18 	bl	8003758 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003928:	4b9c      	ldr	r3, [pc, #624]	@ (8003b9c <HAL_ADC_Init+0x2e4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	4a9c      	ldr	r2, [pc, #624]	@ (8003ba0 <HAL_ADC_Init+0x2e8>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	3301      	adds	r3, #1
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800393c:	e002      	b.n	8003944 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b01      	subs	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f9      	bne.n	800393e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff16 	bl	8003780 <LL_ADC_IsInternalRegulatorEnabled>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395e:	f043 0210 	orr.w	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff76 	bl	800386c <LL_ADC_REG_IsConversionOngoing>
 8003980:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 8142 	bne.w	8003c14 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 813e 	bne.w	8003c14 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80039a0:	f043 0202 	orr.w	r2, r3, #2
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff23 	bl	80037f8 <LL_ADC_IsEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d141      	bne.n	8003a3c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c0:	d004      	beq.n	80039cc <HAL_ADC_Init+0x114>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a77      	ldr	r2, [pc, #476]	@ (8003ba4 <HAL_ADC_Init+0x2ec>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10f      	bne.n	80039ec <HAL_ADC_Init+0x134>
 80039cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039d0:	f7ff ff12 	bl	80037f8 <LL_ADC_IsEnabled>
 80039d4:	4604      	mov	r4, r0
 80039d6:	4873      	ldr	r0, [pc, #460]	@ (8003ba4 <HAL_ADC_Init+0x2ec>)
 80039d8:	f7ff ff0e 	bl	80037f8 <LL_ADC_IsEnabled>
 80039dc:	4603      	mov	r3, r0
 80039de:	4323      	orrs	r3, r4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e012      	b.n	8003a12 <HAL_ADC_Init+0x15a>
 80039ec:	486e      	ldr	r0, [pc, #440]	@ (8003ba8 <HAL_ADC_Init+0x2f0>)
 80039ee:	f7ff ff03 	bl	80037f8 <LL_ADC_IsEnabled>
 80039f2:	4604      	mov	r4, r0
 80039f4:	486d      	ldr	r0, [pc, #436]	@ (8003bac <HAL_ADC_Init+0x2f4>)
 80039f6:	f7ff feff 	bl	80037f8 <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	431c      	orrs	r4, r3
 80039fe:	486c      	ldr	r0, [pc, #432]	@ (8003bb0 <HAL_ADC_Init+0x2f8>)
 8003a00:	f7ff fefa 	bl	80037f8 <LL_ADC_IsEnabled>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4323      	orrs	r3, r4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a1e:	d004      	beq.n	8003a2a <HAL_ADC_Init+0x172>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5f      	ldr	r2, [pc, #380]	@ (8003ba4 <HAL_ADC_Init+0x2ec>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_Init+0x176>
 8003a2a:	4a62      	ldr	r2, [pc, #392]	@ (8003bb4 <HAL_ADC_Init+0x2fc>)
 8003a2c:	e000      	b.n	8003a30 <HAL_ADC_Init+0x178>
 8003a2e:	4a62      	ldr	r2, [pc, #392]	@ (8003bb8 <HAL_ADC_Init+0x300>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f7ff fcfa 	bl	8003430 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	7f5b      	ldrb	r3, [r3, #29]
 8003a40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003a4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003a52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d106      	bne.n	8003a78 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	045b      	lsls	r3, r3, #17
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	4b48      	ldr	r3, [pc, #288]	@ (8003bbc <HAL_ADC_Init+0x304>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	69b9      	ldr	r1, [r7, #24]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fee5 	bl	8003892 <LL_ADC_INJ_IsConversionOngoing>
 8003ac8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d17f      	bne.n	8003bd0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d17c      	bne.n	8003bd0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ada:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ae2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003af2:	f023 0302 	bic.w	r3, r3, #2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	69b9      	ldr	r1, [r7, #24]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d017      	beq.n	8003b38 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b20:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6911      	ldr	r1, [r2, #16]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003b36:	e013      	b.n	8003b60 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b5c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d12a      	bne.n	8003bc0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b80:	4311      	orrs	r1, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003b86:	4311      	orrs	r1, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	611a      	str	r2, [r3, #16]
 8003b9a:	e019      	b.n	8003bd0 <HAL_ADC_Init+0x318>
 8003b9c:	20000014 	.word	0x20000014
 8003ba0:	053e2d63 	.word	0x053e2d63
 8003ba4:	50000100 	.word	0x50000100
 8003ba8:	50000400 	.word	0x50000400
 8003bac:	50000500 	.word	0x50000500
 8003bb0:	50000600 	.word	0x50000600
 8003bb4:	50000300 	.word	0x50000300
 8003bb8:	50000700 	.word	0x50000700
 8003bbc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d10c      	bne.n	8003bf2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bde:	f023 010f 	bic.w	r1, r3, #15
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	1e5a      	subs	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bf0:	e007      	b.n	8003c02 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 020f 	bic.w	r2, r2, #15
 8003c00:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c12:	e007      	b.n	8003c24 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c18:	f043 0210 	orr.w	r2, r3, #16
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	@ 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	bf00      	nop

08003c30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c44:	d004      	beq.n	8003c50 <HAL_ADC_Start_DMA+0x20>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a5a      	ldr	r2, [pc, #360]	@ (8003db4 <HAL_ADC_Start_DMA+0x184>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_ADC_Start_DMA+0x24>
 8003c50:	4b59      	ldr	r3, [pc, #356]	@ (8003db8 <HAL_ADC_Start_DMA+0x188>)
 8003c52:	e000      	b.n	8003c56 <HAL_ADC_Start_DMA+0x26>
 8003c54:	4b59      	ldr	r3, [pc, #356]	@ (8003dbc <HAL_ADC_Start_DMA+0x18c>)
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fd4a 	bl	80036f0 <LL_ADC_GetMultimode>
 8003c5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fe02 	bl	800386c <LL_ADC_REG_IsConversionOngoing>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 809b 	bne.w	8003da6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_Start_DMA+0x4e>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e096      	b.n	8003dac <HAL_ADC_Start_DMA+0x17c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a4d      	ldr	r2, [pc, #308]	@ (8003dc0 <HAL_ADC_Start_DMA+0x190>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d008      	beq.n	8003ca2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d002      	beq.n	8003ca2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b09      	cmp	r3, #9
 8003ca0:	d17a      	bne.n	8003d98 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fcf6 	bl	8004694 <ADC_Enable>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d16d      	bne.n	8003d8e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3a      	ldr	r2, [pc, #232]	@ (8003db4 <HAL_ADC_Start_DMA+0x184>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_ADC_Start_DMA+0xb4>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8003dc4 <HAL_ADC_Start_DMA+0x194>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d002      	beq.n	8003ce0 <HAL_ADC_Start_DMA+0xb0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	e003      	b.n	8003ce8 <HAL_ADC_Start_DMA+0xb8>
 8003ce0:	4b39      	ldr	r3, [pc, #228]	@ (8003dc8 <HAL_ADC_Start_DMA+0x198>)
 8003ce2:	e001      	b.n	8003ce8 <HAL_ADC_Start_DMA+0xb8>
 8003ce4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d002      	beq.n	8003cf6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d12:	f023 0206 	bic.w	r2, r3, #6
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d1a:	e002      	b.n	8003d22 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	4a29      	ldr	r2, [pc, #164]	@ (8003dcc <HAL_ADC_Start_DMA+0x19c>)
 8003d28:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2e:	4a28      	ldr	r2, [pc, #160]	@ (8003dd0 <HAL_ADC_Start_DMA+0x1a0>)
 8003d30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	4a27      	ldr	r2, [pc, #156]	@ (8003dd4 <HAL_ADC_Start_DMA+0x1a4>)
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	221c      	movs	r2, #28
 8003d40:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0210 	orr.w	r2, r2, #16
 8003d58:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0201 	orr.w	r2, r2, #1
 8003d68:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3340      	adds	r3, #64	@ 0x40
 8003d74:	4619      	mov	r1, r3
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f001 f989 	bl	8005090 <HAL_DMA_Start_IT>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fd5c 	bl	8003844 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d8c:	e00d      	b.n	8003daa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003d96:	e008      	b.n	8003daa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003da4:	e001      	b.n	8003daa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
 8003da8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	50000100 	.word	0x50000100
 8003db8:	50000300 	.word	0x50000300
 8003dbc:	50000700 	.word	0x50000700
 8003dc0:	50000600 	.word	0x50000600
 8003dc4:	50000500 	.word	0x50000500
 8003dc8:	50000400 	.word	0x50000400
 8003dcc:	0800487f 	.word	0x0800487f
 8003dd0:	08004957 	.word	0x08004957
 8003dd4:	08004973 	.word	0x08004973

08003dd8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b0b6      	sub	sp, #216	@ 0xd8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x24>
 8003e32:	2302      	movs	r3, #2
 8003e34:	f000 bc13 	b.w	800465e <HAL_ADC_ConfigChannel+0x84a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fd11 	bl	800386c <LL_ADC_REG_IsConversionOngoing>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 83f3 	bne.w	8004638 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f7ff fbcb 	bl	80035fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fcff 	bl	800386c <LL_ADC_REG_IsConversionOngoing>
 8003e6e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fd0b 	bl	8003892 <LL_ADC_INJ_IsConversionOngoing>
 8003e7c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 81d9 	bne.w	800423c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f040 81d4 	bne.w	800423c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e9c:	d10f      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f7ff fbd2 	bl	8003652 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fb79 	bl	80035ae <LL_ADC_SetSamplingTimeCommonConfig>
 8003ebc:	e00e      	b.n	8003edc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6819      	ldr	r1, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f7ff fbc1 	bl	8003652 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fb69 	bl	80035ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	08db      	lsrs	r3, r3, #3
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d022      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6919      	ldr	r1, [r3, #16]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f0e:	f7ff fac3 	bl	8003498 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6919      	ldr	r1, [r3, #16]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7ff fb0f 	bl	8003542 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d102      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x126>
 8003f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f38:	e000      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x128>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f7ff fb1b 	bl	8003578 <LL_ADC_SetOffsetSaturation>
 8003f42:	e17b      	b.n	800423c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fac8 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x15c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fabd 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 8003f66:	4603      	mov	r3, r0
 8003f68:	0e9b      	lsrs	r3, r3, #26
 8003f6a:	f003 021f 	and.w	r2, r3, #31
 8003f6e:	e01e      	b.n	8003fae <HAL_ADC_ConfigChannel+0x19a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fab2 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	e004      	b.n	8003fac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x1b2>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	0e9b      	lsrs	r3, r3, #26
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	e018      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x1e4>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003fea:	2320      	movs	r3, #32
 8003fec:	e004      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003fee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d106      	bne.n	800400a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2200      	movs	r2, #0
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fa81 	bl	800350c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fa65 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 8004016:	4603      	mov	r3, r0
 8004018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x222>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fa5a 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 800402c:	4603      	mov	r3, r0
 800402e:	0e9b      	lsrs	r3, r3, #26
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	e01e      	b.n	8004074 <HAL_ADC_ConfigChannel+0x260>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fa4f 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 8004042:	4603      	mov	r3, r0
 8004044:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800404c:	fa93 f3a3 	rbit	r3, r3
 8004050:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004054:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800405c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	e004      	b.n	8004072 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_ADC_ConfigChannel+0x278>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0e9b      	lsrs	r3, r3, #26
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	e018      	b.n	80040be <HAL_ADC_ConfigChannel+0x2aa>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80040a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80040a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80040b0:	2320      	movs	r3, #32
 80040b2:	e004      	b.n	80040be <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80040b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040be:	429a      	cmp	r2, r3
 80040c0:	d106      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2200      	movs	r2, #0
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fa1e 	bl	800350c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2102      	movs	r1, #2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fa02 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x2e8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2102      	movs	r1, #2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff f9f7 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 80040f2:	4603      	mov	r3, r0
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	f003 021f 	and.w	r2, r3, #31
 80040fa:	e01e      	b.n	800413a <HAL_ADC_ConfigChannel+0x326>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff f9ec 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 8004108:	4603      	mov	r3, r0
 800410a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800411a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800411e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004122:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800412a:	2320      	movs	r3, #32
 800412c:	e004      	b.n	8004138 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800412e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x33e>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	0e9b      	lsrs	r3, r3, #26
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	e016      	b.n	8004180 <HAL_ADC_ConfigChannel+0x36c>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004164:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004166:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800416a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004172:	2320      	movs	r3, #32
 8004174:	e004      	b.n	8004180 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004176:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004180:	429a      	cmp	r2, r3
 8004182:	d106      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2200      	movs	r2, #0
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff f9bd 	bl	800350c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2103      	movs	r1, #3
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff f9a1 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 800419e:	4603      	mov	r3, r0
 80041a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <HAL_ADC_ConfigChannel+0x3aa>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2103      	movs	r1, #3
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff f996 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 80041b4:	4603      	mov	r3, r0
 80041b6:	0e9b      	lsrs	r3, r3, #26
 80041b8:	f003 021f 	and.w	r2, r3, #31
 80041bc:	e017      	b.n	80041ee <HAL_ADC_ConfigChannel+0x3da>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2103      	movs	r1, #3
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff f98b 	bl	80034e0 <LL_ADC_GetOffsetChannel>
 80041ca:	4603      	mov	r3, r0
 80041cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80041d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041d8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80041da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80041e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x3f2>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	0e9b      	lsrs	r3, r3, #26
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	e011      	b.n	800422a <HAL_ADC_ConfigChannel+0x416>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004216:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800421e:	2320      	movs	r3, #32
 8004220:	e003      	b.n	800422a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004224:	fab3 f383 	clz	r3, r3
 8004228:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800422a:	429a      	cmp	r2, r3
 800422c:	d106      	bne.n	800423c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2200      	movs	r2, #0
 8004234:	2103      	movs	r1, #3
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f968 	bl	800350c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fad9 	bl	80037f8 <LL_ADC_IsEnabled>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 813d 	bne.w	80044c8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	461a      	mov	r2, r3
 800425c:	f7ff fa24 	bl	80036a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4aa2      	ldr	r2, [pc, #648]	@ (80044f0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	f040 812e 	bne.w	80044c8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x480>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	3301      	adds	r3, #1
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2b09      	cmp	r3, #9
 800428a:	bf94      	ite	ls
 800428c:	2301      	movls	r3, #1
 800428e:	2300      	movhi	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e019      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x4b4>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80042a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042a4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80042a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80042b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2b09      	cmp	r3, #9
 80042c0:	bf94      	ite	ls
 80042c2:	2301      	movls	r3, #1
 80042c4:	2300      	movhi	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d079      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x4d4>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	3301      	adds	r3, #1
 80042e0:	069b      	lsls	r3, r3, #26
 80042e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042e6:	e015      	b.n	8004314 <HAL_ADC_ConfigChannel+0x500>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042f0:	fa93 f3a3 	rbit	r3, r3
 80042f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80042f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80042fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004300:	2320      	movs	r3, #32
 8004302:	e003      	b.n	800430c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3301      	adds	r3, #1
 800430e:	069b      	lsls	r3, r3, #26
 8004310:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x520>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0e9b      	lsrs	r3, r3, #26
 8004326:	3301      	adds	r3, #1
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	e017      	b.n	8004364 <HAL_ADC_ConfigChannel+0x550>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004344:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800434c:	2320      	movs	r3, #32
 800434e:	e003      	b.n	8004358 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3301      	adds	r3, #1
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	ea42 0103 	orr.w	r1, r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <HAL_ADC_ConfigChannel+0x576>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	0e9b      	lsrs	r3, r3, #26
 800437a:	3301      	adds	r3, #1
 800437c:	f003 021f 	and.w	r2, r3, #31
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	051b      	lsls	r3, r3, #20
 8004388:	e018      	b.n	80043bc <HAL_ADC_ConfigChannel+0x5a8>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800439c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80043a2:	2320      	movs	r3, #32
 80043a4:	e003      	b.n	80043ae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80043a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a8:	fab3 f383 	clz	r3, r3
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f003 021f 	and.w	r2, r3, #31
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043bc:	430b      	orrs	r3, r1
 80043be:	e07e      	b.n	80044be <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x5c8>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	3301      	adds	r3, #1
 80043d4:	069b      	lsls	r3, r3, #26
 80043d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043da:	e015      	b.n	8004408 <HAL_ADC_ConfigChannel+0x5f4>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80043ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e003      	b.n	8004400 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3301      	adds	r3, #1
 8004402:	069b      	lsls	r3, r3, #26
 8004404:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x614>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	3301      	adds	r3, #1
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2101      	movs	r1, #1
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	e017      	b.n	8004458 <HAL_ADC_ConfigChannel+0x644>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	61fb      	str	r3, [r7, #28]
  return result;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e003      	b.n	800444c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2101      	movs	r1, #1
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	ea42 0103 	orr.w	r1, r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x670>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0e9b      	lsrs	r3, r3, #26
 800446e:	3301      	adds	r3, #1
 8004470:	f003 021f 	and.w	r2, r3, #31
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	3b1e      	subs	r3, #30
 800447c:	051b      	lsls	r3, r3, #20
 800447e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004482:	e01b      	b.n	80044bc <HAL_ADC_ConfigChannel+0x6a8>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	613b      	str	r3, [r7, #16]
  return result;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800449c:	2320      	movs	r3, #32
 800449e:	e003      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	3301      	adds	r3, #1
 80044aa:	f003 021f 	and.w	r2, r3, #31
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	3b1e      	subs	r3, #30
 80044b6:	051b      	lsls	r3, r3, #20
 80044b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044bc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044c2:	4619      	mov	r1, r3
 80044c4:	f7ff f8c5 	bl	8003652 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <HAL_ADC_ConfigChannel+0x6e0>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80be 	beq.w	8004652 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044de:	d004      	beq.n	80044ea <HAL_ADC_ConfigChannel+0x6d6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <HAL_ADC_ConfigChannel+0x6e4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10a      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x6ec>
 80044ea:	4b04      	ldr	r3, [pc, #16]	@ (80044fc <HAL_ADC_ConfigChannel+0x6e8>)
 80044ec:	e009      	b.n	8004502 <HAL_ADC_ConfigChannel+0x6ee>
 80044ee:	bf00      	nop
 80044f0:	407f0000 	.word	0x407f0000
 80044f4:	80080000 	.word	0x80080000
 80044f8:	50000100 	.word	0x50000100
 80044fc:	50000300 	.word	0x50000300
 8004500:	4b59      	ldr	r3, [pc, #356]	@ (8004668 <HAL_ADC_ConfigChannel+0x854>)
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe ffba 	bl	800347c <LL_ADC_GetCommonPathInternalCh>
 8004508:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a56      	ldr	r2, [pc, #344]	@ (800466c <HAL_ADC_ConfigChannel+0x858>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_ADC_ConfigChannel+0x70c>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a55      	ldr	r2, [pc, #340]	@ (8004670 <HAL_ADC_ConfigChannel+0x85c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d13a      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004524:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d134      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004534:	d005      	beq.n	8004542 <HAL_ADC_ConfigChannel+0x72e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a4e      	ldr	r2, [pc, #312]	@ (8004674 <HAL_ADC_ConfigChannel+0x860>)
 800453c:	4293      	cmp	r3, r2
 800453e:	f040 8085 	bne.w	800464c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800454a:	d004      	beq.n	8004556 <HAL_ADC_ConfigChannel+0x742>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a49      	ldr	r2, [pc, #292]	@ (8004678 <HAL_ADC_ConfigChannel+0x864>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_ADC_ConfigChannel+0x746>
 8004556:	4a49      	ldr	r2, [pc, #292]	@ (800467c <HAL_ADC_ConfigChannel+0x868>)
 8004558:	e000      	b.n	800455c <HAL_ADC_ConfigChannel+0x748>
 800455a:	4a43      	ldr	r2, [pc, #268]	@ (8004668 <HAL_ADC_ConfigChannel+0x854>)
 800455c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004560:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f7fe ff75 	bl	8003456 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800456c:	4b44      	ldr	r3, [pc, #272]	@ (8004680 <HAL_ADC_ConfigChannel+0x86c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	4a44      	ldr	r2, [pc, #272]	@ (8004684 <HAL_ADC_ConfigChannel+0x870>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	099b      	lsrs	r3, r3, #6
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	4613      	mov	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004586:	e002      	b.n	800458e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3b01      	subs	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f9      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004594:	e05a      	b.n	800464c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a3b      	ldr	r2, [pc, #236]	@ (8004688 <HAL_ADC_ConfigChannel+0x874>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d125      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d11f      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a31      	ldr	r2, [pc, #196]	@ (8004678 <HAL_ADC_ConfigChannel+0x864>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d104      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x7ac>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a34      	ldr	r2, [pc, #208]	@ (800468c <HAL_ADC_ConfigChannel+0x878>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d047      	beq.n	8004650 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045c8:	d004      	beq.n	80045d4 <HAL_ADC_ConfigChannel+0x7c0>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004678 <HAL_ADC_ConfigChannel+0x864>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x7c4>
 80045d4:	4a29      	ldr	r2, [pc, #164]	@ (800467c <HAL_ADC_ConfigChannel+0x868>)
 80045d6:	e000      	b.n	80045da <HAL_ADC_ConfigChannel+0x7c6>
 80045d8:	4a23      	ldr	r2, [pc, #140]	@ (8004668 <HAL_ADC_ConfigChannel+0x854>)
 80045da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f7fe ff36 	bl	8003456 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045ea:	e031      	b.n	8004650 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a27      	ldr	r2, [pc, #156]	@ (8004690 <HAL_ADC_ConfigChannel+0x87c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d12d      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d127      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1c      	ldr	r2, [pc, #112]	@ (8004678 <HAL_ADC_ConfigChannel+0x864>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d022      	beq.n	8004652 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004614:	d004      	beq.n	8004620 <HAL_ADC_ConfigChannel+0x80c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a17      	ldr	r2, [pc, #92]	@ (8004678 <HAL_ADC_ConfigChannel+0x864>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x810>
 8004620:	4a16      	ldr	r2, [pc, #88]	@ (800467c <HAL_ADC_ConfigChannel+0x868>)
 8004622:	e000      	b.n	8004626 <HAL_ADC_ConfigChannel+0x812>
 8004624:	4a10      	ldr	r2, [pc, #64]	@ (8004668 <HAL_ADC_ConfigChannel+0x854>)
 8004626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800462a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7fe ff10 	bl	8003456 <LL_ADC_SetCommonPathInternalCh>
 8004636:	e00c      	b.n	8004652 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800464a:	e002      	b.n	8004652 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800464c:	bf00      	nop
 800464e:	e000      	b.n	8004652 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004650:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800465a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800465e:	4618      	mov	r0, r3
 8004660:	37d8      	adds	r7, #216	@ 0xd8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	50000700 	.word	0x50000700
 800466c:	c3210000 	.word	0xc3210000
 8004670:	90c00010 	.word	0x90c00010
 8004674:	50000600 	.word	0x50000600
 8004678:	50000100 	.word	0x50000100
 800467c:	50000300 	.word	0x50000300
 8004680:	20000014 	.word	0x20000014
 8004684:	053e2d63 	.word	0x053e2d63
 8004688:	c7520000 	.word	0xc7520000
 800468c:	50000500 	.word	0x50000500
 8004690:	cb840000 	.word	0xcb840000

08004694 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800469c:	2300      	movs	r3, #0
 800469e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff f8a7 	bl	80037f8 <LL_ADC_IsEnabled>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d176      	bne.n	800479e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	4b3c      	ldr	r3, [pc, #240]	@ (80047a8 <ADC_Enable+0x114>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c2:	f043 0210 	orr.w	r2, r3, #16
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ce:	f043 0201 	orr.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e062      	b.n	80047a0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff f862 	bl	80037a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ec:	d004      	beq.n	80046f8 <ADC_Enable+0x64>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a2e      	ldr	r2, [pc, #184]	@ (80047ac <ADC_Enable+0x118>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <ADC_Enable+0x68>
 80046f8:	4b2d      	ldr	r3, [pc, #180]	@ (80047b0 <ADC_Enable+0x11c>)
 80046fa:	e000      	b.n	80046fe <ADC_Enable+0x6a>
 80046fc:	4b2d      	ldr	r3, [pc, #180]	@ (80047b4 <ADC_Enable+0x120>)
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe febc 	bl	800347c <LL_ADC_GetCommonPathInternalCh>
 8004704:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800470a:	2b00      	cmp	r3, #0
 800470c:	d013      	beq.n	8004736 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800470e:	4b2a      	ldr	r3, [pc, #168]	@ (80047b8 <ADC_Enable+0x124>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	4a29      	ldr	r2, [pc, #164]	@ (80047bc <ADC_Enable+0x128>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	099b      	lsrs	r3, r3, #6
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	4613      	mov	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004728:	e002      	b.n	8004730 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3b01      	subs	r3, #1
 800472e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f9      	bne.n	800472a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004736:	f7fe fe4d 	bl	80033d4 <HAL_GetTick>
 800473a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800473c:	e028      	b.n	8004790 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff f858 	bl	80037f8 <LL_ADC_IsEnabled>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff f828 	bl	80037a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004758:	f7fe fe3c 	bl	80033d4 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d914      	bls.n	8004790 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d00d      	beq.n	8004790 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	f043 0210 	orr.w	r2, r3, #16
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e007      	b.n	80047a0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b01      	cmp	r3, #1
 800479c:	d1cf      	bne.n	800473e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	8000003f 	.word	0x8000003f
 80047ac:	50000100 	.word	0x50000100
 80047b0:	50000300 	.word	0x50000300
 80047b4:	50000700 	.word	0x50000700
 80047b8:	20000014 	.word	0x20000014
 80047bc:	053e2d63 	.word	0x053e2d63

080047c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff f826 	bl	800381e <LL_ADC_IsDisableOngoing>
 80047d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff f80d 	bl	80037f8 <LL_ADC_IsEnabled>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d047      	beq.n	8004874 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d144      	bne.n	8004874 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030d 	and.w	r3, r3, #13
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d10c      	bne.n	8004812 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe ffe7 	bl	80037d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2203      	movs	r2, #3
 8004808:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800480a:	f7fe fde3 	bl	80033d4 <HAL_GetTick>
 800480e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004810:	e029      	b.n	8004866 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004816:	f043 0210 	orr.w	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e023      	b.n	8004876 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800482e:	f7fe fdd1 	bl	80033d4 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d914      	bls.n	8004866 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484e:	f043 0210 	orr.w	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485a:	f043 0201 	orr.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e007      	b.n	8004876 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1dc      	bne.n	800482e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004890:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004894:	2b00      	cmp	r3, #0
 8004896:	d14b      	bne.n	8004930 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d021      	beq.n	80048f6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fe8c 	bl	80035d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d032      	beq.n	8004928 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d12b      	bne.n	8004928 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11f      	bne.n	8004928 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ec:	f043 0201 	orr.w	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048f4:	e018      	b.n	8004928 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d111      	bne.n	8004928 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004908:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004920:	f043 0201 	orr.w	r2, r3, #1
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7ff fa55 	bl	8003dd8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800492e:	e00e      	b.n	800494e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff fa5f 	bl	8003e00 <HAL_ADC_ErrorCallback>
}
 8004942:	e004      	b.n	800494e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004962:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7ff fa41 	bl	8003dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004984:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004990:	f043 0204 	orr.w	r2, r3, #4
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fa31 	bl	8003e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <LL_ADC_IsEnabled>:
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <LL_ADC_IsEnabled+0x18>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <LL_ADC_IsEnabled+0x1a>
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_ADC_StartCalibration>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80049de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	609a      	str	r2, [r3, #8]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_ADC_IsCalibrationOnGoing>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a12:	d101      	bne.n	8004a18 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_ADC_REG_IsConversionOngoing>:
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d101      	bne.n	8004a3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_ADCEx_Calibration_Start+0x1c>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e04d      	b.n	8004b04 <HAL_ADCEx_Calibration_Start+0xb8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fea5 	bl	80047c0 <ADC_Disable>
 8004a76:	4603      	mov	r3, r0
 8004a78:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d136      	bne.n	8004aee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a84:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a88:	f023 0302 	bic.w	r3, r3, #2
 8004a8c:	f043 0202 	orr.w	r2, r3, #2
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff ff96 	bl	80049cc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004aa0:	e014      	b.n	8004acc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d90d      	bls.n	8004acc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab4:	f023 0312 	bic.w	r3, r3, #18
 8004ab8:	f043 0210 	orr.w	r2, r3, #16
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e01b      	b.n	8004b04 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ff94 	bl	80049fe <LL_ADC_IsCalibrationOnGoing>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e2      	bne.n	8004aa2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae0:	f023 0303 	bic.w	r3, r3, #3
 8004ae4:	f043 0201 	orr.w	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004aec:	e005      	b.n	8004afa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af2:	f043 0210 	orr.w	r2, r3, #16
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	0004de01 	.word	0x0004de01

08004b10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b0a1      	sub	sp, #132	@ 0x84
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e0e7      	b.n	8004cfe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b36:	2300      	movs	r3, #0
 8004b38:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b46:	d102      	bne.n	8004b4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b48:	4b6f      	ldr	r3, [pc, #444]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	e009      	b.n	8004b62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a6e      	ldr	r2, [pc, #440]	@ (8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d102      	bne.n	8004b5e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004b58:	4b6d      	ldr	r3, [pc, #436]	@ (8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	e001      	b.n	8004b62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10b      	bne.n	8004b80 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0be      	b.n	8004cfe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff ff4f 	bl	8004a26 <LL_ADC_REG_IsConversionOngoing>
 8004b88:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff49 	bl	8004a26 <LL_ADC_REG_IsConversionOngoing>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 80a0 	bne.w	8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004b9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f040 809c 	bne.w	8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bac:	d004      	beq.n	8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a55      	ldr	r2, [pc, #340]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004bb8:	4b56      	ldr	r3, [pc, #344]	@ (8004d14 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004bba:	e000      	b.n	8004bbe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004bbc:	4b56      	ldr	r3, [pc, #344]	@ (8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004bbe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d04b      	beq.n	8004c60 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004bc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	6859      	ldr	r1, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004bda:	035b      	lsls	r3, r3, #13
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	431a      	orrs	r2, r3
 8004be0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004be2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bec:	d004      	beq.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a45      	ldr	r2, [pc, #276]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10f      	bne.n	8004c18 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004bf8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004bfc:	f7ff fed3 	bl	80049a6 <LL_ADC_IsEnabled>
 8004c00:	4604      	mov	r4, r0
 8004c02:	4841      	ldr	r0, [pc, #260]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c04:	f7ff fecf 	bl	80049a6 <LL_ADC_IsEnabled>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4323      	orrs	r3, r4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e012      	b.n	8004c3e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004c18:	483c      	ldr	r0, [pc, #240]	@ (8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c1a:	f7ff fec4 	bl	80049a6 <LL_ADC_IsEnabled>
 8004c1e:	4604      	mov	r4, r0
 8004c20:	483b      	ldr	r0, [pc, #236]	@ (8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c22:	f7ff fec0 	bl	80049a6 <LL_ADC_IsEnabled>
 8004c26:	4603      	mov	r3, r0
 8004c28:	431c      	orrs	r4, r3
 8004c2a:	483c      	ldr	r0, [pc, #240]	@ (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c2c:	f7ff febb 	bl	80049a6 <LL_ADC_IsEnabled>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4323      	orrs	r3, r4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d056      	beq.n	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c4a:	f023 030f 	bic.w	r3, r3, #15
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	6811      	ldr	r1, [r2, #0]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	6892      	ldr	r2, [r2, #8]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c5c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c5e:	e047      	b.n	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c74:	d004      	beq.n	8004c80 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a23      	ldr	r2, [pc, #140]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004c80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c84:	f7ff fe8f 	bl	80049a6 <LL_ADC_IsEnabled>
 8004c88:	4604      	mov	r4, r0
 8004c8a:	481f      	ldr	r0, [pc, #124]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c8c:	f7ff fe8b 	bl	80049a6 <LL_ADC_IsEnabled>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4323      	orrs	r3, r4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e012      	b.n	8004cc6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004ca0:	481a      	ldr	r0, [pc, #104]	@ (8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ca2:	f7ff fe80 	bl	80049a6 <LL_ADC_IsEnabled>
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4819      	ldr	r0, [pc, #100]	@ (8004d10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004caa:	f7ff fe7c 	bl	80049a6 <LL_ADC_IsEnabled>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	431c      	orrs	r4, r3
 8004cb2:	481a      	ldr	r0, [pc, #104]	@ (8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004cb4:	f7ff fe77 	bl	80049a6 <LL_ADC_IsEnabled>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4323      	orrs	r3, r4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d012      	beq.n	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cd2:	f023 030f 	bic.w	r3, r3, #15
 8004cd6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004cd8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cda:	e009      	b.n	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce0:	f043 0220 	orr.w	r2, r3, #32
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004cee:	e000      	b.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004cfa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3784      	adds	r7, #132	@ 0x84
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd90      	pop	{r4, r7, pc}
 8004d06:	bf00      	nop
 8004d08:	50000100 	.word	0x50000100
 8004d0c:	50000400 	.word	0x50000400
 8004d10:	50000500 	.word	0x50000500
 8004d14:	50000300 	.word	0x50000300
 8004d18:	50000700 	.word	0x50000700
 8004d1c:	50000600 	.word	0x50000600

08004d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d30:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <__NVIC_SetPriorityGrouping+0x44>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d52:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <__NVIC_SetPriorityGrouping+0x44>)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	60d3      	str	r3, [r2, #12]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	e000ed00 	.word	0xe000ed00

08004d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d6c:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <__NVIC_GetPriorityGrouping+0x18>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	0a1b      	lsrs	r3, r3, #8
 8004d72:	f003 0307 	and.w	r3, r3, #7
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	e000ed00 	.word	0xe000ed00

08004d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	db0b      	blt.n	8004dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	f003 021f 	and.w	r2, r3, #31
 8004d9c:	4907      	ldr	r1, [pc, #28]	@ (8004dbc <__NVIC_EnableIRQ+0x38>)
 8004d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	2001      	movs	r0, #1
 8004da6:	fa00 f202 	lsl.w	r2, r0, r2
 8004daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	e000e100 	.word	0xe000e100

08004dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	6039      	str	r1, [r7, #0]
 8004dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	db0a      	blt.n	8004dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	490c      	ldr	r1, [pc, #48]	@ (8004e0c <__NVIC_SetPriority+0x4c>)
 8004dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dde:	0112      	lsls	r2, r2, #4
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	440b      	add	r3, r1
 8004de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004de8:	e00a      	b.n	8004e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4908      	ldr	r1, [pc, #32]	@ (8004e10 <__NVIC_SetPriority+0x50>)
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	3b04      	subs	r3, #4
 8004df8:	0112      	lsls	r2, r2, #4
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	761a      	strb	r2, [r3, #24]
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	e000e100 	.word	0xe000e100
 8004e10:	e000ed00 	.word	0xe000ed00

08004e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	@ 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f1c3 0307 	rsb	r3, r3, #7
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	bf28      	it	cs
 8004e32:	2304      	movcs	r3, #4
 8004e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d902      	bls.n	8004e44 <NVIC_EncodePriority+0x30>
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3b03      	subs	r3, #3
 8004e42:	e000      	b.n	8004e46 <NVIC_EncodePriority+0x32>
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e48:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43da      	mvns	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	401a      	ands	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	43d9      	mvns	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e6c:	4313      	orrs	r3, r2
         );
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3724      	adds	r7, #36	@ 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e8c:	d301      	bcc.n	8004e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e00f      	b.n	8004eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e92:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <SysTick_Config+0x40>)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e9a:	210f      	movs	r1, #15
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	f7ff ff8e 	bl	8004dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <SysTick_Config+0x40>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eaa:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <SysTick_Config+0x40>)
 8004eac:	2207      	movs	r2, #7
 8004eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	e000e010 	.word	0xe000e010

08004ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff ff29 	bl	8004d20 <__NVIC_SetPriorityGrouping>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	4603      	mov	r3, r0
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ee4:	f7ff ff40 	bl	8004d68 <__NVIC_GetPriorityGrouping>
 8004ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	6978      	ldr	r0, [r7, #20]
 8004ef0:	f7ff ff90 	bl	8004e14 <NVIC_EncodePriority>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efa:	4611      	mov	r1, r2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff ff5f 	bl	8004dc0 <__NVIC_SetPriority>
}
 8004f02:	bf00      	nop
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	4603      	mov	r3, r0
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff33 	bl	8004d84 <__NVIC_EnableIRQ>
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ffa4 	bl	8004e7c <SysTick_Config>
 8004f34:	4603      	mov	r3, r0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e08d      	b.n	800506e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	4b47      	ldr	r3, [pc, #284]	@ (8005078 <HAL_DMA_Init+0x138>)
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d80f      	bhi.n	8004f7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b45      	ldr	r3, [pc, #276]	@ (800507c <HAL_DMA_Init+0x13c>)
 8004f66:	4413      	add	r3, r2
 8004f68:	4a45      	ldr	r2, [pc, #276]	@ (8005080 <HAL_DMA_Init+0x140>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	009a      	lsls	r2, r3, #2
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a42      	ldr	r2, [pc, #264]	@ (8005084 <HAL_DMA_Init+0x144>)
 8004f7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f7c:	e00e      	b.n	8004f9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b40      	ldr	r3, [pc, #256]	@ (8005088 <HAL_DMA_Init+0x148>)
 8004f86:	4413      	add	r3, r2
 8004f88:	4a3d      	ldr	r2, [pc, #244]	@ (8005080 <HAL_DMA_Init+0x140>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	009a      	lsls	r2, r3, #2
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a3c      	ldr	r2, [pc, #240]	@ (800508c <HAL_DMA_Init+0x14c>)
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa76 	bl	80054e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ffc:	d102      	bne.n	8005004 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005018:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d010      	beq.n	8005044 <HAL_DMA_Init+0x104>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d80c      	bhi.n	8005044 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa96 	bl	800555c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	e008      	b.n	8005056 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40020407 	.word	0x40020407
 800507c:	bffdfff8 	.word	0xbffdfff8
 8005080:	cccccccd 	.word	0xcccccccd
 8005084:	40020000 	.word	0x40020000
 8005088:	bffdfbf8 	.word	0xbffdfbf8
 800508c:	40020400 	.word	0x40020400

08005090 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_DMA_Start_IT+0x20>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e066      	b.n	800517e <HAL_DMA_Start_IT+0xee>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d155      	bne.n	8005170 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f9bb 	bl	8005464 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 020e 	orr.w	r2, r2, #14
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e00f      	b.n	8005128 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0204 	bic.w	r2, r2, #4
 8005116:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 020a 	orr.w	r2, r2, #10
 8005126:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005144:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005158:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800515c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e005      	b.n	800517c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005178:	2302      	movs	r3, #2
 800517a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d005      	beq.n	80051aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2204      	movs	r2, #4
 80051a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
 80051a8:	e037      	b.n	800521a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 020e 	bic.w	r2, r2, #14
 80051b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051de:	f003 021f 	and.w	r2, r3, #31
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	2101      	movs	r1, #1
 80051e8:	fa01 f202 	lsl.w	r2, r1, r2
 80051ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00c      	beq.n	800521a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800520e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005218:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d00d      	beq.n	800526c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2204      	movs	r2, #4
 8005254:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
 800526a:	e047      	b.n	80052fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 020e 	bic.w	r2, r2, #14
 800527a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005296:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800529a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a0:	f003 021f 	and.w	r2, r3, #31
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	2101      	movs	r1, #1
 80052aa:	fa01 f202 	lsl.w	r2, r1, r2
 80052ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
    }
  }
  return status;
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2204      	movs	r2, #4
 8005328:	409a      	lsls	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d026      	beq.n	8005380 <HAL_DMA_IRQHandler+0x7a>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d021      	beq.n	8005380 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d107      	bne.n	800535a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0204 	bic.w	r2, r2, #4
 8005358:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f003 021f 	and.w	r2, r3, #31
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	2104      	movs	r1, #4
 8005368:	fa01 f202 	lsl.w	r2, r1, r2
 800536c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	2b00      	cmp	r3, #0
 8005374:	d071      	beq.n	800545a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800537e:	e06c      	b.n	800545a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	2202      	movs	r2, #2
 800538a:	409a      	lsls	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d02e      	beq.n	80053f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d029      	beq.n	80053f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 020a 	bic.w	r2, r2, #10
 80053ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c8:	f003 021f 	and.w	r2, r3, #31
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	2102      	movs	r1, #2
 80053d2:	fa01 f202 	lsl.w	r2, r1, r2
 80053d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d038      	beq.n	800545a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80053f0:	e033      	b.n	800545a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2208      	movs	r2, #8
 80053fc:	409a      	lsls	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d02a      	beq.n	800545c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d025      	beq.n	800545c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 020e 	bic.w	r2, r2, #14
 800541e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005424:	f003 021f 	and.w	r2, r3, #31
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542c:	2101      	movs	r1, #1
 800542e:	fa01 f202 	lsl.w	r2, r1, r2
 8005432:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800545a:	bf00      	nop
 800545c:	bf00      	nop
}
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800547a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800548c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	f003 021f 	and.w	r2, r3, #31
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	2101      	movs	r1, #1
 800549c:	fa01 f202 	lsl.w	r2, r1, r2
 80054a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d108      	bne.n	80054c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054c2:	e007      	b.n	80054d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b16      	ldr	r3, [pc, #88]	@ (8005548 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d802      	bhi.n	80054fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80054f4:	4b15      	ldr	r3, [pc, #84]	@ (800554c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	e001      	b.n	80054fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80054fa:	4b15      	ldr	r3, [pc, #84]	@ (8005550 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80054fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	3b08      	subs	r3, #8
 800550a:	4a12      	ldr	r2, [pc, #72]	@ (8005554 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005518:	089b      	lsrs	r3, r3, #2
 800551a:	009a      	lsls	r2, r3, #2
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	461a      	mov	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a0b      	ldr	r2, [pc, #44]	@ (8005558 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800552a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	2201      	movs	r2, #1
 8005534:	409a      	lsls	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40020407 	.word	0x40020407
 800554c:	40020800 	.word	0x40020800
 8005550:	40020820 	.word	0x40020820
 8005554:	cccccccd 	.word	0xcccccccd
 8005558:	40020880 	.word	0x40020880

0800555c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	461a      	mov	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a08      	ldr	r2, [pc, #32]	@ (80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800557e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b01      	subs	r3, #1
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2201      	movs	r2, #1
 800558a:	409a      	lsls	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	1000823f 	.word	0x1000823f
 80055a0:	40020940 	.word	0x40020940

080055a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055b2:	e15a      	b.n	800586a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	2101      	movs	r1, #1
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	fa01 f303 	lsl.w	r3, r1, r3
 80055c0:	4013      	ands	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 814c 	beq.w	8005864 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d005      	beq.n	80055e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d130      	bne.n	8005646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	2203      	movs	r2, #3
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	43db      	mvns	r3, r3
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4013      	ands	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800561a:	2201      	movs	r2, #1
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4013      	ands	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	091b      	lsrs	r3, r3, #4
 8005630:	f003 0201 	and.w	r2, r3, #1
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b03      	cmp	r3, #3
 8005650:	d017      	beq.n	8005682 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	2203      	movs	r2, #3
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d123      	bne.n	80056d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	08da      	lsrs	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3208      	adds	r2, #8
 8005696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	220f      	movs	r2, #15
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	43db      	mvns	r3, r3
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4013      	ands	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	08da      	lsrs	r2, r3, #3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3208      	adds	r2, #8
 80056d0:	6939      	ldr	r1, [r7, #16]
 80056d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	2203      	movs	r2, #3
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	43db      	mvns	r3, r3
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4013      	ands	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f003 0203 	and.w	r2, r3, #3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80a6 	beq.w	8005864 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005718:	4b5b      	ldr	r3, [pc, #364]	@ (8005888 <HAL_GPIO_Init+0x2e4>)
 800571a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571c:	4a5a      	ldr	r2, [pc, #360]	@ (8005888 <HAL_GPIO_Init+0x2e4>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6613      	str	r3, [r2, #96]	@ 0x60
 8005724:	4b58      	ldr	r3, [pc, #352]	@ (8005888 <HAL_GPIO_Init+0x2e4>)
 8005726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005730:	4a56      	ldr	r2, [pc, #344]	@ (800588c <HAL_GPIO_Init+0x2e8>)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	089b      	lsrs	r3, r3, #2
 8005736:	3302      	adds	r3, #2
 8005738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	220f      	movs	r2, #15
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43db      	mvns	r3, r3
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4013      	ands	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800575a:	d01f      	beq.n	800579c <HAL_GPIO_Init+0x1f8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a4c      	ldr	r2, [pc, #304]	@ (8005890 <HAL_GPIO_Init+0x2ec>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d019      	beq.n	8005798 <HAL_GPIO_Init+0x1f4>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a4b      	ldr	r2, [pc, #300]	@ (8005894 <HAL_GPIO_Init+0x2f0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d013      	beq.n	8005794 <HAL_GPIO_Init+0x1f0>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a4a      	ldr	r2, [pc, #296]	@ (8005898 <HAL_GPIO_Init+0x2f4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00d      	beq.n	8005790 <HAL_GPIO_Init+0x1ec>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a49      	ldr	r2, [pc, #292]	@ (800589c <HAL_GPIO_Init+0x2f8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <HAL_GPIO_Init+0x1e8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a48      	ldr	r2, [pc, #288]	@ (80058a0 <HAL_GPIO_Init+0x2fc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d101      	bne.n	8005788 <HAL_GPIO_Init+0x1e4>
 8005784:	2305      	movs	r3, #5
 8005786:	e00a      	b.n	800579e <HAL_GPIO_Init+0x1fa>
 8005788:	2306      	movs	r3, #6
 800578a:	e008      	b.n	800579e <HAL_GPIO_Init+0x1fa>
 800578c:	2304      	movs	r3, #4
 800578e:	e006      	b.n	800579e <HAL_GPIO_Init+0x1fa>
 8005790:	2303      	movs	r3, #3
 8005792:	e004      	b.n	800579e <HAL_GPIO_Init+0x1fa>
 8005794:	2302      	movs	r3, #2
 8005796:	e002      	b.n	800579e <HAL_GPIO_Init+0x1fa>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_GPIO_Init+0x1fa>
 800579c:	2300      	movs	r3, #0
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	f002 0203 	and.w	r2, r2, #3
 80057a4:	0092      	lsls	r2, r2, #2
 80057a6:	4093      	lsls	r3, r2
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057ae:	4937      	ldr	r1, [pc, #220]	@ (800588c <HAL_GPIO_Init+0x2e8>)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	089b      	lsrs	r3, r3, #2
 80057b4:	3302      	adds	r3, #2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057bc:	4b39      	ldr	r3, [pc, #228]	@ (80058a4 <HAL_GPIO_Init+0x300>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	43db      	mvns	r3, r3
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057e0:	4a30      	ldr	r2, [pc, #192]	@ (80058a4 <HAL_GPIO_Init+0x300>)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057e6:	4b2f      	ldr	r3, [pc, #188]	@ (80058a4 <HAL_GPIO_Init+0x300>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	43db      	mvns	r3, r3
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4013      	ands	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800580a:	4a26      	ldr	r2, [pc, #152]	@ (80058a4 <HAL_GPIO_Init+0x300>)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005810:	4b24      	ldr	r3, [pc, #144]	@ (80058a4 <HAL_GPIO_Init+0x300>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	43db      	mvns	r3, r3
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4013      	ands	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005834:	4a1b      	ldr	r2, [pc, #108]	@ (80058a4 <HAL_GPIO_Init+0x300>)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800583a:	4b1a      	ldr	r3, [pc, #104]	@ (80058a4 <HAL_GPIO_Init+0x300>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	43db      	mvns	r3, r3
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4013      	ands	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800585e:	4a11      	ldr	r2, [pc, #68]	@ (80058a4 <HAL_GPIO_Init+0x300>)
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	3301      	adds	r3, #1
 8005868:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	f47f ae9d 	bne.w	80055b4 <HAL_GPIO_Init+0x10>
  }
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40021000 	.word	0x40021000
 800588c:	40010000 	.word	0x40010000
 8005890:	48000400 	.word	0x48000400
 8005894:	48000800 	.word	0x48000800
 8005898:	48000c00 	.word	0x48000c00
 800589c:	48001000 	.word	0x48001000
 80058a0:	48001400 	.word	0x48001400
 80058a4:	40010400 	.word	0x40010400

080058a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	887b      	ldrh	r3, [r7, #2]
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
 80058c4:	e001      	b.n	80058ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	807b      	strh	r3, [r7, #2]
 80058e4:	4613      	mov	r3, r2
 80058e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058e8:	787b      	ldrb	r3, [r7, #1]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058ee:	887a      	ldrh	r2, [r7, #2]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058f4:	e002      	b.n	80058fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058f6:	887a      	ldrh	r2, [r7, #2]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4013      	ands	r3, r2
 8005920:	041a      	lsls	r2, r3, #16
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	43d9      	mvns	r1, r3
 8005926:	887b      	ldrh	r3, [r7, #2]
 8005928:	400b      	ands	r3, r1
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	619a      	str	r2, [r3, #24]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005946:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d006      	beq.n	8005960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005952:	4a05      	ldr	r2, [pc, #20]	@ (8005968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd f9fc 	bl	8002d58 <HAL_GPIO_EXTI_Callback>
  }
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40010400 	.word	0x40010400

0800596c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d141      	bne.n	80059fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800597a:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005986:	d131      	bne.n	80059ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005988:	4b47      	ldr	r3, [pc, #284]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800598a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598e:	4a46      	ldr	r2, [pc, #280]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005994:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005998:	4b43      	ldr	r3, [pc, #268]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059a0:	4a41      	ldr	r2, [pc, #260]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059a8:	4b40      	ldr	r3, [pc, #256]	@ (8005aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2232      	movs	r2, #50	@ 0x32
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	0c9b      	lsrs	r3, r3, #18
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059be:	e002      	b.n	80059c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059c6:	4b38      	ldr	r3, [pc, #224]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d2:	d102      	bne.n	80059da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f2      	bne.n	80059c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059da:	4b33      	ldr	r3, [pc, #204]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e6:	d158      	bne.n	8005a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e057      	b.n	8005a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059ec:	4b2e      	ldr	r3, [pc, #184]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059f2:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80059fc:	e04d      	b.n	8005a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a04:	d141      	bne.n	8005a8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a06:	4b28      	ldr	r3, [pc, #160]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a12:	d131      	bne.n	8005a78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a14:	4b24      	ldr	r3, [pc, #144]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a1a:	4a23      	ldr	r2, [pc, #140]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a24:	4b20      	ldr	r3, [pc, #128]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a34:	4b1d      	ldr	r3, [pc, #116]	@ (8005aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2232      	movs	r2, #50	@ 0x32
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	0c9b      	lsrs	r3, r3, #18
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a4a:	e002      	b.n	8005a52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a52:	4b15      	ldr	r3, [pc, #84]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5e:	d102      	bne.n	8005a66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f2      	bne.n	8005a4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a66:	4b10      	ldr	r3, [pc, #64]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a72:	d112      	bne.n	8005a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e011      	b.n	8005a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005a88:	e007      	b.n	8005a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a8a:	4b07      	ldr	r3, [pc, #28]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a92:	4a05      	ldr	r2, [pc, #20]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40007000 	.word	0x40007000
 8005aac:	20000014 	.word	0x20000014
 8005ab0:	431bde83 	.word	0x431bde83

08005ab4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005ab8:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	4a04      	ldr	r2, [pc, #16]	@ (8005ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005abe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ac2:	6093      	str	r3, [r2, #8]
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40007000 	.word	0x40007000

08005ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e2fe      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d075      	beq.n	8005bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005af2:	4b97      	ldr	r3, [pc, #604]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005afc:	4b94      	ldr	r3, [pc, #592]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d102      	bne.n	8005b12 <HAL_RCC_OscConfig+0x3e>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d002      	beq.n	8005b18 <HAL_RCC_OscConfig+0x44>
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d10b      	bne.n	8005b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b18:	4b8d      	ldr	r3, [pc, #564]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d05b      	beq.n	8005bdc <HAL_RCC_OscConfig+0x108>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d157      	bne.n	8005bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e2d9      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b38:	d106      	bne.n	8005b48 <HAL_RCC_OscConfig+0x74>
 8005b3a:	4b85      	ldr	r3, [pc, #532]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a84      	ldr	r2, [pc, #528]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e01d      	b.n	8005b84 <HAL_RCC_OscConfig+0xb0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b50:	d10c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x98>
 8005b52:	4b7f      	ldr	r3, [pc, #508]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a7e      	ldr	r2, [pc, #504]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a7b      	ldr	r2, [pc, #492]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e00b      	b.n	8005b84 <HAL_RCC_OscConfig+0xb0>
 8005b6c:	4b78      	ldr	r3, [pc, #480]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a77      	ldr	r2, [pc, #476]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	4b75      	ldr	r3, [pc, #468]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a74      	ldr	r2, [pc, #464]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d013      	beq.n	8005bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fd fc22 	bl	80033d4 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b94:	f7fd fc1e 	bl	80033d4 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b64      	cmp	r3, #100	@ 0x64
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e29e      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <HAL_RCC_OscConfig+0xc0>
 8005bb2:	e014      	b.n	8005bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb4:	f7fd fc0e 	bl	80033d4 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bbc:	f7fd fc0a 	bl	80033d4 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b64      	cmp	r3, #100	@ 0x64
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e28a      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bce:	4b60      	ldr	r3, [pc, #384]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0xe8>
 8005bda:	e000      	b.n	8005bde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d075      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bea:	4b59      	ldr	r3, [pc, #356]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
 8005bf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bf4:	4b56      	ldr	r3, [pc, #344]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d102      	bne.n	8005c0a <HAL_RCC_OscConfig+0x136>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d002      	beq.n	8005c10 <HAL_RCC_OscConfig+0x13c>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d11f      	bne.n	8005c50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c10:	4b4f      	ldr	r3, [pc, #316]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_OscConfig+0x154>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e25d      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c28:	4b49      	ldr	r3, [pc, #292]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	061b      	lsls	r3, r3, #24
 8005c36:	4946      	ldr	r1, [pc, #280]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c3c:	4b45      	ldr	r3, [pc, #276]	@ (8005d54 <HAL_RCC_OscConfig+0x280>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fd fb7b 	bl	800333c <HAL_InitTick>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d043      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e249      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d023      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c58:	4b3d      	ldr	r3, [pc, #244]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fd fbb6 	bl	80033d4 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c6c:	f7fd fbb2 	bl	80033d4 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e232      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c7e:	4b34      	ldr	r3, [pc, #208]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c8a:	4b31      	ldr	r3, [pc, #196]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	492d      	ldr	r1, [pc, #180]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	604b      	str	r3, [r1, #4]
 8005c9e:	e01a      	b.n	8005cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cac:	f7fd fb92 	bl	80033d4 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb4:	f7fd fb8e 	bl	80033d4 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e20e      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cc6:	4b22      	ldr	r3, [pc, #136]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f0      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x1e0>
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d041      	beq.n	8005d66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d01c      	beq.n	8005d24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cea:	4b19      	ldr	r3, [pc, #100]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cf0:	4a17      	ldr	r2, [pc, #92]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfa:	f7fd fb6b 	bl	80033d4 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d00:	e008      	b.n	8005d14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d02:	f7fd fb67 	bl	80033d4 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e1e7      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d14:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0ef      	beq.n	8005d02 <HAL_RCC_OscConfig+0x22e>
 8005d22:	e020      	b.n	8005d66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d24:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d2a:	4a09      	ldr	r2, [pc, #36]	@ (8005d50 <HAL_RCC_OscConfig+0x27c>)
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7fd fb4e 	bl	80033d4 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d3a:	e00d      	b.n	8005d58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d3c:	f7fd fb4a 	bl	80033d4 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d906      	bls.n	8005d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e1ca      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000
 8005d54:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d58:	4b8c      	ldr	r3, [pc, #560]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1ea      	bne.n	8005d3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80a6 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d74:	2300      	movs	r3, #0
 8005d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d78:	4b84      	ldr	r3, [pc, #528]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_RCC_OscConfig+0x2b4>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <HAL_RCC_OscConfig+0x2b6>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d92:	4a7e      	ldr	r2, [pc, #504]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005da6:	2301      	movs	r3, #1
 8005da8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005daa:	4b79      	ldr	r3, [pc, #484]	@ (8005f90 <HAL_RCC_OscConfig+0x4bc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d118      	bne.n	8005de8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005db6:	4b76      	ldr	r3, [pc, #472]	@ (8005f90 <HAL_RCC_OscConfig+0x4bc>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a75      	ldr	r2, [pc, #468]	@ (8005f90 <HAL_RCC_OscConfig+0x4bc>)
 8005dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dc2:	f7fd fb07 	bl	80033d4 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dca:	f7fd fb03 	bl	80033d4 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e183      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8005f90 <HAL_RCC_OscConfig+0x4bc>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d108      	bne.n	8005e02 <HAL_RCC_OscConfig+0x32e>
 8005df0:	4b66      	ldr	r3, [pc, #408]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df6:	4a65      	ldr	r2, [pc, #404]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e00:	e024      	b.n	8005e4c <HAL_RCC_OscConfig+0x378>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b05      	cmp	r3, #5
 8005e08:	d110      	bne.n	8005e2c <HAL_RCC_OscConfig+0x358>
 8005e0a:	4b60      	ldr	r3, [pc, #384]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e10:	4a5e      	ldr	r2, [pc, #376]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005e12:	f043 0304 	orr.w	r3, r3, #4
 8005e16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e20:	4a5a      	ldr	r2, [pc, #360]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e2a:	e00f      	b.n	8005e4c <HAL_RCC_OscConfig+0x378>
 8005e2c:	4b57      	ldr	r3, [pc, #348]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e32:	4a56      	ldr	r2, [pc, #344]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e3c:	4b53      	ldr	r3, [pc, #332]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e42:	4a52      	ldr	r2, [pc, #328]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005e44:	f023 0304 	bic.w	r3, r3, #4
 8005e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d016      	beq.n	8005e82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e54:	f7fd fabe 	bl	80033d4 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e5a:	e00a      	b.n	8005e72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5c:	f7fd faba 	bl	80033d4 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e138      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e72:	4b46      	ldr	r3, [pc, #280]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0ed      	beq.n	8005e5c <HAL_RCC_OscConfig+0x388>
 8005e80:	e015      	b.n	8005eae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e82:	f7fd faa7 	bl	80033d4 <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e88:	e00a      	b.n	8005ea0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8a:	f7fd faa3 	bl	80033d4 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e121      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1ed      	bne.n	8005e8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005eae:	7ffb      	ldrb	r3, [r7, #31]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d105      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb4:	4b35      	ldr	r3, [pc, #212]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb8:	4a34      	ldr	r2, [pc, #208]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ebe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0320 	and.w	r3, r3, #32
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d03c      	beq.n	8005f46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01c      	beq.n	8005f0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eda:	4a2c      	ldr	r2, [pc, #176]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee4:	f7fd fa76 	bl	80033d4 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eec:	f7fd fa72 	bl	80033d4 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e0f2      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005efe:	4b23      	ldr	r3, [pc, #140]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ef      	beq.n	8005eec <HAL_RCC_OscConfig+0x418>
 8005f0c:	e01b      	b.n	8005f46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f14:	4a1d      	ldr	r2, [pc, #116]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005f16:	f023 0301 	bic.w	r3, r3, #1
 8005f1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1e:	f7fd fa59 	bl	80033d4 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f26:	f7fd fa55 	bl	80033d4 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e0d5      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f38:	4b14      	ldr	r3, [pc, #80]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1ef      	bne.n	8005f26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80c9 	beq.w	80060e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f50:	4b0e      	ldr	r3, [pc, #56]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 030c 	and.w	r3, r3, #12
 8005f58:	2b0c      	cmp	r3, #12
 8005f5a:	f000 8083 	beq.w	8006064 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d15e      	bne.n	8006024 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f66:	4b09      	ldr	r3, [pc, #36]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a08      	ldr	r2, [pc, #32]	@ (8005f8c <HAL_RCC_OscConfig+0x4b8>)
 8005f6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f72:	f7fd fa2f 	bl	80033d4 <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f78:	e00c      	b.n	8005f94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7a:	f7fd fa2b 	bl	80033d4 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d905      	bls.n	8005f94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e0ab      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f94:	4b55      	ldr	r3, [pc, #340]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1ec      	bne.n	8005f7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fa0:	4b52      	ldr	r3, [pc, #328]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	4b52      	ldr	r3, [pc, #328]	@ (80060f0 <HAL_RCC_OscConfig+0x61c>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6a11      	ldr	r1, [r2, #32]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	0112      	lsls	r2, r2, #4
 8005fb4:	4311      	orrs	r1, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005fba:	0212      	lsls	r2, r2, #8
 8005fbc:	4311      	orrs	r1, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005fc2:	0852      	lsrs	r2, r2, #1
 8005fc4:	3a01      	subs	r2, #1
 8005fc6:	0552      	lsls	r2, r2, #21
 8005fc8:	4311      	orrs	r1, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005fce:	0852      	lsrs	r2, r2, #1
 8005fd0:	3a01      	subs	r2, #1
 8005fd2:	0652      	lsls	r2, r2, #25
 8005fd4:	4311      	orrs	r1, r2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005fda:	06d2      	lsls	r2, r2, #27
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	4943      	ldr	r1, [pc, #268]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe4:	4b41      	ldr	r3, [pc, #260]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8005fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4a3d      	ldr	r2, [pc, #244]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8005ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ffa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffc:	f7fd f9ea 	bl	80033d4 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006004:	f7fd f9e6 	bl	80033d4 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e066      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006016:	4b35      	ldr	r3, [pc, #212]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x530>
 8006022:	e05e      	b.n	80060e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006024:	4b31      	ldr	r3, [pc, #196]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a30      	ldr	r2, [pc, #192]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 800602a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800602e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fd f9d0 	bl	80033d4 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006038:	f7fd f9cc 	bl	80033d4 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e04c      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800604a:	4b28      	ldr	r3, [pc, #160]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006056:	4b25      	ldr	r3, [pc, #148]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	4924      	ldr	r1, [pc, #144]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 800605c:	4b25      	ldr	r3, [pc, #148]	@ (80060f4 <HAL_RCC_OscConfig+0x620>)
 800605e:	4013      	ands	r3, r2
 8006060:	60cb      	str	r3, [r1, #12]
 8006062:	e03e      	b.n	80060e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e039      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006070:	4b1e      	ldr	r3, [pc, #120]	@ (80060ec <HAL_RCC_OscConfig+0x618>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f003 0203 	and.w	r2, r3, #3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	429a      	cmp	r2, r3
 8006082:	d12c      	bne.n	80060de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608e:	3b01      	subs	r3, #1
 8006090:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006092:	429a      	cmp	r2, r3
 8006094:	d123      	bne.n	80060de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d11b      	bne.n	80060de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d113      	bne.n	80060de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c0:	085b      	lsrs	r3, r3, #1
 80060c2:	3b01      	subs	r3, #1
 80060c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d109      	bne.n	80060de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d4:	085b      	lsrs	r3, r3, #1
 80060d6:	3b01      	subs	r3, #1
 80060d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060da:	429a      	cmp	r2, r3
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40021000 	.word	0x40021000
 80060f0:	019f800c 	.word	0x019f800c
 80060f4:	feeefffc 	.word	0xfeeefffc

080060f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e11e      	b.n	800634e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006110:	4b91      	ldr	r3, [pc, #580]	@ (8006358 <HAL_RCC_ClockConfig+0x260>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d910      	bls.n	8006140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800611e:	4b8e      	ldr	r3, [pc, #568]	@ (8006358 <HAL_RCC_ClockConfig+0x260>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f023 020f 	bic.w	r2, r3, #15
 8006126:	498c      	ldr	r1, [pc, #560]	@ (8006358 <HAL_RCC_ClockConfig+0x260>)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	4313      	orrs	r3, r2
 800612c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612e:	4b8a      	ldr	r3, [pc, #552]	@ (8006358 <HAL_RCC_ClockConfig+0x260>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d001      	beq.n	8006140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e106      	b.n	800634e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d073      	beq.n	8006234 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b03      	cmp	r3, #3
 8006152:	d129      	bne.n	80061a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006154:	4b81      	ldr	r3, [pc, #516]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0f4      	b.n	800634e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006164:	f000 f99e 	bl	80064a4 <RCC_GetSysClockFreqFromPLLSource>
 8006168:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4a7c      	ldr	r2, [pc, #496]	@ (8006360 <HAL_RCC_ClockConfig+0x268>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d93f      	bls.n	80061f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006172:	4b7a      	ldr	r3, [pc, #488]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006186:	2b00      	cmp	r3, #0
 8006188:	d033      	beq.n	80061f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800618e:	2b00      	cmp	r3, #0
 8006190:	d12f      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006192:	4b72      	ldr	r3, [pc, #456]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800619a:	4a70      	ldr	r2, [pc, #448]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 800619c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80061a2:	2380      	movs	r3, #128	@ 0x80
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e024      	b.n	80061f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061b0:	4b6a      	ldr	r3, [pc, #424]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0c6      	b.n	800634e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061c0:	4b66      	ldr	r3, [pc, #408]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0be      	b.n	800634e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80061d0:	f000 f8ce 	bl	8006370 <HAL_RCC_GetSysClockFreq>
 80061d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4a61      	ldr	r2, [pc, #388]	@ (8006360 <HAL_RCC_ClockConfig+0x268>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d909      	bls.n	80061f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061de:	4b5f      	ldr	r3, [pc, #380]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061e6:	4a5d      	ldr	r2, [pc, #372]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 80061e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80061ee:	2380      	movs	r3, #128	@ 0x80
 80061f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061f2:	4b5a      	ldr	r3, [pc, #360]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f023 0203 	bic.w	r2, r3, #3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	4957      	ldr	r1, [pc, #348]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006200:	4313      	orrs	r3, r2
 8006202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006204:	f7fd f8e6 	bl	80033d4 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620a:	e00a      	b.n	8006222 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800620c:	f7fd f8e2 	bl	80033d4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e095      	b.n	800634e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006222:	4b4e      	ldr	r3, [pc, #312]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 020c 	and.w	r2, r3, #12
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	429a      	cmp	r2, r3
 8006232:	d1eb      	bne.n	800620c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d023      	beq.n	8006288 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800624c:	4b43      	ldr	r3, [pc, #268]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a42      	ldr	r2, [pc, #264]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006252:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006256:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006264:	4b3d      	ldr	r3, [pc, #244]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800626c:	4a3b      	ldr	r2, [pc, #236]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 800626e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006272:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006274:	4b39      	ldr	r3, [pc, #228]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4936      	ldr	r1, [pc, #216]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006282:	4313      	orrs	r3, r2
 8006284:	608b      	str	r3, [r1, #8]
 8006286:	e008      	b.n	800629a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b80      	cmp	r3, #128	@ 0x80
 800628c:	d105      	bne.n	800629a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800628e:	4b33      	ldr	r3, [pc, #204]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	4a32      	ldr	r2, [pc, #200]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006294:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006298:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800629a:	4b2f      	ldr	r3, [pc, #188]	@ (8006358 <HAL_RCC_ClockConfig+0x260>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d21d      	bcs.n	80062e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006358 <HAL_RCC_ClockConfig+0x260>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f023 020f 	bic.w	r2, r3, #15
 80062b0:	4929      	ldr	r1, [pc, #164]	@ (8006358 <HAL_RCC_ClockConfig+0x260>)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062b8:	f7fd f88c 	bl	80033d4 <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062be:	e00a      	b.n	80062d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c0:	f7fd f888 	bl	80033d4 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e03b      	b.n	800634e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d6:	4b20      	ldr	r3, [pc, #128]	@ (8006358 <HAL_RCC_ClockConfig+0x260>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d1ed      	bne.n	80062c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062f0:	4b1a      	ldr	r3, [pc, #104]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4917      	ldr	r1, [pc, #92]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800630e:	4b13      	ldr	r3, [pc, #76]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	490f      	ldr	r1, [pc, #60]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 800631e:	4313      	orrs	r3, r2
 8006320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006322:	f000 f825 	bl	8006370 <HAL_RCC_GetSysClockFreq>
 8006326:	4602      	mov	r2, r0
 8006328:	4b0c      	ldr	r3, [pc, #48]	@ (800635c <HAL_RCC_ClockConfig+0x264>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	490c      	ldr	r1, [pc, #48]	@ (8006364 <HAL_RCC_ClockConfig+0x26c>)
 8006334:	5ccb      	ldrb	r3, [r1, r3]
 8006336:	f003 031f 	and.w	r3, r3, #31
 800633a:	fa22 f303 	lsr.w	r3, r2, r3
 800633e:	4a0a      	ldr	r2, [pc, #40]	@ (8006368 <HAL_RCC_ClockConfig+0x270>)
 8006340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006342:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <HAL_RCC_ClockConfig+0x274>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7fc fff8 	bl	800333c <HAL_InitTick>
 800634c:	4603      	mov	r3, r0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40022000 	.word	0x40022000
 800635c:	40021000 	.word	0x40021000
 8006360:	04c4b400 	.word	0x04c4b400
 8006364:	0800a584 	.word	0x0800a584
 8006368:	20000014 	.word	0x20000014
 800636c:	20000018 	.word	0x20000018

08006370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006376:	4b2c      	ldr	r3, [pc, #176]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b04      	cmp	r3, #4
 8006380:	d102      	bne.n	8006388 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006382:	4b2a      	ldr	r3, [pc, #168]	@ (800642c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	e047      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006388:	4b27      	ldr	r3, [pc, #156]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 030c 	and.w	r3, r3, #12
 8006390:	2b08      	cmp	r3, #8
 8006392:	d102      	bne.n	800639a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006394:	4b26      	ldr	r3, [pc, #152]	@ (8006430 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	e03e      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800639a:	4b23      	ldr	r3, [pc, #140]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 030c 	and.w	r3, r3, #12
 80063a2:	2b0c      	cmp	r3, #12
 80063a4:	d136      	bne.n	8006414 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063a6:	4b20      	ldr	r3, [pc, #128]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	3301      	adds	r3, #1
 80063bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d10c      	bne.n	80063de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063cc:	4a16      	ldr	r2, [pc, #88]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063ce:	68d2      	ldr	r2, [r2, #12]
 80063d0:	0a12      	lsrs	r2, r2, #8
 80063d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063d6:	fb02 f303 	mul.w	r3, r2, r3
 80063da:	617b      	str	r3, [r7, #20]
      break;
 80063dc:	e00c      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063de:	4a13      	ldr	r2, [pc, #76]	@ (800642c <HAL_RCC_GetSysClockFreq+0xbc>)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e6:	4a10      	ldr	r2, [pc, #64]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063e8:	68d2      	ldr	r2, [r2, #12]
 80063ea:	0a12      	lsrs	r2, r2, #8
 80063ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	617b      	str	r3, [r7, #20]
      break;
 80063f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	0e5b      	lsrs	r3, r3, #25
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	3301      	adds	r3, #1
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	e001      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006418:	693b      	ldr	r3, [r7, #16]
}
 800641a:	4618      	mov	r0, r3
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40021000 	.word	0x40021000
 800642c:	00f42400 	.word	0x00f42400
 8006430:	016e3600 	.word	0x016e3600

08006434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006438:	4b03      	ldr	r3, [pc, #12]	@ (8006448 <HAL_RCC_GetHCLKFreq+0x14>)
 800643a:	681b      	ldr	r3, [r3, #0]
}
 800643c:	4618      	mov	r0, r3
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	20000014 	.word	0x20000014

0800644c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006450:	f7ff fff0 	bl	8006434 <HAL_RCC_GetHCLKFreq>
 8006454:	4602      	mov	r2, r0
 8006456:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	4904      	ldr	r1, [pc, #16]	@ (8006474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006462:	5ccb      	ldrb	r3, [r1, r3]
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40021000 	.word	0x40021000
 8006474:	0800a594 	.word	0x0800a594

08006478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800647c:	f7ff ffda 	bl	8006434 <HAL_RCC_GetHCLKFreq>
 8006480:	4602      	mov	r2, r0
 8006482:	4b06      	ldr	r3, [pc, #24]	@ (800649c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	0adb      	lsrs	r3, r3, #11
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	4904      	ldr	r1, [pc, #16]	@ (80064a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800648e:	5ccb      	ldrb	r3, [r1, r3]
 8006490:	f003 031f 	and.w	r3, r3, #31
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006498:	4618      	mov	r0, r3
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40021000 	.word	0x40021000
 80064a0:	0800a594 	.word	0x0800a594

080064a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	091b      	lsrs	r3, r3, #4
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	3301      	adds	r3, #1
 80064c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d10c      	bne.n	80064e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064c8:	4a17      	ldr	r2, [pc, #92]	@ (8006528 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	4a14      	ldr	r2, [pc, #80]	@ (8006524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064d2:	68d2      	ldr	r2, [r2, #12]
 80064d4:	0a12      	lsrs	r2, r2, #8
 80064d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	617b      	str	r3, [r7, #20]
    break;
 80064e0:	e00c      	b.n	80064fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064e2:	4a12      	ldr	r2, [pc, #72]	@ (800652c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064ec:	68d2      	ldr	r2, [r2, #12]
 80064ee:	0a12      	lsrs	r2, r2, #8
 80064f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	617b      	str	r3, [r7, #20]
    break;
 80064fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064fc:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	0e5b      	lsrs	r3, r3, #25
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	3301      	adds	r3, #1
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	fbb2 f3f3 	udiv	r3, r2, r3
 8006514:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006516:	687b      	ldr	r3, [r7, #4]
}
 8006518:	4618      	mov	r0, r3
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	40021000 	.word	0x40021000
 8006528:	016e3600 	.word	0x016e3600
 800652c:	00f42400 	.word	0x00f42400

08006530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006538:	2300      	movs	r3, #0
 800653a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800653c:	2300      	movs	r3, #0
 800653e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8098 	beq.w	800667e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654e:	2300      	movs	r3, #0
 8006550:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006552:	4b43      	ldr	r3, [pc, #268]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10d      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655e:	4b40      	ldr	r3, [pc, #256]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006562:	4a3f      	ldr	r2, [pc, #252]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006568:	6593      	str	r3, [r2, #88]	@ 0x58
 800656a:	4b3d      	ldr	r3, [pc, #244]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800656c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006576:	2301      	movs	r3, #1
 8006578:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800657a:	4b3a      	ldr	r3, [pc, #232]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a39      	ldr	r2, [pc, #228]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006586:	f7fc ff25 	bl	80033d4 <HAL_GetTick>
 800658a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800658c:	e009      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800658e:	f7fc ff21 	bl	80033d4 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d902      	bls.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	74fb      	strb	r3, [r7, #19]
        break;
 80065a0:	e005      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065a2:	4b30      	ldr	r3, [pc, #192]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0ef      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80065ae:	7cfb      	ldrb	r3, [r7, #19]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d159      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d01e      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d019      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065d0:	4b23      	ldr	r3, [pc, #140]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065dc:	4b20      	ldr	r3, [pc, #128]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065fc:	4a18      	ldr	r2, [pc, #96]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d016      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660e:	f7fc fee1 	bl	80033d4 <HAL_GetTick>
 8006612:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006614:	e00b      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006616:	f7fc fedd 	bl	80033d4 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006624:	4293      	cmp	r3, r2
 8006626:	d902      	bls.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	74fb      	strb	r3, [r7, #19]
            break;
 800662c:	e006      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800662e:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0ec      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800663c:	7cfb      	ldrb	r3, [r7, #19]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10b      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006642:	4b07      	ldr	r3, [pc, #28]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006650:	4903      	ldr	r1, [pc, #12]	@ (8006660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006658:	e008      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800665a:	7cfb      	ldrb	r3, [r7, #19]
 800665c:	74bb      	strb	r3, [r7, #18]
 800665e:	e005      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006660:	40021000 	.word	0x40021000
 8006664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006668:	7cfb      	ldrb	r3, [r7, #19]
 800666a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800666c:	7c7b      	ldrb	r3, [r7, #17]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d105      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006672:	4ba7      	ldr	r3, [pc, #668]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006676:	4aa6      	ldr	r2, [pc, #664]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006678:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800667c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800668a:	4ba1      	ldr	r3, [pc, #644]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006690:	f023 0203 	bic.w	r2, r3, #3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	499d      	ldr	r1, [pc, #628]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066ac:	4b98      	ldr	r3, [pc, #608]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b2:	f023 020c 	bic.w	r2, r3, #12
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	4995      	ldr	r1, [pc, #596]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066ce:	4b90      	ldr	r3, [pc, #576]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	498c      	ldr	r1, [pc, #560]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00a      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066f0:	4b87      	ldr	r3, [pc, #540]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	4984      	ldr	r1, [pc, #528]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006712:	4b7f      	ldr	r3, [pc, #508]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006718:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	497b      	ldr	r1, [pc, #492]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006734:	4b76      	ldr	r3, [pc, #472]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	4973      	ldr	r1, [pc, #460]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006756:	4b6e      	ldr	r3, [pc, #440]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800675c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	496a      	ldr	r1, [pc, #424]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006778:	4b65      	ldr	r3, [pc, #404]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	4962      	ldr	r1, [pc, #392]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800679a:	4b5d      	ldr	r3, [pc, #372]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	4959      	ldr	r1, [pc, #356]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067bc:	4b54      	ldr	r3, [pc, #336]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067c2:	f023 0203 	bic.w	r2, r3, #3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	4951      	ldr	r1, [pc, #324]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067de:	4b4c      	ldr	r3, [pc, #304]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	4948      	ldr	r1, [pc, #288]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d015      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006800:	4b43      	ldr	r3, [pc, #268]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006806:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680e:	4940      	ldr	r1, [pc, #256]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006810:	4313      	orrs	r3, r2
 8006812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800681e:	d105      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006820:	4b3b      	ldr	r3, [pc, #236]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	4a3a      	ldr	r2, [pc, #232]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800682a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006834:	2b00      	cmp	r3, #0
 8006836:	d015      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006838:	4b35      	ldr	r3, [pc, #212]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006846:	4932      	ldr	r1, [pc, #200]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006856:	d105      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006858:	4b2d      	ldr	r3, [pc, #180]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	4a2c      	ldr	r2, [pc, #176]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006862:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d015      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006870:	4b27      	ldr	r3, [pc, #156]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006876:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	4924      	ldr	r1, [pc, #144]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006880:	4313      	orrs	r3, r2
 8006882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800688e:	d105      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006890:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	4a1e      	ldr	r2, [pc, #120]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800689a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d015      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068a8:	4b19      	ldr	r3, [pc, #100]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b6:	4916      	ldr	r1, [pc, #88]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068c6:	d105      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068c8:	4b11      	ldr	r3, [pc, #68]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	4a10      	ldr	r2, [pc, #64]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d019      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ee:	4908      	ldr	r1, [pc, #32]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068fe:	d109      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006900:	4b03      	ldr	r3, [pc, #12]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	4a02      	ldr	r2, [pc, #8]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800690a:	60d3      	str	r3, [r2, #12]
 800690c:	e002      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800690e:	bf00      	nop
 8006910:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d015      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006920:	4b29      	ldr	r3, [pc, #164]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006926:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692e:	4926      	ldr	r1, [pc, #152]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006930:	4313      	orrs	r3, r2
 8006932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800693e:	d105      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006940:	4b21      	ldr	r3, [pc, #132]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4a20      	ldr	r2, [pc, #128]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800694a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d015      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006958:	4b1b      	ldr	r3, [pc, #108]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800695a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006966:	4918      	ldr	r1, [pc, #96]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006968:	4313      	orrs	r3, r2
 800696a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006976:	d105      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006978:	4b13      	ldr	r3, [pc, #76]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	4a12      	ldr	r2, [pc, #72]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800697e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006982:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d015      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006990:	4b0d      	ldr	r3, [pc, #52]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006996:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699e:	490a      	ldr	r1, [pc, #40]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ae:	d105      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b0:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4a04      	ldr	r2, [pc, #16]	@ (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80069bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40021000 	.word	0x40021000

080069cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e049      	b.n	8006a72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fc faea 	bl	8002fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f000 ff68 	bl	80078e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d001      	beq.n	8006a94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e04c      	b.n	8006b2e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a26      	ldr	r2, [pc, #152]	@ (8006b3c <HAL_TIM_Base_Start+0xc0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d022      	beq.n	8006aec <HAL_TIM_Base_Start+0x70>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aae:	d01d      	beq.n	8006aec <HAL_TIM_Base_Start+0x70>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a22      	ldr	r2, [pc, #136]	@ (8006b40 <HAL_TIM_Base_Start+0xc4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d018      	beq.n	8006aec <HAL_TIM_Base_Start+0x70>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a21      	ldr	r2, [pc, #132]	@ (8006b44 <HAL_TIM_Base_Start+0xc8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d013      	beq.n	8006aec <HAL_TIM_Base_Start+0x70>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b48 <HAL_TIM_Base_Start+0xcc>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d00e      	beq.n	8006aec <HAL_TIM_Base_Start+0x70>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b4c <HAL_TIM_Base_Start+0xd0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d009      	beq.n	8006aec <HAL_TIM_Base_Start+0x70>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1c      	ldr	r2, [pc, #112]	@ (8006b50 <HAL_TIM_Base_Start+0xd4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d004      	beq.n	8006aec <HAL_TIM_Base_Start+0x70>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b54 <HAL_TIM_Base_Start+0xd8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d115      	bne.n	8006b18 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	4b19      	ldr	r3, [pc, #100]	@ (8006b58 <HAL_TIM_Base_Start+0xdc>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b06      	cmp	r3, #6
 8006afc:	d015      	beq.n	8006b2a <HAL_TIM_Base_Start+0xae>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b04:	d011      	beq.n	8006b2a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0201 	orr.w	r2, r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b16:	e008      	b.n	8006b2a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	e000      	b.n	8006b2c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40000400 	.word	0x40000400
 8006b44:	40000800 	.word	0x40000800
 8006b48:	40000c00 	.word	0x40000c00
 8006b4c:	40013400 	.word	0x40013400
 8006b50:	40014000 	.word	0x40014000
 8006b54:	40015000 	.word	0x40015000
 8006b58:	00010007 	.word	0x00010007

08006b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d001      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e054      	b.n	8006c1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a26      	ldr	r2, [pc, #152]	@ (8006c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d022      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b9e:	d01d      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a22      	ldr	r2, [pc, #136]	@ (8006c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d018      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a21      	ldr	r2, [pc, #132]	@ (8006c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d013      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8006c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00e      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8006c3c <HAL_TIM_Base_Start_IT+0xe0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d009      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006c40 <HAL_TIM_Base_Start_IT+0xe4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <HAL_TIM_Base_Start_IT+0x80>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c44 <HAL_TIM_Base_Start_IT+0xe8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d115      	bne.n	8006c08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	4b19      	ldr	r3, [pc, #100]	@ (8006c48 <HAL_TIM_Base_Start_IT+0xec>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b06      	cmp	r3, #6
 8006bec:	d015      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xbe>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf4:	d011      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0201 	orr.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c06:	e008      	b.n	8006c1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	e000      	b.n	8006c1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800
 8006c38:	40000c00 	.word	0x40000c00
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40015000 	.word	0x40015000
 8006c48:	00010007 	.word	0x00010007

08006c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e049      	b.n	8006cf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f841 	bl	8006cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f000 fe28 	bl	80078e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
	...

08006d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <HAL_TIM_PWM_Start+0x24>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	bf14      	ite	ne
 8006d2c:	2301      	movne	r3, #1
 8006d2e:	2300      	moveq	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	e03c      	b.n	8006dae <HAL_TIM_PWM_Start+0x9e>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d109      	bne.n	8006d4e <HAL_TIM_PWM_Start+0x3e>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	bf14      	ite	ne
 8006d46:	2301      	movne	r3, #1
 8006d48:	2300      	moveq	r3, #0
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	e02f      	b.n	8006dae <HAL_TIM_PWM_Start+0x9e>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d109      	bne.n	8006d68 <HAL_TIM_PWM_Start+0x58>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	bf14      	ite	ne
 8006d60:	2301      	movne	r3, #1
 8006d62:	2300      	moveq	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	e022      	b.n	8006dae <HAL_TIM_PWM_Start+0x9e>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b0c      	cmp	r3, #12
 8006d6c:	d109      	bne.n	8006d82 <HAL_TIM_PWM_Start+0x72>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	bf14      	ite	ne
 8006d7a:	2301      	movne	r3, #1
 8006d7c:	2300      	moveq	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	e015      	b.n	8006dae <HAL_TIM_PWM_Start+0x9e>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b10      	cmp	r3, #16
 8006d86:	d109      	bne.n	8006d9c <HAL_TIM_PWM_Start+0x8c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	bf14      	ite	ne
 8006d94:	2301      	movne	r3, #1
 8006d96:	2300      	moveq	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	e008      	b.n	8006dae <HAL_TIM_PWM_Start+0x9e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	bf14      	ite	ne
 8006da8:	2301      	movne	r3, #1
 8006daa:	2300      	moveq	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e0a6      	b.n	8006f04 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_PWM_Start+0xb6>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dc4:	e023      	b.n	8006e0e <HAL_TIM_PWM_Start+0xfe>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_PWM_Start+0xc6>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dd4:	e01b      	b.n	8006e0e <HAL_TIM_PWM_Start+0xfe>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d104      	bne.n	8006de6 <HAL_TIM_PWM_Start+0xd6>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006de4:	e013      	b.n	8006e0e <HAL_TIM_PWM_Start+0xfe>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b0c      	cmp	r3, #12
 8006dea:	d104      	bne.n	8006df6 <HAL_TIM_PWM_Start+0xe6>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006df4:	e00b      	b.n	8006e0e <HAL_TIM_PWM_Start+0xfe>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d104      	bne.n	8006e06 <HAL_TIM_PWM_Start+0xf6>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e04:	e003      	b.n	8006e0e <HAL_TIM_PWM_Start+0xfe>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2201      	movs	r2, #1
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 f9dc 	bl	80081d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a3a      	ldr	r2, [pc, #232]	@ (8006f0c <HAL_TIM_PWM_Start+0x1fc>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d018      	beq.n	8006e58 <HAL_TIM_PWM_Start+0x148>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a39      	ldr	r2, [pc, #228]	@ (8006f10 <HAL_TIM_PWM_Start+0x200>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d013      	beq.n	8006e58 <HAL_TIM_PWM_Start+0x148>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a37      	ldr	r2, [pc, #220]	@ (8006f14 <HAL_TIM_PWM_Start+0x204>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00e      	beq.n	8006e58 <HAL_TIM_PWM_Start+0x148>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a36      	ldr	r2, [pc, #216]	@ (8006f18 <HAL_TIM_PWM_Start+0x208>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d009      	beq.n	8006e58 <HAL_TIM_PWM_Start+0x148>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a34      	ldr	r2, [pc, #208]	@ (8006f1c <HAL_TIM_PWM_Start+0x20c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <HAL_TIM_PWM_Start+0x148>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a33      	ldr	r2, [pc, #204]	@ (8006f20 <HAL_TIM_PWM_Start+0x210>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d101      	bne.n	8006e5c <HAL_TIM_PWM_Start+0x14c>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <HAL_TIM_PWM_Start+0x14e>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d007      	beq.n	8006e72 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a25      	ldr	r2, [pc, #148]	@ (8006f0c <HAL_TIM_PWM_Start+0x1fc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d022      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x1b2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e84:	d01d      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x1b2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a26      	ldr	r2, [pc, #152]	@ (8006f24 <HAL_TIM_PWM_Start+0x214>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d018      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x1b2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a24      	ldr	r2, [pc, #144]	@ (8006f28 <HAL_TIM_PWM_Start+0x218>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x1b2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a23      	ldr	r2, [pc, #140]	@ (8006f2c <HAL_TIM_PWM_Start+0x21c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x1b2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a19      	ldr	r2, [pc, #100]	@ (8006f10 <HAL_TIM_PWM_Start+0x200>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x1b2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a18      	ldr	r2, [pc, #96]	@ (8006f14 <HAL_TIM_PWM_Start+0x204>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x1b2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a18      	ldr	r2, [pc, #96]	@ (8006f20 <HAL_TIM_PWM_Start+0x210>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d115      	bne.n	8006eee <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	4b19      	ldr	r3, [pc, #100]	@ (8006f30 <HAL_TIM_PWM_Start+0x220>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b06      	cmp	r3, #6
 8006ed2:	d015      	beq.n	8006f00 <HAL_TIM_PWM_Start+0x1f0>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eda:	d011      	beq.n	8006f00 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eec:	e008      	b.n	8006f00 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 0201 	orr.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e000      	b.n	8006f02 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800
 8006f20:	40015000 	.word	0x40015000
 8006f24:	40000400 	.word	0x40000400
 8006f28:	40000800 	.word	0x40000800
 8006f2c:	40000c00 	.word	0x40000c00
 8006f30:	00010007 	.word	0x00010007

08006f34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e097      	b.n	8007078 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d106      	bne.n	8006f62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7fc f8a9 	bl	80030b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2202      	movs	r2, #2
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6812      	ldr	r2, [r2, #0]
 8006f74:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006f78:	f023 0307 	bic.w	r3, r3, #7
 8006f7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f000 fca9 	bl	80078e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006fd4:	f023 030c 	bic.w	r3, r3, #12
 8006fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fe0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	011a      	lsls	r2, r3, #4
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	031b      	lsls	r3, r3, #12
 8007004:	4313      	orrs	r3, r2
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800701a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	4313      	orrs	r3, r2
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007090:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007098:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d110      	bne.n	80070d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d102      	bne.n	80070bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80070b6:	7b7b      	ldrb	r3, [r7, #13]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d001      	beq.n	80070c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e069      	b.n	8007194 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070d0:	e031      	b.n	8007136 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d110      	bne.n	80070fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d102      	bne.n	80070e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070de:	7b3b      	ldrb	r3, [r7, #12]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d001      	beq.n	80070e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e055      	b.n	8007194 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070f8:	e01d      	b.n	8007136 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d108      	bne.n	8007112 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d105      	bne.n	8007112 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007106:	7b7b      	ldrb	r3, [r7, #13]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d102      	bne.n	8007112 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800710c:	7b3b      	ldrb	r3, [r7, #12]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d001      	beq.n	8007116 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e03e      	b.n	8007194 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2202      	movs	r2, #2
 8007122:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2202      	movs	r2, #2
 8007132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_TIM_Encoder_Start+0xc4>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b04      	cmp	r3, #4
 8007140:	d008      	beq.n	8007154 <HAL_TIM_Encoder_Start+0xd4>
 8007142:	e00f      	b.n	8007164 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2201      	movs	r2, #1
 800714a:	2100      	movs	r1, #0
 800714c:	4618      	mov	r0, r3
 800714e:	f001 f841 	bl	80081d4 <TIM_CCxChannelCmd>
      break;
 8007152:	e016      	b.n	8007182 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2201      	movs	r2, #1
 800715a:	2104      	movs	r1, #4
 800715c:	4618      	mov	r0, r3
 800715e:	f001 f839 	bl	80081d4 <TIM_CCxChannelCmd>
      break;
 8007162:	e00e      	b.n	8007182 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2201      	movs	r2, #1
 800716a:	2100      	movs	r1, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f001 f831 	bl	80081d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2201      	movs	r2, #1
 8007178:	2104      	movs	r1, #4
 800717a:	4618      	mov	r0, r3
 800717c:	f001 f82a 	bl	80081d4 <TIM_CCxChannelCmd>
      break;
 8007180:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0201 	orr.w	r2, r2, #1
 8007190:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d020      	beq.n	8007200 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01b      	beq.n	8007200 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0202 	mvn.w	r2, #2
 80071d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fb5c 	bl	80078a4 <HAL_TIM_IC_CaptureCallback>
 80071ec:	e005      	b.n	80071fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fb4e 	bl	8007890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fb5f 	bl	80078b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d020      	beq.n	800724c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01b      	beq.n	800724c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0204 	mvn.w	r2, #4
 800721c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fb36 	bl	80078a4 <HAL_TIM_IC_CaptureCallback>
 8007238:	e005      	b.n	8007246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fb28 	bl	8007890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fb39 	bl	80078b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d020      	beq.n	8007298 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01b      	beq.n	8007298 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0208 	mvn.w	r2, #8
 8007268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2204      	movs	r2, #4
 800726e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fb10 	bl	80078a4 <HAL_TIM_IC_CaptureCallback>
 8007284:	e005      	b.n	8007292 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fb02 	bl	8007890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fb13 	bl	80078b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d020      	beq.n	80072e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01b      	beq.n	80072e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0210 	mvn.w	r2, #16
 80072b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2208      	movs	r2, #8
 80072ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 faea 	bl	80078a4 <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fadc 	bl	8007890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 faed 	bl	80078b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00c      	beq.n	8007308 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0201 	mvn.w	r2, #1
 8007300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fa fd34 	bl	8001d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800732e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f815 	bl	8008360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00c      	beq.n	800735a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 f80d 	bl	8008374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00c      	beq.n	800737e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 faa7 	bl	80078cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00c      	beq.n	80073a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d007      	beq.n	80073a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f06f 0220 	mvn.w	r2, #32
 800739a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 ffd5 	bl	800834c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00c      	beq.n	80073c6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80073be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 ffe1 	bl	8008388 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00c      	beq.n	80073ea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80073e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 ffd9 	bl	800839c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00c      	beq.n	800740e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 ffd1 	bl	80083b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800742a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 ffc9 	bl	80083c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007456:	2302      	movs	r3, #2
 8007458:	e0ff      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b14      	cmp	r3, #20
 8007466:	f200 80f0 	bhi.w	800764a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800746a:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074c5 	.word	0x080074c5
 8007474:	0800764b 	.word	0x0800764b
 8007478:	0800764b 	.word	0x0800764b
 800747c:	0800764b 	.word	0x0800764b
 8007480:	08007505 	.word	0x08007505
 8007484:	0800764b 	.word	0x0800764b
 8007488:	0800764b 	.word	0x0800764b
 800748c:	0800764b 	.word	0x0800764b
 8007490:	08007547 	.word	0x08007547
 8007494:	0800764b 	.word	0x0800764b
 8007498:	0800764b 	.word	0x0800764b
 800749c:	0800764b 	.word	0x0800764b
 80074a0:	08007587 	.word	0x08007587
 80074a4:	0800764b 	.word	0x0800764b
 80074a8:	0800764b 	.word	0x0800764b
 80074ac:	0800764b 	.word	0x0800764b
 80074b0:	080075c9 	.word	0x080075c9
 80074b4:	0800764b 	.word	0x0800764b
 80074b8:	0800764b 	.word	0x0800764b
 80074bc:	0800764b 	.word	0x0800764b
 80074c0:	08007609 	.word	0x08007609
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fabc 	bl	8007a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0208 	orr.w	r2, r2, #8
 80074de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0204 	bic.w	r2, r2, #4
 80074ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6999      	ldr	r1, [r3, #24]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	619a      	str	r2, [r3, #24]
      break;
 8007502:	e0a5      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 fb36 	bl	8007b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699a      	ldr	r2, [r3, #24]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800751e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800752e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6999      	ldr	r1, [r3, #24]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	021a      	lsls	r2, r3, #8
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	619a      	str	r2, [r3, #24]
      break;
 8007544:	e084      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fba9 	bl	8007ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69da      	ldr	r2, [r3, #28]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0208 	orr.w	r2, r2, #8
 8007560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0204 	bic.w	r2, r2, #4
 8007570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69d9      	ldr	r1, [r3, #28]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	61da      	str	r2, [r3, #28]
      break;
 8007584:	e064      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fc1b 	bl	8007dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69d9      	ldr	r1, [r3, #28]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	021a      	lsls	r2, r3, #8
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	61da      	str	r2, [r3, #28]
      break;
 80075c6:	e043      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fc8e 	bl	8007ef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0208 	orr.w	r2, r2, #8
 80075e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007606:	e023      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fcd8 	bl	8007fc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007622:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007632:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	021a      	lsls	r2, r3, #8
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007648:	e002      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
      break;
 800764e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop

08007664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_TIM_ConfigClockSource+0x1c>
 800767c:	2302      	movs	r3, #2
 800767e:	e0f6      	b.n	800786e <HAL_TIM_ConfigClockSource+0x20a>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800769e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a6f      	ldr	r2, [pc, #444]	@ (8007878 <HAL_TIM_ConfigClockSource+0x214>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	f000 80c1 	beq.w	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 80076c0:	4a6d      	ldr	r2, [pc, #436]	@ (8007878 <HAL_TIM_ConfigClockSource+0x214>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	f200 80c6 	bhi.w	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 80076c8:	4a6c      	ldr	r2, [pc, #432]	@ (800787c <HAL_TIM_ConfigClockSource+0x218>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	f000 80b9 	beq.w	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 80076d0:	4a6a      	ldr	r2, [pc, #424]	@ (800787c <HAL_TIM_ConfigClockSource+0x218>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	f200 80be 	bhi.w	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 80076d8:	4a69      	ldr	r2, [pc, #420]	@ (8007880 <HAL_TIM_ConfigClockSource+0x21c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	f000 80b1 	beq.w	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 80076e0:	4a67      	ldr	r2, [pc, #412]	@ (8007880 <HAL_TIM_ConfigClockSource+0x21c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	f200 80b6 	bhi.w	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 80076e8:	4a66      	ldr	r2, [pc, #408]	@ (8007884 <HAL_TIM_ConfigClockSource+0x220>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	f000 80a9 	beq.w	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 80076f0:	4a64      	ldr	r2, [pc, #400]	@ (8007884 <HAL_TIM_ConfigClockSource+0x220>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	f200 80ae 	bhi.w	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 80076f8:	4a63      	ldr	r2, [pc, #396]	@ (8007888 <HAL_TIM_ConfigClockSource+0x224>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	f000 80a1 	beq.w	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 8007700:	4a61      	ldr	r2, [pc, #388]	@ (8007888 <HAL_TIM_ConfigClockSource+0x224>)
 8007702:	4293      	cmp	r3, r2
 8007704:	f200 80a6 	bhi.w	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 8007708:	4a60      	ldr	r2, [pc, #384]	@ (800788c <HAL_TIM_ConfigClockSource+0x228>)
 800770a:	4293      	cmp	r3, r2
 800770c:	f000 8099 	beq.w	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 8007710:	4a5e      	ldr	r2, [pc, #376]	@ (800788c <HAL_TIM_ConfigClockSource+0x228>)
 8007712:	4293      	cmp	r3, r2
 8007714:	f200 809e 	bhi.w	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 8007718:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800771c:	f000 8091 	beq.w	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 8007720:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007724:	f200 8096 	bhi.w	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 8007728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800772c:	f000 8089 	beq.w	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 8007730:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007734:	f200 808e 	bhi.w	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 8007738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800773c:	d03e      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0x158>
 800773e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007742:	f200 8087 	bhi.w	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 8007746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800774a:	f000 8086 	beq.w	800785a <HAL_TIM_ConfigClockSource+0x1f6>
 800774e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007752:	d87f      	bhi.n	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 8007754:	2b70      	cmp	r3, #112	@ 0x70
 8007756:	d01a      	beq.n	800778e <HAL_TIM_ConfigClockSource+0x12a>
 8007758:	2b70      	cmp	r3, #112	@ 0x70
 800775a:	d87b      	bhi.n	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 800775c:	2b60      	cmp	r3, #96	@ 0x60
 800775e:	d050      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0x19e>
 8007760:	2b60      	cmp	r3, #96	@ 0x60
 8007762:	d877      	bhi.n	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 8007764:	2b50      	cmp	r3, #80	@ 0x50
 8007766:	d03c      	beq.n	80077e2 <HAL_TIM_ConfigClockSource+0x17e>
 8007768:	2b50      	cmp	r3, #80	@ 0x50
 800776a:	d873      	bhi.n	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 800776c:	2b40      	cmp	r3, #64	@ 0x40
 800776e:	d058      	beq.n	8007822 <HAL_TIM_ConfigClockSource+0x1be>
 8007770:	2b40      	cmp	r3, #64	@ 0x40
 8007772:	d86f      	bhi.n	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 8007774:	2b30      	cmp	r3, #48	@ 0x30
 8007776:	d064      	beq.n	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 8007778:	2b30      	cmp	r3, #48	@ 0x30
 800777a:	d86b      	bhi.n	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 800777c:	2b20      	cmp	r3, #32
 800777e:	d060      	beq.n	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 8007780:	2b20      	cmp	r3, #32
 8007782:	d867      	bhi.n	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
 8007784:	2b00      	cmp	r3, #0
 8007786:	d05c      	beq.n	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 8007788:	2b10      	cmp	r3, #16
 800778a:	d05a      	beq.n	8007842 <HAL_TIM_ConfigClockSource+0x1de>
 800778c:	e062      	b.n	8007854 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800779e:	f000 fcf9 	bl	8008194 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	609a      	str	r2, [r3, #8]
      break;
 80077ba:	e04f      	b.n	800785c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077cc:	f000 fce2 	bl	8008194 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077de:	609a      	str	r2, [r3, #8]
      break;
 80077e0:	e03c      	b.n	800785c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ee:	461a      	mov	r2, r3
 80077f0:	f000 fc54 	bl	800809c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2150      	movs	r1, #80	@ 0x50
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fcad 	bl	800815a <TIM_ITRx_SetConfig>
      break;
 8007800:	e02c      	b.n	800785c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800780e:	461a      	mov	r2, r3
 8007810:	f000 fc73 	bl	80080fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2160      	movs	r1, #96	@ 0x60
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fc9d 	bl	800815a <TIM_ITRx_SetConfig>
      break;
 8007820:	e01c      	b.n	800785c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800782e:	461a      	mov	r2, r3
 8007830:	f000 fc34 	bl	800809c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2140      	movs	r1, #64	@ 0x40
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fc8d 	bl	800815a <TIM_ITRx_SetConfig>
      break;
 8007840:	e00c      	b.n	800785c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4619      	mov	r1, r3
 800784c:	4610      	mov	r0, r2
 800784e:	f000 fc84 	bl	800815a <TIM_ITRx_SetConfig>
      break;
 8007852:	e003      	b.n	800785c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	73fb      	strb	r3, [r7, #15]
      break;
 8007858:	e000      	b.n	800785c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800785a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	00100070 	.word	0x00100070
 800787c:	00100060 	.word	0x00100060
 8007880:	00100050 	.word	0x00100050
 8007884:	00100040 	.word	0x00100040
 8007888:	00100030 	.word	0x00100030
 800788c:	00100020 	.word	0x00100020

08007890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a4c      	ldr	r2, [pc, #304]	@ (8007a24 <TIM_Base_SetConfig+0x144>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d017      	beq.n	8007928 <TIM_Base_SetConfig+0x48>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fe:	d013      	beq.n	8007928 <TIM_Base_SetConfig+0x48>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a49      	ldr	r2, [pc, #292]	@ (8007a28 <TIM_Base_SetConfig+0x148>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00f      	beq.n	8007928 <TIM_Base_SetConfig+0x48>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a48      	ldr	r2, [pc, #288]	@ (8007a2c <TIM_Base_SetConfig+0x14c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d00b      	beq.n	8007928 <TIM_Base_SetConfig+0x48>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a47      	ldr	r2, [pc, #284]	@ (8007a30 <TIM_Base_SetConfig+0x150>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d007      	beq.n	8007928 <TIM_Base_SetConfig+0x48>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a46      	ldr	r2, [pc, #280]	@ (8007a34 <TIM_Base_SetConfig+0x154>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d003      	beq.n	8007928 <TIM_Base_SetConfig+0x48>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a45      	ldr	r2, [pc, #276]	@ (8007a38 <TIM_Base_SetConfig+0x158>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d108      	bne.n	800793a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a39      	ldr	r2, [pc, #228]	@ (8007a24 <TIM_Base_SetConfig+0x144>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d023      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007948:	d01f      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a36      	ldr	r2, [pc, #216]	@ (8007a28 <TIM_Base_SetConfig+0x148>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d01b      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a35      	ldr	r2, [pc, #212]	@ (8007a2c <TIM_Base_SetConfig+0x14c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d017      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a34      	ldr	r2, [pc, #208]	@ (8007a30 <TIM_Base_SetConfig+0x150>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a33      	ldr	r2, [pc, #204]	@ (8007a34 <TIM_Base_SetConfig+0x154>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a33      	ldr	r2, [pc, #204]	@ (8007a3c <TIM_Base_SetConfig+0x15c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a32      	ldr	r2, [pc, #200]	@ (8007a40 <TIM_Base_SetConfig+0x160>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a31      	ldr	r2, [pc, #196]	@ (8007a44 <TIM_Base_SetConfig+0x164>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_Base_SetConfig+0xaa>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a2c      	ldr	r2, [pc, #176]	@ (8007a38 <TIM_Base_SetConfig+0x158>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a18      	ldr	r2, [pc, #96]	@ (8007a24 <TIM_Base_SetConfig+0x144>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d013      	beq.n	80079f0 <TIM_Base_SetConfig+0x110>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007a34 <TIM_Base_SetConfig+0x154>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00f      	beq.n	80079f0 <TIM_Base_SetConfig+0x110>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a3c <TIM_Base_SetConfig+0x15c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00b      	beq.n	80079f0 <TIM_Base_SetConfig+0x110>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a19      	ldr	r2, [pc, #100]	@ (8007a40 <TIM_Base_SetConfig+0x160>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d007      	beq.n	80079f0 <TIM_Base_SetConfig+0x110>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a18      	ldr	r2, [pc, #96]	@ (8007a44 <TIM_Base_SetConfig+0x164>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d003      	beq.n	80079f0 <TIM_Base_SetConfig+0x110>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a13      	ldr	r2, [pc, #76]	@ (8007a38 <TIM_Base_SetConfig+0x158>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d103      	bne.n	80079f8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	691a      	ldr	r2, [r3, #16]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d105      	bne.n	8007a16 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f023 0201 	bic.w	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	611a      	str	r2, [r3, #16]
  }
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40013400 	.word	0x40013400
 8007a38:	40015000 	.word	0x40015000
 8007a3c:	40014000 	.word	0x40014000
 8007a40:	40014400 	.word	0x40014400
 8007a44:	40014800 	.word	0x40014800

08007a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	f023 0201 	bic.w	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f023 0302 	bic.w	r3, r3, #2
 8007a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a30      	ldr	r2, [pc, #192]	@ (8007b64 <TIM_OC1_SetConfig+0x11c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d013      	beq.n	8007ad0 <TIM_OC1_SetConfig+0x88>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8007b68 <TIM_OC1_SetConfig+0x120>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00f      	beq.n	8007ad0 <TIM_OC1_SetConfig+0x88>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8007b6c <TIM_OC1_SetConfig+0x124>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00b      	beq.n	8007ad0 <TIM_OC1_SetConfig+0x88>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a2d      	ldr	r2, [pc, #180]	@ (8007b70 <TIM_OC1_SetConfig+0x128>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d007      	beq.n	8007ad0 <TIM_OC1_SetConfig+0x88>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8007b74 <TIM_OC1_SetConfig+0x12c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d003      	beq.n	8007ad0 <TIM_OC1_SetConfig+0x88>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a2b      	ldr	r2, [pc, #172]	@ (8007b78 <TIM_OC1_SetConfig+0x130>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10c      	bne.n	8007aea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f023 0308 	bic.w	r3, r3, #8
 8007ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f023 0304 	bic.w	r3, r3, #4
 8007ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a1d      	ldr	r2, [pc, #116]	@ (8007b64 <TIM_OC1_SetConfig+0x11c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d013      	beq.n	8007b1a <TIM_OC1_SetConfig+0xd2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b68 <TIM_OC1_SetConfig+0x120>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00f      	beq.n	8007b1a <TIM_OC1_SetConfig+0xd2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b6c <TIM_OC1_SetConfig+0x124>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00b      	beq.n	8007b1a <TIM_OC1_SetConfig+0xd2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1a      	ldr	r2, [pc, #104]	@ (8007b70 <TIM_OC1_SetConfig+0x128>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d007      	beq.n	8007b1a <TIM_OC1_SetConfig+0xd2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a19      	ldr	r2, [pc, #100]	@ (8007b74 <TIM_OC1_SetConfig+0x12c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d003      	beq.n	8007b1a <TIM_OC1_SetConfig+0xd2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a18      	ldr	r2, [pc, #96]	@ (8007b78 <TIM_OC1_SetConfig+0x130>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d111      	bne.n	8007b3e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	621a      	str	r2, [r3, #32]
}
 8007b58:	bf00      	nop
 8007b5a:	371c      	adds	r7, #28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40013400 	.word	0x40013400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40014400 	.word	0x40014400
 8007b74:	40014800 	.word	0x40014800
 8007b78:	40015000 	.word	0x40015000

08007b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f023 0210 	bic.w	r2, r3, #16
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f023 0320 	bic.w	r3, r3, #32
 8007bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a2c      	ldr	r2, [pc, #176]	@ (8007c8c <TIM_OC2_SetConfig+0x110>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d007      	beq.n	8007bf0 <TIM_OC2_SetConfig+0x74>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a2b      	ldr	r2, [pc, #172]	@ (8007c90 <TIM_OC2_SetConfig+0x114>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d003      	beq.n	8007bf0 <TIM_OC2_SetConfig+0x74>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a2a      	ldr	r2, [pc, #168]	@ (8007c94 <TIM_OC2_SetConfig+0x118>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10d      	bne.n	8007c0c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007c8c <TIM_OC2_SetConfig+0x110>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <TIM_OC2_SetConfig+0xc0>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a1e      	ldr	r2, [pc, #120]	@ (8007c90 <TIM_OC2_SetConfig+0x114>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00f      	beq.n	8007c3c <TIM_OC2_SetConfig+0xc0>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007c98 <TIM_OC2_SetConfig+0x11c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00b      	beq.n	8007c3c <TIM_OC2_SetConfig+0xc0>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a1d      	ldr	r2, [pc, #116]	@ (8007c9c <TIM_OC2_SetConfig+0x120>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d007      	beq.n	8007c3c <TIM_OC2_SetConfig+0xc0>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca0 <TIM_OC2_SetConfig+0x124>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_OC2_SetConfig+0xc0>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a17      	ldr	r2, [pc, #92]	@ (8007c94 <TIM_OC2_SetConfig+0x118>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d113      	bne.n	8007c64 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	621a      	str	r2, [r3, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40013400 	.word	0x40013400
 8007c94:	40015000 	.word	0x40015000
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40014400 	.word	0x40014400
 8007ca0:	40014800 	.word	0x40014800

08007ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0303 	bic.w	r3, r3, #3
 8007cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a2b      	ldr	r2, [pc, #172]	@ (8007db0 <TIM_OC3_SetConfig+0x10c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d007      	beq.n	8007d16 <TIM_OC3_SetConfig+0x72>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a2a      	ldr	r2, [pc, #168]	@ (8007db4 <TIM_OC3_SetConfig+0x110>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d003      	beq.n	8007d16 <TIM_OC3_SetConfig+0x72>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a29      	ldr	r2, [pc, #164]	@ (8007db8 <TIM_OC3_SetConfig+0x114>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d10d      	bne.n	8007d32 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a1e      	ldr	r2, [pc, #120]	@ (8007db0 <TIM_OC3_SetConfig+0x10c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d013      	beq.n	8007d62 <TIM_OC3_SetConfig+0xbe>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007db4 <TIM_OC3_SetConfig+0x110>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00f      	beq.n	8007d62 <TIM_OC3_SetConfig+0xbe>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a1d      	ldr	r2, [pc, #116]	@ (8007dbc <TIM_OC3_SetConfig+0x118>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00b      	beq.n	8007d62 <TIM_OC3_SetConfig+0xbe>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc0 <TIM_OC3_SetConfig+0x11c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d007      	beq.n	8007d62 <TIM_OC3_SetConfig+0xbe>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc4 <TIM_OC3_SetConfig+0x120>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d003      	beq.n	8007d62 <TIM_OC3_SetConfig+0xbe>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a16      	ldr	r2, [pc, #88]	@ (8007db8 <TIM_OC3_SetConfig+0x114>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d113      	bne.n	8007d8a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	621a      	str	r2, [r3, #32]
}
 8007da4:	bf00      	nop
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	40012c00 	.word	0x40012c00
 8007db4:	40013400 	.word	0x40013400
 8007db8:	40015000 	.word	0x40015000
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40014400 	.word	0x40014400
 8007dc4:	40014800 	.word	0x40014800

08007dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	031b      	lsls	r3, r3, #12
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a2c      	ldr	r2, [pc, #176]	@ (8007ed8 <TIM_OC4_SetConfig+0x110>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d007      	beq.n	8007e3c <TIM_OC4_SetConfig+0x74>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8007edc <TIM_OC4_SetConfig+0x114>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <TIM_OC4_SetConfig+0x74>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a2a      	ldr	r2, [pc, #168]	@ (8007ee0 <TIM_OC4_SetConfig+0x118>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d10d      	bne.n	8007e58 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	031b      	lsls	r3, r3, #12
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed8 <TIM_OC4_SetConfig+0x110>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <TIM_OC4_SetConfig+0xc0>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a1e      	ldr	r2, [pc, #120]	@ (8007edc <TIM_OC4_SetConfig+0x114>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d00f      	beq.n	8007e88 <TIM_OC4_SetConfig+0xc0>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee4 <TIM_OC4_SetConfig+0x11c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d00b      	beq.n	8007e88 <TIM_OC4_SetConfig+0xc0>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee8 <TIM_OC4_SetConfig+0x120>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d007      	beq.n	8007e88 <TIM_OC4_SetConfig+0xc0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8007eec <TIM_OC4_SetConfig+0x124>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_OC4_SetConfig+0xc0>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a17      	ldr	r2, [pc, #92]	@ (8007ee0 <TIM_OC4_SetConfig+0x118>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d113      	bne.n	8007eb0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	019b      	lsls	r3, r3, #6
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	019b      	lsls	r3, r3, #6
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40012c00 	.word	0x40012c00
 8007edc:	40013400 	.word	0x40013400
 8007ee0:	40015000 	.word	0x40015000
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800

08007ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	041b      	lsls	r3, r3, #16
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a19      	ldr	r2, [pc, #100]	@ (8007fac <TIM_OC5_SetConfig+0xbc>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d013      	beq.n	8007f72 <TIM_OC5_SetConfig+0x82>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a18      	ldr	r2, [pc, #96]	@ (8007fb0 <TIM_OC5_SetConfig+0xc0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00f      	beq.n	8007f72 <TIM_OC5_SetConfig+0x82>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a17      	ldr	r2, [pc, #92]	@ (8007fb4 <TIM_OC5_SetConfig+0xc4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00b      	beq.n	8007f72 <TIM_OC5_SetConfig+0x82>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a16      	ldr	r2, [pc, #88]	@ (8007fb8 <TIM_OC5_SetConfig+0xc8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d007      	beq.n	8007f72 <TIM_OC5_SetConfig+0x82>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a15      	ldr	r2, [pc, #84]	@ (8007fbc <TIM_OC5_SetConfig+0xcc>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_OC5_SetConfig+0x82>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a14      	ldr	r2, [pc, #80]	@ (8007fc0 <TIM_OC5_SetConfig+0xd0>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d109      	bne.n	8007f86 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	021b      	lsls	r3, r3, #8
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	621a      	str	r2, [r3, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	40012c00 	.word	0x40012c00
 8007fb0:	40013400 	.word	0x40013400
 8007fb4:	40014000 	.word	0x40014000
 8007fb8:	40014400 	.word	0x40014400
 8007fbc:	40014800 	.word	0x40014800
 8007fc0:	40015000 	.word	0x40015000

08007fc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800800a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	051b      	lsls	r3, r3, #20
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a1a      	ldr	r2, [pc, #104]	@ (8008084 <TIM_OC6_SetConfig+0xc0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d013      	beq.n	8008048 <TIM_OC6_SetConfig+0x84>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a19      	ldr	r2, [pc, #100]	@ (8008088 <TIM_OC6_SetConfig+0xc4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d00f      	beq.n	8008048 <TIM_OC6_SetConfig+0x84>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a18      	ldr	r2, [pc, #96]	@ (800808c <TIM_OC6_SetConfig+0xc8>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00b      	beq.n	8008048 <TIM_OC6_SetConfig+0x84>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a17      	ldr	r2, [pc, #92]	@ (8008090 <TIM_OC6_SetConfig+0xcc>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d007      	beq.n	8008048 <TIM_OC6_SetConfig+0x84>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a16      	ldr	r2, [pc, #88]	@ (8008094 <TIM_OC6_SetConfig+0xd0>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_OC6_SetConfig+0x84>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a15      	ldr	r2, [pc, #84]	@ (8008098 <TIM_OC6_SetConfig+0xd4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d109      	bne.n	800805c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800804e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	029b      	lsls	r3, r3, #10
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	4313      	orrs	r3, r2
 800805a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	621a      	str	r2, [r3, #32]
}
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40012c00 	.word	0x40012c00
 8008088:	40013400 	.word	0x40013400
 800808c:	40014000 	.word	0x40014000
 8008090:	40014400 	.word	0x40014400
 8008094:	40014800 	.word	0x40014800
 8008098:	40015000 	.word	0x40015000

0800809c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f023 0201 	bic.w	r2, r3, #1
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f023 030a 	bic.w	r3, r3, #10
 80080d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4313      	orrs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	621a      	str	r2, [r3, #32]
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b087      	sub	sp, #28
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	f023 0210 	bic.w	r2, r3, #16
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	031b      	lsls	r3, r3, #12
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008136:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	621a      	str	r2, [r3, #32]
}
 800814e:	bf00      	nop
 8008150:	371c      	adds	r7, #28
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	f043 0307 	orr.w	r3, r3, #7
 8008180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	609a      	str	r2, [r3, #8]
}
 8008188:	bf00      	nop
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008194:	b480      	push	{r7}
 8008196:	b087      	sub	sp, #28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	021a      	lsls	r2, r3, #8
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	431a      	orrs	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	4313      	orrs	r3, r2
 80081c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	609a      	str	r2, [r3, #8]
}
 80081c8:	bf00      	nop
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	2201      	movs	r2, #1
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1a      	ldr	r2, [r3, #32]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	43db      	mvns	r3, r3
 80081f6:	401a      	ands	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6a1a      	ldr	r2, [r3, #32]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	fa01 f303 	lsl.w	r3, r1, r3
 800820c:	431a      	orrs	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	621a      	str	r2, [r3, #32]
}
 8008212:	bf00      	nop
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
	...

08008220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008234:	2302      	movs	r3, #2
 8008236:	e074      	b.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a34      	ldr	r2, [pc, #208]	@ (8008330 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d009      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a33      	ldr	r2, [pc, #204]	@ (8008334 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d004      	beq.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a31      	ldr	r2, [pc, #196]	@ (8008338 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d108      	bne.n	8008288 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800827c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	4313      	orrs	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800828e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a21      	ldr	r2, [pc, #132]	@ (8008330 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d022      	beq.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b8:	d01d      	beq.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a1f      	ldr	r2, [pc, #124]	@ (800833c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d018      	beq.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008340 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d013      	beq.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008344 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d00e      	beq.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a15      	ldr	r2, [pc, #84]	@ (8008334 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d009      	beq.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a18      	ldr	r2, [pc, #96]	@ (8008348 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d004      	beq.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a11      	ldr	r2, [pc, #68]	@ (8008338 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d10c      	bne.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	4313      	orrs	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40012c00 	.word	0x40012c00
 8008334:	40013400 	.word	0x40013400
 8008338:	40015000 	.word	0x40015000
 800833c:	40000400 	.word	0x40000400
 8008340:	40000800 	.word	0x40000800
 8008344:	40000c00 	.word	0x40000c00
 8008348:	40014000 	.word	0x40014000

0800834c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e042      	b.n	8008470 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fa fd85 	bl	8002f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2224      	movs	r2, #36	@ 0x24
 8008406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0201 	bic.w	r2, r2, #1
 8008418:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 feb4 	bl	8009190 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fbb5 	bl	8008b98 <UART_SetConfig>
 800842e:	4603      	mov	r3, r0
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e01b      	b.n	8008470 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689a      	ldr	r2, [r3, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0201 	orr.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 ff33 	bl	80092d4 <UART_CheckIdleState>
 800846e:	4603      	mov	r3, r0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	@ 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800848c:	2b20      	cmp	r3, #32
 800848e:	d137      	bne.n	8008500 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_UART_Receive_IT+0x24>
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e030      	b.n	8008502 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a18      	ldr	r2, [pc, #96]	@ (800850c <HAL_UART_Receive_IT+0x94>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d01f      	beq.n	80084f0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d018      	beq.n	80084f0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	613b      	str	r3, [r7, #16]
   return(result);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	623b      	str	r3, [r7, #32]
 80084de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	69f9      	ldr	r1, [r7, #28]
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e6      	bne.n	80084be <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80084f0:	88fb      	ldrh	r3, [r7, #6]
 80084f2:	461a      	mov	r2, r3
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f001 f804 	bl	8009504 <UART_Start_Receive_IT>
 80084fc:	4603      	mov	r3, r0
 80084fe:	e000      	b.n	8008502 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008500:	2302      	movs	r3, #2
  }
}
 8008502:	4618      	mov	r0, r3
 8008504:	3728      	adds	r7, #40	@ 0x28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	40008000 	.word	0x40008000

08008510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b0ba      	sub	sp, #232	@ 0xe8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800853a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800853e:	4013      	ands	r3, r2
 8008540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d11b      	bne.n	8008584 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	d015      	beq.n	8008584 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d105      	bne.n	8008570 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 82e3 	beq.w	8008b40 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
      }
      return;
 8008582:	e2dd      	b.n	8008b40 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8123 	beq.w	80087d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800858e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008592:	4b8d      	ldr	r3, [pc, #564]	@ (80087c8 <HAL_UART_IRQHandler+0x2b8>)
 8008594:	4013      	ands	r3, r2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800859a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800859e:	4b8b      	ldr	r3, [pc, #556]	@ (80087cc <HAL_UART_IRQHandler+0x2bc>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 8116 	beq.w	80087d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d011      	beq.n	80085d8 <HAL_UART_IRQHandler+0xc8>
 80085b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00b      	beq.n	80085d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2201      	movs	r2, #1
 80085c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ce:	f043 0201 	orr.w	r2, r3, #1
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d011      	beq.n	8008608 <HAL_UART_IRQHandler+0xf8>
 80085e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2202      	movs	r2, #2
 80085f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fe:	f043 0204 	orr.w	r2, r3, #4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d011      	beq.n	8008638 <HAL_UART_IRQHandler+0x128>
 8008614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2204      	movs	r2, #4
 8008626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862e:	f043 0202 	orr.w	r2, r3, #2
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	d017      	beq.n	8008674 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d105      	bne.n	800865c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008650:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008654:	4b5c      	ldr	r3, [pc, #368]	@ (80087c8 <HAL_UART_IRQHandler+0x2b8>)
 8008656:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2208      	movs	r2, #8
 8008662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866a:	f043 0208 	orr.w	r2, r3, #8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800867c:	2b00      	cmp	r3, #0
 800867e:	d012      	beq.n	80086a6 <HAL_UART_IRQHandler+0x196>
 8008680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00c      	beq.n	80086a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800869c:	f043 0220 	orr.w	r2, r3, #32
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 8249 	beq.w	8008b44 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d013      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d105      	bne.n	80086d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fa:	2b40      	cmp	r3, #64	@ 0x40
 80086fc:	d005      	beq.n	800870a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008702:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008706:	2b00      	cmp	r3, #0
 8008708:	d054      	beq.n	80087b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 f81c 	bl	8009748 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871a:	2b40      	cmp	r3, #64	@ 0x40
 800871c:	d146      	bne.n	80087ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800873c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800874a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800874e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1d9      	bne.n	800871e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008770:	2b00      	cmp	r3, #0
 8008772:	d017      	beq.n	80087a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877a:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <HAL_UART_IRQHandler+0x2c0>)
 800877c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008784:	4618      	mov	r0, r3
 8008786:	f7fc fd57 	bl	8005238 <HAL_DMA_Abort_IT>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d019      	beq.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800879e:	4610      	mov	r0, r2
 80087a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a2:	e00f      	b.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f9e1 	bl	8008b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087aa:	e00b      	b.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f9dd 	bl	8008b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b2:	e007      	b.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9d9 	bl	8008b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80087c2:	e1bf      	b.n	8008b44 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c4:	bf00      	nop
    return;
 80087c6:	e1bd      	b.n	8008b44 <HAL_UART_IRQHandler+0x634>
 80087c8:	10000001 	.word	0x10000001
 80087cc:	04000120 	.word	0x04000120
 80087d0:	08009815 	.word	0x08009815

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087d8:	2b01      	cmp	r3, #1
 80087da:	f040 8153 	bne.w	8008a84 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087e2:	f003 0310 	and.w	r3, r3, #16
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 814c 	beq.w	8008a84 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8145 	beq.w	8008a84 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2210      	movs	r2, #16
 8008800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880c:	2b40      	cmp	r3, #64	@ 0x40
 800880e:	f040 80bb 	bne.w	8008988 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 818f 	beq.w	8008b48 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008834:	429a      	cmp	r2, r3
 8008836:	f080 8187 	bcs.w	8008b48 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008840:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	f040 8087 	bne.w	8008966 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800886c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008886:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800888e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800889a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1da      	bne.n	8008858 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3308      	adds	r3, #8
 80088a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088ac:	e853 3f00 	ldrex	r3, [r3]
 80088b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088b4:	f023 0301 	bic.w	r3, r3, #1
 80088b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3308      	adds	r3, #8
 80088c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e1      	bne.n	80088a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3308      	adds	r3, #8
 80088e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3308      	adds	r3, #8
 80088fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008904:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008908:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e3      	bne.n	80088de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008934:	f023 0310 	bic.w	r3, r3, #16
 8008938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008946:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008948:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800894c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e4      	bne.n	8008924 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008960:	4618      	mov	r0, r3
 8008962:	f7fc fc10 	bl	8005186 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2202      	movs	r2, #2
 800896a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008978:	b29b      	uxth	r3, r3
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	b29b      	uxth	r3, r3
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f8fd 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008986:	e0df      	b.n	8008b48 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008994:	b29b      	uxth	r3, r3
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 80d1 	beq.w	8008b4c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80089aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 80cc 	beq.w	8008b4c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80089d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e4      	bne.n	80089b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3308      	adds	r3, #8
 80089f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	623b      	str	r3, [r7, #32]
   return(result);
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a00:	f023 0301 	bic.w	r3, r3, #1
 8008a04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a12:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e1      	bne.n	80089ea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0310 	bic.w	r3, r3, #16
 8008a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a5c:	61fb      	str	r3, [r7, #28]
 8008a5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	69b9      	ldr	r1, [r7, #24]
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	e841 2300 	strex	r3, r2, [r1]
 8008a68:	617b      	str	r3, [r7, #20]
   return(result);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1e4      	bne.n	8008a3a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f87f 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a82:	e063      	b.n	8008b4c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <HAL_UART_IRQHandler+0x59e>
 8008a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d008      	beq.n	8008aae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 fc12 	bl	800a2d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aac:	e051      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d014      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d105      	bne.n	8008ad2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d008      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d03a      	beq.n	8008b50 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
    }
    return;
 8008ae2:	e035      	b.n	8008b50 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <HAL_UART_IRQHandler+0x5f4>
 8008af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fe9f 	bl	8009840 <UART_EndTransmit_IT>
    return;
 8008b02:	e026      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <HAL_UART_IRQHandler+0x614>
 8008b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 fbeb 	bl	800a2f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b22:	e016      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d010      	beq.n	8008b52 <HAL_UART_IRQHandler+0x642>
 8008b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	da0c      	bge.n	8008b52 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 fbd3 	bl	800a2e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b3e:	e008      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
      return;
 8008b40:	bf00      	nop
 8008b42:	e006      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
    return;
 8008b44:	bf00      	nop
 8008b46:	e004      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
      return;
 8008b48:	bf00      	nop
 8008b4a:	e002      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
      return;
 8008b4c:	bf00      	nop
 8008b4e:	e000      	b.n	8008b52 <HAL_UART_IRQHandler+0x642>
    return;
 8008b50:	bf00      	nop
  }
}
 8008b52:	37e8      	adds	r7, #232	@ 0xe8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b9c:	b08c      	sub	sp, #48	@ 0x30
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	4baa      	ldr	r3, [pc, #680]	@ (8008e70 <UART_SetConfig+0x2d8>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a9f      	ldr	r2, [pc, #636]	@ (8008e74 <UART_SetConfig+0x2dc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d004      	beq.n	8008c04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c00:	4313      	orrs	r3, r2
 8008c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008c0e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	6812      	ldr	r2, [r2, #0]
 8008c16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c22:	f023 010f 	bic.w	r1, r3, #15
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a90      	ldr	r2, [pc, #576]	@ (8008e78 <UART_SetConfig+0x2e0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d125      	bne.n	8008c88 <UART_SetConfig+0xf0>
 8008c3c:	4b8f      	ldr	r3, [pc, #572]	@ (8008e7c <UART_SetConfig+0x2e4>)
 8008c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d81a      	bhi.n	8008c80 <UART_SetConfig+0xe8>
 8008c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c50 <UART_SetConfig+0xb8>)
 8008c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c50:	08008c61 	.word	0x08008c61
 8008c54:	08008c71 	.word	0x08008c71
 8008c58:	08008c69 	.word	0x08008c69
 8008c5c:	08008c79 	.word	0x08008c79
 8008c60:	2301      	movs	r3, #1
 8008c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c66:	e116      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008c68:	2302      	movs	r3, #2
 8008c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c6e:	e112      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008c70:	2304      	movs	r3, #4
 8008c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c76:	e10e      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008c78:	2308      	movs	r3, #8
 8008c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c7e:	e10a      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008c80:	2310      	movs	r3, #16
 8008c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c86:	e106      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a7c      	ldr	r2, [pc, #496]	@ (8008e80 <UART_SetConfig+0x2e8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d138      	bne.n	8008d04 <UART_SetConfig+0x16c>
 8008c92:	4b7a      	ldr	r3, [pc, #488]	@ (8008e7c <UART_SetConfig+0x2e4>)
 8008c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c98:	f003 030c 	and.w	r3, r3, #12
 8008c9c:	2b0c      	cmp	r3, #12
 8008c9e:	d82d      	bhi.n	8008cfc <UART_SetConfig+0x164>
 8008ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca8 <UART_SetConfig+0x110>)
 8008ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca6:	bf00      	nop
 8008ca8:	08008cdd 	.word	0x08008cdd
 8008cac:	08008cfd 	.word	0x08008cfd
 8008cb0:	08008cfd 	.word	0x08008cfd
 8008cb4:	08008cfd 	.word	0x08008cfd
 8008cb8:	08008ced 	.word	0x08008ced
 8008cbc:	08008cfd 	.word	0x08008cfd
 8008cc0:	08008cfd 	.word	0x08008cfd
 8008cc4:	08008cfd 	.word	0x08008cfd
 8008cc8:	08008ce5 	.word	0x08008ce5
 8008ccc:	08008cfd 	.word	0x08008cfd
 8008cd0:	08008cfd 	.word	0x08008cfd
 8008cd4:	08008cfd 	.word	0x08008cfd
 8008cd8:	08008cf5 	.word	0x08008cf5
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ce2:	e0d8      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cea:	e0d4      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008cec:	2304      	movs	r3, #4
 8008cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cf2:	e0d0      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cfa:	e0cc      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d02:	e0c8      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a5e      	ldr	r2, [pc, #376]	@ (8008e84 <UART_SetConfig+0x2ec>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d125      	bne.n	8008d5a <UART_SetConfig+0x1c2>
 8008d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8008e7c <UART_SetConfig+0x2e4>)
 8008d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008d18:	2b30      	cmp	r3, #48	@ 0x30
 8008d1a:	d016      	beq.n	8008d4a <UART_SetConfig+0x1b2>
 8008d1c:	2b30      	cmp	r3, #48	@ 0x30
 8008d1e:	d818      	bhi.n	8008d52 <UART_SetConfig+0x1ba>
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d00a      	beq.n	8008d3a <UART_SetConfig+0x1a2>
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	d814      	bhi.n	8008d52 <UART_SetConfig+0x1ba>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <UART_SetConfig+0x19a>
 8008d2c:	2b10      	cmp	r3, #16
 8008d2e:	d008      	beq.n	8008d42 <UART_SetConfig+0x1aa>
 8008d30:	e00f      	b.n	8008d52 <UART_SetConfig+0x1ba>
 8008d32:	2300      	movs	r3, #0
 8008d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d38:	e0ad      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d40:	e0a9      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008d42:	2304      	movs	r3, #4
 8008d44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d48:	e0a5      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008d4a:	2308      	movs	r3, #8
 8008d4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d50:	e0a1      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008d52:	2310      	movs	r3, #16
 8008d54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d58:	e09d      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a4a      	ldr	r2, [pc, #296]	@ (8008e88 <UART_SetConfig+0x2f0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d125      	bne.n	8008db0 <UART_SetConfig+0x218>
 8008d64:	4b45      	ldr	r3, [pc, #276]	@ (8008e7c <UART_SetConfig+0x2e4>)
 8008d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d70:	d016      	beq.n	8008da0 <UART_SetConfig+0x208>
 8008d72:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d74:	d818      	bhi.n	8008da8 <UART_SetConfig+0x210>
 8008d76:	2b80      	cmp	r3, #128	@ 0x80
 8008d78:	d00a      	beq.n	8008d90 <UART_SetConfig+0x1f8>
 8008d7a:	2b80      	cmp	r3, #128	@ 0x80
 8008d7c:	d814      	bhi.n	8008da8 <UART_SetConfig+0x210>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <UART_SetConfig+0x1f0>
 8008d82:	2b40      	cmp	r3, #64	@ 0x40
 8008d84:	d008      	beq.n	8008d98 <UART_SetConfig+0x200>
 8008d86:	e00f      	b.n	8008da8 <UART_SetConfig+0x210>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d8e:	e082      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008d90:	2302      	movs	r3, #2
 8008d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d96:	e07e      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008d98:	2304      	movs	r3, #4
 8008d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d9e:	e07a      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008da0:	2308      	movs	r3, #8
 8008da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008da6:	e076      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008da8:	2310      	movs	r3, #16
 8008daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dae:	e072      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a35      	ldr	r2, [pc, #212]	@ (8008e8c <UART_SetConfig+0x2f4>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d12a      	bne.n	8008e10 <UART_SetConfig+0x278>
 8008dba:	4b30      	ldr	r3, [pc, #192]	@ (8008e7c <UART_SetConfig+0x2e4>)
 8008dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dc8:	d01a      	beq.n	8008e00 <UART_SetConfig+0x268>
 8008dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dce:	d81b      	bhi.n	8008e08 <UART_SetConfig+0x270>
 8008dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dd4:	d00c      	beq.n	8008df0 <UART_SetConfig+0x258>
 8008dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dda:	d815      	bhi.n	8008e08 <UART_SetConfig+0x270>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d003      	beq.n	8008de8 <UART_SetConfig+0x250>
 8008de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008de4:	d008      	beq.n	8008df8 <UART_SetConfig+0x260>
 8008de6:	e00f      	b.n	8008e08 <UART_SetConfig+0x270>
 8008de8:	2300      	movs	r3, #0
 8008dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dee:	e052      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008df0:	2302      	movs	r3, #2
 8008df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008df6:	e04e      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008df8:	2304      	movs	r3, #4
 8008dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dfe:	e04a      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008e00:	2308      	movs	r3, #8
 8008e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e06:	e046      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008e08:	2310      	movs	r3, #16
 8008e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e0e:	e042      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a17      	ldr	r2, [pc, #92]	@ (8008e74 <UART_SetConfig+0x2dc>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d13a      	bne.n	8008e90 <UART_SetConfig+0x2f8>
 8008e1a:	4b18      	ldr	r3, [pc, #96]	@ (8008e7c <UART_SetConfig+0x2e4>)
 8008e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e28:	d01a      	beq.n	8008e60 <UART_SetConfig+0x2c8>
 8008e2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e2e:	d81b      	bhi.n	8008e68 <UART_SetConfig+0x2d0>
 8008e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e34:	d00c      	beq.n	8008e50 <UART_SetConfig+0x2b8>
 8008e36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e3a:	d815      	bhi.n	8008e68 <UART_SetConfig+0x2d0>
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <UART_SetConfig+0x2b0>
 8008e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e44:	d008      	beq.n	8008e58 <UART_SetConfig+0x2c0>
 8008e46:	e00f      	b.n	8008e68 <UART_SetConfig+0x2d0>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e4e:	e022      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008e50:	2302      	movs	r3, #2
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e56:	e01e      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008e58:	2304      	movs	r3, #4
 8008e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e5e:	e01a      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008e60:	2308      	movs	r3, #8
 8008e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e66:	e016      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008e68:	2310      	movs	r3, #16
 8008e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e6e:	e012      	b.n	8008e96 <UART_SetConfig+0x2fe>
 8008e70:	cfff69f3 	.word	0xcfff69f3
 8008e74:	40008000 	.word	0x40008000
 8008e78:	40013800 	.word	0x40013800
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	40004400 	.word	0x40004400
 8008e84:	40004800 	.word	0x40004800
 8008e88:	40004c00 	.word	0x40004c00
 8008e8c:	40005000 	.word	0x40005000
 8008e90:	2310      	movs	r3, #16
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4aae      	ldr	r2, [pc, #696]	@ (8009154 <UART_SetConfig+0x5bc>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	f040 8097 	bne.w	8008fd0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d823      	bhi.n	8008ef2 <UART_SetConfig+0x35a>
 8008eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb0 <UART_SetConfig+0x318>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008ed5 	.word	0x08008ed5
 8008eb4:	08008ef3 	.word	0x08008ef3
 8008eb8:	08008edd 	.word	0x08008edd
 8008ebc:	08008ef3 	.word	0x08008ef3
 8008ec0:	08008ee3 	.word	0x08008ee3
 8008ec4:	08008ef3 	.word	0x08008ef3
 8008ec8:	08008ef3 	.word	0x08008ef3
 8008ecc:	08008ef3 	.word	0x08008ef3
 8008ed0:	08008eeb 	.word	0x08008eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed4:	f7fd faba 	bl	800644c <HAL_RCC_GetPCLK1Freq>
 8008ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eda:	e010      	b.n	8008efe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008edc:	4b9e      	ldr	r3, [pc, #632]	@ (8009158 <UART_SetConfig+0x5c0>)
 8008ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ee0:	e00d      	b.n	8008efe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ee2:	f7fd fa45 	bl	8006370 <HAL_RCC_GetSysClockFreq>
 8008ee6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ee8:	e009      	b.n	8008efe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ef0:	e005      	b.n	8008efe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008efc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8130 	beq.w	8009166 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0a:	4a94      	ldr	r2, [pc, #592]	@ (800915c <UART_SetConfig+0x5c4>)
 8008f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f10:	461a      	mov	r2, r3
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	4413      	add	r3, r2
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d305      	bcc.n	8008f36 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d903      	bls.n	8008f3e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f3c:	e113      	b.n	8009166 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f40:	2200      	movs	r2, #0
 8008f42:	60bb      	str	r3, [r7, #8]
 8008f44:	60fa      	str	r2, [r7, #12]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4a:	4a84      	ldr	r2, [pc, #528]	@ (800915c <UART_SetConfig+0x5c4>)
 8008f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	2200      	movs	r2, #0
 8008f54:	603b      	str	r3, [r7, #0]
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f60:	f7f7 fe00 	bl	8000b64 <__aeabi_uldivmod>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	f04f 0300 	mov.w	r3, #0
 8008f74:	020b      	lsls	r3, r1, #8
 8008f76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f7a:	0202      	lsls	r2, r0, #8
 8008f7c:	6979      	ldr	r1, [r7, #20]
 8008f7e:	6849      	ldr	r1, [r1, #4]
 8008f80:	0849      	lsrs	r1, r1, #1
 8008f82:	2000      	movs	r0, #0
 8008f84:	460c      	mov	r4, r1
 8008f86:	4605      	mov	r5, r0
 8008f88:	eb12 0804 	adds.w	r8, r2, r4
 8008f8c:	eb43 0905 	adc.w	r9, r3, r5
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	469a      	mov	sl, r3
 8008f98:	4693      	mov	fp, r2
 8008f9a:	4652      	mov	r2, sl
 8008f9c:	465b      	mov	r3, fp
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	f7f7 fddf 	bl	8000b64 <__aeabi_uldivmod>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4613      	mov	r3, r2
 8008fac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fb4:	d308      	bcc.n	8008fc8 <UART_SetConfig+0x430>
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fbc:	d204      	bcs.n	8008fc8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6a3a      	ldr	r2, [r7, #32]
 8008fc4:	60da      	str	r2, [r3, #12]
 8008fc6:	e0ce      	b.n	8009166 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008fce:	e0ca      	b.n	8009166 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fd8:	d166      	bne.n	80090a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008fda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fde:	2b08      	cmp	r3, #8
 8008fe0:	d827      	bhi.n	8009032 <UART_SetConfig+0x49a>
 8008fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe8 <UART_SetConfig+0x450>)
 8008fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe8:	0800900d 	.word	0x0800900d
 8008fec:	08009015 	.word	0x08009015
 8008ff0:	0800901d 	.word	0x0800901d
 8008ff4:	08009033 	.word	0x08009033
 8008ff8:	08009023 	.word	0x08009023
 8008ffc:	08009033 	.word	0x08009033
 8009000:	08009033 	.word	0x08009033
 8009004:	08009033 	.word	0x08009033
 8009008:	0800902b 	.word	0x0800902b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800900c:	f7fd fa1e 	bl	800644c <HAL_RCC_GetPCLK1Freq>
 8009010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009012:	e014      	b.n	800903e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009014:	f7fd fa30 	bl	8006478 <HAL_RCC_GetPCLK2Freq>
 8009018:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800901a:	e010      	b.n	800903e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800901c:	4b4e      	ldr	r3, [pc, #312]	@ (8009158 <UART_SetConfig+0x5c0>)
 800901e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009020:	e00d      	b.n	800903e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009022:	f7fd f9a5 	bl	8006370 <HAL_RCC_GetSysClockFreq>
 8009026:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009028:	e009      	b.n	800903e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800902a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800902e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009030:	e005      	b.n	800903e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800903c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800903e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 8090 	beq.w	8009166 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904a:	4a44      	ldr	r2, [pc, #272]	@ (800915c <UART_SetConfig+0x5c4>)
 800904c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009050:	461a      	mov	r2, r3
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	fbb3 f3f2 	udiv	r3, r3, r2
 8009058:	005a      	lsls	r2, r3, #1
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	085b      	lsrs	r3, r3, #1
 8009060:	441a      	add	r2, r3
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	fbb2 f3f3 	udiv	r3, r2, r3
 800906a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	2b0f      	cmp	r3, #15
 8009070:	d916      	bls.n	80090a0 <UART_SetConfig+0x508>
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009078:	d212      	bcs.n	80090a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	b29b      	uxth	r3, r3
 800907e:	f023 030f 	bic.w	r3, r3, #15
 8009082:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	b29b      	uxth	r3, r3
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	b29a      	uxth	r2, r3
 8009090:	8bfb      	ldrh	r3, [r7, #30]
 8009092:	4313      	orrs	r3, r2
 8009094:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	8bfa      	ldrh	r2, [r7, #30]
 800909c:	60da      	str	r2, [r3, #12]
 800909e:	e062      	b.n	8009166 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090a6:	e05e      	b.n	8009166 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090ac:	2b08      	cmp	r3, #8
 80090ae:	d828      	bhi.n	8009102 <UART_SetConfig+0x56a>
 80090b0:	a201      	add	r2, pc, #4	@ (adr r2, 80090b8 <UART_SetConfig+0x520>)
 80090b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b6:	bf00      	nop
 80090b8:	080090dd 	.word	0x080090dd
 80090bc:	080090e5 	.word	0x080090e5
 80090c0:	080090ed 	.word	0x080090ed
 80090c4:	08009103 	.word	0x08009103
 80090c8:	080090f3 	.word	0x080090f3
 80090cc:	08009103 	.word	0x08009103
 80090d0:	08009103 	.word	0x08009103
 80090d4:	08009103 	.word	0x08009103
 80090d8:	080090fb 	.word	0x080090fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090dc:	f7fd f9b6 	bl	800644c <HAL_RCC_GetPCLK1Freq>
 80090e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090e2:	e014      	b.n	800910e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090e4:	f7fd f9c8 	bl	8006478 <HAL_RCC_GetPCLK2Freq>
 80090e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090ea:	e010      	b.n	800910e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009158 <UART_SetConfig+0x5c0>)
 80090ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090f0:	e00d      	b.n	800910e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090f2:	f7fd f93d 	bl	8006370 <HAL_RCC_GetSysClockFreq>
 80090f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090f8:	e009      	b.n	800910e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009100:	e005      	b.n	800910e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800910c:	bf00      	nop
    }

    if (pclk != 0U)
 800910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009110:	2b00      	cmp	r3, #0
 8009112:	d028      	beq.n	8009166 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009118:	4a10      	ldr	r2, [pc, #64]	@ (800915c <UART_SetConfig+0x5c4>)
 800911a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800911e:	461a      	mov	r2, r3
 8009120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009122:	fbb3 f2f2 	udiv	r2, r3, r2
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	085b      	lsrs	r3, r3, #1
 800912c:	441a      	add	r2, r3
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	fbb2 f3f3 	udiv	r3, r2, r3
 8009136:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	2b0f      	cmp	r3, #15
 800913c:	d910      	bls.n	8009160 <UART_SetConfig+0x5c8>
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009144:	d20c      	bcs.n	8009160 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	b29a      	uxth	r2, r3
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60da      	str	r2, [r3, #12]
 8009150:	e009      	b.n	8009166 <UART_SetConfig+0x5ce>
 8009152:	bf00      	nop
 8009154:	40008000 	.word	0x40008000
 8009158:	00f42400 	.word	0x00f42400
 800915c:	0800a59c 	.word	0x0800a59c
      }
      else
      {
        ret = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2201      	movs	r2, #1
 800916a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2201      	movs	r2, #1
 8009172:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2200      	movs	r2, #0
 800917a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2200      	movs	r2, #0
 8009180:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009182:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009186:	4618      	mov	r0, r3
 8009188:	3730      	adds	r7, #48	@ 0x30
 800918a:	46bd      	mov	sp, r7
 800918c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919c:	f003 0308 	and.w	r3, r3, #8
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00a      	beq.n	80091ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009202:	f003 0304 	and.w	r3, r3, #4
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009224:	f003 0310 	and.w	r3, r3, #16
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009246:	f003 0320 	and.w	r3, r3, #32
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01a      	beq.n	80092a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800928a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800928e:	d10a      	bne.n	80092a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	605a      	str	r2, [r3, #4]
  }
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b098      	sub	sp, #96	@ 0x60
 80092d8:	af02      	add	r7, sp, #8
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092e4:	f7fa f876 	bl	80033d4 <HAL_GetTick>
 80092e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0308 	and.w	r3, r3, #8
 80092f4:	2b08      	cmp	r3, #8
 80092f6:	d12f      	bne.n	8009358 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009300:	2200      	movs	r2, #0
 8009302:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f88e 	bl	8009428 <UART_WaitOnFlagUntilTimeout>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d022      	beq.n	8009358 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009326:	653b      	str	r3, [r7, #80]	@ 0x50
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009330:	647b      	str	r3, [r7, #68]	@ 0x44
 8009332:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009338:	e841 2300 	strex	r3, r2, [r1]
 800933c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800933e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1e6      	bne.n	8009312 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e063      	b.n	8009420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0304 	and.w	r3, r3, #4
 8009362:	2b04      	cmp	r3, #4
 8009364:	d149      	bne.n	80093fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009366:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800936e:	2200      	movs	r2, #0
 8009370:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f857 	bl	8009428 <UART_WaitOnFlagUntilTimeout>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d03c      	beq.n	80093fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009388:	e853 3f00 	ldrex	r3, [r3]
 800938c:	623b      	str	r3, [r7, #32]
   return(result);
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800939e:	633b      	str	r3, [r7, #48]	@ 0x30
 80093a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e6      	bne.n	8009380 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3308      	adds	r3, #8
 80093b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f023 0301 	bic.w	r3, r3, #1
 80093c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3308      	adds	r3, #8
 80093d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093d2:	61fa      	str	r2, [r7, #28]
 80093d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	69b9      	ldr	r1, [r7, #24]
 80093d8:	69fa      	ldr	r2, [r7, #28]
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	617b      	str	r3, [r7, #20]
   return(result);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e5      	bne.n	80093b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2220      	movs	r2, #32
 80093ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e012      	b.n	8009420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3758      	adds	r7, #88	@ 0x58
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	4613      	mov	r3, r2
 8009436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009438:	e04f      	b.n	80094da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009440:	d04b      	beq.n	80094da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009442:	f7f9 ffc7 	bl	80033d4 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	69ba      	ldr	r2, [r7, #24]
 800944e:	429a      	cmp	r2, r3
 8009450:	d302      	bcc.n	8009458 <UART_WaitOnFlagUntilTimeout+0x30>
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d101      	bne.n	800945c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e04e      	b.n	80094fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0304 	and.w	r3, r3, #4
 8009466:	2b00      	cmp	r3, #0
 8009468:	d037      	beq.n	80094da <UART_WaitOnFlagUntilTimeout+0xb2>
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b80      	cmp	r3, #128	@ 0x80
 800946e:	d034      	beq.n	80094da <UART_WaitOnFlagUntilTimeout+0xb2>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b40      	cmp	r3, #64	@ 0x40
 8009474:	d031      	beq.n	80094da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	f003 0308 	and.w	r3, r3, #8
 8009480:	2b08      	cmp	r3, #8
 8009482:	d110      	bne.n	80094a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2208      	movs	r2, #8
 800948a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 f95b 	bl	8009748 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2208      	movs	r2, #8
 8009496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e029      	b.n	80094fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094b4:	d111      	bne.n	80094da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 f941 	bl	8009748 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e00f      	b.n	80094fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	69da      	ldr	r2, [r3, #28]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4013      	ands	r3, r2
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d0a0      	beq.n	800943a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009504:	b480      	push	{r7}
 8009506:	b0a3      	sub	sp, #140	@ 0x8c
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	4613      	mov	r3, r2
 8009510:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	88fa      	ldrh	r2, [r7, #6]
 800951c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	88fa      	ldrh	r2, [r7, #6]
 8009524:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009536:	d10e      	bne.n	8009556 <UART_Start_Receive_IT+0x52>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d105      	bne.n	800954c <UART_Start_Receive_IT+0x48>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009546:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800954a:	e02d      	b.n	80095a8 <UART_Start_Receive_IT+0xa4>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	22ff      	movs	r2, #255	@ 0xff
 8009550:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009554:	e028      	b.n	80095a8 <UART_Start_Receive_IT+0xa4>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10d      	bne.n	800957a <UART_Start_Receive_IT+0x76>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d104      	bne.n	8009570 <UART_Start_Receive_IT+0x6c>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	22ff      	movs	r2, #255	@ 0xff
 800956a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800956e:	e01b      	b.n	80095a8 <UART_Start_Receive_IT+0xa4>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	227f      	movs	r2, #127	@ 0x7f
 8009574:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009578:	e016      	b.n	80095a8 <UART_Start_Receive_IT+0xa4>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009582:	d10d      	bne.n	80095a0 <UART_Start_Receive_IT+0x9c>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d104      	bne.n	8009596 <UART_Start_Receive_IT+0x92>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	227f      	movs	r2, #127	@ 0x7f
 8009590:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009594:	e008      	b.n	80095a8 <UART_Start_Receive_IT+0xa4>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	223f      	movs	r2, #63	@ 0x3f
 800959a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800959e:	e003      	b.n	80095a8 <UART_Start_Receive_IT+0xa4>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2222      	movs	r2, #34	@ 0x22
 80095b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3308      	adds	r3, #8
 80095be:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80095c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095ca:	f043 0301 	orr.w	r3, r3, #1
 80095ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3308      	adds	r3, #8
 80095d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80095dc:	673a      	str	r2, [r7, #112]	@ 0x70
 80095de:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80095e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80095ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e3      	bne.n	80095b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095f8:	d14f      	bne.n	800969a <UART_Start_Receive_IT+0x196>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	429a      	cmp	r2, r3
 8009604:	d349      	bcc.n	800969a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800960e:	d107      	bne.n	8009620 <UART_Start_Receive_IT+0x11c>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4a47      	ldr	r2, [pc, #284]	@ (8009738 <UART_Start_Receive_IT+0x234>)
 800961c:	675a      	str	r2, [r3, #116]	@ 0x74
 800961e:	e002      	b.n	8009626 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4a46      	ldr	r2, [pc, #280]	@ (800973c <UART_Start_Receive_IT+0x238>)
 8009624:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01a      	beq.n	8009664 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009636:	e853 3f00 	ldrex	r3, [r3]
 800963a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800963c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800963e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009652:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009656:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800965e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e4      	bne.n	800962e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3308      	adds	r3, #8
 800966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800967a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009684:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009686:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800968a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e5      	bne.n	8009664 <UART_Start_Receive_IT+0x160>
 8009698:	e046      	b.n	8009728 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096a2:	d107      	bne.n	80096b4 <UART_Start_Receive_IT+0x1b0>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4a24      	ldr	r2, [pc, #144]	@ (8009740 <UART_Start_Receive_IT+0x23c>)
 80096b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80096b2:	e002      	b.n	80096ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4a23      	ldr	r2, [pc, #140]	@ (8009744 <UART_Start_Receive_IT+0x240>)
 80096b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d019      	beq.n	80096f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ca:	e853 3f00 	ldrex	r3, [r3]
 80096ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80096d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	461a      	mov	r2, r3
 80096de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80096e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096e8:	e841 2300 	strex	r3, r2, [r1]
 80096ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80096ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1e6      	bne.n	80096c2 <UART_Start_Receive_IT+0x1be>
 80096f4:	e018      	b.n	8009728 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	e853 3f00 	ldrex	r3, [r3]
 8009702:	613b      	str	r3, [r7, #16]
   return(result);
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f043 0320 	orr.w	r3, r3, #32
 800970a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	461a      	mov	r2, r3
 8009712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009714:	623b      	str	r3, [r7, #32]
 8009716:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	69f9      	ldr	r1, [r7, #28]
 800971a:	6a3a      	ldr	r2, [r7, #32]
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	61bb      	str	r3, [r7, #24]
   return(result);
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e6      	bne.n	80096f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	378c      	adds	r7, #140	@ 0x8c
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	08009f69 	.word	0x08009f69
 800973c:	08009c09 	.word	0x08009c09
 8009740:	08009a51 	.word	0x08009a51
 8009744:	08009899 	.word	0x08009899

08009748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b095      	sub	sp, #84	@ 0x54
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800975e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800976e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009770:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009774:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800977c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e6      	bne.n	8009750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	61fb      	str	r3, [r7, #28]
   return(result);
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009798:	f023 0301 	bic.w	r3, r3, #1
 800979c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3308      	adds	r3, #8
 80097a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097ae:	e841 2300 	strex	r3, r2, [r1]
 80097b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e3      	bne.n	8009782 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d118      	bne.n	80097f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f023 0310 	bic.w	r3, r3, #16
 80097d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	6979      	ldr	r1, [r7, #20]
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	613b      	str	r3, [r7, #16]
   return(result);
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e6      	bne.n	80097c2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2220      	movs	r2, #32
 80097f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009808:	bf00      	nop
 800980a:	3754      	adds	r7, #84	@ 0x54
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009820:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7ff f99a 	bl	8008b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	60bb      	str	r3, [r7, #8]
   return(result);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800985c:	61fb      	str	r3, [r7, #28]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	61bb      	str	r3, [r7, #24]
 8009868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6979      	ldr	r1, [r7, #20]
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	613b      	str	r3, [r7, #16]
   return(result);
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e6      	bne.n	8009848 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2220      	movs	r2, #32
 800987e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff f965 	bl	8008b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800988e:	bf00      	nop
 8009890:	3720      	adds	r7, #32
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b09c      	sub	sp, #112	@ 0x70
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098b0:	2b22      	cmp	r3, #34	@ 0x22
 80098b2:	f040 80be 	bne.w	8009a32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80098c4:	b2d9      	uxtb	r1, r3
 80098c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098d0:	400a      	ands	r2, r1
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f040 80a1 	bne.w	8009a42 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800990e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800991e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009920:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800992c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e6      	bne.n	8009900 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009944:	f023 0301 	bic.w	r3, r3, #1
 8009948:	667b      	str	r3, [r7, #100]	@ 0x64
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3308      	adds	r3, #8
 8009950:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009952:	647a      	str	r2, [r7, #68]	@ 0x44
 8009954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e5      	bne.n	8009932 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a33      	ldr	r2, [pc, #204]	@ (8009a4c <UART_RxISR_8BIT+0x1b4>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d01f      	beq.n	80099c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d018      	beq.n	80099c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999a:	e853 3f00 	ldrex	r3, [r3]
 800999e:	623b      	str	r3, [r7, #32]
   return(result);
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80099b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099b8:	e841 2300 	strex	r3, r2, [r1]
 80099bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e6      	bne.n	8009992 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d12e      	bne.n	8009a2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	60fb      	str	r3, [r7, #12]
   return(result);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 0310 	bic.w	r3, r3, #16
 80099e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099f0:	61fb      	str	r3, [r7, #28]
 80099f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	69b9      	ldr	r1, [r7, #24]
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	617b      	str	r3, [r7, #20]
   return(result);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e6      	bne.n	80099d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	f003 0310 	and.w	r3, r3, #16
 8009a0e:	2b10      	cmp	r3, #16
 8009a10:	d103      	bne.n	8009a1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2210      	movs	r2, #16
 8009a18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff f8ac 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a28:	e00b      	b.n	8009a42 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7f8 fb96 	bl	800215c <HAL_UART_RxCpltCallback>
}
 8009a30:	e007      	b.n	8009a42 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	699a      	ldr	r2, [r3, #24]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f042 0208 	orr.w	r2, r2, #8
 8009a40:	619a      	str	r2, [r3, #24]
}
 8009a42:	bf00      	nop
 8009a44:	3770      	adds	r7, #112	@ 0x70
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40008000 	.word	0x40008000

08009a50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b09c      	sub	sp, #112	@ 0x70
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a68:	2b22      	cmp	r3, #34	@ 0x22
 8009a6a:	f040 80be 	bne.w	8009bea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009a82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a86:	4013      	ands	r3, r2
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a92:	1c9a      	adds	r2, r3, #2
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f040 80a1 	bne.w	8009bfa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009acc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ad8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009adc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e6      	bne.n	8009ab8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3308      	adds	r3, #8
 8009af0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af4:	e853 3f00 	ldrex	r3, [r3]
 8009af8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afc:	f023 0301 	bic.w	r3, r3, #1
 8009b00:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3308      	adds	r3, #8
 8009b08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009b0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8009b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e5      	bne.n	8009aea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2220      	movs	r2, #32
 8009b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a33      	ldr	r2, [pc, #204]	@ (8009c04 <UART_RxISR_16BIT+0x1b4>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d01f      	beq.n	8009b7c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d018      	beq.n	8009b7c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b6a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e6      	bne.n	8009b4a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d12e      	bne.n	8009be2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f023 0310 	bic.w	r3, r3, #16
 8009b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ba8:	61bb      	str	r3, [r7, #24]
 8009baa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bac:	6979      	ldr	r1, [r7, #20]
 8009bae:	69ba      	ldr	r2, [r7, #24]
 8009bb0:	e841 2300 	strex	r3, r2, [r1]
 8009bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e6      	bne.n	8009b8a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	f003 0310 	and.w	r3, r3, #16
 8009bc6:	2b10      	cmp	r3, #16
 8009bc8:	d103      	bne.n	8009bd2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2210      	movs	r2, #16
 8009bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7fe ffd0 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009be0:	e00b      	b.n	8009bfa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7f8 faba 	bl	800215c <HAL_UART_RxCpltCallback>
}
 8009be8:	e007      	b.n	8009bfa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	699a      	ldr	r2, [r3, #24]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0208 	orr.w	r2, r2, #8
 8009bf8:	619a      	str	r2, [r3, #24]
}
 8009bfa:	bf00      	nop
 8009bfc:	3770      	adds	r7, #112	@ 0x70
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	40008000 	.word	0x40008000

08009c08 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b0ac      	sub	sp, #176	@ 0xb0
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c16:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c3e:	2b22      	cmp	r3, #34	@ 0x22
 8009c40:	f040 8182 	bne.w	8009f48 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c4a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c4e:	e125      	b.n	8009e9c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c56:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c5a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009c5e:	b2d9      	uxtb	r1, r3
 8009c60:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c6a:	400a      	ands	r2, r1
 8009c6c:	b2d2      	uxtb	r2, r2
 8009c6e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d053      	beq.n	8009d4a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d011      	beq.n	8009cd2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00b      	beq.n	8009cd2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cc8:	f043 0201 	orr.w	r2, r3, #1
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cd6:	f003 0302 	and.w	r3, r3, #2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d011      	beq.n	8009d02 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00b      	beq.n	8009d02 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cf8:	f043 0204 	orr.w	r2, r3, #4
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d011      	beq.n	8009d32 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00b      	beq.n	8009d32 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2204      	movs	r2, #4
 8009d20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d28:	f043 0202 	orr.w	r2, r3, #2
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d006      	beq.n	8009d4a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7fe ff15 	bl	8008b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f040 80a2 	bne.w	8009e9c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	461a      	mov	r2, r3
 8009d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d7c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009d80:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1e4      	bne.n	8009d58 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3308      	adds	r3, #8
 8009d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009da4:	f023 0301 	bic.w	r3, r3, #1
 8009da8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3308      	adds	r3, #8
 8009db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009db6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009db8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009dbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e1      	bne.n	8009d8e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a5f      	ldr	r2, [pc, #380]	@ (8009f60 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d021      	beq.n	8009e2c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d01a      	beq.n	8009e2c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dfe:	e853 3f00 	ldrex	r3, [r3]
 8009e02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e18:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e1a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e20:	e841 2300 	strex	r3, r2, [r1]
 8009e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e4      	bne.n	8009df6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d130      	bne.n	8009e96 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e42:	e853 3f00 	ldrex	r3, [r3]
 8009e46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4a:	f023 0310 	bic.w	r3, r3, #16
 8009e4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e64:	e841 2300 	strex	r3, r2, [r1]
 8009e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1e4      	bne.n	8009e3a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	f003 0310 	and.w	r3, r3, #16
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d103      	bne.n	8009e86 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2210      	movs	r2, #16
 8009e84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7fe fe76 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
 8009e94:	e002      	b.n	8009e9c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7f8 f960 	bl	800215c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e9c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d006      	beq.n	8009eb2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f47f aecf 	bne.w	8009c50 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009eb8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ebc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d049      	beq.n	8009f58 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009eca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d242      	bcs.n	8009f58 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009efe:	e841 2300 	strex	r3, r2, [r1]
 8009f02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1e3      	bne.n	8009ed2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a15      	ldr	r2, [pc, #84]	@ (8009f64 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009f0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f043 0320 	orr.w	r3, r3, #32
 8009f24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f32:	61bb      	str	r3, [r7, #24]
 8009f34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6979      	ldr	r1, [r7, #20]
 8009f38:	69ba      	ldr	r2, [r7, #24]
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e4      	bne.n	8009f10 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f46:	e007      	b.n	8009f58 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 0208 	orr.w	r2, r2, #8
 8009f56:	619a      	str	r2, [r3, #24]
}
 8009f58:	bf00      	nop
 8009f5a:	37b0      	adds	r7, #176	@ 0xb0
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	40008000 	.word	0x40008000
 8009f64:	08009899 	.word	0x08009899

08009f68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b0ae      	sub	sp, #184	@ 0xb8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009f76:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f9e:	2b22      	cmp	r3, #34	@ 0x22
 8009fa0:	f040 8186 	bne.w	800a2b0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009faa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fae:	e129      	b.n	800a204 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009fc2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009fc6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009fca:	4013      	ands	r3, r2
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009fd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fd8:	1c9a      	adds	r2, r3, #2
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ffe:	f003 0307 	and.w	r3, r3, #7
 800a002:	2b00      	cmp	r3, #0
 800a004:	d053      	beq.n	800a0ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a006:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d011      	beq.n	800a036 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00b      	beq.n	800a036 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2201      	movs	r2, #1
 800a024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a02c:	f043 0201 	orr.w	r2, r3, #1
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a03a:	f003 0302 	and.w	r3, r3, #2
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d011      	beq.n	800a066 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2202      	movs	r2, #2
 800a054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a05c:	f043 0204 	orr.w	r2, r3, #4
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a06a:	f003 0304 	and.w	r3, r3, #4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d011      	beq.n	800a096 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a072:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00b      	beq.n	800a096 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2204      	movs	r2, #4
 800a084:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a08c:	f043 0202 	orr.w	r2, r3, #2
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d006      	beq.n	800a0ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7fe fd63 	bl	8008b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f040 80a4 	bne.w	800a204 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0c4:	e853 3f00 	ldrex	r3, [r3]
 800a0c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a0ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a0de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a0e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a0f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e2      	bne.n	800a0bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a10c:	f023 0301 	bic.w	r3, r3, #1
 800a110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3308      	adds	r3, #8
 800a11a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a11e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a120:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a124:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a12c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e1      	bne.n	800a0f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2220      	movs	r2, #32
 800a136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a5f      	ldr	r2, [pc, #380]	@ (800a2c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d021      	beq.n	800a194 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d01a      	beq.n	800a194 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a166:	e853 3f00 	ldrex	r3, [r3]
 800a16a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a16c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a16e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a172:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a180:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a182:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a186:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a18e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e4      	bne.n	800a15e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d130      	bne.n	800a1fe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b2:	f023 0310 	bic.w	r3, r3, #16
 800a1b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a1c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e4      	bne.n	800a1a2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	f003 0310 	and.w	r3, r3, #16
 800a1e2:	2b10      	cmp	r3, #16
 800a1e4:	d103      	bne.n	800a1ee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2210      	movs	r2, #16
 800a1ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7fe fcc2 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
 800a1fc:	e002      	b.n	800a204 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7f7 ffac 	bl	800215c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a204:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d006      	beq.n	800a21a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a20c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a210:	f003 0320 	and.w	r3, r3, #32
 800a214:	2b00      	cmp	r3, #0
 800a216:	f47f aecb 	bne.w	8009fb0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a220:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a224:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d049      	beq.n	800a2c0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a232:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a236:	429a      	cmp	r2, r3
 800a238:	d242      	bcs.n	800a2c0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3308      	adds	r3, #8
 800a240:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a244:	e853 3f00 	ldrex	r3, [r3]
 800a248:	623b      	str	r3, [r7, #32]
   return(result);
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3308      	adds	r3, #8
 800a25a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a25e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e3      	bne.n	800a23a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a15      	ldr	r2, [pc, #84]	@ (800a2cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a276:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	60fb      	str	r3, [r7, #12]
   return(result);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f043 0320 	orr.w	r3, r3, #32
 800a28c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a29a:	61fb      	str	r3, [r7, #28]
 800a29c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29e:	69b9      	ldr	r1, [r7, #24]
 800a2a0:	69fa      	ldr	r2, [r7, #28]
 800a2a2:	e841 2300 	strex	r3, r2, [r1]
 800a2a6:	617b      	str	r3, [r7, #20]
   return(result);
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1e4      	bne.n	800a278 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2ae:	e007      	b.n	800a2c0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	699a      	ldr	r2, [r3, #24]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f042 0208 	orr.w	r2, r2, #8
 800a2be:	619a      	str	r2, [r3, #24]
}
 800a2c0:	bf00      	nop
 800a2c2:	37b8      	adds	r7, #184	@ 0xb8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	40008000 	.word	0x40008000
 800a2cc:	08009a51 	.word	0x08009a51

0800a2d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d101      	bne.n	800a322 <HAL_UARTEx_DisableFifoMode+0x16>
 800a31e:	2302      	movs	r3, #2
 800a320:	e027      	b.n	800a372 <HAL_UARTEx_DisableFifoMode+0x66>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2224      	movs	r2, #36	@ 0x24
 800a32e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0201 	bic.w	r2, r2, #1
 800a348:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a350:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2220      	movs	r2, #32
 800a364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d101      	bne.n	800a396 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a392:	2302      	movs	r3, #2
 800a394:	e02d      	b.n	800a3f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2224      	movs	r2, #36	@ 0x24
 800a3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f022 0201 	bic.w	r2, r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f850 	bl	800a478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b084      	sub	sp, #16
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d101      	bne.n	800a412 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a40e:	2302      	movs	r3, #2
 800a410:	e02d      	b.n	800a46e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2224      	movs	r2, #36	@ 0x24
 800a41e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f022 0201 	bic.w	r2, r2, #1
 800a438:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f812 	bl	800a478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2220      	movs	r2, #32
 800a460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a484:	2b00      	cmp	r3, #0
 800a486:	d108      	bne.n	800a49a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a498:	e031      	b.n	800a4fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a49a:	2308      	movs	r3, #8
 800a49c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a49e:	2308      	movs	r3, #8
 800a4a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	0e5b      	lsrs	r3, r3, #25
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	f003 0307 	and.w	r3, r3, #7
 800a4b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	0f5b      	lsrs	r3, r3, #29
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	f003 0307 	and.w	r3, r3, #7
 800a4c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	7b3a      	ldrb	r2, [r7, #12]
 800a4c6:	4911      	ldr	r1, [pc, #68]	@ (800a50c <UARTEx_SetNbDataToProcess+0x94>)
 800a4c8:	5c8a      	ldrb	r2, [r1, r2]
 800a4ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4ce:	7b3a      	ldrb	r2, [r7, #12]
 800a4d0:	490f      	ldr	r1, [pc, #60]	@ (800a510 <UARTEx_SetNbDataToProcess+0x98>)
 800a4d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	7b7a      	ldrb	r2, [r7, #13]
 800a4e4:	4909      	ldr	r1, [pc, #36]	@ (800a50c <UARTEx_SetNbDataToProcess+0x94>)
 800a4e6:	5c8a      	ldrb	r2, [r1, r2]
 800a4e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4ec:	7b7a      	ldrb	r2, [r7, #13]
 800a4ee:	4908      	ldr	r1, [pc, #32]	@ (800a510 <UARTEx_SetNbDataToProcess+0x98>)
 800a4f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4fe:	bf00      	nop
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	0800a5b4 	.word	0x0800a5b4
 800a510:	0800a5bc 	.word	0x0800a5bc

0800a514 <memset>:
 800a514:	4402      	add	r2, r0
 800a516:	4603      	mov	r3, r0
 800a518:	4293      	cmp	r3, r2
 800a51a:	d100      	bne.n	800a51e <memset+0xa>
 800a51c:	4770      	bx	lr
 800a51e:	f803 1b01 	strb.w	r1, [r3], #1
 800a522:	e7f9      	b.n	800a518 <memset+0x4>

0800a524 <__libc_init_array>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4d0d      	ldr	r5, [pc, #52]	@ (800a55c <__libc_init_array+0x38>)
 800a528:	4c0d      	ldr	r4, [pc, #52]	@ (800a560 <__libc_init_array+0x3c>)
 800a52a:	1b64      	subs	r4, r4, r5
 800a52c:	10a4      	asrs	r4, r4, #2
 800a52e:	2600      	movs	r6, #0
 800a530:	42a6      	cmp	r6, r4
 800a532:	d109      	bne.n	800a548 <__libc_init_array+0x24>
 800a534:	4d0b      	ldr	r5, [pc, #44]	@ (800a564 <__libc_init_array+0x40>)
 800a536:	4c0c      	ldr	r4, [pc, #48]	@ (800a568 <__libc_init_array+0x44>)
 800a538:	f000 f818 	bl	800a56c <_init>
 800a53c:	1b64      	subs	r4, r4, r5
 800a53e:	10a4      	asrs	r4, r4, #2
 800a540:	2600      	movs	r6, #0
 800a542:	42a6      	cmp	r6, r4
 800a544:	d105      	bne.n	800a552 <__libc_init_array+0x2e>
 800a546:	bd70      	pop	{r4, r5, r6, pc}
 800a548:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54c:	4798      	blx	r3
 800a54e:	3601      	adds	r6, #1
 800a550:	e7ee      	b.n	800a530 <__libc_init_array+0xc>
 800a552:	f855 3b04 	ldr.w	r3, [r5], #4
 800a556:	4798      	blx	r3
 800a558:	3601      	adds	r6, #1
 800a55a:	e7f2      	b.n	800a542 <__libc_init_array+0x1e>
 800a55c:	0800a5cc 	.word	0x0800a5cc
 800a560:	0800a5cc 	.word	0x0800a5cc
 800a564:	0800a5cc 	.word	0x0800a5cc
 800a568:	0800a5d0 	.word	0x0800a5d0

0800a56c <_init>:
 800a56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56e:	bf00      	nop
 800a570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a572:	bc08      	pop	{r3}
 800a574:	469e      	mov	lr, r3
 800a576:	4770      	bx	lr

0800a578 <_fini>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	bf00      	nop
 800a57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57e:	bc08      	pop	{r3}
 800a580:	469e      	mov	lr, r3
 800a582:	4770      	bx	lr
