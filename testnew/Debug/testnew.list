
testnew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009534  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800970c  0800970c  0000a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800974c  0800974c  0000b014  2**0
                  CONTENTS
  4 .ARM          00000008  0800974c  0800974c  0000a74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009754  08009754  0000b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009754  08009754  0000a754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009758  08009758  0000a758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800975c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000018  08009770  0000b018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08009770  0000b5a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017de6  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa1  00000000  00000000  00022e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  000258d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106a  00000000  00000000  00026dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a5b  00000000  00000000  00027e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b79  00000000  00000000  0004f88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ec79  00000000  00000000  00067406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017607f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf8  00000000  00000000  001760c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0017bdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080096f4 	.word	0x080096f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080096f4 	.word	0x080096f4

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_uldivmod>:
 8000994:	b953      	cbnz	r3, 80009ac <__aeabi_uldivmod+0x18>
 8000996:	b94a      	cbnz	r2, 80009ac <__aeabi_uldivmod+0x18>
 8000998:	2900      	cmp	r1, #0
 800099a:	bf08      	it	eq
 800099c:	2800      	cmpeq	r0, #0
 800099e:	bf1c      	itt	ne
 80009a0:	f04f 31ff 	movne.w	r1, #4294967295
 80009a4:	f04f 30ff 	movne.w	r0, #4294967295
 80009a8:	f000 b96a 	b.w	8000c80 <__aeabi_idiv0>
 80009ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009b4:	f000 f806 	bl	80009c4 <__udivmoddi4>
 80009b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <__udivmoddi4>:
 80009c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c8:	9d08      	ldr	r5, [sp, #32]
 80009ca:	460c      	mov	r4, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d14e      	bne.n	8000a6e <__udivmoddi4+0xaa>
 80009d0:	4694      	mov	ip, r2
 80009d2:	458c      	cmp	ip, r1
 80009d4:	4686      	mov	lr, r0
 80009d6:	fab2 f282 	clz	r2, r2
 80009da:	d962      	bls.n	8000aa2 <__udivmoddi4+0xde>
 80009dc:	b14a      	cbz	r2, 80009f2 <__udivmoddi4+0x2e>
 80009de:	f1c2 0320 	rsb	r3, r2, #32
 80009e2:	4091      	lsls	r1, r2
 80009e4:	fa20 f303 	lsr.w	r3, r0, r3
 80009e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ec:	4319      	orrs	r1, r3
 80009ee:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f6:	fa1f f68c 	uxth.w	r6, ip
 80009fa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a02:	fb07 1114 	mls	r1, r7, r4, r1
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb04 f106 	mul.w	r1, r4, r6
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d90a      	bls.n	8000a28 <__udivmoddi4+0x64>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a1a:	f080 8112 	bcs.w	8000c42 <__udivmoddi4+0x27e>
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	f240 810f 	bls.w	8000c42 <__udivmoddi4+0x27e>
 8000a24:	3c02      	subs	r4, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1a59      	subs	r1, r3, r1
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a32:	fb07 1110 	mls	r1, r7, r0, r1
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb00 f606 	mul.w	r6, r0, r6
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x94>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a4a:	f080 80fc 	bcs.w	8000c46 <__udivmoddi4+0x282>
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	f240 80f9 	bls.w	8000c46 <__udivmoddi4+0x282>
 8000a54:	4463      	add	r3, ip
 8000a56:	3802      	subs	r0, #2
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a5e:	2100      	movs	r1, #0
 8000a60:	b11d      	cbz	r5, 8000a6a <__udivmoddi4+0xa6>
 8000a62:	40d3      	lsrs	r3, r2
 8000a64:	2200      	movs	r2, #0
 8000a66:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d905      	bls.n	8000a7e <__udivmoddi4+0xba>
 8000a72:	b10d      	cbz	r5, 8000a78 <__udivmoddi4+0xb4>
 8000a74:	e9c5 0100 	strd	r0, r1, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e7f5      	b.n	8000a6a <__udivmoddi4+0xa6>
 8000a7e:	fab3 f183 	clz	r1, r3
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d146      	bne.n	8000b14 <__udivmoddi4+0x150>
 8000a86:	42a3      	cmp	r3, r4
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xcc>
 8000a8a:	4290      	cmp	r0, r2
 8000a8c:	f0c0 80f0 	bcc.w	8000c70 <__udivmoddi4+0x2ac>
 8000a90:	1a86      	subs	r6, r0, r2
 8000a92:	eb64 0303 	sbc.w	r3, r4, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d0e6      	beq.n	8000a6a <__udivmoddi4+0xa6>
 8000a9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000aa0:	e7e3      	b.n	8000a6a <__udivmoddi4+0xa6>
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	f040 8090 	bne.w	8000bc8 <__udivmoddi4+0x204>
 8000aa8:	eba1 040c 	sub.w	r4, r1, ip
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	fa1f f78c 	uxth.w	r7, ip
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000abe:	fb08 4416 	mls	r4, r8, r6, r4
 8000ac2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ac6:	fb07 f006 	mul.w	r0, r7, r6
 8000aca:	4298      	cmp	r0, r3
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0x11c>
 8000ace:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x11a>
 8000ad8:	4298      	cmp	r0, r3
 8000ada:	f200 80cd 	bhi.w	8000c78 <__udivmoddi4+0x2b4>
 8000ade:	4626      	mov	r6, r4
 8000ae0:	1a1c      	subs	r4, r3, r0
 8000ae2:	fa1f f38e 	uxth.w	r3, lr
 8000ae6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000aea:	fb08 4410 	mls	r4, r8, r0, r4
 8000aee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000af2:	fb00 f707 	mul.w	r7, r0, r7
 8000af6:	429f      	cmp	r7, r3
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x148>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x146>
 8000b04:	429f      	cmp	r7, r3
 8000b06:	f200 80b0 	bhi.w	8000c6a <__udivmoddi4+0x2a6>
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	1bdb      	subs	r3, r3, r7
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	e7a5      	b.n	8000a60 <__udivmoddi4+0x9c>
 8000b14:	f1c1 0620 	rsb	r6, r1, #32
 8000b18:	408b      	lsls	r3, r1
 8000b1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b24:	fa04 f301 	lsl.w	r3, r4, r1
 8000b28:	ea43 030c 	orr.w	r3, r3, ip
 8000b2c:	40f4      	lsrs	r4, r6
 8000b2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b32:	0c38      	lsrs	r0, r7, #16
 8000b34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b38:	fbb4 fef0 	udiv	lr, r4, r0
 8000b3c:	fa1f fc87 	uxth.w	ip, r7
 8000b40:	fb00 441e 	mls	r4, r0, lr, r4
 8000b44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b48:	fb0e f90c 	mul.w	r9, lr, ip
 8000b4c:	45a1      	cmp	r9, r4
 8000b4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b52:	d90a      	bls.n	8000b6a <__udivmoddi4+0x1a6>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b5a:	f080 8084 	bcs.w	8000c66 <__udivmoddi4+0x2a2>
 8000b5e:	45a1      	cmp	r9, r4
 8000b60:	f240 8081 	bls.w	8000c66 <__udivmoddi4+0x2a2>
 8000b64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b68:	443c      	add	r4, r7
 8000b6a:	eba4 0409 	sub.w	r4, r4, r9
 8000b6e:	fa1f f983 	uxth.w	r9, r3
 8000b72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b76:	fb00 4413 	mls	r4, r0, r3, r4
 8000b7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b82:	45a4      	cmp	ip, r4
 8000b84:	d907      	bls.n	8000b96 <__udivmoddi4+0x1d2>
 8000b86:	193c      	adds	r4, r7, r4
 8000b88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b8c:	d267      	bcs.n	8000c5e <__udivmoddi4+0x29a>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d965      	bls.n	8000c5e <__udivmoddi4+0x29a>
 8000b92:	3b02      	subs	r3, #2
 8000b94:	443c      	add	r4, r7
 8000b96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ba2:	429c      	cmp	r4, r3
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	469c      	mov	ip, r3
 8000ba8:	d351      	bcc.n	8000c4e <__udivmoddi4+0x28a>
 8000baa:	d04e      	beq.n	8000c4a <__udivmoddi4+0x286>
 8000bac:	b155      	cbz	r5, 8000bc4 <__udivmoddi4+0x200>
 8000bae:	ebb8 030e 	subs.w	r3, r8, lr
 8000bb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bba:	40cb      	lsrs	r3, r1
 8000bbc:	431e      	orrs	r6, r3
 8000bbe:	40cc      	lsrs	r4, r1
 8000bc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	e750      	b.n	8000a6a <__udivmoddi4+0xa6>
 8000bc8:	f1c2 0320 	rsb	r3, r2, #32
 8000bcc:	fa20 f103 	lsr.w	r1, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	430c      	orrs	r4, r1
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be4:	fa1f f78c 	uxth.w	r7, ip
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3110 	mls	r1, r8, r0, r3
 8000bf0:	0c23      	lsrs	r3, r4, #16
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f107 	mul.w	r1, r0, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x24c>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c06:	d22c      	bcs.n	8000c62 <__udivmoddi4+0x29e>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d92a      	bls.n	8000c62 <__udivmoddi4+0x29e>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c18:	fb08 3311 	mls	r3, r8, r1, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb01 f307 	mul.w	r3, r1, r7
 8000c24:	42a3      	cmp	r3, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x276>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c30:	d213      	bcs.n	8000c5a <__udivmoddi4+0x296>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d911      	bls.n	8000c5a <__udivmoddi4+0x296>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4464      	add	r4, ip
 8000c3a:	1ae4      	subs	r4, r4, r3
 8000c3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c40:	e739      	b.n	8000ab6 <__udivmoddi4+0xf2>
 8000c42:	4604      	mov	r4, r0
 8000c44:	e6f0      	b.n	8000a28 <__udivmoddi4+0x64>
 8000c46:	4608      	mov	r0, r1
 8000c48:	e706      	b.n	8000a58 <__udivmoddi4+0x94>
 8000c4a:	45c8      	cmp	r8, r9
 8000c4c:	d2ae      	bcs.n	8000bac <__udivmoddi4+0x1e8>
 8000c4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c56:	3801      	subs	r0, #1
 8000c58:	e7a8      	b.n	8000bac <__udivmoddi4+0x1e8>
 8000c5a:	4631      	mov	r1, r6
 8000c5c:	e7ed      	b.n	8000c3a <__udivmoddi4+0x276>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	e799      	b.n	8000b96 <__udivmoddi4+0x1d2>
 8000c62:	4630      	mov	r0, r6
 8000c64:	e7d4      	b.n	8000c10 <__udivmoddi4+0x24c>
 8000c66:	46d6      	mov	lr, sl
 8000c68:	e77f      	b.n	8000b6a <__udivmoddi4+0x1a6>
 8000c6a:	4463      	add	r3, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	e74d      	b.n	8000b0c <__udivmoddi4+0x148>
 8000c70:	4606      	mov	r6, r0
 8000c72:	4623      	mov	r3, r4
 8000c74:	4608      	mov	r0, r1
 8000c76:	e70f      	b.n	8000a98 <__udivmoddi4+0xd4>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	e730      	b.n	8000ae0 <__udivmoddi4+0x11c>
 8000c7e:	bf00      	nop

08000c80 <__aeabi_idiv0>:
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f001 fbaf 	bl	80023ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f9da 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f000 fe02 	bl	800189c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c98:	f000 fdce 	bl	8001838 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000c9c:	f000 fb22 	bl	80012e4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000ca0:	f000 fa1e 	bl	80010e0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ca4:	f000 fb68 	bl	8001378 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ca8:	f000 fbb4 	bl	8001414 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cac:	f000 fc06 	bl	80014bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cb0:	f000 fc52 	bl	8001558 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cb4:	f000 fca6 	bl	8001604 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000cb8:	f000 fd6a 	bl	8001790 <MX_TIM8_Init>
  MX_TIM5_Init();
 8000cbc:	f000 fd1a 	bl	80016f4 <MX_TIM5_Init>
  MX_ADC3_Init();
 8000cc0:	f000 fa88 	bl	80011d4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000cc4:	48b8      	ldr	r0, [pc, #736]	@ (8000fa8 <main+0x324>)
 8000cc6:	f004 ff0f 	bl	8005ae8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	48b6      	ldr	r0, [pc, #728]	@ (8000fa8 <main+0x324>)
 8000cce:	f005 f855 	bl	8005d7c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000cd2:	213c      	movs	r1, #60	@ 0x3c
 8000cd4:	48b5      	ldr	r0, [pc, #724]	@ (8000fac <main+0x328>)
 8000cd6:	f005 fa09 	bl	80060ec <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000cda:	48b5      	ldr	r0, [pc, #724]	@ (8000fb0 <main+0x32c>)
 8000cdc:	f004 ff74 	bl	8005bc8 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8000ce0:	217f      	movs	r1, #127	@ 0x7f
 8000ce2:	48b4      	ldr	r0, [pc, #720]	@ (8000fb4 <main+0x330>)
 8000ce4:	f002 ff02 	bl	8003aec <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joyAnalogRead, 40);
 8000ce8:	2228      	movs	r2, #40	@ 0x28
 8000cea:	49b3      	ldr	r1, [pc, #716]	@ (8000fb8 <main+0x334>)
 8000cec:	48b1      	ldr	r0, [pc, #708]	@ (8000fb4 <main+0x330>)
 8000cee:	f001 ffef 	bl	8002cd0 <HAL_ADC_Start_DMA>
  _micros = 0;
 8000cf2:	49b2      	ldr	r1, [pc, #712]	@ (8000fbc <main+0x338>)
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e9c1 2300 	strd	r2, r3, [r1]
  UARTInterruptConfig();
 8000d00:	f000 ff58 	bl	8001bb4 <UARTInterruptConfig>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000d04:	2101      	movs	r1, #1
 8000d06:	48ae      	ldr	r0, [pc, #696]	@ (8000fc0 <main+0x33c>)
 8000d08:	f003 fe1e 	bl	8004948 <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4bac      	ldr	r3, [pc, #688]	@ (8000fc4 <main+0x340>)
 8000d12:	701a      	strb	r2, [r3, #0]
	  if(state == 0)
 8000d14:	4bac      	ldr	r3, [pc, #688]	@ (8000fc8 <main+0x344>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80a8 	beq.w	8000e6e <main+0x1ea>
	  {

	  }
	  else if(state == 1)
 8000d1e:	4baa      	ldr	r3, [pc, #680]	@ (8000fc8 <main+0x344>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d14f      	bne.n	8000dc6 <main+0x142>
	  {
		  if(joyY > 3200 || joyY < 2700)
 8000d26:	4ba9      	ldr	r3, [pc, #676]	@ (8000fcc <main+0x348>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8000d2e:	d805      	bhi.n	8000d3c <main+0xb8>
 8000d30:	4ba6      	ldr	r3, [pc, #664]	@ (8000fcc <main+0x348>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	f640 228b 	movw	r2, #2699	@ 0xa8b
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d82f      	bhi.n	8000d9c <main+0x118>
		  {
			  if (joyY > 3200)
 8000d3c:	4ba3      	ldr	r3, [pc, #652]	@ (8000fcc <main+0x348>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8000d44:	d915      	bls.n	8000d72 <main+0xee>
			  {
				  A = 21250;
 8000d46:	4ba2      	ldr	r3, [pc, #648]	@ (8000fd0 <main+0x34c>)
 8000d48:	f245 3202 	movw	r2, #21250	@ 0x5302
 8000d4c:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2101      	movs	r1, #1
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d56:	f003 fe0f 	bl	8004978 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d62:	f003 fe09 	bl	8004978 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 21250);
 8000d66:	4b90      	ldr	r3, [pc, #576]	@ (8000fa8 <main+0x324>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f245 3202 	movw	r2, #21250	@ 0x5302
 8000d6e:	635a      	str	r2, [r3, #52]	@ 0x34
			  if (joyY > 3200)
 8000d70:	e07d      	b.n	8000e6e <main+0x1ea>
			  }
			  else
			  {
				  A = -21250;
 8000d72:	4b97      	ldr	r3, [pc, #604]	@ (8000fd0 <main+0x34c>)
 8000d74:	4a97      	ldr	r2, [pc, #604]	@ (8000fd4 <main+0x350>)
 8000d76:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d80:	f003 fdfa 	bl	8004978 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2102      	movs	r1, #2
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f003 fdf4 	bl	8004978 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 21250);
 8000d90:	4b85      	ldr	r3, [pc, #532]	@ (8000fa8 <main+0x324>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f245 3202 	movw	r2, #21250	@ 0x5302
 8000d98:	635a      	str	r2, [r3, #52]	@ 0x34
			  if (joyY > 3200)
 8000d9a:	e068      	b.n	8000e6e <main+0x1ea>
			  }
		  }
		  else
		  {
			  A = 0;
 8000d9c:	4b8c      	ldr	r3, [pc, #560]	@ (8000fd0 <main+0x34c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2101      	movs	r1, #1
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000daa:	f003 fde5 	bl	8004978 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2102      	movs	r1, #2
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db6:	f003 fddf 	bl	8004978 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 49999);
 8000dba:	4b7b      	ldr	r3, [pc, #492]	@ (8000fa8 <main+0x324>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dc4:	e053      	b.n	8000e6e <main+0x1ea>
		  }
	  }
	  else if(state == 2)
 8000dc6:	4b80      	ldr	r3, [pc, #512]	@ (8000fc8 <main+0x344>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d14f      	bne.n	8000e6e <main+0x1ea>
	  {
		  if(joyY > 3200 || joyY < 2700)
 8000dce:	4b7f      	ldr	r3, [pc, #508]	@ (8000fcc <main+0x348>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8000dd6:	d805      	bhi.n	8000de4 <main+0x160>
 8000dd8:	4b7c      	ldr	r3, [pc, #496]	@ (8000fcc <main+0x348>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f640 228b 	movw	r2, #2699	@ 0xa8b
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d830      	bhi.n	8000e46 <main+0x1c2>
		  		  {
		  			  if (joyY > 3200)
 8000de4:	4b79      	ldr	r3, [pc, #484]	@ (8000fcc <main+0x348>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8000dec:	d915      	bls.n	8000e1a <main+0x196>
		  			  {
		  				  A = 10625;
 8000dee:	4b78      	ldr	r3, [pc, #480]	@ (8000fd0 <main+0x34c>)
 8000df0:	f642 1281 	movw	r2, #10625	@ 0x2981
 8000df4:	601a      	str	r2, [r3, #0]
		  				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2101      	movs	r1, #1
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfe:	f003 fdbb 	bl	8004978 <HAL_GPIO_WritePin>
		  				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2102      	movs	r1, #2
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0a:	f003 fdb5 	bl	8004978 <HAL_GPIO_WritePin>
		  				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10625);
 8000e0e:	4b66      	ldr	r3, [pc, #408]	@ (8000fa8 <main+0x324>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f642 1281 	movw	r2, #10625	@ 0x2981
 8000e16:	635a      	str	r2, [r3, #52]	@ 0x34
		  			  if (joyY > 3200)
 8000e18:	e029      	b.n	8000e6e <main+0x1ea>
		  			  }
		  			  else
		  			  {
		  				  A = -10625;
 8000e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8000fd0 <main+0x34c>)
 8000e1c:	f46f 5226 	mvn.w	r2, #10624	@ 0x2980
 8000e20:	601a      	str	r2, [r3, #0]
		  				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2101      	movs	r1, #1
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2a:	f003 fda5 	bl	8004978 <HAL_GPIO_WritePin>
		  				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2102      	movs	r1, #2
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e36:	f003 fd9f 	bl	8004978 <HAL_GPIO_WritePin>
		  				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10625);
 8000e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8000fa8 <main+0x324>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f642 1281 	movw	r2, #10625	@ 0x2981
 8000e42:	635a      	str	r2, [r3, #52]	@ 0x34
		  			  if (joyY > 3200)
 8000e44:	e013      	b.n	8000e6e <main+0x1ea>
		  			  }
		  		  }
		  		  else
		  		  {
		  			  A = 0;
 8000e46:	4b62      	ldr	r3, [pc, #392]	@ (8000fd0 <main+0x34c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
		  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2101      	movs	r1, #1
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e54:	f003 fd90 	bl	8004978 <HAL_GPIO_WritePin>
		  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f003 fd8a 	bl	8004978 <HAL_GPIO_WritePin>
		  			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 49999);
 8000e64:	4b50      	ldr	r3, [pc, #320]	@ (8000fa8 <main+0x324>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000e6c:	635a      	str	r2, [r3, #52]	@ 0x34
	  {

	  }
//test = abs(A);

	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8000fac <main+0x328>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e74:	4a58      	ldr	r2, [pc, #352]	@ (8000fd8 <main+0x354>)
 8000e76:	6013      	str	r3, [r2, #0]
	  pulse = QEIReadRaw-57344;
 8000e78:	4b57      	ldr	r3, [pc, #348]	@ (8000fd8 <main+0x354>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f5a3 4360 	sub.w	r3, r3, #57344	@ 0xe000
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc35 	bl	80006f0 <__aeabi_ui2d>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4954      	ldr	r1, [pc, #336]	@ (8000fdc <main+0x358>)
 8000e8c:	e9c1 2300 	strd	r2, r3, [r1]
//	  Pos = ((QEIReadRaw+(Count*57344))*25*3.14)/8192;
	  Pos = ((QEIReadRaw+(Count*57344))*360)/8192;
 8000e90:	4b53      	ldr	r3, [pc, #332]	@ (8000fe0 <main+0x35c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4613      	mov	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	1a9b      	subs	r3, r3, r2
 8000e9a:	035b      	lsls	r3, r3, #13
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd8 <main+0x354>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	0b5b      	lsrs	r3, r3, #13
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe4 <main+0x360>)
 8000eb8:	edc3 7a00 	vstr	s15, [r3]
	  Joy_Averaged();
 8000ebc:	f000 fec8 	bl	8001c50 <Joy_Averaged>
//		 		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 199);
//	  }
	  static uint64_t timestamp =0;
	  static uint64_t timestamp2 =0;
	  static uint64_t timestamp3 =0;
	  int64_t currentTime = micros();
 8000ec0:	f000 fd8c 	bl	80019dc <micros>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  if(currentTime > timestamp)
 8000ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ed0:	4945      	ldr	r1, [pc, #276]	@ (8000fe8 <main+0x364>)
 8000ed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ed6:	4290      	cmp	r0, r2
 8000ed8:	eb71 0303 	sbcs.w	r3, r1, r3
 8000edc:	d20d      	bcs.n	8000efa <main+0x276>
	  {
	  timestamp =currentTime + 100000;//us
 8000ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ee2:	4942      	ldr	r1, [pc, #264]	@ (8000fec <main+0x368>)
 8000ee4:	eb12 0801 	adds.w	r8, r2, r1
 8000ee8:	f143 0900 	adc.w	r9, r3, #0
 8000eec:	4642      	mov	r2, r8
 8000eee:	464b      	mov	r3, r9
 8000ef0:	493d      	ldr	r1, [pc, #244]	@ (8000fe8 <main+0x364>)
 8000ef2:	e9c1 2300 	strd	r2, r3, [r1]
	  QEIEncoderPosVel_Update();
 8000ef6:	f000 fd8b 	bl	8001a10 <QEIEncoderPosVel_Update>
	  }
	  if(currentTime > timestamp3)
 8000efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000efe:	493c      	ldr	r1, [pc, #240]	@ (8000ff0 <main+0x36c>)
 8000f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f04:	4290      	cmp	r0, r2
 8000f06:	eb71 0303 	sbcs.w	r3, r1, r3
 8000f0a:	d229      	bcs.n	8000f60 <main+0x2dc>
	  {
	  dataSend = RPSspeed;
 8000f0c:	4b39      	ldr	r3, [pc, #228]	@ (8000ff4 <main+0x370>)
 8000f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <main+0x374>)
 8000f16:	801a      	strh	r2, [r3, #0]
	  dataBytes[0] = header; // Header byte
 8000f18:	4b38      	ldr	r3, [pc, #224]	@ (8000ffc <main+0x378>)
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <main+0x37c>)
 8000f1e:	701a      	strb	r2, [r3, #0]
	  dataBytes[1] = (uint8_t)(dataSend & 0xFF); // Lower byte
 8000f20:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <main+0x374>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <main+0x37c>)
 8000f28:	705a      	strb	r2, [r3, #1]
	  dataBytes[2] = (uint8_t)((dataSend >> 8) & 0xFF); // Upper byte
 8000f2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <main+0x374>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	0a1b      	lsrs	r3, r3, #8
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <main+0x37c>)
 8000f36:	709a      	strb	r2, [r3, #2]
	  dataBytes[3] = 0x0A;
 8000f38:	4b31      	ldr	r3, [pc, #196]	@ (8001000 <main+0x37c>)
 8000f3a:	220a      	movs	r2, #10
 8000f3c:	70da      	strb	r2, [r3, #3]
	  HAL_UART_Transmit(&hlpuart1, dataBytes, sizeof(dataBytes), 10);
 8000f3e:	230a      	movs	r3, #10
 8000f40:	2205      	movs	r2, #5
 8000f42:	492f      	ldr	r1, [pc, #188]	@ (8001000 <main+0x37c>)
 8000f44:	482f      	ldr	r0, [pc, #188]	@ (8001004 <main+0x380>)
 8000f46:	f006 facd 	bl	80074e4 <HAL_UART_Transmit>
	  timestamp3 =currentTime + 1000;
 8000f4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f4e:	f512 7a7a 	adds.w	sl, r2, #1000	@ 0x3e8
 8000f52:	f143 0b00 	adc.w	fp, r3, #0
 8000f56:	4652      	mov	r2, sl
 8000f58:	465b      	mov	r3, fp
 8000f5a:	4925      	ldr	r1, [pc, #148]	@ (8000ff0 <main+0x36c>)
 8000f5c:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  if(timestamp2 < HAL_GetTick())
 8000f60:	f001 faaa 	bl	80024b8 <HAL_GetTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2200      	movs	r2, #0
 8000f68:	461c      	mov	r4, r3
 8000f6a:	4615      	mov	r5, r2
 8000f6c:	4b26      	ldr	r3, [pc, #152]	@ (8001008 <main+0x384>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	42a2      	cmp	r2, r4
 8000f74:	41ab      	sbcs	r3, r5
 8000f76:	f4bf aec5 	bcs.w	8000d04 <main+0x80>
	  {
		  if (joySW == 0)
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <main+0x340>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d150      	bne.n	8001024 <main+0x3a0>
		 	  	{
		 	  		switch (state)
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <main+0x344>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d84c      	bhi.n	8001024 <main+0x3a0>
 8000f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f90 <main+0x30c>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08000fa1 	.word	0x08000fa1
 8000f94:	0800100d 	.word	0x0800100d
 8000f98:	08001015 	.word	0x08001015
 8000f9c:	0800101d 	.word	0x0800101d
		 	  		{
		 	  		case 0:
		 	  			state = 1;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <main+0x344>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
		 	  			break;
 8000fa6:	e03d      	b.n	8001024 <main+0x3a0>
 8000fa8:	200003d8 	.word	0x200003d8
 8000fac:	2000038c 	.word	0x2000038c
 8000fb0:	20000424 	.word	0x20000424
 8000fb4:	200000a0 	.word	0x200000a0
 8000fb8:	200004c4 	.word	0x200004c4
 8000fbc:	20000580 	.word	0x20000580
 8000fc0:	48000800 	.word	0x48000800
 8000fc4:	20000514 	.word	0x20000514
 8000fc8:	20000515 	.word	0x20000515
 8000fcc:	20000526 	.word	0x20000526
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	ffffacfe 	.word	0xffffacfe
 8000fd8:	200004c0 	.word	0x200004c0
 8000fdc:	20000558 	.word	0x20000558
 8000fe0:	200004bc 	.word	0x200004bc
 8000fe4:	20000550 	.word	0x20000550
 8000fe8:	20000588 	.word	0x20000588
 8000fec:	000186a0 	.word	0x000186a0
 8000ff0:	20000590 	.word	0x20000590
 8000ff4:	20000538 	.word	0x20000538
 8000ff8:	20000536 	.word	0x20000536
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000530 	.word	0x20000530
 8001004:	200001cc 	.word	0x200001cc
 8001008:	20000598 	.word	0x20000598
		 	  		case 1:
		 	  			state = 2;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <main+0x3bc>)
 800100e:	2202      	movs	r2, #2
 8001010:	701a      	strb	r2, [r3, #0]
		 	  			break;
 8001012:	e007      	b.n	8001024 <main+0x3a0>
		 	  		case 2:
		 	  			state = 3;
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <main+0x3bc>)
 8001016:	2203      	movs	r2, #3
 8001018:	701a      	strb	r2, [r3, #0]
		 	  			break;
 800101a:	e003      	b.n	8001024 <main+0x3a0>
		 	  		case 3:
						state = 0;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <main+0x3bc>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
						break;
 8001022:	bf00      	nop
		 	  		}
		 	  	}
		  timestamp2 = HAL_GetTick() + 500;
 8001024:	f001 fa48 	bl	80024b8 <HAL_GetTick>
 8001028:	4603      	mov	r3, r0
 800102a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800102e:	2200      	movs	r2, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <main+0x3c0>)
 8001036:	e9d7 1200 	ldrd	r1, r2, [r7]
 800103a:	e9c3 1200 	strd	r1, r2, [r3]
  {
 800103e:	e661      	b.n	8000d04 <main+0x80>
 8001040:	20000515 	.word	0x20000515
 8001044:	20000598 	.word	0x20000598

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	@ 0x50
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	2238      	movs	r2, #56	@ 0x38
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f008 fb20 	bl	800969c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800106a:	2000      	movs	r0, #0
 800106c:	f003 fcb4 	bl	80049d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107a:	2340      	movs	r3, #64	@ 0x40
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001082:	2302      	movs	r3, #2
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001086:	2304      	movs	r3, #4
 8001088:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800108a:	2355      	movs	r3, #85	@ 0x55
 800108c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fd4e 	bl	8004b40 <HAL_RCC_OscConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010aa:	f000 fe27 	bl	8001cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2303      	movs	r3, #3
 80010b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2104      	movs	r1, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 f84c 	bl	8005164 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010d2:	f000 fe13 	bl	8001cfc <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3750      	adds	r7, #80	@ 0x50
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	@ 0x30
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2220      	movs	r2, #32
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f008 facf 	bl	800969c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010fe:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001100:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001104:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001106:	4b31      	ldr	r3, [pc, #196]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001108:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800110c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001114:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800111a:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <MX_ADC1_Init+0xec>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001120:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001128:	2204      	movs	r2, #4
 800112a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <MX_ADC1_Init+0xec>)
 800112e:	2200      	movs	r2, #0
 8001130:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001132:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <MX_ADC1_Init+0xec>)
 800113a:	2201      	movs	r2, #1
 800113c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001148:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 800114c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001150:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001154:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001156:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001160:	2200      	movs	r2, #0
 8001162:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800116c:	4817      	ldr	r0, [pc, #92]	@ (80011cc <MX_ADC1_Init+0xec>)
 800116e:	f001 fbf3 	bl	8002958 <HAL_ADC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001178:	f000 fdc0 	bl	8001cfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4811      	ldr	r0, [pc, #68]	@ (80011cc <MX_ADC1_Init+0xec>)
 8001188:	f002 fd12 	bl	8003bb0 <HAL_ADCEx_MultiModeConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001192:	f000 fdb3 	bl	8001cfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_ADC1_Init+0xf0>)
 8001198:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119a:	2306      	movs	r3, #6
 800119c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011a2:	237f      	movs	r3, #127	@ 0x7f
 80011a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a6:	2304      	movs	r3, #4
 80011a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <MX_ADC1_Init+0xec>)
 80011b4:	f001 fe7e 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80011be:	f000 fd9d 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	@ 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000034 	.word	0x20000034
 80011d0:	14f00020 	.word	0x14f00020

080011d4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	@ 0x30
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2220      	movs	r2, #32
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f008 fa55 	bl	800969c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011f2:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <MX_ADC3_Init+0x100>)
 80011f4:	4a38      	ldr	r2, [pc, #224]	@ (80012d8 <MX_ADC3_Init+0x104>)
 80011f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f8:	4b36      	ldr	r3, [pc, #216]	@ (80012d4 <MX_ADC3_Init+0x100>)
 80011fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001200:	4b34      	ldr	r3, [pc, #208]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001206:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800120c:	4b31      	ldr	r3, [pc, #196]	@ (80012d4 <MX_ADC3_Init+0x100>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001212:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001214:	2201      	movs	r2, #1
 8001216:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001218:	4b2e      	ldr	r3, [pc, #184]	@ (80012d4 <MX_ADC3_Init+0x100>)
 800121a:	2204      	movs	r2, #4
 800121c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800121e:	4b2d      	ldr	r3, [pc, #180]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001220:	2200      	movs	r2, #0
 8001222:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001226:	2201      	movs	r2, #1
 8001228:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 800122a:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <MX_ADC3_Init+0x100>)
 800122c:	2202      	movs	r2, #2
 800122e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001230:	4b28      	ldr	r3, [pc, #160]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001238:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <MX_ADC3_Init+0x100>)
 800123a:	2200      	movs	r2, #0
 800123c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800123e:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001244:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <MX_ADC3_Init+0x100>)
 800124e:	2200      	movs	r2, #0
 8001250:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800125a:	481e      	ldr	r0, [pc, #120]	@ (80012d4 <MX_ADC3_Init+0x100>)
 800125c:	f001 fb7c 	bl	8002958 <HAL_ADC_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001266:	f000 fd49 	bl	8001cfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800126e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4817      	ldr	r0, [pc, #92]	@ (80012d4 <MX_ADC3_Init+0x100>)
 8001276:	f002 fc9b 	bl	8003bb0 <HAL_ADCEx_MultiModeConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001280:	f000 fd3c 	bl	8001cfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_ADC3_Init+0x108>)
 8001286:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001288:	2306      	movs	r3, #6
 800128a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001290:	237f      	movs	r3, #127	@ 0x7f
 8001292:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001294:	2304      	movs	r3, #4
 8001296:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <MX_ADC3_Init+0x100>)
 80012a2:	f001 fe07 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80012ac:	f000 fd26 	bl	8001cfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <MX_ADC3_Init+0x10c>)
 80012b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012b4:	230c      	movs	r3, #12
 80012b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_ADC3_Init+0x100>)
 80012be:	f001 fdf9 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 80012c8:	f000 fd18 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3730      	adds	r7, #48	@ 0x30
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200000a0 	.word	0x200000a0
 80012d8:	50000400 	.word	0x50000400
 80012dc:	04300002 	.word	0x04300002
 80012e0:	14f00020 	.word	0x14f00020

080012e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 80012ea:	4a22      	ldr	r2, [pc, #136]	@ (8001374 <MX_LPUART1_UART_Init+0x90>)
 80012ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001314:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 8001322:	2200      	movs	r2, #0
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001326:	4812      	ldr	r0, [pc, #72]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 8001328:	f006 f88c 	bl	8007444 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001332:	f000 fce3 	bl	8001cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001336:	2100      	movs	r1, #0
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 800133a:	f008 f8e4 	bl	8009506 <HAL_UARTEx_SetTxFifoThreshold>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001344:	f000 fcda 	bl	8001cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001348:	2100      	movs	r1, #0
 800134a:	4809      	ldr	r0, [pc, #36]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 800134c:	f008 f919 	bl	8009582 <HAL_UARTEx_SetRxFifoThreshold>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001356:	f000 fcd1 	bl	8001cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_LPUART1_UART_Init+0x8c>)
 800135c:	f008 f89a 	bl	8009494 <HAL_UARTEx_DisableFifoMode>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001366:	f000 fcc9 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200001cc 	.word	0x200001cc
 8001374:	40008000 	.word	0x40008000

08001378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <MX_USART1_UART_Init+0x94>)
 800137e:	4a24      	ldr	r2, [pc, #144]	@ (8001410 <MX_USART1_UART_Init+0x98>)
 8001380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_USART1_UART_Init+0x94>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <MX_USART1_UART_Init+0x94>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <MX_USART1_UART_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_USART1_UART_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <MX_USART1_UART_Init+0x94>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_USART1_UART_Init+0x94>)
 80013a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <MX_USART1_UART_Init+0x94>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_USART1_UART_Init+0x94>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <MX_USART1_UART_Init+0x94>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <MX_USART1_UART_Init+0x94>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c2:	4812      	ldr	r0, [pc, #72]	@ (800140c <MX_USART1_UART_Init+0x94>)
 80013c4:	f006 f83e 	bl	8007444 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80013ce:	f000 fc95 	bl	8001cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_USART1_UART_Init+0x94>)
 80013d6:	f008 f896 	bl	8009506 <HAL_UARTEx_SetTxFifoThreshold>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80013e0:	f000 fc8c 	bl	8001cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e4:	2100      	movs	r1, #0
 80013e6:	4809      	ldr	r0, [pc, #36]	@ (800140c <MX_USART1_UART_Init+0x94>)
 80013e8:	f008 f8cb 	bl	8009582 <HAL_UARTEx_SetRxFifoThreshold>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80013f2:	f000 fc83 	bl	8001cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USART1_UART_Init+0x94>)
 80013f8:	f008 f84c 	bl	8009494 <HAL_UARTEx_DisableFifoMode>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001402:	f000 fc7b 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000260 	.word	0x20000260
 8001410:	40013800 	.word	0x40013800

08001414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001434:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <MX_TIM1_Init+0xa4>)
 8001436:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001444:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800144a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800145e:	4815      	ldr	r0, [pc, #84]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 8001460:	f004 faea 	bl	8005a38 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800146a:	f000 fc47 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	480e      	ldr	r0, [pc, #56]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 800147c:	f005 f928 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001486:	f000 fc39 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_TIM1_Init+0xa0>)
 800149c:	f005 fef6 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014a6:	f000 fc29 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002f4 	.word	0x200002f4
 80014b8:	40012c00 	.word	0x40012c00

080014bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <MX_TIM2_Init+0x98>)
 80014dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_TIM2_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_TIM2_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <MX_TIM2_Init+0x98>)
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_TIM2_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <MX_TIM2_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001502:	4814      	ldr	r0, [pc, #80]	@ (8001554 <MX_TIM2_Init+0x98>)
 8001504:	f004 fa98 	bl	8005a38 <HAL_TIM_Base_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800150e:	f000 fbf5 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001512:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001516:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <MX_TIM2_Init+0x98>)
 8001520:	f005 f8d6 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800152a:	f000 fbe7 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	@ (8001554 <MX_TIM2_Init+0x98>)
 800153c:	f005 fea6 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001546:	f000 fbd9 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000340 	.word	0x20000340

08001558 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	@ 0x30
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2224      	movs	r2, #36	@ 0x24
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f008 f898 	bl	800969c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001576:	4b21      	ldr	r3, [pc, #132]	@ (80015fc <MX_TIM3_Init+0xa4>)
 8001578:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <MX_TIM3_Init+0xa8>)
 800157a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <MX_TIM3_Init+0xa4>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <MX_TIM3_Init+0xa4>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 57343;
 8001588:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <MX_TIM3_Init+0xa4>)
 800158a:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 800158e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_TIM3_Init+0xa4>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <MX_TIM3_Init+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800159c:	2303      	movs	r3, #3
 800159e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b4:	2301      	movs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	@ (80015fc <MX_TIM3_Init+0xa4>)
 80015c8:	f004 fcea 	bl	8005fa0 <HAL_TIM_Encoder_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80015d2:	f000 fb93 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	@ (80015fc <MX_TIM3_Init+0xa4>)
 80015e4:	f005 fe52 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80015ee:	f000 fb85 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	@ 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000038c 	.word	0x2000038c
 8001600:	40000400 	.word	0x40000400

08001604 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	@ 0x38
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001636:	4b2d      	ldr	r3, [pc, #180]	@ (80016ec <MX_TIM4_Init+0xe8>)
 8001638:	4a2d      	ldr	r2, [pc, #180]	@ (80016f0 <MX_TIM4_Init+0xec>)
 800163a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800163c:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <MX_TIM4_Init+0xe8>)
 800163e:	2201      	movs	r2, #1
 8001640:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <MX_TIM4_Init+0xe8>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42499;
 8001648:	4b28      	ldr	r3, [pc, #160]	@ (80016ec <MX_TIM4_Init+0xe8>)
 800164a:	f24a 6203 	movw	r2, #42499	@ 0xa603
 800164e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <MX_TIM4_Init+0xe8>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b25      	ldr	r3, [pc, #148]	@ (80016ec <MX_TIM4_Init+0xe8>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800165c:	4823      	ldr	r0, [pc, #140]	@ (80016ec <MX_TIM4_Init+0xe8>)
 800165e:	f004 f9eb 	bl	8005a38 <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001668:	f000 fb48 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001672:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001676:	4619      	mov	r1, r3
 8001678:	481c      	ldr	r0, [pc, #112]	@ (80016ec <MX_TIM4_Init+0xe8>)
 800167a:	f005 f829 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001684:	f000 fb3a 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001688:	4818      	ldr	r0, [pc, #96]	@ (80016ec <MX_TIM4_Init+0xe8>)
 800168a:	f004 fb15 	bl	8005cb8 <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001694:	f000 fb32 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	4811      	ldr	r0, [pc, #68]	@ (80016ec <MX_TIM4_Init+0xe8>)
 80016a8:	f005 fdf0 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80016b2:	f000 fb23 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b6:	2360      	movs	r3, #96	@ 0x60
 80016b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	4619      	mov	r1, r3
 80016cc:	4807      	ldr	r0, [pc, #28]	@ (80016ec <MX_TIM4_Init+0xe8>)
 80016ce:	f004 feeb 	bl	80064a8 <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80016d8:	f000 fb10 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016dc:	4803      	ldr	r0, [pc, #12]	@ (80016ec <MX_TIM4_Init+0xe8>)
 80016de:	f000 fda9 	bl	8002234 <HAL_TIM_MspPostInit>

}
 80016e2:	bf00      	nop
 80016e4:	3738      	adds	r7, #56	@ 0x38
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200003d8 	.word	0x200003d8
 80016f0:	40000800 	.word	0x40000800

080016f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <MX_TIM5_Init+0x94>)
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <MX_TIM5_Init+0x98>)
 8001716:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <MX_TIM5_Init+0x94>)
 800171a:	22a9      	movs	r2, #169	@ 0xa9
 800171c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <MX_TIM5_Init+0x94>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001724:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <MX_TIM5_Init+0x94>)
 8001726:	f04f 32ff 	mov.w	r2, #4294967295
 800172a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <MX_TIM5_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <MX_TIM5_Init+0x94>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001738:	4813      	ldr	r0, [pc, #76]	@ (8001788 <MX_TIM5_Init+0x94>)
 800173a:	f004 f97d 	bl	8005a38 <HAL_TIM_Base_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001744:	f000 fada 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	@ (8001788 <MX_TIM5_Init+0x94>)
 8001756:	f004 ffbb 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001760:	f000 facc 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001764:	2320      	movs	r3, #32
 8001766:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_TIM5_Init+0x94>)
 8001772:	f005 fd8b 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800177c:	f000 fabe 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000424 	.word	0x20000424
 800178c:	40000c00 	.word	0x40000c00

08001790 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <MX_TIM8_Init+0xa0>)
 80017b0:	4a20      	ldr	r2, [pc, #128]	@ (8001834 <MX_TIM8_Init+0xa4>)
 80017b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <MX_TIM8_Init+0xa0>)
 80017b6:	22a9      	movs	r2, #169	@ 0xa9
 80017b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <MX_TIM8_Init+0xa0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <MX_TIM8_Init+0xa0>)
 80017c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <MX_TIM8_Init+0xa0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <MX_TIM8_Init+0xa0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_TIM8_Init+0xa0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017da:	4815      	ldr	r0, [pc, #84]	@ (8001830 <MX_TIM8_Init+0xa0>)
 80017dc:	f004 f92c 	bl	8005a38 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80017e6:	f000 fa89 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	480e      	ldr	r0, [pc, #56]	@ (8001830 <MX_TIM8_Init+0xa0>)
 80017f8:	f004 ff6a 	bl	80066d0 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001802:	f000 fa7b 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	@ (8001830 <MX_TIM8_Init+0xa0>)
 8001818:	f005 fd38 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001822:	f000 fa6b 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000470 	.word	0x20000470
 8001834:	40013400 	.word	0x40013400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_DMA_Init+0x60>)
 8001840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001842:	4a15      	ldr	r2, [pc, #84]	@ (8001898 <MX_DMA_Init+0x60>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6493      	str	r3, [r2, #72]	@ 0x48
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_DMA_Init+0x60>)
 800184c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <MX_DMA_Init+0x60>)
 8001858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185a:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <MX_DMA_Init+0x60>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6493      	str	r3, [r2, #72]	@ 0x48
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <MX_DMA_Init+0x60>)
 8001864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	200b      	movs	r0, #11
 8001874:	f002 fb7f 	bl	8003f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001878:	200b      	movs	r0, #11
 800187a:	f002 fb96 	bl	8003faa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	200c      	movs	r0, #12
 8001884:	f002 fb77 	bl	8003f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001888:	200c      	movs	r0, #12
 800188a:	f002 fb8e 	bl	8003faa <HAL_NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000

0800189c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	@ 0x28
 80018a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b2:	4b3b      	ldr	r3, [pc, #236]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	4a3a      	ldr	r2, [pc, #232]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018be:	4b38      	ldr	r3, [pc, #224]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ca:	4b35      	ldr	r3, [pc, #212]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	4a34      	ldr	r2, [pc, #208]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018d0:	f043 0320 	orr.w	r3, r3, #32
 80018d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d6:	4b32      	ldr	r3, [pc, #200]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	4a2e      	ldr	r2, [pc, #184]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ee:	4b2c      	ldr	r3, [pc, #176]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <MX_GPIO_Init+0x104>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	4a28      	ldr	r2, [pc, #160]	@ (80019a0 <MX_GPIO_Init+0x104>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <MX_GPIO_Init+0x104>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2123      	movs	r1, #35	@ 0x23
 8001916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191a:	f003 f82d 	bl	8004978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800191e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001924:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	481b      	ldr	r0, [pc, #108]	@ (80019a4 <MX_GPIO_Init+0x108>)
 8001936:	f002 fe85 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800193a:	2301      	movs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001942:	2301      	movs	r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <MX_GPIO_Init+0x108>)
 800194e:	f002 fe79 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001952:	230e      	movs	r3, #14
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	480f      	ldr	r0, [pc, #60]	@ (80019a4 <MX_GPIO_Init+0x108>)
 8001966:	f002 fe6d 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 800196a:	2323      	movs	r3, #35	@ 0x23
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001984:	f002 fe5e 	bl	8004644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2028      	movs	r0, #40	@ 0x28
 800198e:	f002 faf2 	bl	8003f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001992:	2028      	movs	r0, #40	@ 0x28
 8001994:	f002 fb09 	bl	8003faa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	@ 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48000800 	.word	0x48000800

080019a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b4b0      	push	{r4, r5, r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d108      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	1e54      	subs	r4, r2, #1
 80019c0:	f143 0500 	adc.w	r5, r3, #0
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019c6:	e9c3 4500 	strd	r4, r5, [r3]
}
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bcb0      	pop	{r4, r5, r7}
 80019d2:	4770      	bx	lr
 80019d4:	20000424 	.word	0x20000424
 80019d8:	20000580 	.word	0x20000580

080019dc <micros>:
uint64_t micros()
{
 80019dc:	b4b0      	push	{r4, r5, r7}
 80019de:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <micros+0x2c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	2200      	movs	r2, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	4611      	mov	r1, r2
 80019ec:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <micros+0x30>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	1884      	adds	r4, r0, r2
 80019f4:	eb41 0503 	adc.w	r5, r1, r3
 80019f8:	4622      	mov	r2, r4
 80019fa:	462b      	mov	r3, r5
}
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bcb0      	pop	{r4, r5, r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000424 	.word	0x20000424
 8001a0c:	20000580 	.word	0x20000580

08001a10 <QEIEncoderPosVel_Update>:
void QEIEncoderPosVel_Update()
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 8001a16:	f7ff ffe1 	bl	80019dc <micros>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	495c      	ldr	r1, [pc, #368]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001a20:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8001a24:	4b5b      	ldr	r3, [pc, #364]	@ (8001b94 <QEIEncoderPosVel_Update+0x184>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	4a59      	ldr	r2, [pc, #356]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001a2c:	6013      	str	r3, [r2, #0]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8001a2e:	4b58      	ldr	r3, [pc, #352]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3e:	4b54      	ldr	r3, [pc, #336]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001a40:	edc3 7a06 	vstr	s15, [r3, #24]
//calculate dx
int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001a44:	4b52      	ldr	r3, [pc, #328]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b51      	ldr	r3, [pc, #324]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	607b      	str	r3, [r7, #4]
//Handle Warp around
if(diffPosition > 28672)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001a56:	dd08      	ble.n	8001a6a <QEIEncoderPosVel_Update+0x5a>
{
diffPosition -=57344;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f5a3 4360 	sub.w	r3, r3, #57344	@ 0xe000
 8001a5e:	607b      	str	r3, [r7, #4]
Count-=1;
 8001a60:	4b4d      	ldr	r3, [pc, #308]	@ (8001b98 <QEIEncoderPosVel_Update+0x188>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	4a4c      	ldr	r2, [pc, #304]	@ (8001b98 <QEIEncoderPosVel_Update+0x188>)
 8001a68:	6013      	str	r3, [r2, #0]
}
if(diffPosition < -28672)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f513 4fe0 	cmn.w	r3, #28672	@ 0x7000
 8001a70:	da08      	bge.n	8001a84 <QEIEncoderPosVel_Update+0x74>
{
diffPosition +=57344;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001a78:	607b      	str	r3, [r7, #4]
Count+=1;
 8001a7a:	4b47      	ldr	r3, [pc, #284]	@ (8001b98 <QEIEncoderPosVel_Update+0x188>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a45      	ldr	r2, [pc, #276]	@ (8001b98 <QEIEncoderPosVel_Update+0x188>)
 8001a82:	6013      	str	r3, [r2, #0]
}
//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8001a84:	4b42      	ldr	r3, [pc, #264]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001a86:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a8a:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001a8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a90:	1a84      	subs	r4, r0, r2
 8001a92:	eb61 0503 	sbc.w	r5, r1, r3
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fe6d 	bl	8000778 <__aeabi_ul2d>
 8001a9e:	a338      	add	r3, pc, #224	@ (adr r3, 8001b80 <QEIEncoderPosVel_Update+0x170>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe fbb8 	bl	8000218 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7fe ff20 	bl	80008f4 <__aeabi_d2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	603b      	str	r3, [r7, #0]
//calculate anglar velocity
QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ac2:	ed97 7a00 	vldr	s14, [r7]
 8001ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aca:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001acc:	edc3 7a07 	vstr	s15, [r3, #28]
RPSspeed = ((QEIdata.QEIAngularVelocity)/8192)*60;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001ad2:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ad6:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001b9c <QEIEncoderPosVel_Update+0x18c>
 8001ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ade:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001ba0 <QEIEncoderPosVel_Update+0x190>
 8001ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aea:	ee17 3a90 	vmov	r3, s15
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <QEIEncoderPosVel_Update+0x194>)
 8001af2:	801a      	strh	r2, [r3, #0]
speed = ((QEIdata.QEIAngularVelocity)/8192)*12.5*2*3.14;
 8001af4:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001af6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001afa:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001b9c <QEIEncoderPosVel_Update+0x18c>
 8001afe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b02:	ee16 0a90 	vmov	r0, s13
 8001b06:	f7fe fe15 	bl	8000734 <__aeabi_f2d>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <QEIEncoderPosVel_Update+0x198>)
 8001b10:	f7fe fb82 	bl	8000218 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	f7fe fcaa 	bl	8000478 <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	a316      	add	r3, pc, #88	@ (adr r3, 8001b88 <QEIEncoderPosVel_Update+0x178>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe fb71 	bl	8000218 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	491c      	ldr	r1, [pc, #112]	@ (8001bac <QEIEncoderPosVel_Update+0x19c>)
 8001b3c:	e9c1 2300 	strd	r2, r3, [r1]
if(speed>MAXspeed)
 8001b40:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <QEIEncoderPosVel_Update+0x19c>)
 8001b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b46:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <QEIEncoderPosVel_Update+0x1a0>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fec8 	bl	80008e0 <__aeabi_dcmpgt>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <QEIEncoderPosVel_Update+0x152>
{
	MAXspeed = speed;
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <QEIEncoderPosVel_Update+0x19c>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	4914      	ldr	r1, [pc, #80]	@ (8001bb0 <QEIEncoderPosVel_Update+0x1a0>)
 8001b5e:	e9c1 2300 	strd	r2, r3, [r1]
}
//store value for next loop
QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001b68:	6053      	str	r3, [r2, #4]
QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001b6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b70:	4907      	ldr	r1, [pc, #28]	@ (8001b90 <QEIEncoderPosVel_Update+0x180>)
 8001b72:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	a0b5ed8d 	.word	0xa0b5ed8d
 8001b84:	3eb0c6f7 	.word	0x3eb0c6f7
 8001b88:	51eb851f 	.word	0x51eb851f
 8001b8c:	40091eb8 	.word	0x40091eb8
 8001b90:	20000560 	.word	0x20000560
 8001b94:	2000038c 	.word	0x2000038c
 8001b98:	200004bc 	.word	0x200004bc
 8001b9c:	46000000 	.word	0x46000000
 8001ba0:	42700000 	.word	0x42700000
 8001ba4:	20000538 	.word	0x20000538
 8001ba8:	40290000 	.word	0x40290000
 8001bac:	20000540 	.word	0x20000540
 8001bb0:	20000548 	.word	0x20000548

08001bb4 <UARTInterruptConfig>:

void UARTInterruptConfig()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Rx,4);
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4903      	ldr	r1, [pc, #12]	@ (8001bc8 <UARTInterruptConfig+0x14>)
 8001bbc:	4803      	ldr	r0, [pc, #12]	@ (8001bcc <UARTInterruptConfig+0x18>)
 8001bbe:	f005 fd1f 	bl	8007600 <HAL_UART_Receive_IT>
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000528 	.word	0x20000528
 8001bcc:	200001cc 	.word	0x200001cc

08001bd0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x28>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d107      	bne.n	8001bf0 <HAL_UART_RxCpltCallback+0x20>
	{
		Rx[4] = '\0';
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_UART_RxCpltCallback+0x2c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&hlpuart1, Rx, 4);
 8001be6:	2204      	movs	r2, #4
 8001be8:	4904      	ldr	r1, [pc, #16]	@ (8001bfc <HAL_UART_RxCpltCallback+0x2c>)
 8001bea:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x28>)
 8001bec:	f005 fd08 	bl	8007600 <HAL_UART_Receive_IT>
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200001cc 	.word	0x200001cc
 8001bfc:	20000528 	.word	0x20000528

08001c00 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c10:	d116      	bne.n	8001c40 <HAL_GPIO_EXTI_Callback+0x40>
	{
		switch (state)
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d00e      	beq.n	8001c38 <HAL_GPIO_EXTI_Callback+0x38>
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	dc10      	bgt.n	8001c40 <HAL_GPIO_EXTI_Callback+0x40>
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_GPIO_EXTI_Callback+0x28>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d004      	beq.n	8001c30 <HAL_GPIO_EXTI_Callback+0x30>
		case 2:
			state = 0;
			break;
		}
	}
}
 8001c26:	e00b      	b.n	8001c40 <HAL_GPIO_EXTI_Callback+0x40>
			state = 1;
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
			break;
 8001c2e:	e007      	b.n	8001c40 <HAL_GPIO_EXTI_Callback+0x40>
			state = 2;
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c32:	2202      	movs	r2, #2
 8001c34:	701a      	strb	r2, [r3, #0]
			break;
 8001c36:	e003      	b.n	8001c40 <HAL_GPIO_EXTI_Callback+0x40>
			state = 0;
 8001c38:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
			break;
 8001c3e:	bf00      	nop
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20000515 	.word	0x20000515

08001c50 <Joy_Averaged>:
void Joy_Averaged()
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	e017      	b.n	8001c8c <Joy_Averaged+0x3c>
	{
		joySum[0] += joyAnalogRead[2*i];
 8001c5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <Joy_Averaged+0x94>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	0052      	lsls	r2, r2, #1
 8001c64:	4920      	ldr	r1, [pc, #128]	@ (8001ce8 <Joy_Averaged+0x98>)
 8001c66:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce4 <Joy_Averaged+0x94>)
 8001c6e:	6013      	str	r3, [r2, #0]
		joySum[1] += joyAnalogRead[1+(2*i)];
 8001c70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <Joy_Averaged+0x94>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	0052      	lsls	r2, r2, #1
 8001c78:	3201      	adds	r2, #1
 8001c7a:	491b      	ldr	r1, [pc, #108]	@ (8001ce8 <Joy_Averaged+0x98>)
 8001c7c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a18      	ldr	r2, [pc, #96]	@ (8001ce4 <Joy_Averaged+0x94>)
 8001c84:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 20; i++)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b13      	cmp	r3, #19
 8001c90:	dde4      	ble.n	8001c5c <Joy_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	e014      	b.n	8001cc2 <Joy_Averaged+0x72>
	{
		joyAvg[i] = joySum[i] / 20;
 8001c98:	4a12      	ldr	r2, [pc, #72]	@ (8001ce4 <Joy_Averaged+0x94>)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <Joy_Averaged+0x9c>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	b299      	uxth	r1, r3
 8001caa:	4a11      	ldr	r2, [pc, #68]	@ (8001cf0 <Joy_Averaged+0xa0>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		joySum[i] = 0;
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce4 <Joy_Averaged+0x94>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	dde7      	ble.n	8001c98 <Joy_Averaged+0x48>
	}

	joyX = joyAvg[0];
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <Joy_Averaged+0xa0>)
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <Joy_Averaged+0xa4>)
 8001cce:	801a      	strh	r2, [r3, #0]
	joyY = joyAvg[1];
 8001cd0:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <Joy_Averaged+0xa0>)
 8001cd2:	885a      	ldrh	r2, [r3, #2]
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <Joy_Averaged+0xa8>)
 8001cd6:	801a      	strh	r2, [r3, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	2000051c 	.word	0x2000051c
 8001ce8:	200004c4 	.word	0x200004c4
 8001cec:	cccccccd 	.word	0xcccccccd
 8001cf0:	20000518 	.word	0x20000518
 8001cf4:	20000524 	.word	0x20000524
 8001cf8:	20000526 	.word	0x20000526

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <Error_Handler+0x8>

08001d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_MspInit+0x44>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d12:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <HAL_MspInit+0x44>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <HAL_MspInit+0x44>)
 8001d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_MspInit+0x44>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <HAL_MspInit+0x44>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_MspInit+0x44>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d3e:	f002 feef 	bl	8004b20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0a0      	sub	sp, #128	@ 0x80
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	2254      	movs	r2, #84	@ 0x54
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f007 fc93 	bl	800969c <memset>
  if(hadc->Instance==ADC1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d7e:	d160      	bne.n	8001e42 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001d80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d86:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d8c:	f107 0318 	add.w	r3, r7, #24
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fc03 	bl	800559c <HAL_RCCEx_PeriphCLKConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d9c:	f7ff ffae 	bl	8001cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001da0:	4b5c      	ldr	r3, [pc, #368]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da4:	4a5b      	ldr	r2, [pc, #364]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001da6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001daa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dac:	4b59      	ldr	r3, [pc, #356]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	4b56      	ldr	r3, [pc, #344]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbc:	4a55      	ldr	r2, [pc, #340]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc4:	4b53      	ldr	r3, [pc, #332]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001dd0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001dd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001de2:	4619      	mov	r1, r3
 8001de4:	484c      	ldr	r0, [pc, #304]	@ (8001f18 <HAL_ADC_MspInit+0x1c8>)
 8001de6:	f002 fc2d 	bl	8004644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001dea:	4b4c      	ldr	r3, [pc, #304]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001dec:	4a4c      	ldr	r2, [pc, #304]	@ (8001f20 <HAL_ADC_MspInit+0x1d0>)
 8001dee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001df0:	4b4a      	ldr	r3, [pc, #296]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001df2:	2205      	movs	r2, #5
 8001df4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df6:	4b49      	ldr	r3, [pc, #292]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfc:	4b47      	ldr	r3, [pc, #284]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e02:	4b46      	ldr	r3, [pc, #280]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001e04:	2280      	movs	r2, #128	@ 0x80
 8001e06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e08:	4b44      	ldr	r3, [pc, #272]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e10:	4b42      	ldr	r3, [pc, #264]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e18:	4b40      	ldr	r3, [pc, #256]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e24:	483d      	ldr	r0, [pc, #244]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001e26:	f002 f8db 	bl	8003fe0 <HAL_DMA_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001e30:	f7ff ff64 	bl	8001cfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a39      	ldr	r2, [pc, #228]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001e38:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e3a:	4a38      	ldr	r2, [pc, #224]	@ (8001f1c <HAL_ADC_MspInit+0x1cc>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e40:	e064      	b.n	8001f0c <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC3)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a37      	ldr	r2, [pc, #220]	@ (8001f24 <HAL_ADC_MspInit+0x1d4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d15f      	bne.n	8001f0c <HAL_ADC_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001e4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001e52:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001e56:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fb9d 	bl	800559c <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8001e68:	f7ff ff48 	bl	8001cfc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001e6c:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e70:	4a28      	ldr	r2, [pc, #160]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001e72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e78:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e84:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e88:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e90:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <HAL_ADC_MspInit+0x1c4>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8001e9c:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001ea0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4819      	ldr	r0, [pc, #100]	@ (8001f18 <HAL_ADC_MspInit+0x1c8>)
 8001eb2:	f002 fbc7 	bl	8004644 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel2;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <HAL_ADC_MspInit+0x1dc>)
 8001eba:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001ebe:	2225      	movs	r2, #37	@ 0x25
 8001ec0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001ed0:	2280      	movs	r2, #128	@ 0x80
 8001ed2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eda:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001ede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ee2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001eea:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ef0:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001ef2:	f002 f875 	bl	8003fe0 <HAL_DMA_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8001efc:	f7ff fefe 	bl	8001cfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a09      	ldr	r2, [pc, #36]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f06:	4a08      	ldr	r2, [pc, #32]	@ (8001f28 <HAL_ADC_MspInit+0x1d8>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001f0c:	bf00      	nop
 8001f0e:	3780      	adds	r7, #128	@ 0x80
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	48000400 	.word	0x48000400
 8001f1c:	2000010c 	.word	0x2000010c
 8001f20:	40020008 	.word	0x40020008
 8001f24:	50000400 	.word	0x50000400
 8001f28:	2000016c 	.word	0x2000016c
 8001f2c:	4002001c 	.word	0x4002001c

08001f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b0a2      	sub	sp, #136	@ 0x88
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	2254      	movs	r2, #84	@ 0x54
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f007 fba3 	bl	800969c <memset>
  if(huart->Instance==LPUART1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a53      	ldr	r2, [pc, #332]	@ (80020a8 <HAL_UART_MspInit+0x178>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d141      	bne.n	8001fe4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f60:	2320      	movs	r3, #32
 8001f62:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	f107 0320 	add.w	r3, r7, #32
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fb15 	bl	800559c <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f78:	f7ff fec0 	bl	8001cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	4a4a      	ldr	r2, [pc, #296]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001f88:	4b48      	ldr	r3, [pc, #288]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b45      	ldr	r3, [pc, #276]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	4a44      	ldr	r2, [pc, #272]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa0:	4b42      	ldr	r3, [pc, #264]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001fac:	230c      	movs	r3, #12
 8001fae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fce:	f002 fb39 	bl	8004644 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	205b      	movs	r0, #91	@ 0x5b
 8001fd8:	f001 ffcd 	bl	8003f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001fdc:	205b      	movs	r0, #91	@ 0x5b
 8001fde:	f001 ffe4 	bl	8003faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fe2:	e05c      	b.n	800209e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a31      	ldr	r2, [pc, #196]	@ (80020b0 <HAL_UART_MspInit+0x180>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d157      	bne.n	800209e <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff6:	f107 0320 	add.w	r3, r7, #32
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 face 	bl	800559c <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_UART_MspInit+0xda>
      Error_Handler();
 8002006:	f7ff fe79 	bl	8001cfc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800200a:	4b28      	ldr	r3, [pc, #160]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200e:	4a27      	ldr	r2, [pc, #156]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002014:	6613      	str	r3, [r2, #96]	@ 0x60
 8002016:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	4b22      	ldr	r3, [pc, #136]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	4a21      	ldr	r2, [pc, #132]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203e:	4a1b      	ldr	r2, [pc, #108]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002046:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <HAL_UART_MspInit+0x17c>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002052:	2330      	movs	r3, #48	@ 0x30
 8002054:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002064:	2307      	movs	r3, #7
 8002066:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800206e:	4619      	mov	r1, r3
 8002070:	4810      	ldr	r0, [pc, #64]	@ (80020b4 <HAL_UART_MspInit+0x184>)
 8002072:	f002 fae7 	bl	8004644 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800207a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800208a:	2307      	movs	r3, #7
 800208c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002094:	4619      	mov	r1, r3
 8002096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209a:	f002 fad3 	bl	8004644 <HAL_GPIO_Init>
}
 800209e:	bf00      	nop
 80020a0:	3788      	adds	r7, #136	@ 0x88
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40008000 	.word	0x40008000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40013800 	.word	0x40013800
 80020b4:	48000800 	.word	0x48000800

080020b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a31      	ldr	r2, [pc, #196]	@ (800218c <HAL_TIM_Base_MspInit+0xd4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10c      	bne.n	80020e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ca:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	4a30      	ldr	r2, [pc, #192]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 80020d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 80020d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020e2:	e04e      	b.n	8002182 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ec:	d10c      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	4a27      	ldr	r2, [pc, #156]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fa:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]
}
 8002106:	e03c      	b.n	8002182 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <HAL_TIM_Base_MspInit+0xdc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10c      	bne.n	800212c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002112:	4b1f      	ldr	r3, [pc, #124]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	4a1e      	ldr	r2, [pc, #120]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6593      	str	r3, [r2, #88]	@ 0x58
 800211e:	4b1c      	ldr	r3, [pc, #112]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697b      	ldr	r3, [r7, #20]
}
 800212a:	e02a      	b.n	8002182 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a19      	ldr	r2, [pc, #100]	@ (8002198 <HAL_TIM_Base_MspInit+0xe0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d114      	bne.n	8002160 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002136:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	4a15      	ldr	r2, [pc, #84]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	6593      	str	r3, [r2, #88]	@ 0x58
 8002142:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2032      	movs	r0, #50	@ 0x32
 8002154:	f001 ff0f 	bl	8003f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002158:	2032      	movs	r0, #50	@ 0x32
 800215a:	f001 ff26 	bl	8003faa <HAL_NVIC_EnableIRQ>
}
 800215e:	e010      	b.n	8002182 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <HAL_TIM_Base_MspInit+0xe4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d10b      	bne.n	8002182 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216e:	4a08      	ldr	r2, [pc, #32]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 8002170:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002174:	6613      	str	r3, [r2, #96]	@ 0x60
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_TIM_Base_MspInit+0xd8>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
}
 8002182:	bf00      	nop
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40012c00 	.word	0x40012c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40000800 	.word	0x40000800
 8002198:	40000c00 	.word	0x40000c00
 800219c:	40013400 	.word	0x40013400

080021a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	@ 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1b      	ldr	r2, [pc, #108]	@ (800222c <HAL_TIM_Encoder_MspInit+0x8c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d130      	bne.n	8002224 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_TIM_Encoder_MspInit+0x90>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_TIM_Encoder_MspInit+0x90>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <HAL_TIM_Encoder_MspInit+0x90>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_TIM_Encoder_MspInit+0x90>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	4a14      	ldr	r2, [pc, #80]	@ (8002230 <HAL_TIM_Encoder_MspInit+0x90>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e6:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_TIM_Encoder_MspInit+0x90>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f2:	23c0      	movs	r3, #192	@ 0xc0
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002202:	2302      	movs	r3, #2
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002210:	f002 fa18 	bl	8004644 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	201d      	movs	r0, #29
 800221a:	f001 feac 	bl	8003f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800221e:	201d      	movs	r0, #29
 8002220:	f001 fec3 	bl	8003faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	@ 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40000400 	.word	0x40000400
 8002230:	40021000 	.word	0x40021000

08002234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a12      	ldr	r2, [pc, #72]	@ (800229c <HAL_TIM_MspPostInit+0x68>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d11d      	bne.n	8002292 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_TIM_MspPostInit+0x6c>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	4a11      	ldr	r2, [pc, #68]	@ (80022a0 <HAL_TIM_MspPostInit+0x6c>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <HAL_TIM_MspPostInit+0x6c>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800226e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002272:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002280:	230a      	movs	r3, #10
 8002282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	4619      	mov	r1, r3
 800228a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800228e:	f002 f9d9 	bl	8004644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002292:	bf00      	nop
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40000800 	.word	0x40000800
 80022a0:	40021000 	.word	0x40021000

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <NMI_Handler+0x4>

080022ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <MemManage_Handler+0x4>

080022bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <UsageFault_Handler+0x4>

080022cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fa:	f000 f8cb 	bl	8002494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <DMA1_Channel1_IRQHandler+0x10>)
 800230a:	f002 f84c 	bl	80043a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000010c 	.word	0x2000010c

08002318 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <DMA1_Channel2_IRQHandler+0x10>)
 800231e:	f002 f842 	bl	80043a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000016c 	.word	0x2000016c

0800232c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <TIM3_IRQHandler+0x10>)
 8002332:	f003 ff69 	bl	8006208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000038c 	.word	0x2000038c

08002340 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002344:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002348:	f002 fb2e 	bl	80049a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <TIM5_IRQHandler+0x10>)
 8002356:	f003 ff57 	bl	8006208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000424 	.word	0x20000424

08002364 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <LPUART1_IRQHandler+0x10>)
 800236a:	f005 f995 	bl	8007698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200001cc 	.word	0x200001cc

08002378 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <SystemInit+0x20>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <SystemInit+0x20>)
 8002384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800239c:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800239e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a0:	f7ff ffea 	bl	8002378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a4:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80023a6:	490d      	ldr	r1, [pc, #52]	@ (80023dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80023a8:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <LoopForever+0xe>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023ac:	e002      	b.n	80023b4 <LoopCopyDataInit>

080023ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b2:	3304      	adds	r3, #4

080023b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b8:	d3f9      	bcc.n	80023ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023bc:	4c0a      	ldr	r4, [pc, #40]	@ (80023e8 <LoopForever+0x16>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c0:	e001      	b.n	80023c6 <LoopFillZerobss>

080023c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c4:	3204      	adds	r2, #4

080023c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c8:	d3fb      	bcc.n	80023c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ca:	f007 f96f 	bl	80096ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ce:	f7fe fc59 	bl	8000c84 <main>

080023d2 <LoopForever>:

LoopForever:
    b LoopForever
 80023d2:	e7fe      	b.n	80023d2 <LoopForever>
  ldr   r0, =_estack
 80023d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80023e0:	0800975c 	.word	0x0800975c
  ldr r2, =_sbss
 80023e4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80023e8:	200005a4 	.word	0x200005a4

080023ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <ADC1_2_IRQHandler>

080023ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f8:	2003      	movs	r0, #3
 80023fa:	f001 fdb1 	bl	8003f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023fe:	2000      	movs	r0, #0
 8002400:	f000 f80e 	bl	8002420 <HAL_InitTick>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	71fb      	strb	r3, [r7, #7]
 800240e:	e001      	b.n	8002414 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002410:	f7ff fc7a 	bl	8001d08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002414:	79fb      	ldrb	r3, [r7, #7]

}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800242c:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <HAL_InitTick+0x68>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d022      	beq.n	800247a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002434:	4b15      	ldr	r3, [pc, #84]	@ (800248c <HAL_InitTick+0x6c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <HAL_InitTick+0x68>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002440:	fbb1 f3f3 	udiv	r3, r1, r3
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f001 fdbc 	bl	8003fc6 <HAL_SYSTICK_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10f      	bne.n	8002474 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b0f      	cmp	r3, #15
 8002458:	d809      	bhi.n	800246e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245a:	2200      	movs	r2, #0
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	f04f 30ff 	mov.w	r0, #4294967295
 8002462:	f001 fd88 	bl	8003f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <HAL_InitTick+0x70>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e007      	b.n	800247e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e004      	b.n	800247e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e001      	b.n	800247e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000010 	.word	0x20000010
 800248c:	20000008 	.word	0x20000008
 8002490:	2000000c 	.word	0x2000000c

08002494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_IncTick+0x1c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_IncTick+0x20>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a03      	ldr	r2, [pc, #12]	@ (80024b0 <HAL_IncTick+0x1c>)
 80024a4:	6013      	str	r3, [r2, #0]
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	200005a0 	.word	0x200005a0
 80024b4:	20000010 	.word	0x20000010

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200005a0 	.word	0x200005a0

080024d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	609a      	str	r2, [r3, #8]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3360      	adds	r3, #96	@ 0x60
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <LL_ADC_SetOffset+0x44>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	4313      	orrs	r3, r2
 8002568:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	03fff000 	.word	0x03fff000

08002580 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3360      	adds	r3, #96	@ 0x60
 800258e:	461a      	mov	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3360      	adds	r3, #96	@ 0x60
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b087      	sub	sp, #28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3360      	adds	r3, #96	@ 0x60
 80025f2:	461a      	mov	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	431a      	orrs	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800260c:	bf00      	nop
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3360      	adds	r3, #96	@ 0x60
 8002628:	461a      	mov	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	431a      	orrs	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	615a      	str	r2, [r3, #20]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800269a:	b480      	push	{r7}
 800269c:	b087      	sub	sp, #28
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3330      	adds	r3, #48	@ 0x30
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	4413      	add	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	211f      	movs	r1, #31
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	401a      	ands	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	f003 011f 	and.w	r1, r3, #31
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	431a      	orrs	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b087      	sub	sp, #28
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3314      	adds	r3, #20
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	0e5b      	lsrs	r3, r3, #25
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	0d1b      	lsrs	r3, r3, #20
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2107      	movs	r1, #7
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	0d1b      	lsrs	r3, r3, #20
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	431a      	orrs	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800273c:	bf00      	nop
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0318 	and.w	r3, r3, #24
 800276a:	4908      	ldr	r1, [pc, #32]	@ (800278c <LL_ADC_SetChannelSingleDiff+0x44>)
 800276c:	40d9      	lsrs	r1, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	400b      	ands	r3, r1
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	431a      	orrs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	0007ffff 	.word	0x0007ffff

08002790 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 031f 	and.w	r3, r3, #31
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6093      	str	r3, [r2, #8]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027e4:	d101      	bne.n	80027ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002808:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800280c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002834:	d101      	bne.n	800283a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002858:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002880:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002884:	f043 0202 	orr.w	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <LL_ADC_IsEnabled+0x18>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_ADC_IsEnabled+0x1a>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d101      	bne.n	80028d6 <LL_ADC_IsDisableOngoing+0x18>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <LL_ADC_IsDisableOngoing+0x1a>
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b04      	cmp	r3, #4
 800291e:	d101      	bne.n	8002924 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b08      	cmp	r3, #8
 8002944:	d101      	bne.n	800294a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b089      	sub	sp, #36	@ 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1a9      	b.n	8002cc6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff f9e5 	bl	8001d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff19 	bl	80027d0 <LL_ADC_IsDeepPowerDownEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff feff 	bl	80027ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff34 	bl	8002820 <LL_ADC_IsInternalRegulatorEnabled>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d115      	bne.n	80029ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff18 	bl	80027f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c8:	4b9c      	ldr	r3, [pc, #624]	@ (8002c3c <HAL_ADC_Init+0x2e4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	4a9c      	ldr	r2, [pc, #624]	@ (8002c40 <HAL_ADC_Init+0x2e8>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	3301      	adds	r3, #1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029dc:	e002      	b.n	80029e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f9      	bne.n	80029de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff16 	bl	8002820 <LL_ADC_IsInternalRegulatorEnabled>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10d      	bne.n	8002a16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	f043 0210 	orr.w	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff76 	bl	800290c <LL_ADC_REG_IsConversionOngoing>
 8002a20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 8142 	bne.w	8002cb4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 813e 	bne.w	8002cb4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a40:	f043 0202 	orr.w	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff23 	bl	8002898 <LL_ADC_IsEnabled>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d141      	bne.n	8002adc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_Init+0x114>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a77      	ldr	r2, [pc, #476]	@ (8002c44 <HAL_ADC_Init+0x2ec>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10f      	bne.n	8002a8c <HAL_ADC_Init+0x134>
 8002a6c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a70:	f7ff ff12 	bl	8002898 <LL_ADC_IsEnabled>
 8002a74:	4604      	mov	r4, r0
 8002a76:	4873      	ldr	r0, [pc, #460]	@ (8002c44 <HAL_ADC_Init+0x2ec>)
 8002a78:	f7ff ff0e 	bl	8002898 <LL_ADC_IsEnabled>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4323      	orrs	r3, r4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e012      	b.n	8002ab2 <HAL_ADC_Init+0x15a>
 8002a8c:	486e      	ldr	r0, [pc, #440]	@ (8002c48 <HAL_ADC_Init+0x2f0>)
 8002a8e:	f7ff ff03 	bl	8002898 <LL_ADC_IsEnabled>
 8002a92:	4604      	mov	r4, r0
 8002a94:	486d      	ldr	r0, [pc, #436]	@ (8002c4c <HAL_ADC_Init+0x2f4>)
 8002a96:	f7ff feff 	bl	8002898 <LL_ADC_IsEnabled>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	431c      	orrs	r4, r3
 8002a9e:	486c      	ldr	r0, [pc, #432]	@ (8002c50 <HAL_ADC_Init+0x2f8>)
 8002aa0:	f7ff fefa 	bl	8002898 <LL_ADC_IsEnabled>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002abe:	d004      	beq.n	8002aca <HAL_ADC_Init+0x172>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5f      	ldr	r2, [pc, #380]	@ (8002c44 <HAL_ADC_Init+0x2ec>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Init+0x176>
 8002aca:	4a62      	ldr	r2, [pc, #392]	@ (8002c54 <HAL_ADC_Init+0x2fc>)
 8002acc:	e000      	b.n	8002ad0 <HAL_ADC_Init+0x178>
 8002ace:	4a62      	ldr	r2, [pc, #392]	@ (8002c58 <HAL_ADC_Init+0x300>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f7ff fcfa 	bl	80024d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7f5b      	ldrb	r3, [r3, #29]
 8002ae0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002aec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002af2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002afa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d106      	bne.n	8002b18 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	045b      	lsls	r3, r3, #17
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	4b48      	ldr	r3, [pc, #288]	@ (8002c5c <HAL_ADC_Init+0x304>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fee5 	bl	8002932 <LL_ADC_INJ_IsConversionOngoing>
 8002b68:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d17f      	bne.n	8002c70 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d17c      	bne.n	8002c70 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b7a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b82:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b92:	f023 0302 	bic.w	r3, r3, #2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	69b9      	ldr	r1, [r7, #24]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d017      	beq.n	8002bd8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002bb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bc0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6911      	ldr	r1, [r2, #16]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002bd6:	e013      	b.n	8002c00 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002be6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bfc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d12a      	bne.n	8002c60 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c26:	4311      	orrs	r1, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	611a      	str	r2, [r3, #16]
 8002c3a:	e019      	b.n	8002c70 <HAL_ADC_Init+0x318>
 8002c3c:	20000008 	.word	0x20000008
 8002c40:	053e2d63 	.word	0x053e2d63
 8002c44:	50000100 	.word	0x50000100
 8002c48:	50000400 	.word	0x50000400
 8002c4c:	50000500 	.word	0x50000500
 8002c50:	50000600 	.word	0x50000600
 8002c54:	50000300 	.word	0x50000300
 8002c58:	50000700 	.word	0x50000700
 8002c5c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10c      	bne.n	8002c92 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	f023 010f 	bic.w	r1, r3, #15
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c90:	e007      	b.n	8002ca2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 020f 	bic.w	r2, r2, #15
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cb2:	e007      	b.n	8002cc4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	f043 0210 	orr.w	r2, r3, #16
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	@ 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	bf00      	nop

08002cd0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ce4:	d004      	beq.n	8002cf0 <HAL_ADC_Start_DMA+0x20>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a5a      	ldr	r2, [pc, #360]	@ (8002e54 <HAL_ADC_Start_DMA+0x184>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_Start_DMA+0x24>
 8002cf0:	4b59      	ldr	r3, [pc, #356]	@ (8002e58 <HAL_ADC_Start_DMA+0x188>)
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADC_Start_DMA+0x26>
 8002cf4:	4b59      	ldr	r3, [pc, #356]	@ (8002e5c <HAL_ADC_Start_DMA+0x18c>)
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fd4a 	bl	8002790 <LL_ADC_GetMultimode>
 8002cfc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fe02 	bl	800290c <LL_ADC_REG_IsConversionOngoing>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 809b 	bne.w	8002e46 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Start_DMA+0x4e>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e096      	b.n	8002e4c <HAL_ADC_Start_DMA+0x17c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002e60 <HAL_ADC_Start_DMA+0x190>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d008      	beq.n	8002d42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d002      	beq.n	8002d42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	d17a      	bne.n	8002e38 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fcf6 	bl	8003734 <ADC_Enable>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d16d      	bne.n	8002e2e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002e54 <HAL_ADC_Start_DMA+0x184>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <HAL_ADC_Start_DMA+0xb4>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3b      	ldr	r2, [pc, #236]	@ (8002e64 <HAL_ADC_Start_DMA+0x194>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d002      	beq.n	8002d80 <HAL_ADC_Start_DMA+0xb0>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_Start_DMA+0xb8>
 8002d80:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <HAL_ADC_Start_DMA+0x198>)
 8002d82:	e001      	b.n	8002d88 <HAL_ADC_Start_DMA+0xb8>
 8002d84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d002      	beq.n	8002d96 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db2:	f023 0206 	bic.w	r2, r3, #6
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	661a      	str	r2, [r3, #96]	@ 0x60
 8002dba:	e002      	b.n	8002dc2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc6:	4a29      	ldr	r2, [pc, #164]	@ (8002e6c <HAL_ADC_Start_DMA+0x19c>)
 8002dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dce:	4a28      	ldr	r2, [pc, #160]	@ (8002e70 <HAL_ADC_Start_DMA+0x1a0>)
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd6:	4a27      	ldr	r2, [pc, #156]	@ (8002e74 <HAL_ADC_Start_DMA+0x1a4>)
 8002dd8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	221c      	movs	r2, #28
 8002de0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0210 	orr.w	r2, r2, #16
 8002df8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3340      	adds	r3, #64	@ 0x40
 8002e14:	4619      	mov	r1, r3
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f001 f989 	bl	8004130 <HAL_DMA_Start_IT>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fd5c 	bl	80028e4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002e2c:	e00d      	b.n	8002e4a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002e36:	e008      	b.n	8002e4a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002e44:	e001      	b.n	8002e4a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
 8002e48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	50000100 	.word	0x50000100
 8002e58:	50000300 	.word	0x50000300
 8002e5c:	50000700 	.word	0x50000700
 8002e60:	50000600 	.word	0x50000600
 8002e64:	50000500 	.word	0x50000500
 8002e68:	50000400 	.word	0x50000400
 8002e6c:	0800391f 	.word	0x0800391f
 8002e70:	080039f7 	.word	0x080039f7
 8002e74:	08003a13 	.word	0x08003a13

08002e78 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b0b6      	sub	sp, #216	@ 0xd8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x24>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f000 bc13 	b.w	80036fe <HAL_ADC_ConfigChannel+0x84a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fd11 	bl	800290c <LL_ADC_REG_IsConversionOngoing>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 83f3 	bne.w	80036d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f7ff fbcb 	bl	800269a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fcff 	bl	800290c <LL_ADC_REG_IsConversionOngoing>
 8002f0e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fd0b 	bl	8002932 <LL_ADC_INJ_IsConversionOngoing>
 8002f1c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 81d9 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 81d4 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f3c:	d10f      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2200      	movs	r2, #0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7ff fbd2 	bl	80026f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fb79 	bl	800264e <LL_ADC_SetSamplingTimeCommonConfig>
 8002f5c:	e00e      	b.n	8002f7c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f7ff fbc1 	bl	80026f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fb69 	bl	800264e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d022      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fae:	f7ff fac3 	bl	8002538 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6919      	ldr	r1, [r3, #16]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f7ff fb0f 	bl	80025e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x126>
 8002fd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x128>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f7ff fb1b 	bl	8002618 <LL_ADC_SetOffsetSaturation>
 8002fe2:	e17b      	b.n	80032dc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fac8 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x15c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fabd 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	f003 021f 	and.w	r2, r3, #31
 800300e:	e01e      	b.n	800304e <HAL_ADC_ConfigChannel+0x19a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fab2 	bl	8002580 <LL_ADC_GetOffsetChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800302e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003032:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e004      	b.n	800304c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x1b2>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	e018      	b.n	8003098 <HAL_ADC_ConfigChannel+0x1e4>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800307a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800307e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003082:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e004      	b.n	8003098 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800308e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003098:	429a      	cmp	r2, r3
 800309a:	d106      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fa81 	bl	80025ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fa65 	bl	8002580 <LL_ADC_GetOffsetChannel>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x222>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fa5a 	bl	8002580 <LL_ADC_GetOffsetChannel>
 80030cc:	4603      	mov	r3, r0
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	e01e      	b.n	8003114 <HAL_ADC_ConfigChannel+0x260>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2101      	movs	r1, #1
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fa4f 	bl	8002580 <LL_ADC_GetOffsetChannel>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80030f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80030fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e004      	b.n	8003112 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003108:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_ADC_ConfigChannel+0x278>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	e018      	b.n	800315e <HAL_ADC_ConfigChannel+0x2aa>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003140:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e004      	b.n	800315e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003154:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800315e:	429a      	cmp	r2, r3
 8003160:	d106      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fa1e 	bl	80025ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fa02 	bl	8002580 <LL_ADC_GetOffsetChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_ADC_ConfigChannel+0x2e8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2102      	movs	r1, #2
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff f9f7 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 021f 	and.w	r2, r3, #31
 800319a:	e01e      	b.n	80031da <HAL_ADC_ConfigChannel+0x326>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2102      	movs	r1, #2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f9ec 	bl	8002580 <LL_ADC_GetOffsetChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80031ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80031c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e004      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80031ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x33e>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	e016      	b.n	8003220 <HAL_ADC_ConfigChannel+0x36c>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003204:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800320a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003212:	2320      	movs	r3, #32
 8003214:	e004      	b.n	8003220 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003216:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003220:	429a      	cmp	r2, r3
 8003222:	d106      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	2102      	movs	r1, #2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff f9bd 	bl	80025ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2103      	movs	r1, #3
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff f9a1 	bl	8002580 <LL_ADC_GetOffsetChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_ADC_ConfigChannel+0x3aa>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2103      	movs	r1, #3
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff f996 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8003254:	4603      	mov	r3, r0
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	e017      	b.n	800328e <HAL_ADC_ConfigChannel+0x3da>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2103      	movs	r1, #3
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff f98b 	bl	8002580 <LL_ADC_GetOffsetChannel>
 800326a:	4603      	mov	r3, r0
 800326c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003278:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800327a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e003      	b.n	800328c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x3f2>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0e9b      	lsrs	r3, r3, #26
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	e011      	b.n	80032ca <HAL_ADC_ConfigChannel+0x416>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80032b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80032b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e003      	b.n	80032ca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80032c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d106      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2103      	movs	r1, #3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff f968 	bl	80025ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fad9 	bl	8002898 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 813d 	bne.w	8003568 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f7ff fa24 	bl	8002748 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4aa2      	ldr	r2, [pc, #648]	@ (8003590 <HAL_ADC_ConfigChannel+0x6dc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	f040 812e 	bne.w	8003568 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x480>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	3301      	adds	r3, #1
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2b09      	cmp	r3, #9
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e019      	b.n	8003368 <HAL_ADC_ConfigChannel+0x4b4>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003344:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800334c:	2320      	movs	r3, #32
 800334e:	e003      	b.n	8003358 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2b09      	cmp	r3, #9
 8003360:	bf94      	ite	ls
 8003362:	2301      	movls	r3, #1
 8003364:	2300      	movhi	r3, #0
 8003366:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003368:	2b00      	cmp	r3, #0
 800336a:	d079      	beq.n	8003460 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x4d4>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	3301      	adds	r3, #1
 8003380:	069b      	lsls	r3, r3, #26
 8003382:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003386:	e015      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x500>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003398:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800339a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e003      	b.n	80033ac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	069b      	lsls	r3, r3, #26
 80033b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x520>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0e9b      	lsrs	r3, r3, #26
 80033c6:	3301      	adds	r3, #1
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	e017      	b.n	8003404 <HAL_ADC_ConfigChannel+0x550>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80033e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80033e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80033ec:	2320      	movs	r3, #32
 80033ee:	e003      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80033f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3301      	adds	r3, #1
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	ea42 0103 	orr.w	r1, r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <HAL_ADC_ConfigChannel+0x576>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	051b      	lsls	r3, r3, #20
 8003428:	e018      	b.n	800345c <HAL_ADC_ConfigChannel+0x5a8>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800343c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e003      	b.n	800344e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800345c:	430b      	orrs	r3, r1
 800345e:	e07e      	b.n	800355e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003468:	2b00      	cmp	r3, #0
 800346a:	d107      	bne.n	800347c <HAL_ADC_ConfigChannel+0x5c8>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	3301      	adds	r3, #1
 8003474:	069b      	lsls	r3, r3, #26
 8003476:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800347a:	e015      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x5f4>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800348a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e003      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	069b      	lsls	r3, r3, #26
 80034a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x614>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	3301      	adds	r3, #1
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	e017      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x644>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	61fb      	str	r3, [r7, #28]
  return result;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80034e0:	2320      	movs	r3, #32
 80034e2:	e003      	b.n	80034ec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	ea42 0103 	orr.w	r1, r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10d      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x670>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	3301      	adds	r3, #1
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	3b1e      	subs	r3, #30
 800351c:	051b      	lsls	r3, r3, #20
 800351e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003522:	e01b      	b.n	800355c <HAL_ADC_ConfigChannel+0x6a8>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	613b      	str	r3, [r7, #16]
  return result;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	e003      	b.n	8003548 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3301      	adds	r3, #1
 800354a:	f003 021f 	and.w	r2, r3, #31
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	3b1e      	subs	r3, #30
 8003556:	051b      	lsls	r3, r3, #20
 8003558:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800355c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003562:	4619      	mov	r1, r3
 8003564:	f7ff f8c5 	bl	80026f2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_ADC_ConfigChannel+0x6e0>)
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80be 	beq.w	80036f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800357e:	d004      	beq.n	800358a <HAL_ADC_ConfigChannel+0x6d6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a04      	ldr	r2, [pc, #16]	@ (8003598 <HAL_ADC_ConfigChannel+0x6e4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x6ec>
 800358a:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_ADC_ConfigChannel+0x6e8>)
 800358c:	e009      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x6ee>
 800358e:	bf00      	nop
 8003590:	407f0000 	.word	0x407f0000
 8003594:	80080000 	.word	0x80080000
 8003598:	50000100 	.word	0x50000100
 800359c:	50000300 	.word	0x50000300
 80035a0:	4b59      	ldr	r3, [pc, #356]	@ (8003708 <HAL_ADC_ConfigChannel+0x854>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe ffba 	bl	800251c <LL_ADC_GetCommonPathInternalCh>
 80035a8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a56      	ldr	r2, [pc, #344]	@ (800370c <HAL_ADC_ConfigChannel+0x858>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_ADC_ConfigChannel+0x70c>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a55      	ldr	r2, [pc, #340]	@ (8003710 <HAL_ADC_ConfigChannel+0x85c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d13a      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d134      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035d4:	d005      	beq.n	80035e2 <HAL_ADC_ConfigChannel+0x72e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4e      	ldr	r2, [pc, #312]	@ (8003714 <HAL_ADC_ConfigChannel+0x860>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	f040 8085 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ea:	d004      	beq.n	80035f6 <HAL_ADC_ConfigChannel+0x742>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a49      	ldr	r2, [pc, #292]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x746>
 80035f6:	4a49      	ldr	r2, [pc, #292]	@ (800371c <HAL_ADC_ConfigChannel+0x868>)
 80035f8:	e000      	b.n	80035fc <HAL_ADC_ConfigChannel+0x748>
 80035fa:	4a43      	ldr	r2, [pc, #268]	@ (8003708 <HAL_ADC_ConfigChannel+0x854>)
 80035fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7fe ff75 	bl	80024f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800360c:	4b44      	ldr	r3, [pc, #272]	@ (8003720 <HAL_ADC_ConfigChannel+0x86c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	4a44      	ldr	r2, [pc, #272]	@ (8003724 <HAL_ADC_ConfigChannel+0x870>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003626:	e002      	b.n	800362e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3b01      	subs	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f9      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003634:	e05a      	b.n	80036ec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3b      	ldr	r2, [pc, #236]	@ (8003728 <HAL_ADC_ConfigChannel+0x874>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d125      	bne.n	800368c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11f      	bne.n	800368c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a31      	ldr	r2, [pc, #196]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d104      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x7ac>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a34      	ldr	r2, [pc, #208]	@ (800372c <HAL_ADC_ConfigChannel+0x878>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d047      	beq.n	80036f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003668:	d004      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x7c0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2a      	ldr	r2, [pc, #168]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x7c4>
 8003674:	4a29      	ldr	r2, [pc, #164]	@ (800371c <HAL_ADC_ConfigChannel+0x868>)
 8003676:	e000      	b.n	800367a <HAL_ADC_ConfigChannel+0x7c6>
 8003678:	4a23      	ldr	r2, [pc, #140]	@ (8003708 <HAL_ADC_ConfigChannel+0x854>)
 800367a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fe ff36 	bl	80024f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800368a:	e031      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a27      	ldr	r2, [pc, #156]	@ (8003730 <HAL_ADC_ConfigChannel+0x87c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12d      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800369a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d127      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d022      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b4:	d004      	beq.n	80036c0 <HAL_ADC_ConfigChannel+0x80c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x810>
 80036c0:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_ADC_ConfigChannel+0x868>)
 80036c2:	e000      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x812>
 80036c4:	4a10      	ldr	r2, [pc, #64]	@ (8003708 <HAL_ADC_ConfigChannel+0x854>)
 80036c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7fe ff10 	bl	80024f6 <LL_ADC_SetCommonPathInternalCh>
 80036d6:	e00c      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80036ea:	e002      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	37d8      	adds	r7, #216	@ 0xd8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	50000700 	.word	0x50000700
 800370c:	c3210000 	.word	0xc3210000
 8003710:	90c00010 	.word	0x90c00010
 8003714:	50000600 	.word	0x50000600
 8003718:	50000100 	.word	0x50000100
 800371c:	50000300 	.word	0x50000300
 8003720:	20000008 	.word	0x20000008
 8003724:	053e2d63 	.word	0x053e2d63
 8003728:	c7520000 	.word	0xc7520000
 800372c:	50000500 	.word	0x50000500
 8003730:	cb840000 	.word	0xcb840000

08003734 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800373c:	2300      	movs	r3, #0
 800373e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff f8a7 	bl	8002898 <LL_ADC_IsEnabled>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d176      	bne.n	800383e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	4b3c      	ldr	r3, [pc, #240]	@ (8003848 <ADC_Enable+0x114>)
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	f043 0210 	orr.w	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376e:	f043 0201 	orr.w	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e062      	b.n	8003840 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f862 	bl	8002848 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800378c:	d004      	beq.n	8003798 <ADC_Enable+0x64>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2e      	ldr	r2, [pc, #184]	@ (800384c <ADC_Enable+0x118>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <ADC_Enable+0x68>
 8003798:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <ADC_Enable+0x11c>)
 800379a:	e000      	b.n	800379e <ADC_Enable+0x6a>
 800379c:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <ADC_Enable+0x120>)
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe febc 	bl	800251c <LL_ADC_GetCommonPathInternalCh>
 80037a4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d013      	beq.n	80037d6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003858 <ADC_Enable+0x124>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	4a29      	ldr	r2, [pc, #164]	@ (800385c <ADC_Enable+0x128>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037c8:	e002      	b.n	80037d0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f9      	bne.n	80037ca <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037d6:	f7fe fe6f 	bl	80024b8 <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037dc:	e028      	b.n	8003830 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff f858 	bl	8002898 <LL_ADC_IsEnabled>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f828 	bl	8002848 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037f8:	f7fe fe5e 	bl	80024b8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d914      	bls.n	8003830 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d00d      	beq.n	8003830 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003818:	f043 0210 	orr.w	r2, r3, #16
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	f043 0201 	orr.w	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d1cf      	bne.n	80037de <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	8000003f 	.word	0x8000003f
 800384c:	50000100 	.word	0x50000100
 8003850:	50000300 	.word	0x50000300
 8003854:	50000700 	.word	0x50000700
 8003858:	20000008 	.word	0x20000008
 800385c:	053e2d63 	.word	0x053e2d63

08003860 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff f826 	bl	80028be <LL_ADC_IsDisableOngoing>
 8003872:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff f80d 	bl	8002898 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d047      	beq.n	8003914 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d144      	bne.n	8003914 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030d 	and.w	r3, r3, #13
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe ffe7 	bl	8002870 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2203      	movs	r2, #3
 80038a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038aa:	f7fe fe05 	bl	80024b8 <HAL_GetTick>
 80038ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038b0:	e029      	b.n	8003906 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e023      	b.n	8003916 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ce:	f7fe fdf3 	bl	80024b8 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d914      	bls.n	8003906 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e007      	b.n	8003916 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1dc      	bne.n	80038ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003934:	2b00      	cmp	r3, #0
 8003936:	d14b      	bne.n	80039d0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d021      	beq.n	8003996 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fe8c 	bl	8002674 <LL_ADC_REG_IsTriggerSourceSWStart>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d032      	beq.n	80039c8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d12b      	bne.n	80039c8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003974:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003980:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11f      	bne.n	80039c8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003994:	e018      	b.n	80039c8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff fa55 	bl	8002e78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039ce:	e00e      	b.n	80039ee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff fa5f 	bl	8002ea0 <HAL_ADC_ErrorCallback>
}
 80039e2:	e004      	b.n	80039ee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff fa41 	bl	8002e8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a30:	f043 0204 	orr.w	r2, r3, #4
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff fa31 	bl	8002ea0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <LL_ADC_IsEnabled>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <LL_ADC_IsEnabled+0x18>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <LL_ADC_IsEnabled+0x1a>
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_ADC_StartCalibration>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003a7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	609a      	str	r2, [r3, #8]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_ADC_IsCalibrationOnGoing>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab2:	d101      	bne.n	8003ab8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d101      	bne.n	8003ade <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_ADCEx_Calibration_Start+0x1c>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e04d      	b.n	8003ba4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff fea5 	bl	8003860 <ADC_Disable>
 8003b16:	4603      	mov	r3, r0
 8003b18:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d136      	bne.n	8003b8e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b28:	f023 0302 	bic.w	r3, r3, #2
 8003b2c:	f043 0202 	orr.w	r2, r3, #2
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6839      	ldr	r1, [r7, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff96 	bl	8003a6c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b40:	e014      	b.n	8003b6c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3301      	adds	r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	@ (8003bac <HAL_ADCEx_Calibration_Start+0xc0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d90d      	bls.n	8003b6c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	f023 0312 	bic.w	r3, r3, #18
 8003b58:	f043 0210 	orr.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e01b      	b.n	8003ba4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff94 	bl	8003a9e <LL_ADC_IsCalibrationOnGoing>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e2      	bne.n	8003b42 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	f023 0303 	bic.w	r3, r3, #3
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b8c:	e005      	b.n	8003b9a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b92:	f043 0210 	orr.w	r2, r3, #16
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	0004de01 	.word	0x0004de01

08003bb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b0a1      	sub	sp, #132	@ 0x84
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e0e7      	b.n	8003d9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be6:	d102      	bne.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003be8:	4b6f      	ldr	r3, [pc, #444]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	e009      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6e      	ldr	r2, [pc, #440]	@ (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d102      	bne.n	8003bfe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003bf8:	4b6d      	ldr	r3, [pc, #436]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	e001      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0be      	b.n	8003d9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ff4f 	bl	8003ac6 <LL_ADC_REG_IsConversionOngoing>
 8003c28:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ff49 	bl	8003ac6 <LL_ADC_REG_IsConversionOngoing>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 80a0 	bne.w	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003c3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f040 809c 	bne.w	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a55      	ldr	r2, [pc, #340]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c58:	4b56      	ldr	r3, [pc, #344]	@ (8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003c5a:	e000      	b.n	8003c5e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c5c:	4b56      	ldr	r3, [pc, #344]	@ (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003c5e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d04b      	beq.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c7a:	035b      	lsls	r3, r3, #13
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c8c:	d004      	beq.n	8003c98 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a45      	ldr	r2, [pc, #276]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d10f      	bne.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003c98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c9c:	f7ff fed3 	bl	8003a46 <LL_ADC_IsEnabled>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	4841      	ldr	r0, [pc, #260]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ca4:	f7ff fecf 	bl	8003a46 <LL_ADC_IsEnabled>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4323      	orrs	r3, r4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e012      	b.n	8003cde <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003cb8:	483c      	ldr	r0, [pc, #240]	@ (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003cba:	f7ff fec4 	bl	8003a46 <LL_ADC_IsEnabled>
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	483b      	ldr	r0, [pc, #236]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cc2:	f7ff fec0 	bl	8003a46 <LL_ADC_IsEnabled>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	431c      	orrs	r4, r3
 8003cca:	483c      	ldr	r0, [pc, #240]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ccc:	f7ff febb 	bl	8003a46 <LL_ADC_IsEnabled>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4323      	orrs	r3, r4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d056      	beq.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cea:	f023 030f 	bic.w	r3, r3, #15
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	6811      	ldr	r1, [r2, #0]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	6892      	ldr	r2, [r2, #8]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cfc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cfe:	e047      	b.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d14:	d004      	beq.n	8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a23      	ldr	r2, [pc, #140]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10f      	bne.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003d20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d24:	f7ff fe8f 	bl	8003a46 <LL_ADC_IsEnabled>
 8003d28:	4604      	mov	r4, r0
 8003d2a:	481f      	ldr	r0, [pc, #124]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d2c:	f7ff fe8b 	bl	8003a46 <LL_ADC_IsEnabled>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4323      	orrs	r3, r4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e012      	b.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003d40:	481a      	ldr	r0, [pc, #104]	@ (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d42:	f7ff fe80 	bl	8003a46 <LL_ADC_IsEnabled>
 8003d46:	4604      	mov	r4, r0
 8003d48:	4819      	ldr	r0, [pc, #100]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d4a:	f7ff fe7c 	bl	8003a46 <LL_ADC_IsEnabled>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	431c      	orrs	r4, r3
 8003d52:	481a      	ldr	r0, [pc, #104]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d54:	f7ff fe77 	bl	8003a46 <LL_ADC_IsEnabled>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4323      	orrs	r3, r4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d012      	beq.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d72:	f023 030f 	bic.w	r3, r3, #15
 8003d76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d78:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d7a:	e009      	b.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d8e:	e000      	b.n	8003d92 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3784      	adds	r7, #132	@ 0x84
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd90      	pop	{r4, r7, pc}
 8003da6:	bf00      	nop
 8003da8:	50000100 	.word	0x50000100
 8003dac:	50000400 	.word	0x50000400
 8003db0:	50000500 	.word	0x50000500
 8003db4:	50000300 	.word	0x50000300
 8003db8:	50000700 	.word	0x50000700
 8003dbc:	50000600 	.word	0x50000600

08003dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df2:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	60d3      	str	r3, [r2, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <__NVIC_GetPriorityGrouping+0x18>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0307 	and.w	r3, r3, #7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db0b      	blt.n	8003e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	4907      	ldr	r1, [pc, #28]	@ (8003e5c <__NVIC_EnableIRQ+0x38>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2001      	movs	r0, #1
 8003e46:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e100 	.word	0xe000e100

08003e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	db0a      	blt.n	8003e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	490c      	ldr	r1, [pc, #48]	@ (8003eac <__NVIC_SetPriority+0x4c>)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	440b      	add	r3, r1
 8003e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e88:	e00a      	b.n	8003ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4908      	ldr	r1, [pc, #32]	@ (8003eb0 <__NVIC_SetPriority+0x50>)
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	3b04      	subs	r3, #4
 8003e98:	0112      	lsls	r2, r2, #4
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	761a      	strb	r2, [r3, #24]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000e100 	.word	0xe000e100
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	@ 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f1c3 0307 	rsb	r3, r3, #7
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	bf28      	it	cs
 8003ed2:	2304      	movcs	r3, #4
 8003ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d902      	bls.n	8003ee4 <NVIC_EncodePriority+0x30>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3b03      	subs	r3, #3
 8003ee2:	e000      	b.n	8003ee6 <NVIC_EncodePriority+0x32>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003efc:	f04f 31ff 	mov.w	r1, #4294967295
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	43d9      	mvns	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	4313      	orrs	r3, r2
         );
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3724      	adds	r7, #36	@ 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f2c:	d301      	bcc.n	8003f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e00f      	b.n	8003f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f32:	4a0a      	ldr	r2, [pc, #40]	@ (8003f5c <SysTick_Config+0x40>)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f3a:	210f      	movs	r1, #15
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	f7ff ff8e 	bl	8003e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f44:	4b05      	ldr	r3, [pc, #20]	@ (8003f5c <SysTick_Config+0x40>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f4a:	4b04      	ldr	r3, [pc, #16]	@ (8003f5c <SysTick_Config+0x40>)
 8003f4c:	2207      	movs	r2, #7
 8003f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	e000e010 	.word	0xe000e010

08003f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ff29 	bl	8003dc0 <__NVIC_SetPriorityGrouping>
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b086      	sub	sp, #24
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
 8003f82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f84:	f7ff ff40 	bl	8003e08 <__NVIC_GetPriorityGrouping>
 8003f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	6978      	ldr	r0, [r7, #20]
 8003f90:	f7ff ff90 	bl	8003eb4 <NVIC_EncodePriority>
 8003f94:	4602      	mov	r2, r0
 8003f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff5f 	bl	8003e60 <__NVIC_SetPriority>
}
 8003fa2:	bf00      	nop
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff33 	bl	8003e24 <__NVIC_EnableIRQ>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff ffa4 	bl	8003f1c <SysTick_Config>
 8003fd4:	4603      	mov	r3, r0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e08d      	b.n	800410e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_DMA_Init+0x138>)
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d80f      	bhi.n	800401e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	4b45      	ldr	r3, [pc, #276]	@ (800411c <HAL_DMA_Init+0x13c>)
 8004006:	4413      	add	r3, r2
 8004008:	4a45      	ldr	r2, [pc, #276]	@ (8004120 <HAL_DMA_Init+0x140>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	009a      	lsls	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a42      	ldr	r2, [pc, #264]	@ (8004124 <HAL_DMA_Init+0x144>)
 800401a:	641a      	str	r2, [r3, #64]	@ 0x40
 800401c:	e00e      	b.n	800403c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	4b40      	ldr	r3, [pc, #256]	@ (8004128 <HAL_DMA_Init+0x148>)
 8004026:	4413      	add	r3, r2
 8004028:	4a3d      	ldr	r2, [pc, #244]	@ (8004120 <HAL_DMA_Init+0x140>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	009a      	lsls	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a3c      	ldr	r2, [pc, #240]	@ (800412c <HAL_DMA_Init+0x14c>)
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004056:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa76 	bl	8004580 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800409c:	d102      	bne.n	80040a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d010      	beq.n	80040e4 <HAL_DMA_Init+0x104>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d80c      	bhi.n	80040e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa96 	bl	80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	e008      	b.n	80040f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40020407 	.word	0x40020407
 800411c:	bffdfff8 	.word	0xbffdfff8
 8004120:	cccccccd 	.word	0xcccccccd
 8004124:	40020000 	.word	0x40020000
 8004128:	bffdfbf8 	.word	0xbffdfbf8
 800412c:	40020400 	.word	0x40020400

08004130 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_DMA_Start_IT+0x20>
 800414c:	2302      	movs	r3, #2
 800414e:	e066      	b.n	800421e <HAL_DMA_Start_IT+0xee>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d155      	bne.n	8004210 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f9bb 	bl	8004504 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 020e 	orr.w	r2, r2, #14
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e00f      	b.n	80041c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0204 	bic.w	r2, r2, #4
 80041b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 020a 	orr.w	r2, r2, #10
 80041c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e005      	b.n	800421c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004218:	2302      	movs	r3, #2
 800421a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800421c:	7dfb      	ldrb	r3, [r7, #23]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d005      	beq.n	800424a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2204      	movs	r2, #4
 8004242:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e037      	b.n	80042ba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 020e 	bic.w	r2, r2, #14
 8004258:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004268:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	f003 021f 	and.w	r2, r3, #31
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	2101      	movs	r1, #1
 8004288:	fa01 f202 	lsl.w	r2, r1, r2
 800428c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004296:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00c      	beq.n	80042ba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042ae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042b8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d00d      	beq.n	800430c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2204      	movs	r2, #4
 80042f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e047      	b.n	800439c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 020e 	bic.w	r2, r2, #14
 800431a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004336:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800433a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004340:	f003 021f 	and.w	r2, r3, #31
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f202 	lsl.w	r2, r1, r2
 800434e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004358:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00c      	beq.n	800437c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004370:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800437a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
    }
  }
  return status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2204      	movs	r2, #4
 80043c8:	409a      	lsls	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d026      	beq.n	8004420 <HAL_DMA_IRQHandler+0x7a>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d021      	beq.n	8004420 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d107      	bne.n	80043fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0204 	bic.w	r2, r2, #4
 80043f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f003 021f 	and.w	r2, r3, #31
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	2104      	movs	r1, #4
 8004408:	fa01 f202 	lsl.w	r2, r1, r2
 800440c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004412:	2b00      	cmp	r3, #0
 8004414:	d071      	beq.n	80044fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800441e:	e06c      	b.n	80044fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2202      	movs	r2, #2
 800442a:	409a      	lsls	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02e      	beq.n	8004492 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d029      	beq.n	8004492 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10b      	bne.n	8004464 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 020a 	bic.w	r2, r2, #10
 800445a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004470:	2102      	movs	r1, #2
 8004472:	fa01 f202 	lsl.w	r2, r1, r2
 8004476:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d038      	beq.n	80044fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004490:	e033      	b.n	80044fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	2208      	movs	r2, #8
 800449c:	409a      	lsls	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d02a      	beq.n	80044fc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d025      	beq.n	80044fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 020e 	bic.w	r2, r2, #14
 80044be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c4:	f003 021f 	and.w	r2, r3, #31
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f202 	lsl.w	r2, r1, r2
 80044d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
}
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800451a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800452c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004532:	f003 021f 	and.w	r2, r3, #31
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	2101      	movs	r1, #1
 800453c:	fa01 f202 	lsl.w	r2, r1, r2
 8004540:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b10      	cmp	r3, #16
 8004550:	d108      	bne.n	8004564 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004562:	e007      	b.n	8004574 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	4b16      	ldr	r3, [pc, #88]	@ (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d802      	bhi.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004594:	4b15      	ldr	r3, [pc, #84]	@ (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e001      	b.n	800459e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800459a:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800459c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	3b08      	subs	r3, #8
 80045aa:	4a12      	ldr	r2, [pc, #72]	@ (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80045ac:	fba2 2303 	umull	r2, r3, r2, r3
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	009a      	lsls	r2, r3, #2
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a0b      	ldr	r2, [pc, #44]	@ (80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80045ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2201      	movs	r2, #1
 80045d4:	409a      	lsls	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40020407 	.word	0x40020407
 80045ec:	40020800 	.word	0x40020800
 80045f0:	40020820 	.word	0x40020820
 80045f4:	cccccccd 	.word	0xcccccccd
 80045f8:	40020880 	.word	0x40020880

080045fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a08      	ldr	r2, [pc, #32]	@ (8004640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800461e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3b01      	subs	r3, #1
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	1000823f 	.word	0x1000823f
 8004640:	40020940 	.word	0x40020940

08004644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004652:	e15a      	b.n	800490a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	fa01 f303 	lsl.w	r3, r1, r3
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 814c 	beq.w	8004904 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	2b01      	cmp	r3, #1
 8004676:	d005      	beq.n	8004684 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004680:	2b02      	cmp	r3, #2
 8004682:	d130      	bne.n	80046e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	2203      	movs	r2, #3
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4013      	ands	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ba:	2201      	movs	r2, #1
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 0201 	and.w	r2, r3, #1
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d017      	beq.n	8004722 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	2203      	movs	r2, #3
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d123      	bne.n	8004776 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	08da      	lsrs	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3208      	adds	r2, #8
 8004736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	220f      	movs	r2, #15
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	08da      	lsrs	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3208      	adds	r2, #8
 8004770:	6939      	ldr	r1, [r7, #16]
 8004772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2203      	movs	r2, #3
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 0203 	and.w	r2, r3, #3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 80a6 	beq.w	8004904 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004928 <HAL_GPIO_Init+0x2e4>)
 80047ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004928 <HAL_GPIO_Init+0x2e4>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80047c4:	4b58      	ldr	r3, [pc, #352]	@ (8004928 <HAL_GPIO_Init+0x2e4>)
 80047c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047d0:	4a56      	ldr	r2, [pc, #344]	@ (800492c <HAL_GPIO_Init+0x2e8>)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	089b      	lsrs	r3, r3, #2
 80047d6:	3302      	adds	r3, #2
 80047d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	220f      	movs	r2, #15
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047fa:	d01f      	beq.n	800483c <HAL_GPIO_Init+0x1f8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004930 <HAL_GPIO_Init+0x2ec>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d019      	beq.n	8004838 <HAL_GPIO_Init+0x1f4>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a4b      	ldr	r2, [pc, #300]	@ (8004934 <HAL_GPIO_Init+0x2f0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <HAL_GPIO_Init+0x1f0>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a4a      	ldr	r2, [pc, #296]	@ (8004938 <HAL_GPIO_Init+0x2f4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00d      	beq.n	8004830 <HAL_GPIO_Init+0x1ec>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a49      	ldr	r2, [pc, #292]	@ (800493c <HAL_GPIO_Init+0x2f8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <HAL_GPIO_Init+0x1e8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a48      	ldr	r2, [pc, #288]	@ (8004940 <HAL_GPIO_Init+0x2fc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_GPIO_Init+0x1e4>
 8004824:	2305      	movs	r3, #5
 8004826:	e00a      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 8004828:	2306      	movs	r3, #6
 800482a:	e008      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 800482c:	2304      	movs	r3, #4
 800482e:	e006      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 8004830:	2303      	movs	r3, #3
 8004832:	e004      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 8004834:	2302      	movs	r3, #2
 8004836:	e002      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_GPIO_Init+0x1fa>
 800483c:	2300      	movs	r3, #0
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	f002 0203 	and.w	r2, r2, #3
 8004844:	0092      	lsls	r2, r2, #2
 8004846:	4093      	lsls	r3, r2
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800484e:	4937      	ldr	r1, [pc, #220]	@ (800492c <HAL_GPIO_Init+0x2e8>)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800485c:	4b39      	ldr	r3, [pc, #228]	@ (8004944 <HAL_GPIO_Init+0x300>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	43db      	mvns	r3, r3
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004880:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <HAL_GPIO_Init+0x300>)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004886:	4b2f      	ldr	r3, [pc, #188]	@ (8004944 <HAL_GPIO_Init+0x300>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	43db      	mvns	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048aa:	4a26      	ldr	r2, [pc, #152]	@ (8004944 <HAL_GPIO_Init+0x300>)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80048b0:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <HAL_GPIO_Init+0x300>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004944 <HAL_GPIO_Init+0x300>)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048da:	4b1a      	ldr	r3, [pc, #104]	@ (8004944 <HAL_GPIO_Init+0x300>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4013      	ands	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048fe:	4a11      	ldr	r2, [pc, #68]	@ (8004944 <HAL_GPIO_Init+0x300>)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	3301      	adds	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	f47f ae9d 	bne.w	8004654 <HAL_GPIO_Init+0x10>
  }
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	40021000 	.word	0x40021000
 800492c:	40010000 	.word	0x40010000
 8004930:	48000400 	.word	0x48000400
 8004934:	48000800 	.word	0x48000800
 8004938:	48000c00 	.word	0x48000c00
 800493c:	48001000 	.word	0x48001000
 8004940:	48001400 	.word	0x48001400
 8004944:	40010400 	.word	0x40010400

08004948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e001      	b.n	800496a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	807b      	strh	r3, [r7, #2]
 8004984:	4613      	mov	r3, r2
 8004986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004988:	787b      	ldrb	r3, [r7, #1]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800498e:	887a      	ldrh	r2, [r7, #2]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004994:	e002      	b.n	800499c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004996:	887a      	ldrh	r2, [r7, #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049b2:	4b08      	ldr	r3, [pc, #32]	@ (80049d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d006      	beq.n	80049cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049be:	4a05      	ldr	r2, [pc, #20]	@ (80049d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fd f91a 	bl	8001c00 <HAL_GPIO_EXTI_Callback>
  }
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40010400 	.word	0x40010400

080049d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d141      	bne.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049f2:	d131      	bne.n	8004a58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049f4:	4b47      	ldr	r3, [pc, #284]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049fa:	4a46      	ldr	r2, [pc, #280]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a04:	4b43      	ldr	r3, [pc, #268]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a0c:	4a41      	ldr	r2, [pc, #260]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a14:	4b40      	ldr	r3, [pc, #256]	@ (8004b18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2232      	movs	r2, #50	@ 0x32
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	0c9b      	lsrs	r3, r3, #18
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a2a:	e002      	b.n	8004a32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a32:	4b38      	ldr	r3, [pc, #224]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3e:	d102      	bne.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f2      	bne.n	8004a2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a46:	4b33      	ldr	r3, [pc, #204]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a52:	d158      	bne.n	8004b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e057      	b.n	8004b08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a58:	4b2e      	ldr	r3, [pc, #184]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a68:	e04d      	b.n	8004b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a70:	d141      	bne.n	8004af6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a72:	4b28      	ldr	r3, [pc, #160]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a7e:	d131      	bne.n	8004ae4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a80:	4b24      	ldr	r3, [pc, #144]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a86:	4a23      	ldr	r2, [pc, #140]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a90:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a98:	4a1e      	ldr	r2, [pc, #120]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2232      	movs	r2, #50	@ 0x32
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8004b1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	0c9b      	lsrs	r3, r3, #18
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ab6:	e002      	b.n	8004abe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004abe:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aca:	d102      	bne.n	8004ad2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f2      	bne.n	8004ab8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ad2:	4b10      	ldr	r3, [pc, #64]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ade:	d112      	bne.n	8004b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e011      	b.n	8004b08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aea:	4a0a      	ldr	r2, [pc, #40]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004af4:	e007      	b.n	8004b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004af6:	4b07      	ldr	r3, [pc, #28]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004afe:	4a05      	ldr	r2, [pc, #20]	@ (8004b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40007000 	.word	0x40007000
 8004b18:	20000008 	.word	0x20000008
 8004b1c:	431bde83 	.word	0x431bde83

08004b20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a04      	ldr	r2, [pc, #16]	@ (8004b3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b2e:	6093      	str	r3, [r2, #8]
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40007000 	.word	0x40007000

08004b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e2fe      	b.n	8005150 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d075      	beq.n	8004c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5e:	4b97      	ldr	r3, [pc, #604]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b68:	4b94      	ldr	r3, [pc, #592]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b0c      	cmp	r3, #12
 8004b76:	d102      	bne.n	8004b7e <HAL_RCC_OscConfig+0x3e>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d002      	beq.n	8004b84 <HAL_RCC_OscConfig+0x44>
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d10b      	bne.n	8004b9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b84:	4b8d      	ldr	r3, [pc, #564]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d05b      	beq.n	8004c48 <HAL_RCC_OscConfig+0x108>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d157      	bne.n	8004c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e2d9      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba4:	d106      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x74>
 8004ba6:	4b85      	ldr	r3, [pc, #532]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a84      	ldr	r2, [pc, #528]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e01d      	b.n	8004bf0 <HAL_RCC_OscConfig+0xb0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x98>
 8004bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	4b7c      	ldr	r3, [pc, #496]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a7b      	ldr	r2, [pc, #492]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCC_OscConfig+0xb0>
 8004bd8:	4b78      	ldr	r3, [pc, #480]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a77      	ldr	r2, [pc, #476]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	4b75      	ldr	r3, [pc, #468]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a74      	ldr	r2, [pc, #464]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d013      	beq.n	8004c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fc5e 	bl	80024b8 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c00:	f7fd fc5a 	bl	80024b8 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	@ 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e29e      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c12:	4b6a      	ldr	r3, [pc, #424]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0xc0>
 8004c1e:	e014      	b.n	8004c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fd fc4a 	bl	80024b8 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c28:	f7fd fc46 	bl	80024b8 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	@ 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e28a      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c3a:	4b60      	ldr	r3, [pc, #384]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0xe8>
 8004c46:	e000      	b.n	8004c4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d075      	beq.n	8004d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c56:	4b59      	ldr	r3, [pc, #356]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c60:	4b56      	ldr	r3, [pc, #344]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b0c      	cmp	r3, #12
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCC_OscConfig+0x136>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d002      	beq.n	8004c7c <HAL_RCC_OscConfig+0x13c>
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d11f      	bne.n	8004cbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_OscConfig+0x154>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e25d      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c94:	4b49      	ldr	r3, [pc, #292]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	4946      	ldr	r1, [pc, #280]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ca8:	4b45      	ldr	r3, [pc, #276]	@ (8004dc0 <HAL_RCC_OscConfig+0x280>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fd fbb7 	bl	8002420 <HAL_InitTick>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d043      	beq.n	8004d40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e249      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d023      	beq.n	8004d0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fd fbf2 	bl	80024b8 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd8:	f7fd fbee 	bl	80024b8 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e232      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cea:	4b34      	ldr	r3, [pc, #208]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf6:	4b31      	ldr	r3, [pc, #196]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	492d      	ldr	r1, [pc, #180]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	604b      	str	r3, [r1, #4]
 8004d0a:	e01a      	b.n	8004d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd fbce 	bl	80024b8 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d20:	f7fd fbca 	bl	80024b8 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e20e      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d32:	4b22      	ldr	r3, [pc, #136]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x1e0>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d041      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d56:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d5c:	4a17      	ldr	r2, [pc, #92]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d66:	f7fd fba7 	bl	80024b8 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6e:	f7fd fba3 	bl	80024b8 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e1e7      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d80:	4b0e      	ldr	r3, [pc, #56]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ef      	beq.n	8004d6e <HAL_RCC_OscConfig+0x22e>
 8004d8e:	e020      	b.n	8004dd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d90:	4b0a      	ldr	r3, [pc, #40]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d96:	4a09      	ldr	r2, [pc, #36]	@ (8004dbc <HAL_RCC_OscConfig+0x27c>)
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da0:	f7fd fb8a 	bl	80024b8 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da6:	e00d      	b.n	8004dc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da8:	f7fd fb86 	bl	80024b8 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d906      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e1ca      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ea      	bne.n	8004da8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 80a6 	beq.w	8004f2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de0:	2300      	movs	r3, #0
 8004de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004de4:	4b84      	ldr	r3, [pc, #528]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_OscConfig+0x2b4>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_RCC_OscConfig+0x2b6>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00d      	beq.n	8004e16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e06:	4b7c      	ldr	r3, [pc, #496]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e12:	2301      	movs	r3, #1
 8004e14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e16:	4b79      	ldr	r3, [pc, #484]	@ (8004ffc <HAL_RCC_OscConfig+0x4bc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d118      	bne.n	8004e54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e22:	4b76      	ldr	r3, [pc, #472]	@ (8004ffc <HAL_RCC_OscConfig+0x4bc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a75      	ldr	r2, [pc, #468]	@ (8004ffc <HAL_RCC_OscConfig+0x4bc>)
 8004e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2e:	f7fd fb43 	bl	80024b8 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e36:	f7fd fb3f 	bl	80024b8 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e183      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e48:	4b6c      	ldr	r3, [pc, #432]	@ (8004ffc <HAL_RCC_OscConfig+0x4bc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d108      	bne.n	8004e6e <HAL_RCC_OscConfig+0x32e>
 8004e5c:	4b66      	ldr	r3, [pc, #408]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	4a65      	ldr	r2, [pc, #404]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e6c:	e024      	b.n	8004eb8 <HAL_RCC_OscConfig+0x378>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	d110      	bne.n	8004e98 <HAL_RCC_OscConfig+0x358>
 8004e76:	4b60      	ldr	r3, [pc, #384]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e86:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e96:	e00f      	b.n	8004eb8 <HAL_RCC_OscConfig+0x378>
 8004e98:	4b57      	ldr	r3, [pc, #348]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	4a56      	ldr	r2, [pc, #344]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ea8:	4b53      	ldr	r3, [pc, #332]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eae:	4a52      	ldr	r2, [pc, #328]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004eb0:	f023 0304 	bic.w	r3, r3, #4
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d016      	beq.n	8004eee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fd fafa 	bl	80024b8 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fd faf6 	bl	80024b8 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e138      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ede:	4b46      	ldr	r3, [pc, #280]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ed      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x388>
 8004eec:	e015      	b.n	8004f1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eee:	f7fd fae3 	bl	80024b8 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef6:	f7fd fadf 	bl	80024b8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e121      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ed      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f1a:	7ffb      	ldrb	r3, [r7, #31]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f20:	4b35      	ldr	r3, [pc, #212]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f24:	4a34      	ldr	r2, [pc, #208]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d03c      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01c      	beq.n	8004f7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f40:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f46:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f50:	f7fd fab2 	bl	80024b8 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f58:	f7fd faae 	bl	80024b8 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e0f2      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f6a:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0ef      	beq.n	8004f58 <HAL_RCC_OscConfig+0x418>
 8004f78:	e01b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f80:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8a:	f7fd fa95 	bl	80024b8 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f92:	f7fd fa91 	bl	80024b8 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0d5      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fa4:	4b14      	ldr	r3, [pc, #80]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1ef      	bne.n	8004f92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80c9 	beq.w	800514e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b0c      	cmp	r3, #12
 8004fc6:	f000 8083 	beq.w	80050d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d15e      	bne.n	8005090 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd2:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a08      	ldr	r2, [pc, #32]	@ (8004ff8 <HAL_RCC_OscConfig+0x4b8>)
 8004fd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fde:	f7fd fa6b 	bl	80024b8 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe4:	e00c      	b.n	8005000 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe6:	f7fd fa67 	bl	80024b8 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d905      	bls.n	8005000 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0ab      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005000:	4b55      	ldr	r3, [pc, #340]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ec      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800500c:	4b52      	ldr	r3, [pc, #328]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	4b52      	ldr	r3, [pc, #328]	@ (800515c <HAL_RCC_OscConfig+0x61c>)
 8005012:	4013      	ands	r3, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6a11      	ldr	r1, [r2, #32]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800501c:	3a01      	subs	r2, #1
 800501e:	0112      	lsls	r2, r2, #4
 8005020:	4311      	orrs	r1, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005026:	0212      	lsls	r2, r2, #8
 8005028:	4311      	orrs	r1, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800502e:	0852      	lsrs	r2, r2, #1
 8005030:	3a01      	subs	r2, #1
 8005032:	0552      	lsls	r2, r2, #21
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800503a:	0852      	lsrs	r2, r2, #1
 800503c:	3a01      	subs	r2, #1
 800503e:	0652      	lsls	r2, r2, #25
 8005040:	4311      	orrs	r1, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005046:	06d2      	lsls	r2, r2, #27
 8005048:	430a      	orrs	r2, r1
 800504a:	4943      	ldr	r1, [pc, #268]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 800504c:	4313      	orrs	r3, r2
 800504e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005050:	4b41      	ldr	r3, [pc, #260]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a40      	ldr	r2, [pc, #256]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 8005056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800505a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800505c:	4b3e      	ldr	r3, [pc, #248]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a3d      	ldr	r2, [pc, #244]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 8005062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005066:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fd fa26 	bl	80024b8 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fd fa22 	bl	80024b8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e066      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005082:	4b35      	ldr	r3, [pc, #212]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x530>
 800508e:	e05e      	b.n	800514e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005090:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a30      	ldr	r2, [pc, #192]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 8005096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800509a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fd fa0c 	bl	80024b8 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fd fa08 	bl	80024b8 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e04c      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b6:	4b28      	ldr	r3, [pc, #160]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050c2:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	4924      	ldr	r1, [pc, #144]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 80050c8:	4b25      	ldr	r3, [pc, #148]	@ (8005160 <HAL_RCC_OscConfig+0x620>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	60cb      	str	r3, [r1, #12]
 80050ce:	e03e      	b.n	800514e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e039      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80050dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005158 <HAL_RCC_OscConfig+0x618>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 0203 	and.w	r2, r3, #3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d12c      	bne.n	800514a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	3b01      	subs	r3, #1
 80050fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d123      	bne.n	800514a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d11b      	bne.n	800514a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800511e:	429a      	cmp	r2, r3
 8005120:	d113      	bne.n	800514a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	3b01      	subs	r3, #1
 8005130:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d109      	bne.n	800514a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	3b01      	subs	r3, #1
 8005144:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d001      	beq.n	800514e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000
 800515c:	019f800c 	.word	0x019f800c
 8005160:	feeefffc 	.word	0xfeeefffc

08005164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e11e      	b.n	80053ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800517c:	4b91      	ldr	r3, [pc, #580]	@ (80053c4 <HAL_RCC_ClockConfig+0x260>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d910      	bls.n	80051ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b8e      	ldr	r3, [pc, #568]	@ (80053c4 <HAL_RCC_ClockConfig+0x260>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 020f 	bic.w	r2, r3, #15
 8005192:	498c      	ldr	r1, [pc, #560]	@ (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4313      	orrs	r3, r2
 8005198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b8a      	ldr	r3, [pc, #552]	@ (80053c4 <HAL_RCC_ClockConfig+0x260>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e106      	b.n	80053ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d073      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d129      	bne.n	8005214 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c0:	4b81      	ldr	r3, [pc, #516]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0f4      	b.n	80053ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80051d0:	f000 f99e 	bl	8005510 <RCC_GetSysClockFreqFromPLLSource>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4a7c      	ldr	r2, [pc, #496]	@ (80053cc <HAL_RCC_ClockConfig+0x268>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d93f      	bls.n	800525e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051de:	4b7a      	ldr	r3, [pc, #488]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d033      	beq.n	800525e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d12f      	bne.n	800525e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051fe:	4b72      	ldr	r3, [pc, #456]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005206:	4a70      	ldr	r2, [pc, #448]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 8005208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800520c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e024      	b.n	800525e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d107      	bne.n	800522c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800521c:	4b6a      	ldr	r3, [pc, #424]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0c6      	b.n	80053ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800522c:	4b66      	ldr	r3, [pc, #408]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0be      	b.n	80053ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800523c:	f000 f8ce 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 8005240:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4a61      	ldr	r2, [pc, #388]	@ (80053cc <HAL_RCC_ClockConfig+0x268>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d909      	bls.n	800525e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800524a:	4b5f      	ldr	r3, [pc, #380]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005252:	4a5d      	ldr	r2, [pc, #372]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 8005254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005258:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800525a:	2380      	movs	r3, #128	@ 0x80
 800525c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800525e:	4b5a      	ldr	r3, [pc, #360]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 0203 	bic.w	r2, r3, #3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4957      	ldr	r1, [pc, #348]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 800526c:	4313      	orrs	r3, r2
 800526e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005270:	f7fd f922 	bl	80024b8 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005276:	e00a      	b.n	800528e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005278:	f7fd f91e 	bl	80024b8 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e095      	b.n	80053ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528e:	4b4e      	ldr	r3, [pc, #312]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 020c 	and.w	r2, r3, #12
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	429a      	cmp	r2, r3
 800529e:	d1eb      	bne.n	8005278 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d023      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b8:	4b43      	ldr	r3, [pc, #268]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a42      	ldr	r2, [pc, #264]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 80052be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052d0:	4b3d      	ldr	r3, [pc, #244]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052d8:	4a3b      	ldr	r2, [pc, #236]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 80052da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e0:	4b39      	ldr	r3, [pc, #228]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4936      	ldr	r1, [pc, #216]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	608b      	str	r3, [r1, #8]
 80052f2:	e008      	b.n	8005306 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b80      	cmp	r3, #128	@ 0x80
 80052f8:	d105      	bne.n	8005306 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052fa:	4b33      	ldr	r3, [pc, #204]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	4a32      	ldr	r2, [pc, #200]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 8005300:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005304:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005306:	4b2f      	ldr	r3, [pc, #188]	@ (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d21d      	bcs.n	8005350 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005314:	4b2b      	ldr	r3, [pc, #172]	@ (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f023 020f 	bic.w	r2, r3, #15
 800531c:	4929      	ldr	r1, [pc, #164]	@ (80053c4 <HAL_RCC_ClockConfig+0x260>)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	4313      	orrs	r3, r2
 8005322:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005324:	f7fd f8c8 	bl	80024b8 <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	e00a      	b.n	8005342 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532c:	f7fd f8c4 	bl	80024b8 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e03b      	b.n	80053ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b20      	ldr	r3, [pc, #128]	@ (80053c4 <HAL_RCC_ClockConfig+0x260>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d1ed      	bne.n	800532c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800535c:	4b1a      	ldr	r3, [pc, #104]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	4917      	ldr	r1, [pc, #92]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 800536a:	4313      	orrs	r3, r2
 800536c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800537a:	4b13      	ldr	r3, [pc, #76]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	490f      	ldr	r1, [pc, #60]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800538e:	f000 f825 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 8005392:	4602      	mov	r2, r0
 8005394:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <HAL_RCC_ClockConfig+0x264>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	490c      	ldr	r1, [pc, #48]	@ (80053d0 <HAL_RCC_ClockConfig+0x26c>)
 80053a0:	5ccb      	ldrb	r3, [r1, r3]
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	fa22 f303 	lsr.w	r3, r2, r3
 80053aa:	4a0a      	ldr	r2, [pc, #40]	@ (80053d4 <HAL_RCC_ClockConfig+0x270>)
 80053ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053ae:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <HAL_RCC_ClockConfig+0x274>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fd f834 	bl	8002420 <HAL_InitTick>
 80053b8:	4603      	mov	r3, r0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40022000 	.word	0x40022000
 80053c8:	40021000 	.word	0x40021000
 80053cc:	04c4b400 	.word	0x04c4b400
 80053d0:	0800970c 	.word	0x0800970c
 80053d4:	20000008 	.word	0x20000008
 80053d8:	2000000c 	.word	0x2000000c

080053dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d102      	bne.n	80053f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005498 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	e047      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053f4:	4b27      	ldr	r3, [pc, #156]	@ (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d102      	bne.n	8005406 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005400:	4b26      	ldr	r3, [pc, #152]	@ (800549c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	e03e      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005406:	4b23      	ldr	r3, [pc, #140]	@ (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d136      	bne.n	8005480 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005412:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800541c:	4b1d      	ldr	r3, [pc, #116]	@ (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	3301      	adds	r3, #1
 8005428:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d10c      	bne.n	800544a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005430:	4a1a      	ldr	r2, [pc, #104]	@ (800549c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	4a16      	ldr	r2, [pc, #88]	@ (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 800543a:	68d2      	ldr	r2, [r2, #12]
 800543c:	0a12      	lsrs	r2, r2, #8
 800543e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	617b      	str	r3, [r7, #20]
      break;
 8005448:	e00c      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800544a:	4a13      	ldr	r2, [pc, #76]	@ (8005498 <HAL_RCC_GetSysClockFreq+0xbc>)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005452:	4a10      	ldr	r2, [pc, #64]	@ (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005454:	68d2      	ldr	r2, [r2, #12]
 8005456:	0a12      	lsrs	r2, r2, #8
 8005458:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800545c:	fb02 f303 	mul.w	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]
      break;
 8005462:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005464:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	0e5b      	lsrs	r3, r3, #25
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	3301      	adds	r3, #1
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	e001      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005484:	693b      	ldr	r3, [r7, #16]
}
 8005486:	4618      	mov	r0, r3
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000
 8005498:	00f42400 	.word	0x00f42400
 800549c:	016e3600 	.word	0x016e3600

080054a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a4:	4b03      	ldr	r3, [pc, #12]	@ (80054b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054a6:	681b      	ldr	r3, [r3, #0]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000008 	.word	0x20000008

080054b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054bc:	f7ff fff0 	bl	80054a0 <HAL_RCC_GetHCLKFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b06      	ldr	r3, [pc, #24]	@ (80054dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4904      	ldr	r1, [pc, #16]	@ (80054e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d8:	4618      	mov	r0, r3
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40021000 	.word	0x40021000
 80054e0:	0800971c 	.word	0x0800971c

080054e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054e8:	f7ff ffda 	bl	80054a0 <HAL_RCC_GetHCLKFreq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	0adb      	lsrs	r3, r3, #11
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	4904      	ldr	r1, [pc, #16]	@ (800550c <HAL_RCC_GetPCLK2Freq+0x28>)
 80054fa:	5ccb      	ldrb	r3, [r1, r3]
 80054fc:	f003 031f 	and.w	r3, r3, #31
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021000 	.word	0x40021000
 800550c:	0800971c 	.word	0x0800971c

08005510 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005516:	4b1e      	ldr	r3, [pc, #120]	@ (8005590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005520:	4b1b      	ldr	r3, [pc, #108]	@ (8005590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	3301      	adds	r3, #1
 800552c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d10c      	bne.n	800554e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005534:	4a17      	ldr	r2, [pc, #92]	@ (8005594 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	fbb2 f3f3 	udiv	r3, r2, r3
 800553c:	4a14      	ldr	r2, [pc, #80]	@ (8005590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800553e:	68d2      	ldr	r2, [r2, #12]
 8005540:	0a12      	lsrs	r2, r2, #8
 8005542:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005546:	fb02 f303 	mul.w	r3, r2, r3
 800554a:	617b      	str	r3, [r7, #20]
    break;
 800554c:	e00c      	b.n	8005568 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800554e:	4a12      	ldr	r2, [pc, #72]	@ (8005598 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	4a0e      	ldr	r2, [pc, #56]	@ (8005590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005558:	68d2      	ldr	r2, [r2, #12]
 800555a:	0a12      	lsrs	r2, r2, #8
 800555c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005560:	fb02 f303 	mul.w	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]
    break;
 8005566:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005568:	4b09      	ldr	r3, [pc, #36]	@ (8005590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	0e5b      	lsrs	r3, r3, #25
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	3301      	adds	r3, #1
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005582:	687b      	ldr	r3, [r7, #4]
}
 8005584:	4618      	mov	r0, r3
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40021000 	.word	0x40021000
 8005594:	016e3600 	.word	0x016e3600
 8005598:	00f42400 	.word	0x00f42400

0800559c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055a4:	2300      	movs	r3, #0
 80055a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055a8:	2300      	movs	r3, #0
 80055aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8098 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ba:	2300      	movs	r3, #0
 80055bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055be:	4b43      	ldr	r3, [pc, #268]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10d      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ca:	4b40      	ldr	r3, [pc, #256]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ce:	4a3f      	ldr	r2, [pc, #252]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d6:	4b3d      	ldr	r3, [pc, #244]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055de:	60bb      	str	r3, [r7, #8]
 80055e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e2:	2301      	movs	r3, #1
 80055e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055e6:	4b3a      	ldr	r3, [pc, #232]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a39      	ldr	r2, [pc, #228]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f2:	f7fc ff61 	bl	80024b8 <HAL_GetTick>
 80055f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055f8:	e009      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fa:	f7fc ff5d 	bl	80024b8 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d902      	bls.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	74fb      	strb	r3, [r7, #19]
        break;
 800560c:	e005      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800560e:	4b30      	ldr	r3, [pc, #192]	@ (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0ef      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800561a:	7cfb      	ldrb	r3, [r7, #19]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d159      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005620:	4b2a      	ldr	r3, [pc, #168]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800562a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01e      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	429a      	cmp	r2, r3
 800563a:	d019      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800563c:	4b23      	ldr	r3, [pc, #140]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005646:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005648:	4b20      	ldr	r3, [pc, #128]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564e:	4a1f      	ldr	r2, [pc, #124]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005658:	4b1c      	ldr	r3, [pc, #112]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565e:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005668:	4a18      	ldr	r2, [pc, #96]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d016      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567a:	f7fc ff1d 	bl	80024b8 <HAL_GetTick>
 800567e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005680:	e00b      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fc ff19 	bl	80024b8 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d902      	bls.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	74fb      	strb	r3, [r7, #19]
            break;
 8005698:	e006      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800569a:	4b0c      	ldr	r3, [pc, #48]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0ec      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ae:	4b07      	ldr	r3, [pc, #28]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056bc:	4903      	ldr	r1, [pc, #12]	@ (80056cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80056c4:	e008      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	74bb      	strb	r3, [r7, #18]
 80056ca:	e005      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80056cc:	40021000 	.word	0x40021000
 80056d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	7cfb      	ldrb	r3, [r7, #19]
 80056d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056d8:	7c7b      	ldrb	r3, [r7, #17]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d105      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056de:	4ba7      	ldr	r3, [pc, #668]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e2:	4aa6      	ldr	r2, [pc, #664]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056f6:	4ba1      	ldr	r3, [pc, #644]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fc:	f023 0203 	bic.w	r2, r3, #3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	499d      	ldr	r1, [pc, #628]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005718:	4b98      	ldr	r3, [pc, #608]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f023 020c 	bic.w	r2, r3, #12
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	4995      	ldr	r1, [pc, #596]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800573a:	4b90      	ldr	r3, [pc, #576]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005740:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	498c      	ldr	r1, [pc, #560]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800575c:	4b87      	ldr	r3, [pc, #540]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005762:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	4984      	ldr	r1, [pc, #528]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800577e:	4b7f      	ldr	r3, [pc, #508]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	497b      	ldr	r1, [pc, #492]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057a0:	4b76      	ldr	r3, [pc, #472]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	4973      	ldr	r1, [pc, #460]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c2:	4b6e      	ldr	r3, [pc, #440]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	496a      	ldr	r1, [pc, #424]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057e4:	4b65      	ldr	r3, [pc, #404]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	4962      	ldr	r1, [pc, #392]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005806:	4b5d      	ldr	r3, [pc, #372]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	4959      	ldr	r1, [pc, #356]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005828:	4b54      	ldr	r3, [pc, #336]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	4951      	ldr	r1, [pc, #324]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800584a:	4b4c      	ldr	r3, [pc, #304]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005850:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	4948      	ldr	r1, [pc, #288]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d015      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800586c:	4b43      	ldr	r3, [pc, #268]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005872:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	4940      	ldr	r1, [pc, #256]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800588a:	d105      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800588c:	4b3b      	ldr	r3, [pc, #236]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4a3a      	ldr	r2, [pc, #232]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005896:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d015      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058a4:	4b35      	ldr	r3, [pc, #212]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b2:	4932      	ldr	r1, [pc, #200]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058c2:	d105      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c4:	4b2d      	ldr	r3, [pc, #180]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a2c      	ldr	r2, [pc, #176]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d015      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058dc:	4b27      	ldr	r3, [pc, #156]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ea:	4924      	ldr	r1, [pc, #144]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058fa:	d105      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058fc:	4b1f      	ldr	r3, [pc, #124]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4a1e      	ldr	r2, [pc, #120]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005906:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d015      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005914:	4b19      	ldr	r3, [pc, #100]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005922:	4916      	ldr	r1, [pc, #88]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005932:	d105      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005934:	4b11      	ldr	r3, [pc, #68]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4a10      	ldr	r2, [pc, #64]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800593e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d019      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800594c:	4b0b      	ldr	r3, [pc, #44]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005952:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	4908      	ldr	r1, [pc, #32]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800596a:	d109      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596c:	4b03      	ldr	r3, [pc, #12]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4a02      	ldr	r2, [pc, #8]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005976:	60d3      	str	r3, [r2, #12]
 8005978:	e002      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d015      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800598c:	4b29      	ldr	r3, [pc, #164]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005992:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599a:	4926      	ldr	r1, [pc, #152]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059aa:	d105      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059ac:	4b21      	ldr	r3, [pc, #132]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4a20      	ldr	r2, [pc, #128]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d015      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80059c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059d2:	4918      	ldr	r1, [pc, #96]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e2:	d105      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059e4:	4b13      	ldr	r3, [pc, #76]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4a12      	ldr	r2, [pc, #72]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d015      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0a:	490a      	ldr	r1, [pc, #40]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a1a:	d105      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a1c:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a04      	ldr	r2, [pc, #16]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005a28:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40021000 	.word	0x40021000

08005a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e049      	b.n	8005ade <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fc fb2a 	bl	80020b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f000 ff68 	bl	800694c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d001      	beq.n	8005b00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e04c      	b.n	8005b9a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a26      	ldr	r2, [pc, #152]	@ (8005ba8 <HAL_TIM_Base_Start+0xc0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d022      	beq.n	8005b58 <HAL_TIM_Base_Start+0x70>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1a:	d01d      	beq.n	8005b58 <HAL_TIM_Base_Start+0x70>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a22      	ldr	r2, [pc, #136]	@ (8005bac <HAL_TIM_Base_Start+0xc4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d018      	beq.n	8005b58 <HAL_TIM_Base_Start+0x70>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a21      	ldr	r2, [pc, #132]	@ (8005bb0 <HAL_TIM_Base_Start+0xc8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <HAL_TIM_Base_Start+0x70>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb4 <HAL_TIM_Base_Start+0xcc>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <HAL_TIM_Base_Start+0x70>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb8 <HAL_TIM_Base_Start+0xd0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <HAL_TIM_Base_Start+0x70>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <HAL_TIM_Base_Start+0xd4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_TIM_Base_Start+0x70>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc0 <HAL_TIM_Base_Start+0xd8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d115      	bne.n	8005b84 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	4b19      	ldr	r3, [pc, #100]	@ (8005bc4 <HAL_TIM_Base_Start+0xdc>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b06      	cmp	r3, #6
 8005b68:	d015      	beq.n	8005b96 <HAL_TIM_Base_Start+0xae>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b70:	d011      	beq.n	8005b96 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	e008      	b.n	8005b96 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e000      	b.n	8005b98 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800
 8005bb4:	40000c00 	.word	0x40000c00
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40015000 	.word	0x40015000
 8005bc4:	00010007 	.word	0x00010007

08005bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d001      	beq.n	8005be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e054      	b.n	8005c8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a26      	ldr	r2, [pc, #152]	@ (8005c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d022      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0a:	d01d      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a22      	ldr	r2, [pc, #136]	@ (8005c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d018      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a21      	ldr	r2, [pc, #132]	@ (8005ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ca8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1c      	ldr	r2, [pc, #112]	@ (8005cac <HAL_TIM_Base_Start_IT+0xe4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d115      	bne.n	8005c74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_TIM_Base_Start_IT+0xec>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b06      	cmp	r3, #6
 8005c58:	d015      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0xbe>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c60:	d011      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c72:	e008      	b.n	8005c86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e000      	b.n	8005c88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40000c00 	.word	0x40000c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40015000 	.word	0x40015000
 8005cb4:	00010007 	.word	0x00010007

08005cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e049      	b.n	8005d5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f841 	bl	8005d66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f000 fe28 	bl	800694c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <HAL_TIM_PWM_Start+0x24>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	bf14      	ite	ne
 8005d98:	2301      	movne	r3, #1
 8005d9a:	2300      	moveq	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	e03c      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d109      	bne.n	8005dba <HAL_TIM_PWM_Start+0x3e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	bf14      	ite	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	2300      	moveq	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	e02f      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d109      	bne.n	8005dd4 <HAL_TIM_PWM_Start+0x58>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	bf14      	ite	ne
 8005dcc:	2301      	movne	r3, #1
 8005dce:	2300      	moveq	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	e022      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d109      	bne.n	8005dee <HAL_TIM_PWM_Start+0x72>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	bf14      	ite	ne
 8005de6:	2301      	movne	r3, #1
 8005de8:	2300      	moveq	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	e015      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b10      	cmp	r3, #16
 8005df2:	d109      	bne.n	8005e08 <HAL_TIM_PWM_Start+0x8c>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	e008      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	bf14      	ite	ne
 8005e14:	2301      	movne	r3, #1
 8005e16:	2300      	moveq	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e0a6      	b.n	8005f70 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_TIM_PWM_Start+0xb6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e30:	e023      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d104      	bne.n	8005e42 <HAL_TIM_PWM_Start+0xc6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e40:	e01b      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0xd6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e50:	e013      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b0c      	cmp	r3, #12
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0xe6>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e60:	e00b      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0xf6>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e70:	e003      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f9dc 	bl	8007240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8005f78 <HAL_TIM_PWM_Start+0x1fc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d018      	beq.n	8005ec4 <HAL_TIM_PWM_Start+0x148>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a39      	ldr	r2, [pc, #228]	@ (8005f7c <HAL_TIM_PWM_Start+0x200>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <HAL_TIM_PWM_Start+0x148>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a37      	ldr	r2, [pc, #220]	@ (8005f80 <HAL_TIM_PWM_Start+0x204>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_TIM_PWM_Start+0x148>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a36      	ldr	r2, [pc, #216]	@ (8005f84 <HAL_TIM_PWM_Start+0x208>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_TIM_PWM_Start+0x148>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a34      	ldr	r2, [pc, #208]	@ (8005f88 <HAL_TIM_PWM_Start+0x20c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIM_PWM_Start+0x148>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a33      	ldr	r2, [pc, #204]	@ (8005f8c <HAL_TIM_PWM_Start+0x210>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIM_PWM_Start+0x14c>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <HAL_TIM_PWM_Start+0x14e>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005edc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a25      	ldr	r2, [pc, #148]	@ (8005f78 <HAL_TIM_PWM_Start+0x1fc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d022      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x1b2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef0:	d01d      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x1b2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a26      	ldr	r2, [pc, #152]	@ (8005f90 <HAL_TIM_PWM_Start+0x214>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d018      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x1b2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a24      	ldr	r2, [pc, #144]	@ (8005f94 <HAL_TIM_PWM_Start+0x218>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x1b2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a23      	ldr	r2, [pc, #140]	@ (8005f98 <HAL_TIM_PWM_Start+0x21c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00e      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x1b2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a19      	ldr	r2, [pc, #100]	@ (8005f7c <HAL_TIM_PWM_Start+0x200>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x1b2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a18      	ldr	r2, [pc, #96]	@ (8005f80 <HAL_TIM_PWM_Start+0x204>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <HAL_TIM_PWM_Start+0x1b2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a18      	ldr	r2, [pc, #96]	@ (8005f8c <HAL_TIM_PWM_Start+0x210>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d115      	bne.n	8005f5a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	4b19      	ldr	r3, [pc, #100]	@ (8005f9c <HAL_TIM_PWM_Start+0x220>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d015      	beq.n	8005f6c <HAL_TIM_PWM_Start+0x1f0>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f46:	d011      	beq.n	8005f6c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f58:	e008      	b.n	8005f6c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0201 	orr.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	e000      	b.n	8005f6e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40013400 	.word	0x40013400
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400
 8005f88:	40014800 	.word	0x40014800
 8005f8c:	40015000 	.word	0x40015000
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	00010007 	.word	0x00010007

08005fa0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e097      	b.n	80060e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fc f8e9 	bl	80021a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005fe4:	f023 0307 	bic.w	r3, r3, #7
 8005fe8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f000 fca9 	bl	800694c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	4313      	orrs	r3, r2
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006040:	f023 030c 	bic.w	r3, r3, #12
 8006044:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800604c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006050:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	4313      	orrs	r3, r2
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	011a      	lsls	r2, r3, #4
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	031b      	lsls	r3, r3, #12
 8006070:	4313      	orrs	r3, r2
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006086:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	4313      	orrs	r3, r2
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006104:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800610c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006114:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d110      	bne.n	800613e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d102      	bne.n	8006128 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006122:	7b7b      	ldrb	r3, [r7, #13]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d001      	beq.n	800612c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e069      	b.n	8006200 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800613c:	e031      	b.n	80061a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b04      	cmp	r3, #4
 8006142:	d110      	bne.n	8006166 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006144:	7bbb      	ldrb	r3, [r7, #14]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d102      	bne.n	8006150 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800614a:	7b3b      	ldrb	r3, [r7, #12]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d001      	beq.n	8006154 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e055      	b.n	8006200 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006164:	e01d      	b.n	80061a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d108      	bne.n	800617e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d105      	bne.n	800617e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006172:	7b7b      	ldrb	r3, [r7, #13]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d102      	bne.n	800617e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006178:	7b3b      	ldrb	r3, [r7, #12]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d001      	beq.n	8006182 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e03e      	b.n	8006200 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2202      	movs	r2, #2
 800619e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_TIM_Encoder_Start+0xc4>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d008      	beq.n	80061c0 <HAL_TIM_Encoder_Start+0xd4>
 80061ae:	e00f      	b.n	80061d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2201      	movs	r2, #1
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 f841 	bl	8007240 <TIM_CCxChannelCmd>
      break;
 80061be:	e016      	b.n	80061ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2201      	movs	r2, #1
 80061c6:	2104      	movs	r1, #4
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f839 	bl	8007240 <TIM_CCxChannelCmd>
      break;
 80061ce:	e00e      	b.n	80061ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2201      	movs	r2, #1
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 f831 	bl	8007240 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2201      	movs	r2, #1
 80061e4:	2104      	movs	r1, #4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 f82a 	bl	8007240 <TIM_CCxChannelCmd>
      break;
 80061ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0201 	orr.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d020      	beq.n	800626c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01b      	beq.n	800626c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0202 	mvn.w	r2, #2
 800623c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fb5c 	bl	8006910 <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fb4e 	bl	80068fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb5f 	bl	8006924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d020      	beq.n	80062b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01b      	beq.n	80062b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0204 	mvn.w	r2, #4
 8006288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fb36 	bl	8006910 <HAL_TIM_IC_CaptureCallback>
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb28 	bl	80068fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fb39 	bl	8006924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d020      	beq.n	8006304 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01b      	beq.n	8006304 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0208 	mvn.w	r2, #8
 80062d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2204      	movs	r2, #4
 80062da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fb10 	bl	8006910 <HAL_TIM_IC_CaptureCallback>
 80062f0:	e005      	b.n	80062fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fb02 	bl	80068fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fb13 	bl	8006924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	d020      	beq.n	8006350 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0210 	mvn.w	r2, #16
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2208      	movs	r2, #8
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 faea 	bl	8006910 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fadc 	bl	80068fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 faed 	bl	8006924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00c      	beq.n	8006374 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0201 	mvn.w	r2, #1
 800636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fb fb1a 	bl	80019a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00c      	beq.n	80063a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800639a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 f815 	bl	80073cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00c      	beq.n	80063c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80063be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 f80d 	bl	80073e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00c      	beq.n	80063ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 faa7 	bl	8006938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00c      	beq.n	800640e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f06f 0220 	mvn.w	r2, #32
 8006406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 ffd5 	bl	80073b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00c      	beq.n	8006432 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800642a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 ffe1 	bl	80073f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00c      	beq.n	8006456 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800644e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 ffd9 	bl	8007408 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 ffd1 	bl	800741c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 ffc9 	bl	8007430 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800649e:	bf00      	nop
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e0ff      	b.n	80066c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b14      	cmp	r3, #20
 80064d2:	f200 80f0 	bhi.w	80066b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064d6:	a201      	add	r2, pc, #4	@ (adr r2, 80064dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	08006531 	.word	0x08006531
 80064e0:	080066b7 	.word	0x080066b7
 80064e4:	080066b7 	.word	0x080066b7
 80064e8:	080066b7 	.word	0x080066b7
 80064ec:	08006571 	.word	0x08006571
 80064f0:	080066b7 	.word	0x080066b7
 80064f4:	080066b7 	.word	0x080066b7
 80064f8:	080066b7 	.word	0x080066b7
 80064fc:	080065b3 	.word	0x080065b3
 8006500:	080066b7 	.word	0x080066b7
 8006504:	080066b7 	.word	0x080066b7
 8006508:	080066b7 	.word	0x080066b7
 800650c:	080065f3 	.word	0x080065f3
 8006510:	080066b7 	.word	0x080066b7
 8006514:	080066b7 	.word	0x080066b7
 8006518:	080066b7 	.word	0x080066b7
 800651c:	08006635 	.word	0x08006635
 8006520:	080066b7 	.word	0x080066b7
 8006524:	080066b7 	.word	0x080066b7
 8006528:	080066b7 	.word	0x080066b7
 800652c:	08006675 	.word	0x08006675
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fabc 	bl	8006ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0208 	orr.w	r2, r2, #8
 800654a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0204 	bic.w	r2, r2, #4
 800655a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6999      	ldr	r1, [r3, #24]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	619a      	str	r2, [r3, #24]
      break;
 800656e:	e0a5      	b.n	80066bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fb36 	bl	8006be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800658a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800659a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6999      	ldr	r1, [r3, #24]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	021a      	lsls	r2, r3, #8
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	619a      	str	r2, [r3, #24]
      break;
 80065b0:	e084      	b.n	80066bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fba9 	bl	8006d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0208 	orr.w	r2, r2, #8
 80065cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0204 	bic.w	r2, r2, #4
 80065dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69d9      	ldr	r1, [r3, #28]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	61da      	str	r2, [r3, #28]
      break;
 80065f0:	e064      	b.n	80066bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fc1b 	bl	8006e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800660c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800661c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69d9      	ldr	r1, [r3, #28]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	021a      	lsls	r2, r3, #8
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	61da      	str	r2, [r3, #28]
      break;
 8006632:	e043      	b.n	80066bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fc8e 	bl	8006f5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0208 	orr.w	r2, r2, #8
 800664e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0204 	bic.w	r2, r2, #4
 800665e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006672:	e023      	b.n	80066bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fcd8 	bl	8007030 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800668e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	021a      	lsls	r2, r3, #8
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80066b4:	e002      	b.n	80066bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
      break;
 80066ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop

080066d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_TIM_ConfigClockSource+0x1c>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e0f6      	b.n	80068da <HAL_TIM_ConfigClockSource+0x20a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800670a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800670e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a6f      	ldr	r2, [pc, #444]	@ (80068e4 <HAL_TIM_ConfigClockSource+0x214>)
 8006726:	4293      	cmp	r3, r2
 8006728:	f000 80c1 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 800672c:	4a6d      	ldr	r2, [pc, #436]	@ (80068e4 <HAL_TIM_ConfigClockSource+0x214>)
 800672e:	4293      	cmp	r3, r2
 8006730:	f200 80c6 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006734:	4a6c      	ldr	r2, [pc, #432]	@ (80068e8 <HAL_TIM_ConfigClockSource+0x218>)
 8006736:	4293      	cmp	r3, r2
 8006738:	f000 80b9 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 800673c:	4a6a      	ldr	r2, [pc, #424]	@ (80068e8 <HAL_TIM_ConfigClockSource+0x218>)
 800673e:	4293      	cmp	r3, r2
 8006740:	f200 80be 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006744:	4a69      	ldr	r2, [pc, #420]	@ (80068ec <HAL_TIM_ConfigClockSource+0x21c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	f000 80b1 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 800674c:	4a67      	ldr	r2, [pc, #412]	@ (80068ec <HAL_TIM_ConfigClockSource+0x21c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	f200 80b6 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006754:	4a66      	ldr	r2, [pc, #408]	@ (80068f0 <HAL_TIM_ConfigClockSource+0x220>)
 8006756:	4293      	cmp	r3, r2
 8006758:	f000 80a9 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 800675c:	4a64      	ldr	r2, [pc, #400]	@ (80068f0 <HAL_TIM_ConfigClockSource+0x220>)
 800675e:	4293      	cmp	r3, r2
 8006760:	f200 80ae 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006764:	4a63      	ldr	r2, [pc, #396]	@ (80068f4 <HAL_TIM_ConfigClockSource+0x224>)
 8006766:	4293      	cmp	r3, r2
 8006768:	f000 80a1 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 800676c:	4a61      	ldr	r2, [pc, #388]	@ (80068f4 <HAL_TIM_ConfigClockSource+0x224>)
 800676e:	4293      	cmp	r3, r2
 8006770:	f200 80a6 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006774:	4a60      	ldr	r2, [pc, #384]	@ (80068f8 <HAL_TIM_ConfigClockSource+0x228>)
 8006776:	4293      	cmp	r3, r2
 8006778:	f000 8099 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 800677c:	4a5e      	ldr	r2, [pc, #376]	@ (80068f8 <HAL_TIM_ConfigClockSource+0x228>)
 800677e:	4293      	cmp	r3, r2
 8006780:	f200 809e 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006784:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006788:	f000 8091 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 800678c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006790:	f200 8096 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006794:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006798:	f000 8089 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 800679c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067a0:	f200 808e 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80067a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067a8:	d03e      	beq.n	8006828 <HAL_TIM_ConfigClockSource+0x158>
 80067aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ae:	f200 8087 	bhi.w	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80067b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b6:	f000 8086 	beq.w	80068c6 <HAL_TIM_ConfigClockSource+0x1f6>
 80067ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067be:	d87f      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80067c0:	2b70      	cmp	r3, #112	@ 0x70
 80067c2:	d01a      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x12a>
 80067c4:	2b70      	cmp	r3, #112	@ 0x70
 80067c6:	d87b      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80067c8:	2b60      	cmp	r3, #96	@ 0x60
 80067ca:	d050      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x19e>
 80067cc:	2b60      	cmp	r3, #96	@ 0x60
 80067ce:	d877      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80067d0:	2b50      	cmp	r3, #80	@ 0x50
 80067d2:	d03c      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x17e>
 80067d4:	2b50      	cmp	r3, #80	@ 0x50
 80067d6:	d873      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80067d8:	2b40      	cmp	r3, #64	@ 0x40
 80067da:	d058      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x1be>
 80067dc:	2b40      	cmp	r3, #64	@ 0x40
 80067de:	d86f      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80067e0:	2b30      	cmp	r3, #48	@ 0x30
 80067e2:	d064      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 80067e4:	2b30      	cmp	r3, #48	@ 0x30
 80067e6:	d86b      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d060      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d867      	bhi.n	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d05c      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 80067f4:	2b10      	cmp	r3, #16
 80067f6:	d05a      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0x1de>
 80067f8:	e062      	b.n	80068c0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800680a:	f000 fcf9 	bl	8007200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800681c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	609a      	str	r2, [r3, #8]
      break;
 8006826:	e04f      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006838:	f000 fce2 	bl	8007200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800684a:	609a      	str	r2, [r3, #8]
      break;
 800684c:	e03c      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685a:	461a      	mov	r2, r3
 800685c:	f000 fc54 	bl	8007108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2150      	movs	r1, #80	@ 0x50
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fcad 	bl	80071c6 <TIM_ITRx_SetConfig>
      break;
 800686c:	e02c      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800687a:	461a      	mov	r2, r3
 800687c:	f000 fc73 	bl	8007166 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2160      	movs	r1, #96	@ 0x60
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fc9d 	bl	80071c6 <TIM_ITRx_SetConfig>
      break;
 800688c:	e01c      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800689a:	461a      	mov	r2, r3
 800689c:	f000 fc34 	bl	8007108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2140      	movs	r1, #64	@ 0x40
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fc8d 	bl	80071c6 <TIM_ITRx_SetConfig>
      break;
 80068ac:	e00c      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f000 fc84 	bl	80071c6 <TIM_ITRx_SetConfig>
      break;
 80068be:	e003      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
      break;
 80068c4:	e000      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80068c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	00100070 	.word	0x00100070
 80068e8:	00100060 	.word	0x00100060
 80068ec:	00100050 	.word	0x00100050
 80068f0:	00100040 	.word	0x00100040
 80068f4:	00100030 	.word	0x00100030
 80068f8:	00100020 	.word	0x00100020

080068fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a4c      	ldr	r2, [pc, #304]	@ (8006a90 <TIM_Base_SetConfig+0x144>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d017      	beq.n	8006994 <TIM_Base_SetConfig+0x48>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696a:	d013      	beq.n	8006994 <TIM_Base_SetConfig+0x48>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a49      	ldr	r2, [pc, #292]	@ (8006a94 <TIM_Base_SetConfig+0x148>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00f      	beq.n	8006994 <TIM_Base_SetConfig+0x48>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a48      	ldr	r2, [pc, #288]	@ (8006a98 <TIM_Base_SetConfig+0x14c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00b      	beq.n	8006994 <TIM_Base_SetConfig+0x48>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a47      	ldr	r2, [pc, #284]	@ (8006a9c <TIM_Base_SetConfig+0x150>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d007      	beq.n	8006994 <TIM_Base_SetConfig+0x48>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a46      	ldr	r2, [pc, #280]	@ (8006aa0 <TIM_Base_SetConfig+0x154>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_Base_SetConfig+0x48>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a45      	ldr	r2, [pc, #276]	@ (8006aa4 <TIM_Base_SetConfig+0x158>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d108      	bne.n	80069a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a39      	ldr	r2, [pc, #228]	@ (8006a90 <TIM_Base_SetConfig+0x144>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d023      	beq.n	80069f6 <TIM_Base_SetConfig+0xaa>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b4:	d01f      	beq.n	80069f6 <TIM_Base_SetConfig+0xaa>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a36      	ldr	r2, [pc, #216]	@ (8006a94 <TIM_Base_SetConfig+0x148>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01b      	beq.n	80069f6 <TIM_Base_SetConfig+0xaa>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a35      	ldr	r2, [pc, #212]	@ (8006a98 <TIM_Base_SetConfig+0x14c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d017      	beq.n	80069f6 <TIM_Base_SetConfig+0xaa>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a34      	ldr	r2, [pc, #208]	@ (8006a9c <TIM_Base_SetConfig+0x150>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <TIM_Base_SetConfig+0xaa>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a33      	ldr	r2, [pc, #204]	@ (8006aa0 <TIM_Base_SetConfig+0x154>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00f      	beq.n	80069f6 <TIM_Base_SetConfig+0xaa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a33      	ldr	r2, [pc, #204]	@ (8006aa8 <TIM_Base_SetConfig+0x15c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00b      	beq.n	80069f6 <TIM_Base_SetConfig+0xaa>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a32      	ldr	r2, [pc, #200]	@ (8006aac <TIM_Base_SetConfig+0x160>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d007      	beq.n	80069f6 <TIM_Base_SetConfig+0xaa>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a31      	ldr	r2, [pc, #196]	@ (8006ab0 <TIM_Base_SetConfig+0x164>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d003      	beq.n	80069f6 <TIM_Base_SetConfig+0xaa>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a2c      	ldr	r2, [pc, #176]	@ (8006aa4 <TIM_Base_SetConfig+0x158>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d108      	bne.n	8006a08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a18      	ldr	r2, [pc, #96]	@ (8006a90 <TIM_Base_SetConfig+0x144>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <TIM_Base_SetConfig+0x110>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa0 <TIM_Base_SetConfig+0x154>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00f      	beq.n	8006a5c <TIM_Base_SetConfig+0x110>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa8 <TIM_Base_SetConfig+0x15c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00b      	beq.n	8006a5c <TIM_Base_SetConfig+0x110>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a19      	ldr	r2, [pc, #100]	@ (8006aac <TIM_Base_SetConfig+0x160>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d007      	beq.n	8006a5c <TIM_Base_SetConfig+0x110>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a18      	ldr	r2, [pc, #96]	@ (8006ab0 <TIM_Base_SetConfig+0x164>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_Base_SetConfig+0x110>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a13      	ldr	r2, [pc, #76]	@ (8006aa4 <TIM_Base_SetConfig+0x158>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d103      	bne.n	8006a64 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d105      	bne.n	8006a82 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	611a      	str	r2, [r3, #16]
  }
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40012c00 	.word	0x40012c00
 8006a94:	40000400 	.word	0x40000400
 8006a98:	40000800 	.word	0x40000800
 8006a9c:	40000c00 	.word	0x40000c00
 8006aa0:	40013400 	.word	0x40013400
 8006aa4:	40015000 	.word	0x40015000
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	f023 0201 	bic.w	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 0302 	bic.w	r3, r3, #2
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a30      	ldr	r2, [pc, #192]	@ (8006bd0 <TIM_OC1_SetConfig+0x11c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d013      	beq.n	8006b3c <TIM_OC1_SetConfig+0x88>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a2f      	ldr	r2, [pc, #188]	@ (8006bd4 <TIM_OC1_SetConfig+0x120>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00f      	beq.n	8006b3c <TIM_OC1_SetConfig+0x88>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8006bd8 <TIM_OC1_SetConfig+0x124>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00b      	beq.n	8006b3c <TIM_OC1_SetConfig+0x88>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a2d      	ldr	r2, [pc, #180]	@ (8006bdc <TIM_OC1_SetConfig+0x128>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d007      	beq.n	8006b3c <TIM_OC1_SetConfig+0x88>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006be0 <TIM_OC1_SetConfig+0x12c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_OC1_SetConfig+0x88>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a2b      	ldr	r2, [pc, #172]	@ (8006be4 <TIM_OC1_SetConfig+0x130>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d10c      	bne.n	8006b56 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0308 	bic.w	r3, r3, #8
 8006b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 0304 	bic.w	r3, r3, #4
 8006b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a1d      	ldr	r2, [pc, #116]	@ (8006bd0 <TIM_OC1_SetConfig+0x11c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d013      	beq.n	8006b86 <TIM_OC1_SetConfig+0xd2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd4 <TIM_OC1_SetConfig+0x120>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00f      	beq.n	8006b86 <TIM_OC1_SetConfig+0xd2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd8 <TIM_OC1_SetConfig+0x124>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00b      	beq.n	8006b86 <TIM_OC1_SetConfig+0xd2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a1a      	ldr	r2, [pc, #104]	@ (8006bdc <TIM_OC1_SetConfig+0x128>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <TIM_OC1_SetConfig+0xd2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a19      	ldr	r2, [pc, #100]	@ (8006be0 <TIM_OC1_SetConfig+0x12c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d003      	beq.n	8006b86 <TIM_OC1_SetConfig+0xd2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a18      	ldr	r2, [pc, #96]	@ (8006be4 <TIM_OC1_SetConfig+0x130>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d111      	bne.n	8006baa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	621a      	str	r2, [r3, #32]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40013400 	.word	0x40013400
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800
 8006be4:	40015000 	.word	0x40015000

08006be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	f023 0210 	bic.w	r2, r3, #16
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0320 	bic.w	r3, r3, #32
 8006c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a2c      	ldr	r2, [pc, #176]	@ (8006cf8 <TIM_OC2_SetConfig+0x110>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d007      	beq.n	8006c5c <TIM_OC2_SetConfig+0x74>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8006cfc <TIM_OC2_SetConfig+0x114>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC2_SetConfig+0x74>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a2a      	ldr	r2, [pc, #168]	@ (8006d00 <TIM_OC2_SetConfig+0x118>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10d      	bne.n	8006c78 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf8 <TIM_OC2_SetConfig+0x110>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d013      	beq.n	8006ca8 <TIM_OC2_SetConfig+0xc0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1e      	ldr	r2, [pc, #120]	@ (8006cfc <TIM_OC2_SetConfig+0x114>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00f      	beq.n	8006ca8 <TIM_OC2_SetConfig+0xc0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006d04 <TIM_OC2_SetConfig+0x11c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00b      	beq.n	8006ca8 <TIM_OC2_SetConfig+0xc0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a1d      	ldr	r2, [pc, #116]	@ (8006d08 <TIM_OC2_SetConfig+0x120>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d007      	beq.n	8006ca8 <TIM_OC2_SetConfig+0xc0>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d0c <TIM_OC2_SetConfig+0x124>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d003      	beq.n	8006ca8 <TIM_OC2_SetConfig+0xc0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a17      	ldr	r2, [pc, #92]	@ (8006d00 <TIM_OC2_SetConfig+0x118>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d113      	bne.n	8006cd0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	621a      	str	r2, [r3, #32]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40013400 	.word	0x40013400
 8006d00:	40015000 	.word	0x40015000
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800

08006d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0303 	bic.w	r3, r3, #3
 8006d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8006e1c <TIM_OC3_SetConfig+0x10c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d007      	beq.n	8006d82 <TIM_OC3_SetConfig+0x72>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a2a      	ldr	r2, [pc, #168]	@ (8006e20 <TIM_OC3_SetConfig+0x110>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d003      	beq.n	8006d82 <TIM_OC3_SetConfig+0x72>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a29      	ldr	r2, [pc, #164]	@ (8006e24 <TIM_OC3_SetConfig+0x114>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d10d      	bne.n	8006d9e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	@ (8006e1c <TIM_OC3_SetConfig+0x10c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <TIM_OC3_SetConfig+0xbe>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e20 <TIM_OC3_SetConfig+0x110>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00f      	beq.n	8006dce <TIM_OC3_SetConfig+0xbe>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e28 <TIM_OC3_SetConfig+0x118>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_OC3_SetConfig+0xbe>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1c      	ldr	r2, [pc, #112]	@ (8006e2c <TIM_OC3_SetConfig+0x11c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d007      	beq.n	8006dce <TIM_OC3_SetConfig+0xbe>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e30 <TIM_OC3_SetConfig+0x120>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC3_SetConfig+0xbe>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a16      	ldr	r2, [pc, #88]	@ (8006e24 <TIM_OC3_SetConfig+0x114>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d113      	bne.n	8006df6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40015000 	.word	0x40015000
 8006e28:	40014000 	.word	0x40014000
 8006e2c:	40014400 	.word	0x40014400
 8006e30:	40014800 	.word	0x40014800

08006e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	031b      	lsls	r3, r3, #12
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a2c      	ldr	r2, [pc, #176]	@ (8006f44 <TIM_OC4_SetConfig+0x110>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d007      	beq.n	8006ea8 <TIM_OC4_SetConfig+0x74>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8006f48 <TIM_OC4_SetConfig+0x114>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_OC4_SetConfig+0x74>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f4c <TIM_OC4_SetConfig+0x118>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d10d      	bne.n	8006ec4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	031b      	lsls	r3, r3, #12
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8006f44 <TIM_OC4_SetConfig+0x110>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d013      	beq.n	8006ef4 <TIM_OC4_SetConfig+0xc0>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a1e      	ldr	r2, [pc, #120]	@ (8006f48 <TIM_OC4_SetConfig+0x114>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00f      	beq.n	8006ef4 <TIM_OC4_SetConfig+0xc0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f50 <TIM_OC4_SetConfig+0x11c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00b      	beq.n	8006ef4 <TIM_OC4_SetConfig+0xc0>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a1d      	ldr	r2, [pc, #116]	@ (8006f54 <TIM_OC4_SetConfig+0x120>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d007      	beq.n	8006ef4 <TIM_OC4_SetConfig+0xc0>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8006f58 <TIM_OC4_SetConfig+0x124>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d003      	beq.n	8006ef4 <TIM_OC4_SetConfig+0xc0>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a17      	ldr	r2, [pc, #92]	@ (8006f4c <TIM_OC4_SetConfig+0x118>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d113      	bne.n	8006f1c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006efa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f02:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	019b      	lsls	r3, r3, #6
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	019b      	lsls	r3, r3, #6
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40012c00 	.word	0x40012c00
 8006f48:	40013400 	.word	0x40013400
 8006f4c:	40015000 	.word	0x40015000
 8006f50:	40014000 	.word	0x40014000
 8006f54:	40014400 	.word	0x40014400
 8006f58:	40014800 	.word	0x40014800

08006f5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006fa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	041b      	lsls	r3, r3, #16
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a19      	ldr	r2, [pc, #100]	@ (8007018 <TIM_OC5_SetConfig+0xbc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d013      	beq.n	8006fde <TIM_OC5_SetConfig+0x82>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a18      	ldr	r2, [pc, #96]	@ (800701c <TIM_OC5_SetConfig+0xc0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00f      	beq.n	8006fde <TIM_OC5_SetConfig+0x82>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a17      	ldr	r2, [pc, #92]	@ (8007020 <TIM_OC5_SetConfig+0xc4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00b      	beq.n	8006fde <TIM_OC5_SetConfig+0x82>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a16      	ldr	r2, [pc, #88]	@ (8007024 <TIM_OC5_SetConfig+0xc8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d007      	beq.n	8006fde <TIM_OC5_SetConfig+0x82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a15      	ldr	r2, [pc, #84]	@ (8007028 <TIM_OC5_SetConfig+0xcc>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d003      	beq.n	8006fde <TIM_OC5_SetConfig+0x82>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a14      	ldr	r2, [pc, #80]	@ (800702c <TIM_OC5_SetConfig+0xd0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d109      	bne.n	8006ff2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	021b      	lsls	r3, r3, #8
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	621a      	str	r2, [r3, #32]
}
 800700c:	bf00      	nop
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	40012c00 	.word	0x40012c00
 800701c:	40013400 	.word	0x40013400
 8007020:	40014000 	.word	0x40014000
 8007024:	40014400 	.word	0x40014400
 8007028:	40014800 	.word	0x40014800
 800702c:	40015000 	.word	0x40015000

08007030 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800705e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	051b      	lsls	r3, r3, #20
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a1a      	ldr	r2, [pc, #104]	@ (80070f0 <TIM_OC6_SetConfig+0xc0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d013      	beq.n	80070b4 <TIM_OC6_SetConfig+0x84>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a19      	ldr	r2, [pc, #100]	@ (80070f4 <TIM_OC6_SetConfig+0xc4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00f      	beq.n	80070b4 <TIM_OC6_SetConfig+0x84>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a18      	ldr	r2, [pc, #96]	@ (80070f8 <TIM_OC6_SetConfig+0xc8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00b      	beq.n	80070b4 <TIM_OC6_SetConfig+0x84>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a17      	ldr	r2, [pc, #92]	@ (80070fc <TIM_OC6_SetConfig+0xcc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d007      	beq.n	80070b4 <TIM_OC6_SetConfig+0x84>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a16      	ldr	r2, [pc, #88]	@ (8007100 <TIM_OC6_SetConfig+0xd0>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d003      	beq.n	80070b4 <TIM_OC6_SetConfig+0x84>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a15      	ldr	r2, [pc, #84]	@ (8007104 <TIM_OC6_SetConfig+0xd4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d109      	bne.n	80070c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	029b      	lsls	r3, r3, #10
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	621a      	str	r2, [r3, #32]
}
 80070e2:	bf00      	nop
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40013400 	.word	0x40013400
 80070f8:	40014000 	.word	0x40014000
 80070fc:	40014400 	.word	0x40014400
 8007100:	40014800 	.word	0x40014800
 8007104:	40015000 	.word	0x40015000

08007108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f023 0201 	bic.w	r2, r3, #1
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f023 030a 	bic.w	r3, r3, #10
 8007144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007166:	b480      	push	{r7}
 8007168:	b087      	sub	sp, #28
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	f023 0210 	bic.w	r2, r3, #16
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007190:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	031b      	lsls	r3, r3, #12
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80071dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f043 0307 	orr.w	r3, r3, #7
 80071ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	609a      	str	r2, [r3, #8]
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800721a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	021a      	lsls	r2, r3, #8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	431a      	orrs	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4313      	orrs	r3, r2
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	609a      	str	r2, [r3, #8]
}
 8007234:	bf00      	nop
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 031f 	and.w	r3, r3, #31
 8007252:	2201      	movs	r2, #1
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1a      	ldr	r2, [r3, #32]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	43db      	mvns	r3, r3
 8007262:	401a      	ands	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a1a      	ldr	r2, [r3, #32]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	fa01 f303 	lsl.w	r3, r1, r3
 8007278:	431a      	orrs	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	621a      	str	r2, [r3, #32]
}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e074      	b.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a34      	ldr	r2, [pc, #208]	@ (800739c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a33      	ldr	r2, [pc, #204]	@ (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a31      	ldr	r2, [pc, #196]	@ (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d108      	bne.n	80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a21      	ldr	r2, [pc, #132]	@ (800739c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d022      	beq.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007324:	d01d      	beq.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1f      	ldr	r2, [pc, #124]	@ (80073a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d018      	beq.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1d      	ldr	r2, [pc, #116]	@ (80073ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d013      	beq.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1c      	ldr	r2, [pc, #112]	@ (80073b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00e      	beq.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a15      	ldr	r2, [pc, #84]	@ (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d009      	beq.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a18      	ldr	r2, [pc, #96]	@ (80073b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d004      	beq.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a11      	ldr	r2, [pc, #68]	@ (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d10c      	bne.n	800737c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	4313      	orrs	r3, r2
 8007372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	40013400 	.word	0x40013400
 80073a4:	40015000 	.word	0x40015000
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800
 80073b0:	40000c00 	.word	0x40000c00
 80073b4:	40014000 	.word	0x40014000

080073b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e042      	b.n	80074dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fa fd61 	bl	8001f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2224      	movs	r2, #36	@ 0x24
 8007472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 ff42 	bl	8008318 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fc43 	bl	8007d20 <UART_SetConfig>
 800749a:	4603      	mov	r3, r0
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e01b      	b.n	80074dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 ffc1 	bl	800845c <UART_CheckIdleState>
 80074da:	4603      	mov	r3, r0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	@ 0x28
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	4613      	mov	r3, r2
 80074f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d17b      	bne.n	80075f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <HAL_UART_Transmit+0x26>
 8007504:	88fb      	ldrh	r3, [r7, #6]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e074      	b.n	80075f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2221      	movs	r2, #33	@ 0x21
 800751a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800751e:	f7fa ffcb 	bl	80024b8 <HAL_GetTick>
 8007522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800753c:	d108      	bne.n	8007550 <HAL_UART_Transmit+0x6c>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	e003      	b.n	8007558 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007554:	2300      	movs	r3, #0
 8007556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007558:	e030      	b.n	80075bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2200      	movs	r2, #0
 8007562:	2180      	movs	r1, #128	@ 0x80
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f001 f823 	bl	80085b0 <UART_WaitOnFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e03d      	b.n	80075f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10b      	bne.n	800759a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007590:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	3302      	adds	r3, #2
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	e007      	b.n	80075aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	781a      	ldrb	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	3301      	adds	r3, #1
 80075a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1c8      	bne.n	800755a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2200      	movs	r2, #0
 80075d0:	2140      	movs	r1, #64	@ 0x40
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 ffec 	bl	80085b0 <UART_WaitOnFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e006      	b.n	80075f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	e000      	b.n	80075f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075f6:	2302      	movs	r3, #2
  }
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	@ 0x28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	4613      	mov	r3, r2
 800760c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007614:	2b20      	cmp	r3, #32
 8007616:	d137      	bne.n	8007688 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Receive_IT+0x24>
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e030      	b.n	800768a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a18      	ldr	r2, [pc, #96]	@ (8007694 <HAL_UART_Receive_IT+0x94>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d01f      	beq.n	8007678 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d018      	beq.n	8007678 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	613b      	str	r3, [r7, #16]
   return(result);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800765a:	627b      	str	r3, [r7, #36]	@ 0x24
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	623b      	str	r3, [r7, #32]
 8007666:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	69f9      	ldr	r1, [r7, #28]
 800766a:	6a3a      	ldr	r2, [r7, #32]
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	61bb      	str	r3, [r7, #24]
   return(result);
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e6      	bne.n	8007646 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007678:	88fb      	ldrh	r3, [r7, #6]
 800767a:	461a      	mov	r2, r3
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f001 f804 	bl	800868c <UART_Start_Receive_IT>
 8007684:	4603      	mov	r3, r0
 8007686:	e000      	b.n	800768a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007688:	2302      	movs	r3, #2
  }
}
 800768a:	4618      	mov	r0, r3
 800768c:	3728      	adds	r7, #40	@ 0x28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40008000 	.word	0x40008000

08007698 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b0ba      	sub	sp, #232	@ 0xe8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80076c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80076c6:	4013      	ands	r3, r2
 80076c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80076cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d11b      	bne.n	800770c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d015      	beq.n	800770c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d009      	beq.n	800770c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 82e3 	beq.w	8007cc8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
      }
      return;
 800770a:	e2dd      	b.n	8007cc8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800770c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 8123 	beq.w	800795c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007716:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800771a:	4b8d      	ldr	r3, [pc, #564]	@ (8007950 <HAL_UART_IRQHandler+0x2b8>)
 800771c:	4013      	ands	r3, r2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007722:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007726:	4b8b      	ldr	r3, [pc, #556]	@ (8007954 <HAL_UART_IRQHandler+0x2bc>)
 8007728:	4013      	ands	r3, r2
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 8116 	beq.w	800795c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d011      	beq.n	8007760 <HAL_UART_IRQHandler+0xc8>
 800773c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2201      	movs	r2, #1
 800774e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007756:	f043 0201 	orr.w	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d011      	beq.n	8007790 <HAL_UART_IRQHandler+0xf8>
 800776c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2202      	movs	r2, #2
 800777e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007786:	f043 0204 	orr.w	r2, r3, #4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d011      	beq.n	80077c0 <HAL_UART_IRQHandler+0x128>
 800779c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2204      	movs	r2, #4
 80077ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b6:	f043 0202 	orr.w	r2, r3, #2
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d017      	beq.n	80077fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d105      	bne.n	80077e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80077dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007950 <HAL_UART_IRQHandler+0x2b8>)
 80077de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2208      	movs	r2, #8
 80077ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f2:	f043 0208 	orr.w	r2, r3, #8
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007804:	2b00      	cmp	r3, #0
 8007806:	d012      	beq.n	800782e <HAL_UART_IRQHandler+0x196>
 8007808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800780c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00c      	beq.n	800782e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800781c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007824:	f043 0220 	orr.w	r2, r3, #32
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8249 	beq.w	8007ccc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800783a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800783e:	f003 0320 	and.w	r3, r3, #32
 8007842:	2b00      	cmp	r3, #0
 8007844:	d013      	beq.n	800786e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d007      	beq.n	800786e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007874:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007882:	2b40      	cmp	r3, #64	@ 0x40
 8007884:	d005      	beq.n	8007892 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800788a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800788e:	2b00      	cmp	r3, #0
 8007890:	d054      	beq.n	800793c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 f81c 	bl	80088d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a2:	2b40      	cmp	r3, #64	@ 0x40
 80078a4:	d146      	bne.n	8007934 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3308      	adds	r3, #8
 80078ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3308      	adds	r3, #8
 80078ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1d9      	bne.n	80078a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d017      	beq.n	800792c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007902:	4a15      	ldr	r2, [pc, #84]	@ (8007958 <HAL_UART_IRQHandler+0x2c0>)
 8007904:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790c:	4618      	mov	r0, r3
 800790e:	f7fc fce3 	bl	80042d8 <HAL_DMA_Abort_IT>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d019      	beq.n	800794c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800791e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007926:	4610      	mov	r0, r2
 8007928:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792a:	e00f      	b.n	800794c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f9e1 	bl	8007cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007932:	e00b      	b.n	800794c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f9dd 	bl	8007cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793a:	e007      	b.n	800794c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f9d9 	bl	8007cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800794a:	e1bf      	b.n	8007ccc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	bf00      	nop
    return;
 800794e:	e1bd      	b.n	8007ccc <HAL_UART_IRQHandler+0x634>
 8007950:	10000001 	.word	0x10000001
 8007954:	04000120 	.word	0x04000120
 8007958:	0800899d 	.word	0x0800899d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007960:	2b01      	cmp	r3, #1
 8007962:	f040 8153 	bne.w	8007c0c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 814c 	beq.w	8007c0c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8145 	beq.w	8007c0c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2210      	movs	r2, #16
 8007988:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007994:	2b40      	cmp	r3, #64	@ 0x40
 8007996:	f040 80bb 	bne.w	8007b10 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 818f 	beq.w	8007cd0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079bc:	429a      	cmp	r2, r3
 80079be:	f080 8187 	bcs.w	8007cd0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f040 8087 	bne.w	8007aee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80079f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1da      	bne.n	80079e0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3308      	adds	r3, #8
 8007a30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a3c:	f023 0301 	bic.w	r3, r3, #1
 8007a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3308      	adds	r3, #8
 8007a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e1      	bne.n	8007a2a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3308      	adds	r3, #8
 8007a86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e3      	bne.n	8007a66 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007abc:	f023 0310 	bic.w	r3, r3, #16
 8007ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ace:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ad0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ad4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e4      	bne.n	8007aac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fc fb9c 	bl	8004226 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f8fd 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b0e:	e0df      	b.n	8007cd0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 80d1 	beq.w	8007cd4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007b32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 80cc 	beq.w	8007cd4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b60:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e4      	bne.n	8007b3c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3308      	adds	r3, #8
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	623b      	str	r3, [r7, #32]
   return(result);
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e1      	bne.n	8007b72 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0310 	bic.w	r3, r3, #16
 8007bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	69b9      	ldr	r1, [r7, #24]
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e4      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f87f 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c0a:	e063      	b.n	8007cd4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00e      	beq.n	8007c36 <HAL_UART_IRQHandler+0x59e>
 8007c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d008      	beq.n	8007c36 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fc12 	bl	8009458 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c34:	e051      	b.n	8007cda <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d014      	beq.n	8007c6c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d105      	bne.n	8007c5a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d008      	beq.n	8007c6c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d03a      	beq.n	8007cd8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
    }
    return;
 8007c6a:	e035      	b.n	8007cd8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d009      	beq.n	8007c8c <HAL_UART_IRQHandler+0x5f4>
 8007c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fe9f 	bl	80089c8 <UART_EndTransmit_IT>
    return;
 8007c8a:	e026      	b.n	8007cda <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d009      	beq.n	8007cac <HAL_UART_IRQHandler+0x614>
 8007c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 fbeb 	bl	8009480 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007caa:	e016      	b.n	8007cda <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d010      	beq.n	8007cda <HAL_UART_IRQHandler+0x642>
 8007cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	da0c      	bge.n	8007cda <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 fbd3 	bl	800946c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cc6:	e008      	b.n	8007cda <HAL_UART_IRQHandler+0x642>
      return;
 8007cc8:	bf00      	nop
 8007cca:	e006      	b.n	8007cda <HAL_UART_IRQHandler+0x642>
    return;
 8007ccc:	bf00      	nop
 8007cce:	e004      	b.n	8007cda <HAL_UART_IRQHandler+0x642>
      return;
 8007cd0:	bf00      	nop
 8007cd2:	e002      	b.n	8007cda <HAL_UART_IRQHandler+0x642>
      return;
 8007cd4:	bf00      	nop
 8007cd6:	e000      	b.n	8007cda <HAL_UART_IRQHandler+0x642>
    return;
 8007cd8:	bf00      	nop
  }
}
 8007cda:	37e8      	adds	r7, #232	@ 0xe8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d24:	b08c      	sub	sp, #48	@ 0x30
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	4baa      	ldr	r3, [pc, #680]	@ (8007ff8 <UART_SetConfig+0x2d8>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	6812      	ldr	r2, [r2, #0]
 8007d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a9f      	ldr	r2, [pc, #636]	@ (8007ffc <UART_SetConfig+0x2dc>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d004      	beq.n	8007d8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007d96:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007da0:	430b      	orrs	r3, r1
 8007da2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007daa:	f023 010f 	bic.w	r1, r3, #15
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a90      	ldr	r2, [pc, #576]	@ (8008000 <UART_SetConfig+0x2e0>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d125      	bne.n	8007e10 <UART_SetConfig+0xf0>
 8007dc4:	4b8f      	ldr	r3, [pc, #572]	@ (8008004 <UART_SetConfig+0x2e4>)
 8007dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d81a      	bhi.n	8007e08 <UART_SetConfig+0xe8>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <UART_SetConfig+0xb8>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007de9 	.word	0x08007de9
 8007ddc:	08007df9 	.word	0x08007df9
 8007de0:	08007df1 	.word	0x08007df1
 8007de4:	08007e01 	.word	0x08007e01
 8007de8:	2301      	movs	r3, #1
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dee:	e116      	b.n	800801e <UART_SetConfig+0x2fe>
 8007df0:	2302      	movs	r3, #2
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df6:	e112      	b.n	800801e <UART_SetConfig+0x2fe>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfe:	e10e      	b.n	800801e <UART_SetConfig+0x2fe>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e06:	e10a      	b.n	800801e <UART_SetConfig+0x2fe>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0e:	e106      	b.n	800801e <UART_SetConfig+0x2fe>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a7c      	ldr	r2, [pc, #496]	@ (8008008 <UART_SetConfig+0x2e8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d138      	bne.n	8007e8c <UART_SetConfig+0x16c>
 8007e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8008004 <UART_SetConfig+0x2e4>)
 8007e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e20:	f003 030c 	and.w	r3, r3, #12
 8007e24:	2b0c      	cmp	r3, #12
 8007e26:	d82d      	bhi.n	8007e84 <UART_SetConfig+0x164>
 8007e28:	a201      	add	r2, pc, #4	@ (adr r2, 8007e30 <UART_SetConfig+0x110>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e65 	.word	0x08007e65
 8007e34:	08007e85 	.word	0x08007e85
 8007e38:	08007e85 	.word	0x08007e85
 8007e3c:	08007e85 	.word	0x08007e85
 8007e40:	08007e75 	.word	0x08007e75
 8007e44:	08007e85 	.word	0x08007e85
 8007e48:	08007e85 	.word	0x08007e85
 8007e4c:	08007e85 	.word	0x08007e85
 8007e50:	08007e6d 	.word	0x08007e6d
 8007e54:	08007e85 	.word	0x08007e85
 8007e58:	08007e85 	.word	0x08007e85
 8007e5c:	08007e85 	.word	0x08007e85
 8007e60:	08007e7d 	.word	0x08007e7d
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6a:	e0d8      	b.n	800801e <UART_SetConfig+0x2fe>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e72:	e0d4      	b.n	800801e <UART_SetConfig+0x2fe>
 8007e74:	2304      	movs	r3, #4
 8007e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e7a:	e0d0      	b.n	800801e <UART_SetConfig+0x2fe>
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e82:	e0cc      	b.n	800801e <UART_SetConfig+0x2fe>
 8007e84:	2310      	movs	r3, #16
 8007e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e8a:	e0c8      	b.n	800801e <UART_SetConfig+0x2fe>
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a5e      	ldr	r2, [pc, #376]	@ (800800c <UART_SetConfig+0x2ec>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d125      	bne.n	8007ee2 <UART_SetConfig+0x1c2>
 8007e96:	4b5b      	ldr	r3, [pc, #364]	@ (8008004 <UART_SetConfig+0x2e4>)
 8007e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ea0:	2b30      	cmp	r3, #48	@ 0x30
 8007ea2:	d016      	beq.n	8007ed2 <UART_SetConfig+0x1b2>
 8007ea4:	2b30      	cmp	r3, #48	@ 0x30
 8007ea6:	d818      	bhi.n	8007eda <UART_SetConfig+0x1ba>
 8007ea8:	2b20      	cmp	r3, #32
 8007eaa:	d00a      	beq.n	8007ec2 <UART_SetConfig+0x1a2>
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	d814      	bhi.n	8007eda <UART_SetConfig+0x1ba>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <UART_SetConfig+0x19a>
 8007eb4:	2b10      	cmp	r3, #16
 8007eb6:	d008      	beq.n	8007eca <UART_SetConfig+0x1aa>
 8007eb8:	e00f      	b.n	8007eda <UART_SetConfig+0x1ba>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec0:	e0ad      	b.n	800801e <UART_SetConfig+0x2fe>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec8:	e0a9      	b.n	800801e <UART_SetConfig+0x2fe>
 8007eca:	2304      	movs	r3, #4
 8007ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed0:	e0a5      	b.n	800801e <UART_SetConfig+0x2fe>
 8007ed2:	2308      	movs	r3, #8
 8007ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed8:	e0a1      	b.n	800801e <UART_SetConfig+0x2fe>
 8007eda:	2310      	movs	r3, #16
 8007edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee0:	e09d      	b.n	800801e <UART_SetConfig+0x2fe>
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a4a      	ldr	r2, [pc, #296]	@ (8008010 <UART_SetConfig+0x2f0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d125      	bne.n	8007f38 <UART_SetConfig+0x218>
 8007eec:	4b45      	ldr	r3, [pc, #276]	@ (8008004 <UART_SetConfig+0x2e4>)
 8007eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ef2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ef8:	d016      	beq.n	8007f28 <UART_SetConfig+0x208>
 8007efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007efc:	d818      	bhi.n	8007f30 <UART_SetConfig+0x210>
 8007efe:	2b80      	cmp	r3, #128	@ 0x80
 8007f00:	d00a      	beq.n	8007f18 <UART_SetConfig+0x1f8>
 8007f02:	2b80      	cmp	r3, #128	@ 0x80
 8007f04:	d814      	bhi.n	8007f30 <UART_SetConfig+0x210>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <UART_SetConfig+0x1f0>
 8007f0a:	2b40      	cmp	r3, #64	@ 0x40
 8007f0c:	d008      	beq.n	8007f20 <UART_SetConfig+0x200>
 8007f0e:	e00f      	b.n	8007f30 <UART_SetConfig+0x210>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f16:	e082      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1e:	e07e      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f20:	2304      	movs	r3, #4
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f26:	e07a      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f28:	2308      	movs	r3, #8
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f2e:	e076      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f30:	2310      	movs	r3, #16
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f36:	e072      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a35      	ldr	r2, [pc, #212]	@ (8008014 <UART_SetConfig+0x2f4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d12a      	bne.n	8007f98 <UART_SetConfig+0x278>
 8007f42:	4b30      	ldr	r3, [pc, #192]	@ (8008004 <UART_SetConfig+0x2e4>)
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f50:	d01a      	beq.n	8007f88 <UART_SetConfig+0x268>
 8007f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f56:	d81b      	bhi.n	8007f90 <UART_SetConfig+0x270>
 8007f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f5c:	d00c      	beq.n	8007f78 <UART_SetConfig+0x258>
 8007f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f62:	d815      	bhi.n	8007f90 <UART_SetConfig+0x270>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <UART_SetConfig+0x250>
 8007f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f6c:	d008      	beq.n	8007f80 <UART_SetConfig+0x260>
 8007f6e:	e00f      	b.n	8007f90 <UART_SetConfig+0x270>
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e052      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	e04e      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f80:	2304      	movs	r3, #4
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f86:	e04a      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e046      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f96:	e042      	b.n	800801e <UART_SetConfig+0x2fe>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a17      	ldr	r2, [pc, #92]	@ (8007ffc <UART_SetConfig+0x2dc>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d13a      	bne.n	8008018 <UART_SetConfig+0x2f8>
 8007fa2:	4b18      	ldr	r3, [pc, #96]	@ (8008004 <UART_SetConfig+0x2e4>)
 8007fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fb0:	d01a      	beq.n	8007fe8 <UART_SetConfig+0x2c8>
 8007fb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fb6:	d81b      	bhi.n	8007ff0 <UART_SetConfig+0x2d0>
 8007fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fbc:	d00c      	beq.n	8007fd8 <UART_SetConfig+0x2b8>
 8007fbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fc2:	d815      	bhi.n	8007ff0 <UART_SetConfig+0x2d0>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <UART_SetConfig+0x2b0>
 8007fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fcc:	d008      	beq.n	8007fe0 <UART_SetConfig+0x2c0>
 8007fce:	e00f      	b.n	8007ff0 <UART_SetConfig+0x2d0>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd6:	e022      	b.n	800801e <UART_SetConfig+0x2fe>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fde:	e01e      	b.n	800801e <UART_SetConfig+0x2fe>
 8007fe0:	2304      	movs	r3, #4
 8007fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe6:	e01a      	b.n	800801e <UART_SetConfig+0x2fe>
 8007fe8:	2308      	movs	r3, #8
 8007fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fee:	e016      	b.n	800801e <UART_SetConfig+0x2fe>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff6:	e012      	b.n	800801e <UART_SetConfig+0x2fe>
 8007ff8:	cfff69f3 	.word	0xcfff69f3
 8007ffc:	40008000 	.word	0x40008000
 8008000:	40013800 	.word	0x40013800
 8008004:	40021000 	.word	0x40021000
 8008008:	40004400 	.word	0x40004400
 800800c:	40004800 	.word	0x40004800
 8008010:	40004c00 	.word	0x40004c00
 8008014:	40005000 	.word	0x40005000
 8008018:	2310      	movs	r3, #16
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4aae      	ldr	r2, [pc, #696]	@ (80082dc <UART_SetConfig+0x5bc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	f040 8097 	bne.w	8008158 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800802a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800802e:	2b08      	cmp	r3, #8
 8008030:	d823      	bhi.n	800807a <UART_SetConfig+0x35a>
 8008032:	a201      	add	r2, pc, #4	@ (adr r2, 8008038 <UART_SetConfig+0x318>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	0800805d 	.word	0x0800805d
 800803c:	0800807b 	.word	0x0800807b
 8008040:	08008065 	.word	0x08008065
 8008044:	0800807b 	.word	0x0800807b
 8008048:	0800806b 	.word	0x0800806b
 800804c:	0800807b 	.word	0x0800807b
 8008050:	0800807b 	.word	0x0800807b
 8008054:	0800807b 	.word	0x0800807b
 8008058:	08008073 	.word	0x08008073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800805c:	f7fd fa2c 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8008060:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008062:	e010      	b.n	8008086 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008064:	4b9e      	ldr	r3, [pc, #632]	@ (80082e0 <UART_SetConfig+0x5c0>)
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008068:	e00d      	b.n	8008086 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800806a:	f7fd f9b7 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 800806e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008070:	e009      	b.n	8008086 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008076:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008078:	e005      	b.n	8008086 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008084:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8130 	beq.w	80082ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008092:	4a94      	ldr	r2, [pc, #592]	@ (80082e4 <UART_SetConfig+0x5c4>)
 8008094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008098:	461a      	mov	r2, r3
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	fbb3 f3f2 	udiv	r3, r3, r2
 80080a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	4613      	mov	r3, r2
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	4413      	add	r3, r2
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d305      	bcc.n	80080be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d903      	bls.n	80080c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080c4:	e113      	b.n	80082ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	2200      	movs	r2, #0
 80080ca:	60bb      	str	r3, [r7, #8]
 80080cc:	60fa      	str	r2, [r7, #12]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d2:	4a84      	ldr	r2, [pc, #528]	@ (80082e4 <UART_SetConfig+0x5c4>)
 80080d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2200      	movs	r2, #0
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080e8:	f7f8 fc54 	bl	8000994 <__aeabi_uldivmod>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4610      	mov	r0, r2
 80080f2:	4619      	mov	r1, r3
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	f04f 0300 	mov.w	r3, #0
 80080fc:	020b      	lsls	r3, r1, #8
 80080fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008102:	0202      	lsls	r2, r0, #8
 8008104:	6979      	ldr	r1, [r7, #20]
 8008106:	6849      	ldr	r1, [r1, #4]
 8008108:	0849      	lsrs	r1, r1, #1
 800810a:	2000      	movs	r0, #0
 800810c:	460c      	mov	r4, r1
 800810e:	4605      	mov	r5, r0
 8008110:	eb12 0804 	adds.w	r8, r2, r4
 8008114:	eb43 0905 	adc.w	r9, r3, r5
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	469a      	mov	sl, r3
 8008120:	4693      	mov	fp, r2
 8008122:	4652      	mov	r2, sl
 8008124:	465b      	mov	r3, fp
 8008126:	4640      	mov	r0, r8
 8008128:	4649      	mov	r1, r9
 800812a:	f7f8 fc33 	bl	8000994 <__aeabi_uldivmod>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4613      	mov	r3, r2
 8008134:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800813c:	d308      	bcc.n	8008150 <UART_SetConfig+0x430>
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008144:	d204      	bcs.n	8008150 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6a3a      	ldr	r2, [r7, #32]
 800814c:	60da      	str	r2, [r3, #12]
 800814e:	e0ce      	b.n	80082ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008156:	e0ca      	b.n	80082ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008160:	d166      	bne.n	8008230 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008162:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008166:	2b08      	cmp	r3, #8
 8008168:	d827      	bhi.n	80081ba <UART_SetConfig+0x49a>
 800816a:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <UART_SetConfig+0x450>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	08008195 	.word	0x08008195
 8008174:	0800819d 	.word	0x0800819d
 8008178:	080081a5 	.word	0x080081a5
 800817c:	080081bb 	.word	0x080081bb
 8008180:	080081ab 	.word	0x080081ab
 8008184:	080081bb 	.word	0x080081bb
 8008188:	080081bb 	.word	0x080081bb
 800818c:	080081bb 	.word	0x080081bb
 8008190:	080081b3 	.word	0x080081b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008194:	f7fd f990 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8008198:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800819a:	e014      	b.n	80081c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800819c:	f7fd f9a2 	bl	80054e4 <HAL_RCC_GetPCLK2Freq>
 80081a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081a2:	e010      	b.n	80081c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a4:	4b4e      	ldr	r3, [pc, #312]	@ (80082e0 <UART_SetConfig+0x5c0>)
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081a8:	e00d      	b.n	80081c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081aa:	f7fd f917 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 80081ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081b0:	e009      	b.n	80081c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081b8:	e005      	b.n	80081c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 8090 	beq.w	80082ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d2:	4a44      	ldr	r2, [pc, #272]	@ (80082e4 <UART_SetConfig+0x5c4>)
 80081d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d8:	461a      	mov	r2, r3
 80081da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80081e0:	005a      	lsls	r2, r3, #1
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	441a      	add	r2, r3
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	2b0f      	cmp	r3, #15
 80081f8:	d916      	bls.n	8008228 <UART_SetConfig+0x508>
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008200:	d212      	bcs.n	8008228 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	b29b      	uxth	r3, r3
 8008206:	f023 030f 	bic.w	r3, r3, #15
 800820a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	b29a      	uxth	r2, r3
 8008218:	8bfb      	ldrh	r3, [r7, #30]
 800821a:	4313      	orrs	r3, r2
 800821c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	8bfa      	ldrh	r2, [r7, #30]
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	e062      	b.n	80082ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800822e:	e05e      	b.n	80082ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008230:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008234:	2b08      	cmp	r3, #8
 8008236:	d828      	bhi.n	800828a <UART_SetConfig+0x56a>
 8008238:	a201      	add	r2, pc, #4	@ (adr r2, 8008240 <UART_SetConfig+0x520>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008265 	.word	0x08008265
 8008244:	0800826d 	.word	0x0800826d
 8008248:	08008275 	.word	0x08008275
 800824c:	0800828b 	.word	0x0800828b
 8008250:	0800827b 	.word	0x0800827b
 8008254:	0800828b 	.word	0x0800828b
 8008258:	0800828b 	.word	0x0800828b
 800825c:	0800828b 	.word	0x0800828b
 8008260:	08008283 	.word	0x08008283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008264:	f7fd f928 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8008268:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800826a:	e014      	b.n	8008296 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800826c:	f7fd f93a 	bl	80054e4 <HAL_RCC_GetPCLK2Freq>
 8008270:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008272:	e010      	b.n	8008296 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008274:	4b1a      	ldr	r3, [pc, #104]	@ (80082e0 <UART_SetConfig+0x5c0>)
 8008276:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008278:	e00d      	b.n	8008296 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800827a:	f7fd f8af 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 800827e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008280:	e009      	b.n	8008296 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008288:	e005      	b.n	8008296 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008294:	bf00      	nop
    }

    if (pclk != 0U)
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	d028      	beq.n	80082ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a0:	4a10      	ldr	r2, [pc, #64]	@ (80082e4 <UART_SetConfig+0x5c4>)
 80082a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a6:	461a      	mov	r2, r3
 80082a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	441a      	add	r2, r3
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80082be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	2b0f      	cmp	r3, #15
 80082c4:	d910      	bls.n	80082e8 <UART_SetConfig+0x5c8>
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082cc:	d20c      	bcs.n	80082e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60da      	str	r2, [r3, #12]
 80082d8:	e009      	b.n	80082ee <UART_SetConfig+0x5ce>
 80082da:	bf00      	nop
 80082dc:	40008000 	.word	0x40008000
 80082e0:	00f42400 	.word	0x00f42400
 80082e4:	08009724 	.word	0x08009724
      }
      else
      {
        ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2200      	movs	r2, #0
 8008302:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2200      	movs	r2, #0
 8008308:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800830a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800830e:	4618      	mov	r0, r3
 8008310:	3730      	adds	r7, #48	@ 0x30
 8008312:	46bd      	mov	sp, r7
 8008314:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008324:	f003 0308 	and.w	r3, r3, #8
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00a      	beq.n	8008342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838a:	f003 0304 	and.w	r3, r3, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00a      	beq.n	80083ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01a      	beq.n	800842e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008416:	d10a      	bne.n	800842e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	605a      	str	r2, [r3, #4]
  }
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b098      	sub	sp, #96	@ 0x60
 8008460:	af02      	add	r7, sp, #8
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800846c:	f7fa f824 	bl	80024b8 <HAL_GetTick>
 8008470:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b08      	cmp	r3, #8
 800847e:	d12f      	bne.n	80084e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008480:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008488:	2200      	movs	r2, #0
 800848a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f88e 	bl	80085b0 <UART_WaitOnFlagUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d022      	beq.n	80084e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e6      	bne.n	800849a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e063      	b.n	80085a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0304 	and.w	r3, r3, #4
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d149      	bne.n	8008582 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084f6:	2200      	movs	r2, #0
 80084f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f857 	bl	80085b0 <UART_WaitOnFlagUntilTimeout>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d03c      	beq.n	8008582 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	623b      	str	r3, [r7, #32]
   return(result);
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800851c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008526:	633b      	str	r3, [r7, #48]	@ 0x30
 8008528:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800852c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e6      	bne.n	8008508 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3308      	adds	r3, #8
 8008540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	60fb      	str	r3, [r7, #12]
   return(result);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f023 0301 	bic.w	r3, r3, #1
 8008550:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3308      	adds	r3, #8
 8008558:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800855a:	61fa      	str	r2, [r7, #28]
 800855c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	69b9      	ldr	r1, [r7, #24]
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	617b      	str	r3, [r7, #20]
   return(result);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e5      	bne.n	800853a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e012      	b.n	80085a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3758      	adds	r7, #88	@ 0x58
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	603b      	str	r3, [r7, #0]
 80085bc:	4613      	mov	r3, r2
 80085be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085c0:	e04f      	b.n	8008662 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c8:	d04b      	beq.n	8008662 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ca:	f7f9 ff75 	bl	80024b8 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d302      	bcc.n	80085e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e04e      	b.n	8008682 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d037      	beq.n	8008662 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b80      	cmp	r3, #128	@ 0x80
 80085f6:	d034      	beq.n	8008662 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2b40      	cmp	r3, #64	@ 0x40
 80085fc:	d031      	beq.n	8008662 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b08      	cmp	r3, #8
 800860a:	d110      	bne.n	800862e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2208      	movs	r2, #8
 8008612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f95b 	bl	80088d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2208      	movs	r2, #8
 800861e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e029      	b.n	8008682 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800863c:	d111      	bne.n	8008662 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f941 	bl	80088d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e00f      	b.n	8008682 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	4013      	ands	r3, r2
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	429a      	cmp	r2, r3
 8008670:	bf0c      	ite	eq
 8008672:	2301      	moveq	r3, #1
 8008674:	2300      	movne	r3, #0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	461a      	mov	r2, r3
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	429a      	cmp	r2, r3
 800867e:	d0a0      	beq.n	80085c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800868c:	b480      	push	{r7}
 800868e:	b0a3      	sub	sp, #140	@ 0x8c
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	88fa      	ldrh	r2, [r7, #6]
 80086ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086be:	d10e      	bne.n	80086de <UART_Start_Receive_IT+0x52>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <UART_Start_Receive_IT+0x48>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80086ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086d2:	e02d      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	22ff      	movs	r2, #255	@ 0xff
 80086d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086dc:	e028      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10d      	bne.n	8008702 <UART_Start_Receive_IT+0x76>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <UART_Start_Receive_IT+0x6c>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	22ff      	movs	r2, #255	@ 0xff
 80086f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80086f6:	e01b      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	227f      	movs	r2, #127	@ 0x7f
 80086fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008700:	e016      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800870a:	d10d      	bne.n	8008728 <UART_Start_Receive_IT+0x9c>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d104      	bne.n	800871e <UART_Start_Receive_IT+0x92>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	227f      	movs	r2, #127	@ 0x7f
 8008718:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800871c:	e008      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	223f      	movs	r2, #63	@ 0x3f
 8008722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008726:	e003      	b.n	8008730 <UART_Start_Receive_IT+0xa4>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2222      	movs	r2, #34	@ 0x22
 800873c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008752:	f043 0301 	orr.w	r3, r3, #1
 8008756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008764:	673a      	str	r2, [r7, #112]	@ 0x70
 8008766:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800876a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e3      	bne.n	8008740 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800877c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008780:	d14f      	bne.n	8008822 <UART_Start_Receive_IT+0x196>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008788:	88fa      	ldrh	r2, [r7, #6]
 800878a:	429a      	cmp	r2, r3
 800878c:	d349      	bcc.n	8008822 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008796:	d107      	bne.n	80087a8 <UART_Start_Receive_IT+0x11c>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d103      	bne.n	80087a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4a47      	ldr	r2, [pc, #284]	@ (80088c0 <UART_Start_Receive_IT+0x234>)
 80087a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80087a6:	e002      	b.n	80087ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4a46      	ldr	r2, [pc, #280]	@ (80088c4 <UART_Start_Receive_IT+0x238>)
 80087ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01a      	beq.n	80087ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80087d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087da:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80087e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e4      	bne.n	80087b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3308      	adds	r3, #8
 80087f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087f6:	e853 3f00 	ldrex	r3, [r3]
 80087fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008802:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3308      	adds	r3, #8
 800880a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800880c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800880e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008810:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008812:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008814:	e841 2300 	strex	r3, r2, [r1]
 8008818:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800881a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e5      	bne.n	80087ec <UART_Start_Receive_IT+0x160>
 8008820:	e046      	b.n	80088b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800882a:	d107      	bne.n	800883c <UART_Start_Receive_IT+0x1b0>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d103      	bne.n	800883c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4a24      	ldr	r2, [pc, #144]	@ (80088c8 <UART_Start_Receive_IT+0x23c>)
 8008838:	675a      	str	r2, [r3, #116]	@ 0x74
 800883a:	e002      	b.n	8008842 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4a23      	ldr	r2, [pc, #140]	@ (80088cc <UART_Start_Receive_IT+0x240>)
 8008840:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d019      	beq.n	800887e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800885e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34
 800886a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800886e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008870:	e841 2300 	strex	r3, r2, [r1]
 8008874:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e6      	bne.n	800884a <UART_Start_Receive_IT+0x1be>
 800887c:	e018      	b.n	80088b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	613b      	str	r3, [r7, #16]
   return(result);
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f043 0320 	orr.w	r3, r3, #32
 8008892:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800889c:	623b      	str	r3, [r7, #32]
 800889e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	69f9      	ldr	r1, [r7, #28]
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e6      	bne.n	800887e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	378c      	adds	r7, #140	@ 0x8c
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	080090f1 	.word	0x080090f1
 80088c4:	08008d91 	.word	0x08008d91
 80088c8:	08008bd9 	.word	0x08008bd9
 80088cc:	08008a21 	.word	0x08008a21

080088d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b095      	sub	sp, #84	@ 0x54
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80088f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e6      	bne.n	80088d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3308      	adds	r3, #8
 8008910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	61fb      	str	r3, [r7, #28]
   return(result);
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3308      	adds	r3, #8
 800892c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800892e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008930:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e3      	bne.n	800890a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008946:	2b01      	cmp	r3, #1
 8008948:	d118      	bne.n	800897c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	60bb      	str	r3, [r7, #8]
   return(result);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f023 0310 	bic.w	r3, r3, #16
 800895e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	613b      	str	r3, [r7, #16]
   return(result);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008990:	bf00      	nop
 8008992:	3754      	adds	r7, #84	@ 0x54
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f7ff f99a 	bl	8007cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089e4:	61fb      	str	r3, [r7, #28]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	6979      	ldr	r1, [r7, #20]
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	613b      	str	r3, [r7, #16]
   return(result);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e6      	bne.n	80089d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff f965 	bl	8007ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a16:	bf00      	nop
 8008a18:	3720      	adds	r7, #32
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b09c      	sub	sp, #112	@ 0x70
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a38:	2b22      	cmp	r3, #34	@ 0x22
 8008a3a:	f040 80be 	bne.w	8008bba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a4c:	b2d9      	uxtb	r1, r3
 8008a4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a58:	400a      	ands	r2, r1
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f040 80a1 	bne.w	8008bca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008aa8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008aac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e6      	bne.n	8008a88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008acc:	f023 0301 	bic.w	r3, r3, #1
 8008ad0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008ada:	647a      	str	r2, [r7, #68]	@ 0x44
 8008adc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e5      	bne.n	8008aba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a33      	ldr	r2, [pc, #204]	@ (8008bd4 <UART_RxISR_8BIT+0x1b4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d01f      	beq.n	8008b4c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d018      	beq.n	8008b4c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	e853 3f00 	ldrex	r3, [r3]
 8008b26:	623b      	str	r3, [r7, #32]
   return(result);
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e6      	bne.n	8008b1a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d12e      	bne.n	8008bb2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0310 	bic.w	r3, r3, #16
 8008b6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	69b9      	ldr	r1, [r7, #24]
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	617b      	str	r3, [r7, #20]
   return(result);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e6      	bne.n	8008b5a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	f003 0310 	and.w	r3, r3, #16
 8008b96:	2b10      	cmp	r3, #16
 8008b98:	d103      	bne.n	8008ba2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2210      	movs	r2, #16
 8008ba0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff f8ac 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bb0:	e00b      	b.n	8008bca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7f9 f80c 	bl	8001bd0 <HAL_UART_RxCpltCallback>
}
 8008bb8:	e007      	b.n	8008bca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	699a      	ldr	r2, [r3, #24]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f042 0208 	orr.w	r2, r2, #8
 8008bc8:	619a      	str	r2, [r3, #24]
}
 8008bca:	bf00      	nop
 8008bcc:	3770      	adds	r7, #112	@ 0x70
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40008000 	.word	0x40008000

08008bd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b09c      	sub	sp, #112	@ 0x70
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008be6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bf0:	2b22      	cmp	r3, #34	@ 0x22
 8008bf2:	f040 80be 	bne.w	8008d72 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c04:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c06:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008c0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c0e:	4013      	ands	r3, r2
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c1a:	1c9a      	adds	r2, r3, #2
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 80a1 	bne.w	8008d82 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c54:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c60:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e6      	bne.n	8008c40 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3308      	adds	r3, #8
 8008c78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	f023 0301 	bic.w	r3, r3, #1
 8008c88:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3308      	adds	r3, #8
 8008c90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c92:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e5      	bne.n	8008c72 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a33      	ldr	r2, [pc, #204]	@ (8008d8c <UART_RxISR_16BIT+0x1b4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d01f      	beq.n	8008d04 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d018      	beq.n	8008d04 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ce6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cf2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e6      	bne.n	8008cd2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d12e      	bne.n	8008d6a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f023 0310 	bic.w	r3, r3, #16
 8008d26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	6979      	ldr	r1, [r7, #20]
 8008d36:	69ba      	ldr	r2, [r7, #24]
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e6      	bne.n	8008d12 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	f003 0310 	and.w	r3, r3, #16
 8008d4e:	2b10      	cmp	r3, #16
 8008d50:	d103      	bne.n	8008d5a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2210      	movs	r2, #16
 8008d58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7fe ffd0 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d68:	e00b      	b.n	8008d82 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7f8 ff30 	bl	8001bd0 <HAL_UART_RxCpltCallback>
}
 8008d70:	e007      	b.n	8008d82 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699a      	ldr	r2, [r3, #24]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0208 	orr.w	r2, r2, #8
 8008d80:	619a      	str	r2, [r3, #24]
}
 8008d82:	bf00      	nop
 8008d84:	3770      	adds	r7, #112	@ 0x70
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40008000 	.word	0x40008000

08008d90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b0ac      	sub	sp, #176	@ 0xb0
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dc6:	2b22      	cmp	r3, #34	@ 0x22
 8008dc8:	f040 8182 	bne.w	80090d0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008dd2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dd6:	e125      	b.n	8009024 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dde:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008de2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008de6:	b2d9      	uxtb	r1, r3
 8008de8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df2:	400a      	ands	r2, r1
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69db      	ldr	r3, [r3, #28]
 8008e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d053      	beq.n	8008ed2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d011      	beq.n	8008e5a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2201      	movs	r2, #1
 8008e48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e50:	f043 0201 	orr.w	r2, r3, #1
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d011      	beq.n	8008e8a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00b      	beq.n	8008e8a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2202      	movs	r2, #2
 8008e78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e80:	f043 0204 	orr.w	r2, r3, #4
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d011      	beq.n	8008eba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00b      	beq.n	8008eba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb0:	f043 0202 	orr.w	r2, r3, #2
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d006      	beq.n	8008ed2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7fe ff15 	bl	8007cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f040 80a2 	bne.w	8009024 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
 8008eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f04:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008f08:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e4      	bne.n	8008ee0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f3e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008f40:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008f44:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e1      	bne.n	8008f16 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80090e8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d021      	beq.n	8008fb4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d01a      	beq.n	8008fb4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f86:	e853 3f00 	ldrex	r3, [r3]
 8008f8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fa0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fa2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fa6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e4      	bne.n	8008f7e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d130      	bne.n	800901e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fca:	e853 3f00 	ldrex	r3, [r3]
 8008fce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	f023 0310 	bic.w	r3, r3, #16
 8008fd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fe6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e4      	bne.n	8008fc2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f003 0310 	and.w	r3, r3, #16
 8009002:	2b10      	cmp	r3, #16
 8009004:	d103      	bne.n	800900e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2210      	movs	r2, #16
 800900c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fe fe76 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
 800901c:	e002      	b.n	8009024 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7f8 fdd6 	bl	8001bd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009024:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009028:	2b00      	cmp	r3, #0
 800902a:	d006      	beq.n	800903a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800902c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	f47f aecf 	bne.w	8008dd8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009040:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009044:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009048:	2b00      	cmp	r3, #0
 800904a:	d049      	beq.n	80090e0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009052:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009056:	429a      	cmp	r2, r3
 8009058:	d242      	bcs.n	80090e0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	61fb      	str	r3, [r7, #28]
   return(result);
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3308      	adds	r3, #8
 800907a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800907e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009080:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009082:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1e3      	bne.n	800905a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a15      	ldr	r2, [pc, #84]	@ (80090ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009096:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f043 0320 	orr.w	r3, r3, #32
 80090ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090ba:	61bb      	str	r3, [r7, #24]
 80090bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	6979      	ldr	r1, [r7, #20]
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	613b      	str	r3, [r7, #16]
   return(result);
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e4      	bne.n	8009098 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090ce:	e007      	b.n	80090e0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	699a      	ldr	r2, [r3, #24]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0208 	orr.w	r2, r2, #8
 80090de:	619a      	str	r2, [r3, #24]
}
 80090e0:	bf00      	nop
 80090e2:	37b0      	adds	r7, #176	@ 0xb0
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	40008000 	.word	0x40008000
 80090ec:	08008a21 	.word	0x08008a21

080090f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b0ae      	sub	sp, #184	@ 0xb8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009126:	2b22      	cmp	r3, #34	@ 0x22
 8009128:	f040 8186 	bne.w	8009438 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009132:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009136:	e129      	b.n	800938c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800914a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800914e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009152:	4013      	ands	r3, r2
 8009154:	b29a      	uxth	r2, r3
 8009156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800915a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009160:	1c9a      	adds	r2, r3, #2
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b00      	cmp	r3, #0
 800918c:	d053      	beq.n	8009236 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800918e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d011      	beq.n	80091be <UART_RxISR_16BIT_FIFOEN+0xce>
 800919a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800919e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00b      	beq.n	80091be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2201      	movs	r2, #1
 80091ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b4:	f043 0201 	orr.w	r2, r3, #1
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d011      	beq.n	80091ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 80091ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2202      	movs	r2, #2
 80091dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e4:	f043 0204 	orr.w	r2, r3, #4
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091f2:	f003 0304 	and.w	r3, r3, #4
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d011      	beq.n	800921e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80091fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00b      	beq.n	800921e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2204      	movs	r2, #4
 800920c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009214:	f043 0202 	orr.w	r2, r3, #2
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009224:	2b00      	cmp	r3, #0
 8009226:	d006      	beq.n	8009236 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7fe fd63 	bl	8007cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800923c:	b29b      	uxth	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	f040 80a4 	bne.w	800938c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800924c:	e853 3f00 	ldrex	r3, [r3]
 8009250:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009252:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009258:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009266:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800926a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800926e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009272:	e841 2300 	strex	r3, r2, [r1]
 8009276:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1e2      	bne.n	8009244 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800928e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3308      	adds	r3, #8
 80092a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80092a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1e1      	bne.n	800927e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2220      	movs	r2, #32
 80092be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a5f      	ldr	r2, [pc, #380]	@ (8009450 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d021      	beq.n	800931c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d01a      	beq.n	800931c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80092fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800930a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800930e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e4      	bne.n	80092e6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009320:	2b01      	cmp	r3, #1
 8009322:	d130      	bne.n	8009386 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933a:	f023 0310 	bic.w	r3, r3, #16
 800933e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800934c:	647b      	str	r3, [r7, #68]	@ 0x44
 800934e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800935a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e4      	bne.n	800932a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	f003 0310 	and.w	r3, r3, #16
 800936a:	2b10      	cmp	r3, #16
 800936c:	d103      	bne.n	8009376 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2210      	movs	r2, #16
 8009374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7fe fcc2 	bl	8007d08 <HAL_UARTEx_RxEventCallback>
 8009384:	e002      	b.n	800938c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7f8 fc22 	bl	8001bd0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800938c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009390:	2b00      	cmp	r3, #0
 8009392:	d006      	beq.n	80093a2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	f47f aecb 	bne.w	8009138 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093a8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093ac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d049      	beq.n	8009448 <UART_RxISR_16BIT_FIFOEN+0x358>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093ba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80093be:	429a      	cmp	r2, r3
 80093c0:	d242      	bcs.n	8009448 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3308      	adds	r3, #8
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	623b      	str	r3, [r7, #32]
   return(result);
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3308      	adds	r3, #8
 80093e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80093e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80093e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ee:	e841 2300 	strex	r3, r2, [r1]
 80093f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1e3      	bne.n	80093c2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a15      	ldr	r2, [pc, #84]	@ (8009454 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80093fe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	60fb      	str	r3, [r7, #12]
   return(result);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f043 0320 	orr.w	r3, r3, #32
 8009414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	461a      	mov	r2, r3
 800941e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009422:	61fb      	str	r3, [r7, #28]
 8009424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	69b9      	ldr	r1, [r7, #24]
 8009428:	69fa      	ldr	r2, [r7, #28]
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	617b      	str	r3, [r7, #20]
   return(result);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e4      	bne.n	8009400 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009436:	e007      	b.n	8009448 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699a      	ldr	r2, [r3, #24]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f042 0208 	orr.w	r2, r2, #8
 8009446:	619a      	str	r2, [r3, #24]
}
 8009448:	bf00      	nop
 800944a:	37b8      	adds	r7, #184	@ 0xb8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	40008000 	.word	0x40008000
 8009454:	08008bd9 	.word	0x08008bd9

08009458 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_UARTEx_DisableFifoMode+0x16>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e027      	b.n	80094fa <HAL_UARTEx_DisableFifoMode+0x66>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2224      	movs	r2, #36	@ 0x24
 80094b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 0201 	bic.w	r2, r2, #1
 80094d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009516:	2b01      	cmp	r3, #1
 8009518:	d101      	bne.n	800951e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800951a:	2302      	movs	r3, #2
 800951c:	e02d      	b.n	800957a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2224      	movs	r2, #36	@ 0x24
 800952a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0201 	bic.w	r2, r2, #1
 8009544:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f850 	bl	8009600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2220      	movs	r2, #32
 800956c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009596:	2302      	movs	r3, #2
 8009598:	e02d      	b.n	80095f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2224      	movs	r2, #36	@ 0x24
 80095a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0201 	bic.w	r2, r2, #1
 80095c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f812 	bl	8009600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2220      	movs	r2, #32
 80095e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800960c:	2b00      	cmp	r3, #0
 800960e:	d108      	bne.n	8009622 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009620:	e031      	b.n	8009686 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009622:	2308      	movs	r3, #8
 8009624:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009626:	2308      	movs	r3, #8
 8009628:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	0e5b      	lsrs	r3, r3, #25
 8009632:	b2db      	uxtb	r3, r3
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	0f5b      	lsrs	r3, r3, #29
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	7b3a      	ldrb	r2, [r7, #12]
 800964e:	4911      	ldr	r1, [pc, #68]	@ (8009694 <UARTEx_SetNbDataToProcess+0x94>)
 8009650:	5c8a      	ldrb	r2, [r1, r2]
 8009652:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009656:	7b3a      	ldrb	r2, [r7, #12]
 8009658:	490f      	ldr	r1, [pc, #60]	@ (8009698 <UARTEx_SetNbDataToProcess+0x98>)
 800965a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800965c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009660:	b29a      	uxth	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	7b7a      	ldrb	r2, [r7, #13]
 800966c:	4909      	ldr	r1, [pc, #36]	@ (8009694 <UARTEx_SetNbDataToProcess+0x94>)
 800966e:	5c8a      	ldrb	r2, [r1, r2]
 8009670:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009674:	7b7a      	ldrb	r2, [r7, #13]
 8009676:	4908      	ldr	r1, [pc, #32]	@ (8009698 <UARTEx_SetNbDataToProcess+0x98>)
 8009678:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800967a:	fb93 f3f2 	sdiv	r3, r3, r2
 800967e:	b29a      	uxth	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	0800973c 	.word	0x0800973c
 8009698:	08009744 	.word	0x08009744

0800969c <memset>:
 800969c:	4402      	add	r2, r0
 800969e:	4603      	mov	r3, r0
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d100      	bne.n	80096a6 <memset+0xa>
 80096a4:	4770      	bx	lr
 80096a6:	f803 1b01 	strb.w	r1, [r3], #1
 80096aa:	e7f9      	b.n	80096a0 <memset+0x4>

080096ac <__libc_init_array>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	4d0d      	ldr	r5, [pc, #52]	@ (80096e4 <__libc_init_array+0x38>)
 80096b0:	4c0d      	ldr	r4, [pc, #52]	@ (80096e8 <__libc_init_array+0x3c>)
 80096b2:	1b64      	subs	r4, r4, r5
 80096b4:	10a4      	asrs	r4, r4, #2
 80096b6:	2600      	movs	r6, #0
 80096b8:	42a6      	cmp	r6, r4
 80096ba:	d109      	bne.n	80096d0 <__libc_init_array+0x24>
 80096bc:	4d0b      	ldr	r5, [pc, #44]	@ (80096ec <__libc_init_array+0x40>)
 80096be:	4c0c      	ldr	r4, [pc, #48]	@ (80096f0 <__libc_init_array+0x44>)
 80096c0:	f000 f818 	bl	80096f4 <_init>
 80096c4:	1b64      	subs	r4, r4, r5
 80096c6:	10a4      	asrs	r4, r4, #2
 80096c8:	2600      	movs	r6, #0
 80096ca:	42a6      	cmp	r6, r4
 80096cc:	d105      	bne.n	80096da <__libc_init_array+0x2e>
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
 80096d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d4:	4798      	blx	r3
 80096d6:	3601      	adds	r6, #1
 80096d8:	e7ee      	b.n	80096b8 <__libc_init_array+0xc>
 80096da:	f855 3b04 	ldr.w	r3, [r5], #4
 80096de:	4798      	blx	r3
 80096e0:	3601      	adds	r6, #1
 80096e2:	e7f2      	b.n	80096ca <__libc_init_array+0x1e>
 80096e4:	08009754 	.word	0x08009754
 80096e8:	08009754 	.word	0x08009754
 80096ec:	08009754 	.word	0x08009754
 80096f0:	08009758 	.word	0x08009758

080096f4 <_init>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr

08009700 <_fini>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr
