
testnew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a178  0800a178  0000b178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b8  0800a1b8  0000c028  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b8  0800a1b8  0000b1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1c0  0800a1c0  0000c028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1c0  0800a1c0  0000b1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1c4  0800a1c4  0000b1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800a1c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000028  0800a1f0  0000c028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800a1f0  0000c5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018081  00000000  00000000  0000c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac6  00000000  00000000  000240d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00026ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001095  00000000  00000000  000280b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a5b  00000000  00000000  00029145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e8c  00000000  00000000  00050ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ed8f  00000000  00000000  00068a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001777bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d98  00000000  00000000  00177800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0017d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a160 	.word	0x0800a160

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	0800a160 	.word	0x0800a160

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e60:	f002 f86f 	bl	8002f42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e64:	f000 faee 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e68:	f000 fec8 	bl	8001bfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000e6c:	f000 fe94 	bl	8001b98 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e70:	f000 fc36 	bl	80016e0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000e74:	f000 fb32 	bl	80014dc <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e78:	f000 fc7c 	bl	8001774 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e7c:	f000 fcce 	bl	800181c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e80:	f000 fd1a 	bl	80018b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e84:	f000 fd6e 	bl	8001964 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e88:	f000 fe32 	bl	8001af0 <MX_TIM8_Init>
  MX_TIM5_Init();
 8000e8c:	f000 fde2 	bl	8001a54 <MX_TIM5_Init>
  MX_ADC3_Init();
 8000e90:	f000 fb9e 	bl	80015d0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000e94:	4836      	ldr	r0, [pc, #216]	@ (8000f70 <main+0x118>)
 8000e96:	f005 fbeb 	bl	8006670 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4834      	ldr	r0, [pc, #208]	@ (8000f70 <main+0x118>)
 8000e9e:	f005 fd31 	bl	8006904 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000ea2:	213c      	movs	r1, #60	@ 0x3c
 8000ea4:	4833      	ldr	r0, [pc, #204]	@ (8000f74 <main+0x11c>)
 8000ea6:	f005 fee5 	bl	8006c74 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000eaa:	4833      	ldr	r0, [pc, #204]	@ (8000f78 <main+0x120>)
 8000eac:	f005 fc50 	bl	8006750 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8000eb0:	217f      	movs	r1, #127	@ 0x7f
 8000eb2:	4832      	ldr	r0, [pc, #200]	@ (8000f7c <main+0x124>)
 8000eb4:	f003 fbc4 	bl	8004640 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joyAnalogRead, 40);
 8000eb8:	2228      	movs	r2, #40	@ 0x28
 8000eba:	4931      	ldr	r1, [pc, #196]	@ (8000f80 <main+0x128>)
 8000ebc:	482f      	ldr	r0, [pc, #188]	@ (8000f7c <main+0x124>)
 8000ebe:	f002 fcb1 	bl	8003824 <HAL_ADC_Start_DMA>
  _micros = 0;
 8000ec2:	4930      	ldr	r1, [pc, #192]	@ (8000f84 <main+0x12c>)
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	e9c1 2300 	strd	r2, r3, [r1]
  UARTInterruptConfig();
 8000ed0:	f001 f88a 	bl	8001fe8 <UARTInterruptConfig>

	Velocontrol.kp = 190;
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f88 <main+0x130>)
 8000ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f8c <main+0x134>)
 8000ed8:	619a      	str	r2, [r3, #24]
	Velocontrol.ki = 0.05;
 8000eda:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <main+0x130>)
 8000edc:	4a2c      	ldr	r2, [pc, #176]	@ (8000f90 <main+0x138>)
 8000ede:	61da      	str	r2, [r3, #28]
	Velocontrol.kd = 0;
 8000ee0:	4b29      	ldr	r3, [pc, #164]	@ (8000f88 <main+0x130>)
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
	Velocontrol.T = 0.0001;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <main+0x130>)
 8000eea:	4a2a      	ldr	r2, [pc, #168]	@ (8000f94 <main+0x13c>)
 8000eec:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol.kp = 1.2;//2.015
 8000eee:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <main+0x140>)
 8000ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f9c <main+0x144>)
 8000ef2:	619a      	str	r2, [r3, #24]
	Poscontrol.ki = 1.890;//4.5425
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <main+0x140>)
 8000ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8000fa0 <main+0x148>)
 8000ef8:	61da      	str	r2, [r3, #28]
	Poscontrol.kd = 0;//0.0000021
 8000efa:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <main+0x140>)
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
	Poscontrol.T = 0.0001;
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <main+0x140>)
 8000f04:	4a23      	ldr	r2, [pc, #140]	@ (8000f94 <main+0x13c>)
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <main+0x11c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <main+0x14c>)
 8000f12:	601a      	str	r2, [r3, #0]
	  if(Count >= 0)
 8000f14:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <main+0x150>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db4b      	blt.n	8000fb4 <main+0x15c>
	  {
		  Pos = ((QEIReadRaw+(Count*57344))*25*3.14)/8192;
 8000f1c:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <main+0x150>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	1a9b      	subs	r3, r3, r2
 8000f26:	035b      	lsls	r3, r3, #13
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <main+0x14c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	441a      	add	r2, r3
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009a      	lsls	r2, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fabe 	bl	80004bc <__aeabi_i2d>
 8000f40:	a309      	add	r3, pc, #36	@ (adr r3, 8000f68 <main+0x110>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fb23 	bl	8000590 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <main+0x154>)
 8000f58:	f7ff fc44 	bl	80007e4 <__aeabi_ddiv>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4913      	ldr	r1, [pc, #76]	@ (8000fb0 <main+0x158>)
 8000f62:	e9c1 2300 	strd	r2, r3, [r1]
 8000f66:	e064      	b.n	8001032 <main+0x1da>
 8000f68:	51eb851f 	.word	0x51eb851f
 8000f6c:	40091eb8 	.word	0x40091eb8
 8000f70:	20000354 	.word	0x20000354
 8000f74:	20000308 	.word	0x20000308
 8000f78:	200003a0 	.word	0x200003a0
 8000f7c:	200000b0 	.word	0x200000b0
 8000f80:	200004a8 	.word	0x200004a8
 8000f84:	20000570 	.word	0x20000570
 8000f88:	2000043c 	.word	0x2000043c
 8000f8c:	433e0000 	.word	0x433e0000
 8000f90:	3d4ccccd 	.word	0x3d4ccccd
 8000f94:	38d1b717 	.word	0x38d1b717
 8000f98:	20000464 	.word	0x20000464
 8000f9c:	3f99999a 	.word	0x3f99999a
 8000fa0:	3ff1eb85 	.word	0x3ff1eb85
 8000fa4:	2000054c 	.word	0x2000054c
 8000fa8:	20000548 	.word	0x20000548
 8000fac:	40c00000 	.word	0x40c00000
 8000fb0:	20000540 	.word	0x20000540
	  }
	  else
	  {
		  Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
 8000fb4:	4bc0      	ldr	r3, [pc, #768]	@ (80012b8 <main+0x460>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fa7f 	bl	80004bc <__aeabi_i2d>
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	460d      	mov	r5, r1
 8000fc2:	4bbe      	ldr	r3, [pc, #760]	@ (80012bc <main+0x464>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa78 	bl	80004bc <__aeabi_i2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4bb8      	ldr	r3, [pc, #736]	@ (80012c0 <main+0x468>)
 8000fde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fe2:	f7ff fad5 	bl	8000590 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4620      	mov	r0, r4
 8000fec:	4629      	mov	r1, r5
 8000fee:	f7ff f917 	bl	8000220 <__aeabi_dsub>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4bb1      	ldr	r3, [pc, #708]	@ (80012c4 <main+0x46c>)
 8001000:	f7ff fac6 	bl	8000590 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80012b0 <main+0x458>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff fabd 	bl	8000590 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4ba9      	ldr	r3, [pc, #676]	@ (80012c8 <main+0x470>)
 8001024:	f7ff fbde 	bl	80007e4 <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	49a7      	ldr	r1, [pc, #668]	@ (80012cc <main+0x474>)
 800102e:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  static uint64_t timestamp =0;
	  static uint64_t timestamp3 =0;
	  int64_t currentTime = micros();
 8001032:	f000 fea3 	bl	8001d7c <micros>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  if(currentTime > timestamp)
 800103e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001042:	49a3      	ldr	r1, [pc, #652]	@ (80012d0 <main+0x478>)
 8001044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001048:	4290      	cmp	r0, r2
 800104a:	eb71 0303 	sbcs.w	r3, r1, r3
 800104e:	d20c      	bcs.n	800106a <main+0x212>
	  {
		QEIEncoderVel_Update();
 8001050:	f000 feae 	bl	8001db0 <QEIEncoderVel_Update>
		timestamp =currentTime + 100;//us
 8001054:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001058:	f112 0864 	adds.w	r8, r2, #100	@ 0x64
 800105c:	f143 0900 	adc.w	r9, r3, #0
 8001060:	4642      	mov	r2, r8
 8001062:	464b      	mov	r3, r9
 8001064:	499a      	ldr	r1, [pc, #616]	@ (80012d0 <main+0x478>)
 8001066:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  Joy_State();
 800106a:	f000 ffe3 	bl	8002034 <Joy_State>
	  if(start == 1)
 800106e:	4b99      	ldr	r3, [pc, #612]	@ (80012d4 <main+0x47c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	f040 816d 	bne.w	8001352 <main+0x4fa>
	  {
		  Trajectory();
 8001078:	f001 f99a 	bl	80023b0 <Trajectory>
		  if(Pos <500)
 800107c:	4b93      	ldr	r3, [pc, #588]	@ (80012cc <main+0x474>)
 800107e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b94      	ldr	r3, [pc, #592]	@ (80012d8 <main+0x480>)
 8001088:	f7ff fcf4 	bl	8000a74 <__aeabi_dcmplt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8154 	beq.w	800133c <main+0x4e4>
		  {
			  if(currentTime > timestamp3)
 8001094:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001098:	4990      	ldr	r1, [pc, #576]	@ (80012dc <main+0x484>)
 800109a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800109e:	4290      	cmp	r0, r2
 80010a0:	eb71 0303 	sbcs.w	r3, r1, r3
 80010a4:	f080 80fa 	bcs.w	800129c <main+0x444>
			  {
					Poscontrol.Error[NEW] = q_Pos-Pos;
 80010a8:	4b8d      	ldr	r3, [pc, #564]	@ (80012e0 <main+0x488>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa17 	bl	80004e0 <__aeabi_f2d>
 80010b2:	4b86      	ldr	r3, [pc, #536]	@ (80012cc <main+0x474>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff f8b2 	bl	8000220 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fcfe 	bl	8000ac4 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a86      	ldr	r2, [pc, #536]	@ (80012e4 <main+0x48c>)
 80010cc:	60d3      	str	r3, [r2, #12]
					Poscontrol.Output[NEW] = ((((Poscontrol.kp*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[OLD])+(Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*Poscontrol.T))/Poscontrol.T;
 80010ce:	4b85      	ldr	r3, [pc, #532]	@ (80012e4 <main+0x48c>)
 80010d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80010d4:	4b83      	ldr	r3, [pc, #524]	@ (80012e4 <main+0x48c>)
 80010d6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	4b81      	ldr	r3, [pc, #516]	@ (80012e4 <main+0x48c>)
 80010e0:	edd3 6a07 	vldr	s13, [r3, #28]
 80010e4:	4b7f      	ldr	r3, [pc, #508]	@ (80012e4 <main+0x48c>)
 80010e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010ee:	4b7d      	ldr	r3, [pc, #500]	@ (80012e4 <main+0x48c>)
 80010f0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010fc:	4b79      	ldr	r3, [pc, #484]	@ (80012e4 <main+0x48c>)
 80010fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001106:	4b77      	ldr	r3, [pc, #476]	@ (80012e4 <main+0x48c>)
 8001108:	edd3 7a03 	vldr	s15, [r3, #12]
 800110c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001110:	4b74      	ldr	r3, [pc, #464]	@ (80012e4 <main+0x48c>)
 8001112:	edd3 6a06 	vldr	s13, [r3, #24]
 8001116:	4b73      	ldr	r3, [pc, #460]	@ (80012e4 <main+0x48c>)
 8001118:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800111c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001120:	4b70      	ldr	r3, [pc, #448]	@ (80012e4 <main+0x48c>)
 8001122:	edd3 7a08 	vldr	s15, [r3, #32]
 8001126:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800112a:	4b6e      	ldr	r3, [pc, #440]	@ (80012e4 <main+0x48c>)
 800112c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001138:	4b6a      	ldr	r3, [pc, #424]	@ (80012e4 <main+0x48c>)
 800113a:	edd3 6a08 	vldr	s13, [r3, #32]
 800113e:	4b69      	ldr	r3, [pc, #420]	@ (80012e4 <main+0x48c>)
 8001140:	edd3 7a05 	vldr	s15, [r3, #20]
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114c:	4b65      	ldr	r3, [pc, #404]	@ (80012e4 <main+0x48c>)
 800114e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001152:	4b64      	ldr	r3, [pc, #400]	@ (80012e4 <main+0x48c>)
 8001154:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001160:	4b60      	ldr	r3, [pc, #384]	@ (80012e4 <main+0x48c>)
 8001162:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800116a:	4b5e      	ldr	r3, [pc, #376]	@ (80012e4 <main+0x48c>)
 800116c:	edc3 7a00 	vstr	s15, [r3]
					Poscontrol.Error[OLDER] = Poscontrol.Error[OLD];
 8001170:	4b5c      	ldr	r3, [pc, #368]	@ (80012e4 <main+0x48c>)
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	4a5b      	ldr	r2, [pc, #364]	@ (80012e4 <main+0x48c>)
 8001176:	6153      	str	r3, [r2, #20]
					Poscontrol.Error[OLD] = Poscontrol.Error[NEW];
 8001178:	4b5a      	ldr	r3, [pc, #360]	@ (80012e4 <main+0x48c>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a59      	ldr	r2, [pc, #356]	@ (80012e4 <main+0x48c>)
 800117e:	6113      	str	r3, [r2, #16]
					Poscontrol.Output[OLDER] = Poscontrol.Output[OLD];
 8001180:	4b58      	ldr	r3, [pc, #352]	@ (80012e4 <main+0x48c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a57      	ldr	r2, [pc, #348]	@ (80012e4 <main+0x48c>)
 8001186:	6093      	str	r3, [r2, #8]
					Poscontrol.Output[OLD] = Poscontrol.Output[NEW];
 8001188:	4b56      	ldr	r3, [pc, #344]	@ (80012e4 <main+0x48c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a55      	ldr	r2, [pc, #340]	@ (80012e4 <main+0x48c>)
 800118e:	6053      	str	r3, [r2, #4]
//					error_Pos_2 = error_Pos_1;
//					error_Pos_1 = error_Pos;
//					output_Pos_2 = output_Pos_1;
//					output_Pos_1 = output_Pos;

					Velocontrol.Error[NEW] = Poscontrol.Output[NEW]+q_Velo-speed_fill;
 8001190:	4b54      	ldr	r3, [pc, #336]	@ (80012e4 <main+0x48c>)
 8001192:	ed93 7a00 	vldr	s14, [r3]
 8001196:	4b54      	ldr	r3, [pc, #336]	@ (80012e8 <main+0x490>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a0:	ee17 0a90 	vmov	r0, s15
 80011a4:	f7ff f99c 	bl	80004e0 <__aeabi_f2d>
 80011a8:	4b50      	ldr	r3, [pc, #320]	@ (80012ec <main+0x494>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff f837 	bl	8000220 <__aeabi_dsub>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fc83 	bl	8000ac4 <__aeabi_d2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a4b      	ldr	r2, [pc, #300]	@ (80012f0 <main+0x498>)
 80011c2:	60d3      	str	r3, [r2, #12]
					Velocontrol.Output[NEW] = ((((Velocontrol.kp*Velocontrol.T)+(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[NEW])-(((Velocontrol.kp*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[OLD])+(Velocontrol.kd*Velocontrol.Error[OLDER])+(Velocontrol.Output[OLD]*Velocontrol.T))/Velocontrol.T;
 80011c4:	4b4a      	ldr	r3, [pc, #296]	@ (80012f0 <main+0x498>)
 80011c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80011ca:	4b49      	ldr	r3, [pc, #292]	@ (80012f0 <main+0x498>)
 80011cc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d4:	4b46      	ldr	r3, [pc, #280]	@ (80012f0 <main+0x498>)
 80011d6:	edd3 6a07 	vldr	s13, [r3, #28]
 80011da:	4b45      	ldr	r3, [pc, #276]	@ (80012f0 <main+0x498>)
 80011dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011e4:	4b42      	ldr	r3, [pc, #264]	@ (80012f0 <main+0x498>)
 80011e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011f2:	4b3f      	ldr	r3, [pc, #252]	@ (80012f0 <main+0x498>)
 80011f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80011f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011fc:	4b3c      	ldr	r3, [pc, #240]	@ (80012f0 <main+0x498>)
 80011fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001206:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <main+0x498>)
 8001208:	edd3 6a06 	vldr	s13, [r3, #24]
 800120c:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <main+0x498>)
 800120e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001212:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001216:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <main+0x498>)
 8001218:	edd3 7a08 	vldr	s15, [r3, #32]
 800121c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001220:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <main+0x498>)
 8001222:	edd3 7a04 	vldr	s15, [r3, #16]
 8001226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800122e:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <main+0x498>)
 8001230:	edd3 6a08 	vldr	s13, [r3, #32]
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <main+0x498>)
 8001236:	edd3 7a05 	vldr	s15, [r3, #20]
 800123a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <main+0x498>)
 8001244:	edd3 6a01 	vldr	s13, [r3, #4]
 8001248:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <main+0x498>)
 800124a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800124e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001252:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <main+0x498>)
 8001258:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800125c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <main+0x498>)
 8001262:	edc3 7a00 	vstr	s15, [r3]
					Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <main+0x498>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	4a21      	ldr	r2, [pc, #132]	@ (80012f0 <main+0x498>)
 800126c:	6153      	str	r3, [r2, #20]
					Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <main+0x498>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <main+0x498>)
 8001274:	6113      	str	r3, [r2, #16]
					Velocontrol.Output[OLDER] = Velocontrol.Output[OLD];
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <main+0x498>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <main+0x498>)
 800127c:	6093      	str	r3, [r2, #8]
					Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <main+0x498>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1b      	ldr	r2, [pc, #108]	@ (80012f0 <main+0x498>)
 8001284:	6053      	str	r3, [r2, #4]
//					error_Velo_2 = error_Velo_1;
//					error_Velo_1 = error_Velo;
//					output_Velo_2 = output_Velo_1;
//					output_Velo_1 = output_Velo;
//					if(fabs(Pos_Target-Pos) <= 0.1)start = 0;
			  timestamp3 =currentTime + 100;
 8001286:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800128a:	f112 0a64 	adds.w	sl, r2, #100	@ 0x64
 800128e:	f143 0b00 	adc.w	fp, r3, #0
 8001292:	4652      	mov	r2, sl
 8001294:	465b      	mov	r3, fp
 8001296:	4911      	ldr	r1, [pc, #68]	@ (80012dc <main+0x484>)
 8001298:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  if(Velocontrol.Output[NEW] > 0)
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <main+0x498>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	dd34      	ble.n	8001316 <main+0x4be>
 80012ac:	e022      	b.n	80012f4 <main+0x49c>
 80012ae:	bf00      	nop
 80012b0:	51eb851f 	.word	0x51eb851f
 80012b4:	40091eb8 	.word	0x40091eb8
 80012b8:	2000054c 	.word	0x2000054c
 80012bc:	20000548 	.word	0x20000548
 80012c0:	40ec0000 	.word	0x40ec0000
 80012c4:	40390000 	.word	0x40390000
 80012c8:	40c00000 	.word	0x40c00000
 80012cc:	20000540 	.word	0x20000540
 80012d0:	20000578 	.word	0x20000578
 80012d4:	20000438 	.word	0x20000438
 80012d8:	407f4000 	.word	0x407f4000
 80012dc:	20000580 	.word	0x20000580
 80012e0:	20000494 	.word	0x20000494
 80012e4:	20000464 	.word	0x20000464
 80012e8:	20000498 	.word	0x20000498
 80012ec:	20000530 	.word	0x20000530
 80012f0:	2000043c 	.word	0x2000043c
			  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2101      	movs	r1, #1
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fc:	f004 f8e6 	bl	80054cc <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Velocontrol.Output[NEW]);
 8001300:	4b49      	ldr	r3, [pc, #292]	@ (8001428 <main+0x5d0>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	4b49      	ldr	r3, [pc, #292]	@ (800142c <main+0x5d4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800130e:	ee17 2a90 	vmov	r2, s15
 8001312:	635a      	str	r2, [r3, #52]	@ 0x34
 8001314:	e5f8      	b.n	8000f08 <main+0xb0>
			  }
			  else
			  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001316:	2201      	movs	r2, #1
 8001318:	2101      	movs	r1, #1
 800131a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800131e:	f004 f8d5 	bl	80054cc <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
 8001322:	4b41      	ldr	r3, [pc, #260]	@ (8001428 <main+0x5d0>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	eef0 7ae7 	vabs.f32	s15, s15
 800132c:	4b3f      	ldr	r3, [pc, #252]	@ (800142c <main+0x5d4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001334:	ee17 2a90 	vmov	r2, s15
 8001338:	635a      	str	r2, [r3, #52]	@ 0x34
 800133a:	e5e5      	b.n	8000f08 <main+0xb0>
			  }
	  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2101      	movs	r1, #1
 8001340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001344:	f004 f8c2 	bl	80054cc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001348:	4b38      	ldr	r3, [pc, #224]	@ (800142c <main+0x5d4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001350:	e5da      	b.n	8000f08 <main+0xb0>

		  }
	  }
	  else if(start == 2)
 8001352:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <main+0x5d8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d15a      	bne.n	8001410 <main+0x5b8>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2101      	movs	r1, #1
 800135e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001362:	f004 f8b3 	bl	80054cc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001366:	4b31      	ldr	r3, [pc, #196]	@ (800142c <main+0x5d4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	635a      	str	r2, [r3, #52]	@ 0x34
		Velocontrol.Error[NEW] = 0;
 800136e:	4b2e      	ldr	r3, [pc, #184]	@ (8001428 <main+0x5d0>)
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
		Velocontrol.Error[OLD] = 0;
 8001376:	4b2c      	ldr	r3, [pc, #176]	@ (8001428 <main+0x5d0>)
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
		Velocontrol.Error[OLDER] = 0;
 800137e:	4b2a      	ldr	r3, [pc, #168]	@ (8001428 <main+0x5d0>)
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
		Velocontrol.Output[NEW] = 0;
 8001386:	4b28      	ldr	r3, [pc, #160]	@ (8001428 <main+0x5d0>)
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
		Velocontrol.Output[OLD] = 0;
 800138e:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <main+0x5d0>)
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
		Velocontrol.Output[OLDER] = 0;
 8001396:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <main+0x5d0>)
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	609a      	str	r2, [r3, #8]

		Poscontrol.Error[NEW] = 0;
 800139e:	4b25      	ldr	r3, [pc, #148]	@ (8001434 <main+0x5dc>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
		Poscontrol.Error[OLD] = 0;
 80013a6:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <main+0x5dc>)
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
		Poscontrol.Error[OLDER] = 0;
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <main+0x5dc>)
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
		Poscontrol.Output[NEW] = 0;
 80013b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <main+0x5dc>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
		Poscontrol.Output[OLD] = 0;
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <main+0x5dc>)
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
		Poscontrol.Output[OLDER] = 0;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <main+0x5dc>)
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
		t = 0;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <main+0x5e0>)
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
		static uint64_t timestamp4 =0;
		if(currentTime > timestamp4)
 80013d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013da:	4918      	ldr	r1, [pc, #96]	@ (800143c <main+0x5e4>)
 80013dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013e0:	4290      	cmp	r0, r2
 80013e2:	eb71 0303 	sbcs.w	r3, r1, r3
 80013e6:	f4bf ad8f 	bcs.w	8000f08 <main+0xb0>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80013ea:	2120      	movs	r1, #32
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f0:	f004 f884 	bl	80054fc <HAL_GPIO_TogglePin>
			timestamp4 =currentTime + 200000;
 80013f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f8:	4911      	ldr	r1, [pc, #68]	@ (8001440 <main+0x5e8>)
 80013fa:	1851      	adds	r1, r2, r1
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	f143 0300 	adc.w	r3, r3, #0
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <main+0x5e4>)
 800140a:	e9c1 2300 	strd	r2, r3, [r1]
 800140e:	e57b      	b.n	8000f08 <main+0xb0>
		}

	  }
	  else
	  {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2101      	movs	r1, #1
 8001414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001418:	f004 f858 	bl	80054cc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <main+0x5d4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	635a      	str	r2, [r3, #52]	@ 0x34
  {
 8001424:	e570      	b.n	8000f08 <main+0xb0>
 8001426:	bf00      	nop
 8001428:	2000043c 	.word	0x2000043c
 800142c:	20000354 	.word	0x20000354
 8001430:	20000438 	.word	0x20000438
 8001434:	20000464 	.word	0x20000464
 8001438:	200004a0 	.word	0x200004a0
 800143c:	20000588 	.word	0x20000588
 8001440:	00030d40 	.word	0x00030d40

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	@ 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0318 	add.w	r3, r7, #24
 800144e:	2238      	movs	r2, #56	@ 0x38
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f008 fe58 	bl	800a108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001466:	2000      	movs	r0, #0
 8001468:	f004 f87a 	bl	8005560 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001476:	2340      	movs	r3, #64	@ 0x40
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147e:	2302      	movs	r3, #2
 8001480:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001482:	2304      	movs	r3, #4
 8001484:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001486:	2355      	movs	r3, #85	@ 0x55
 8001488:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800148a:	2302      	movs	r3, #2
 800148c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800148e:	2302      	movs	r3, #2
 8001490:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001492:	2302      	movs	r3, #2
 8001494:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	4618      	mov	r0, r3
 800149c:	f004 f914 	bl	80056c8 <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014a6:	f001 fa29 	bl	80028fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2303      	movs	r3, #3
 80014b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2104      	movs	r1, #4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fc12 	bl	8005cec <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014ce:	f001 fa15 	bl	80028fc <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	@ 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2220      	movs	r2, #32
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f008 fe07 	bl	800a108 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014fa:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <MX_ADC1_Init+0xec>)
 80014fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001502:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001504:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001508:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800150a:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <MX_ADC1_Init+0xec>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001510:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001516:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800151c:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <MX_ADC1_Init+0xec>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001522:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001524:	2204      	movs	r2, #4
 8001526:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001528:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <MX_ADC1_Init+0xec>)
 800152a:	2200      	movs	r2, #0
 800152c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800152e:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001530:	2200      	movs	r2, #0
 8001532:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001534:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001536:	2201      	movs	r2, #1
 8001538:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153a:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <MX_ADC1_Init+0xec>)
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8001542:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001544:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8001548:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800154a:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <MX_ADC1_Init+0xec>)
 800154c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001550:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800155a:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <MX_ADC1_Init+0xec>)
 800155c:	2200      	movs	r2, #0
 800155e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001560:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001568:	4817      	ldr	r0, [pc, #92]	@ (80015c8 <MX_ADC1_Init+0xec>)
 800156a:	f001 ff9f 	bl	80034ac <HAL_ADC_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001574:	f001 f9c2 	bl	80028fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800157c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	4811      	ldr	r0, [pc, #68]	@ (80015c8 <MX_ADC1_Init+0xec>)
 8001584:	f003 f8be 	bl	8004704 <HAL_ADCEx_MultiModeConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800158e:	f001 f9b5 	bl	80028fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_ADC1_Init+0xf0>)
 8001594:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001596:	2306      	movs	r3, #6
 8001598:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800159e:	237f      	movs	r3, #127	@ 0x7f
 80015a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015a2:	2304      	movs	r3, #4
 80015a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	@ (80015c8 <MX_ADC1_Init+0xec>)
 80015b0:	f002 fa2a 	bl	8003a08 <HAL_ADC_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80015ba:	f001 f99f 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3730      	adds	r7, #48	@ 0x30
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000044 	.word	0x20000044
 80015cc:	14f00020 	.word	0x14f00020

080015d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2220      	movs	r2, #32
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f008 fd8d 	bl	800a108 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015ee:	4b38      	ldr	r3, [pc, #224]	@ (80016d0 <MX_ADC3_Init+0x100>)
 80015f0:	4a38      	ldr	r2, [pc, #224]	@ (80016d4 <MX_ADC3_Init+0x104>)
 80015f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015f4:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <MX_ADC3_Init+0x100>)
 80015f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015fc:	4b34      	ldr	r3, [pc, #208]	@ (80016d0 <MX_ADC3_Init+0x100>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001602:	4b33      	ldr	r3, [pc, #204]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001608:	4b31      	ldr	r3, [pc, #196]	@ (80016d0 <MX_ADC3_Init+0x100>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800160e:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001610:	2201      	movs	r2, #1
 8001612:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001614:	4b2e      	ldr	r3, [pc, #184]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001616:	2204      	movs	r2, #4
 8001618:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <MX_ADC3_Init+0x100>)
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001620:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001622:	2201      	movs	r2, #1
 8001624:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8001626:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001628:	2202      	movs	r2, #2
 800162a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800162c:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <MX_ADC3_Init+0x100>)
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001634:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800163a:	4b25      	ldr	r3, [pc, #148]	@ (80016d0 <MX_ADC3_Init+0x100>)
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001640:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001648:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <MX_ADC3_Init+0x100>)
 800164a:	2200      	movs	r2, #0
 800164c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001656:	481e      	ldr	r0, [pc, #120]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001658:	f001 ff28 	bl	80034ac <HAL_ADC_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001662:	f001 f94b 	bl	80028fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800166a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	4817      	ldr	r0, [pc, #92]	@ (80016d0 <MX_ADC3_Init+0x100>)
 8001672:	f003 f847 	bl	8004704 <HAL_ADCEx_MultiModeConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800167c:	f001 f93e 	bl	80028fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_ADC3_Init+0x108>)
 8001682:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001684:	2306      	movs	r3, #6
 8001686:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800168c:	237f      	movs	r3, #127	@ 0x7f
 800168e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001690:	2304      	movs	r3, #4
 8001692:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	480c      	ldr	r0, [pc, #48]	@ (80016d0 <MX_ADC3_Init+0x100>)
 800169e:	f002 f9b3 	bl	8003a08 <HAL_ADC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80016a8:	f001 f928 	bl	80028fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_ADC3_Init+0x10c>)
 80016ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016b0:	230c      	movs	r3, #12
 80016b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_ADC3_Init+0x100>)
 80016ba:	f002 f9a5 	bl	8003a08 <HAL_ADC_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 80016c4:	f001 f91a 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3730      	adds	r7, #48	@ 0x30
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200000b0 	.word	0x200000b0
 80016d4:	50000400 	.word	0x50000400
 80016d8:	04300002 	.word	0x04300002
 80016dc:	14f00020 	.word	0x14f00020

080016e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 80016e6:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <MX_LPUART1_UART_Init+0x90>)
 80016e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 80016ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 800171e:	2200      	movs	r2, #0
 8001720:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001722:	4812      	ldr	r0, [pc, #72]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 8001724:	f006 fc52 	bl	8007fcc <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800172e:	f001 f8e5 	bl	80028fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001732:	2100      	movs	r1, #0
 8001734:	480d      	ldr	r0, [pc, #52]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 8001736:	f008 fc1c 	bl	8009f72 <HAL_UARTEx_SetTxFifoThreshold>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001740:	f001 f8dc 	bl	80028fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	4809      	ldr	r0, [pc, #36]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 8001748:	f008 fc51 	bl	8009fee <HAL_UARTEx_SetRxFifoThreshold>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001752:	f001 f8d3 	bl	80028fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_LPUART1_UART_Init+0x8c>)
 8001758:	f008 fbd2 	bl	8009f00 <HAL_UARTEx_DisableFifoMode>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001762:	f001 f8cb 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200001dc 	.word	0x200001dc
 8001770:	40008000 	.word	0x40008000

08001774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <MX_TIM1_Init+0xa0>)
 8001794:	4a20      	ldr	r2, [pc, #128]	@ (8001818 <MX_TIM1_Init+0xa4>)
 8001796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001798:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <MX_TIM1_Init+0xa0>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <MX_TIM1_Init+0xa0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <MX_TIM1_Init+0xa0>)
 80017a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <MX_TIM1_Init+0xa0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b2:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <MX_TIM1_Init+0xa0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <MX_TIM1_Init+0xa0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017be:	4815      	ldr	r0, [pc, #84]	@ (8001814 <MX_TIM1_Init+0xa0>)
 80017c0:	f004 fefe 	bl	80065c0 <HAL_TIM_Base_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80017ca:	f001 f897 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	480e      	ldr	r0, [pc, #56]	@ (8001814 <MX_TIM1_Init+0xa0>)
 80017dc:	f005 fd3c 	bl	8007258 <HAL_TIM_ConfigClockSource>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80017e6:	f001 f889 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	@ (8001814 <MX_TIM1_Init+0xa0>)
 80017fc:	f006 fb0a 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001806:	f001 f879 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000270 	.word	0x20000270
 8001818:	40012c00 	.word	0x40012c00

0800181c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800183a:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <MX_TIM2_Init+0x98>)
 800183c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001840:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <MX_TIM2_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <MX_TIM2_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800184e:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <MX_TIM2_Init+0x98>)
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <MX_TIM2_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <MX_TIM2_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001862:	4814      	ldr	r0, [pc, #80]	@ (80018b4 <MX_TIM2_Init+0x98>)
 8001864:	f004 feac 	bl	80065c0 <HAL_TIM_Base_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800186e:	f001 f845 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001876:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4619      	mov	r1, r3
 800187e:	480d      	ldr	r0, [pc, #52]	@ (80018b4 <MX_TIM2_Init+0x98>)
 8001880:	f005 fcea 	bl	8007258 <HAL_TIM_ConfigClockSource>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800188a:	f001 f837 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4806      	ldr	r0, [pc, #24]	@ (80018b4 <MX_TIM2_Init+0x98>)
 800189c:	f006 faba 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018a6:	f001 f829 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200002bc 	.word	0x200002bc

080018b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	@ 0x30
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	2224      	movs	r2, #36	@ 0x24
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f008 fc1e 	bl	800a108 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018d6:	4b21      	ldr	r3, [pc, #132]	@ (800195c <MX_TIM3_Init+0xa4>)
 80018d8:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <MX_TIM3_Init+0xa8>)
 80018da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <MX_TIM3_Init+0xa4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <MX_TIM3_Init+0xa4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 57343;
 80018e8:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <MX_TIM3_Init+0xa4>)
 80018ea:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 80018ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_TIM3_Init+0xa4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <MX_TIM3_Init+0xa4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018fc:	2303      	movs	r3, #3
 80018fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001904:	2301      	movs	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001914:	2301      	movs	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	@ (800195c <MX_TIM3_Init+0xa4>)
 8001928:	f005 f8fe 	bl	8006b28 <HAL_TIM_Encoder_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001932:	f000 ffe3 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4619      	mov	r1, r3
 8001942:	4806      	ldr	r0, [pc, #24]	@ (800195c <MX_TIM3_Init+0xa4>)
 8001944:	f006 fa66 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800194e:	f000 ffd5 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	3730      	adds	r7, #48	@ 0x30
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000308 	.word	0x20000308
 8001960:	40000400 	.word	0x40000400

08001964 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	@ 0x38
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001984:	463b      	mov	r3, r7
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	615a      	str	r2, [r3, #20]
 8001994:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001996:	4b2d      	ldr	r3, [pc, #180]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 8001998:	4a2d      	ldr	r2, [pc, #180]	@ (8001a50 <MX_TIM4_Init+0xec>)
 800199a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800199c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 800199e:	2201      	movs	r2, #1
 80019a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42499;
 80019a8:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 80019aa:	f24a 6203 	movw	r2, #42499	@ 0xa603
 80019ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b6:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019bc:	4823      	ldr	r0, [pc, #140]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 80019be:	f004 fdff 	bl	80065c0 <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80019c8:	f000 ff98 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d6:	4619      	mov	r1, r3
 80019d8:	481c      	ldr	r0, [pc, #112]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 80019da:	f005 fc3d 	bl	8007258 <HAL_TIM_ConfigClockSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80019e4:	f000 ff8a 	bl	80028fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019e8:	4818      	ldr	r0, [pc, #96]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 80019ea:	f004 ff29 	bl	8006840 <HAL_TIM_PWM_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80019f4:	f000 ff82 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4811      	ldr	r0, [pc, #68]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 8001a08:	f006 fa04 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001a12:	f000 ff73 	bl	80028fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a16:	2360      	movs	r3, #96	@ 0x60
 8001a18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 8001a2e:	f005 faff 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001a38:	f000 ff60 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a3c:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <MX_TIM4_Init+0xe8>)
 8001a3e:	f001 f995 	bl	8002d6c <HAL_TIM_MspPostInit>

}
 8001a42:	bf00      	nop
 8001a44:	3738      	adds	r7, #56	@ 0x38
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000354 	.word	0x20000354
 8001a50:	40000800 	.word	0x40000800

08001a54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <MX_TIM5_Init+0x94>)
 8001a74:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <MX_TIM5_Init+0x98>)
 8001a76:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <MX_TIM5_Init+0x94>)
 8001a7a:	22a9      	movs	r2, #169	@ 0xa9
 8001a7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <MX_TIM5_Init+0x94>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a84:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <MX_TIM5_Init+0x94>)
 8001a86:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_TIM5_Init+0x94>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <MX_TIM5_Init+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a98:	4813      	ldr	r0, [pc, #76]	@ (8001ae8 <MX_TIM5_Init+0x94>)
 8001a9a:	f004 fd91 	bl	80065c0 <HAL_TIM_Base_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001aa4:	f000 ff2a 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <MX_TIM5_Init+0x94>)
 8001ab6:	f005 fbcf 	bl	8007258 <HAL_TIM_ConfigClockSource>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ac0:	f000 ff1c 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <MX_TIM5_Init+0x94>)
 8001ad2:	f006 f99f 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001adc:	f000 ff0e 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200003a0 	.word	0x200003a0
 8001aec:	40000c00 	.word	0x40000c00

08001af0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b10:	4a20      	ldr	r2, [pc, #128]	@ (8001b94 <MX_TIM8_Init+0xa4>)
 8001b12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b16:	22a9      	movs	r2, #169	@ 0xa9
 8001b18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b3a:	4815      	ldr	r0, [pc, #84]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b3c:	f004 fd40 	bl	80065c0 <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001b46:	f000 fed9 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	4619      	mov	r1, r3
 8001b56:	480e      	ldr	r0, [pc, #56]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b58:	f005 fb7e 	bl	8007258 <HAL_TIM_ConfigClockSource>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001b62:	f000 fecb 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <MX_TIM8_Init+0xa0>)
 8001b78:	f006 f94c 	bl	8007e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b82:	f000 febb 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200003ec 	.word	0x200003ec
 8001b94:	40013400 	.word	0x40013400

08001b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b9e:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <MX_DMA_Init+0x60>)
 8001ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba2:	4a15      	ldr	r2, [pc, #84]	@ (8001bf8 <MX_DMA_Init+0x60>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <MX_DMA_Init+0x60>)
 8001bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <MX_DMA_Init+0x60>)
 8001bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bba:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf8 <MX_DMA_Init+0x60>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <MX_DMA_Init+0x60>)
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	200b      	movs	r0, #11
 8001bd4:	f002 ff79 	bl	8004aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bd8:	200b      	movs	r0, #11
 8001bda:	f002 ff90 	bl	8004afe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	200c      	movs	r0, #12
 8001be4:	f002 ff71 	bl	8004aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001be8:	200c      	movs	r0, #12
 8001bea:	f002 ff88 	bl	8004afe <HAL_NVIC_EnableIRQ>

}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000

08001bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	@ 0x28
 8001c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	4b4a      	ldr	r3, [pc, #296]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	4a49      	ldr	r2, [pc, #292]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1e:	4b47      	ldr	r3, [pc, #284]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2a:	4b44      	ldr	r3, [pc, #272]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	4a43      	ldr	r2, [pc, #268]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c30:	f043 0320 	orr.w	r3, r3, #32
 8001c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c36:	4b41      	ldr	r3, [pc, #260]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b3e      	ldr	r3, [pc, #248]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4a3d      	ldr	r2, [pc, #244]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	4a37      	ldr	r2, [pc, #220]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c66:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <MX_GPIO_Init+0x140>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2123      	movs	r1, #35	@ 0x23
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7a:	f003 fc27 	bl	80054cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c84:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	482a      	ldr	r0, [pc, #168]	@ (8001d40 <MX_GPIO_Init+0x144>)
 8001c96:	f003 fa7f 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4824      	ldr	r0, [pc, #144]	@ (8001d40 <MX_GPIO_Init+0x144>)
 8001cae:	f003 fa73 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cb2:	230e      	movs	r3, #14
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481e      	ldr	r0, [pc, #120]	@ (8001d40 <MX_GPIO_Init+0x144>)
 8001cc6:	f003 fa67 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8001cca:	2323      	movs	r3, #35	@ 0x23
 8001ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce4:	f003 fa58 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ce8:	2330      	movs	r3, #48	@ 0x30
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4811      	ldr	r0, [pc, #68]	@ (8001d44 <MX_GPIO_Init+0x148>)
 8001cfe:	f003 fa4b 	bl	8005198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	200a      	movs	r0, #10
 8001d08:	f002 fedf 	bl	8004aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f002 fef6 	bl	8004afe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2017      	movs	r0, #23
 8001d18:	f002 fed7 	bl	8004aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d1c:	2017      	movs	r0, #23
 8001d1e:	f002 feee 	bl	8004afe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2028      	movs	r0, #40	@ 0x28
 8001d28:	f002 fecf 	bl	8004aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d2c:	2028      	movs	r0, #40	@ 0x28
 8001d2e:	f002 fee6 	bl	8004afe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	@ 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	48000800 	.word	0x48000800
 8001d44:	48000400 	.word	0x48000400

08001d48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b4b0      	push	{r4, r5, r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a08      	ldr	r2, [pc, #32]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d108      	bne.n	8001d6a <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 8001d58:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	1e54      	subs	r4, r2, #1
 8001d60:	f143 0500 	adc.w	r5, r3, #0
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d66:	e9c3 4500 	strd	r4, r5, [r3]
}
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bcb0      	pop	{r4, r5, r7}
 8001d72:	4770      	bx	lr
 8001d74:	200003a0 	.word	0x200003a0
 8001d78:	20000570 	.word	0x20000570

08001d7c <micros>:

uint64_t micros()
{
 8001d7c:	b4b0      	push	{r4, r5, r7}
 8001d7e:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <micros+0x2c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	2200      	movs	r2, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <micros+0x30>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	1884      	adds	r4, r0, r2
 8001d94:	eb41 0503 	adc.w	r5, r1, r3
 8001d98:	4622      	mov	r2, r4
 8001d9a:	462b      	mov	r3, r5
}
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bcb0      	pop	{r4, r5, r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200003a0 	.word	0x200003a0
 8001dac:	20000570 	.word	0x20000570

08001db0 <QEIEncoderVel_Update>:

void QEIEncoderVel_Update()
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 8001db6:	f7ff ffe1 	bl	8001d7c <micros>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	497e      	ldr	r1, [pc, #504]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001dc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8001dc4:	4b7d      	ldr	r3, [pc, #500]	@ (8001fbc <QEIEncoderVel_Update+0x20c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	4a7b      	ldr	r2, [pc, #492]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001dcc:	6013      	str	r3, [r2, #0]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8001dce:	4b7a      	ldr	r3, [pc, #488]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dde:	4b76      	ldr	r3, [pc, #472]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001de0:	edc3 7a06 	vstr	s15, [r3, #24]
//calculate dx
int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001de4:	4b74      	ldr	r3, [pc, #464]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b73      	ldr	r3, [pc, #460]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	607b      	str	r3, [r7, #4]
//Handle Warp around
if(diffPosition > 28672)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001df6:	dd08      	ble.n	8001e0a <QEIEncoderVel_Update+0x5a>
{
diffPosition -=57344;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f5a3 4360 	sub.w	r3, r3, #57344	@ 0xe000
 8001dfe:	607b      	str	r3, [r7, #4]
Count-=1;
 8001e00:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc0 <QEIEncoderVel_Update+0x210>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc0 <QEIEncoderVel_Update+0x210>)
 8001e08:	6013      	str	r3, [r2, #0]
}
if(diffPosition < -28672)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f513 4fe0 	cmn.w	r3, #28672	@ 0x7000
 8001e10:	da08      	bge.n	8001e24 <QEIEncoderVel_Update+0x74>
{
diffPosition +=57344;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001e18:	607b      	str	r3, [r7, #4]
Count+=1;
 8001e1a:	4b69      	ldr	r3, [pc, #420]	@ (8001fc0 <QEIEncoderVel_Update+0x210>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a67      	ldr	r2, [pc, #412]	@ (8001fc0 <QEIEncoderVel_Update+0x210>)
 8001e22:	6013      	str	r3, [r2, #0]
}
//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8001e24:	4b64      	ldr	r3, [pc, #400]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001e26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e2a:	4b63      	ldr	r3, [pc, #396]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001e2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e30:	1a84      	subs	r4, r0, r2
 8001e32:	eb61 0503 	sbc.w	r5, r1, r3
 8001e36:	4620      	mov	r0, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7fe fb73 	bl	8000524 <__aeabi_ul2d>
 8001e3e:	a356      	add	r3, pc, #344	@ (adr r3, 8001f98 <QEIEncoderVel_Update+0x1e8>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fba4 	bl	8000590 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe fe38 	bl	8000ac4 <__aeabi_d2f>
 8001e54:	4603      	mov	r3, r0
 8001e56:	603b      	str	r3, [r7, #0]
//calculate anglar velocity
QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e62:	ed97 7a00 	vldr	s14, [r7]
 8001e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e6a:	4b53      	ldr	r3, [pc, #332]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001e6c:	edc3 7a07 	vstr	s15, [r3, #28]
RPSspeed = ((QEIdata.QEIAngularVelocity)/8192)*60;
 8001e70:	4b51      	ldr	r3, [pc, #324]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001e72:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e76:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8001fc4 <QEIEncoderVel_Update+0x214>
 8001e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7e:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001fc8 <QEIEncoderVel_Update+0x218>
 8001e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e8a:	ee17 3a90 	vmov	r3, s15
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	4b4e      	ldr	r3, [pc, #312]	@ (8001fcc <QEIEncoderVel_Update+0x21c>)
 8001e92:	801a      	strh	r2, [r3, #0]
speed = ((QEIdata.QEIAngularVelocity)/8192)*12.5*2*3.14;
 8001e94:	4b48      	ldr	r3, [pc, #288]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001e96:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e9a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001fc4 <QEIEncoderVel_Update+0x214>
 8001e9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ea2:	ee16 0a90 	vmov	r0, s13
 8001ea6:	f7fe fb1b 	bl	80004e0 <__aeabi_f2d>
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b48      	ldr	r3, [pc, #288]	@ (8001fd0 <QEIEncoderVel_Update+0x220>)
 8001eb0:	f7fe fb6e 	bl	8000590 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	f7fe f9b0 	bl	8000224 <__adddf3>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	a334      	add	r3, pc, #208	@ (adr r3, 8001fa0 <QEIEncoderVel_Update+0x1f0>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fb5d 	bl	8000590 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	493e      	ldr	r1, [pc, #248]	@ (8001fd4 <QEIEncoderVel_Update+0x224>)
 8001edc:	e9c1 2300 	strd	r2, r3, [r1]
speed_fill = (0.969*speed_fill_1)+(0.0155*speed)+(0.0155*speed_1);
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <QEIEncoderVel_Update+0x228>)
 8001ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee6:	a330      	add	r3, pc, #192	@ (adr r3, 8001fa8 <QEIEncoderVel_Update+0x1f8>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fb50 	bl	8000590 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4614      	mov	r4, r2
 8001ef6:	461d      	mov	r5, r3
 8001ef8:	4b36      	ldr	r3, [pc, #216]	@ (8001fd4 <QEIEncoderVel_Update+0x224>)
 8001efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efe:	a32c      	add	r3, pc, #176	@ (adr r3, 8001fb0 <QEIEncoderVel_Update+0x200>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f7fe fb44 	bl	8000590 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	4629      	mov	r1, r5
 8001f10:	f7fe f988 	bl	8000224 <__adddf3>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4614      	mov	r4, r2
 8001f1a:	461d      	mov	r5, r3
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <QEIEncoderVel_Update+0x22c>)
 8001f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f22:	a323      	add	r3, pc, #140	@ (adr r3, 8001fb0 <QEIEncoderVel_Update+0x200>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	f7fe fb32 	bl	8000590 <__aeabi_dmul>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4620      	mov	r0, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f7fe f976 	bl	8000224 <__adddf3>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4928      	ldr	r1, [pc, #160]	@ (8001fe0 <QEIEncoderVel_Update+0x230>)
 8001f3e:	e9c1 2300 	strd	r2, r3, [r1]
speed_1 = speed;
 8001f42:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <QEIEncoderVel_Update+0x224>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	4924      	ldr	r1, [pc, #144]	@ (8001fdc <QEIEncoderVel_Update+0x22c>)
 8001f4a:	e9c1 2300 	strd	r2, r3, [r1]
speed_fill_1 = speed_fill;
 8001f4e:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <QEIEncoderVel_Update+0x230>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	4920      	ldr	r1, [pc, #128]	@ (8001fd8 <QEIEncoderVel_Update+0x228>)
 8001f56:	e9c1 2300 	strd	r2, r3, [r1]
if(speed_fill>MAXspeed)
 8001f5a:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <QEIEncoderVel_Update+0x230>)
 8001f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f60:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <QEIEncoderVel_Update+0x234>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe fda3 	bl	8000ab0 <__aeabi_dcmpgt>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <QEIEncoderVel_Update+0x1cc>
{
	MAXspeed = speed_fill;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <QEIEncoderVel_Update+0x230>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	491b      	ldr	r1, [pc, #108]	@ (8001fe4 <QEIEncoderVel_Update+0x234>)
 8001f78:	e9c1 2300 	strd	r2, r3, [r1]
}
//store value for next loop
QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001f82:	6053      	str	r3, [r2, #4]
QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8001f84:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001f86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f8a:	490b      	ldr	r1, [pc, #44]	@ (8001fb8 <QEIEncoderVel_Update+0x208>)
 8001f8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdb0      	pop	{r4, r5, r7, pc}
 8001f98:	a0b5ed8d 	.word	0xa0b5ed8d
 8001f9c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001fa0:	51eb851f 	.word	0x51eb851f
 8001fa4:	40091eb8 	.word	0x40091eb8
 8001fa8:	49ba5e35 	.word	0x49ba5e35
 8001fac:	3fef020c 	.word	0x3fef020c
 8001fb0:	c8b43958 	.word	0xc8b43958
 8001fb4:	3f8fbe76 	.word	0x3f8fbe76
 8001fb8:	20000550 	.word	0x20000550
 8001fbc:	20000308 	.word	0x20000308
 8001fc0:	20000548 	.word	0x20000548
 8001fc4:	46000000 	.word	0x46000000
 8001fc8:	42700000 	.word	0x42700000
 8001fcc:	20000512 	.word	0x20000512
 8001fd0:	40290000 	.word	0x40290000
 8001fd4:	20000518 	.word	0x20000518
 8001fd8:	20000538 	.word	0x20000538
 8001fdc:	20000520 	.word	0x20000520
 8001fe0:	20000530 	.word	0x20000530
 8001fe4:	20000528 	.word	0x20000528

08001fe8 <UARTInterruptConfig>:

void UARTInterruptConfig()
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Rx,4);
 8001fec:	2204      	movs	r2, #4
 8001fee:	4903      	ldr	r1, [pc, #12]	@ (8001ffc <UARTInterruptConfig+0x14>)
 8001ff0:	4803      	ldr	r0, [pc, #12]	@ (8002000 <UARTInterruptConfig+0x18>)
 8001ff2:	f006 f83b 	bl	800806c <HAL_UART_Receive_IT>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000050c 	.word	0x2000050c
 8002000:	200001dc 	.word	0x200001dc

08002004 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a07      	ldr	r2, [pc, #28]	@ (800202c <HAL_UART_RxCpltCallback+0x28>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d107      	bne.n	8002024 <HAL_UART_RxCpltCallback+0x20>
	{
		Rx[4] = '\0';
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_UART_RxCpltCallback+0x2c>)
 8002016:	2200      	movs	r2, #0
 8002018:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&hlpuart1, Rx, 4);
 800201a:	2204      	movs	r2, #4
 800201c:	4904      	ldr	r1, [pc, #16]	@ (8002030 <HAL_UART_RxCpltCallback+0x2c>)
 800201e:	4803      	ldr	r0, [pc, #12]	@ (800202c <HAL_UART_RxCpltCallback+0x28>)
 8002020:	f006 f824 	bl	800806c <HAL_UART_Receive_IT>
	}
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200001dc 	.word	0x200001dc
 8002030:	2000050c 	.word	0x2000050c

08002034 <Joy_State>:

void Joy_State()
{
 8002034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800203c:	2101      	movs	r1, #1
 800203e:	48a6      	ldr	r0, [pc, #664]	@ (80022d8 <Joy_State+0x2a4>)
 8002040:	f003 fa2c 	bl	800549c <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	4ba4      	ldr	r3, [pc, #656]	@ (80022dc <Joy_State+0x2a8>)
 800204a:	701a      	strb	r2, [r3, #0]
if(state == 0)
 800204c:	4ba4      	ldr	r3, [pc, #656]	@ (80022e0 <Joy_State+0x2ac>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10a      	bne.n	800206a <Joy_State+0x36>
{
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
	if (joyY > 4000)
 8002054:	4ba3      	ldr	r3, [pc, #652]	@ (80022e4 <Joy_State+0x2b0>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800205c:	f240 80c6 	bls.w	80021ec <Joy_State+0x1b8>
	{
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002060:	4ba1      	ldr	r3, [pc, #644]	@ (80022e8 <Joy_State+0x2b4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	@ 0x24
 8002068:	e0c0      	b.n	80021ec <Joy_State+0x1b8>
	}
}
else if(state == 1)
 800206a:	4b9d      	ldr	r3, [pc, #628]	@ (80022e0 <Joy_State+0x2ac>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d16a      	bne.n	8002148 <Joy_State+0x114>
{
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 8002072:	f000 ffcb 	bl	800300c <HAL_GetTick>
 8002076:	4603      	mov	r3, r0
 8002078:	2200      	movs	r2, #0
 800207a:	4698      	mov	r8, r3
 800207c:	4691      	mov	r9, r2
 800207e:	4b9b      	ldr	r3, [pc, #620]	@ (80022ec <Joy_State+0x2b8>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	4542      	cmp	r2, r8
 8002086:	eb73 0309 	sbcs.w	r3, r3, r9
 800208a:	d22b      	bcs.n	80020e4 <Joy_State+0xb0>
	{
		if(joyX > 4000)
 800208c:	4b98      	ldr	r3, [pc, #608]	@ (80022f0 <Joy_State+0x2bc>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002094:	d904      	bls.n	80020a0 <Joy_State+0x6c>
		{
			A = A-250;
 8002096:	4b97      	ldr	r3, [pc, #604]	@ (80022f4 <Joy_State+0x2c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3bfa      	subs	r3, #250	@ 0xfa
 800209c:	4a95      	ldr	r2, [pc, #596]	@ (80022f4 <Joy_State+0x2c0>)
 800209e:	6013      	str	r3, [r2, #0]
		}
		if(joyX < 2000)
 80020a0:	4b93      	ldr	r3, [pc, #588]	@ (80022f0 <Joy_State+0x2bc>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80020a8:	d204      	bcs.n	80020b4 <Joy_State+0x80>
		{
			A = A+250;
 80020aa:	4b92      	ldr	r3, [pc, #584]	@ (80022f4 <Joy_State+0x2c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	33fa      	adds	r3, #250	@ 0xfa
 80020b0:	4a90      	ldr	r2, [pc, #576]	@ (80022f4 <Joy_State+0x2c0>)
 80020b2:	6013      	str	r3, [r2, #0]
		}
		if(A <= 0)A=0;
 80020b4:	4b8f      	ldr	r3, [pc, #572]	@ (80022f4 <Joy_State+0x2c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	dc02      	bgt.n	80020c2 <Joy_State+0x8e>
 80020bc:	4b8d      	ldr	r3, [pc, #564]	@ (80022f4 <Joy_State+0x2c0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 80020c2:	f000 ffa3 	bl	800300c <HAL_GetTick>
 80020c6:	4603      	mov	r3, r0
 80020c8:	3364      	adds	r3, #100	@ 0x64
 80020ca:	2200      	movs	r2, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	4b86      	ldr	r3, [pc, #536]	@ (80022ec <Joy_State+0x2b8>)
 80020d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80020d6:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020da:	2120      	movs	r1, #32
 80020dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020e0:	f003 fa0c 	bl	80054fc <HAL_GPIO_TogglePin>
	}
	if(joyY > 4000 || joyY < 2000)
 80020e4:	4b7f      	ldr	r3, [pc, #508]	@ (80022e4 <Joy_State+0x2b0>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80020ec:	d804      	bhi.n	80020f8 <Joy_State+0xc4>
 80020ee:	4b7d      	ldr	r3, [pc, #500]	@ (80022e4 <Joy_State+0x2b0>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80020f6:	d21c      	bcs.n	8002132 <Joy_State+0xfe>
	{
		if (joyY > 4000)
 80020f8:	4b7a      	ldr	r3, [pc, #488]	@ (80022e4 <Joy_State+0x2b0>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002100:	d90b      	bls.n	800211a <Joy_State+0xe6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8002102:	2201      	movs	r2, #1
 8002104:	2101      	movs	r1, #1
 8002106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800210a:	f003 f9df 	bl	80054cc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 800210e:	4b79      	ldr	r3, [pc, #484]	@ (80022f4 <Joy_State+0x2c0>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b79      	ldr	r3, [pc, #484]	@ (80022f8 <Joy_State+0x2c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 4000)
 8002118:	e068      	b.n	80021ec <Joy_State+0x1b8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2101      	movs	r1, #1
 800211e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002122:	f003 f9d3 	bl	80054cc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 8002126:	4b73      	ldr	r3, [pc, #460]	@ (80022f4 <Joy_State+0x2c0>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b73      	ldr	r3, [pc, #460]	@ (80022f8 <Joy_State+0x2c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 4000)
 8002130:	e05c      	b.n	80021ec <Joy_State+0x1b8>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2101      	movs	r1, #1
 8002136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213a:	f003 f9c7 	bl	80054cc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800213e:	4b6e      	ldr	r3, [pc, #440]	@ (80022f8 <Joy_State+0x2c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	635a      	str	r2, [r3, #52]	@ 0x34
 8002146:	e051      	b.n	80021ec <Joy_State+0x1b8>
	}
}
else if(state == 2)
 8002148:	4b65      	ldr	r3, [pc, #404]	@ (80022e0 <Joy_State+0x2ac>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d143      	bne.n	80021d8 <Joy_State+0x1a4>
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 8002150:	2201      	movs	r2, #1
 8002152:	2120      	movs	r1, #32
 8002154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002158:	f003 f9b8 	bl	80054cc <HAL_GPIO_WritePin>
	if(joyY > 3200 || joyY < 2700)
 800215c:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <Joy_State+0x2b0>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8002164:	d805      	bhi.n	8002172 <Joy_State+0x13e>
 8002166:	4b5f      	ldr	r3, [pc, #380]	@ (80022e4 <Joy_State+0x2b0>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	f640 228b 	movw	r2, #2699	@ 0xa8b
 800216e:	4293      	cmp	r3, r2
 8002170:	d824      	bhi.n	80021bc <Joy_State+0x188>
	{
		if (joyY > 3200)
 8002172:	4b5c      	ldr	r3, [pc, #368]	@ (80022e4 <Joy_State+0x2b0>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 800217a:	d90f      	bls.n	800219c <Joy_State+0x168>
		{
			A = 10625;
 800217c:	4b5d      	ldr	r3, [pc, #372]	@ (80022f4 <Joy_State+0x2c0>)
 800217e:	f642 1281 	movw	r2, #10625	@ 0x2981
 8002182:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8002184:	2201      	movs	r2, #1
 8002186:	2101      	movs	r1, #1
 8002188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800218c:	f003 f99e 	bl	80054cc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 2125);
 8002190:	4b59      	ldr	r3, [pc, #356]	@ (80022f8 <Joy_State+0x2c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f640 024d 	movw	r2, #2125	@ 0x84d
 8002198:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3200)
 800219a:	e027      	b.n	80021ec <Joy_State+0x1b8>
		}
		else
		{
			A = -10625;
 800219c:	4b55      	ldr	r3, [pc, #340]	@ (80022f4 <Joy_State+0x2c0>)
 800219e:	f46f 5226 	mvn.w	r2, #10624	@ 0x2980
 80021a2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2101      	movs	r1, #1
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ac:	f003 f98e 	bl	80054cc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 2125);
 80021b0:	4b51      	ldr	r3, [pc, #324]	@ (80022f8 <Joy_State+0x2c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f640 024d 	movw	r2, #2125	@ 0x84d
 80021b8:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3200)
 80021ba:	e017      	b.n	80021ec <Joy_State+0x1b8>
		}
	}
	else
	{
		A = 0;
 80021bc:	4b4d      	ldr	r3, [pc, #308]	@ (80022f4 <Joy_State+0x2c0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2101      	movs	r1, #1
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ca:	f003 f97f 	bl	80054cc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 80021ce:	4b4a      	ldr	r3, [pc, #296]	@ (80022f8 <Joy_State+0x2c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80021d6:	e009      	b.n	80021ec <Joy_State+0x1b8>
	}
 }
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2101      	movs	r1, #1
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e0:	f003 f974 	bl	80054cc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 80021e4:	4b44      	ldr	r3, [pc, #272]	@ (80022f8 <Joy_State+0x2c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	static uint64_t timestamp2 =0;
	if(timestamp2 < HAL_GetTick())
 80021ec:	f000 ff0e 	bl	800300c <HAL_GetTick>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2200      	movs	r2, #0
 80021f4:	461c      	mov	r4, r3
 80021f6:	4615      	mov	r5, r2
 80021f8:	4b40      	ldr	r3, [pc, #256]	@ (80022fc <Joy_State+0x2c8>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	42a2      	cmp	r2, r4
 8002200:	41ab      	sbcs	r3, r5
 8002202:	d261      	bcs.n	80022c8 <Joy_State+0x294>
	{
		if (joySW == 0)
 8002204:	4b35      	ldr	r3, [pc, #212]	@ (80022dc <Joy_State+0x2a8>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d153      	bne.n	80022b4 <Joy_State+0x280>
		{
			switch (state)
 800220c:	4b34      	ldr	r3, [pc, #208]	@ (80022e0 <Joy_State+0x2ac>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d84f      	bhi.n	80022b4 <Joy_State+0x280>
 8002214:	a201      	add	r2, pc, #4	@ (adr r2, 800221c <Joy_State+0x1e8>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	0800222d 	.word	0x0800222d
 8002220:	0800224f 	.word	0x0800224f
 8002224:	08002271 	.word	0x08002271
 8002228:	08002293 	.word	0x08002293
			{
			case 0:
				state = 1;
 800222c:	4b2c      	ldr	r3, [pc, #176]	@ (80022e0 <Joy_State+0x2ac>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002232:	e007      	b.n	8002244 <Joy_State+0x210>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002234:	2101      	movs	r1, #1
 8002236:	4828      	ldr	r0, [pc, #160]	@ (80022d8 <Joy_State+0x2a4>)
 8002238:	f003 f930 	bl	800549c <HAL_GPIO_ReadPin>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b26      	ldr	r3, [pc, #152]	@ (80022dc <Joy_State+0x2a8>)
 8002242:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002244:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <Joy_State+0x2a8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f3      	beq.n	8002234 <Joy_State+0x200>
				}
				break;
 800224c:	e032      	b.n	80022b4 <Joy_State+0x280>
			case 1:
				state = 2;
 800224e:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <Joy_State+0x2ac>)
 8002250:	2202      	movs	r2, #2
 8002252:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002254:	e007      	b.n	8002266 <Joy_State+0x232>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002256:	2101      	movs	r1, #1
 8002258:	481f      	ldr	r0, [pc, #124]	@ (80022d8 <Joy_State+0x2a4>)
 800225a:	f003 f91f 	bl	800549c <HAL_GPIO_ReadPin>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <Joy_State+0x2a8>)
 8002264:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002266:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <Joy_State+0x2a8>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f3      	beq.n	8002256 <Joy_State+0x222>
				}
				break;
 800226e:	e021      	b.n	80022b4 <Joy_State+0x280>
			case 2:
				state = 3;
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <Joy_State+0x2ac>)
 8002272:	2203      	movs	r2, #3
 8002274:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002276:	e007      	b.n	8002288 <Joy_State+0x254>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002278:	2101      	movs	r1, #1
 800227a:	4817      	ldr	r0, [pc, #92]	@ (80022d8 <Joy_State+0x2a4>)
 800227c:	f003 f90e 	bl	800549c <HAL_GPIO_ReadPin>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <Joy_State+0x2a8>)
 8002286:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <Joy_State+0x2a8>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f3      	beq.n	8002278 <Joy_State+0x244>
				}
				break;
 8002290:	e010      	b.n	80022b4 <Joy_State+0x280>
			case 3:
				state = 0;
 8002292:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <Joy_State+0x2ac>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002298:	e007      	b.n	80022aa <Joy_State+0x276>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800229a:	2101      	movs	r1, #1
 800229c:	480e      	ldr	r0, [pc, #56]	@ (80022d8 <Joy_State+0x2a4>)
 800229e:	f003 f8fd 	bl	800549c <HAL_GPIO_ReadPin>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <Joy_State+0x2a8>)
 80022a8:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <Joy_State+0x2a8>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f3      	beq.n	800229a <Joy_State+0x266>
				}
				break;
 80022b2:	bf00      	nop
			}
		}
		timestamp2 = HAL_GetTick() + 100;
 80022b4:	f000 feaa 	bl	800300c <HAL_GetTick>
 80022b8:	4603      	mov	r3, r0
 80022ba:	3364      	adds	r3, #100	@ 0x64
 80022bc:	2200      	movs	r2, #0
 80022be:	469a      	mov	sl, r3
 80022c0:	4693      	mov	fp, r2
 80022c2:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <Joy_State+0x2c8>)
 80022c4:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	Joy_Averaged();
 80022c8:	f000 f81a 	bl	8002300 <Joy_Averaged>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022d6:	bf00      	nop
 80022d8:	48000800 	.word	0x48000800
 80022dc:	200004f8 	.word	0x200004f8
 80022e0:	200004f9 	.word	0x200004f9
 80022e4:	2000050a 	.word	0x2000050a
 80022e8:	20000308 	.word	0x20000308
 80022ec:	20000590 	.word	0x20000590
 80022f0:	20000508 	.word	0x20000508
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000354 	.word	0x20000354
 80022fc:	20000598 	.word	0x20000598

08002300 <Joy_Averaged>:

void Joy_Averaged()
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++)
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	e017      	b.n	800233c <Joy_Averaged+0x3c>
	{
		joySum[0] += joyAnalogRead[2*i];
 800230c:	4b21      	ldr	r3, [pc, #132]	@ (8002394 <Joy_Averaged+0x94>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	0052      	lsls	r2, r2, #1
 8002314:	4920      	ldr	r1, [pc, #128]	@ (8002398 <Joy_Averaged+0x98>)
 8002316:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800231a:	4413      	add	r3, r2
 800231c:	4a1d      	ldr	r2, [pc, #116]	@ (8002394 <Joy_Averaged+0x94>)
 800231e:	6013      	str	r3, [r2, #0]
		joySum[1] += joyAnalogRead[1+(2*i)];
 8002320:	4b1c      	ldr	r3, [pc, #112]	@ (8002394 <Joy_Averaged+0x94>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	0052      	lsls	r2, r2, #1
 8002328:	3201      	adds	r2, #1
 800232a:	491b      	ldr	r1, [pc, #108]	@ (8002398 <Joy_Averaged+0x98>)
 800232c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002330:	4413      	add	r3, r2
 8002332:	4a18      	ldr	r2, [pc, #96]	@ (8002394 <Joy_Averaged+0x94>)
 8002334:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 20; i++)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3301      	adds	r3, #1
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b13      	cmp	r3, #19
 8002340:	dde4      	ble.n	800230c <Joy_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	e014      	b.n	8002372 <Joy_Averaged+0x72>
	{
		joyAvg[i] = joySum[i] / 20;
 8002348:	4a12      	ldr	r2, [pc, #72]	@ (8002394 <Joy_Averaged+0x94>)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	4a12      	ldr	r2, [pc, #72]	@ (800239c <Joy_Averaged+0x9c>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	b299      	uxth	r1, r3
 800235a:	4a11      	ldr	r2, [pc, #68]	@ (80023a0 <Joy_Averaged+0xa0>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		joySum[i] = 0;
 8002362:	4a0c      	ldr	r2, [pc, #48]	@ (8002394 <Joy_Averaged+0x94>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2100      	movs	r1, #0
 8002368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	dde7      	ble.n	8002348 <Joy_Averaged+0x48>
	}

	joyX = joyAvg[0];
 8002378:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <Joy_Averaged+0xa0>)
 800237a:	881a      	ldrh	r2, [r3, #0]
 800237c:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <Joy_Averaged+0xa4>)
 800237e:	801a      	strh	r2, [r3, #0]
	joyY = joyAvg[1];
 8002380:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <Joy_Averaged+0xa0>)
 8002382:	885a      	ldrh	r2, [r3, #2]
 8002384:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <Joy_Averaged+0xa8>)
 8002386:	801a      	strh	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	20000500 	.word	0x20000500
 8002398:	200004a8 	.word	0x200004a8
 800239c:	cccccccd 	.word	0xcccccccd
 80023a0:	200004fc 	.word	0x200004fc
 80023a4:	20000508 	.word	0x20000508
 80023a8:	2000050a 	.word	0x2000050a
 80023ac:	00000000 	.word	0x00000000

080023b0 <Trajectory>:
void Trajectory()
{
 80023b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
	static uint64_t timestamp_Traject =0;
		int64_t currentTime = micros();
 80023b8:	f7ff fce0 	bl	8001d7c <micros>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	e9c7 2300 	strd	r2, r3, [r7]
		  if(timestamp_Traject < currentTime)
 80023c4:	4b9b      	ldr	r3, [pc, #620]	@ (8002634 <Trajectory+0x284>)
 80023c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ce:	4290      	cmp	r0, r2
 80023d0:	eb71 0303 	sbcs.w	r3, r1, r3
 80023d4:	f080 8242 	bcs.w	800285c <Trajectory+0x4ac>
		  {
			  switch(state_Tra)
 80023d8:	4b97      	ldr	r3, [pc, #604]	@ (8002638 <Trajectory+0x288>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	f200 821f 	bhi.w	8002820 <Trajectory+0x470>
 80023e2:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <Trajectory+0x38>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	080025ab 	.word	0x080025ab
 80023f0:	0800266d 	.word	0x0800266d
 80023f4:	08002783 	.word	0x08002783
			  	  		  {
			  	  		  case 0:
			  	  			  if(Pos_Start > Pos_Target)
 80023f8:	4b90      	ldr	r3, [pc, #576]	@ (800263c <Trajectory+0x28c>)
 80023fa:	ed93 7a00 	vldr	s14, [r3]
 80023fe:	4b90      	ldr	r3, [pc, #576]	@ (8002640 <Trajectory+0x290>)
 8002400:	edd3 7a00 	vldr	s15, [r3]
 8002404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240c:	dd08      	ble.n	8002420 <Trajectory+0x70>
			  	  			  {
			  	  				  direction = -1;
 800240e:	4b8d      	ldr	r3, [pc, #564]	@ (8002644 <Trajectory+0x294>)
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	601a      	str	r2, [r3, #0]
			  	  				  m_Direction = -1;
 8002416:	4b8c      	ldr	r3, [pc, #560]	@ (8002648 <Trajectory+0x298>)
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e005      	b.n	800242c <Trajectory+0x7c>
			  	  			  }
			  	  			  else
			  	  			  {
			  	  				  direction = 1;
 8002420:	4b88      	ldr	r3, [pc, #544]	@ (8002644 <Trajectory+0x294>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]
			  	  				  m_Direction = 1;
 8002426:	4b88      	ldr	r3, [pc, #544]	@ (8002648 <Trajectory+0x298>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
			  	  			  }
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)+((direction*0.5*Max_Acc)*(t*t));
 800242c:	4b87      	ldr	r3, [pc, #540]	@ (800264c <Trajectory+0x29c>)
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	4b87      	ldr	r3, [pc, #540]	@ (8002650 <Trajectory+0x2a0>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800243c:	4b7f      	ldr	r3, [pc, #508]	@ (800263c <Trajectory+0x28c>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002446:	ee17 0a90 	vmov	r0, s15
 800244a:	f7fe f849 	bl	80004e0 <__aeabi_f2d>
 800244e:	4680      	mov	r8, r0
 8002450:	4689      	mov	r9, r1
 8002452:	4b7c      	ldr	r3, [pc, #496]	@ (8002644 <Trajectory+0x294>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f830 	bl	80004bc <__aeabi_i2d>
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	4b7c      	ldr	r3, [pc, #496]	@ (8002654 <Trajectory+0x2a4>)
 8002462:	f7fe f895 	bl	8000590 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4692      	mov	sl, r2
 800246c:	469b      	mov	fp, r3
 800246e:	4b7a      	ldr	r3, [pc, #488]	@ (8002658 <Trajectory+0x2a8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f834 	bl	80004e0 <__aeabi_f2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4650      	mov	r0, sl
 800247e:	4659      	mov	r1, fp
 8002480:	f7fe f886 	bl	8000590 <__aeabi_dmul>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4692      	mov	sl, r2
 800248a:	469b      	mov	fp, r3
 800248c:	4b70      	ldr	r3, [pc, #448]	@ (8002650 <Trajectory+0x2a0>)
 800248e:	ed93 7a00 	vldr	s14, [r3]
 8002492:	4b6f      	ldr	r3, [pc, #444]	@ (8002650 <Trajectory+0x2a0>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	ee17 0a90 	vmov	r0, s15
 80024a0:	f7fe f81e 	bl	80004e0 <__aeabi_f2d>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4650      	mov	r0, sl
 80024aa:	4659      	mov	r1, fp
 80024ac:	f7fe f870 	bl	8000590 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4640      	mov	r0, r8
 80024b6:	4649      	mov	r1, r9
 80024b8:	f7fd feb4 	bl	8000224 <__adddf3>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fafe 	bl	8000ac4 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4a64      	ldr	r2, [pc, #400]	@ (800265c <Trajectory+0x2ac>)
 80024cc:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start + direction*Max_Acc*t;
 80024ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002644 <Trajectory+0x294>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024da:	4b5f      	ldr	r3, [pc, #380]	@ (8002658 <Trajectory+0x2a8>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002650 <Trajectory+0x2a0>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ee:	4b57      	ldr	r3, [pc, #348]	@ (800264c <Trajectory+0x29c>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f8:	4b59      	ldr	r3, [pc, #356]	@ (8002660 <Trajectory+0x2b0>)
 80024fa:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = Max_Acc*direction;
 80024fe:	4b51      	ldr	r3, [pc, #324]	@ (8002644 <Trajectory+0x294>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250a:	4b53      	ldr	r3, [pc, #332]	@ (8002658 <Trajectory+0x2a8>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <Trajectory+0x2b4>)
 8002516:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) >= Max_Velo)
 800251a:	4b51      	ldr	r3, [pc, #324]	@ (8002660 <Trajectory+0x2b0>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eeb0 7ae7 	vabs.f32	s14, s15
 8002524:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <Trajectory+0x2b8>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	db0e      	blt.n	8002552 <Trajectory+0x1a2>
			  	  				{
			  	  					state_Tra = 1;
 8002534:	4b40      	ldr	r3, [pc, #256]	@ (8002638 <Trajectory+0x288>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 800253a:	4b48      	ldr	r3, [pc, #288]	@ (800265c <Trajectory+0x2ac>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a3f      	ldr	r2, [pc, #252]	@ (800263c <Trajectory+0x28c>)
 8002540:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 8002542:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <Trajectory+0x2b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a41      	ldr	r2, [pc, #260]	@ (800264c <Trajectory+0x29c>)
 8002548:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 800254a:	4b41      	ldr	r3, [pc, #260]	@ (8002650 <Trajectory+0x2a0>)
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
			  	  				}
			  	  			  if(fabs((q_Pos-Pos_Start)*2) >= fabs(Pos_Target-Pos_Start))
 8002552:	4b42      	ldr	r3, [pc, #264]	@ (800265c <Trajectory+0x2ac>)
 8002554:	ed93 7a00 	vldr	s14, [r3]
 8002558:	4b38      	ldr	r3, [pc, #224]	@ (800263c <Trajectory+0x28c>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002566:	eeb0 7ae7 	vabs.f32	s14, s15
 800256a:	4b35      	ldr	r3, [pc, #212]	@ (8002640 <Trajectory+0x290>)
 800256c:	edd3 6a00 	vldr	s13, [r3]
 8002570:	4b32      	ldr	r3, [pc, #200]	@ (800263c <Trajectory+0x28c>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800257a:	eef0 7ae7 	vabs.f32	s15, s15
 800257e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	da00      	bge.n	800258a <Trajectory+0x1da>
			  	  				state_Tra = 2;
								Pos_Start = q_Pos;
								Velo_Start = q_Velo;
								t = 0;
			  	  			  }
			  	  			  	break;
 8002588:	e14a      	b.n	8002820 <Trajectory+0x470>
			  	  				state_Tra = 2;
 800258a:	4b2b      	ldr	r3, [pc, #172]	@ (8002638 <Trajectory+0x288>)
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
								Pos_Start = q_Pos;
 8002590:	4b32      	ldr	r3, [pc, #200]	@ (800265c <Trajectory+0x2ac>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a29      	ldr	r2, [pc, #164]	@ (800263c <Trajectory+0x28c>)
 8002596:	6013      	str	r3, [r2, #0]
								Velo_Start = q_Velo;
 8002598:	4b31      	ldr	r3, [pc, #196]	@ (8002660 <Trajectory+0x2b0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2b      	ldr	r2, [pc, #172]	@ (800264c <Trajectory+0x29c>)
 800259e:	6013      	str	r3, [r2, #0]
								t = 0;
 80025a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <Trajectory+0x2a0>)
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 80025a8:	e13a      	b.n	8002820 <Trajectory+0x470>
			  	  		  case 1:
			  	  			  	q_Pos = Pos_Start +(Velo_Start*t);
 80025aa:	4b28      	ldr	r3, [pc, #160]	@ (800264c <Trajectory+0x29c>)
 80025ac:	ed93 7a00 	vldr	s14, [r3]
 80025b0:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <Trajectory+0x2a0>)
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ba:	4b20      	ldr	r3, [pc, #128]	@ (800263c <Trajectory+0x28c>)
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c4:	4b25      	ldr	r3, [pc, #148]	@ (800265c <Trajectory+0x2ac>)
 80025c6:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Velo = Velo_Start;
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <Trajectory+0x29c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a24      	ldr	r2, [pc, #144]	@ (8002660 <Trajectory+0x2b0>)
 80025d0:	6013      	str	r3, [r2, #0]
			  	  			  	q_Acc = 0;
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <Trajectory+0x2b4>)
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
			  	  			  if(Pos_Target-q_Pos <= (q_Velo*q_Velo)/(2*Max_Acc))
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <Trajectory+0x290>)
 80025dc:	ed93 7a00 	vldr	s14, [r3]
 80025e0:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <Trajectory+0x2ac>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <Trajectory+0x2b0>)
 80025ec:	edd3 6a00 	vldr	s13, [r3]
 80025f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <Trajectory+0x2b0>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80025fa:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <Trajectory+0x2a8>)
 80025fc:	edd3 7a00 	vldr	s15, [r3]
 8002600:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002604:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	d900      	bls.n	8002614 <Trajectory+0x264>
			  	  					state_Tra = 2;
			  	  					Pos_Start = q_Pos;
			  	  					Velo_Start = q_Velo;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 8002612:	e105      	b.n	8002820 <Trajectory+0x470>
			  	  					state_Tra = 2;
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <Trajectory+0x288>)
 8002616:	2202      	movs	r2, #2
 8002618:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <Trajectory+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a07      	ldr	r2, [pc, #28]	@ (800263c <Trajectory+0x28c>)
 8002620:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 8002622:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <Trajectory+0x2b0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a09      	ldr	r2, [pc, #36]	@ (800264c <Trajectory+0x29c>)
 8002628:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 800262a:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <Trajectory+0x2a0>)
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8002632:	e0f5      	b.n	8002820 <Trajectory+0x470>
 8002634:	200005a0 	.word	0x200005a0
 8002638:	200004a4 	.word	0x200004a4
 800263c:	2000048c 	.word	0x2000048c
 8002640:	20000004 	.word	0x20000004
 8002644:	20000014 	.word	0x20000014
 8002648:	20000018 	.word	0x20000018
 800264c:	20000490 	.word	0x20000490
 8002650:	200004a0 	.word	0x200004a0
 8002654:	3fe00000 	.word	0x3fe00000
 8002658:	20000010 	.word	0x20000010
 800265c:	20000494 	.word	0x20000494
 8002660:	20000498 	.word	0x20000498
 8002664:	2000049c 	.word	0x2000049c
 8002668:	2000000c 	.word	0x2000000c
			  	  		  case 2:
//			  	  			  	if(direction == -1)
//			  	  			  	{
//			  	  			  	 m_Direction = 1;
//			  	  			  	}
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)-((direction*0.5*Max_Acc)*(t*t));
 800266c:	4b80      	ldr	r3, [pc, #512]	@ (8002870 <Trajectory+0x4c0>)
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	4b80      	ldr	r3, [pc, #512]	@ (8002874 <Trajectory+0x4c4>)
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800267c:	4b7e      	ldr	r3, [pc, #504]	@ (8002878 <Trajectory+0x4c8>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	ee17 0a90 	vmov	r0, s15
 800268a:	f7fd ff29 	bl	80004e0 <__aeabi_f2d>
 800268e:	4680      	mov	r8, r0
 8002690:	4689      	mov	r9, r1
 8002692:	4b7a      	ldr	r3, [pc, #488]	@ (800287c <Trajectory+0x4cc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff10 	bl	80004bc <__aeabi_i2d>
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b77      	ldr	r3, [pc, #476]	@ (8002880 <Trajectory+0x4d0>)
 80026a2:	f7fd ff75 	bl	8000590 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4692      	mov	sl, r2
 80026ac:	469b      	mov	fp, r3
 80026ae:	4b75      	ldr	r3, [pc, #468]	@ (8002884 <Trajectory+0x4d4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd ff14 	bl	80004e0 <__aeabi_f2d>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4650      	mov	r0, sl
 80026be:	4659      	mov	r1, fp
 80026c0:	f7fd ff66 	bl	8000590 <__aeabi_dmul>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4692      	mov	sl, r2
 80026ca:	469b      	mov	fp, r3
 80026cc:	4b69      	ldr	r3, [pc, #420]	@ (8002874 <Trajectory+0x4c4>)
 80026ce:	ed93 7a00 	vldr	s14, [r3]
 80026d2:	4b68      	ldr	r3, [pc, #416]	@ (8002874 <Trajectory+0x4c4>)
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026dc:	ee17 0a90 	vmov	r0, s15
 80026e0:	f7fd fefe 	bl	80004e0 <__aeabi_f2d>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4650      	mov	r0, sl
 80026ea:	4659      	mov	r1, fp
 80026ec:	f7fd ff50 	bl	8000590 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4640      	mov	r0, r8
 80026f6:	4649      	mov	r1, r9
 80026f8:	f7fd fd92 	bl	8000220 <__aeabi_dsub>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe f9de 	bl	8000ac4 <__aeabi_d2f>
 8002708:	4603      	mov	r3, r0
 800270a:	4a5f      	ldr	r2, [pc, #380]	@ (8002888 <Trajectory+0x4d8>)
 800270c:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start - direction*Max_Acc*t;
 800270e:	4b58      	ldr	r3, [pc, #352]	@ (8002870 <Trajectory+0x4c0>)
 8002710:	ed93 7a00 	vldr	s14, [r3]
 8002714:	4b59      	ldr	r3, [pc, #356]	@ (800287c <Trajectory+0x4cc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002720:	4b58      	ldr	r3, [pc, #352]	@ (8002884 <Trajectory+0x4d4>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800272a:	4b52      	ldr	r3, [pc, #328]	@ (8002874 <Trajectory+0x4c4>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002738:	4b54      	ldr	r3, [pc, #336]	@ (800288c <Trajectory+0x4dc>)
 800273a:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = -direction*Max_Acc;
 800273e:	4b4f      	ldr	r3, [pc, #316]	@ (800287c <Trajectory+0x4cc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	425b      	negs	r3, r3
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800274c:	4b4d      	ldr	r3, [pc, #308]	@ (8002884 <Trajectory+0x4d4>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002756:	4b4e      	ldr	r3, [pc, #312]	@ (8002890 <Trajectory+0x4e0>)
 8002758:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) <= 0)
 800275c:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <Trajectory+0x4dc>)
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	eef0 7ae7 	vabs.f32	s15, s15
 8002766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	d900      	bls.n	8002772 <Trajectory+0x3c2>
			  	  				{
			  	  					state_Tra = 3;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 8002770:	e056      	b.n	8002820 <Trajectory+0x470>
			  	  					state_Tra = 3;
 8002772:	4b48      	ldr	r3, [pc, #288]	@ (8002894 <Trajectory+0x4e4>)
 8002774:	2203      	movs	r2, #3
 8002776:	601a      	str	r2, [r3, #0]
			  	  					t = 0;
 8002778:	4b3e      	ldr	r3, [pc, #248]	@ (8002874 <Trajectory+0x4c4>)
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8002780:	e04e      	b.n	8002820 <Trajectory+0x470>
			  	  		  case 3:
			  	  			  	if(Pos_Target != Old_Target)
 8002782:	4b45      	ldr	r3, [pc, #276]	@ (8002898 <Trajectory+0x4e8>)
 8002784:	ed93 7a00 	vldr	s14, [r3]
 8002788:	4b44      	ldr	r3, [pc, #272]	@ (800289c <Trajectory+0x4ec>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002796:	d042      	beq.n	800281e <Trajectory+0x46e>
			  	  			  	{


			  	  			  		state_Tra = 0;
 8002798:	4b3e      	ldr	r3, [pc, #248]	@ (8002894 <Trajectory+0x4e4>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
			  	  			  		t = 0;
 800279e:	4b35      	ldr	r3, [pc, #212]	@ (8002874 <Trajectory+0x4c4>)
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
			  	  			  		Pos_Start = q_Pos;
 80027a6:	4b38      	ldr	r3, [pc, #224]	@ (8002888 <Trajectory+0x4d8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a33      	ldr	r2, [pc, #204]	@ (8002878 <Trajectory+0x4c8>)
 80027ac:	6013      	str	r3, [r2, #0]
			  	  			  		Velo_Start = q_Velo;
 80027ae:	4b37      	ldr	r3, [pc, #220]	@ (800288c <Trajectory+0x4dc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002870 <Trajectory+0x4c0>)
 80027b4:	6013      	str	r3, [r2, #0]
			  	  			  		Old_Target = Pos_Target;
 80027b6:	4b38      	ldr	r3, [pc, #224]	@ (8002898 <Trajectory+0x4e8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a38      	ldr	r2, [pc, #224]	@ (800289c <Trajectory+0x4ec>)
 80027bc:	6013      	str	r3, [r2, #0]


			  	  			  		Velocontrol.Error[NEW] = 0;
 80027be:	4b38      	ldr	r3, [pc, #224]	@ (80028a0 <Trajectory+0x4f0>)
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
									Velocontrol.Error[OLD] = 0;
 80027c6:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <Trajectory+0x4f0>)
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
									Velocontrol.Error[OLDER] = 0;
 80027ce:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <Trajectory+0x4f0>)
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	615a      	str	r2, [r3, #20]
									Velocontrol.Output[NEW] = 0;
 80027d6:	4b32      	ldr	r3, [pc, #200]	@ (80028a0 <Trajectory+0x4f0>)
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
									Velocontrol.Output[OLD] = 0;
 80027de:	4b30      	ldr	r3, [pc, #192]	@ (80028a0 <Trajectory+0x4f0>)
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	605a      	str	r2, [r3, #4]
									Velocontrol.Output[OLDER] = 0;
 80027e6:	4b2e      	ldr	r3, [pc, #184]	@ (80028a0 <Trajectory+0x4f0>)
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]

									Poscontrol.Error[NEW] = 0;
 80027ee:	4b2d      	ldr	r3, [pc, #180]	@ (80028a4 <Trajectory+0x4f4>)
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
									Poscontrol.Error[OLD] = 0;
 80027f6:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <Trajectory+0x4f4>)
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
									Poscontrol.Error[OLDER] = 0;
 80027fe:	4b29      	ldr	r3, [pc, #164]	@ (80028a4 <Trajectory+0x4f4>)
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	615a      	str	r2, [r3, #20]
									Poscontrol.Output[NEW] = 0;
 8002806:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <Trajectory+0x4f4>)
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
									Poscontrol.Output[OLD] = 0;
 800280e:	4b25      	ldr	r3, [pc, #148]	@ (80028a4 <Trajectory+0x4f4>)
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
									Poscontrol.Output[OLDER] = 0;
 8002816:	4b23      	ldr	r3, [pc, #140]	@ (80028a4 <Trajectory+0x4f4>)
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	609a      	str	r2, [r3, #8]

			  	  			  	}
			  	  			  	break;
 800281e:	bf00      	nop
//			  output = ((2*kp_Velo*T*error_Velo) - (2*kp_Velo*T*error_Velo_2) +(ki_Velo*T*T*error_Velo)+(2*ki_Velo*T*T*error_Velo_1)+(ki_Velo*T*T*error_Velo_2)+(4*kd_Velo*error_Velo)-(8*kd_Velo*error_Velo_1)-(4*kd_Velo*error_Velo_2)+(2*output_2*T))/(2*T);
//			  error_Velo_2 = error_Velo_1;
//			  error_Velo_1 = error_Velo;
//			  output_2 = output_1;
//			  output_1 = output;
		  t = t+0.0001;
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <Trajectory+0x4c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fe5b 	bl	80004e0 <__aeabi_f2d>
 800282a:	a30f      	add	r3, pc, #60	@ (adr r3, 8002868 <Trajectory+0x4b8>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fd fcf8 	bl	8000224 <__adddf3>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f7fe f942 	bl	8000ac4 <__aeabi_d2f>
 8002840:	4603      	mov	r3, r0
 8002842:	4a0c      	ldr	r2, [pc, #48]	@ (8002874 <Trajectory+0x4c4>)
 8002844:	6013      	str	r3, [r2, #0]
		  timestamp_Traject = currentTime + 100;
 8002846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800284a:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 800284e:	f143 0500 	adc.w	r5, r3, #0
 8002852:	4622      	mov	r2, r4
 8002854:	462b      	mov	r3, r5
 8002856:	4914      	ldr	r1, [pc, #80]	@ (80028a8 <Trajectory+0x4f8>)
 8002858:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002866:	bf00      	nop
 8002868:	eb1c432d 	.word	0xeb1c432d
 800286c:	3f1a36e2 	.word	0x3f1a36e2
 8002870:	20000490 	.word	0x20000490
 8002874:	200004a0 	.word	0x200004a0
 8002878:	2000048c 	.word	0x2000048c
 800287c:	20000014 	.word	0x20000014
 8002880:	3fe00000 	.word	0x3fe00000
 8002884:	20000010 	.word	0x20000010
 8002888:	20000494 	.word	0x20000494
 800288c:	20000498 	.word	0x20000498
 8002890:	2000049c 	.word	0x2000049c
 8002894:	200004a4 	.word	0x200004a4
 8002898:	20000004 	.word	0x20000004
 800289c:	20000008 	.word	0x20000008
 80028a0:	2000043c 	.word	0x2000043c
 80028a4:	20000464 	.word	0x20000464
 80028a8:	200005a0 	.word	0x200005a0

080028ac <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028bc:	d102      	bne.n	80028c4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start  = 1;
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_4)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d107      	bne.n	80028da <HAL_GPIO_EXTI_Callback+0x2e>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80028ca:	2120      	movs	r1, #32
 80028cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028d0:	f002 fe14 	bl	80054fc <HAL_GPIO_TogglePin>
//		__HAL_TIM_SET_COUNTER(&htim3,0);
		start = 2;
 80028d4:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80028d6:	2202      	movs	r2, #2
 80028d8:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_5)
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d107      	bne.n	80028f0 <HAL_GPIO_EXTI_Callback+0x44>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80028e0:	2120      	movs	r1, #32
 80028e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e6:	f002 fe09 	bl	80054fc <HAL_GPIO_TogglePin>
		start = 2;
 80028ea:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80028ec:	2202      	movs	r2, #2
 80028ee:	601a      	str	r2, [r3, #0]
	}
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000438 	.word	0x20000438

080028fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002900:	b672      	cpsid	i
}
 8002902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <Error_Handler+0x8>

08002908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <HAL_MspInit+0x44>)
 8002910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002912:	4a0e      	ldr	r2, [pc, #56]	@ (800294c <HAL_MspInit+0x44>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6613      	str	r3, [r2, #96]	@ 0x60
 800291a:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <HAL_MspInit+0x44>)
 800291c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	4b09      	ldr	r3, [pc, #36]	@ (800294c <HAL_MspInit+0x44>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	4a08      	ldr	r2, [pc, #32]	@ (800294c <HAL_MspInit+0x44>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002930:	6593      	str	r3, [r2, #88]	@ 0x58
 8002932:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_MspInit+0x44>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800293e:	f002 feb3 	bl	80056a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b0a0      	sub	sp, #128	@ 0x80
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002968:	f107 0318 	add.w	r3, r7, #24
 800296c:	2254      	movs	r2, #84	@ 0x54
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f007 fbc9 	bl	800a108 <memset>
  if(hadc->Instance==ADC1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800297e:	d160      	bne.n	8002a42 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002984:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002986:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800298a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800298c:	f107 0318 	add.w	r3, r7, #24
 8002990:	4618      	mov	r0, r3
 8002992:	f003 fbc7 	bl	8006124 <HAL_RCCEx_PeriphCLKConfig>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800299c:	f7ff ffae 	bl	80028fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a4:	4a5b      	ldr	r2, [pc, #364]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 80029a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b8:	4b56      	ldr	r3, [pc, #344]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029bc:	4a55      	ldr	r2, [pc, #340]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c4:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029d6:	2303      	movs	r3, #3
 80029d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80029e2:	4619      	mov	r1, r3
 80029e4:	484c      	ldr	r0, [pc, #304]	@ (8002b18 <HAL_ADC_MspInit+0x1c8>)
 80029e6:	f002 fbd7 	bl	8005198 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80029ea:	4b4c      	ldr	r3, [pc, #304]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 80029ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002b20 <HAL_ADC_MspInit+0x1d0>)
 80029ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80029f0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 80029f2:	2205      	movs	r2, #5
 80029f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fc:	4b47      	ldr	r3, [pc, #284]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a02:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 8002a04:	2280      	movs	r2, #128	@ 0x80
 8002a06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a08:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 8002a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a10:	4b42      	ldr	r3, [pc, #264]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 8002a12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a18:	4b40      	ldr	r3, [pc, #256]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a24:	483d      	ldr	r0, [pc, #244]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 8002a26:	f002 f885 	bl	8004b34 <HAL_DMA_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002a30:	f7ff ff64 	bl	80028fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a39      	ldr	r2, [pc, #228]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 8002a38:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a3a:	4a38      	ldr	r2, [pc, #224]	@ (8002b1c <HAL_ADC_MspInit+0x1cc>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a40:	e064      	b.n	8002b0c <HAL_ADC_MspInit+0x1bc>
  else if(hadc->Instance==ADC3)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a37      	ldr	r2, [pc, #220]	@ (8002b24 <HAL_ADC_MspInit+0x1d4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d15f      	bne.n	8002b0c <HAL_ADC_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002a4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002a52:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002a56:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 fb61 	bl	8006124 <HAL_RCCEx_PeriphCLKConfig>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_ADC_MspInit+0x11c>
      Error_Handler();
 8002a68:	f7ff ff48 	bl	80028fc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8002a6c:	4b29      	ldr	r3, [pc, #164]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a70:	4a28      	ldr	r2, [pc, #160]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 8002a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a78:	4b26      	ldr	r3, [pc, #152]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a84:	4b23      	ldr	r3, [pc, #140]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 8002a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a88:	4a22      	ldr	r2, [pc, #136]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a90:	4b20      	ldr	r3, [pc, #128]	@ (8002b14 <HAL_ADC_MspInit+0x1c4>)
 8002a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8002a9c:	f242 0302 	movw	r3, #8194	@ 0x2002
 8002aa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4819      	ldr	r0, [pc, #100]	@ (8002b18 <HAL_ADC_MspInit+0x1c8>)
 8002ab2:	f002 fb71 	bl	8005198 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel2;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b2c <HAL_ADC_MspInit+0x1dc>)
 8002aba:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002abe:	2225      	movs	r2, #37	@ 0x25
 8002ac0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ace:	4b16      	ldr	r3, [pc, #88]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002ad0:	2280      	movs	r2, #128	@ 0x80
 8002ad2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ad4:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002ad6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ada:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002adc:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002ade:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ae2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002ae4:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002af0:	480d      	ldr	r0, [pc, #52]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002af2:	f002 f81f 	bl	8004b34 <HAL_DMA_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8002afc:	f7ff fefe 	bl	80028fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a09      	ldr	r2, [pc, #36]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b06:	4a08      	ldr	r2, [pc, #32]	@ (8002b28 <HAL_ADC_MspInit+0x1d8>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002b0c:	bf00      	nop
 8002b0e:	3780      	adds	r7, #128	@ 0x80
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	2000011c 	.word	0x2000011c
 8002b20:	40020008 	.word	0x40020008
 8002b24:	50000400 	.word	0x50000400
 8002b28:	2000017c 	.word	0x2000017c
 8002b2c:	4002001c 	.word	0x4002001c

08002b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b09e      	sub	sp, #120	@ 0x78
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b48:	f107 0310 	add.w	r3, r7, #16
 8002b4c:	2254      	movs	r2, #84	@ 0x54
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f007 fad9 	bl	800a108 <memset>
  if(huart->Instance==LPUART1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a23      	ldr	r2, [pc, #140]	@ (8002be8 <HAL_UART_MspInit+0xb8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d13e      	bne.n	8002bde <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b60:	2320      	movs	r3, #32
 8002b62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 fad9 	bl	8006124 <HAL_RCCEx_PeriphCLKConfig>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b78:	f7ff fec0 	bl	80028fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <HAL_UART_MspInit+0xbc>)
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b80:	4a1a      	ldr	r2, [pc, #104]	@ (8002bec <HAL_UART_MspInit+0xbc>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002b88:	4b18      	ldr	r3, [pc, #96]	@ (8002bec <HAL_UART_MspInit+0xbc>)
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b94:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_UART_MspInit+0xbc>)
 8002b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b98:	4a14      	ldr	r2, [pc, #80]	@ (8002bec <HAL_UART_MspInit+0xbc>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba0:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <HAL_UART_MspInit+0xbc>)
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002bac:	230c      	movs	r3, #12
 8002bae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bca:	f002 fae5 	bl	8005198 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	205b      	movs	r0, #91	@ 0x5b
 8002bd4:	f001 ff79 	bl	8004aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002bd8:	205b      	movs	r0, #91	@ 0x5b
 8002bda:	f001 ff90 	bl	8004afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002bde:	bf00      	nop
 8002be0:	3778      	adds	r7, #120	@ 0x78
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40008000 	.word	0x40008000
 8002bec:	40021000 	.word	0x40021000

08002bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a31      	ldr	r2, [pc, #196]	@ (8002cc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10c      	bne.n	8002c1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c02:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c06:	4a30      	ldr	r2, [pc, #192]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c1a:	e04e      	b.n	8002cba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c24:	d10c      	bne.n	8002c40 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c26:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2a:	4a27      	ldr	r2, [pc, #156]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c32:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
}
 8002c3e:	e03c      	b.n	8002cba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a21      	ldr	r2, [pc, #132]	@ (8002ccc <HAL_TIM_Base_MspInit+0xdc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d10c      	bne.n	8002c64 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c56:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	697b      	ldr	r3, [r7, #20]
}
 8002c62:	e02a      	b.n	8002cba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a19      	ldr	r2, [pc, #100]	@ (8002cd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d114      	bne.n	8002c98 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c6e:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c72:	4a15      	ldr	r2, [pc, #84]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c74:	f043 0308 	orr.w	r3, r3, #8
 8002c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c7a:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	2032      	movs	r0, #50	@ 0x32
 8002c8c:	f001 ff1d 	bl	8004aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c90:	2032      	movs	r0, #50	@ 0x32
 8002c92:	f001 ff34 	bl	8004afe <HAL_NVIC_EnableIRQ>
}
 8002c96:	e010      	b.n	8002cba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd4 <HAL_TIM_Base_MspInit+0xe4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10b      	bne.n	8002cba <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca6:	4a08      	ldr	r2, [pc, #32]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002ca8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cac:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
}
 8002cba:	bf00      	nop
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	40000c00 	.word	0x40000c00
 8002cd4:	40013400 	.word	0x40013400

08002cd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	@ 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d130      	bne.n	8002d5c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_TIM_Encoder_MspInit+0x90>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002d68 <HAL_TIM_Encoder_MspInit+0x90>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d06:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <HAL_TIM_Encoder_MspInit+0x90>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d12:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <HAL_TIM_Encoder_MspInit+0x90>)
 8002d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d16:	4a14      	ldr	r2, [pc, #80]	@ (8002d68 <HAL_TIM_Encoder_MspInit+0x90>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d1e:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_TIM_Encoder_MspInit+0x90>)
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d2a:	23c0      	movs	r3, #192	@ 0xc0
 8002d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3e:	f107 0314 	add.w	r3, r7, #20
 8002d42:	4619      	mov	r1, r3
 8002d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d48:	f002 fa26 	bl	8005198 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	201d      	movs	r0, #29
 8002d52:	f001 feba 	bl	8004aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d56:	201d      	movs	r0, #29
 8002d58:	f001 fed1 	bl	8004afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	3728      	adds	r7, #40	@ 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40021000 	.word	0x40021000

08002d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 030c 	add.w	r3, r7, #12
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a12      	ldr	r2, [pc, #72]	@ (8002dd4 <HAL_TIM_MspPostInit+0x68>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d11d      	bne.n	8002dca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_TIM_MspPostInit+0x6c>)
 8002d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d92:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <HAL_TIM_MspPostInit+0x6c>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd8 <HAL_TIM_MspPostInit+0x6c>)
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002da6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002daa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002db8:	230a      	movs	r3, #10
 8002dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dc6:	f002 f9e7 	bl	8005198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002dca:	bf00      	nop
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40000800 	.word	0x40000800
 8002dd8:	40021000 	.word	0x40021000

08002ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002de0:	bf00      	nop
 8002de2:	e7fd      	b.n	8002de0 <NMI_Handler+0x4>

08002de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de8:	bf00      	nop
 8002dea:	e7fd      	b.n	8002de8 <HardFault_Handler+0x4>

08002dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <MemManage_Handler+0x4>

08002df4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <BusFault_Handler+0x4>

08002dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <UsageFault_Handler+0x4>

08002e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e32:	f000 f8d9 	bl	8002fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002e3e:	2010      	movs	r0, #16
 8002e40:	f002 fb76 	bl	8005530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e4c:	4802      	ldr	r0, [pc, #8]	@ (8002e58 <DMA1_Channel1_IRQHandler+0x10>)
 8002e4e:	f002 f854 	bl	8004efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	2000011c 	.word	0x2000011c

08002e5c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002e60:	4802      	ldr	r0, [pc, #8]	@ (8002e6c <DMA1_Channel2_IRQHandler+0x10>)
 8002e62:	f002 f84a 	bl	8004efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000017c 	.word	0x2000017c

08002e70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002e74:	2020      	movs	r0, #32
 8002e76:	f002 fb5b 	bl	8005530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e84:	4802      	ldr	r0, [pc, #8]	@ (8002e90 <TIM3_IRQHandler+0x10>)
 8002e86:	f003 ff83 	bl	8006d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000308 	.word	0x20000308

08002e94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e98:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e9c:	f002 fb48 	bl	8005530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ea8:	4802      	ldr	r0, [pc, #8]	@ (8002eb4 <TIM5_IRQHandler+0x10>)
 8002eaa:	f003 ff71 	bl	8006d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200003a0 	.word	0x200003a0

08002eb8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ebc:	4802      	ldr	r0, [pc, #8]	@ (8002ec8 <LPUART1_IRQHandler+0x10>)
 8002ebe:	f005 f921 	bl	8008104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200001dc 	.word	0x200001dc

08002ecc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ed0:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <SystemInit+0x20>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	4a05      	ldr	r2, [pc, #20]	@ (8002eec <SystemInit+0x20>)
 8002ed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002edc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ef0:	480d      	ldr	r0, [pc, #52]	@ (8002f28 <LoopForever+0x2>)

  mov   sp, r0          /* set stack pointer */
 8002ef2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ef4:	f7ff ffea 	bl	8002ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ef8:	480c      	ldr	r0, [pc, #48]	@ (8002f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002efa:	490d      	ldr	r1, [pc, #52]	@ (8002f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002efc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f34 <LoopForever+0xe>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002f00:	e002      	b.n	8002f08 <LoopCopyDataInit>

08002f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f06:	3304      	adds	r3, #4

08002f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f0c:	d3f9      	bcc.n	8002f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f10:	4c0a      	ldr	r4, [pc, #40]	@ (8002f3c <LoopForever+0x16>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f14:	e001      	b.n	8002f1a <LoopFillZerobss>

08002f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f18:	3204      	adds	r2, #4

08002f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f1c:	d3fb      	bcc.n	8002f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f1e:	f007 f8fb 	bl	800a118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f22:	f7fd ff99 	bl	8000e58 <main>

08002f26 <LoopForever>:

LoopForever:
    b LoopForever
 8002f26:	e7fe      	b.n	8002f26 <LoopForever>
  ldr   r0, =_estack
 8002f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f30:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002f34:	0800a1c8 	.word	0x0800a1c8
  ldr r2, =_sbss
 8002f38:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002f3c:	200005ac 	.word	0x200005ac

08002f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f40:	e7fe      	b.n	8002f40 <ADC1_2_IRQHandler>

08002f42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4c:	2003      	movs	r0, #3
 8002f4e:	f001 fdb1 	bl	8004ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f52:	2000      	movs	r0, #0
 8002f54:	f000 f80e 	bl	8002f74 <HAL_InitTick>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	71fb      	strb	r3, [r7, #7]
 8002f62:	e001      	b.n	8002f68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f64:	f7ff fcd0 	bl	8002908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f68:	79fb      	ldrb	r3, [r7, #7]

}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f80:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <HAL_InitTick+0x68>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d022      	beq.n	8002fce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f88:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <HAL_InitTick+0x6c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <HAL_InitTick+0x68>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fdbc 	bl	8004b1a <HAL_SYSTICK_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10f      	bne.n	8002fc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b0f      	cmp	r3, #15
 8002fac:	d809      	bhi.n	8002fc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb6:	f001 fd88 	bl	8004aca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fba:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <HAL_InitTick+0x70>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	e007      	b.n	8002fd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e004      	b.n	8002fd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	e001      	b.n	8002fd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000024 	.word	0x20000024
 8002fe0:	2000001c 	.word	0x2000001c
 8002fe4:	20000020 	.word	0x20000020

08002fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_IncTick+0x1c>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_IncTick+0x20>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	4a03      	ldr	r2, [pc, #12]	@ (8003004 <HAL_IncTick+0x1c>)
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	200005a8 	.word	0x200005a8
 8003008:	20000024 	.word	0x20000024

0800300c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return uwTick;
 8003010:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <HAL_GetTick+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	200005a8 	.word	0x200005a8

08003024 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3360      	adds	r3, #96	@ 0x60
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b08      	ldr	r3, [pc, #32]	@ (80030d0 <LL_ADC_SetOffset+0x44>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	03fff000 	.word	0x03fff000

080030d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3360      	adds	r3, #96	@ 0x60
 80030e2:	461a      	mov	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3360      	adds	r3, #96	@ 0x60
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	431a      	orrs	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3360      	adds	r3, #96	@ 0x60
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	431a      	orrs	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3360      	adds	r3, #96	@ 0x60
 800317c:	461a      	mov	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	431a      	orrs	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	615a      	str	r2, [r3, #20]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3330      	adds	r3, #48	@ 0x30
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	4413      	add	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	211f      	movs	r1, #31
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	f003 011f 	and.w	r1, r3, #31
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003246:	b480      	push	{r7}
 8003248:	b087      	sub	sp, #28
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3314      	adds	r3, #20
 8003256:	461a      	mov	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	0e5b      	lsrs	r3, r3, #25
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	4413      	add	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0d1b      	lsrs	r3, r3, #20
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2107      	movs	r1, #7
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	401a      	ands	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	0d1b      	lsrs	r3, r3, #20
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	431a      	orrs	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b4:	43db      	mvns	r3, r3
 80032b6:	401a      	ands	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f003 0318 	and.w	r3, r3, #24
 80032be:	4908      	ldr	r1, [pc, #32]	@ (80032e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80032c0:	40d9      	lsrs	r1, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	400b      	ands	r3, r1
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	0007ffff 	.word	0x0007ffff

080032e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 031f 	and.w	r3, r3, #31
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6093      	str	r3, [r2, #8]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003338:	d101      	bne.n	800333e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800335c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003360:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003388:	d101      	bne.n	800338e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <LL_ADC_IsEnabled+0x18>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <LL_ADC_IsEnabled+0x1a>
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d101      	bne.n	800342a <LL_ADC_IsDisableOngoing+0x18>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <LL_ADC_IsDisableOngoing+0x1a>
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003448:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800344c:	f043 0204 	orr.w	r2, r3, #4
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d101      	bne.n	8003478 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b08      	cmp	r3, #8
 8003498:	d101      	bne.n	800349e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b089      	sub	sp, #36	@ 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1a9      	b.n	800381a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d109      	bne.n	80034e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff fa3b 	bl	8002950 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff19 	bl	8003324 <LL_ADC_IsDeepPowerDownEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff feff 	bl	8003300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ff34 	bl	8003374 <LL_ADC_IsInternalRegulatorEnabled>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d115      	bne.n	800353e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ff18 	bl	800334c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800351c:	4b9c      	ldr	r3, [pc, #624]	@ (8003790 <HAL_ADC_Init+0x2e4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	4a9c      	ldr	r2, [pc, #624]	@ (8003794 <HAL_ADC_Init+0x2e8>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	099b      	lsrs	r3, r3, #6
 800352a:	3301      	adds	r3, #1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003530:	e002      	b.n	8003538 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3b01      	subs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f9      	bne.n	8003532 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ff16 	bl	8003374 <LL_ADC_IsInternalRegulatorEnabled>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10d      	bne.n	800356a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff ff76 	bl	8003460 <LL_ADC_REG_IsConversionOngoing>
 8003574:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 8142 	bne.w	8003808 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 813e 	bne.w	8003808 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003590:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003594:	f043 0202 	orr.w	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff23 	bl	80033ec <LL_ADC_IsEnabled>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d141      	bne.n	8003630 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b4:	d004      	beq.n	80035c0 <HAL_ADC_Init+0x114>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a77      	ldr	r2, [pc, #476]	@ (8003798 <HAL_ADC_Init+0x2ec>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10f      	bne.n	80035e0 <HAL_ADC_Init+0x134>
 80035c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035c4:	f7ff ff12 	bl	80033ec <LL_ADC_IsEnabled>
 80035c8:	4604      	mov	r4, r0
 80035ca:	4873      	ldr	r0, [pc, #460]	@ (8003798 <HAL_ADC_Init+0x2ec>)
 80035cc:	f7ff ff0e 	bl	80033ec <LL_ADC_IsEnabled>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4323      	orrs	r3, r4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e012      	b.n	8003606 <HAL_ADC_Init+0x15a>
 80035e0:	486e      	ldr	r0, [pc, #440]	@ (800379c <HAL_ADC_Init+0x2f0>)
 80035e2:	f7ff ff03 	bl	80033ec <LL_ADC_IsEnabled>
 80035e6:	4604      	mov	r4, r0
 80035e8:	486d      	ldr	r0, [pc, #436]	@ (80037a0 <HAL_ADC_Init+0x2f4>)
 80035ea:	f7ff feff 	bl	80033ec <LL_ADC_IsEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	431c      	orrs	r4, r3
 80035f2:	486c      	ldr	r0, [pc, #432]	@ (80037a4 <HAL_ADC_Init+0x2f8>)
 80035f4:	f7ff fefa 	bl	80033ec <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4323      	orrs	r3, r4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003612:	d004      	beq.n	800361e <HAL_ADC_Init+0x172>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5f      	ldr	r2, [pc, #380]	@ (8003798 <HAL_ADC_Init+0x2ec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_ADC_Init+0x176>
 800361e:	4a62      	ldr	r2, [pc, #392]	@ (80037a8 <HAL_ADC_Init+0x2fc>)
 8003620:	e000      	b.n	8003624 <HAL_ADC_Init+0x178>
 8003622:	4a62      	ldr	r2, [pc, #392]	@ (80037ac <HAL_ADC_Init+0x300>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f7ff fcfa 	bl	8003024 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7f5b      	ldrb	r3, [r3, #29]
 8003634:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800363a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003640:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003646:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800364e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800365a:	2b01      	cmp	r3, #1
 800365c:	d106      	bne.n	800366c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003662:	3b01      	subs	r3, #1
 8003664:	045b      	lsls	r3, r3, #17
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	4b48      	ldr	r3, [pc, #288]	@ (80037b0 <HAL_ADC_Init+0x304>)
 8003690:	4013      	ands	r3, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	69b9      	ldr	r1, [r7, #24]
 8003698:	430b      	orrs	r3, r1
 800369a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff fee5 	bl	8003486 <LL_ADC_INJ_IsConversionOngoing>
 80036bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d17f      	bne.n	80037c4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d17c      	bne.n	80037c4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036e6:	f023 0302 	bic.w	r3, r3, #2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	430b      	orrs	r3, r1
 80036f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d017      	beq.n	800372c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800370a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003714:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003718:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6911      	ldr	r1, [r2, #16]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	430b      	orrs	r3, r1
 8003726:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800372a:	e013      	b.n	8003754 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800373a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800374c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003750:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800375a:	2b01      	cmp	r3, #1
 800375c:	d12a      	bne.n	80037b4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003780:	430a      	orrs	r2, r1
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	611a      	str	r2, [r3, #16]
 800378e:	e019      	b.n	80037c4 <HAL_ADC_Init+0x318>
 8003790:	2000001c 	.word	0x2000001c
 8003794:	053e2d63 	.word	0x053e2d63
 8003798:	50000100 	.word	0x50000100
 800379c:	50000400 	.word	0x50000400
 80037a0:	50000500 	.word	0x50000500
 80037a4:	50000600 	.word	0x50000600
 80037a8:	50000300 	.word	0x50000300
 80037ac:	50000700 	.word	0x50000700
 80037b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10c      	bne.n	80037e6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	f023 010f 	bic.w	r1, r3, #15
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	1e5a      	subs	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80037e4:	e007      	b.n	80037f6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 020f 	bic.w	r2, r2, #15
 80037f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	f043 0201 	orr.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003806:	e007      	b.n	8003818 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	f043 0210 	orr.w	r2, r3, #16
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003818:	7ffb      	ldrb	r3, [r7, #31]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3724      	adds	r7, #36	@ 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd90      	pop	{r4, r7, pc}
 8003822:	bf00      	nop

08003824 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003838:	d004      	beq.n	8003844 <HAL_ADC_Start_DMA+0x20>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a5a      	ldr	r2, [pc, #360]	@ (80039a8 <HAL_ADC_Start_DMA+0x184>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_ADC_Start_DMA+0x24>
 8003844:	4b59      	ldr	r3, [pc, #356]	@ (80039ac <HAL_ADC_Start_DMA+0x188>)
 8003846:	e000      	b.n	800384a <HAL_ADC_Start_DMA+0x26>
 8003848:	4b59      	ldr	r3, [pc, #356]	@ (80039b0 <HAL_ADC_Start_DMA+0x18c>)
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fd4a 	bl	80032e4 <LL_ADC_GetMultimode>
 8003850:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fe02 	bl	8003460 <LL_ADC_REG_IsConversionOngoing>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 809b 	bne.w	800399a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_ADC_Start_DMA+0x4e>
 800386e:	2302      	movs	r3, #2
 8003870:	e096      	b.n	80039a0 <HAL_ADC_Start_DMA+0x17c>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4d      	ldr	r2, [pc, #308]	@ (80039b4 <HAL_ADC_Start_DMA+0x190>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d008      	beq.n	8003896 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b05      	cmp	r3, #5
 800388e:	d002      	beq.n	8003896 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b09      	cmp	r3, #9
 8003894:	d17a      	bne.n	800398c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fcf6 	bl	8004288 <ADC_Enable>
 800389c:	4603      	mov	r3, r0
 800389e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d16d      	bne.n	8003982 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3a      	ldr	r2, [pc, #232]	@ (80039a8 <HAL_ADC_Start_DMA+0x184>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_ADC_Start_DMA+0xb4>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a3b      	ldr	r2, [pc, #236]	@ (80039b8 <HAL_ADC_Start_DMA+0x194>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d002      	beq.n	80038d4 <HAL_ADC_Start_DMA+0xb0>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	e003      	b.n	80038dc <HAL_ADC_Start_DMA+0xb8>
 80038d4:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <HAL_ADC_Start_DMA+0x198>)
 80038d6:	e001      	b.n	80038dc <HAL_ADC_Start_DMA+0xb8>
 80038d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d002      	beq.n	80038ea <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d105      	bne.n	80038f6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003906:	f023 0206 	bic.w	r2, r3, #6
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	661a      	str	r2, [r3, #96]	@ 0x60
 800390e:	e002      	b.n	8003916 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391a:	4a29      	ldr	r2, [pc, #164]	@ (80039c0 <HAL_ADC_Start_DMA+0x19c>)
 800391c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003922:	4a28      	ldr	r2, [pc, #160]	@ (80039c4 <HAL_ADC_Start_DMA+0x1a0>)
 8003924:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392a:	4a27      	ldr	r2, [pc, #156]	@ (80039c8 <HAL_ADC_Start_DMA+0x1a4>)
 800392c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	221c      	movs	r2, #28
 8003934:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0210 	orr.w	r2, r2, #16
 800394c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3340      	adds	r3, #64	@ 0x40
 8003968:	4619      	mov	r1, r3
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f001 f989 	bl	8004c84 <HAL_DMA_Start_IT>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fd5c 	bl	8003438 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003980:	e00d      	b.n	800399e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800398a:	e008      	b.n	800399e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003998:	e001      	b.n	800399e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800399a:	2302      	movs	r3, #2
 800399c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	50000100 	.word	0x50000100
 80039ac:	50000300 	.word	0x50000300
 80039b0:	50000700 	.word	0x50000700
 80039b4:	50000600 	.word	0x50000600
 80039b8:	50000500 	.word	0x50000500
 80039bc:	50000400 	.word	0x50000400
 80039c0:	08004473 	.word	0x08004473
 80039c4:	0800454b 	.word	0x0800454b
 80039c8:	08004567 	.word	0x08004567

080039cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b0b6      	sub	sp, #216	@ 0xd8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d102      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x24>
 8003a26:	2302      	movs	r3, #2
 8003a28:	f000 bc13 	b.w	8004252 <HAL_ADC_ConfigChannel+0x84a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fd11 	bl	8003460 <LL_ADC_REG_IsConversionOngoing>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f040 83f3 	bne.w	800422c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6859      	ldr	r1, [r3, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f7ff fbcb 	bl	80031ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fcff 	bl	8003460 <LL_ADC_REG_IsConversionOngoing>
 8003a62:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fd0b 	bl	8003486 <LL_ADC_INJ_IsConversionOngoing>
 8003a70:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f040 81d9 	bne.w	8003e30 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 81d4 	bne.w	8003e30 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a90:	d10f      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f7ff fbd2 	bl	8003246 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fb79 	bl	80031a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ab0:	e00e      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6819      	ldr	r1, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7ff fbc1 	bl	8003246 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fb69 	bl	80031a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	08db      	lsrs	r3, r3, #3
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d022      	beq.n	8003b38 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6919      	ldr	r1, [r3, #16]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b02:	f7ff fac3 	bl	800308c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6919      	ldr	r1, [r3, #16]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f7ff fb0f 	bl	8003136 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x126>
 8003b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b2c:	e000      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x128>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	461a      	mov	r2, r3
 8003b32:	f7ff fb1b 	bl	800316c <LL_ADC_SetOffsetSaturation>
 8003b36:	e17b      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fac8 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x15c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fabd 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	0e9b      	lsrs	r3, r3, #26
 8003b5e:	f003 021f 	and.w	r2, r3, #31
 8003b62:	e01e      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x19a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fab2 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003b92:	2320      	movs	r3, #32
 8003b94:	e004      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b9a:	fab3 f383 	clz	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d105      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x1b2>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	0e9b      	lsrs	r3, r3, #26
 8003bb4:	f003 031f 	and.w	r3, r3, #31
 8003bb8:	e018      	b.n	8003bec <HAL_ADC_ConfigChannel+0x1e4>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003bde:	2320      	movs	r3, #32
 8003be0:	e004      	b.n	8003bec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003be2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d106      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fa81 	bl	8003100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2101      	movs	r1, #1
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fa65 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x222>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fa5a 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003c20:	4603      	mov	r3, r0
 8003c22:	0e9b      	lsrs	r3, r3, #26
 8003c24:	f003 021f 	and.w	r2, r3, #31
 8003c28:	e01e      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x260>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2101      	movs	r1, #1
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fa4f 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e004      	b.n	8003c66 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003c5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c60:	fab3 f383 	clz	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x278>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0e9b      	lsrs	r3, r3, #26
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	e018      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x2aa>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e004      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d106      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fa1e 	bl	8003100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2102      	movs	r1, #2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fa02 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x2e8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2102      	movs	r1, #2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f9f7 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	0e9b      	lsrs	r3, r3, #26
 8003cea:	f003 021f 	and.w	r2, r3, #31
 8003cee:	e01e      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x326>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff f9ec 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	e004      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003d22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x33e>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	0e9b      	lsrs	r3, r3, #26
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	e016      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x36c>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003d58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003d66:	2320      	movs	r3, #32
 8003d68:	e004      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d106      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff f9bd 	bl	8003100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2103      	movs	r1, #3
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff f9a1 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x3aa>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2103      	movs	r1, #3
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff f996 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	e017      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x3da>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2103      	movs	r1, #3
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff f98b 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003dce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e003      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x3f2>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	e011      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x416>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003e12:	2320      	movs	r3, #32
 8003e14:	e003      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d106      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2103      	movs	r1, #3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f968 	bl	8003100 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fad9 	bl	80033ec <LL_ADC_IsEnabled>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 813d 	bne.w	80040bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f7ff fa24 	bl	800329c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4aa2      	ldr	r2, [pc, #648]	@ (80040e4 <HAL_ADC_ConfigChannel+0x6dc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	f040 812e 	bne.w	80040bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10b      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x480>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	0e9b      	lsrs	r3, r3, #26
 8003e76:	3301      	adds	r3, #1
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	2b09      	cmp	r3, #9
 8003e7e:	bf94      	ite	ls
 8003e80:	2301      	movls	r3, #1
 8003e82:	2300      	movhi	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e019      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x4b4>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003e96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e98:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003e9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e003      	b.n	8003eac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003ea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	bf94      	ite	ls
 8003eb6:	2301      	movls	r3, #1
 8003eb8:	2300      	movhi	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d079      	beq.n	8003fb4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x4d4>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	069b      	lsls	r3, r3, #26
 8003ed6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eda:	e015      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x500>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ee4:	fa93 f3a3 	rbit	r3, r3
 8003ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	e003      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	069b      	lsls	r3, r3, #26
 8003f04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x520>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f303 	lsl.w	r3, r1, r3
 8003f26:	e017      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x550>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f30:	fa93 f3a3 	rbit	r3, r3
 8003f34:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f38:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003f40:	2320      	movs	r3, #32
 8003f42:	e003      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f303 	lsl.w	r3, r1, r3
 8003f58:	ea42 0103 	orr.w	r1, r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x576>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	0e9b      	lsrs	r3, r3, #26
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	051b      	lsls	r3, r3, #20
 8003f7c:	e018      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x5a8>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003f96:	2320      	movs	r3, #32
 8003f98:	e003      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	f003 021f 	and.w	r2, r3, #31
 8003fa8:	4613      	mov	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4413      	add	r3, r2
 8003fae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	e07e      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x5c8>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	0e9b      	lsrs	r3, r3, #26
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	069b      	lsls	r3, r3, #26
 8003fca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fce:	e015      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x5f4>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003fe8:	2320      	movs	r3, #32
 8003fea:	e003      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	fab3 f383 	clz	r3, r3
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	069b      	lsls	r3, r3, #26
 8003ff8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_ADC_ConfigChannel+0x614>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0e9b      	lsrs	r3, r3, #26
 800400e:	3301      	adds	r3, #1
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2101      	movs	r1, #1
 8004016:	fa01 f303 	lsl.w	r3, r1, r3
 800401a:	e017      	b.n	800404c <HAL_ADC_ConfigChannel+0x644>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	61fb      	str	r3, [r7, #28]
  return result;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004034:	2320      	movs	r3, #32
 8004036:	e003      	b.n	8004040 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	fab3 f383 	clz	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	3301      	adds	r3, #1
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2101      	movs	r1, #1
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	ea42 0103 	orr.w	r1, r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x670>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	0e9b      	lsrs	r3, r3, #26
 8004062:	3301      	adds	r3, #1
 8004064:	f003 021f 	and.w	r2, r3, #31
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	3b1e      	subs	r3, #30
 8004070:	051b      	lsls	r3, r3, #20
 8004072:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004076:	e01b      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x6a8>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	613b      	str	r3, [r7, #16]
  return result;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	e003      	b.n	800409c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f003 021f 	and.w	r2, r3, #31
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	3b1e      	subs	r3, #30
 80040aa:	051b      	lsls	r3, r3, #20
 80040ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b6:	4619      	mov	r1, r3
 80040b8:	f7ff f8c5 	bl	8003246 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80be 	beq.w	8004246 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d2:	d004      	beq.n	80040de <HAL_ADC_ConfigChannel+0x6d6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a04      	ldr	r2, [pc, #16]	@ (80040ec <HAL_ADC_ConfigChannel+0x6e4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10a      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x6ec>
 80040de:	4b04      	ldr	r3, [pc, #16]	@ (80040f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80040e0:	e009      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x6ee>
 80040e2:	bf00      	nop
 80040e4:	407f0000 	.word	0x407f0000
 80040e8:	80080000 	.word	0x80080000
 80040ec:	50000100 	.word	0x50000100
 80040f0:	50000300 	.word	0x50000300
 80040f4:	4b59      	ldr	r3, [pc, #356]	@ (800425c <HAL_ADC_ConfigChannel+0x854>)
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe ffba 	bl	8003070 <LL_ADC_GetCommonPathInternalCh>
 80040fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a56      	ldr	r2, [pc, #344]	@ (8004260 <HAL_ADC_ConfigChannel+0x858>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_ADC_ConfigChannel+0x70c>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a55      	ldr	r2, [pc, #340]	@ (8004264 <HAL_ADC_ConfigChannel+0x85c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d13a      	bne.n	800418a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d134      	bne.n	800418a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004128:	d005      	beq.n	8004136 <HAL_ADC_ConfigChannel+0x72e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4e      	ldr	r2, [pc, #312]	@ (8004268 <HAL_ADC_ConfigChannel+0x860>)
 8004130:	4293      	cmp	r3, r2
 8004132:	f040 8085 	bne.w	8004240 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800413e:	d004      	beq.n	800414a <HAL_ADC_ConfigChannel+0x742>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a49      	ldr	r2, [pc, #292]	@ (800426c <HAL_ADC_ConfigChannel+0x864>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <HAL_ADC_ConfigChannel+0x746>
 800414a:	4a49      	ldr	r2, [pc, #292]	@ (8004270 <HAL_ADC_ConfigChannel+0x868>)
 800414c:	e000      	b.n	8004150 <HAL_ADC_ConfigChannel+0x748>
 800414e:	4a43      	ldr	r2, [pc, #268]	@ (800425c <HAL_ADC_ConfigChannel+0x854>)
 8004150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004154:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f7fe ff75 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004160:	4b44      	ldr	r3, [pc, #272]	@ (8004274 <HAL_ADC_ConfigChannel+0x86c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	099b      	lsrs	r3, r3, #6
 8004166:	4a44      	ldr	r2, [pc, #272]	@ (8004278 <HAL_ADC_ConfigChannel+0x870>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	4613      	mov	r3, r2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800417a:	e002      	b.n	8004182 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3b01      	subs	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f9      	bne.n	800417c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004188:	e05a      	b.n	8004240 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3b      	ldr	r2, [pc, #236]	@ (800427c <HAL_ADC_ConfigChannel+0x874>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d125      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d11f      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a31      	ldr	r2, [pc, #196]	@ (800426c <HAL_ADC_ConfigChannel+0x864>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d104      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x7ac>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a34      	ldr	r2, [pc, #208]	@ (8004280 <HAL_ADC_ConfigChannel+0x878>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d047      	beq.n	8004244 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041bc:	d004      	beq.n	80041c8 <HAL_ADC_ConfigChannel+0x7c0>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2a      	ldr	r2, [pc, #168]	@ (800426c <HAL_ADC_ConfigChannel+0x864>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x7c4>
 80041c8:	4a29      	ldr	r2, [pc, #164]	@ (8004270 <HAL_ADC_ConfigChannel+0x868>)
 80041ca:	e000      	b.n	80041ce <HAL_ADC_ConfigChannel+0x7c6>
 80041cc:	4a23      	ldr	r2, [pc, #140]	@ (800425c <HAL_ADC_ConfigChannel+0x854>)
 80041ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041d6:	4619      	mov	r1, r3
 80041d8:	4610      	mov	r0, r2
 80041da:	f7fe ff36 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041de:	e031      	b.n	8004244 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a27      	ldr	r2, [pc, #156]	@ (8004284 <HAL_ADC_ConfigChannel+0x87c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d12d      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d127      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1c      	ldr	r2, [pc, #112]	@ (800426c <HAL_ADC_ConfigChannel+0x864>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d022      	beq.n	8004246 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004208:	d004      	beq.n	8004214 <HAL_ADC_ConfigChannel+0x80c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a17      	ldr	r2, [pc, #92]	@ (800426c <HAL_ADC_ConfigChannel+0x864>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d101      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x810>
 8004214:	4a16      	ldr	r2, [pc, #88]	@ (8004270 <HAL_ADC_ConfigChannel+0x868>)
 8004216:	e000      	b.n	800421a <HAL_ADC_ConfigChannel+0x812>
 8004218:	4a10      	ldr	r2, [pc, #64]	@ (800425c <HAL_ADC_ConfigChannel+0x854>)
 800421a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800421e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f7fe ff10 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
 800422a:	e00c      	b.n	8004246 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004230:	f043 0220 	orr.w	r2, r3, #32
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800423e:	e002      	b.n	8004246 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004244:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800424e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004252:	4618      	mov	r0, r3
 8004254:	37d8      	adds	r7, #216	@ 0xd8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	50000700 	.word	0x50000700
 8004260:	c3210000 	.word	0xc3210000
 8004264:	90c00010 	.word	0x90c00010
 8004268:	50000600 	.word	0x50000600
 800426c:	50000100 	.word	0x50000100
 8004270:	50000300 	.word	0x50000300
 8004274:	2000001c 	.word	0x2000001c
 8004278:	053e2d63 	.word	0x053e2d63
 800427c:	c7520000 	.word	0xc7520000
 8004280:	50000500 	.word	0x50000500
 8004284:	cb840000 	.word	0xcb840000

08004288 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff f8a7 	bl	80033ec <LL_ADC_IsEnabled>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d176      	bne.n	8004392 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	4b3c      	ldr	r3, [pc, #240]	@ (800439c <ADC_Enable+0x114>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	f043 0210 	orr.w	r2, r3, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e062      	b.n	8004394 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff f862 	bl	800339c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042e0:	d004      	beq.n	80042ec <ADC_Enable+0x64>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2e      	ldr	r2, [pc, #184]	@ (80043a0 <ADC_Enable+0x118>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d101      	bne.n	80042f0 <ADC_Enable+0x68>
 80042ec:	4b2d      	ldr	r3, [pc, #180]	@ (80043a4 <ADC_Enable+0x11c>)
 80042ee:	e000      	b.n	80042f2 <ADC_Enable+0x6a>
 80042f0:	4b2d      	ldr	r3, [pc, #180]	@ (80043a8 <ADC_Enable+0x120>)
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe febc 	bl	8003070 <LL_ADC_GetCommonPathInternalCh>
 80042f8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80042fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d013      	beq.n	800432a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004302:	4b2a      	ldr	r3, [pc, #168]	@ (80043ac <ADC_Enable+0x124>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	4a29      	ldr	r2, [pc, #164]	@ (80043b0 <ADC_Enable+0x128>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	099b      	lsrs	r3, r3, #6
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800431c:	e002      	b.n	8004324 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3b01      	subs	r3, #1
 8004322:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f9      	bne.n	800431e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800432a:	f7fe fe6f 	bl	800300c <HAL_GetTick>
 800432e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004330:	e028      	b.n	8004384 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff f858 	bl	80033ec <LL_ADC_IsEnabled>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f828 	bl	800339c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800434c:	f7fe fe5e 	bl	800300c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d914      	bls.n	8004384 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d00d      	beq.n	8004384 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436c:	f043 0210 	orr.w	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e007      	b.n	8004394 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d1cf      	bne.n	8004332 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	8000003f 	.word	0x8000003f
 80043a0:	50000100 	.word	0x50000100
 80043a4:	50000300 	.word	0x50000300
 80043a8:	50000700 	.word	0x50000700
 80043ac:	2000001c 	.word	0x2000001c
 80043b0:	053e2d63 	.word	0x053e2d63

080043b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff f826 	bl	8003412 <LL_ADC_IsDisableOngoing>
 80043c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff f80d 	bl	80033ec <LL_ADC_IsEnabled>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d047      	beq.n	8004468 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d144      	bne.n	8004468 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030d 	and.w	r3, r3, #13
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d10c      	bne.n	8004406 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe ffe7 	bl	80033c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2203      	movs	r2, #3
 80043fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043fe:	f7fe fe05 	bl	800300c <HAL_GetTick>
 8004402:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004404:	e029      	b.n	800445a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	f043 0210 	orr.w	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004416:	f043 0201 	orr.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e023      	b.n	800446a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004422:	f7fe fdf3 	bl	800300c <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d914      	bls.n	800445a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	f043 0210 	orr.w	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e007      	b.n	800446a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1dc      	bne.n	8004422 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004484:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004488:	2b00      	cmp	r3, #0
 800448a:	d14b      	bne.n	8004524 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004490:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d021      	beq.n	80044ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fe8c 	bl	80031c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d032      	beq.n	800451c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d12b      	bne.n	800451c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11f      	bne.n	800451c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e0:	f043 0201 	orr.w	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044e8:	e018      	b.n	800451c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d111      	bne.n	800451c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004514:	f043 0201 	orr.w	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff fa55 	bl	80039cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004522:	e00e      	b.n	8004542 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff fa5f 	bl	80039f4 <HAL_ADC_ErrorCallback>
}
 8004536:	e004      	b.n	8004542 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004556:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff fa41 	bl	80039e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004578:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004584:	f043 0204 	orr.w	r2, r3, #4
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff fa31 	bl	80039f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <LL_ADC_IsEnabled>:
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <LL_ADC_IsEnabled+0x18>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <LL_ADC_IsEnabled+0x1a>
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_ADC_StartCalibration>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80045d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80045dc:	4313      	orrs	r3, r2
 80045de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <LL_ADC_IsCalibrationOnGoing>:
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004602:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004606:	d101      	bne.n	800460c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <LL_ADC_REG_IsConversionOngoing>:
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b04      	cmp	r3, #4
 800462c:	d101      	bne.n	8004632 <LL_ADC_REG_IsConversionOngoing+0x18>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_ADCEx_Calibration_Start+0x1c>
 8004658:	2302      	movs	r3, #2
 800465a:	e04d      	b.n	80046f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fea5 	bl	80043b4 <ADC_Disable>
 800466a:	4603      	mov	r3, r0
 800466c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d136      	bne.n	80046e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004678:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800467c:	f023 0302 	bic.w	r3, r3, #2
 8004680:	f043 0202 	orr.w	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff96 	bl	80045c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004694:	e014      	b.n	80046c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	3301      	adds	r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4a18      	ldr	r2, [pc, #96]	@ (8004700 <HAL_ADCEx_Calibration_Start+0xc0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d90d      	bls.n	80046c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a8:	f023 0312 	bic.w	r3, r3, #18
 80046ac:	f043 0210 	orr.w	r2, r3, #16
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e01b      	b.n	80046f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff94 	bl	80045f2 <LL_ADC_IsCalibrationOnGoing>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e2      	bne.n	8004696 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d4:	f023 0303 	bic.w	r3, r3, #3
 80046d8:	f043 0201 	orr.w	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046e0:	e005      	b.n	80046ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e6:	f043 0210 	orr.w	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	0004de01 	.word	0x0004de01

08004704 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004704:	b590      	push	{r4, r7, lr}
 8004706:	b0a1      	sub	sp, #132	@ 0x84
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800471e:	2302      	movs	r3, #2
 8004720:	e0e7      	b.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800472a:	2300      	movs	r3, #0
 800472c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800472e:	2300      	movs	r3, #0
 8004730:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800473a:	d102      	bne.n	8004742 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800473c:	4b6f      	ldr	r3, [pc, #444]	@ (80048fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e009      	b.n	8004756 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6e      	ldr	r2, [pc, #440]	@ (8004900 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d102      	bne.n	8004752 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800474c:	4b6d      	ldr	r3, [pc, #436]	@ (8004904 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	e001      	b.n	8004756 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10b      	bne.n	8004774 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004760:	f043 0220 	orr.w	r2, r3, #32
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0be      	b.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff ff4f 	bl	800461a <LL_ADC_REG_IsConversionOngoing>
 800477c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff ff49 	bl	800461a <LL_ADC_REG_IsConversionOngoing>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	f040 80a0 	bne.w	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 809c 	bne.w	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047a0:	d004      	beq.n	80047ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a55      	ldr	r2, [pc, #340]	@ (80048fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80047ac:	4b56      	ldr	r3, [pc, #344]	@ (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80047ae:	e000      	b.n	80047b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80047b0:	4b56      	ldr	r3, [pc, #344]	@ (800490c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80047b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d04b      	beq.n	8004854 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80047ce:	035b      	lsls	r3, r3, #13
 80047d0:	430b      	orrs	r3, r1
 80047d2:	431a      	orrs	r2, r3
 80047d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047e0:	d004      	beq.n	80047ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a45      	ldr	r2, [pc, #276]	@ (80048fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d10f      	bne.n	800480c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80047ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047f0:	f7ff fed3 	bl	800459a <LL_ADC_IsEnabled>
 80047f4:	4604      	mov	r4, r0
 80047f6:	4841      	ldr	r0, [pc, #260]	@ (80048fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047f8:	f7ff fecf 	bl	800459a <LL_ADC_IsEnabled>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4323      	orrs	r3, r4
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e012      	b.n	8004832 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800480c:	483c      	ldr	r0, [pc, #240]	@ (8004900 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800480e:	f7ff fec4 	bl	800459a <LL_ADC_IsEnabled>
 8004812:	4604      	mov	r4, r0
 8004814:	483b      	ldr	r0, [pc, #236]	@ (8004904 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004816:	f7ff fec0 	bl	800459a <LL_ADC_IsEnabled>
 800481a:	4603      	mov	r3, r0
 800481c:	431c      	orrs	r4, r3
 800481e:	483c      	ldr	r0, [pc, #240]	@ (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004820:	f7ff febb 	bl	800459a <LL_ADC_IsEnabled>
 8004824:	4603      	mov	r3, r0
 8004826:	4323      	orrs	r3, r4
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d056      	beq.n	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800483e:	f023 030f 	bic.w	r3, r3, #15
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	6811      	ldr	r1, [r2, #0]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	6892      	ldr	r2, [r2, #8]
 800484a:	430a      	orrs	r2, r1
 800484c:	431a      	orrs	r2, r3
 800484e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004850:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004852:	e047      	b.n	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800485c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800485e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004868:	d004      	beq.n	8004874 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a23      	ldr	r2, [pc, #140]	@ (80048fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d10f      	bne.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004874:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004878:	f7ff fe8f 	bl	800459a <LL_ADC_IsEnabled>
 800487c:	4604      	mov	r4, r0
 800487e:	481f      	ldr	r0, [pc, #124]	@ (80048fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004880:	f7ff fe8b 	bl	800459a <LL_ADC_IsEnabled>
 8004884:	4603      	mov	r3, r0
 8004886:	4323      	orrs	r3, r4
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e012      	b.n	80048ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004894:	481a      	ldr	r0, [pc, #104]	@ (8004900 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004896:	f7ff fe80 	bl	800459a <LL_ADC_IsEnabled>
 800489a:	4604      	mov	r4, r0
 800489c:	4819      	ldr	r0, [pc, #100]	@ (8004904 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800489e:	f7ff fe7c 	bl	800459a <LL_ADC_IsEnabled>
 80048a2:	4603      	mov	r3, r0
 80048a4:	431c      	orrs	r4, r3
 80048a6:	481a      	ldr	r0, [pc, #104]	@ (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80048a8:	f7ff fe77 	bl	800459a <LL_ADC_IsEnabled>
 80048ac:	4603      	mov	r3, r0
 80048ae:	4323      	orrs	r3, r4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d012      	beq.n	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048c6:	f023 030f 	bic.w	r3, r3, #15
 80048ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048ce:	e009      	b.n	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	f043 0220 	orr.w	r2, r3, #32
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80048e2:	e000      	b.n	80048e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80048ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3784      	adds	r7, #132	@ 0x84
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd90      	pop	{r4, r7, pc}
 80048fa:	bf00      	nop
 80048fc:	50000100 	.word	0x50000100
 8004900:	50000400 	.word	0x50000400
 8004904:	50000500 	.word	0x50000500
 8004908:	50000300 	.word	0x50000300
 800490c:	50000700 	.word	0x50000700
 8004910:	50000600 	.word	0x50000600

08004914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <__NVIC_SetPriorityGrouping+0x44>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004930:	4013      	ands	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800493c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004946:	4a04      	ldr	r2, [pc, #16]	@ (8004958 <__NVIC_SetPriorityGrouping+0x44>)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	60d3      	str	r3, [r2, #12]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004960:	4b04      	ldr	r3, [pc, #16]	@ (8004974 <__NVIC_GetPriorityGrouping+0x18>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 0307 	and.w	r3, r3, #7
}
 800496a:	4618      	mov	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	e000ed00 	.word	0xe000ed00

08004978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db0b      	blt.n	80049a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	f003 021f 	and.w	r2, r3, #31
 8004990:	4907      	ldr	r1, [pc, #28]	@ (80049b0 <__NVIC_EnableIRQ+0x38>)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2001      	movs	r0, #1
 800499a:	fa00 f202 	lsl.w	r2, r0, r2
 800499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000e100 	.word	0xe000e100

080049b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	6039      	str	r1, [r7, #0]
 80049be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	db0a      	blt.n	80049de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	490c      	ldr	r1, [pc, #48]	@ (8004a00 <__NVIC_SetPriority+0x4c>)
 80049ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d2:	0112      	lsls	r2, r2, #4
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	440b      	add	r3, r1
 80049d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049dc:	e00a      	b.n	80049f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	4908      	ldr	r1, [pc, #32]	@ (8004a04 <__NVIC_SetPriority+0x50>)
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	3b04      	subs	r3, #4
 80049ec:	0112      	lsls	r2, r2, #4
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	440b      	add	r3, r1
 80049f2:	761a      	strb	r2, [r3, #24]
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	e000e100 	.word	0xe000e100
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b089      	sub	sp, #36	@ 0x24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f1c3 0307 	rsb	r3, r3, #7
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	bf28      	it	cs
 8004a26:	2304      	movcs	r3, #4
 8004a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d902      	bls.n	8004a38 <NVIC_EncodePriority+0x30>
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3b03      	subs	r3, #3
 8004a36:	e000      	b.n	8004a3a <NVIC_EncodePriority+0x32>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43da      	mvns	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a50:	f04f 31ff 	mov.w	r1, #4294967295
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	43d9      	mvns	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a60:	4313      	orrs	r3, r2
         );
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3724      	adds	r7, #36	@ 0x24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a80:	d301      	bcc.n	8004a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a82:	2301      	movs	r3, #1
 8004a84:	e00f      	b.n	8004aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a86:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab0 <SysTick_Config+0x40>)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a8e:	210f      	movs	r1, #15
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	f7ff ff8e 	bl	80049b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a98:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <SysTick_Config+0x40>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a9e:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <SysTick_Config+0x40>)
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	e000e010 	.word	0xe000e010

08004ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff ff29 	bl	8004914 <__NVIC_SetPriorityGrouping>
}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b086      	sub	sp, #24
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad8:	f7ff ff40 	bl	800495c <__NVIC_GetPriorityGrouping>
 8004adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	f7ff ff90 	bl	8004a08 <NVIC_EncodePriority>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff ff5f 	bl	80049b4 <__NVIC_SetPriority>
}
 8004af6:	bf00      	nop
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	4603      	mov	r3, r0
 8004b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ff33 	bl	8004978 <__NVIC_EnableIRQ>
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff ffa4 	bl	8004a70 <SysTick_Config>
 8004b28:	4603      	mov	r3, r0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e08d      	b.n	8004c62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4b47      	ldr	r3, [pc, #284]	@ (8004c6c <HAL_DMA_Init+0x138>)
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d80f      	bhi.n	8004b72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	4b45      	ldr	r3, [pc, #276]	@ (8004c70 <HAL_DMA_Init+0x13c>)
 8004b5a:	4413      	add	r3, r2
 8004b5c:	4a45      	ldr	r2, [pc, #276]	@ (8004c74 <HAL_DMA_Init+0x140>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	009a      	lsls	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a42      	ldr	r2, [pc, #264]	@ (8004c78 <HAL_DMA_Init+0x144>)
 8004b6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b70:	e00e      	b.n	8004b90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b40      	ldr	r3, [pc, #256]	@ (8004c7c <HAL_DMA_Init+0x148>)
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4a3d      	ldr	r2, [pc, #244]	@ (8004c74 <HAL_DMA_Init+0x140>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	091b      	lsrs	r3, r3, #4
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c80 <HAL_DMA_Init+0x14c>)
 8004b8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa76 	bl	80050d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bf0:	d102      	bne.n	8004bf8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d010      	beq.n	8004c38 <HAL_DMA_Init+0x104>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d80c      	bhi.n	8004c38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa96 	bl	8005150 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	e008      	b.n	8004c4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40020407 	.word	0x40020407
 8004c70:	bffdfff8 	.word	0xbffdfff8
 8004c74:	cccccccd 	.word	0xcccccccd
 8004c78:	40020000 	.word	0x40020000
 8004c7c:	bffdfbf8 	.word	0xbffdfbf8
 8004c80:	40020400 	.word	0x40020400

08004c84 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_DMA_Start_IT+0x20>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e066      	b.n	8004d72 <HAL_DMA_Start_IT+0xee>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d155      	bne.n	8004d64 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f9bb 	bl	8005058 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 020e 	orr.w	r2, r2, #14
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e00f      	b.n	8004d1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0204 	bic.w	r2, r2, #4
 8004d0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 020a 	orr.w	r2, r2, #10
 8004d1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d38:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e005      	b.n	8004d70 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d005      	beq.n	8004d9e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2204      	movs	r2, #4
 8004d96:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	e037      	b.n	8004e0e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 020e 	bic.w	r2, r2, #14
 8004dac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dbc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd2:	f003 021f 	and.w	r2, r3, #31
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	2101      	movs	r1, #1
 8004ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8004de0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00c      	beq.n	8004e0e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e02:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e0c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d00d      	beq.n	8004e60 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2204      	movs	r2, #4
 8004e48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
 8004e5e:	e047      	b.n	8004ef0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 020e 	bic.w	r2, r2, #14
 8004e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e94:	f003 021f 	and.w	r2, r3, #31
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004eac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00c      	beq.n	8004ed0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ec4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ece:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
    }
  }
  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d026      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x7a>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d021      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d107      	bne.n	8004f4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0204 	bic.w	r2, r2, #4
 8004f4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f52:	f003 021f 	and.w	r2, r3, #31
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	2104      	movs	r1, #4
 8004f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d071      	beq.n	800504e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f72:	e06c      	b.n	800504e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d02e      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d029      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10b      	bne.n	8004fb8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 020a 	bic.w	r2, r2, #10
 8004fae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbc:	f003 021f 	and.w	r2, r3, #31
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004fca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d038      	beq.n	800504e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004fe4:	e033      	b.n	800504e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2208      	movs	r2, #8
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d02a      	beq.n	8005050 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d025      	beq.n	8005050 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 020e 	bic.w	r2, r2, #14
 8005012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005018:	f003 021f 	and.w	r2, r3, #31
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	2101      	movs	r1, #1
 8005022:	fa01 f202 	lsl.w	r2, r1, r2
 8005026:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800504e:	bf00      	nop
 8005050:	bf00      	nop
}
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800506e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005074:	2b00      	cmp	r3, #0
 8005076:	d004      	beq.n	8005082 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005080:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005086:	f003 021f 	and.w	r2, r3, #31
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	2101      	movs	r1, #1
 8005090:	fa01 f202 	lsl.w	r2, r1, r2
 8005094:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b10      	cmp	r3, #16
 80050a4:	d108      	bne.n	80050b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050b6:	e007      	b.n	80050c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	4b16      	ldr	r3, [pc, #88]	@ (800513c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d802      	bhi.n	80050ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80050e8:	4b15      	ldr	r3, [pc, #84]	@ (8005140 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e001      	b.n	80050f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80050ee:	4b15      	ldr	r3, [pc, #84]	@ (8005144 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80050f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	3b08      	subs	r3, #8
 80050fe:	4a12      	ldr	r2, [pc, #72]	@ (8005148 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	009a      	lsls	r2, r3, #2
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4413      	add	r3, r2
 8005114:	461a      	mov	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a0b      	ldr	r2, [pc, #44]	@ (800514c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800511e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 031f 	and.w	r3, r3, #31
 8005126:	2201      	movs	r2, #1
 8005128:	409a      	lsls	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40020407 	.word	0x40020407
 8005140:	40020800 	.word	0x40020800
 8005144:	40020820 	.word	0x40020820
 8005148:	cccccccd 	.word	0xcccccccd
 800514c:	40020880 	.word	0x40020880

08005150 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	461a      	mov	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a08      	ldr	r2, [pc, #32]	@ (8005194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005172:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3b01      	subs	r3, #1
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2201      	movs	r2, #1
 800517e:	409a      	lsls	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	1000823f 	.word	0x1000823f
 8005194:	40020940 	.word	0x40020940

08005198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051a6:	e15a      	b.n	800545e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	2101      	movs	r1, #1
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 814c 	beq.w	8005458 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d005      	beq.n	80051d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d130      	bne.n	800523a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800520e:	2201      	movs	r2, #1
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4013      	ands	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 0201 	and.w	r2, r3, #1
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b03      	cmp	r3, #3
 8005244:	d017      	beq.n	8005276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	2203      	movs	r2, #3
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43db      	mvns	r3, r3
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4013      	ands	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d123      	bne.n	80052ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	08da      	lsrs	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3208      	adds	r2, #8
 800528a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	220f      	movs	r2, #15
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	08da      	lsrs	r2, r3, #3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3208      	adds	r2, #8
 80052c4:	6939      	ldr	r1, [r7, #16]
 80052c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	2203      	movs	r2, #3
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43db      	mvns	r3, r3
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4013      	ands	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0203 	and.w	r2, r3, #3
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80a6 	beq.w	8005458 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530c:	4b5b      	ldr	r3, [pc, #364]	@ (800547c <HAL_GPIO_Init+0x2e4>)
 800530e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005310:	4a5a      	ldr	r2, [pc, #360]	@ (800547c <HAL_GPIO_Init+0x2e4>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	6613      	str	r3, [r2, #96]	@ 0x60
 8005318:	4b58      	ldr	r3, [pc, #352]	@ (800547c <HAL_GPIO_Init+0x2e4>)
 800531a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005324:	4a56      	ldr	r2, [pc, #344]	@ (8005480 <HAL_GPIO_Init+0x2e8>)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	3302      	adds	r3, #2
 800532c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	220f      	movs	r2, #15
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4013      	ands	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800534e:	d01f      	beq.n	8005390 <HAL_GPIO_Init+0x1f8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a4c      	ldr	r2, [pc, #304]	@ (8005484 <HAL_GPIO_Init+0x2ec>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d019      	beq.n	800538c <HAL_GPIO_Init+0x1f4>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a4b      	ldr	r2, [pc, #300]	@ (8005488 <HAL_GPIO_Init+0x2f0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <HAL_GPIO_Init+0x1f0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a4a      	ldr	r2, [pc, #296]	@ (800548c <HAL_GPIO_Init+0x2f4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00d      	beq.n	8005384 <HAL_GPIO_Init+0x1ec>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a49      	ldr	r2, [pc, #292]	@ (8005490 <HAL_GPIO_Init+0x2f8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <HAL_GPIO_Init+0x1e8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a48      	ldr	r2, [pc, #288]	@ (8005494 <HAL_GPIO_Init+0x2fc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d101      	bne.n	800537c <HAL_GPIO_Init+0x1e4>
 8005378:	2305      	movs	r3, #5
 800537a:	e00a      	b.n	8005392 <HAL_GPIO_Init+0x1fa>
 800537c:	2306      	movs	r3, #6
 800537e:	e008      	b.n	8005392 <HAL_GPIO_Init+0x1fa>
 8005380:	2304      	movs	r3, #4
 8005382:	e006      	b.n	8005392 <HAL_GPIO_Init+0x1fa>
 8005384:	2303      	movs	r3, #3
 8005386:	e004      	b.n	8005392 <HAL_GPIO_Init+0x1fa>
 8005388:	2302      	movs	r3, #2
 800538a:	e002      	b.n	8005392 <HAL_GPIO_Init+0x1fa>
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <HAL_GPIO_Init+0x1fa>
 8005390:	2300      	movs	r3, #0
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	f002 0203 	and.w	r2, r2, #3
 8005398:	0092      	lsls	r2, r2, #2
 800539a:	4093      	lsls	r3, r2
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053a2:	4937      	ldr	r1, [pc, #220]	@ (8005480 <HAL_GPIO_Init+0x2e8>)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	3302      	adds	r3, #2
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053b0:	4b39      	ldr	r3, [pc, #228]	@ (8005498 <HAL_GPIO_Init+0x300>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4013      	ands	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053d4:	4a30      	ldr	r2, [pc, #192]	@ (8005498 <HAL_GPIO_Init+0x300>)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80053da:	4b2f      	ldr	r3, [pc, #188]	@ (8005498 <HAL_GPIO_Init+0x300>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4013      	ands	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053fe:	4a26      	ldr	r2, [pc, #152]	@ (8005498 <HAL_GPIO_Init+0x300>)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005404:	4b24      	ldr	r3, [pc, #144]	@ (8005498 <HAL_GPIO_Init+0x300>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	43db      	mvns	r3, r3
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4013      	ands	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005428:	4a1b      	ldr	r2, [pc, #108]	@ (8005498 <HAL_GPIO_Init+0x300>)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800542e:	4b1a      	ldr	r3, [pc, #104]	@ (8005498 <HAL_GPIO_Init+0x300>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	43db      	mvns	r3, r3
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4013      	ands	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005452:	4a11      	ldr	r2, [pc, #68]	@ (8005498 <HAL_GPIO_Init+0x300>)
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	3301      	adds	r3, #1
 800545c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	f47f ae9d 	bne.w	80051a8 <HAL_GPIO_Init+0x10>
  }
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	40021000 	.word	0x40021000
 8005480:	40010000 	.word	0x40010000
 8005484:	48000400 	.word	0x48000400
 8005488:	48000800 	.word	0x48000800
 800548c:	48000c00 	.word	0x48000c00
 8005490:	48001000 	.word	0x48001000
 8005494:	48001400 	.word	0x48001400
 8005498:	40010400 	.word	0x40010400

0800549c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
 80054b8:	e001      	b.n	80054be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	807b      	strh	r3, [r7, #2]
 80054d8:	4613      	mov	r3, r2
 80054da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054dc:	787b      	ldrb	r3, [r7, #1]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054e2:	887a      	ldrh	r2, [r7, #2]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054e8:	e002      	b.n	80054f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054ea:	887a      	ldrh	r2, [r7, #2]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800550e:	887a      	ldrh	r2, [r7, #2]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4013      	ands	r3, r2
 8005514:	041a      	lsls	r2, r3, #16
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	43d9      	mvns	r1, r3
 800551a:	887b      	ldrh	r3, [r7, #2]
 800551c:	400b      	ands	r3, r1
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	619a      	str	r2, [r3, #24]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800553a:	4b08      	ldr	r3, [pc, #32]	@ (800555c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d006      	beq.n	8005554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005546:	4a05      	ldr	r2, [pc, #20]	@ (800555c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fd f9ac 	bl	80028ac <HAL_GPIO_EXTI_Callback>
  }
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40010400 	.word	0x40010400

08005560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d141      	bne.n	80055f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800556e:	4b4b      	ldr	r3, [pc, #300]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800557a:	d131      	bne.n	80055e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800557c:	4b47      	ldr	r3, [pc, #284]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800557e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005582:	4a46      	ldr	r2, [pc, #280]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800558c:	4b43      	ldr	r3, [pc, #268]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005594:	4a41      	ldr	r2, [pc, #260]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800559a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800559c:	4b40      	ldr	r3, [pc, #256]	@ (80056a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2232      	movs	r2, #50	@ 0x32
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	4a3f      	ldr	r2, [pc, #252]	@ (80056a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	0c9b      	lsrs	r3, r3, #18
 80055ae:	3301      	adds	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055b2:	e002      	b.n	80055ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055ba:	4b38      	ldr	r3, [pc, #224]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c6:	d102      	bne.n	80055ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f2      	bne.n	80055b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055ce:	4b33      	ldr	r3, [pc, #204]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055da:	d158      	bne.n	800568e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e057      	b.n	8005690 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055e0:	4b2e      	ldr	r3, [pc, #184]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e6:	4a2d      	ldr	r2, [pc, #180]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80055f0:	e04d      	b.n	800568e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055f8:	d141      	bne.n	800567e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055fa:	4b28      	ldr	r3, [pc, #160]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005606:	d131      	bne.n	800566c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005608:	4b24      	ldr	r3, [pc, #144]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800560a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800560e:	4a23      	ldr	r2, [pc, #140]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005618:	4b20      	ldr	r3, [pc, #128]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005620:	4a1e      	ldr	r2, [pc, #120]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005626:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005628:	4b1d      	ldr	r3, [pc, #116]	@ (80056a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2232      	movs	r2, #50	@ 0x32
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	4a1c      	ldr	r2, [pc, #112]	@ (80056a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	0c9b      	lsrs	r3, r3, #18
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800563e:	e002      	b.n	8005646 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3b01      	subs	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005646:	4b15      	ldr	r3, [pc, #84]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800564e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005652:	d102      	bne.n	800565a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f2      	bne.n	8005640 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800565a:	4b10      	ldr	r3, [pc, #64]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005666:	d112      	bne.n	800568e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e011      	b.n	8005690 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800566c:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800566e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005672:	4a0a      	ldr	r2, [pc, #40]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800567c:	e007      	b.n	800568e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800567e:	4b07      	ldr	r3, [pc, #28]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005686:	4a05      	ldr	r2, [pc, #20]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005688:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800568c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40007000 	.word	0x40007000
 80056a0:	2000001c 	.word	0x2000001c
 80056a4:	431bde83 	.word	0x431bde83

080056a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80056b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056b6:	6093      	str	r3, [r2, #8]
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40007000 	.word	0x40007000

080056c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e2fe      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d075      	beq.n	80057d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e6:	4b97      	ldr	r3, [pc, #604]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056f0:	4b94      	ldr	r3, [pc, #592]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b0c      	cmp	r3, #12
 80056fe:	d102      	bne.n	8005706 <HAL_RCC_OscConfig+0x3e>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d002      	beq.n	800570c <HAL_RCC_OscConfig+0x44>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d10b      	bne.n	8005724 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570c:	4b8d      	ldr	r3, [pc, #564]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d05b      	beq.n	80057d0 <HAL_RCC_OscConfig+0x108>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d157      	bne.n	80057d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e2d9      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572c:	d106      	bne.n	800573c <HAL_RCC_OscConfig+0x74>
 800572e:	4b85      	ldr	r3, [pc, #532]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a84      	ldr	r2, [pc, #528]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e01d      	b.n	8005778 <HAL_RCC_OscConfig+0xb0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005744:	d10c      	bne.n	8005760 <HAL_RCC_OscConfig+0x98>
 8005746:	4b7f      	ldr	r3, [pc, #508]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a7e      	ldr	r2, [pc, #504]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800574c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	4b7c      	ldr	r3, [pc, #496]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a7b      	ldr	r2, [pc, #492]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e00b      	b.n	8005778 <HAL_RCC_OscConfig+0xb0>
 8005760:	4b78      	ldr	r3, [pc, #480]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a77      	ldr	r2, [pc, #476]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	4b75      	ldr	r3, [pc, #468]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a74      	ldr	r2, [pc, #464]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d013      	beq.n	80057a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fd fc44 	bl	800300c <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7fd fc40 	bl	800300c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	@ 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e29e      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800579a:	4b6a      	ldr	r3, [pc, #424]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f0      	beq.n	8005788 <HAL_RCC_OscConfig+0xc0>
 80057a6:	e014      	b.n	80057d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fd fc30 	bl	800300c <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b0:	f7fd fc2c 	bl	800300c <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b64      	cmp	r3, #100	@ 0x64
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e28a      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057c2:	4b60      	ldr	r3, [pc, #384]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0xe8>
 80057ce:	e000      	b.n	80057d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d075      	beq.n	80058ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057de:	4b59      	ldr	r3, [pc, #356]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 030c 	and.w	r3, r3, #12
 80057e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057e8:	4b56      	ldr	r3, [pc, #344]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	d102      	bne.n	80057fe <HAL_RCC_OscConfig+0x136>
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d002      	beq.n	8005804 <HAL_RCC_OscConfig+0x13c>
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b04      	cmp	r3, #4
 8005802:	d11f      	bne.n	8005844 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005804:	4b4f      	ldr	r3, [pc, #316]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_RCC_OscConfig+0x154>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e25d      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581c:	4b49      	ldr	r3, [pc, #292]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	061b      	lsls	r3, r3, #24
 800582a:	4946      	ldr	r1, [pc, #280]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005830:	4b45      	ldr	r3, [pc, #276]	@ (8005948 <HAL_RCC_OscConfig+0x280>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f7fd fb9d 	bl	8002f74 <HAL_InitTick>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d043      	beq.n	80058c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e249      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d023      	beq.n	8005894 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800584c:	4b3d      	ldr	r3, [pc, #244]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a3c      	ldr	r2, [pc, #240]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005858:	f7fd fbd8 	bl	800300c <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005860:	f7fd fbd4 	bl	800300c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e232      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005872:	4b34      	ldr	r3, [pc, #208]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587e:	4b31      	ldr	r3, [pc, #196]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	061b      	lsls	r3, r3, #24
 800588c:	492d      	ldr	r1, [pc, #180]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	604b      	str	r3, [r1, #4]
 8005892:	e01a      	b.n	80058ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005894:	4b2b      	ldr	r3, [pc, #172]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2a      	ldr	r2, [pc, #168]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800589a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800589e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fd fbb4 	bl	800300c <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a8:	f7fd fbb0 	bl	800300c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e20e      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058ba:	4b22      	ldr	r3, [pc, #136]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x1e0>
 80058c6:	e000      	b.n	80058ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d041      	beq.n	800595a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01c      	beq.n	8005918 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058de:	4b19      	ldr	r3, [pc, #100]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 80058e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058e4:	4a17      	ldr	r2, [pc, #92]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ee:	f7fd fb8d 	bl	800300c <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058f6:	f7fd fb89 	bl	800300c <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e1e7      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005908:	4b0e      	ldr	r3, [pc, #56]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800590a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0ef      	beq.n	80058f6 <HAL_RCC_OscConfig+0x22e>
 8005916:	e020      	b.n	800595a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005918:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 800591a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800591e:	4a09      	ldr	r2, [pc, #36]	@ (8005944 <HAL_RCC_OscConfig+0x27c>)
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fd fb70 	bl	800300c <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800592e:	e00d      	b.n	800594c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005930:	f7fd fb6c 	bl	800300c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d906      	bls.n	800594c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e1ca      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
 8005942:	bf00      	nop
 8005944:	40021000 	.word	0x40021000
 8005948:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800594c:	4b8c      	ldr	r3, [pc, #560]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 800594e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1ea      	bne.n	8005930 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80a6 	beq.w	8005ab4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005968:	2300      	movs	r3, #0
 800596a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800596c:	4b84      	ldr	r3, [pc, #528]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 800596e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCC_OscConfig+0x2b4>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x2b6>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005982:	4b7f      	ldr	r3, [pc, #508]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005986:	4a7e      	ldr	r2, [pc, #504]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800598c:	6593      	str	r3, [r2, #88]	@ 0x58
 800598e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800599a:	2301      	movs	r3, #1
 800599c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800599e:	4b79      	ldr	r3, [pc, #484]	@ (8005b84 <HAL_RCC_OscConfig+0x4bc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d118      	bne.n	80059dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059aa:	4b76      	ldr	r3, [pc, #472]	@ (8005b84 <HAL_RCC_OscConfig+0x4bc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a75      	ldr	r2, [pc, #468]	@ (8005b84 <HAL_RCC_OscConfig+0x4bc>)
 80059b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059b6:	f7fd fb29 	bl	800300c <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059be:	f7fd fb25 	bl	800300c <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e183      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005b84 <HAL_RCC_OscConfig+0x4bc>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d108      	bne.n	80059f6 <HAL_RCC_OscConfig+0x32e>
 80059e4:	4b66      	ldr	r3, [pc, #408]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ea:	4a65      	ldr	r2, [pc, #404]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059f4:	e024      	b.n	8005a40 <HAL_RCC_OscConfig+0x378>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	d110      	bne.n	8005a20 <HAL_RCC_OscConfig+0x358>
 80059fe:	4b60      	ldr	r3, [pc, #384]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a04:	4a5e      	ldr	r2, [pc, #376]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a14:	4a5a      	ldr	r2, [pc, #360]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a1e:	e00f      	b.n	8005a40 <HAL_RCC_OscConfig+0x378>
 8005a20:	4b57      	ldr	r3, [pc, #348]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a26:	4a56      	ldr	r2, [pc, #344]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a30:	4b53      	ldr	r3, [pc, #332]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a36:	4a52      	ldr	r2, [pc, #328]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a38:	f023 0304 	bic.w	r3, r3, #4
 8005a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a48:	f7fd fae0 	bl	800300c <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a50:	f7fd fadc 	bl	800300c <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e138      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a66:	4b46      	ldr	r3, [pc, #280]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0ed      	beq.n	8005a50 <HAL_RCC_OscConfig+0x388>
 8005a74:	e015      	b.n	8005aa2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a76:	f7fd fac9 	bl	800300c <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a7c:	e00a      	b.n	8005a94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7e:	f7fd fac5 	bl	800300c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e121      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a94:	4b3a      	ldr	r3, [pc, #232]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1ed      	bne.n	8005a7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005aa2:	7ffb      	ldrb	r3, [r7, #31]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d105      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa8:	4b35      	ldr	r3, [pc, #212]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aac:	4a34      	ldr	r2, [pc, #208]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d03c      	beq.n	8005b3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01c      	beq.n	8005b02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ace:	4a2c      	ldr	r2, [pc, #176]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fd fa98 	bl	800300c <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ae0:	f7fd fa94 	bl	800300c <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e0f2      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005af2:	4b23      	ldr	r3, [pc, #140]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ef      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x418>
 8005b00:	e01b      	b.n	8005b3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b02:	4b1f      	ldr	r3, [pc, #124]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b08:	4a1d      	ldr	r2, [pc, #116]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b12:	f7fd fa7b 	bl	800300c <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b1a:	f7fd fa77 	bl	800300c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e0d5      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b2c:	4b14      	ldr	r3, [pc, #80]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1ef      	bne.n	8005b1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80c9 	beq.w	8005cd6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b44:	4b0e      	ldr	r3, [pc, #56]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 030c 	and.w	r3, r3, #12
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	f000 8083 	beq.w	8005c58 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d15e      	bne.n	8005c18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5a:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a08      	ldr	r2, [pc, #32]	@ (8005b80 <HAL_RCC_OscConfig+0x4b8>)
 8005b60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b66:	f7fd fa51 	bl	800300c <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b6c:	e00c      	b.n	8005b88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6e:	f7fd fa4d 	bl	800300c <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d905      	bls.n	8005b88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e0ab      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
 8005b80:	40021000 	.word	0x40021000
 8005b84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b88:	4b55      	ldr	r3, [pc, #340]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ec      	bne.n	8005b6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b94:	4b52      	ldr	r3, [pc, #328]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	4b52      	ldr	r3, [pc, #328]	@ (8005ce4 <HAL_RCC_OscConfig+0x61c>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6a11      	ldr	r1, [r2, #32]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ba4:	3a01      	subs	r2, #1
 8005ba6:	0112      	lsls	r2, r2, #4
 8005ba8:	4311      	orrs	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005bae:	0212      	lsls	r2, r2, #8
 8005bb0:	4311      	orrs	r1, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005bb6:	0852      	lsrs	r2, r2, #1
 8005bb8:	3a01      	subs	r2, #1
 8005bba:	0552      	lsls	r2, r2, #21
 8005bbc:	4311      	orrs	r1, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005bc2:	0852      	lsrs	r2, r2, #1
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	0652      	lsls	r2, r2, #25
 8005bc8:	4311      	orrs	r1, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005bce:	06d2      	lsls	r2, r2, #27
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	4943      	ldr	r1, [pc, #268]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd8:	4b41      	ldr	r3, [pc, #260]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a40      	ldr	r2, [pc, #256]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005be2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005be4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf0:	f7fd fa0c 	bl	800300c <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf8:	f7fd fa08 	bl	800300c <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e066      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c0a:	4b35      	ldr	r3, [pc, #212]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x530>
 8005c16:	e05e      	b.n	8005cd6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c18:	4b31      	ldr	r3, [pc, #196]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005c1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c24:	f7fd f9f2 	bl	800300c <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7fd f9ee 	bl	800300c <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e04c      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c3e:	4b28      	ldr	r3, [pc, #160]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005c4a:	4b25      	ldr	r3, [pc, #148]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	4924      	ldr	r1, [pc, #144]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005c50:	4b25      	ldr	r3, [pc, #148]	@ (8005ce8 <HAL_RCC_OscConfig+0x620>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	60cb      	str	r3, [r1, #12]
 8005c56:	e03e      	b.n	8005cd6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e039      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005c64:	4b1e      	ldr	r3, [pc, #120]	@ (8005ce0 <HAL_RCC_OscConfig+0x618>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f003 0203 	and.w	r2, r3, #3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d12c      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	3b01      	subs	r3, #1
 8005c84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d123      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d11b      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d113      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d109      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d001      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	019f800c 	.word	0x019f800c
 8005ce8:	feeefffc 	.word	0xfeeefffc

08005cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e11e      	b.n	8005f42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d04:	4b91      	ldr	r3, [pc, #580]	@ (8005f4c <HAL_RCC_ClockConfig+0x260>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d910      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b8e      	ldr	r3, [pc, #568]	@ (8005f4c <HAL_RCC_ClockConfig+0x260>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f023 020f 	bic.w	r2, r3, #15
 8005d1a:	498c      	ldr	r1, [pc, #560]	@ (8005f4c <HAL_RCC_ClockConfig+0x260>)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d22:	4b8a      	ldr	r3, [pc, #552]	@ (8005f4c <HAL_RCC_ClockConfig+0x260>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e106      	b.n	8005f42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d073      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d129      	bne.n	8005d9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d48:	4b81      	ldr	r3, [pc, #516]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e0f4      	b.n	8005f42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d58:	f000 f99e 	bl	8006098 <RCC_GetSysClockFreqFromPLLSource>
 8005d5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4a7c      	ldr	r2, [pc, #496]	@ (8005f54 <HAL_RCC_ClockConfig+0x268>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d93f      	bls.n	8005de6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d66:	4b7a      	ldr	r3, [pc, #488]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d033      	beq.n	8005de6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d12f      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d86:	4b72      	ldr	r3, [pc, #456]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d8e:	4a70      	ldr	r2, [pc, #448]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d96:	2380      	movs	r3, #128	@ 0x80
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	e024      	b.n	8005de6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d107      	bne.n	8005db4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005da4:	4b6a      	ldr	r3, [pc, #424]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d109      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0c6      	b.n	8005f42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005db4:	4b66      	ldr	r3, [pc, #408]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0be      	b.n	8005f42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005dc4:	f000 f8ce 	bl	8005f64 <HAL_RCC_GetSysClockFreq>
 8005dc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	4a61      	ldr	r2, [pc, #388]	@ (8005f54 <HAL_RCC_ClockConfig+0x268>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d909      	bls.n	8005de6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dda:	4a5d      	ldr	r2, [pc, #372]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005de2:	2380      	movs	r3, #128	@ 0x80
 8005de4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005de6:	4b5a      	ldr	r3, [pc, #360]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f023 0203 	bic.w	r2, r3, #3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	4957      	ldr	r1, [pc, #348]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df8:	f7fd f908 	bl	800300c <HAL_GetTick>
 8005dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfe:	e00a      	b.n	8005e16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e00:	f7fd f904 	bl	800300c <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e095      	b.n	8005f42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e16:	4b4e      	ldr	r3, [pc, #312]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 020c 	and.w	r2, r3, #12
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d1eb      	bne.n	8005e00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d023      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e40:	4b43      	ldr	r3, [pc, #268]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	4a42      	ldr	r2, [pc, #264]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005e46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005e58:	4b3d      	ldr	r3, [pc, #244]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e60:	4a3b      	ldr	r2, [pc, #236]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005e62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e68:	4b39      	ldr	r3, [pc, #228]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4936      	ldr	r1, [pc, #216]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	608b      	str	r3, [r1, #8]
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b80      	cmp	r3, #128	@ 0x80
 8005e80:	d105      	bne.n	8005e8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e82:	4b33      	ldr	r3, [pc, #204]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	4a32      	ldr	r2, [pc, #200]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005e88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f4c <HAL_RCC_ClockConfig+0x260>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d21d      	bcs.n	8005ed8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005f4c <HAL_RCC_ClockConfig+0x260>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f023 020f 	bic.w	r2, r3, #15
 8005ea4:	4929      	ldr	r1, [pc, #164]	@ (8005f4c <HAL_RCC_ClockConfig+0x260>)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005eac:	f7fd f8ae 	bl	800300c <HAL_GetTick>
 8005eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb2:	e00a      	b.n	8005eca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb4:	f7fd f8aa 	bl	800300c <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e03b      	b.n	8005f42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eca:	4b20      	ldr	r3, [pc, #128]	@ (8005f4c <HAL_RCC_ClockConfig+0x260>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d1ed      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4917      	ldr	r1, [pc, #92]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f02:	4b13      	ldr	r3, [pc, #76]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	490f      	ldr	r1, [pc, #60]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f16:	f000 f825 	bl	8005f64 <HAL_RCC_GetSysClockFreq>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f50 <HAL_RCC_ClockConfig+0x264>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	490c      	ldr	r1, [pc, #48]	@ (8005f58 <HAL_RCC_ClockConfig+0x26c>)
 8005f28:	5ccb      	ldrb	r3, [r1, r3]
 8005f2a:	f003 031f 	and.w	r3, r3, #31
 8005f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f32:	4a0a      	ldr	r2, [pc, #40]	@ (8005f5c <HAL_RCC_ClockConfig+0x270>)
 8005f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f36:	4b0a      	ldr	r3, [pc, #40]	@ (8005f60 <HAL_RCC_ClockConfig+0x274>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fd f81a 	bl	8002f74 <HAL_InitTick>
 8005f40:	4603      	mov	r3, r0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40022000 	.word	0x40022000
 8005f50:	40021000 	.word	0x40021000
 8005f54:	04c4b400 	.word	0x04c4b400
 8005f58:	0800a178 	.word	0x0800a178
 8005f5c:	2000001c 	.word	0x2000001c
 8005f60:	20000020 	.word	0x20000020

08005f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800601c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d102      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f76:	4b2a      	ldr	r3, [pc, #168]	@ (8006020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e047      	b.n	800600c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f7c:	4b27      	ldr	r3, [pc, #156]	@ (800601c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 030c 	and.w	r3, r3, #12
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d102      	bne.n	8005f8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f88:	4b26      	ldr	r3, [pc, #152]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e03e      	b.n	800600c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f8e:	4b23      	ldr	r3, [pc, #140]	@ (800601c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	2b0c      	cmp	r3, #12
 8005f98:	d136      	bne.n	8006008 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f9a:	4b20      	ldr	r3, [pc, #128]	@ (800601c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800601c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	3301      	adds	r3, #1
 8005fb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d10c      	bne.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006024 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	4a16      	ldr	r2, [pc, #88]	@ (800601c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fc2:	68d2      	ldr	r2, [r2, #12]
 8005fc4:	0a12      	lsrs	r2, r2, #8
 8005fc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	617b      	str	r3, [r7, #20]
      break;
 8005fd0:	e00c      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fd2:	4a13      	ldr	r2, [pc, #76]	@ (8006020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	4a10      	ldr	r2, [pc, #64]	@ (800601c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fdc:	68d2      	ldr	r2, [r2, #12]
 8005fde:	0a12      	lsrs	r2, r2, #8
 8005fe0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fe4:	fb02 f303 	mul.w	r3, r2, r3
 8005fe8:	617b      	str	r3, [r7, #20]
      break;
 8005fea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fec:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	0e5b      	lsrs	r3, r3, #25
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	e001      	b.n	800600c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800600c:	693b      	ldr	r3, [r7, #16]
}
 800600e:	4618      	mov	r0, r3
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
 8006020:	00f42400 	.word	0x00f42400
 8006024:	016e3600 	.word	0x016e3600

08006028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800602c:	4b03      	ldr	r3, [pc, #12]	@ (800603c <HAL_RCC_GetHCLKFreq+0x14>)
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	2000001c 	.word	0x2000001c

08006040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006044:	f7ff fff0 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b06      	ldr	r3, [pc, #24]	@ (8006064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4904      	ldr	r1, [pc, #16]	@ (8006068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40021000 	.word	0x40021000
 8006068:	0800a188 	.word	0x0800a188

0800606c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006070:	f7ff ffda 	bl	8006028 <HAL_RCC_GetHCLKFreq>
 8006074:	4602      	mov	r2, r0
 8006076:	4b06      	ldr	r3, [pc, #24]	@ (8006090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	0adb      	lsrs	r3, r3, #11
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	4904      	ldr	r1, [pc, #16]	@ (8006094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006082:	5ccb      	ldrb	r3, [r1, r3]
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800608c:	4618      	mov	r0, r3
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40021000 	.word	0x40021000
 8006094:	0800a188 	.word	0x0800a188

08006098 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800609e:	4b1e      	ldr	r3, [pc, #120]	@ (8006118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d10c      	bne.n	80060d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060bc:	4a17      	ldr	r2, [pc, #92]	@ (800611c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	4a14      	ldr	r2, [pc, #80]	@ (8006118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060c6:	68d2      	ldr	r2, [r2, #12]
 80060c8:	0a12      	lsrs	r2, r2, #8
 80060ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060ce:	fb02 f303 	mul.w	r3, r2, r3
 80060d2:	617b      	str	r3, [r7, #20]
    break;
 80060d4:	e00c      	b.n	80060f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060d6:	4a12      	ldr	r2, [pc, #72]	@ (8006120 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	4a0e      	ldr	r2, [pc, #56]	@ (8006118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060e0:	68d2      	ldr	r2, [r2, #12]
 80060e2:	0a12      	lsrs	r2, r2, #8
 80060e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	617b      	str	r3, [r7, #20]
    break;
 80060ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060f0:	4b09      	ldr	r3, [pc, #36]	@ (8006118 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	0e5b      	lsrs	r3, r3, #25
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	3301      	adds	r3, #1
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	fbb2 f3f3 	udiv	r3, r2, r3
 8006108:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800610a:	687b      	ldr	r3, [r7, #4]
}
 800610c:	4618      	mov	r0, r3
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40021000 	.word	0x40021000
 800611c:	016e3600 	.word	0x016e3600
 8006120:	00f42400 	.word	0x00f42400

08006124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800612c:	2300      	movs	r3, #0
 800612e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006130:	2300      	movs	r3, #0
 8006132:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8098 	beq.w	8006272 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006142:	2300      	movs	r3, #0
 8006144:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006146:	4b43      	ldr	r3, [pc, #268]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10d      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006152:	4b40      	ldr	r3, [pc, #256]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006156:	4a3f      	ldr	r2, [pc, #252]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800615c:	6593      	str	r3, [r2, #88]	@ 0x58
 800615e:	4b3d      	ldr	r3, [pc, #244]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006166:	60bb      	str	r3, [r7, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800616a:	2301      	movs	r3, #1
 800616c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800616e:	4b3a      	ldr	r3, [pc, #232]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a39      	ldr	r2, [pc, #228]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800617a:	f7fc ff47 	bl	800300c <HAL_GetTick>
 800617e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006180:	e009      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006182:	f7fc ff43 	bl	800300c <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d902      	bls.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	74fb      	strb	r3, [r7, #19]
        break;
 8006194:	e005      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006196:	4b30      	ldr	r3, [pc, #192]	@ (8006258 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0ef      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80061a2:	7cfb      	ldrb	r3, [r7, #19]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d159      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01e      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d019      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061c4:	4b23      	ldr	r3, [pc, #140]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061d0:	4b20      	ldr	r3, [pc, #128]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061f0:	4a18      	ldr	r2, [pc, #96]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d016      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006202:	f7fc ff03 	bl	800300c <HAL_GetTick>
 8006206:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006208:	e00b      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fc feff 	bl	800300c <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006218:	4293      	cmp	r3, r2
 800621a:	d902      	bls.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	74fb      	strb	r3, [r7, #19]
            break;
 8006220:	e006      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006222:	4b0c      	ldr	r3, [pc, #48]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0ec      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006236:	4b07      	ldr	r3, [pc, #28]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006244:	4903      	ldr	r1, [pc, #12]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800624c:	e008      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800624e:	7cfb      	ldrb	r3, [r7, #19]
 8006250:	74bb      	strb	r3, [r7, #18]
 8006252:	e005      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006254:	40021000 	.word	0x40021000
 8006258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	7cfb      	ldrb	r3, [r7, #19]
 800625e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006260:	7c7b      	ldrb	r3, [r7, #17]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d105      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006266:	4ba7      	ldr	r3, [pc, #668]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626a:	4aa6      	ldr	r2, [pc, #664]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006270:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800627e:	4ba1      	ldr	r3, [pc, #644]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006284:	f023 0203 	bic.w	r2, r3, #3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	499d      	ldr	r1, [pc, #628]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062a0:	4b98      	ldr	r3, [pc, #608]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a6:	f023 020c 	bic.w	r2, r3, #12
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	4995      	ldr	r1, [pc, #596]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062c2:	4b90      	ldr	r3, [pc, #576]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	498c      	ldr	r1, [pc, #560]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062e4:	4b87      	ldr	r3, [pc, #540]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	4984      	ldr	r1, [pc, #528]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006306:	4b7f      	ldr	r3, [pc, #508]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	497b      	ldr	r1, [pc, #492]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006328:	4b76      	ldr	r3, [pc, #472]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800632e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	4973      	ldr	r1, [pc, #460]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800634a:	4b6e      	ldr	r3, [pc, #440]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006350:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	496a      	ldr	r1, [pc, #424]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800636c:	4b65      	ldr	r3, [pc, #404]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006372:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	4962      	ldr	r1, [pc, #392]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800638e:	4b5d      	ldr	r3, [pc, #372]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006394:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639c:	4959      	ldr	r1, [pc, #356]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063b0:	4b54      	ldr	r3, [pc, #336]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063b6:	f023 0203 	bic.w	r2, r3, #3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063be:	4951      	ldr	r1, [pc, #324]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063d2:	4b4c      	ldr	r3, [pc, #304]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	4948      	ldr	r1, [pc, #288]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d015      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063f4:	4b43      	ldr	r3, [pc, #268]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006402:	4940      	ldr	r1, [pc, #256]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006412:	d105      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006414:	4b3b      	ldr	r3, [pc, #236]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	4a3a      	ldr	r2, [pc, #232]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800641e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006428:	2b00      	cmp	r3, #0
 800642a:	d015      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800642c:	4b35      	ldr	r3, [pc, #212]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006432:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800643a:	4932      	ldr	r1, [pc, #200]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800644a:	d105      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800644c:	4b2d      	ldr	r3, [pc, #180]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	4a2c      	ldr	r2, [pc, #176]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006456:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d015      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006464:	4b27      	ldr	r3, [pc, #156]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006472:	4924      	ldr	r1, [pc, #144]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006482:	d105      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006484:	4b1f      	ldr	r3, [pc, #124]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4a1e      	ldr	r2, [pc, #120]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800648e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d015      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800649c:	4b19      	ldr	r3, [pc, #100]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064aa:	4916      	ldr	r1, [pc, #88]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064ba:	d105      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064bc:	4b11      	ldr	r3, [pc, #68]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	4a10      	ldr	r2, [pc, #64]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d019      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	4908      	ldr	r1, [pc, #32]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f2:	d109      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064f4:	4b03      	ldr	r3, [pc, #12]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	4a02      	ldr	r2, [pc, #8]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064fe:	60d3      	str	r3, [r2, #12]
 8006500:	e002      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006502:	bf00      	nop
 8006504:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d015      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006514:	4b29      	ldr	r3, [pc, #164]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006522:	4926      	ldr	r1, [pc, #152]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006532:	d105      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006534:	4b21      	ldr	r3, [pc, #132]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4a20      	ldr	r2, [pc, #128]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800653a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800653e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d015      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800654c:	4b1b      	ldr	r3, [pc, #108]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006552:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800655a:	4918      	ldr	r1, [pc, #96]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656a:	d105      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800656c:	4b13      	ldr	r3, [pc, #76]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	4a12      	ldr	r2, [pc, #72]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006576:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d015      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006584:	4b0d      	ldr	r3, [pc, #52]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800658a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006592:	490a      	ldr	r1, [pc, #40]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065a2:	d105      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a4:	4b05      	ldr	r3, [pc, #20]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a04      	ldr	r2, [pc, #16]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80065b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40021000 	.word	0x40021000

080065c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e049      	b.n	8006666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fc fb02 	bl	8002bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f000 ff68 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b01      	cmp	r3, #1
 8006682:	d001      	beq.n	8006688 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e04c      	b.n	8006722 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a26      	ldr	r2, [pc, #152]	@ (8006730 <HAL_TIM_Base_Start+0xc0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d022      	beq.n	80066e0 <HAL_TIM_Base_Start+0x70>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a2:	d01d      	beq.n	80066e0 <HAL_TIM_Base_Start+0x70>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a22      	ldr	r2, [pc, #136]	@ (8006734 <HAL_TIM_Base_Start+0xc4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d018      	beq.n	80066e0 <HAL_TIM_Base_Start+0x70>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a21      	ldr	r2, [pc, #132]	@ (8006738 <HAL_TIM_Base_Start+0xc8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_TIM_Base_Start+0x70>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1f      	ldr	r2, [pc, #124]	@ (800673c <HAL_TIM_Base_Start+0xcc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_TIM_Base_Start+0x70>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006740 <HAL_TIM_Base_Start+0xd0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_TIM_Base_Start+0x70>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006744 <HAL_TIM_Base_Start+0xd4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIM_Base_Start+0x70>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1b      	ldr	r2, [pc, #108]	@ (8006748 <HAL_TIM_Base_Start+0xd8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d115      	bne.n	800670c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	4b19      	ldr	r3, [pc, #100]	@ (800674c <HAL_TIM_Base_Start+0xdc>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b06      	cmp	r3, #6
 80066f0:	d015      	beq.n	800671e <HAL_TIM_Base_Start+0xae>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066f8:	d011      	beq.n	800671e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0201 	orr.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800670a:	e008      	b.n	800671e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e000      	b.n	8006720 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800671e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40000400 	.word	0x40000400
 8006738:	40000800 	.word	0x40000800
 800673c:	40000c00 	.word	0x40000c00
 8006740:	40013400 	.word	0x40013400
 8006744:	40014000 	.word	0x40014000
 8006748:	40015000 	.word	0x40015000
 800674c:	00010007 	.word	0x00010007

08006750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d001      	beq.n	8006768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e054      	b.n	8006812 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a26      	ldr	r2, [pc, #152]	@ (8006820 <HAL_TIM_Base_Start_IT+0xd0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d022      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006792:	d01d      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a22      	ldr	r2, [pc, #136]	@ (8006824 <HAL_TIM_Base_Start_IT+0xd4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d018      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a21      	ldr	r2, [pc, #132]	@ (8006828 <HAL_TIM_Base_Start_IT+0xd8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1f      	ldr	r2, [pc, #124]	@ (800682c <HAL_TIM_Base_Start_IT+0xdc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00e      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006830 <HAL_TIM_Base_Start_IT+0xe0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d009      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006834 <HAL_TIM_Base_Start_IT+0xe4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d004      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x80>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006838 <HAL_TIM_Base_Start_IT+0xe8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d115      	bne.n	80067fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	4b19      	ldr	r3, [pc, #100]	@ (800683c <HAL_TIM_Base_Start_IT+0xec>)
 80067d8:	4013      	ands	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b06      	cmp	r3, #6
 80067e0:	d015      	beq.n	800680e <HAL_TIM_Base_Start_IT+0xbe>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e8:	d011      	beq.n	800680e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fa:	e008      	b.n	800680e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e000      	b.n	8006810 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40013400 	.word	0x40013400
 8006834:	40014000 	.word	0x40014000
 8006838:	40015000 	.word	0x40015000
 800683c:	00010007 	.word	0x00010007

08006840 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e049      	b.n	80068e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f841 	bl	80068ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f000 fe28 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <HAL_TIM_PWM_Start+0x24>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e03c      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b04      	cmp	r3, #4
 800692c:	d109      	bne.n	8006942 <HAL_TIM_PWM_Start+0x3e>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b01      	cmp	r3, #1
 8006938:	bf14      	ite	ne
 800693a:	2301      	movne	r3, #1
 800693c:	2300      	moveq	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	e02f      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b08      	cmp	r3, #8
 8006946:	d109      	bne.n	800695c <HAL_TIM_PWM_Start+0x58>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	bf14      	ite	ne
 8006954:	2301      	movne	r3, #1
 8006956:	2300      	moveq	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e022      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b0c      	cmp	r3, #12
 8006960:	d109      	bne.n	8006976 <HAL_TIM_PWM_Start+0x72>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b01      	cmp	r3, #1
 800696c:	bf14      	ite	ne
 800696e:	2301      	movne	r3, #1
 8006970:	2300      	moveq	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	e015      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b10      	cmp	r3, #16
 800697a:	d109      	bne.n	8006990 <HAL_TIM_PWM_Start+0x8c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	bf14      	ite	ne
 8006988:	2301      	movne	r3, #1
 800698a:	2300      	moveq	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	e008      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	bf14      	ite	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2300      	moveq	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e0a6      	b.n	8006af8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <HAL_TIM_PWM_Start+0xb6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069b8:	e023      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d104      	bne.n	80069ca <HAL_TIM_PWM_Start+0xc6>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069c8:	e01b      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d104      	bne.n	80069da <HAL_TIM_PWM_Start+0xd6>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069d8:	e013      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b0c      	cmp	r3, #12
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_Start+0xe6>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069e8:	e00b      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_Start+0xf6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069f8:	e003      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2202      	movs	r2, #2
 80069fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2201      	movs	r2, #1
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f001 f9dc 	bl	8007dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a3a      	ldr	r2, [pc, #232]	@ (8006b00 <HAL_TIM_PWM_Start+0x1fc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d018      	beq.n	8006a4c <HAL_TIM_PWM_Start+0x148>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a39      	ldr	r2, [pc, #228]	@ (8006b04 <HAL_TIM_PWM_Start+0x200>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <HAL_TIM_PWM_Start+0x148>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a37      	ldr	r2, [pc, #220]	@ (8006b08 <HAL_TIM_PWM_Start+0x204>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <HAL_TIM_PWM_Start+0x148>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a36      	ldr	r2, [pc, #216]	@ (8006b0c <HAL_TIM_PWM_Start+0x208>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <HAL_TIM_PWM_Start+0x148>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a34      	ldr	r2, [pc, #208]	@ (8006b10 <HAL_TIM_PWM_Start+0x20c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_TIM_PWM_Start+0x148>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a33      	ldr	r2, [pc, #204]	@ (8006b14 <HAL_TIM_PWM_Start+0x210>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIM_PWM_Start+0x14c>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <HAL_TIM_PWM_Start+0x14e>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a25      	ldr	r2, [pc, #148]	@ (8006b00 <HAL_TIM_PWM_Start+0x1fc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d022      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x1b2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a78:	d01d      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x1b2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a26      	ldr	r2, [pc, #152]	@ (8006b18 <HAL_TIM_PWM_Start+0x214>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x1b2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a24      	ldr	r2, [pc, #144]	@ (8006b1c <HAL_TIM_PWM_Start+0x218>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x1b2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a23      	ldr	r2, [pc, #140]	@ (8006b20 <HAL_TIM_PWM_Start+0x21c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x1b2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a19      	ldr	r2, [pc, #100]	@ (8006b04 <HAL_TIM_PWM_Start+0x200>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x1b2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a18      	ldr	r2, [pc, #96]	@ (8006b08 <HAL_TIM_PWM_Start+0x204>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIM_PWM_Start+0x1b2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a18      	ldr	r2, [pc, #96]	@ (8006b14 <HAL_TIM_PWM_Start+0x210>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d115      	bne.n	8006ae2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	4b19      	ldr	r3, [pc, #100]	@ (8006b24 <HAL_TIM_PWM_Start+0x220>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b06      	cmp	r3, #6
 8006ac6:	d015      	beq.n	8006af4 <HAL_TIM_PWM_Start+0x1f0>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ace:	d011      	beq.n	8006af4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae0:	e008      	b.n	8006af4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0201 	orr.w	r2, r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e000      	b.n	8006af6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40012c00 	.word	0x40012c00
 8006b04:	40013400 	.word	0x40013400
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800
 8006b14:	40015000 	.word	0x40015000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	00010007 	.word	0x00010007

08006b28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e097      	b.n	8006c6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fc f8c1 	bl	8002cd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6812      	ldr	r2, [r2, #0]
 8006b68:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006b6c:	f023 0307 	bic.w	r3, r3, #7
 8006b70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f000 fca9 	bl	80074d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006bc8:	f023 030c 	bic.w	r3, r3, #12
 8006bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	4313      	orrs	r3, r2
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	011a      	lsls	r2, r3, #4
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	031b      	lsls	r3, r3, #12
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006c06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006c0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d110      	bne.n	8006cc6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d102      	bne.n	8006cb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006caa:	7b7b      	ldrb	r3, [r7, #13]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d001      	beq.n	8006cb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e069      	b.n	8006d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cc4:	e031      	b.n	8006d2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d110      	bne.n	8006cee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d102      	bne.n	8006cd8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cd2:	7b3b      	ldrb	r3, [r7, #12]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d001      	beq.n	8006cdc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e055      	b.n	8006d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cec:	e01d      	b.n	8006d2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d108      	bne.n	8006d06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d105      	bne.n	8006d06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cfa:	7b7b      	ldrb	r3, [r7, #13]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d102      	bne.n	8006d06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d00:	7b3b      	ldrb	r3, [r7, #12]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d001      	beq.n	8006d0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e03e      	b.n	8006d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_TIM_Encoder_Start+0xc4>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d008      	beq.n	8006d48 <HAL_TIM_Encoder_Start+0xd4>
 8006d36:	e00f      	b.n	8006d58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 f841 	bl	8007dc8 <TIM_CCxChannelCmd>
      break;
 8006d46:	e016      	b.n	8006d76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	2104      	movs	r1, #4
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 f839 	bl	8007dc8 <TIM_CCxChannelCmd>
      break;
 8006d56:	e00e      	b.n	8006d76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 f831 	bl	8007dc8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	2104      	movs	r1, #4
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 f82a 	bl	8007dc8 <TIM_CCxChannelCmd>
      break;
 8006d74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0201 	orr.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d020      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01b      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0202 	mvn.w	r2, #2
 8006dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fb5c 	bl	8007498 <HAL_TIM_IC_CaptureCallback>
 8006de0:	e005      	b.n	8006dee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fb4e 	bl	8007484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fb5f 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d020      	beq.n	8006e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01b      	beq.n	8006e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0204 	mvn.w	r2, #4
 8006e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fb36 	bl	8007498 <HAL_TIM_IC_CaptureCallback>
 8006e2c:	e005      	b.n	8006e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fb28 	bl	8007484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fb39 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d020      	beq.n	8006e8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d01b      	beq.n	8006e8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f06f 0208 	mvn.w	r2, #8
 8006e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2204      	movs	r2, #4
 8006e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fb10 	bl	8007498 <HAL_TIM_IC_CaptureCallback>
 8006e78:	e005      	b.n	8006e86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fb02 	bl	8007484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fb13 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d020      	beq.n	8006ed8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01b      	beq.n	8006ed8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f06f 0210 	mvn.w	r2, #16
 8006ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2208      	movs	r2, #8
 8006eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 faea 	bl	8007498 <HAL_TIM_IC_CaptureCallback>
 8006ec4:	e005      	b.n	8006ed2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fadc 	bl	8007484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 faed 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00c      	beq.n	8006efc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0201 	mvn.w	r2, #1
 8006ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7fa ff26 	bl	8001d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00c      	beq.n	8006f2a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d007      	beq.n	8006f2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 f815 	bl	8007f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00c      	beq.n	8006f4e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 f80d 	bl	8007f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00c      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 faa7 	bl	80074c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00c      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d007      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f06f 0220 	mvn.w	r2, #32
 8006f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 ffd5 	bl	8007f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00c      	beq.n	8006fba <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 ffe1 	bl	8007f7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00c      	beq.n	8006fde <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 ffd9 	bl	8007f90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00c      	beq.n	8007002 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 ffd1 	bl	8007fa4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800701e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 ffc9 	bl	8007fb8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800704a:	2302      	movs	r3, #2
 800704c:	e0ff      	b.n	800724e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b14      	cmp	r3, #20
 800705a:	f200 80f0 	bhi.w	800723e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800705e:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	080070b9 	.word	0x080070b9
 8007068:	0800723f 	.word	0x0800723f
 800706c:	0800723f 	.word	0x0800723f
 8007070:	0800723f 	.word	0x0800723f
 8007074:	080070f9 	.word	0x080070f9
 8007078:	0800723f 	.word	0x0800723f
 800707c:	0800723f 	.word	0x0800723f
 8007080:	0800723f 	.word	0x0800723f
 8007084:	0800713b 	.word	0x0800713b
 8007088:	0800723f 	.word	0x0800723f
 800708c:	0800723f 	.word	0x0800723f
 8007090:	0800723f 	.word	0x0800723f
 8007094:	0800717b 	.word	0x0800717b
 8007098:	0800723f 	.word	0x0800723f
 800709c:	0800723f 	.word	0x0800723f
 80070a0:	0800723f 	.word	0x0800723f
 80070a4:	080071bd 	.word	0x080071bd
 80070a8:	0800723f 	.word	0x0800723f
 80070ac:	0800723f 	.word	0x0800723f
 80070b0:	0800723f 	.word	0x0800723f
 80070b4:	080071fd 	.word	0x080071fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fabc 	bl	800763c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0208 	orr.w	r2, r2, #8
 80070d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0204 	bic.w	r2, r2, #4
 80070e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6999      	ldr	r1, [r3, #24]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	619a      	str	r2, [r3, #24]
      break;
 80070f6:	e0a5      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fb36 	bl	8007770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6999      	ldr	r1, [r3, #24]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	021a      	lsls	r2, r3, #8
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	619a      	str	r2, [r3, #24]
      break;
 8007138:	e084      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fba9 	bl	8007898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0208 	orr.w	r2, r2, #8
 8007154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69da      	ldr	r2, [r3, #28]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0204 	bic.w	r2, r2, #4
 8007164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69d9      	ldr	r1, [r3, #28]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	61da      	str	r2, [r3, #28]
      break;
 8007178:	e064      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68b9      	ldr	r1, [r7, #8]
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fc1b 	bl	80079bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69da      	ldr	r2, [r3, #28]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69d9      	ldr	r1, [r3, #28]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	021a      	lsls	r2, r3, #8
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	61da      	str	r2, [r3, #28]
      break;
 80071ba:	e043      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fc8e 	bl	8007ae4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0208 	orr.w	r2, r2, #8
 80071d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0204 	bic.w	r2, r2, #4
 80071e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80071fa:	e023      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fcd8 	bl	8007bb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007216:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007226:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	021a      	lsls	r2, r3, #8
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800723c:	e002      	b.n	8007244 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	75fb      	strb	r3, [r7, #23]
      break;
 8007242:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop

08007258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_TIM_ConfigClockSource+0x1c>
 8007270:	2302      	movs	r3, #2
 8007272:	e0f6      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x20a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800729e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a6f      	ldr	r2, [pc, #444]	@ (800746c <HAL_TIM_ConfigClockSource+0x214>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	f000 80c1 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 80072b4:	4a6d      	ldr	r2, [pc, #436]	@ (800746c <HAL_TIM_ConfigClockSource+0x214>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	f200 80c6 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 80072bc:	4a6c      	ldr	r2, [pc, #432]	@ (8007470 <HAL_TIM_ConfigClockSource+0x218>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	f000 80b9 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 80072c4:	4a6a      	ldr	r2, [pc, #424]	@ (8007470 <HAL_TIM_ConfigClockSource+0x218>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	f200 80be 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 80072cc:	4a69      	ldr	r2, [pc, #420]	@ (8007474 <HAL_TIM_ConfigClockSource+0x21c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	f000 80b1 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 80072d4:	4a67      	ldr	r2, [pc, #412]	@ (8007474 <HAL_TIM_ConfigClockSource+0x21c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	f200 80b6 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 80072dc:	4a66      	ldr	r2, [pc, #408]	@ (8007478 <HAL_TIM_ConfigClockSource+0x220>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	f000 80a9 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 80072e4:	4a64      	ldr	r2, [pc, #400]	@ (8007478 <HAL_TIM_ConfigClockSource+0x220>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	f200 80ae 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 80072ec:	4a63      	ldr	r2, [pc, #396]	@ (800747c <HAL_TIM_ConfigClockSource+0x224>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	f000 80a1 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 80072f4:	4a61      	ldr	r2, [pc, #388]	@ (800747c <HAL_TIM_ConfigClockSource+0x224>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	f200 80a6 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 80072fc:	4a60      	ldr	r2, [pc, #384]	@ (8007480 <HAL_TIM_ConfigClockSource+0x228>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	f000 8099 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 8007304:	4a5e      	ldr	r2, [pc, #376]	@ (8007480 <HAL_TIM_ConfigClockSource+0x228>)
 8007306:	4293      	cmp	r3, r2
 8007308:	f200 809e 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 800730c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007310:	f000 8091 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 8007314:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007318:	f200 8096 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 800731c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007320:	f000 8089 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 8007324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007328:	f200 808e 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 800732c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007330:	d03e      	beq.n	80073b0 <HAL_TIM_ConfigClockSource+0x158>
 8007332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007336:	f200 8087 	bhi.w	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 800733a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800733e:	f000 8086 	beq.w	800744e <HAL_TIM_ConfigClockSource+0x1f6>
 8007342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007346:	d87f      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 8007348:	2b70      	cmp	r3, #112	@ 0x70
 800734a:	d01a      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x12a>
 800734c:	2b70      	cmp	r3, #112	@ 0x70
 800734e:	d87b      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 8007350:	2b60      	cmp	r3, #96	@ 0x60
 8007352:	d050      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x19e>
 8007354:	2b60      	cmp	r3, #96	@ 0x60
 8007356:	d877      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 8007358:	2b50      	cmp	r3, #80	@ 0x50
 800735a:	d03c      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x17e>
 800735c:	2b50      	cmp	r3, #80	@ 0x50
 800735e:	d873      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 8007360:	2b40      	cmp	r3, #64	@ 0x40
 8007362:	d058      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x1be>
 8007364:	2b40      	cmp	r3, #64	@ 0x40
 8007366:	d86f      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 8007368:	2b30      	cmp	r3, #48	@ 0x30
 800736a:	d064      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 800736c:	2b30      	cmp	r3, #48	@ 0x30
 800736e:	d86b      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 8007370:	2b20      	cmp	r3, #32
 8007372:	d060      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 8007374:	2b20      	cmp	r3, #32
 8007376:	d867      	bhi.n	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05c      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 800737c:	2b10      	cmp	r3, #16
 800737e:	d05a      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x1de>
 8007380:	e062      	b.n	8007448 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007392:	f000 fcf9 	bl	8007d88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	609a      	str	r2, [r3, #8]
      break;
 80073ae:	e04f      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073c0:	f000 fce2 	bl	8007d88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073d2:	609a      	str	r2, [r3, #8]
      break;
 80073d4:	e03c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e2:	461a      	mov	r2, r3
 80073e4:	f000 fc54 	bl	8007c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2150      	movs	r1, #80	@ 0x50
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fcad 	bl	8007d4e <TIM_ITRx_SetConfig>
      break;
 80073f4:	e02c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007402:	461a      	mov	r2, r3
 8007404:	f000 fc73 	bl	8007cee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2160      	movs	r1, #96	@ 0x60
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fc9d 	bl	8007d4e <TIM_ITRx_SetConfig>
      break;
 8007414:	e01c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007422:	461a      	mov	r2, r3
 8007424:	f000 fc34 	bl	8007c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2140      	movs	r1, #64	@ 0x40
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fc8d 	bl	8007d4e <TIM_ITRx_SetConfig>
      break;
 8007434:	e00c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f000 fc84 	bl	8007d4e <TIM_ITRx_SetConfig>
      break;
 8007446:	e003      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	73fb      	strb	r3, [r7, #15]
      break;
 800744c:	e000      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800744e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	00100070 	.word	0x00100070
 8007470:	00100060 	.word	0x00100060
 8007474:	00100050 	.word	0x00100050
 8007478:	00100040 	.word	0x00100040
 800747c:	00100030 	.word	0x00100030
 8007480:	00100020 	.word	0x00100020

08007484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a4c      	ldr	r2, [pc, #304]	@ (8007618 <TIM_Base_SetConfig+0x144>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d017      	beq.n	800751c <TIM_Base_SetConfig+0x48>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f2:	d013      	beq.n	800751c <TIM_Base_SetConfig+0x48>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a49      	ldr	r2, [pc, #292]	@ (800761c <TIM_Base_SetConfig+0x148>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00f      	beq.n	800751c <TIM_Base_SetConfig+0x48>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a48      	ldr	r2, [pc, #288]	@ (8007620 <TIM_Base_SetConfig+0x14c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00b      	beq.n	800751c <TIM_Base_SetConfig+0x48>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a47      	ldr	r2, [pc, #284]	@ (8007624 <TIM_Base_SetConfig+0x150>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d007      	beq.n	800751c <TIM_Base_SetConfig+0x48>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a46      	ldr	r2, [pc, #280]	@ (8007628 <TIM_Base_SetConfig+0x154>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_Base_SetConfig+0x48>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a45      	ldr	r2, [pc, #276]	@ (800762c <TIM_Base_SetConfig+0x158>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d108      	bne.n	800752e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a39      	ldr	r2, [pc, #228]	@ (8007618 <TIM_Base_SetConfig+0x144>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d023      	beq.n	800757e <TIM_Base_SetConfig+0xaa>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753c:	d01f      	beq.n	800757e <TIM_Base_SetConfig+0xaa>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a36      	ldr	r2, [pc, #216]	@ (800761c <TIM_Base_SetConfig+0x148>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01b      	beq.n	800757e <TIM_Base_SetConfig+0xaa>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a35      	ldr	r2, [pc, #212]	@ (8007620 <TIM_Base_SetConfig+0x14c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d017      	beq.n	800757e <TIM_Base_SetConfig+0xaa>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a34      	ldr	r2, [pc, #208]	@ (8007624 <TIM_Base_SetConfig+0x150>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d013      	beq.n	800757e <TIM_Base_SetConfig+0xaa>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a33      	ldr	r2, [pc, #204]	@ (8007628 <TIM_Base_SetConfig+0x154>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00f      	beq.n	800757e <TIM_Base_SetConfig+0xaa>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a33      	ldr	r2, [pc, #204]	@ (8007630 <TIM_Base_SetConfig+0x15c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00b      	beq.n	800757e <TIM_Base_SetConfig+0xaa>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a32      	ldr	r2, [pc, #200]	@ (8007634 <TIM_Base_SetConfig+0x160>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d007      	beq.n	800757e <TIM_Base_SetConfig+0xaa>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a31      	ldr	r2, [pc, #196]	@ (8007638 <TIM_Base_SetConfig+0x164>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d003      	beq.n	800757e <TIM_Base_SetConfig+0xaa>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a2c      	ldr	r2, [pc, #176]	@ (800762c <TIM_Base_SetConfig+0x158>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d108      	bne.n	8007590 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4313      	orrs	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a18      	ldr	r2, [pc, #96]	@ (8007618 <TIM_Base_SetConfig+0x144>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d013      	beq.n	80075e4 <TIM_Base_SetConfig+0x110>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a1a      	ldr	r2, [pc, #104]	@ (8007628 <TIM_Base_SetConfig+0x154>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00f      	beq.n	80075e4 <TIM_Base_SetConfig+0x110>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007630 <TIM_Base_SetConfig+0x15c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00b      	beq.n	80075e4 <TIM_Base_SetConfig+0x110>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a19      	ldr	r2, [pc, #100]	@ (8007634 <TIM_Base_SetConfig+0x160>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d007      	beq.n	80075e4 <TIM_Base_SetConfig+0x110>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a18      	ldr	r2, [pc, #96]	@ (8007638 <TIM_Base_SetConfig+0x164>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d003      	beq.n	80075e4 <TIM_Base_SetConfig+0x110>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a13      	ldr	r2, [pc, #76]	@ (800762c <TIM_Base_SetConfig+0x158>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d103      	bne.n	80075ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d105      	bne.n	800760a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f023 0201 	bic.w	r2, r3, #1
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	611a      	str	r2, [r3, #16]
  }
}
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40012c00 	.word	0x40012c00
 800761c:	40000400 	.word	0x40000400
 8007620:	40000800 	.word	0x40000800
 8007624:	40000c00 	.word	0x40000c00
 8007628:	40013400 	.word	0x40013400
 800762c:	40015000 	.word	0x40015000
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400
 8007638:	40014800 	.word	0x40014800

0800763c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f023 0201 	bic.w	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800766a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800766e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0303 	bic.w	r3, r3, #3
 8007676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f023 0302 	bic.w	r3, r3, #2
 8007688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a30      	ldr	r2, [pc, #192]	@ (8007758 <TIM_OC1_SetConfig+0x11c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d013      	beq.n	80076c4 <TIM_OC1_SetConfig+0x88>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a2f      	ldr	r2, [pc, #188]	@ (800775c <TIM_OC1_SetConfig+0x120>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00f      	beq.n	80076c4 <TIM_OC1_SetConfig+0x88>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a2e      	ldr	r2, [pc, #184]	@ (8007760 <TIM_OC1_SetConfig+0x124>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00b      	beq.n	80076c4 <TIM_OC1_SetConfig+0x88>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a2d      	ldr	r2, [pc, #180]	@ (8007764 <TIM_OC1_SetConfig+0x128>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d007      	beq.n	80076c4 <TIM_OC1_SetConfig+0x88>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007768 <TIM_OC1_SetConfig+0x12c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d003      	beq.n	80076c4 <TIM_OC1_SetConfig+0x88>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a2b      	ldr	r2, [pc, #172]	@ (800776c <TIM_OC1_SetConfig+0x130>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d10c      	bne.n	80076de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 0308 	bic.w	r3, r3, #8
 80076ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f023 0304 	bic.w	r3, r3, #4
 80076dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007758 <TIM_OC1_SetConfig+0x11c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d013      	beq.n	800770e <TIM_OC1_SetConfig+0xd2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1c      	ldr	r2, [pc, #112]	@ (800775c <TIM_OC1_SetConfig+0x120>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00f      	beq.n	800770e <TIM_OC1_SetConfig+0xd2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007760 <TIM_OC1_SetConfig+0x124>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00b      	beq.n	800770e <TIM_OC1_SetConfig+0xd2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a1a      	ldr	r2, [pc, #104]	@ (8007764 <TIM_OC1_SetConfig+0x128>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d007      	beq.n	800770e <TIM_OC1_SetConfig+0xd2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a19      	ldr	r2, [pc, #100]	@ (8007768 <TIM_OC1_SetConfig+0x12c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_OC1_SetConfig+0xd2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a18      	ldr	r2, [pc, #96]	@ (800776c <TIM_OC1_SetConfig+0x130>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d111      	bne.n	8007732 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800771c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	621a      	str	r2, [r3, #32]
}
 800774c:	bf00      	nop
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	40012c00 	.word	0x40012c00
 800775c:	40013400 	.word	0x40013400
 8007760:	40014000 	.word	0x40014000
 8007764:	40014400 	.word	0x40014400
 8007768:	40014800 	.word	0x40014800
 800776c:	40015000 	.word	0x40015000

08007770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f023 0210 	bic.w	r2, r3, #16
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800779e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f023 0320 	bic.w	r3, r3, #32
 80077be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007880 <TIM_OC2_SetConfig+0x110>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d007      	beq.n	80077e4 <TIM_OC2_SetConfig+0x74>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a2b      	ldr	r2, [pc, #172]	@ (8007884 <TIM_OC2_SetConfig+0x114>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d003      	beq.n	80077e4 <TIM_OC2_SetConfig+0x74>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a2a      	ldr	r2, [pc, #168]	@ (8007888 <TIM_OC2_SetConfig+0x118>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d10d      	bne.n	8007800 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a1f      	ldr	r2, [pc, #124]	@ (8007880 <TIM_OC2_SetConfig+0x110>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <TIM_OC2_SetConfig+0xc0>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a1e      	ldr	r2, [pc, #120]	@ (8007884 <TIM_OC2_SetConfig+0x114>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d00f      	beq.n	8007830 <TIM_OC2_SetConfig+0xc0>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a1e      	ldr	r2, [pc, #120]	@ (800788c <TIM_OC2_SetConfig+0x11c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00b      	beq.n	8007830 <TIM_OC2_SetConfig+0xc0>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a1d      	ldr	r2, [pc, #116]	@ (8007890 <TIM_OC2_SetConfig+0x120>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d007      	beq.n	8007830 <TIM_OC2_SetConfig+0xc0>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a1c      	ldr	r2, [pc, #112]	@ (8007894 <TIM_OC2_SetConfig+0x124>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d003      	beq.n	8007830 <TIM_OC2_SetConfig+0xc0>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a17      	ldr	r2, [pc, #92]	@ (8007888 <TIM_OC2_SetConfig+0x118>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d113      	bne.n	8007858 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800783e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	621a      	str	r2, [r3, #32]
}
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	40012c00 	.word	0x40012c00
 8007884:	40013400 	.word	0x40013400
 8007888:	40015000 	.word	0x40015000
 800788c:	40014000 	.word	0x40014000
 8007890:	40014400 	.word	0x40014400
 8007894:	40014800 	.word	0x40014800

08007898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0303 	bic.w	r3, r3, #3
 80078d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2b      	ldr	r2, [pc, #172]	@ (80079a4 <TIM_OC3_SetConfig+0x10c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_OC3_SetConfig+0x72>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2a      	ldr	r2, [pc, #168]	@ (80079a8 <TIM_OC3_SetConfig+0x110>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_OC3_SetConfig+0x72>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a29      	ldr	r2, [pc, #164]	@ (80079ac <TIM_OC3_SetConfig+0x114>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d10d      	bne.n	8007926 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1e      	ldr	r2, [pc, #120]	@ (80079a4 <TIM_OC3_SetConfig+0x10c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d013      	beq.n	8007956 <TIM_OC3_SetConfig+0xbe>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a1d      	ldr	r2, [pc, #116]	@ (80079a8 <TIM_OC3_SetConfig+0x110>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d00f      	beq.n	8007956 <TIM_OC3_SetConfig+0xbe>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a1d      	ldr	r2, [pc, #116]	@ (80079b0 <TIM_OC3_SetConfig+0x118>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00b      	beq.n	8007956 <TIM_OC3_SetConfig+0xbe>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a1c      	ldr	r2, [pc, #112]	@ (80079b4 <TIM_OC3_SetConfig+0x11c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d007      	beq.n	8007956 <TIM_OC3_SetConfig+0xbe>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a1b      	ldr	r2, [pc, #108]	@ (80079b8 <TIM_OC3_SetConfig+0x120>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d003      	beq.n	8007956 <TIM_OC3_SetConfig+0xbe>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a16      	ldr	r2, [pc, #88]	@ (80079ac <TIM_OC3_SetConfig+0x114>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d113      	bne.n	800797e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800795c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	4313      	orrs	r3, r2
 800797c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	621a      	str	r2, [r3, #32]
}
 8007998:	bf00      	nop
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	40012c00 	.word	0x40012c00
 80079a8:	40013400 	.word	0x40013400
 80079ac:	40015000 	.word	0x40015000
 80079b0:	40014000 	.word	0x40014000
 80079b4:	40014400 	.word	0x40014400
 80079b8:	40014800 	.word	0x40014800

080079bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	031b      	lsls	r3, r3, #12
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8007acc <TIM_OC4_SetConfig+0x110>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d007      	beq.n	8007a30 <TIM_OC4_SetConfig+0x74>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a2b      	ldr	r2, [pc, #172]	@ (8007ad0 <TIM_OC4_SetConfig+0x114>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_OC4_SetConfig+0x74>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ad4 <TIM_OC4_SetConfig+0x118>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10d      	bne.n	8007a4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	031b      	lsls	r3, r3, #12
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007acc <TIM_OC4_SetConfig+0x110>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d013      	beq.n	8007a7c <TIM_OC4_SetConfig+0xc0>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad0 <TIM_OC4_SetConfig+0x114>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00f      	beq.n	8007a7c <TIM_OC4_SetConfig+0xc0>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad8 <TIM_OC4_SetConfig+0x11c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d00b      	beq.n	8007a7c <TIM_OC4_SetConfig+0xc0>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a1d      	ldr	r2, [pc, #116]	@ (8007adc <TIM_OC4_SetConfig+0x120>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d007      	beq.n	8007a7c <TIM_OC4_SetConfig+0xc0>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ae0 <TIM_OC4_SetConfig+0x124>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d003      	beq.n	8007a7c <TIM_OC4_SetConfig+0xc0>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a17      	ldr	r2, [pc, #92]	@ (8007ad4 <TIM_OC4_SetConfig+0x118>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d113      	bne.n	8007aa4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	019b      	lsls	r3, r3, #6
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	019b      	lsls	r3, r3, #6
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	621a      	str	r2, [r3, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40012c00 	.word	0x40012c00
 8007ad0:	40013400 	.word	0x40013400
 8007ad4:	40015000 	.word	0x40015000
 8007ad8:	40014000 	.word	0x40014000
 8007adc:	40014400 	.word	0x40014400
 8007ae0:	40014800 	.word	0x40014800

08007ae4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	041b      	lsls	r3, r3, #16
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a19      	ldr	r2, [pc, #100]	@ (8007ba0 <TIM_OC5_SetConfig+0xbc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d013      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a18      	ldr	r2, [pc, #96]	@ (8007ba4 <TIM_OC5_SetConfig+0xc0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00f      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a17      	ldr	r2, [pc, #92]	@ (8007ba8 <TIM_OC5_SetConfig+0xc4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d00b      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a16      	ldr	r2, [pc, #88]	@ (8007bac <TIM_OC5_SetConfig+0xc8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d007      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a15      	ldr	r2, [pc, #84]	@ (8007bb0 <TIM_OC5_SetConfig+0xcc>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d003      	beq.n	8007b66 <TIM_OC5_SetConfig+0x82>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a14      	ldr	r2, [pc, #80]	@ (8007bb4 <TIM_OC5_SetConfig+0xd0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d109      	bne.n	8007b7a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	621a      	str	r2, [r3, #32]
}
 8007b94:	bf00      	nop
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40013400 	.word	0x40013400
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800
 8007bb4:	40015000 	.word	0x40015000

08007bb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	051b      	lsls	r3, r3, #20
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8007c78 <TIM_OC6_SetConfig+0xc0>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a19      	ldr	r2, [pc, #100]	@ (8007c7c <TIM_OC6_SetConfig+0xc4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00f      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a18      	ldr	r2, [pc, #96]	@ (8007c80 <TIM_OC6_SetConfig+0xc8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00b      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a17      	ldr	r2, [pc, #92]	@ (8007c84 <TIM_OC6_SetConfig+0xcc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d007      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a16      	ldr	r2, [pc, #88]	@ (8007c88 <TIM_OC6_SetConfig+0xd0>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_OC6_SetConfig+0x84>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a15      	ldr	r2, [pc, #84]	@ (8007c8c <TIM_OC6_SetConfig+0xd4>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d109      	bne.n	8007c50 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	029b      	lsls	r3, r3, #10
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	621a      	str	r2, [r3, #32]
}
 8007c6a:	bf00      	nop
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40012c00 	.word	0x40012c00
 8007c7c:	40013400 	.word	0x40013400
 8007c80:	40014000 	.word	0x40014000
 8007c84:	40014400 	.word	0x40014400
 8007c88:	40014800 	.word	0x40014800
 8007c8c:	40015000 	.word	0x40015000

08007c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f023 0201 	bic.w	r2, r3, #1
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f023 030a 	bic.w	r3, r3, #10
 8007ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	621a      	str	r2, [r3, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b087      	sub	sp, #28
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	f023 0210 	bic.w	r2, r3, #16
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	031b      	lsls	r3, r3, #12
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f043 0307 	orr.w	r3, r3, #7
 8007d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	609a      	str	r2, [r3, #8]
}
 8007d7c:	bf00      	nop
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	021a      	lsls	r2, r3, #8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	609a      	str	r2, [r3, #8]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f003 031f 	and.w	r3, r3, #31
 8007dda:	2201      	movs	r2, #1
 8007ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8007de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a1a      	ldr	r2, [r3, #32]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	43db      	mvns	r3, r3
 8007dea:	401a      	ands	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a1a      	ldr	r2, [r3, #32]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f003 031f 	and.w	r3, r3, #31
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8007e00:	431a      	orrs	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
	...

08007e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e074      	b.n	8007f16 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a34      	ldr	r2, [pc, #208]	@ (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d009      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a33      	ldr	r2, [pc, #204]	@ (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a31      	ldr	r2, [pc, #196]	@ (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d108      	bne.n	8007e7c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a21      	ldr	r2, [pc, #132]	@ (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d022      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eac:	d01d      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d018      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d013      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00e      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a15      	ldr	r2, [pc, #84]	@ (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d009      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a18      	ldr	r2, [pc, #96]	@ (8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d004      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a11      	ldr	r2, [pc, #68]	@ (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d10c      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40013400 	.word	0x40013400
 8007f2c:	40015000 	.word	0x40015000
 8007f30:	40000400 	.word	0x40000400
 8007f34:	40000800 	.word	0x40000800
 8007f38:	40000c00 	.word	0x40000c00
 8007f3c:	40014000 	.word	0x40014000

08007f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e042      	b.n	8008064 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d106      	bne.n	8007ff6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fa fd9d 	bl	8002b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2224      	movs	r2, #36	@ 0x24
 8007ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0201 	bic.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 feb4 	bl	8008d84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fbb5 	bl	800878c <UART_SetConfig>
 8008022:	4603      	mov	r3, r0
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e01b      	b.n	8008064 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800803a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800804a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 ff33 	bl	8008ec8 <UART_CheckIdleState>
 8008062:	4603      	mov	r3, r0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	@ 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008080:	2b20      	cmp	r3, #32
 8008082:	d137      	bne.n	80080f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <HAL_UART_Receive_IT+0x24>
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e030      	b.n	80080f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a18      	ldr	r2, [pc, #96]	@ (8008100 <HAL_UART_Receive_IT+0x94>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d01f      	beq.n	80080e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d018      	beq.n	80080e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	613b      	str	r3, [r7, #16]
   return(result);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d0:	623b      	str	r3, [r7, #32]
 80080d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	69f9      	ldr	r1, [r7, #28]
 80080d6:	6a3a      	ldr	r2, [r7, #32]
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e6      	bne.n	80080b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080e4:	88fb      	ldrh	r3, [r7, #6]
 80080e6:	461a      	mov	r2, r3
 80080e8:	68b9      	ldr	r1, [r7, #8]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f001 f804 	bl	80090f8 <UART_Start_Receive_IT>
 80080f0:	4603      	mov	r3, r0
 80080f2:	e000      	b.n	80080f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080f4:	2302      	movs	r3, #2
  }
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3728      	adds	r7, #40	@ 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	40008000 	.word	0x40008000

08008104 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b0ba      	sub	sp, #232	@ 0xe8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800812a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800812e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008132:	4013      	ands	r3, r2
 8008134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800813c:	2b00      	cmp	r3, #0
 800813e:	d11b      	bne.n	8008178 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008144:	f003 0320 	and.w	r3, r3, #32
 8008148:	2b00      	cmp	r3, #0
 800814a:	d015      	beq.n	8008178 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800814c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008150:	f003 0320 	and.w	r3, r3, #32
 8008154:	2b00      	cmp	r3, #0
 8008156:	d105      	bne.n	8008164 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800815c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 82e3 	beq.w	8008734 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
      }
      return;
 8008176:	e2dd      	b.n	8008734 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8123 	beq.w	80083c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008182:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008186:	4b8d      	ldr	r3, [pc, #564]	@ (80083bc <HAL_UART_IRQHandler+0x2b8>)
 8008188:	4013      	ands	r3, r2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800818e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008192:	4b8b      	ldr	r3, [pc, #556]	@ (80083c0 <HAL_UART_IRQHandler+0x2bc>)
 8008194:	4013      	ands	r3, r2
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8116 	beq.w	80083c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800819c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d011      	beq.n	80081cc <HAL_UART_IRQHandler+0xc8>
 80081a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2201      	movs	r2, #1
 80081ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c2:	f043 0201 	orr.w	r2, r3, #1
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d011      	beq.n	80081fc <HAL_UART_IRQHandler+0xf8>
 80081d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2202      	movs	r2, #2
 80081ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f2:	f043 0204 	orr.w	r2, r3, #4
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b00      	cmp	r3, #0
 8008206:	d011      	beq.n	800822c <HAL_UART_IRQHandler+0x128>
 8008208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2204      	movs	r2, #4
 800821a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008222:	f043 0202 	orr.w	r2, r3, #2
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800822c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b00      	cmp	r3, #0
 8008236:	d017      	beq.n	8008268 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	2b00      	cmp	r3, #0
 8008242:	d105      	bne.n	8008250 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008244:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008248:	4b5c      	ldr	r3, [pc, #368]	@ (80083bc <HAL_UART_IRQHandler+0x2b8>)
 800824a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2208      	movs	r2, #8
 8008256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800825e:	f043 0208 	orr.w	r2, r3, #8
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800826c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008270:	2b00      	cmp	r3, #0
 8008272:	d012      	beq.n	800829a <HAL_UART_IRQHandler+0x196>
 8008274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008278:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00c      	beq.n	800829a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008290:	f043 0220 	orr.w	r2, r3, #32
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8249 	beq.w	8008738 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d013      	beq.n	80082da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ee:	2b40      	cmp	r3, #64	@ 0x40
 80082f0:	d005      	beq.n	80082fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d054      	beq.n	80083a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 f81c 	bl	800933c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800830e:	2b40      	cmp	r3, #64	@ 0x40
 8008310:	d146      	bne.n	80083a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3308      	adds	r3, #8
 8008318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800832c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008330:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3308      	adds	r3, #8
 800833a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800833e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008342:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800834a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1d9      	bne.n	8008312 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008364:	2b00      	cmp	r3, #0
 8008366:	d017      	beq.n	8008398 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800836e:	4a15      	ldr	r2, [pc, #84]	@ (80083c4 <HAL_UART_IRQHandler+0x2c0>)
 8008370:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008378:	4618      	mov	r0, r3
 800837a:	f7fc fd57 	bl	8004e2c <HAL_DMA_Abort_IT>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d019      	beq.n	80083b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800838a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008392:	4610      	mov	r0, r2
 8008394:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008396:	e00f      	b.n	80083b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f9e1 	bl	8008760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839e:	e00b      	b.n	80083b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f9dd 	bl	8008760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a6:	e007      	b.n	80083b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f9d9 	bl	8008760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80083b6:	e1bf      	b.n	8008738 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b8:	bf00      	nop
    return;
 80083ba:	e1bd      	b.n	8008738 <HAL_UART_IRQHandler+0x634>
 80083bc:	10000001 	.word	0x10000001
 80083c0:	04000120 	.word	0x04000120
 80083c4:	08009409 	.word	0x08009409

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	f040 8153 	bne.w	8008678 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 814c 	beq.w	8008678 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8145 	beq.w	8008678 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2210      	movs	r2, #16
 80083f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008400:	2b40      	cmp	r3, #64	@ 0x40
 8008402:	f040 80bb 	bne.w	800857c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008414:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 818f 	beq.w	800873c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008424:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008428:	429a      	cmp	r2, r3
 800842a:	f080 8187 	bcs.w	800873c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008434:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	f040 8087 	bne.w	800855a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008460:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008476:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800847a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008482:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800848e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1da      	bne.n	800844c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80084be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e1      	bne.n	8008496 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3308      	adds	r3, #8
 80084d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3308      	adds	r3, #8
 80084f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e3      	bne.n	80084d2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008528:	f023 0310 	bic.w	r3, r3, #16
 800852c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	461a      	mov	r2, r3
 8008536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800853a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800853c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008542:	e841 2300 	strex	r3, r2, [r1]
 8008546:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1e4      	bne.n	8008518 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008554:	4618      	mov	r0, r3
 8008556:	f7fc fc10 	bl	8004d7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2202      	movs	r2, #2
 800855e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800856c:	b29b      	uxth	r3, r3
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	b29b      	uxth	r3, r3
 8008572:	4619      	mov	r1, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f8fd 	bl	8008774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800857a:	e0df      	b.n	800873c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008588:	b29b      	uxth	r3, r3
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008596:	b29b      	uxth	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80d1 	beq.w	8008740 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800859e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80cc 	beq.w	8008740 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80085cc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e4      	bne.n	80085a8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3308      	adds	r3, #8
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	623b      	str	r3, [r7, #32]
   return(result);
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3308      	adds	r3, #8
 8008602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008606:	633a      	str	r2, [r7, #48]	@ 0x30
 8008608:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800860c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e1      	bne.n	80085de <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	60fb      	str	r3, [r7, #12]
   return(result);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0310 	bic.w	r3, r3, #16
 8008642:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	69b9      	ldr	r1, [r7, #24]
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	617b      	str	r3, [r7, #20]
   return(result);
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e4      	bne.n	800862e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800866a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f87f 	bl	8008774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008676:	e063      	b.n	8008740 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800867c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00e      	beq.n	80086a2 <HAL_UART_IRQHandler+0x59e>
 8008684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d008      	beq.n	80086a2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fc12 	bl	8009ec4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086a0:	e051      	b.n	8008746 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d014      	beq.n	80086d8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d105      	bne.n	80086c6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d008      	beq.n	80086d8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d03a      	beq.n	8008744 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
    }
    return;
 80086d6:	e035      	b.n	8008744 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d009      	beq.n	80086f8 <HAL_UART_IRQHandler+0x5f4>
 80086e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fe9f 	bl	8009434 <UART_EndTransmit_IT>
    return;
 80086f6:	e026      	b.n	8008746 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d009      	beq.n	8008718 <HAL_UART_IRQHandler+0x614>
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008708:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 fbeb 	bl	8009eec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008716:	e016      	b.n	8008746 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800871c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d010      	beq.n	8008746 <HAL_UART_IRQHandler+0x642>
 8008724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008728:	2b00      	cmp	r3, #0
 800872a:	da0c      	bge.n	8008746 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fbd3 	bl	8009ed8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008732:	e008      	b.n	8008746 <HAL_UART_IRQHandler+0x642>
      return;
 8008734:	bf00      	nop
 8008736:	e006      	b.n	8008746 <HAL_UART_IRQHandler+0x642>
    return;
 8008738:	bf00      	nop
 800873a:	e004      	b.n	8008746 <HAL_UART_IRQHandler+0x642>
      return;
 800873c:	bf00      	nop
 800873e:	e002      	b.n	8008746 <HAL_UART_IRQHandler+0x642>
      return;
 8008740:	bf00      	nop
 8008742:	e000      	b.n	8008746 <HAL_UART_IRQHandler+0x642>
    return;
 8008744:	bf00      	nop
  }
}
 8008746:	37e8      	adds	r7, #232	@ 0xe8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800878c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008790:	b08c      	sub	sp, #48	@ 0x30
 8008792:	af00      	add	r7, sp, #0
 8008794:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	431a      	orrs	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	431a      	orrs	r2, r3
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	4baa      	ldr	r3, [pc, #680]	@ (8008a64 <UART_SetConfig+0x2d8>)
 80087bc:	4013      	ands	r3, r2
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a9f      	ldr	r2, [pc, #636]	@ (8008a68 <UART_SetConfig+0x2dc>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f4:	4313      	orrs	r3, r2
 80087f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008802:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800880c:	430b      	orrs	r3, r1
 800880e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008816:	f023 010f 	bic.w	r1, r3, #15
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a90      	ldr	r2, [pc, #576]	@ (8008a6c <UART_SetConfig+0x2e0>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d125      	bne.n	800887c <UART_SetConfig+0xf0>
 8008830:	4b8f      	ldr	r3, [pc, #572]	@ (8008a70 <UART_SetConfig+0x2e4>)
 8008832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008836:	f003 0303 	and.w	r3, r3, #3
 800883a:	2b03      	cmp	r3, #3
 800883c:	d81a      	bhi.n	8008874 <UART_SetConfig+0xe8>
 800883e:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <UART_SetConfig+0xb8>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	08008855 	.word	0x08008855
 8008848:	08008865 	.word	0x08008865
 800884c:	0800885d 	.word	0x0800885d
 8008850:	0800886d 	.word	0x0800886d
 8008854:	2301      	movs	r3, #1
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885a:	e116      	b.n	8008a8a <UART_SetConfig+0x2fe>
 800885c:	2302      	movs	r3, #2
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008862:	e112      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800886a:	e10e      	b.n	8008a8a <UART_SetConfig+0x2fe>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008872:	e10a      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800887a:	e106      	b.n	8008a8a <UART_SetConfig+0x2fe>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a7c      	ldr	r2, [pc, #496]	@ (8008a74 <UART_SetConfig+0x2e8>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d138      	bne.n	80088f8 <UART_SetConfig+0x16c>
 8008886:	4b7a      	ldr	r3, [pc, #488]	@ (8008a70 <UART_SetConfig+0x2e4>)
 8008888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888c:	f003 030c 	and.w	r3, r3, #12
 8008890:	2b0c      	cmp	r3, #12
 8008892:	d82d      	bhi.n	80088f0 <UART_SetConfig+0x164>
 8008894:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <UART_SetConfig+0x110>)
 8008896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889a:	bf00      	nop
 800889c:	080088d1 	.word	0x080088d1
 80088a0:	080088f1 	.word	0x080088f1
 80088a4:	080088f1 	.word	0x080088f1
 80088a8:	080088f1 	.word	0x080088f1
 80088ac:	080088e1 	.word	0x080088e1
 80088b0:	080088f1 	.word	0x080088f1
 80088b4:	080088f1 	.word	0x080088f1
 80088b8:	080088f1 	.word	0x080088f1
 80088bc:	080088d9 	.word	0x080088d9
 80088c0:	080088f1 	.word	0x080088f1
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	080088f1 	.word	0x080088f1
 80088cc:	080088e9 	.word	0x080088e9
 80088d0:	2300      	movs	r3, #0
 80088d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d6:	e0d8      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80088d8:	2302      	movs	r3, #2
 80088da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088de:	e0d4      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80088e0:	2304      	movs	r3, #4
 80088e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e6:	e0d0      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80088e8:	2308      	movs	r3, #8
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ee:	e0cc      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80088f0:	2310      	movs	r3, #16
 80088f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088f6:	e0c8      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a5e      	ldr	r2, [pc, #376]	@ (8008a78 <UART_SetConfig+0x2ec>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d125      	bne.n	800894e <UART_SetConfig+0x1c2>
 8008902:	4b5b      	ldr	r3, [pc, #364]	@ (8008a70 <UART_SetConfig+0x2e4>)
 8008904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008908:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800890c:	2b30      	cmp	r3, #48	@ 0x30
 800890e:	d016      	beq.n	800893e <UART_SetConfig+0x1b2>
 8008910:	2b30      	cmp	r3, #48	@ 0x30
 8008912:	d818      	bhi.n	8008946 <UART_SetConfig+0x1ba>
 8008914:	2b20      	cmp	r3, #32
 8008916:	d00a      	beq.n	800892e <UART_SetConfig+0x1a2>
 8008918:	2b20      	cmp	r3, #32
 800891a:	d814      	bhi.n	8008946 <UART_SetConfig+0x1ba>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d002      	beq.n	8008926 <UART_SetConfig+0x19a>
 8008920:	2b10      	cmp	r3, #16
 8008922:	d008      	beq.n	8008936 <UART_SetConfig+0x1aa>
 8008924:	e00f      	b.n	8008946 <UART_SetConfig+0x1ba>
 8008926:	2300      	movs	r3, #0
 8008928:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800892c:	e0ad      	b.n	8008a8a <UART_SetConfig+0x2fe>
 800892e:	2302      	movs	r3, #2
 8008930:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008934:	e0a9      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008936:	2304      	movs	r3, #4
 8008938:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800893c:	e0a5      	b.n	8008a8a <UART_SetConfig+0x2fe>
 800893e:	2308      	movs	r3, #8
 8008940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008944:	e0a1      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008946:	2310      	movs	r3, #16
 8008948:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894c:	e09d      	b.n	8008a8a <UART_SetConfig+0x2fe>
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a4a      	ldr	r2, [pc, #296]	@ (8008a7c <UART_SetConfig+0x2f0>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d125      	bne.n	80089a4 <UART_SetConfig+0x218>
 8008958:	4b45      	ldr	r3, [pc, #276]	@ (8008a70 <UART_SetConfig+0x2e4>)
 800895a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800895e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008962:	2bc0      	cmp	r3, #192	@ 0xc0
 8008964:	d016      	beq.n	8008994 <UART_SetConfig+0x208>
 8008966:	2bc0      	cmp	r3, #192	@ 0xc0
 8008968:	d818      	bhi.n	800899c <UART_SetConfig+0x210>
 800896a:	2b80      	cmp	r3, #128	@ 0x80
 800896c:	d00a      	beq.n	8008984 <UART_SetConfig+0x1f8>
 800896e:	2b80      	cmp	r3, #128	@ 0x80
 8008970:	d814      	bhi.n	800899c <UART_SetConfig+0x210>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <UART_SetConfig+0x1f0>
 8008976:	2b40      	cmp	r3, #64	@ 0x40
 8008978:	d008      	beq.n	800898c <UART_SetConfig+0x200>
 800897a:	e00f      	b.n	800899c <UART_SetConfig+0x210>
 800897c:	2300      	movs	r3, #0
 800897e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008982:	e082      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008984:	2302      	movs	r3, #2
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800898a:	e07e      	b.n	8008a8a <UART_SetConfig+0x2fe>
 800898c:	2304      	movs	r3, #4
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008992:	e07a      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008994:	2308      	movs	r3, #8
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800899a:	e076      	b.n	8008a8a <UART_SetConfig+0x2fe>
 800899c:	2310      	movs	r3, #16
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089a2:	e072      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a35      	ldr	r2, [pc, #212]	@ (8008a80 <UART_SetConfig+0x2f4>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d12a      	bne.n	8008a04 <UART_SetConfig+0x278>
 80089ae:	4b30      	ldr	r3, [pc, #192]	@ (8008a70 <UART_SetConfig+0x2e4>)
 80089b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089bc:	d01a      	beq.n	80089f4 <UART_SetConfig+0x268>
 80089be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089c2:	d81b      	bhi.n	80089fc <UART_SetConfig+0x270>
 80089c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089c8:	d00c      	beq.n	80089e4 <UART_SetConfig+0x258>
 80089ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ce:	d815      	bhi.n	80089fc <UART_SetConfig+0x270>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <UART_SetConfig+0x250>
 80089d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d8:	d008      	beq.n	80089ec <UART_SetConfig+0x260>
 80089da:	e00f      	b.n	80089fc <UART_SetConfig+0x270>
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e2:	e052      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80089e4:	2302      	movs	r3, #2
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ea:	e04e      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80089ec:	2304      	movs	r3, #4
 80089ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089f2:	e04a      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80089f4:	2308      	movs	r3, #8
 80089f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089fa:	e046      	b.n	8008a8a <UART_SetConfig+0x2fe>
 80089fc:	2310      	movs	r3, #16
 80089fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a02:	e042      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a17      	ldr	r2, [pc, #92]	@ (8008a68 <UART_SetConfig+0x2dc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d13a      	bne.n	8008a84 <UART_SetConfig+0x2f8>
 8008a0e:	4b18      	ldr	r3, [pc, #96]	@ (8008a70 <UART_SetConfig+0x2e4>)
 8008a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a1c:	d01a      	beq.n	8008a54 <UART_SetConfig+0x2c8>
 8008a1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a22:	d81b      	bhi.n	8008a5c <UART_SetConfig+0x2d0>
 8008a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a28:	d00c      	beq.n	8008a44 <UART_SetConfig+0x2b8>
 8008a2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a2e:	d815      	bhi.n	8008a5c <UART_SetConfig+0x2d0>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <UART_SetConfig+0x2b0>
 8008a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a38:	d008      	beq.n	8008a4c <UART_SetConfig+0x2c0>
 8008a3a:	e00f      	b.n	8008a5c <UART_SetConfig+0x2d0>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a42:	e022      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008a44:	2302      	movs	r3, #2
 8008a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a4a:	e01e      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a52:	e01a      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008a54:	2308      	movs	r3, #8
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a5a:	e016      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008a5c:	2310      	movs	r3, #16
 8008a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a62:	e012      	b.n	8008a8a <UART_SetConfig+0x2fe>
 8008a64:	cfff69f3 	.word	0xcfff69f3
 8008a68:	40008000 	.word	0x40008000
 8008a6c:	40013800 	.word	0x40013800
 8008a70:	40021000 	.word	0x40021000
 8008a74:	40004400 	.word	0x40004400
 8008a78:	40004800 	.word	0x40004800
 8008a7c:	40004c00 	.word	0x40004c00
 8008a80:	40005000 	.word	0x40005000
 8008a84:	2310      	movs	r3, #16
 8008a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4aae      	ldr	r2, [pc, #696]	@ (8008d48 <UART_SetConfig+0x5bc>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	f040 8097 	bne.w	8008bc4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	d823      	bhi.n	8008ae6 <UART_SetConfig+0x35a>
 8008a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa4 <UART_SetConfig+0x318>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008ac9 	.word	0x08008ac9
 8008aa8:	08008ae7 	.word	0x08008ae7
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008ae7 	.word	0x08008ae7
 8008ab4:	08008ad7 	.word	0x08008ad7
 8008ab8:	08008ae7 	.word	0x08008ae7
 8008abc:	08008ae7 	.word	0x08008ae7
 8008ac0:	08008ae7 	.word	0x08008ae7
 8008ac4:	08008adf 	.word	0x08008adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ac8:	f7fd faba 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8008acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ace:	e010      	b.n	8008af2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ad0:	4b9e      	ldr	r3, [pc, #632]	@ (8008d4c <UART_SetConfig+0x5c0>)
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ad4:	e00d      	b.n	8008af2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ad6:	f7fd fa45 	bl	8005f64 <HAL_RCC_GetSysClockFreq>
 8008ada:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008adc:	e009      	b.n	8008af2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ae4:	e005      	b.n	8008af2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008af0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 8130 	beq.w	8008d5a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afe:	4a94      	ldr	r2, [pc, #592]	@ (8008d50 <UART_SetConfig+0x5c4>)
 8008b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	4413      	add	r3, r2
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d305      	bcc.n	8008b2a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d903      	bls.n	8008b32 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b30:	e113      	b.n	8008d5a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	2200      	movs	r2, #0
 8008b36:	60bb      	str	r3, [r7, #8]
 8008b38:	60fa      	str	r2, [r7, #12]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3e:	4a84      	ldr	r2, [pc, #528]	@ (8008d50 <UART_SetConfig+0x5c4>)
 8008b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2200      	movs	r2, #0
 8008b48:	603b      	str	r3, [r7, #0]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b54:	f7f8 f806 	bl	8000b64 <__aeabi_uldivmod>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4619      	mov	r1, r3
 8008b60:	f04f 0200 	mov.w	r2, #0
 8008b64:	f04f 0300 	mov.w	r3, #0
 8008b68:	020b      	lsls	r3, r1, #8
 8008b6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b6e:	0202      	lsls	r2, r0, #8
 8008b70:	6979      	ldr	r1, [r7, #20]
 8008b72:	6849      	ldr	r1, [r1, #4]
 8008b74:	0849      	lsrs	r1, r1, #1
 8008b76:	2000      	movs	r0, #0
 8008b78:	460c      	mov	r4, r1
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	eb12 0804 	adds.w	r8, r2, r4
 8008b80:	eb43 0905 	adc.w	r9, r3, r5
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	469a      	mov	sl, r3
 8008b8c:	4693      	mov	fp, r2
 8008b8e:	4652      	mov	r2, sl
 8008b90:	465b      	mov	r3, fp
 8008b92:	4640      	mov	r0, r8
 8008b94:	4649      	mov	r1, r9
 8008b96:	f7f7 ffe5 	bl	8000b64 <__aeabi_uldivmod>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ba8:	d308      	bcc.n	8008bbc <UART_SetConfig+0x430>
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bb0:	d204      	bcs.n	8008bbc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6a3a      	ldr	r2, [r7, #32]
 8008bb8:	60da      	str	r2, [r3, #12]
 8008bba:	e0ce      	b.n	8008d5a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008bc2:	e0ca      	b.n	8008d5a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bcc:	d166      	bne.n	8008c9c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008bce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d827      	bhi.n	8008c26 <UART_SetConfig+0x49a>
 8008bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bdc <UART_SetConfig+0x450>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008c01 	.word	0x08008c01
 8008be0:	08008c09 	.word	0x08008c09
 8008be4:	08008c11 	.word	0x08008c11
 8008be8:	08008c27 	.word	0x08008c27
 8008bec:	08008c17 	.word	0x08008c17
 8008bf0:	08008c27 	.word	0x08008c27
 8008bf4:	08008c27 	.word	0x08008c27
 8008bf8:	08008c27 	.word	0x08008c27
 8008bfc:	08008c1f 	.word	0x08008c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c00:	f7fd fa1e 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8008c04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c06:	e014      	b.n	8008c32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c08:	f7fd fa30 	bl	800606c <HAL_RCC_GetPCLK2Freq>
 8008c0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c0e:	e010      	b.n	8008c32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c10:	4b4e      	ldr	r3, [pc, #312]	@ (8008d4c <UART_SetConfig+0x5c0>)
 8008c12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c14:	e00d      	b.n	8008c32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c16:	f7fd f9a5 	bl	8005f64 <HAL_RCC_GetSysClockFreq>
 8008c1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c1c:	e009      	b.n	8008c32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c24:	e005      	b.n	8008c32 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8090 	beq.w	8008d5a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3e:	4a44      	ldr	r2, [pc, #272]	@ (8008d50 <UART_SetConfig+0x5c4>)
 8008c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c44:	461a      	mov	r2, r3
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c4c:	005a      	lsls	r2, r3, #1
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	085b      	lsrs	r3, r3, #1
 8008c54:	441a      	add	r2, r3
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	2b0f      	cmp	r3, #15
 8008c64:	d916      	bls.n	8008c94 <UART_SetConfig+0x508>
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c6c:	d212      	bcs.n	8008c94 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	f023 030f 	bic.w	r3, r3, #15
 8008c76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	085b      	lsrs	r3, r3, #1
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	8bfb      	ldrh	r3, [r7, #30]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	8bfa      	ldrh	r2, [r7, #30]
 8008c90:	60da      	str	r2, [r3, #12]
 8008c92:	e062      	b.n	8008d5a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c9a:	e05e      	b.n	8008d5a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d828      	bhi.n	8008cf6 <UART_SetConfig+0x56a>
 8008ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <UART_SetConfig+0x520>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008cd1 	.word	0x08008cd1
 8008cb0:	08008cd9 	.word	0x08008cd9
 8008cb4:	08008ce1 	.word	0x08008ce1
 8008cb8:	08008cf7 	.word	0x08008cf7
 8008cbc:	08008ce7 	.word	0x08008ce7
 8008cc0:	08008cf7 	.word	0x08008cf7
 8008cc4:	08008cf7 	.word	0x08008cf7
 8008cc8:	08008cf7 	.word	0x08008cf7
 8008ccc:	08008cef 	.word	0x08008cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cd0:	f7fd f9b6 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8008cd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cd6:	e014      	b.n	8008d02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cd8:	f7fd f9c8 	bl	800606c <HAL_RCC_GetPCLK2Freq>
 8008cdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cde:	e010      	b.n	8008d02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d4c <UART_SetConfig+0x5c0>)
 8008ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ce4:	e00d      	b.n	8008d02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ce6:	f7fd f93d 	bl	8005f64 <HAL_RCC_GetSysClockFreq>
 8008cea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cec:	e009      	b.n	8008d02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cf4:	e005      	b.n	8008d02 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d00:	bf00      	nop
    }

    if (pclk != 0U)
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d028      	beq.n	8008d5a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0c:	4a10      	ldr	r2, [pc, #64]	@ (8008d50 <UART_SetConfig+0x5c4>)
 8008d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d12:	461a      	mov	r2, r3
 8008d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d16:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	085b      	lsrs	r3, r3, #1
 8008d20:	441a      	add	r2, r3
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	2b0f      	cmp	r3, #15
 8008d30:	d910      	bls.n	8008d54 <UART_SetConfig+0x5c8>
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d38:	d20c      	bcs.n	8008d54 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60da      	str	r2, [r3, #12]
 8008d44:	e009      	b.n	8008d5a <UART_SetConfig+0x5ce>
 8008d46:	bf00      	nop
 8008d48:	40008000 	.word	0x40008000
 8008d4c:	00f42400 	.word	0x00f42400
 8008d50:	0800a190 	.word	0x0800a190
      }
      else
      {
        ret = HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2200      	movs	r2, #0
 8008d74:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3730      	adds	r7, #48	@ 0x30
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00a      	beq.n	8008dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df6:	f003 0304 	and.w	r3, r3, #4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00a      	beq.n	8008e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01a      	beq.n	8008e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e82:	d10a      	bne.n	8008e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	605a      	str	r2, [r3, #4]
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b098      	sub	sp, #96	@ 0x60
 8008ecc:	af02      	add	r7, sp, #8
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ed8:	f7fa f898 	bl	800300c <HAL_GetTick>
 8008edc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0308 	and.w	r3, r3, #8
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d12f      	bne.n	8008f4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f88e 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d022      	beq.n	8008f4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0e:	e853 3f00 	ldrex	r3, [r3]
 8008f12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f2c:	e841 2300 	strex	r3, r2, [r1]
 8008f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e6      	bne.n	8008f06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e063      	b.n	8009014 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	2b04      	cmp	r3, #4
 8008f58:	d149      	bne.n	8008fee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f62:	2200      	movs	r2, #0
 8008f64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f857 	bl	800901c <UART_WaitOnFlagUntilTimeout>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d03c      	beq.n	8008fee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	623b      	str	r3, [r7, #32]
   return(result);
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e6      	bne.n	8008f74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3308      	adds	r3, #8
 8008fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	e853 3f00 	ldrex	r3, [r3]
 8008fb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f023 0301 	bic.w	r3, r3, #1
 8008fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fc6:	61fa      	str	r2, [r7, #28]
 8008fc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fca:	69b9      	ldr	r1, [r7, #24]
 8008fcc:	69fa      	ldr	r2, [r7, #28]
 8008fce:	e841 2300 	strex	r3, r2, [r1]
 8008fd2:	617b      	str	r3, [r7, #20]
   return(result);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1e5      	bne.n	8008fa6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e012      	b.n	8009014 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3758      	adds	r7, #88	@ 0x58
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	4613      	mov	r3, r2
 800902a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800902c:	e04f      	b.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d04b      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009036:	f7f9 ffe9 	bl	800300c <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	429a      	cmp	r2, r3
 8009044:	d302      	bcc.n	800904c <UART_WaitOnFlagUntilTimeout+0x30>
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e04e      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	d037      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2b80      	cmp	r3, #128	@ 0x80
 8009062:	d034      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b40      	cmp	r3, #64	@ 0x40
 8009068:	d031      	beq.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b08      	cmp	r3, #8
 8009076:	d110      	bne.n	800909a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2208      	movs	r2, #8
 800907e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f95b 	bl	800933c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2208      	movs	r2, #8
 800908a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e029      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a8:	d111      	bne.n	80090ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f941 	bl	800933c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e00f      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4013      	ands	r3, r2
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	429a      	cmp	r2, r3
 80090dc:	bf0c      	ite	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	2300      	movne	r3, #0
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d0a0      	beq.n	800902e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b0a3      	sub	sp, #140	@ 0x8c
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4613      	mov	r3, r2
 8009104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	88fa      	ldrh	r2, [r7, #6]
 8009110:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	88fa      	ldrh	r2, [r7, #6]
 8009118:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800912a:	d10e      	bne.n	800914a <UART_Start_Receive_IT+0x52>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d105      	bne.n	8009140 <UART_Start_Receive_IT+0x48>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800913a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800913e:	e02d      	b.n	800919c <UART_Start_Receive_IT+0xa4>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	22ff      	movs	r2, #255	@ 0xff
 8009144:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009148:	e028      	b.n	800919c <UART_Start_Receive_IT+0xa4>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10d      	bne.n	800916e <UART_Start_Receive_IT+0x76>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d104      	bne.n	8009164 <UART_Start_Receive_IT+0x6c>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	22ff      	movs	r2, #255	@ 0xff
 800915e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009162:	e01b      	b.n	800919c <UART_Start_Receive_IT+0xa4>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	227f      	movs	r2, #127	@ 0x7f
 8009168:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800916c:	e016      	b.n	800919c <UART_Start_Receive_IT+0xa4>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009176:	d10d      	bne.n	8009194 <UART_Start_Receive_IT+0x9c>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d104      	bne.n	800918a <UART_Start_Receive_IT+0x92>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	227f      	movs	r2, #127	@ 0x7f
 8009184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009188:	e008      	b.n	800919c <UART_Start_Receive_IT+0xa4>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	223f      	movs	r2, #63	@ 0x3f
 800918e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009192:	e003      	b.n	800919c <UART_Start_Receive_IT+0xa4>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2222      	movs	r2, #34	@ 0x22
 80091a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3308      	adds	r3, #8
 80091b2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091b6:	e853 3f00 	ldrex	r3, [r3]
 80091ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80091bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091be:	f043 0301 	orr.w	r3, r3, #1
 80091c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3308      	adds	r3, #8
 80091cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80091d0:	673a      	str	r2, [r7, #112]	@ 0x70
 80091d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80091d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80091de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e3      	bne.n	80091ac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ec:	d14f      	bne.n	800928e <UART_Start_Receive_IT+0x196>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091f4:	88fa      	ldrh	r2, [r7, #6]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d349      	bcc.n	800928e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009202:	d107      	bne.n	8009214 <UART_Start_Receive_IT+0x11c>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d103      	bne.n	8009214 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4a47      	ldr	r2, [pc, #284]	@ (800932c <UART_Start_Receive_IT+0x234>)
 8009210:	675a      	str	r2, [r3, #116]	@ 0x74
 8009212:	e002      	b.n	800921a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4a46      	ldr	r2, [pc, #280]	@ (8009330 <UART_Start_Receive_IT+0x238>)
 8009218:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d01a      	beq.n	8009258 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009236:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009246:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800924a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e4      	bne.n	8009222 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3308      	adds	r3, #8
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800926e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3308      	adds	r3, #8
 8009276:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009278:	64ba      	str	r2, [r7, #72]	@ 0x48
 800927a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800927e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e5      	bne.n	8009258 <UART_Start_Receive_IT+0x160>
 800928c:	e046      	b.n	800931c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009296:	d107      	bne.n	80092a8 <UART_Start_Receive_IT+0x1b0>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4a24      	ldr	r2, [pc, #144]	@ (8009334 <UART_Start_Receive_IT+0x23c>)
 80092a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80092a6:	e002      	b.n	80092ae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4a23      	ldr	r2, [pc, #140]	@ (8009338 <UART_Start_Receive_IT+0x240>)
 80092ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d019      	beq.n	80092ea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80092ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80092e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e6      	bne.n	80092b6 <UART_Start_Receive_IT+0x1be>
 80092e8:	e018      	b.n	800931c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	613b      	str	r3, [r7, #16]
   return(result);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f043 0320 	orr.w	r3, r3, #32
 80092fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009308:	623b      	str	r3, [r7, #32]
 800930a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	69f9      	ldr	r1, [r7, #28]
 800930e:	6a3a      	ldr	r2, [r7, #32]
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	61bb      	str	r3, [r7, #24]
   return(result);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e6      	bne.n	80092ea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	378c      	adds	r7, #140	@ 0x8c
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	08009b5d 	.word	0x08009b5d
 8009330:	080097fd 	.word	0x080097fd
 8009334:	08009645 	.word	0x08009645
 8009338:	0800948d 	.word	0x0800948d

0800933c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800933c:	b480      	push	{r7}
 800933e:	b095      	sub	sp, #84	@ 0x54
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009362:	643b      	str	r3, [r7, #64]	@ 0x40
 8009364:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009368:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e6      	bne.n	8009344 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3308      	adds	r3, #8
 800937c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	61fb      	str	r3, [r7, #28]
   return(result);
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800938c:	f023 0301 	bic.w	r3, r3, #1
 8009390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800939a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800939c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093a2:	e841 2300 	strex	r3, r2, [r1]
 80093a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1e3      	bne.n	8009376 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d118      	bne.n	80093e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	f023 0310 	bic.w	r3, r3, #16
 80093ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	461a      	mov	r2, r3
 80093d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093d4:	61bb      	str	r3, [r7, #24]
 80093d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6979      	ldr	r1, [r7, #20]
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	613b      	str	r3, [r7, #16]
   return(result);
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e6      	bne.n	80093b6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093fc:	bf00      	nop
 80093fe:	3754      	adds	r7, #84	@ 0x54
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009414:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff f99a 	bl	8008760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942c:	bf00      	nop
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	60bb      	str	r3, [r7, #8]
   return(result);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009450:	61fb      	str	r3, [r7, #28]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	61bb      	str	r3, [r7, #24]
 800945c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6979      	ldr	r1, [r7, #20]
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	613b      	str	r3, [r7, #16]
   return(result);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e6      	bne.n	800943c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff f965 	bl	800874c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009482:	bf00      	nop
 8009484:	3720      	adds	r7, #32
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b09c      	sub	sp, #112	@ 0x70
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800949a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094a4:	2b22      	cmp	r3, #34	@ 0x22
 80094a6:	f040 80be 	bne.w	8009626 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80094b8:	b2d9      	uxtb	r1, r3
 80094ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c4:	400a      	ands	r2, r1
 80094c6:	b2d2      	uxtb	r2, r2
 80094c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094da:	b29b      	uxth	r3, r3
 80094dc:	3b01      	subs	r3, #1
 80094de:	b29a      	uxth	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f040 80a1 	bne.w	8009636 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094fc:	e853 3f00 	ldrex	r3, [r3]
 8009500:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009512:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009514:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009518:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800951a:	e841 2300 	strex	r3, r2, [r1]
 800951e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1e6      	bne.n	80094f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3308      	adds	r3, #8
 800952c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009530:	e853 3f00 	ldrex	r3, [r3]
 8009534:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009538:	f023 0301 	bic.w	r3, r3, #1
 800953c:	667b      	str	r3, [r7, #100]	@ 0x64
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3308      	adds	r3, #8
 8009544:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009546:	647a      	str	r2, [r7, #68]	@ 0x44
 8009548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800954c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800954e:	e841 2300 	strex	r3, r2, [r1]
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1e5      	bne.n	8009526 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2220      	movs	r2, #32
 800955e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a33      	ldr	r2, [pc, #204]	@ (8009640 <UART_RxISR_8BIT+0x1b4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d01f      	beq.n	80095b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d018      	beq.n	80095b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	623b      	str	r3, [r7, #32]
   return(result);
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800959a:	663b      	str	r3, [r7, #96]	@ 0x60
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80095a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e6      	bne.n	8009586 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d12e      	bne.n	800961e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0310 	bic.w	r3, r3, #16
 80095da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	461a      	mov	r2, r3
 80095e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e4:	61fb      	str	r3, [r7, #28]
 80095e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	69b9      	ldr	r1, [r7, #24]
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	617b      	str	r3, [r7, #20]
   return(result);
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e6      	bne.n	80095c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	69db      	ldr	r3, [r3, #28]
 80095fe:	f003 0310 	and.w	r3, r3, #16
 8009602:	2b10      	cmp	r3, #16
 8009604:	d103      	bne.n	800960e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2210      	movs	r2, #16
 800960c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7ff f8ac 	bl	8008774 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800961c:	e00b      	b.n	8009636 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7f8 fcf0 	bl	8002004 <HAL_UART_RxCpltCallback>
}
 8009624:	e007      	b.n	8009636 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	699a      	ldr	r2, [r3, #24]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f042 0208 	orr.w	r2, r2, #8
 8009634:	619a      	str	r2, [r3, #24]
}
 8009636:	bf00      	nop
 8009638:	3770      	adds	r7, #112	@ 0x70
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	40008000 	.word	0x40008000

08009644 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b09c      	sub	sp, #112	@ 0x70
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009652:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800965c:	2b22      	cmp	r3, #34	@ 0x22
 800965e:	f040 80be 	bne.w	80097de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009668:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009670:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009672:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009676:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800967a:	4013      	ands	r3, r2
 800967c:	b29a      	uxth	r2, r3
 800967e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009680:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009686:	1c9a      	adds	r2, r3, #2
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009692:	b29b      	uxth	r3, r3
 8009694:	3b01      	subs	r3, #1
 8009696:	b29a      	uxth	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f040 80a1 	bne.w	80097ee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80096cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e6      	bne.n	80096ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3308      	adds	r3, #8
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	f023 0301 	bic.w	r3, r3, #1
 80096f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3308      	adds	r3, #8
 80096fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009704:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800970c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e5      	bne.n	80096de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a33      	ldr	r2, [pc, #204]	@ (80097f8 <UART_RxISR_16BIT+0x1b4>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d01f      	beq.n	8009770 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d018      	beq.n	8009770 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	61fb      	str	r3, [r7, #28]
   return(result);
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800975c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800975e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e6      	bne.n	800973e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009774:	2b01      	cmp	r3, #1
 8009776:	d12e      	bne.n	80097d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	60bb      	str	r3, [r7, #8]
   return(result);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f023 0310 	bic.w	r3, r3, #16
 8009792:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	461a      	mov	r2, r3
 800979a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6979      	ldr	r1, [r7, #20]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	613b      	str	r3, [r7, #16]
   return(result);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e6      	bne.n	800977e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	f003 0310 	and.w	r3, r3, #16
 80097ba:	2b10      	cmp	r3, #16
 80097bc:	d103      	bne.n	80097c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2210      	movs	r2, #16
 80097c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7fe ffd0 	bl	8008774 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097d4:	e00b      	b.n	80097ee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7f8 fc14 	bl	8002004 <HAL_UART_RxCpltCallback>
}
 80097dc:	e007      	b.n	80097ee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	699a      	ldr	r2, [r3, #24]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0208 	orr.w	r2, r2, #8
 80097ec:	619a      	str	r2, [r3, #24]
}
 80097ee:	bf00      	nop
 80097f0:	3770      	adds	r7, #112	@ 0x70
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	40008000 	.word	0x40008000

080097fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b0ac      	sub	sp, #176	@ 0xb0
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800980a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009832:	2b22      	cmp	r3, #34	@ 0x22
 8009834:	f040 8182 	bne.w	8009b3c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800983e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009842:	e125      	b.n	8009a90 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800984e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009852:	b2d9      	uxtb	r1, r3
 8009854:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009858:	b2da      	uxtb	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800985e:	400a      	ands	r2, r1
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009874:	b29b      	uxth	r3, r3
 8009876:	3b01      	subs	r3, #1
 8009878:	b29a      	uxth	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800988a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	2b00      	cmp	r3, #0
 8009894:	d053      	beq.n	800993e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d011      	beq.n	80098c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80098a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2201      	movs	r2, #1
 80098b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098bc:	f043 0201 	orr.w	r2, r3, #1
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ca:	f003 0302 	and.w	r3, r3, #2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d011      	beq.n	80098f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00b      	beq.n	80098f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2202      	movs	r2, #2
 80098e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ec:	f043 0204 	orr.w	r2, r3, #4
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d011      	beq.n	8009926 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00b      	beq.n	8009926 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2204      	movs	r2, #4
 8009914:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991c:	f043 0202 	orr.w	r2, r3, #2
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800992c:	2b00      	cmp	r3, #0
 800992e:	d006      	beq.n	800993e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7fe ff15 	bl	8008760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009944:	b29b      	uxth	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	f040 80a2 	bne.w	8009a90 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009954:	e853 3f00 	ldrex	r3, [r3]
 8009958:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800995a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800995c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800996e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009970:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009974:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009976:	e841 2300 	strex	r3, r2, [r1]
 800997a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800997c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e4      	bne.n	800994c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3308      	adds	r3, #8
 8009988:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009998:	f023 0301 	bic.w	r3, r3, #1
 800999c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3308      	adds	r3, #8
 80099a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099aa:	66ba      	str	r2, [r7, #104]	@ 0x68
 80099ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80099b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80099b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e1      	bne.n	8009982 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2220      	movs	r2, #32
 80099c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a5f      	ldr	r2, [pc, #380]	@ (8009b54 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d021      	beq.n	8009a20 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d01a      	beq.n	8009a20 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80099f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a0e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e4      	bne.n	80099ea <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d130      	bne.n	8009a8a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3e:	f023 0310 	bic.w	r3, r3, #16
 8009a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a50:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a58:	e841 2300 	strex	r3, r2, [r1]
 8009a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e4      	bne.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	f003 0310 	and.w	r3, r3, #16
 8009a6e:	2b10      	cmp	r3, #16
 8009a70:	d103      	bne.n	8009a7a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2210      	movs	r2, #16
 8009a78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7fe fe76 	bl	8008774 <HAL_UARTEx_RxEventCallback>
 8009a88:	e002      	b.n	8009a90 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7f8 faba 	bl	8002004 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a90:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d006      	beq.n	8009aa6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a9c:	f003 0320 	and.w	r3, r3, #32
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f47f aecf 	bne.w	8009844 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ab0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d049      	beq.n	8009b4c <UART_RxISR_8BIT_FIFOEN+0x350>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009abe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d242      	bcs.n	8009b4c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3308      	adds	r3, #8
 8009acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e3      	bne.n	8009ac6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a15      	ldr	r2, [pc, #84]	@ (8009b58 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009b02:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	f043 0320 	orr.w	r3, r3, #32
 8009b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	461a      	mov	r2, r3
 8009b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b26:	61bb      	str	r3, [r7, #24]
 8009b28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2a:	6979      	ldr	r1, [r7, #20]
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	613b      	str	r3, [r7, #16]
   return(result);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1e4      	bne.n	8009b04 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b3a:	e007      	b.n	8009b4c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 0208 	orr.w	r2, r2, #8
 8009b4a:	619a      	str	r2, [r3, #24]
}
 8009b4c:	bf00      	nop
 8009b4e:	37b0      	adds	r7, #176	@ 0xb0
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	40008000 	.word	0x40008000
 8009b58:	0800948d 	.word	0x0800948d

08009b5c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b0ae      	sub	sp, #184	@ 0xb8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b6a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69db      	ldr	r3, [r3, #28]
 8009b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b92:	2b22      	cmp	r3, #34	@ 0x22
 8009b94:	f040 8186 	bne.w	8009ea4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b9e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ba2:	e129      	b.n	8009df8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009baa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009bb6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009bba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bc6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bcc:	1c9a      	adds	r2, r3, #2
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d053      	beq.n	8009ca2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d011      	beq.n	8009c2a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00b      	beq.n	8009c2a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2201      	movs	r2, #1
 8009c18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c20:	f043 0201 	orr.w	r2, r3, #1
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d011      	beq.n	8009c5a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00b      	beq.n	8009c5a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2202      	movs	r2, #2
 8009c48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c50:	f043 0204 	orr.w	r2, r3, #4
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c5e:	f003 0304 	and.w	r3, r3, #4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d011      	beq.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00b      	beq.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2204      	movs	r2, #4
 8009c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c80:	f043 0202 	orr.w	r2, r3, #2
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d006      	beq.n	8009ca2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7fe fd63 	bl	8008760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f040 80a4 	bne.w	8009df8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cb8:	e853 3f00 	ldrex	r3, [r3]
 8009cbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009cd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009cda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ce4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e2      	bne.n	8009cb0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d00:	f023 0301 	bic.w	r3, r3, #1
 8009d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d1a:	e841 2300 	strex	r3, r2, [r1]
 8009d1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1e1      	bne.n	8009cea <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2220      	movs	r2, #32
 8009d2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a5f      	ldr	r2, [pc, #380]	@ (8009ebc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d021      	beq.n	8009d88 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d01a      	beq.n	8009d88 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d5a:	e853 3f00 	ldrex	r3, [r3]
 8009d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d76:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d7c:	e841 2300 	strex	r3, r2, [r1]
 8009d80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e4      	bne.n	8009d52 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d130      	bne.n	8009df2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009da6:	f023 0310 	bic.w	r3, r3, #16
 8009daa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dc0:	e841 2300 	strex	r3, r2, [r1]
 8009dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e4      	bne.n	8009d96 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	f003 0310 	and.w	r3, r3, #16
 8009dd6:	2b10      	cmp	r3, #16
 8009dd8:	d103      	bne.n	8009de2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2210      	movs	r2, #16
 8009de0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7fe fcc2 	bl	8008774 <HAL_UARTEx_RxEventCallback>
 8009df0:	e002      	b.n	8009df8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7f8 f906 	bl	8002004 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009df8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d006      	beq.n	8009e0e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009e00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e04:	f003 0320 	and.w	r3, r3, #32
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f47f aecb 	bne.w	8009ba4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e14:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e18:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d049      	beq.n	8009eb4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e26:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d242      	bcs.n	8009eb4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e38:	e853 3f00 	ldrex	r3, [r3]
 8009e3c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009e52:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e5a:	e841 2300 	strex	r3, r2, [r1]
 8009e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1e3      	bne.n	8009e2e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a15      	ldr	r2, [pc, #84]	@ (8009ec0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009e6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	e853 3f00 	ldrex	r3, [r3]
 8009e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f043 0320 	orr.w	r3, r3, #32
 8009e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e8e:	61fb      	str	r3, [r7, #28]
 8009e90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	69b9      	ldr	r1, [r7, #24]
 8009e94:	69fa      	ldr	r2, [r7, #28]
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e4      	bne.n	8009e6c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ea2:	e007      	b.n	8009eb4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	699a      	ldr	r2, [r3, #24]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0208 	orr.w	r2, r2, #8
 8009eb2:	619a      	str	r2, [r3, #24]
}
 8009eb4:	bf00      	nop
 8009eb6:	37b8      	adds	r7, #184	@ 0xb8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	40008000 	.word	0x40008000
 8009ec0:	08009645 	.word	0x08009645

08009ec4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d101      	bne.n	8009f16 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f12:	2302      	movs	r3, #2
 8009f14:	e027      	b.n	8009f66 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2224      	movs	r2, #36	@ 0x24
 8009f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 0201 	bic.w	r2, r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2220      	movs	r2, #32
 8009f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e02d      	b.n	8009fe6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2224      	movs	r2, #36	@ 0x24
 8009f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0201 	bic.w	r2, r2, #1
 8009fb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f850 	bl	800a06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a002:	2302      	movs	r3, #2
 800a004:	e02d      	b.n	800a062 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2224      	movs	r2, #36	@ 0x24
 800a012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 0201 	bic.w	r2, r2, #1
 800a02c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	430a      	orrs	r2, r1
 800a040:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f812 	bl	800a06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2220      	movs	r2, #32
 800a054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d108      	bne.n	800a08e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a08c:	e031      	b.n	800a0f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a08e:	2308      	movs	r3, #8
 800a090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a092:	2308      	movs	r3, #8
 800a094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	0e5b      	lsrs	r3, r3, #25
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	f003 0307 	and.w	r3, r3, #7
 800a0a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	0f5b      	lsrs	r3, r3, #29
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	7b3a      	ldrb	r2, [r7, #12]
 800a0ba:	4911      	ldr	r1, [pc, #68]	@ (800a100 <UARTEx_SetNbDataToProcess+0x94>)
 800a0bc:	5c8a      	ldrb	r2, [r1, r2]
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0c2:	7b3a      	ldrb	r2, [r7, #12]
 800a0c4:	490f      	ldr	r1, [pc, #60]	@ (800a104 <UARTEx_SetNbDataToProcess+0x98>)
 800a0c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	7b7a      	ldrb	r2, [r7, #13]
 800a0d8:	4909      	ldr	r1, [pc, #36]	@ (800a100 <UARTEx_SetNbDataToProcess+0x94>)
 800a0da:	5c8a      	ldrb	r2, [r1, r2]
 800a0dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0e0:	7b7a      	ldrb	r2, [r7, #13]
 800a0e2:	4908      	ldr	r1, [pc, #32]	@ (800a104 <UARTEx_SetNbDataToProcess+0x98>)
 800a0e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0f2:	bf00      	nop
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	0800a1a8 	.word	0x0800a1a8
 800a104:	0800a1b0 	.word	0x0800a1b0

0800a108 <memset>:
 800a108:	4402      	add	r2, r0
 800a10a:	4603      	mov	r3, r0
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d100      	bne.n	800a112 <memset+0xa>
 800a110:	4770      	bx	lr
 800a112:	f803 1b01 	strb.w	r1, [r3], #1
 800a116:	e7f9      	b.n	800a10c <memset+0x4>

0800a118 <__libc_init_array>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	4d0d      	ldr	r5, [pc, #52]	@ (800a150 <__libc_init_array+0x38>)
 800a11c:	4c0d      	ldr	r4, [pc, #52]	@ (800a154 <__libc_init_array+0x3c>)
 800a11e:	1b64      	subs	r4, r4, r5
 800a120:	10a4      	asrs	r4, r4, #2
 800a122:	2600      	movs	r6, #0
 800a124:	42a6      	cmp	r6, r4
 800a126:	d109      	bne.n	800a13c <__libc_init_array+0x24>
 800a128:	4d0b      	ldr	r5, [pc, #44]	@ (800a158 <__libc_init_array+0x40>)
 800a12a:	4c0c      	ldr	r4, [pc, #48]	@ (800a15c <__libc_init_array+0x44>)
 800a12c:	f000 f818 	bl	800a160 <_init>
 800a130:	1b64      	subs	r4, r4, r5
 800a132:	10a4      	asrs	r4, r4, #2
 800a134:	2600      	movs	r6, #0
 800a136:	42a6      	cmp	r6, r4
 800a138:	d105      	bne.n	800a146 <__libc_init_array+0x2e>
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a140:	4798      	blx	r3
 800a142:	3601      	adds	r6, #1
 800a144:	e7ee      	b.n	800a124 <__libc_init_array+0xc>
 800a146:	f855 3b04 	ldr.w	r3, [r5], #4
 800a14a:	4798      	blx	r3
 800a14c:	3601      	adds	r6, #1
 800a14e:	e7f2      	b.n	800a136 <__libc_init_array+0x1e>
 800a150:	0800a1c0 	.word	0x0800a1c0
 800a154:	0800a1c0 	.word	0x0800a1c0
 800a158:	0800a1c0 	.word	0x0800a1c0
 800a15c:	0800a1c4 	.word	0x0800a1c4

0800a160 <_init>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	bf00      	nop
 800a164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a166:	bc08      	pop	{r3}
 800a168:	469e      	mov	lr, r3
 800a16a:	4770      	bx	lr

0800a16c <_fini>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr
