
testnew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba8c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bc64  0800bc64  0000cc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bca4  0800bca4  0000d224  2**0
                  CONTENTS
  4 .ARM          00000008  0800bca4  0800bca4  0000cca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcac  0800bcac  0000d224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcac  0800bcac  0000ccac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcb0  0800bcb0  0000ccb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800bcb4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000117c  20000228  0800bed8  0000d228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  0800bed8  0000d3a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af32  00000000  00000000  0000d254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f2d  00000000  00000000  00028186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0002b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ac  00000000  00000000  0002c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002871b  00000000  00000000  0002d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cec  00000000  00000000  00055fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011370c  00000000  00000000  0006fcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001833b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c0  00000000  00000000  001833fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001896bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000228 	.word	0x20000228
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bc4c 	.word	0x0800bc4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000022c 	.word	0x2000022c
 8000214:	0800bc4c 	.word	0x0800bc4c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000244 	.word	0x20000244

08000ed4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <modbus_3t5_Timeout+0x1c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	755a      	strb	r2, [r3, #21]

}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	20000244 	.word	0x20000244

08000ef4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f009 fd43 	bl	800a988 <HAL_UART_GetError>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d101      	bne.n	8000f0c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f08:	f7ff ffc4 	bl	8000e94 <modbus_1t5_Timeout>

	}
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f1e:	4a25      	ldr	r2, [pc, #148]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f24:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <Modbus_init+0xa4>)
 8000f32:	210e      	movs	r1, #14
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 ffff 	bl	8008f38 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4618      	mov	r0, r3
 8000f42:	f009 fccb 	bl	800a8dc <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f009 fce2 	bl	800a914 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <Modbus_init+0xa8>)
 8000f56:	2104      	movs	r1, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f008 ffa9 	bl	8009eb0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f70:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f74:	4413      	add	r3, r2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f009 f8d1 	bl	800a124 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10c      	bne.n	8000fac <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 ff9f 	bl	8007edc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <Modbus_init+0xa0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f007 f9f8 	bl	800839c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000244 	.word	0x20000244
 8000fb8:	08000ed5 	.word	0x08000ed5
 8000fbc:	08000ef5 	.word	0x08000ef5

08000fc0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000fcc:	23ff      	movs	r3, #255	@ 0xff
 8000fce:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000fd0:	23ff      	movs	r3, #255	@ 0xff
 8000fd2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000fd4:	e013      	b.n	8000ffe <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	4053      	eors	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <CRC16+0x64>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <CRC16+0x68>)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000ffe:	883b      	ldrh	r3, [r7, #0]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	803a      	strh	r2, [r7, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1e6      	bne.n	8000fd6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29b      	uxth	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000100 	.word	0x20000100
 8001028:	20000000 	.word	0x20000000

0800102c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001032:	4b7e      	ldr	r3, [pc, #504]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	7ddb      	ldrb	r3, [r3, #23]
 8001038:	3b01      	subs	r3, #1
 800103a:	2b03      	cmp	r3, #3
 800103c:	d80a      	bhi.n	8001054 <Modbus_Protocal_Worker+0x28>
 800103e:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <Modbus_Protocal_Worker+0x18>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	0800105f 	.word	0x0800105f
 8001048:	080011f3 	.word	0x080011f3
 800104c:	080010eb 	.word	0x080010eb
 8001050:	0800112f 	.word	0x0800112f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001054:	4b75      	ldr	r3, [pc, #468]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	75da      	strb	r2, [r3, #23]
		break;
 800105c:	e0e1      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800105e:	4b73      	ldr	r3, [pc, #460]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800106a:	4b70      	ldr	r3, [pc, #448]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2202      	movs	r2, #2
 8001070:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001072:	f000 f9cd 	bl	8001410 <Modbus_Emission>
 8001076:	e018      	b.n	80010aa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001078:	4b6c      	ldr	r3, [pc, #432]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001082:	4b6a      	ldr	r3, [pc, #424]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800108c:	b29b      	uxth	r3, r3
 800108e:	429a      	cmp	r2, r3
 8001090:	d00b      	beq.n	80010aa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001092:	4b66      	ldr	r3, [pc, #408]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800109a:	4b64      	ldr	r3, [pc, #400]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010a2:	4b62      	ldr	r3, [pc, #392]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2203      	movs	r2, #3
 80010a8:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010aa:	4b60      	ldr	r3, [pc, #384]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b4:	2b20      	cmp	r3, #32
 80010b6:	f040 80ad 	bne.w	8001214 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010ba:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b57      	ldr	r3, [pc, #348]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010d6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010da:	4413      	add	r3, r2
 80010dc:	3302      	adds	r3, #2
 80010de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010e2:	4619      	mov	r1, r3
 80010e4:	f009 f81e 	bl	800a124 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80010e8:	e094      	b.n	8001214 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	7d1b      	ldrb	r3, [r3, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8091 	beq.w	8001218 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80010f6:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	22fe      	movs	r2, #254	@ 0xfe
 80010fc:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80010fe:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001108:	4b48      	ldr	r3, [pc, #288]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001118:	4b44      	ldr	r3, [pc, #272]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800111a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800111c:	1a8a      	subs	r2, r1, r2
 800111e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001120:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800112c:	e074      	b.n	8001218 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800112e:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001136:	f113 0f02 	cmn.w	r3, #2
 800113a:	d150      	bne.n	80011de <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800113c:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001144:	4b39      	ldr	r3, [pc, #228]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800114c:	4b37      	ldr	r3, [pc, #220]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001154:	3b02      	subs	r3, #2
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff ff31 	bl	8000fc0 <CRC16>
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001162:	793a      	ldrb	r2, [r7, #4]
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	4b30      	ldr	r3, [pc, #192]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001170:	3b02      	subs	r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001178:	429a      	cmp	r2, r3
 800117a:	d10c      	bne.n	8001196 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800117c:	797a      	ldrb	r2, [r7, #5]
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800118a:	3b01      	subs	r3, #1
 800118c:	440b      	add	r3, r1
 800118e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001192:	429a      	cmp	r2, r3
 8001194:	d004      	beq.n	80011a0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	22ff      	movs	r2, #255	@ 0xff
 800119c:	759a      	strb	r2, [r3, #22]
				break;
 800119e:	e040      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d113      	bne.n	80011da <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80011c2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011cc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80011ce:	461a      	mov	r2, r3
 80011d0:	f00a fd2e 	bl	800bc30 <memcpy>

			//execute command
			Modbus_frame_response();
 80011d4:	f000 f904 	bl	80013e0 <Modbus_frame_response>
 80011d8:	e001      	b.n	80011de <Modbus_Protocal_Worker+0x1b2>
				break;
 80011da:	bf00      	nop
					}
		break;


	}
}
 80011dc:	e021      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	7d5b      	ldrb	r3, [r3, #21]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d019      	beq.n	800121c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	75da      	strb	r2, [r3, #23]
		break;
 80011f0:	e014      	b.n	800121c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fc:	2b20      	cmp	r3, #32
 80011fe:	d10f      	bne.n	8001220 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	75da      	strb	r2, [r3, #23]
		break;
 8001212:	e005      	b.n	8001220 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001214:	bf00      	nop
 8001216:	e004      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001218:	bf00      	nop
 800121a:	e002      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 800121c:	bf00      	nop
 800121e:	e000      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001220:	bf00      	nop
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000244 	.word	0x20000244

08001230 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	7e5b      	ldrb	r3, [r3, #25]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	4a1a      	ldr	r2, [pc, #104]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	7e92      	ldrb	r2, [r2, #26]
 8001246:	4413      	add	r3, r2
 8001248:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800124a:	88fa      	ldrh	r2, [r7, #6]
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <modbusWrite1Register+0x7c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	429a      	cmp	r2, r3
 8001254:	d903      	bls.n	800125e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001256:	2002      	movs	r0, #2
 8001258:	f000 f8a0 	bl	800139c <ModbusErrorReply>
			 return;
 800125c:	e023      	b.n	80012a6 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	440b      	add	r3, r1
 800126e:	7ed2      	ldrb	r2, [r2, #27]
 8001270:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	7f12      	ldrb	r2, [r2, #28]
 8001284:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001294:	2208      	movs	r2, #8
 8001296:	4619      	mov	r1, r3
 8001298:	f00a fcca 	bl	800bc30 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <modbusWrite1Register+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000244 	.word	0x20000244

080012b0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <modbusRead1Register+0xe8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	7edb      	ldrb	r3, [r3, #27]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4a35      	ldr	r2, [pc, #212]	@ (8001398 <modbusRead1Register+0xe8>)
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	7f12      	ldrb	r2, [r2, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80012ca:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <modbusRead1Register+0xe8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	7e5b      	ldrb	r3, [r3, #25]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4a30      	ldr	r2, [pc, #192]	@ (8001398 <modbusRead1Register+0xe8>)
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	7e92      	ldrb	r2, [r2, #26]
 80012da:	4413      	add	r3, r2
 80012dc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <modbusRead1Register+0x3a>
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	2b7d      	cmp	r3, #125	@ 0x7d
 80012e8:	d903      	bls.n	80012f2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 f856 	bl	800139c <ModbusErrorReply>
		 return;
 80012f0:	e04e      	b.n	8001390 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <modbusRead1Register+0xe8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d808      	bhi.n	8001310 <modbusRead1Register+0x60>
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4413      	add	r3, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <modbusRead1Register+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	429a      	cmp	r2, r3
 800130e:	d903      	bls.n	8001318 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001310:	2002      	movs	r0, #2
 8001312:	f000 f843 	bl	800139c <ModbusErrorReply>
		 return;
 8001316:	e03b      	b.n	8001390 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <modbusRead1Register+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <modbusRead1Register+0xe8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0052      	lsls	r2, r2, #1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001332:	2400      	movs	r4, #0
 8001334:	e020      	b.n	8001378 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <modbusRead1Register+0xe8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	4423      	add	r3, r4
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	18d1      	adds	r1, r2, r3
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <modbusRead1Register+0xe8>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	1c63      	adds	r3, r4, #1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	7849      	ldrb	r1, [r1, #1]
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <modbusRead1Register+0xe8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	4423      	add	r3, r4
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <modbusRead1Register+0xe8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	0063      	lsls	r3, r4, #1
 800136a:	3303      	adds	r3, #3
 800136c:	7809      	ldrb	r1, [r1, #0]
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001376:	3401      	adds	r4, #1
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	429c      	cmp	r4, r3
 800137c:	dbdb      	blt.n	8001336 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	3301      	adds	r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <modbusRead1Register+0xe8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0052      	lsls	r2, r2, #1
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	20000244 	.word	0x20000244

0800139c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <ModbusErrorReply+0x40>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	7e1a      	ldrb	r2, [r3, #24]
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <ModbusErrorReply+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <ModbusErrorReply+0x40>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <ModbusErrorReply+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2202      	movs	r2, #2
 80013ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000244 	.word	0x20000244

080013e0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <Modbus_frame_response+0x2c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	7e1b      	ldrb	r3, [r3, #24]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d004      	beq.n	80013f8 <Modbus_frame_response+0x18>
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d105      	bne.n	80013fe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80013f2:	f7ff ff1d 	bl	8001230 <modbusWrite1Register>
		break;
 80013f6:	e006      	b.n	8001406 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80013f8:	f7ff ff5a 	bl	80012b0 <modbusRead1Register>
		break;
 80013fc:	e003      	b.n	8001406 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff ffcc 	bl	800139c <ModbusErrorReply>
		break;
 8001404:	bf00      	nop

	}
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000244 	.word	0x20000244

08001410 <Modbus_Emission>:

void Modbus_Emission()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001420:	2b20      	cmp	r3, #32
 8001422:	d15d      	bne.n	80014e0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <Modbus_Emission+0xe8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800143a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <Modbus_Emission+0xe8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800144c:	461a      	mov	r2, r3
 800144e:	f00a fbef 	bl	800bc30 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800145a:	461a      	mov	r2, r3
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <Modbus_Emission+0xe8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3203      	adds	r2, #3
 8001462:	b292      	uxth	r2, r2
 8001464:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <Modbus_Emission+0xe8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001478:	3b02      	subs	r3, #2
 800147a:	4619      	mov	r1, r3
 800147c:	4610      	mov	r0, r2
 800147e:	f7ff fd9f 	bl	8000fc0 <CRC16>
 8001482:	4603      	mov	r3, r0
 8001484:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <Modbus_Emission+0xe8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001492:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001494:	7939      	ldrb	r1, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014aa:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014ac:	7979      	ldrb	r1, [r7, #5]
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d10d      	bne.n	80014e0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014da:	461a      	mov	r2, r3
 80014dc:	f008 fda2 	bl	800a024 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	755a      	strb	r2, [r3, #21]

}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000244 	.word	0x20000244
 80014fc:	00000000 	.word	0x00000000

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001508:	f003 f8b3 	bl	8004672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150c:	f000 fbde 	bl	8001ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001510:	f000 ffb2 	bl	8002478 <MX_GPIO_Init>
  MX_DMA_Init();
 8001514:	f000 ff76 	bl	8002404 <MX_DMA_Init>
  MX_TIM1_Init();
 8001518:	f000 fcac 	bl	8001e74 <MX_TIM1_Init>
  MX_TIM2_Init();
 800151c:	f000 fcfe 	bl	8001f1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001520:	f000 fd4a 	bl	8001fb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001524:	f000 fd9e 	bl	8002064 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001528:	f000 fe9a 	bl	8002260 <MX_TIM8_Init>
  MX_TIM5_Init();
 800152c:	f000 fe12 	bl	8002154 <MX_TIM5_Init>
  MX_ADC3_Init();
 8001530:	f000 fc18 	bl	8001d64 <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8001534:	f000 ff18 	bl	8002368 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001538:	f000 fee6 	bl	8002308 <MX_TIM16_Init>
  MX_TIM6_Init();
 800153c:	f000 fe58 	bl	80021f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8001540:	4886      	ldr	r0, [pc, #536]	@ (800175c <main+0x25c>)
 8001542:	f006 fc5b 	bl	8007dfc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001546:	2100      	movs	r1, #0
 8001548:	4884      	ldr	r0, [pc, #528]	@ (800175c <main+0x25c>)
 800154a:	f006 fdad 	bl	80080a8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800154e:	213c      	movs	r1, #60	@ 0x3c
 8001550:	4883      	ldr	r0, [pc, #524]	@ (8001760 <main+0x260>)
 8001552:	f007 f865 	bl	8008620 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001556:	4883      	ldr	r0, [pc, #524]	@ (8001764 <main+0x264>)
 8001558:	f006 fcc0 	bl	8007edc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800155c:	4882      	ldr	r0, [pc, #520]	@ (8001768 <main+0x268>)
 800155e:	f006 fcbd 	bl	8007edc <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001562:	217f      	movs	r1, #127	@ 0x7f
 8001564:	4881      	ldr	r0, [pc, #516]	@ (800176c <main+0x26c>)
 8001566:	f004 fc25 	bl	8005db4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joyAnalogRead, 40);
 800156a:	2228      	movs	r2, #40	@ 0x28
 800156c:	4980      	ldr	r1, [pc, #512]	@ (8001770 <main+0x270>)
 800156e:	487f      	ldr	r0, [pc, #508]	@ (800176c <main+0x26c>)
 8001570:	f003 fd12 	bl	8004f98 <HAL_ADC_Start_DMA>
  _micros = 0;
 8001574:	497f      	ldr	r1, [pc, #508]	@ (8001774 <main+0x274>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9c1 2300 	strd	r2, r3, [r1]

	Velocontrol.kp = 100;//225;//180
 8001582:	4b7d      	ldr	r3, [pc, #500]	@ (8001778 <main+0x278>)
 8001584:	4a7d      	ldr	r2, [pc, #500]	@ (800177c <main+0x27c>)
 8001586:	619a      	str	r2, [r3, #24]
	Velocontrol.ki = 0;//2;//25
 8001588:	4b7b      	ldr	r3, [pc, #492]	@ (8001778 <main+0x278>)
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
	Velocontrol.kd = 0;
 8001590:	4b79      	ldr	r3, [pc, #484]	@ (8001778 <main+0x278>)
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
	Velocontrol.T = 0.0001;
 8001598:	4b77      	ldr	r3, [pc, #476]	@ (8001778 <main+0x278>)
 800159a:	4a79      	ldr	r2, [pc, #484]	@ (8001780 <main+0x280>)
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol.kp = 0;//0.5667;//2.015,0.6
 800159e:	4b79      	ldr	r3, [pc, #484]	@ (8001784 <main+0x284>)
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
	Poscontrol.ki = 0;//1.29;//4.5425,1.34
 80015a6:	4b77      	ldr	r3, [pc, #476]	@ (8001784 <main+0x284>)
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
	Poscontrol.kd = 0;//0.000001;//0.0000021,0.0000004
 80015ae:	4b75      	ldr	r3, [pc, #468]	@ (8001784 <main+0x284>)
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
	Poscontrol.T = 0.0001;
 80015b6:	4b73      	ldr	r3, [pc, #460]	@ (8001784 <main+0x284>)
 80015b8:	4a71      	ldr	r2, [pc, #452]	@ (8001780 <main+0x280>)
 80015ba:	625a      	str	r2, [r3, #36]	@ 0x24

	hmodbus.huart = &huart2;
 80015bc:	4b72      	ldr	r3, [pc, #456]	@ (8001788 <main+0x288>)
 80015be:	4a73      	ldr	r2, [pc, #460]	@ (800178c <main+0x28c>)
 80015c0:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80015c2:	4b71      	ldr	r3, [pc, #452]	@ (8001788 <main+0x288>)
 80015c4:	4a72      	ldr	r2, [pc, #456]	@ (8001790 <main+0x290>)
 80015c6:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001788 <main+0x288>)
 80015ca:	2215      	movs	r2, #21
 80015cc:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize =200;
 80015ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001788 <main+0x288>)
 80015d0:	22c8      	movs	r2, #200	@ 0xc8
 80015d2:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80015d4:	496f      	ldr	r1, [pc, #444]	@ (8001794 <main+0x294>)
 80015d6:	486c      	ldr	r0, [pc, #432]	@ (8001788 <main+0x288>)
 80015d8:	f7ff fc9c 	bl	8000f14 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ModBus
	  Modbus_Protocal_Worker();
 80015dc:	f7ff fd26 	bl	800102c <Modbus_Protocal_Worker>
	  State_To_Mode();
 80015e0:	f002 f928 	bl	8003834 <State_To_Mode>
	  UpdatePosRoutine();
 80015e4:	f002 f9ec 	bl	80039c0 <UpdatePosRoutine>
	  Vacuum();
 80015e8:	f002 fa48 	bl	8003a7c <Vacuum>
	  GripperMovement();
 80015ec:	f002 fa64 	bl	8003ab8 <GripperMovement>
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);//PULL/PUSH
//	  HAL_Delay(1000);
	  //ModBus

	  //Timer SET
	  int64_t currentTime = micros();
 80015f0:	f002 fc9a 	bl	8003f28 <micros>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 2300 	strd	r2, r3, [r7]
	  static uint64_t timestamp =0;
	  static uint64_t timestamp5 =0;
	  //Timer SET

		//ReadSensor
		if(currentTime > timestamp)
 80015fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001600:	4965      	ldr	r1, [pc, #404]	@ (8001798 <main+0x298>)
 8001602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001606:	4290      	cmp	r0, r2
 8001608:	eb71 0303 	sbcs.w	r3, r1, r3
 800160c:	d20e      	bcs.n	800162c <main+0x12c>
			{
			QEIEncoderPos_Update();
 800160e:	f001 fb83 	bl	8002d18 <QEIEncoderPos_Update>
			QEIEncoderVel_Update();
 8001612:	f001 fc11 	bl	8002e38 <QEIEncoderVel_Update>
			timestamp =currentTime + 100;//us
 8001616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800161a:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 800161e:	f143 0500 	adc.w	r5, r3, #0
 8001622:	4622      	mov	r2, r4
 8001624:	462b      	mov	r3, r5
 8001626:	495c      	ldr	r1, [pc, #368]	@ (8001798 <main+0x298>)
 8001628:	e9c1 2300 	strd	r2, r3, [r1]
			}
		SensorRead();
 800162c:	f002 fbca 	bl	8003dc4 <SensorRead>
		//ReadSensor

	  switch (state_ALL)
 8001630:	4b5a      	ldr	r3, [pc, #360]	@ (800179c <main+0x29c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b07      	cmp	r3, #7
 8001636:	d8d1      	bhi.n	80015dc <main+0xdc>
 8001638:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <main+0x140>)
 800163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163e:	bf00      	nop
 8001640:	08001661 	.word	0x08001661
 8001644:	08001667 	.word	0x08001667
 8001648:	08001695 	.word	0x08001695
 800164c:	080016f9 	.word	0x080016f9
 8001650:	08001953 	.word	0x08001953
 8001654:	0800195d 	.word	0x0800195d
 8001658:	08001a95 	.word	0x08001a95
 800165c:	080015dd 	.word	0x080015dd
	  			{
	  			case 0://HOME
	  				SetHome();
 8001660:	f002 fa86 	bl	8003b70 <SetHome>
	  				break;
 8001664:	e319      	b.n	8001c9a <main+0x79a>
	  			case 1://Standby
	  				if(start == 1)//MODBUS HERE
 8001666:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <main+0x2a0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <main+0x174>
	  				{
	  					state_ALL = 2;
 800166e:	4b4b      	ldr	r3, [pc, #300]	@ (800179c <main+0x29c>)
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
	  				}
	  				if(ButtonTest[1] == 0)//MODBUS HERE
 8001674:	4b4b      	ldr	r3, [pc, #300]	@ (80017a4 <main+0x2a4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <main+0x182>
					{
						state_ALL = 4;
 800167c:	4b47      	ldr	r3, [pc, #284]	@ (800179c <main+0x29c>)
 800167e:	2204      	movs	r2, #4
 8001680:	601a      	str	r2, [r3, #0]
					}
	  				if(start == 1)//HOME Button
 8001682:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <main+0x2a0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	f040 82ff 	bne.w	8001c8a <main+0x78a>
					{
						state_ALL = 2;
 800168c:	4b43      	ldr	r3, [pc, #268]	@ (800179c <main+0x29c>)
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
					}
	  				break;
 8001692:	e2fa      	b.n	8001c8a <main+0x78a>
	  			case 2://JOY SET
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8001694:	2201      	movs	r2, #1
 8001696:	2108      	movs	r1, #8
 8001698:	4843      	ldr	r0, [pc, #268]	@ (80017a8 <main+0x2a8>)
 800169a:	f005 fad1 	bl	8006c40 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2104      	movs	r1, #4
 80016a2:	4841      	ldr	r0, [pc, #260]	@ (80017a8 <main+0x2a8>)
 80016a4:	f005 facc 	bl	8006c40 <HAL_GPIO_WritePin>
	  				Joy_State();
 80016a8:	f001 f824 	bl	80026f4 <Joy_State>
	  				if(ButtonTest[0] == 0)//HOME Button
 80016ac:	4b3d      	ldr	r3, [pc, #244]	@ (80017a4 <main+0x2a4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <main+0x1c0>
					{
						state_ALL = 0;
 80016b4:	4b39      	ldr	r3, [pc, #228]	@ (800179c <main+0x29c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
						Mode = 0;
 80016ba:	4b3c      	ldr	r3, [pc, #240]	@ (80017ac <main+0x2ac>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
					}
	  				if(ButtonTest[1] == 0)
 80016c0:	4b38      	ldr	r3, [pc, #224]	@ (80017a4 <main+0x2a4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <main+0x1ce>
					{
						state_ALL = 4;
 80016c8:	4b34      	ldr	r3, [pc, #208]	@ (800179c <main+0x29c>)
 80016ca:	2204      	movs	r2, #4
 80016cc:	601a      	str	r2, [r3, #0]
					}
	  				if(ButtonTest[2] == 0)
 80016ce:	4b35      	ldr	r3, [pc, #212]	@ (80017a4 <main+0x2a4>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <main+0x1dc>
					{
						state_ALL = 5;
 80016d6:	4b31      	ldr	r3, [pc, #196]	@ (800179c <main+0x29c>)
 80016d8:	2205      	movs	r2, #5
 80016da:	601a      	str	r2, [r3, #0]
					}
	  				if(ButtonTest[3] == 0)
 80016dc:	4b31      	ldr	r3, [pc, #196]	@ (80017a4 <main+0x2a4>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <main+0x1e8>
					{
	  					Trajectory();
 80016e4:	f001 fcf4 	bl	80030d0 <Trajectory>
					}
	  				if(start == 1)
 80016e8:	4b2d      	ldr	r3, [pc, #180]	@ (80017a0 <main+0x2a0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	f040 82ce 	bne.w	8001c8e <main+0x78e>
	  				{
//	  					state_ALL = 3;
//	  					start = 0;
						Trajectory();
 80016f2:	f001 fced 	bl	80030d0 <Trajectory>
	  				}
	  				break;
 80016f6:	e2ca      	b.n	8001c8e <main+0x78e>
	  			case 3://PID
	  				if(Mode == 1)
 80016f8:	4b2c      	ldr	r3, [pc, #176]	@ (80017ac <main+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	f040 80b1 	bne.w	8001864 <main+0x364>
	  				{
	  					Trajectory();
 8001702:	f001 fce5 	bl	80030d0 <Trajectory>
						if(CountSetpoint < 100)
 8001706:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <main+0x2b0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b63      	cmp	r3, #99	@ 0x63
 800170c:	dc02      	bgt.n	8001714 <main+0x214>
						{
							PIDposition();
 800170e:	f001 ff35 	bl	800357c <PIDposition>
 8001712:	e066      	b.n	80017e2 <main+0x2e2>
						}
						else
						{
							if(state_ALL_Old == 5 || state_ALL_Old == 0 || state_ALL_Old == 7 || state_ALL_Old == 8)
 8001714:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <main+0x2b4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d00b      	beq.n	8001734 <main+0x234>
 800171c:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <main+0x2b4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d007      	beq.n	8001734 <main+0x234>
 8001724:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <main+0x2b4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b07      	cmp	r3, #7
 800172a:	d003      	beq.n	8001734 <main+0x234>
 800172c:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <main+0x2b4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d141      	bne.n	80017b8 <main+0x2b8>
							{
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2101      	movs	r1, #1
 8001738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173c:	f005 fa80 	bl	8006c40 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <main+0x25c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 8001748:	f001 fa5a 	bl	8002c00 <reset>
							state_ALL = 6;
 800174c:	4b13      	ldr	r3, [pc, #76]	@ (800179c <main+0x29c>)
 800174e:	2206      	movs	r2, #6
 8001750:	601a      	str	r2, [r3, #0]
	//						state_ALL = 2;
							CountSetpoint = 0;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <main+0x2b0>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e040      	b.n	80017dc <main+0x2dc>
 800175a:	bf00      	nop
 800175c:	20000578 	.word	0x20000578
 8001760:	200004ac 	.word	0x200004ac
 8001764:	20000710 	.word	0x20000710
 8001768:	20000644 	.word	0x20000644
 800176c:	20000248 	.word	0x20000248
 8001770:	20001294 	.word	0x20001294
 8001774:	20001348 	.word	0x20001348
 8001778:	20001220 	.word	0x20001220
 800177c:	42c80000 	.word	0x42c80000
 8001780:	38d1b717 	.word	0x38d1b717
 8001784:	20001248 	.word	0x20001248
 8001788:	20000b00 	.word	0x20000b00
 800178c:	20000974 	.word	0x20000974
 8001790:	200008a8 	.word	0x200008a8
 8001794:	20000fd8 	.word	0x20000fd8
 8001798:	20001350 	.word	0x20001350
 800179c:	20000204 	.word	0x20000204
 80017a0:	200011b0 	.word	0x200011b0
 80017a4:	200011c4 	.word	0x200011c4
 80017a8:	48000800 	.word	0x48000800
 80017ac:	2000116c 	.word	0x2000116c
 80017b0:	200011e4 	.word	0x200011e4
 80017b4:	200011b4 	.word	0x200011b4
							}
							else
							{
							state_ALL = 2;
 80017b8:	4ba5      	ldr	r3, [pc, #660]	@ (8001a50 <main+0x550>)
 80017ba:	2202      	movs	r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 80017be:	4ba5      	ldr	r3, [pc, #660]	@ (8001a54 <main+0x554>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2101      	movs	r1, #1
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017cc:	f005 fa38 	bl	8006c40 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80017d0:	4ba1      	ldr	r3, [pc, #644]	@ (8001a58 <main+0x558>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 80017d8:	f001 fa12 	bl	8002c00 <reset>
							}
							registerFrame[0x10].U16 = 0b0000;
 80017dc:	4b9f      	ldr	r3, [pc, #636]	@ (8001a5c <main+0x55c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	841a      	strh	r2, [r3, #32]

						}
						if(ButtonTest[0] == 0)//HOME Button
 80017e2:	4b9f      	ldr	r3, [pc, #636]	@ (8001a60 <main+0x560>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <main+0x2fa>
						{
							state_ALL = 0;
 80017ea:	4b99      	ldr	r3, [pc, #612]	@ (8001a50 <main+0x550>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
							Mode = 0;
 80017f0:	4b9c      	ldr	r3, [pc, #624]	@ (8001a64 <main+0x564>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
							reset();
 80017f6:	f001 fa03 	bl	8002c00 <reset>
						}
						if(fabs(Pos-Pos_Target) <= 0.2)//Limit
 80017fa:	4b9b      	ldr	r3, [pc, #620]	@ (8001a68 <main+0x568>)
 80017fc:	ed93 7a00 	vldr	s14, [r3]
 8001800:	4b9a      	ldr	r3, [pc, #616]	@ (8001a6c <main+0x56c>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180a:	eef0 7ae7 	vabs.f32	s15, s15
 800180e:	ee17 0a90 	vmov	r0, s15
 8001812:	f7fe fe65 	bl	80004e0 <__aeabi_f2d>
 8001816:	a38c      	add	r3, pc, #560	@ (adr r3, 8001a48 <main+0x548>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7ff f934 	bl	8000a88 <__aeabi_dcmple>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01a      	beq.n	800185c <main+0x35c>
						{
							if(currentTime > timestamp5)
 8001826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800182a:	4991      	ldr	r1, [pc, #580]	@ (8001a70 <main+0x570>)
 800182c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001830:	4290      	cmp	r0, r2
 8001832:	eb71 0303 	sbcs.w	r3, r1, r3
 8001836:	f080 822c 	bcs.w	8001c92 <main+0x792>
						  {
								CountSetpoint++;
 800183a:	4b86      	ldr	r3, [pc, #536]	@ (8001a54 <main+0x554>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a84      	ldr	r2, [pc, #528]	@ (8001a54 <main+0x554>)
 8001842:	6013      	str	r3, [r2, #0]
								timestamp5 =currentTime + 1000;
 8001844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001848:	f512 787a 	adds.w	r8, r2, #1000	@ 0x3e8
 800184c:	f143 0900 	adc.w	r9, r3, #0
 8001850:	4642      	mov	r2, r8
 8001852:	464b      	mov	r3, r9
 8001854:	4986      	ldr	r1, [pc, #536]	@ (8001a70 <main+0x570>)
 8001856:	e9c1 2300 	strd	r2, r3, [r1]
						{
							CountSetpoint = 0;
						}
	  				}

	  				break;
 800185a:	e21a      	b.n	8001c92 <main+0x792>
							CountSetpoint = 0;
 800185c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a54 <main+0x554>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
	  				break;
 8001862:	e216      	b.n	8001c92 <main+0x792>
	  					Trajectory();
 8001864:	f001 fc34 	bl	80030d0 <Trajectory>
						if(CountSetpoint < 100)
 8001868:	4b7a      	ldr	r3, [pc, #488]	@ (8001a54 <main+0x554>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b63      	cmp	r3, #99	@ 0x63
 800186e:	dc02      	bgt.n	8001876 <main+0x376>
							PIDposition();
 8001870:	f001 fe84 	bl	800357c <PIDposition>
 8001874:	e02c      	b.n	80018d0 <main+0x3d0>
							if(state_ALL_Old == 5 || state_ALL_Old == 0)
 8001876:	4b7f      	ldr	r3, [pc, #508]	@ (8001a74 <main+0x574>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d003      	beq.n	8001886 <main+0x386>
 800187e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a74 <main+0x574>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d112      	bne.n	80018ac <main+0x3ac>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2101      	movs	r1, #1
 800188a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188e:	f005 f9d7 	bl	8006c40 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001892:	4b71      	ldr	r3, [pc, #452]	@ (8001a58 <main+0x558>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 800189a:	f001 f9b1 	bl	8002c00 <reset>
							state_ALL = 2;
 800189e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a50 <main+0x550>)
 80018a0:	2202      	movs	r2, #2
 80018a2:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 80018a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001a54 <main+0x554>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e011      	b.n	80018d0 <main+0x3d0>
							state_ALL = 2;
 80018ac:	4b68      	ldr	r3, [pc, #416]	@ (8001a50 <main+0x550>)
 80018ae:	2202      	movs	r2, #2
 80018b0:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 80018b2:	4b68      	ldr	r3, [pc, #416]	@ (8001a54 <main+0x554>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2101      	movs	r1, #1
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c0:	f005 f9be 	bl	8006c40 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80018c4:	4b64      	ldr	r3, [pc, #400]	@ (8001a58 <main+0x558>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 80018cc:	f001 f998 	bl	8002c00 <reset>
						if(ButtonTest[0] == 0)//HOME Button
 80018d0:	4b63      	ldr	r3, [pc, #396]	@ (8001a60 <main+0x560>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <main+0x3e8>
							state_ALL = 0;
 80018d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001a50 <main+0x550>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
							Mode = 0;
 80018de:	4b61      	ldr	r3, [pc, #388]	@ (8001a64 <main+0x564>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
							reset();
 80018e4:	f001 f98c 	bl	8002c00 <reset>
						if(fabs(Pos-Pos_Target) <= 0.2)//Limit
 80018e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001a68 <main+0x568>)
 80018ea:	ed93 7a00 	vldr	s14, [r3]
 80018ee:	4b5f      	ldr	r3, [pc, #380]	@ (8001a6c <main+0x56c>)
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f8:	eef0 7ae7 	vabs.f32	s15, s15
 80018fc:	ee17 0a90 	vmov	r0, s15
 8001900:	f7fe fdee 	bl	80004e0 <__aeabi_f2d>
 8001904:	a350      	add	r3, pc, #320	@ (adr r3, 8001a48 <main+0x548>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7ff f8bd 	bl	8000a88 <__aeabi_dcmple>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01a      	beq.n	800194a <main+0x44a>
							if(currentTime > timestamp5)
 8001914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001918:	4955      	ldr	r1, [pc, #340]	@ (8001a70 <main+0x570>)
 800191a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800191e:	4290      	cmp	r0, r2
 8001920:	eb71 0303 	sbcs.w	r3, r1, r3
 8001924:	f080 81b5 	bcs.w	8001c92 <main+0x792>
								CountSetpoint++;
 8001928:	4b4a      	ldr	r3, [pc, #296]	@ (8001a54 <main+0x554>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	4a49      	ldr	r2, [pc, #292]	@ (8001a54 <main+0x554>)
 8001930:	6013      	str	r3, [r2, #0]
								timestamp5 =currentTime + 1000;
 8001932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001936:	f512 7a7a 	adds.w	sl, r2, #1000	@ 0x3e8
 800193a:	f143 0b00 	adc.w	fp, r3, #0
 800193e:	4652      	mov	r2, sl
 8001940:	465b      	mov	r3, fp
 8001942:	494b      	ldr	r1, [pc, #300]	@ (8001a70 <main+0x570>)
 8001944:	e9c1 2300 	strd	r2, r3, [r1]
	  				break;
 8001948:	e1a3      	b.n	8001c92 <main+0x792>
							CountSetpoint = 0;
 800194a:	4b42      	ldr	r3, [pc, #264]	@ (8001a54 <main+0x554>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
	  				break;
 8001950:	e19f      	b.n	8001c92 <main+0x792>
	  			case 4://TEST
	  				Joy_State();
 8001952:	f000 fecf 	bl	80026f4 <Joy_State>
	  				ButtonMem();
 8001956:	f001 f887 	bl	8002a68 <ButtonMem>
					break;
 800195a:	e19e      	b.n	8001c9a <main+0x79a>
	  			case 5://JOG MODE
	  				if(Mode == 1)
 800195c:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <main+0x564>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d14d      	bne.n	8001a00 <main+0x500>
	  				{
						switch(state_Pick_Place){
 8001964:	4b44      	ldr	r3, [pc, #272]	@ (8001a78 <main+0x578>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <main+0x472>
 800196c:	2b01      	cmp	r3, #1
 800196e:	d01d      	beq.n	80019ac <main+0x4ac>
						i = 0;
						}

						PIDreset();
	  				}
					break;
 8001970:	e193      	b.n	8001c9a <main+0x79a>
								Pos_Target = MemPos[Pick_Order[Pick]-1];
 8001972:	4b42      	ldr	r3, [pc, #264]	@ (8001a7c <main+0x57c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a42      	ldr	r2, [pc, #264]	@ (8001a80 <main+0x580>)
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	3b01      	subs	r3, #1
 800197e:	4a41      	ldr	r2, [pc, #260]	@ (8001a84 <main+0x584>)
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a39      	ldr	r2, [pc, #228]	@ (8001a6c <main+0x56c>)
 8001988:	6013      	str	r3, [r2, #0]
								Pick++;
 800198a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a7c <main+0x57c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	4a3a      	ldr	r2, [pc, #232]	@ (8001a7c <main+0x57c>)
 8001992:	6013      	str	r3, [r2, #0]
								state_ALL = 3;
 8001994:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <main+0x550>)
 8001996:	2203      	movs	r2, #3
 8001998:	601a      	str	r2, [r3, #0]
								state_ALL_Old = 7;
 800199a:	4b36      	ldr	r3, [pc, #216]	@ (8001a74 <main+0x574>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
								state_Pick_Place = 1;
 80019a0:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <main+0x578>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
								PIDreset();
 80019a6:	f001 f97b 	bl	8002ca0 <PIDreset>
								break;
 80019aa:	e049      	b.n	8001a40 <main+0x540>
								Pos_Target = MemPos[Place_Order[Place]-1];
 80019ac:	4b36      	ldr	r3, [pc, #216]	@ (8001a88 <main+0x588>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a36      	ldr	r2, [pc, #216]	@ (8001a8c <main+0x58c>)
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	4a32      	ldr	r2, [pc, #200]	@ (8001a84 <main+0x584>)
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a6c <main+0x56c>)
 80019c2:	6013      	str	r3, [r2, #0]
								Place++;
 80019c4:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <main+0x588>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001a88 <main+0x588>)
 80019cc:	6013      	str	r3, [r2, #0]
								state_ALL = 3;
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <main+0x550>)
 80019d0:	2203      	movs	r2, #3
 80019d2:	601a      	str	r2, [r3, #0]
								state_ALL_Old = 8;
 80019d4:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <main+0x574>)
 80019d6:	2208      	movs	r2, #8
 80019d8:	601a      	str	r2, [r3, #0]
								state_Pick_Place = 0;
 80019da:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <main+0x578>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
								if(Place == 5)
 80019e0:	4b29      	ldr	r3, [pc, #164]	@ (8001a88 <main+0x588>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d108      	bne.n	80019fa <main+0x4fa>
									state_ALL = 0;
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <main+0x550>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
									Mode = 0;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <main+0x564>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
									registerFrame[0x10].U16 = 0b0000;
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <main+0x55c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	841a      	strh	r2, [r3, #32]
								PIDreset();
 80019fa:	f001 f951 	bl	8002ca0 <PIDreset>
								break;
 80019fe:	e01f      	b.n	8001a40 <main+0x540>
	  					Pos_Target = MemPos[i];
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <main+0x590>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1f      	ldr	r2, [pc, #124]	@ (8001a84 <main+0x584>)
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a17      	ldr	r2, [pc, #92]	@ (8001a6c <main+0x56c>)
 8001a0e:	6013      	str	r3, [r2, #0]
						state_ALL = 3;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <main+0x550>)
 8001a12:	2203      	movs	r2, #3
 8001a14:	601a      	str	r2, [r3, #0]
						state_ALL_Old = 5;
 8001a16:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <main+0x574>)
 8001a18:	2205      	movs	r2, #5
 8001a1a:	601a      	str	r2, [r3, #0]
						i++;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <main+0x590>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <main+0x590>)
 8001a24:	6013      	str	r3, [r2, #0]
						if(i == 5)
 8001a26:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <main+0x590>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d105      	bne.n	8001a3a <main+0x53a>
						state_ALL_Old = 0;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <main+0x574>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
						i = 0;
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <main+0x590>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
						PIDreset();
 8001a3a:	f001 f931 	bl	8002ca0 <PIDreset>
					break;
 8001a3e:	e12c      	b.n	8001c9a <main+0x79a>
 8001a40:	e12b      	b.n	8001c9a <main+0x79a>
 8001a42:	bf00      	nop
 8001a44:	f3af 8000 	nop.w
 8001a48:	9999999a 	.word	0x9999999a
 8001a4c:	3fc99999 	.word	0x3fc99999
 8001a50:	20000204 	.word	0x20000204
 8001a54:	200011e4 	.word	0x200011e4
 8001a58:	20000578 	.word	0x20000578
 8001a5c:	20000fd8 	.word	0x20000fd8
 8001a60:	200011c4 	.word	0x200011c4
 8001a64:	2000116c 	.word	0x2000116c
 8001a68:	2000130c 	.word	0x2000130c
 8001a6c:	20001274 	.word	0x20001274
 8001a70:	20001358 	.word	0x20001358
 8001a74:	200011b4 	.word	0x200011b4
 8001a78:	200011bc 	.word	0x200011bc
 8001a7c:	20001210 	.word	0x20001210
 8001a80:	20001180 	.word	0x20001180
 8001a84:	200011f8 	.word	0x200011f8
 8001a88:	20001214 	.word	0x20001214
 8001a8c:	20001194 	.word	0x20001194
 8001a90:	2000120c 	.word	0x2000120c
	  			case 6://Gripper
	  				switch (state_Griper)
 8001a94:	4b81      	ldr	r3, [pc, #516]	@ (8001c9c <main+0x79c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	f000 8096 	beq.w	8001bca <main+0x6ca>
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	f300 80f9 	bgt.w	8001c96 <main+0x796>
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <main+0x5ae>
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d047      	beq.n	8001b3c <main+0x63c>
	  						break;

	  				}


	  				break;
 8001aac:	e0f3      	b.n	8001c96 <main+0x796>
								if(LeadSW[1] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 8001aae:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca0 <main+0x7a0>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <main+0x5c6>
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca0 <main+0x7a0>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10f      	bne.n	8001ade <main+0x5de>
 8001abe:	4b78      	ldr	r3, [pc, #480]	@ (8001ca0 <main+0x7a0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10b      	bne.n	8001ade <main+0x5de>
									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2120      	movs	r1, #32
 8001aca:	4876      	ldr	r0, [pc, #472]	@ (8001ca4 <main+0x7a4>)
 8001acc:	f005 f8b8 	bl	8006c40 <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad6:	4873      	ldr	r0, [pc, #460]	@ (8001ca4 <main+0x7a4>)
 8001ad8:	f005 f8b2 	bl	8006c40 <HAL_GPIO_WritePin>
	  						break;
 8001adc:	e0d1      	b.n	8001c82 <main+0x782>
								else if(LeadSW[0] == 0)
 8001ade:	4b70      	ldr	r3, [pc, #448]	@ (8001ca0 <main+0x7a0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 80cd 	bne.w	8001c82 <main+0x782>
									if(CountGriper > 100)
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <main+0x7a8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b64      	cmp	r3, #100	@ 0x64
 8001aee:	dd11      	ble.n	8001b14 <main+0x614>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2120      	movs	r1, #32
 8001af4:	486b      	ldr	r0, [pc, #428]	@ (8001ca4 <main+0x7a4>)
 8001af6:	f005 f8a3 	bl	8006c40 <HAL_GPIO_WritePin>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b00:	4868      	ldr	r0, [pc, #416]	@ (8001ca4 <main+0x7a4>)
 8001b02:	f005 f89d 	bl	8006c40 <HAL_GPIO_WritePin>
										state_Griper = 1;
 8001b06:	4b65      	ldr	r3, [pc, #404]	@ (8001c9c <main+0x79c>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 8001b0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ca8 <main+0x7a8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
	  						break;
 8001b12:	e0b6      	b.n	8001c82 <main+0x782>
										if(timeGriper < HAL_GetTick())
 8001b14:	f002 fe12 	bl	800473c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b64      	ldr	r3, [pc, #400]	@ (8001cac <main+0x7ac>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	f240 80af 	bls.w	8001c82 <main+0x782>
											CountGriper++;
 8001b24:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <main+0x7a8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ca8 <main+0x7a8>)
 8001b2c:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 8001b2e:	f002 fe05 	bl	800473c <HAL_GetTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	330a      	adds	r3, #10
 8001b36:	4a5d      	ldr	r2, [pc, #372]	@ (8001cac <main+0x7ac>)
 8001b38:	6013      	str	r3, [r2, #0]
	  						break;
 8001b3a:	e0a2      	b.n	8001c82 <main+0x782>
								if(timeVacuum < HAL_GetTick())
 8001b3c:	f002 fdfe 	bl	800473c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb0 <main+0x7b0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d90a      	bls.n	8001b60 <main+0x660>
									CountVacuum++;
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb4 <main+0x7b4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	4a58      	ldr	r2, [pc, #352]	@ (8001cb4 <main+0x7b4>)
 8001b52:	6013      	str	r3, [r2, #0]
									timeVacuum = HAL_GetTick()+10;
 8001b54:	f002 fdf2 	bl	800473c <HAL_GetTick>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	330a      	adds	r3, #10
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <main+0x7b0>)
 8001b5e:	6013      	str	r3, [r2, #0]
								if(CountVacuum < 500)
 8001b60:	4b54      	ldr	r3, [pc, #336]	@ (8001cb4 <main+0x7b4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b68:	da28      	bge.n	8001bbc <main+0x6bc>
									if(state_ALL_Old == 7)
 8001b6a:	4b53      	ldr	r3, [pc, #332]	@ (8001cb8 <main+0x7b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b07      	cmp	r3, #7
 8001b70:	d104      	bne.n	8001b7c <main+0x67c>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	2140      	movs	r1, #64	@ 0x40
 8001b76:	484b      	ldr	r0, [pc, #300]	@ (8001ca4 <main+0x7a4>)
 8001b78:	f005 f862 	bl	8006c40 <HAL_GPIO_WritePin>
									if(state_ALL_Old == 8)
 8001b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb8 <main+0x7b8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d105      	bne.n	8001b90 <main+0x690>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2140      	movs	r1, #64	@ 0x40
 8001b88:	4846      	ldr	r0, [pc, #280]	@ (8001ca4 <main+0x7a4>)
 8001b8a:	f005 f859 	bl	8006c40 <HAL_GPIO_WritePin>
								break;
 8001b8e:	e07b      	b.n	8001c88 <main+0x788>
										if(VacuumNF == 1)
 8001b90:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <main+0x7bc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d108      	bne.n	8001baa <main+0x6aa>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2140      	movs	r1, #64	@ 0x40
 8001b9c:	4841      	ldr	r0, [pc, #260]	@ (8001ca4 <main+0x7a4>)
 8001b9e:	f005 f84f 	bl	8006c40 <HAL_GPIO_WritePin>
											VacuumNF = 0;
 8001ba2:	4b46      	ldr	r3, [pc, #280]	@ (8001cbc <main+0x7bc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
								break;
 8001ba8:	e06e      	b.n	8001c88 <main+0x788>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2140      	movs	r1, #64	@ 0x40
 8001bae:	483d      	ldr	r0, [pc, #244]	@ (8001ca4 <main+0x7a4>)
 8001bb0:	f005 f846 	bl	8006c40 <HAL_GPIO_WritePin>
											VacuumNF = 1;
 8001bb4:	4b41      	ldr	r3, [pc, #260]	@ (8001cbc <main+0x7bc>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
								break;
 8001bba:	e065      	b.n	8001c88 <main+0x788>
									state_Griper = 2;
 8001bbc:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <main+0x79c>)
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	601a      	str	r2, [r3, #0]
									CountVacuum = 0;
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb4 <main+0x7b4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
								break;
 8001bc8:	e05e      	b.n	8001c88 <main+0x788>
	  							if(LeadSW[0] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 8001bca:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <main+0x7a0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <main+0x6e2>
 8001bd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <main+0x7a0>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d10f      	bne.n	8001bfa <main+0x6fa>
 8001bda:	4b31      	ldr	r3, [pc, #196]	@ (8001ca0 <main+0x7a0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10b      	bne.n	8001bfa <main+0x6fa>
	  								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2120      	movs	r1, #32
 8001be6:	482f      	ldr	r0, [pc, #188]	@ (8001ca4 <main+0x7a4>)
 8001be8:	f005 f82a 	bl	8006c40 <HAL_GPIO_WritePin>
	  								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,1);
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bf2:	482c      	ldr	r0, [pc, #176]	@ (8001ca4 <main+0x7a4>)
 8001bf4:	f005 f824 	bl	8006c40 <HAL_GPIO_WritePin>
 8001bf8:	e042      	b.n	8001c80 <main+0x780>
	  							else if(LeadSW[1] == 0)
 8001bfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <main+0x7a0>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d141      	bne.n	8001c86 <main+0x786>
	  								if(CountGriper > 100)
 8001c02:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <main+0x7a8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	dd27      	ble.n	8001c5a <main+0x75a>
	  									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2120      	movs	r1, #32
 8001c0e:	4825      	ldr	r0, [pc, #148]	@ (8001ca4 <main+0x7a4>)
 8001c10:	f005 f816 	bl	8006c40 <HAL_GPIO_WritePin>
	  									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c1a:	4822      	ldr	r0, [pc, #136]	@ (8001ca4 <main+0x7a4>)
 8001c1c:	f005 f810 	bl	8006c40 <HAL_GPIO_WritePin>
	  									state_Griper = 0;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <main+0x79c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <main+0x7a8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
										if(state_ALL_Old == 5 || state_ALL_Old == 7 || state_ALL_Old == 8)
 8001c2c:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <main+0x7b8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d007      	beq.n	8001c44 <main+0x744>
 8001c34:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <main+0x7b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b07      	cmp	r3, #7
 8001c3a:	d003      	beq.n	8001c44 <main+0x744>
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <main+0x7b8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d103      	bne.n	8001c4c <main+0x74c>
											state_ALL = 5;
 8001c44:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <main+0x7c0>)
 8001c46:	2205      	movs	r2, #5
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e019      	b.n	8001c80 <main+0x780>
											state_ALL = 0;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc0 <main+0x7c0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
											Mode = 0;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <main+0x7c4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	  						break;
 8001c58:	e015      	b.n	8001c86 <main+0x786>
										if(timeGriper < HAL_GetTick())
 8001c5a:	f002 fd6f 	bl	800473c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <main+0x7c8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d90e      	bls.n	8001c86 <main+0x786>
											CountGriper++;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <main+0x7a8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca8 <main+0x7a8>)
 8001c70:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 8001c72:	f002 fd63 	bl	800473c <HAL_GetTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	330a      	adds	r3, #10
 8001c7a:	4a13      	ldr	r2, [pc, #76]	@ (8001cc8 <main+0x7c8>)
 8001c7c:	6013      	str	r3, [r2, #0]
	  						break;
 8001c7e:	e002      	b.n	8001c86 <main+0x786>
 8001c80:	e001      	b.n	8001c86 <main+0x786>
	  						break;
 8001c82:	bf00      	nop
 8001c84:	e007      	b.n	8001c96 <main+0x796>
	  						break;
 8001c86:	bf00      	nop
	  				break;
 8001c88:	e005      	b.n	8001c96 <main+0x796>
	  				break;
 8001c8a:	bf00      	nop
 8001c8c:	e4a6      	b.n	80015dc <main+0xdc>
	  				break;
 8001c8e:	bf00      	nop
 8001c90:	e4a4      	b.n	80015dc <main+0xdc>
	  				break;
 8001c92:	bf00      	nop
 8001c94:	e4a2      	b.n	80015dc <main+0xdc>
	  				break;
 8001c96:	bf00      	nop
 8001c98:	e4a0      	b.n	80015dc <main+0xdc>
  {
 8001c9a:	e49f      	b.n	80015dc <main+0xdc>
 8001c9c:	200011b8 	.word	0x200011b8
 8001ca0:	200011dc 	.word	0x200011dc
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	200011e8 	.word	0x200011e8
 8001cac:	20001360 	.word	0x20001360
 8001cb0:	20001364 	.word	0x20001364
 8001cb4:	200011ec 	.word	0x200011ec
 8001cb8:	200011b4 	.word	0x200011b4
 8001cbc:	200011f4 	.word	0x200011f4
 8001cc0:	20000204 	.word	0x20000204
 8001cc4:	2000116c 	.word	0x2000116c
 8001cc8:	20001368 	.word	0x20001368

08001ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b094      	sub	sp, #80	@ 0x50
 8001cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd2:	f107 0318 	add.w	r3, r7, #24
 8001cd6:	2238      	movs	r2, #56	@ 0x38
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f009 ff7c 	bl	800bbd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f004 fff0 	bl	8006cd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfe:	2340      	movs	r3, #64	@ 0x40
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d02:	2302      	movs	r3, #2
 8001d04:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d06:	2302      	movs	r3, #2
 8001d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d0e:	2355      	movs	r3, #85	@ 0x55
 8001d10:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1e:	f107 0318 	add.w	r3, r7, #24
 8001d22:	4618      	mov	r0, r3
 8001d24:	f005 f88a 	bl	8006e3c <HAL_RCC_OscConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d2e:	f002 f929 	bl	8003f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d32:	230f      	movs	r3, #15
 8001d34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d36:	2303      	movs	r3, #3
 8001d38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2104      	movs	r1, #4
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 fb88 	bl	8007460 <HAL_RCC_ClockConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d56:	f002 f915 	bl	8003f84 <Error_Handler>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3750      	adds	r7, #80	@ 0x50
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	@ 0x30
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2220      	movs	r2, #32
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f009 ff2b 	bl	800bbd8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001d82:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001d84:	4a38      	ldr	r2, [pc, #224]	@ (8001e68 <MX_ADC3_Init+0x104>)
 8001d86:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d88:	4b36      	ldr	r3, [pc, #216]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001d8a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d8e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d90:	4b34      	ldr	r3, [pc, #208]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d96:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001d9c:	4b31      	ldr	r3, [pc, #196]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001da2:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001da8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001daa:	2204      	movs	r2, #4
 8001dac:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001dae:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001db4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001dc0:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dc8:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dce:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001dea:	481e      	ldr	r0, [pc, #120]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001dec:	f002 ff18 	bl	8004c20 <HAL_ADC_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001df6:	f002 f8c5 	bl	8003f84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e02:	4619      	mov	r1, r3
 8001e04:	4817      	ldr	r0, [pc, #92]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001e06:	f004 f837 	bl	8005e78 <HAL_ADCEx_MultiModeConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001e10:	f002 f8b8 	bl	8003f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e14:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <MX_ADC3_Init+0x108>)
 8001e16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e18:	2306      	movs	r3, #6
 8001e1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e20:	237f      	movs	r3, #127	@ 0x7f
 8001e22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e24:	2304      	movs	r3, #4
 8001e26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001e32:	f003 f9a3 	bl	800517c <HAL_ADC_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001e3c:	f002 f8a2 	bl	8003f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <MX_ADC3_Init+0x10c>)
 8001e42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e44:	230c      	movs	r3, #12
 8001e46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_ADC3_Init+0x100>)
 8001e4e:	f003 f995 	bl	800517c <HAL_ADC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 8001e58:	f002 f894 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	3730      	adds	r7, #48	@ 0x30
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000248 	.word	0x20000248
 8001e68:	50000400 	.word	0x50000400
 8001e6c:	04300002 	.word	0x04300002
 8001e70:	14f00020 	.word	0x14f00020

08001e74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0310 	add.w	r3, r7, #16
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001e94:	4a20      	ldr	r2, [pc, #128]	@ (8001f18 <MX_TIM1_Init+0xa4>)
 8001e96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eaa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ebe:	4815      	ldr	r0, [pc, #84]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001ec0:	f005 ff38 	bl	8007d34 <HAL_TIM_Base_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001eca:	f002 f85b 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480e      	ldr	r0, [pc, #56]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001edc:	f006 febc 	bl	8008c58 <HAL_TIM_ConfigClockSource>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ee6:	f002 f84d 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	@ (8001f14 <MX_TIM1_Init+0xa0>)
 8001efc:	f007 fe92 	bl	8009c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f06:	f002 f83d 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000314 	.word	0x20000314
 8001f18:	40012c00 	.word	0x40012c00

08001f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f22:	f107 0310 	add.w	r3, r7, #16
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <MX_TIM2_Init+0x98>)
 8001f3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <MX_TIM2_Init+0x98>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <MX_TIM2_Init+0x98>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <MX_TIM2_Init+0x98>)
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f56:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <MX_TIM2_Init+0x98>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <MX_TIM2_Init+0x98>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f62:	4814      	ldr	r0, [pc, #80]	@ (8001fb4 <MX_TIM2_Init+0x98>)
 8001f64:	f005 fee6 	bl	8007d34 <HAL_TIM_Base_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f6e:	f002 f809 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480d      	ldr	r0, [pc, #52]	@ (8001fb4 <MX_TIM2_Init+0x98>)
 8001f80:	f006 fe6a 	bl	8008c58 <HAL_TIM_ConfigClockSource>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f8a:	f001 fffb 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4806      	ldr	r0, [pc, #24]	@ (8001fb4 <MX_TIM2_Init+0x98>)
 8001f9c:	f007 fe42 	bl	8009c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fa6:	f001 ffed 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	3720      	adds	r7, #32
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200003e0 	.word	0x200003e0

08001fb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	@ 0x30
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	2224      	movs	r2, #36	@ 0x24
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f009 fe06 	bl	800bbd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fcc:	463b      	mov	r3, r7
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fd6:	4b21      	ldr	r3, [pc, #132]	@ (800205c <MX_TIM3_Init+0xa4>)
 8001fd8:	4a21      	ldr	r2, [pc, #132]	@ (8002060 <MX_TIM3_Init+0xa8>)
 8001fda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <MX_TIM3_Init+0xa4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <MX_TIM3_Init+0xa4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 57343;
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <MX_TIM3_Init+0xa4>)
 8001fea:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 8001fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <MX_TIM3_Init+0xa4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff6:	4b19      	ldr	r3, [pc, #100]	@ (800205c <MX_TIM3_Init+0xa4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002004:	2301      	movs	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002014:	2301      	movs	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	4619      	mov	r1, r3
 8002026:	480d      	ldr	r0, [pc, #52]	@ (800205c <MX_TIM3_Init+0xa4>)
 8002028:	f006 fa46 	bl	80084b8 <HAL_TIM_Encoder_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002032:	f001 ffa7 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800203e:	463b      	mov	r3, r7
 8002040:	4619      	mov	r1, r3
 8002042:	4806      	ldr	r0, [pc, #24]	@ (800205c <MX_TIM3_Init+0xa4>)
 8002044:	f007 fdee 	bl	8009c24 <HAL_TIMEx_MasterConfigSynchronization>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800204e:	f001 ff99 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	3730      	adds	r7, #48	@ 0x30
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200004ac 	.word	0x200004ac
 8002060:	40000400 	.word	0x40000400

08002064 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08e      	sub	sp, #56	@ 0x38
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002084:	463b      	mov	r3, r7
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	615a      	str	r2, [r3, #20]
 8002094:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002096:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <MX_TIM4_Init+0xe8>)
 8002098:	4a2d      	ldr	r2, [pc, #180]	@ (8002150 <MX_TIM4_Init+0xec>)
 800209a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800209c:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <MX_TIM4_Init+0xe8>)
 800209e:	2201      	movs	r2, #1
 80020a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a2:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <MX_TIM4_Init+0xe8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42499;
 80020a8:	4b28      	ldr	r3, [pc, #160]	@ (800214c <MX_TIM4_Init+0xe8>)
 80020aa:	f24a 6203 	movw	r2, #42499	@ 0xa603
 80020ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b0:	4b26      	ldr	r3, [pc, #152]	@ (800214c <MX_TIM4_Init+0xe8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b25      	ldr	r3, [pc, #148]	@ (800214c <MX_TIM4_Init+0xe8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020bc:	4823      	ldr	r0, [pc, #140]	@ (800214c <MX_TIM4_Init+0xe8>)
 80020be:	f005 fe39 	bl	8007d34 <HAL_TIM_Base_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80020c8:	f001 ff5c 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d6:	4619      	mov	r1, r3
 80020d8:	481c      	ldr	r0, [pc, #112]	@ (800214c <MX_TIM4_Init+0xe8>)
 80020da:	f006 fdbd 	bl	8008c58 <HAL_TIM_ConfigClockSource>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80020e4:	f001 ff4e 	bl	8003f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020e8:	4818      	ldr	r0, [pc, #96]	@ (800214c <MX_TIM4_Init+0xe8>)
 80020ea:	f005 ff6f 	bl	8007fcc <HAL_TIM_PWM_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80020f4:	f001 ff46 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	4619      	mov	r1, r3
 8002106:	4811      	ldr	r0, [pc, #68]	@ (800214c <MX_TIM4_Init+0xe8>)
 8002108:	f007 fd8c 	bl	8009c24 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002112:	f001 ff37 	bl	8003f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002116:	2360      	movs	r3, #96	@ 0x60
 8002118:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002126:	463b      	mov	r3, r7
 8002128:	2200      	movs	r2, #0
 800212a:	4619      	mov	r1, r3
 800212c:	4807      	ldr	r0, [pc, #28]	@ (800214c <MX_TIM4_Init+0xe8>)
 800212e:	f006 fc7f 	bl	8008a30 <HAL_TIM_PWM_ConfigChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002138:	f001 ff24 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800213c:	4803      	ldr	r0, [pc, #12]	@ (800214c <MX_TIM4_Init+0xe8>)
 800213e:	f002 f8cf 	bl	80042e0 <HAL_TIM_MspPostInit>

}
 8002142:	bf00      	nop
 8002144:	3738      	adds	r7, #56	@ 0x38
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000578 	.word	0x20000578
 8002150:	40000800 	.word	0x40000800

08002154 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002172:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <MX_TIM5_Init+0x94>)
 8002174:	4a1d      	ldr	r2, [pc, #116]	@ (80021ec <MX_TIM5_Init+0x98>)
 8002176:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <MX_TIM5_Init+0x94>)
 800217a:	22a9      	movs	r2, #169	@ 0xa9
 800217c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <MX_TIM5_Init+0x94>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002184:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <MX_TIM5_Init+0x94>)
 8002186:	f04f 32ff 	mov.w	r2, #4294967295
 800218a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218c:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <MX_TIM5_Init+0x94>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <MX_TIM5_Init+0x94>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002198:	4813      	ldr	r0, [pc, #76]	@ (80021e8 <MX_TIM5_Init+0x94>)
 800219a:	f005 fdcb 	bl	8007d34 <HAL_TIM_Base_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80021a4:	f001 feee 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4619      	mov	r1, r3
 80021b4:	480c      	ldr	r0, [pc, #48]	@ (80021e8 <MX_TIM5_Init+0x94>)
 80021b6:	f006 fd4f 	bl	8008c58 <HAL_TIM_ConfigClockSource>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80021c0:	f001 fee0 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021c4:	2320      	movs	r3, #32
 80021c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	@ (80021e8 <MX_TIM5_Init+0x94>)
 80021d2:	f007 fd27 	bl	8009c24 <HAL_TIMEx_MasterConfigSynchronization>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80021dc:	f001 fed2 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000644 	.word	0x20000644
 80021ec:	40000c00 	.word	0x40000c00

080021f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002200:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <MX_TIM6_Init+0x68>)
 8002202:	4a16      	ldr	r2, [pc, #88]	@ (800225c <MX_TIM6_Init+0x6c>)
 8002204:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <MX_TIM6_Init+0x68>)
 8002208:	f244 2267 	movw	r2, #16999	@ 0x4267
 800220c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220e:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <MX_TIM6_Init+0x68>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8002214:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <MX_TIM6_Init+0x68>)
 8002216:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800221a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <MX_TIM6_Init+0x68>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002222:	480d      	ldr	r0, [pc, #52]	@ (8002258 <MX_TIM6_Init+0x68>)
 8002224:	f005 fd86 	bl	8007d34 <HAL_TIM_Base_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800222e:	f001 fea9 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4806      	ldr	r0, [pc, #24]	@ (8002258 <MX_TIM6_Init+0x68>)
 8002240:	f007 fcf0 	bl	8009c24 <HAL_TIMEx_MasterConfigSynchronization>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800224a:	f001 fe9b 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000710 	.word	0x20000710
 800225c:	40001000 	.word	0x40001000

08002260 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800227e:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <MX_TIM8_Init+0xa0>)
 8002280:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <MX_TIM8_Init+0xa4>)
 8002282:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8002284:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <MX_TIM8_Init+0xa0>)
 8002286:	22a9      	movs	r2, #169	@ 0xa9
 8002288:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <MX_TIM8_Init+0xa0>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <MX_TIM8_Init+0xa0>)
 8002292:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002296:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <MX_TIM8_Init+0xa0>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <MX_TIM8_Init+0xa0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a4:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <MX_TIM8_Init+0xa0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022aa:	4815      	ldr	r0, [pc, #84]	@ (8002300 <MX_TIM8_Init+0xa0>)
 80022ac:	f005 fd42 	bl	8007d34 <HAL_TIM_Base_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80022b6:	f001 fe65 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	4619      	mov	r1, r3
 80022c6:	480e      	ldr	r0, [pc, #56]	@ (8002300 <MX_TIM8_Init+0xa0>)
 80022c8:	f006 fcc6 	bl	8008c58 <HAL_TIM_ConfigClockSource>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80022d2:	f001 fe57 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	@ (8002300 <MX_TIM8_Init+0xa0>)
 80022e8:	f007 fc9c 	bl	8009c24 <HAL_TIMEx_MasterConfigSynchronization>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80022f2:	f001 fe47 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200007dc 	.word	0x200007dc
 8002304:	40013400 	.word	0x40013400

08002308 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <MX_TIM16_Init+0x58>)
 800230e:	4a15      	ldr	r2, [pc, #84]	@ (8002364 <MX_TIM16_Init+0x5c>)
 8002310:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002312:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <MX_TIM16_Init+0x58>)
 8002314:	22a9      	movs	r2, #169	@ 0xa9
 8002316:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <MX_TIM16_Init+0x58>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <MX_TIM16_Init+0x58>)
 8002320:	f240 4279 	movw	r2, #1145	@ 0x479
 8002324:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <MX_TIM16_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800232c:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <MX_TIM16_Init+0x58>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <MX_TIM16_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002338:	4809      	ldr	r0, [pc, #36]	@ (8002360 <MX_TIM16_Init+0x58>)
 800233a:	f005 fcfb 	bl	8007d34 <HAL_TIM_Base_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002344:	f001 fe1e 	bl	8003f84 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002348:	2108      	movs	r1, #8
 800234a:	4805      	ldr	r0, [pc, #20]	@ (8002360 <MX_TIM16_Init+0x58>)
 800234c:	f005 ffbe 	bl	80082cc <HAL_TIM_OnePulse_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002356:	f001 fe15 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200008a8 	.word	0x200008a8
 8002364:	40014400 	.word	0x40014400

08002368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800236c:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 800236e:	4a24      	ldr	r2, [pc, #144]	@ (8002400 <MX_USART2_UART_Init+0x98>)
 8002370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002372:	4b22      	ldr	r3, [pc, #136]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 8002374:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800237a:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 800237c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002380:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002382:	4b1e      	ldr	r3, [pc, #120]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002388:	4b1c      	ldr	r3, [pc, #112]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 800238a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800238e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002390:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 8002392:	220c      	movs	r2, #12
 8002394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002396:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800239c:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023a8:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ae:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023b4:	4811      	ldr	r0, [pc, #68]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 80023b6:	f007 fd1b 	bl	8009df0 <HAL_UART_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80023c0:	f001 fde0 	bl	8003f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c4:	2100      	movs	r1, #0
 80023c6:	480d      	ldr	r0, [pc, #52]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 80023c8:	f009 fb3b 	bl	800ba42 <HAL_UARTEx_SetTxFifoThreshold>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80023d2:	f001 fdd7 	bl	8003f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d6:	2100      	movs	r1, #0
 80023d8:	4808      	ldr	r0, [pc, #32]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 80023da:	f009 fb70 	bl	800babe <HAL_UARTEx_SetRxFifoThreshold>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80023e4:	f001 fdce 	bl	8003f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80023e8:	4804      	ldr	r0, [pc, #16]	@ (80023fc <MX_USART2_UART_Init+0x94>)
 80023ea:	f009 faf1 	bl	800b9d0 <HAL_UARTEx_DisableFifoMode>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80023f4:	f001 fdc6 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000974 	.word	0x20000974
 8002400:	40004400 	.word	0x40004400

08002404 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800240a:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <MX_DMA_Init+0x70>)
 800240c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240e:	4a19      	ldr	r2, [pc, #100]	@ (8002474 <MX_DMA_Init+0x70>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6493      	str	r3, [r2, #72]	@ 0x48
 8002416:	4b17      	ldr	r3, [pc, #92]	@ (8002474 <MX_DMA_Init+0x70>)
 8002418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002422:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <MX_DMA_Init+0x70>)
 8002424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002426:	4a13      	ldr	r2, [pc, #76]	@ (8002474 <MX_DMA_Init+0x70>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6493      	str	r3, [r2, #72]	@ 0x48
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <MX_DMA_Init+0x70>)
 8002430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	200b      	movs	r0, #11
 8002440:	f003 fefd 	bl	800623e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002444:	200b      	movs	r0, #11
 8002446:	f003 ff14 	bl	8006272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	200c      	movs	r0, #12
 8002450:	f003 fef5 	bl	800623e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002454:	200c      	movs	r0, #12
 8002456:	f003 ff0c 	bl	8006272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	200d      	movs	r0, #13
 8002460:	f003 feed 	bl	800623e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002464:	200d      	movs	r0, #13
 8002466:	f003 ff04 	bl	8006272 <HAL_NVIC_EnableIRQ>

}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000

08002478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800248e:	4b6b      	ldr	r3, [pc, #428]	@ (800263c <MX_GPIO_Init+0x1c4>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	4a6a      	ldr	r2, [pc, #424]	@ (800263c <MX_GPIO_Init+0x1c4>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800249a:	4b68      	ldr	r3, [pc, #416]	@ (800263c <MX_GPIO_Init+0x1c4>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024a6:	4b65      	ldr	r3, [pc, #404]	@ (800263c <MX_GPIO_Init+0x1c4>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	4a64      	ldr	r2, [pc, #400]	@ (800263c <MX_GPIO_Init+0x1c4>)
 80024ac:	f043 0320 	orr.w	r3, r3, #32
 80024b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b2:	4b62      	ldr	r3, [pc, #392]	@ (800263c <MX_GPIO_Init+0x1c4>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	4b5f      	ldr	r3, [pc, #380]	@ (800263c <MX_GPIO_Init+0x1c4>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	4a5e      	ldr	r2, [pc, #376]	@ (800263c <MX_GPIO_Init+0x1c4>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ca:	4b5c      	ldr	r3, [pc, #368]	@ (800263c <MX_GPIO_Init+0x1c4>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	4b59      	ldr	r3, [pc, #356]	@ (800263c <MX_GPIO_Init+0x1c4>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	4a58      	ldr	r2, [pc, #352]	@ (800263c <MX_GPIO_Init+0x1c4>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e2:	4b56      	ldr	r3, [pc, #344]	@ (800263c <MX_GPIO_Init+0x1c4>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LAMP1_Pin|LAMP2_Pin|PUSH_Pin|Vacuum_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80024f4:	4852      	ldr	r0, [pc, #328]	@ (8002640 <MX_GPIO_Init+0x1c8>)
 80024f6:	f004 fba3 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin, GPIO_PIN_RESET);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2123      	movs	r1, #35	@ 0x23
 80024fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002502:	f004 fb9d 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULL_GPIO_Port, PULL_Pin, GPIO_PIN_SET);
 8002506:	2201      	movs	r2, #1
 8002508:	2120      	movs	r1, #32
 800250a:	484d      	ldr	r0, [pc, #308]	@ (8002640 <MX_GPIO_Init+0x1c8>)
 800250c:	f004 fb98 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002516:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800251a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	4846      	ldr	r0, [pc, #280]	@ (8002640 <MX_GPIO_Init+0x1c8>)
 8002528:	f004 f9f0 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWJoy_Pin LeadSW1_Pin Floor4_Pin */
  GPIO_InitStruct.Pin = SWJoy_Pin|LeadSW1_Pin|Floor4_Pin;
 800252c:	2383      	movs	r3, #131	@ 0x83
 800252e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002534:	2301      	movs	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4840      	ldr	r0, [pc, #256]	@ (8002640 <MX_GPIO_Init+0x1c8>)
 8002540:	f004 f9e4 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : LAMP1_Pin LAMP2_Pin PULL_Pin PUSH_Pin
                           Vacuum_Pin */
  GPIO_InitStruct.Pin = LAMP1_Pin|LAMP2_Pin|PULL_Pin|PUSH_Pin
 8002544:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002548:	617b      	str	r3, [r7, #20]
                          |Vacuum_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4619      	mov	r1, r3
 800255c:	4838      	ldr	r0, [pc, #224]	@ (8002640 <MX_GPIO_Init+0x1c8>)
 800255e:	f004 f9d5 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : DirectionMotor_Pin AnotherDMotor_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin;
 8002562:	2323      	movs	r3, #35	@ 0x23
 8002564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002566:	2301      	movs	r3, #1
 8002568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800257c:	f004 f9c6 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : ResetSw_Pin */
  GPIO_InitStruct.Pin = ResetSw_Pin;
 8002580:	2310      	movs	r3, #16
 8002582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ResetSw_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002596:	f004 f9b9 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : LeadSW2_Pin Floor1_Pin Floor5_Pin */
  GPIO_InitStruct.Pin = LeadSW2_Pin|Floor1_Pin|Floor5_Pin;
 800259a:	f240 4341 	movw	r3, #1089	@ 0x441
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a4:	2301      	movs	r3, #1
 80025a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	4825      	ldr	r0, [pc, #148]	@ (8002644 <MX_GPIO_Init+0x1cc>)
 80025b0:	f004 f9ac 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : EmergencySw_Pin */
  GPIO_InitStruct.Pin = EmergencySw_Pin;
 80025b4:	2304      	movs	r3, #4
 80025b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EmergencySw_GPIO_Port, &GPIO_InitStruct);
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	4619      	mov	r1, r3
 80025c6:	481f      	ldr	r0, [pc, #124]	@ (8002644 <MX_GPIO_Init+0x1cc>)
 80025c8:	f004 f9a0 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : Floor2_Pin Floor3_Pin HomeButton_Pin */
  GPIO_InitStruct.Pin = Floor2_Pin|Floor3_Pin|HomeButton_Pin;
 80025cc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e4:	f004 f992 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : Lowerprox_Pin UpperProx_Pin */
  GPIO_InitStruct.Pin = Lowerprox_Pin|UpperProx_Pin;
 80025e8:	2330      	movs	r3, #48	@ 0x30
 80025ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4811      	ldr	r0, [pc, #68]	@ (8002644 <MX_GPIO_Init+0x1cc>)
 80025fe:	f004 f985 	bl	800690c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	200a      	movs	r0, #10
 8002608:	f003 fe19 	bl	800623e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800260c:	200a      	movs	r0, #10
 800260e:	f003 fe30 	bl	8006272 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	2017      	movs	r0, #23
 8002618:	f003 fe11 	bl	800623e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800261c:	2017      	movs	r0, #23
 800261e:	f003 fe28 	bl	8006272 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	2028      	movs	r0, #40	@ 0x28
 8002628:	f003 fe09 	bl	800623e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800262c:	2028      	movs	r0, #40	@ 0x28
 800262e:	f003 fe20 	bl	8006272 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	@ 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	48000800 	.word	0x48000800
 8002644:	48000400 	.word	0x48000400

08002648 <Joy_Averaged>:

/* USER CODE BEGIN 4 */
void Joy_Averaged()
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	e017      	b.n	8002684 <Joy_Averaged+0x3c>
	{
		joySum[0] += joyAnalogRead[2*i];
 8002654:	4b21      	ldr	r3, [pc, #132]	@ (80026dc <Joy_Averaged+0x94>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	0052      	lsls	r2, r2, #1
 800265c:	4920      	ldr	r1, [pc, #128]	@ (80026e0 <Joy_Averaged+0x98>)
 800265e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002662:	4413      	add	r3, r2
 8002664:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <Joy_Averaged+0x94>)
 8002666:	6013      	str	r3, [r2, #0]
		joySum[1] += joyAnalogRead[1+(2*i)];
 8002668:	4b1c      	ldr	r3, [pc, #112]	@ (80026dc <Joy_Averaged+0x94>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	0052      	lsls	r2, r2, #1
 8002670:	3201      	adds	r2, #1
 8002672:	491b      	ldr	r1, [pc, #108]	@ (80026e0 <Joy_Averaged+0x98>)
 8002674:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002678:	4413      	add	r3, r2
 800267a:	4a18      	ldr	r2, [pc, #96]	@ (80026dc <Joy_Averaged+0x94>)
 800267c:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 20; i++)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3301      	adds	r3, #1
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b13      	cmp	r3, #19
 8002688:	dde4      	ble.n	8002654 <Joy_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	e014      	b.n	80026ba <Joy_Averaged+0x72>
	{
		joyAvg[i] = joySum[i] / 20;
 8002690:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <Joy_Averaged+0x94>)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <Joy_Averaged+0x9c>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	b299      	uxth	r1, r3
 80026a2:	4a11      	ldr	r2, [pc, #68]	@ (80026e8 <Joy_Averaged+0xa0>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		joySum[i] = 0;
 80026aa:	4a0c      	ldr	r2, [pc, #48]	@ (80026dc <Joy_Averaged+0x94>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2100      	movs	r1, #0
 80026b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	dde7      	ble.n	8002690 <Joy_Averaged+0x48>
	}

	joyX = joyAvg[0];
 80026c0:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <Joy_Averaged+0xa0>)
 80026c2:	881a      	ldrh	r2, [r3, #0]
 80026c4:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <Joy_Averaged+0xa4>)
 80026c6:	801a      	strh	r2, [r3, #0]
	joyY = joyAvg[1];
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <Joy_Averaged+0xa0>)
 80026ca:	885a      	ldrh	r2, [r3, #2]
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <Joy_Averaged+0xa8>)
 80026ce:	801a      	strh	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	200012ec 	.word	0x200012ec
 80026e0:	20001294 	.word	0x20001294
 80026e4:	cccccccd 	.word	0xcccccccd
 80026e8:	200012e8 	.word	0x200012e8
 80026ec:	200012f4 	.word	0x200012f4
 80026f0:	200012f6 	.word	0x200012f6

080026f4 <Joy_State>:
void Joy_State()
{
 80026f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80026fc:	2101      	movs	r1, #1
 80026fe:	48a9      	ldr	r0, [pc, #676]	@ (80029a4 <Joy_State+0x2b0>)
 8002700:	f004 fa86 	bl	8006c10 <HAL_GPIO_ReadPin>
 8002704:	4603      	mov	r3, r0
 8002706:	4aa8      	ldr	r2, [pc, #672]	@ (80029a8 <Joy_State+0x2b4>)
 8002708:	7013      	strb	r3, [r2, #0]
if(state == 0)
 800270a:	4ba8      	ldr	r3, [pc, #672]	@ (80029ac <Joy_State+0x2b8>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d152      	bne.n	80027b8 <Joy_State+0xc4>
{
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
	if (joyY > 4000)
 8002712:	4ba7      	ldr	r3, [pc, #668]	@ (80029b0 <Joy_State+0x2bc>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800271a:	d903      	bls.n	8002724 <Joy_State+0x30>
	{
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 800271c:	4ba5      	ldr	r3, [pc, #660]	@ (80029b4 <Joy_State+0x2c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2200      	movs	r2, #0
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 8002724:	f002 f80a 	bl	800473c <HAL_GetTick>
 8002728:	4603      	mov	r3, r0
 800272a:	2200      	movs	r2, #0
 800272c:	469a      	mov	sl, r3
 800272e:	4693      	mov	fp, r2
 8002730:	4ba1      	ldr	r3, [pc, #644]	@ (80029b8 <Joy_State+0x2c4>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	4552      	cmp	r2, sl
 8002738:	eb73 030b 	sbcs.w	r3, r3, fp
 800273c:	f080 80fc 	bcs.w	8002938 <Joy_State+0x244>
	{
		if(joyX > 4000)
 8002740:	4b9e      	ldr	r3, [pc, #632]	@ (80029bc <Joy_State+0x2c8>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002748:	d909      	bls.n	800275e <Joy_State+0x6a>
		{
			X_Actual_Position = X_Actual_Position-10;
 800274a:	4b9d      	ldr	r3, [pc, #628]	@ (80029c0 <Joy_State+0x2cc>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002754:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002758:	4b99      	ldr	r3, [pc, #612]	@ (80029c0 <Joy_State+0x2cc>)
 800275a:	edc3 7a00 	vstr	s15, [r3]
		}
		if(joyX < 2000)
 800275e:	4b97      	ldr	r3, [pc, #604]	@ (80029bc <Joy_State+0x2c8>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002766:	d209      	bcs.n	800277c <Joy_State+0x88>
		{
			X_Actual_Position = X_Actual_Position+10;
 8002768:	4b95      	ldr	r3, [pc, #596]	@ (80029c0 <Joy_State+0x2cc>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002772:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002776:	4b92      	ldr	r3, [pc, #584]	@ (80029c0 <Joy_State+0x2cc>)
 8002778:	edc3 7a00 	vstr	s15, [r3]
		}
		if(X_Actual_Position <= 0)X_Actual_Position=0;
 800277c:	4b90      	ldr	r3, [pc, #576]	@ (80029c0 <Joy_State+0x2cc>)
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278a:	d803      	bhi.n	8002794 <Joy_State+0xa0>
 800278c:	4b8c      	ldr	r3, [pc, #560]	@ (80029c0 <Joy_State+0x2cc>)
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 8002794:	f001 ffd2 	bl	800473c <HAL_GetTick>
 8002798:	4603      	mov	r3, r0
 800279a:	3364      	adds	r3, #100	@ 0x64
 800279c:	2200      	movs	r2, #0
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	617a      	str	r2, [r7, #20]
 80027a2:	4b85      	ldr	r3, [pc, #532]	@ (80029b8 <Joy_State+0x2c4>)
 80027a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80027a8:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80027ac:	2120      	movs	r1, #32
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b2:	f004 fa5d 	bl	8006c70 <HAL_GPIO_TogglePin>
 80027b6:	e0bf      	b.n	8002938 <Joy_State+0x244>
	}
}

else if(state == 1)
 80027b8:	4b7c      	ldr	r3, [pc, #496]	@ (80029ac <Joy_State+0x2b8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d16a      	bne.n	8002896 <Joy_State+0x1a2>
{
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 80027c0:	f001 ffbc 	bl	800473c <HAL_GetTick>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2200      	movs	r2, #0
 80027c8:	4698      	mov	r8, r3
 80027ca:	4691      	mov	r9, r2
 80027cc:	4b7d      	ldr	r3, [pc, #500]	@ (80029c4 <Joy_State+0x2d0>)
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d2:	4542      	cmp	r2, r8
 80027d4:	eb73 0309 	sbcs.w	r3, r3, r9
 80027d8:	d22b      	bcs.n	8002832 <Joy_State+0x13e>
	{
		if(joyX > 4000)
 80027da:	4b78      	ldr	r3, [pc, #480]	@ (80029bc <Joy_State+0x2c8>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80027e2:	d904      	bls.n	80027ee <Joy_State+0xfa>
		{
			A = A-250;
 80027e4:	4b78      	ldr	r3, [pc, #480]	@ (80029c8 <Joy_State+0x2d4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3bfa      	subs	r3, #250	@ 0xfa
 80027ea:	4a77      	ldr	r2, [pc, #476]	@ (80029c8 <Joy_State+0x2d4>)
 80027ec:	6013      	str	r3, [r2, #0]
		}
		if(joyX < 2000)
 80027ee:	4b73      	ldr	r3, [pc, #460]	@ (80029bc <Joy_State+0x2c8>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80027f6:	d204      	bcs.n	8002802 <Joy_State+0x10e>
		{
			A = A+250;
 80027f8:	4b73      	ldr	r3, [pc, #460]	@ (80029c8 <Joy_State+0x2d4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	33fa      	adds	r3, #250	@ 0xfa
 80027fe:	4a72      	ldr	r2, [pc, #456]	@ (80029c8 <Joy_State+0x2d4>)
 8002800:	6013      	str	r3, [r2, #0]
		}
		if(A <= 0)A=0;
 8002802:	4b71      	ldr	r3, [pc, #452]	@ (80029c8 <Joy_State+0x2d4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	dc02      	bgt.n	8002810 <Joy_State+0x11c>
 800280a:	4b6f      	ldr	r3, [pc, #444]	@ (80029c8 <Joy_State+0x2d4>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 8002810:	f001 ff94 	bl	800473c <HAL_GetTick>
 8002814:	4603      	mov	r3, r0
 8002816:	3364      	adds	r3, #100	@ 0x64
 8002818:	2200      	movs	r2, #0
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	60fa      	str	r2, [r7, #12]
 800281e:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <Joy_State+0x2d0>)
 8002820:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002824:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002828:	2120      	movs	r1, #32
 800282a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800282e:	f004 fa1f 	bl	8006c70 <HAL_GPIO_TogglePin>
	}
	if(joyY > 4000 || joyY < 2000)
 8002832:	4b5f      	ldr	r3, [pc, #380]	@ (80029b0 <Joy_State+0x2bc>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800283a:	d804      	bhi.n	8002846 <Joy_State+0x152>
 800283c:	4b5c      	ldr	r3, [pc, #368]	@ (80029b0 <Joy_State+0x2bc>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002844:	d21c      	bcs.n	8002880 <Joy_State+0x18c>
	{
		if (joyY > 4000)
 8002846:	4b5a      	ldr	r3, [pc, #360]	@ (80029b0 <Joy_State+0x2bc>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800284e:	d90b      	bls.n	8002868 <Joy_State+0x174>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8002850:	2201      	movs	r2, #1
 8002852:	2101      	movs	r1, #1
 8002854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002858:	f004 f9f2 	bl	8006c40 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 800285c:	4b5a      	ldr	r3, [pc, #360]	@ (80029c8 <Joy_State+0x2d4>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b5a      	ldr	r3, [pc, #360]	@ (80029cc <Joy_State+0x2d8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 4000)
 8002866:	e067      	b.n	8002938 <Joy_State+0x244>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002868:	2200      	movs	r2, #0
 800286a:	2101      	movs	r1, #1
 800286c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002870:	f004 f9e6 	bl	8006c40 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 8002874:	4b54      	ldr	r3, [pc, #336]	@ (80029c8 <Joy_State+0x2d4>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b54      	ldr	r3, [pc, #336]	@ (80029cc <Joy_State+0x2d8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 4000)
 800287e:	e05b      	b.n	8002938 <Joy_State+0x244>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2101      	movs	r1, #1
 8002884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002888:	f004 f9da 	bl	8006c40 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800288c:	4b4f      	ldr	r3, [pc, #316]	@ (80029cc <Joy_State+0x2d8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	635a      	str	r2, [r3, #52]	@ 0x34
 8002894:	e050      	b.n	8002938 <Joy_State+0x244>
	}
}

else if(state == 2)
 8002896:	4b45      	ldr	r3, [pc, #276]	@ (80029ac <Joy_State+0x2b8>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d142      	bne.n	8002924 <Joy_State+0x230>
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 800289e:	2201      	movs	r2, #1
 80028a0:	2120      	movs	r1, #32
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a6:	f004 f9cb 	bl	8006c40 <HAL_GPIO_WritePin>
	if(joyY > 3200 || joyY < 2000)
 80028aa:	4b41      	ldr	r3, [pc, #260]	@ (80029b0 <Joy_State+0x2bc>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80028b2:	d804      	bhi.n	80028be <Joy_State+0x1ca>
 80028b4:	4b3e      	ldr	r3, [pc, #248]	@ (80029b0 <Joy_State+0x2bc>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80028bc:	d224      	bcs.n	8002908 <Joy_State+0x214>
	{
		if (joyY > 3200)
 80028be:	4b3c      	ldr	r3, [pc, #240]	@ (80029b0 <Joy_State+0x2bc>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80028c6:	d90f      	bls.n	80028e8 <Joy_State+0x1f4>
		{
			A = 10625;
 80028c8:	4b3f      	ldr	r3, [pc, #252]	@ (80029c8 <Joy_State+0x2d4>)
 80028ca:	f642 1281 	movw	r2, #10625	@ 0x2981
 80028ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80028d0:	2201      	movs	r2, #1
 80028d2:	2101      	movs	r1, #1
 80028d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028d8:	f004 f9b2 	bl	8006c40 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 80028dc:	4b3b      	ldr	r3, [pc, #236]	@ (80029cc <Joy_State+0x2d8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f642 020a 	movw	r2, #10250	@ 0x280a
 80028e4:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3200)
 80028e6:	e027      	b.n	8002938 <Joy_State+0x244>
		}
		else
		{
			A = -10625;
 80028e8:	4b37      	ldr	r3, [pc, #220]	@ (80029c8 <Joy_State+0x2d4>)
 80028ea:	f46f 5226 	mvn.w	r2, #10624	@ 0x2980
 80028ee:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2101      	movs	r1, #1
 80028f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028f8:	f004 f9a2 	bl	8006c40 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 80028fc:	4b33      	ldr	r3, [pc, #204]	@ (80029cc <Joy_State+0x2d8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f642 020a 	movw	r2, #10250	@ 0x280a
 8002904:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3200)
 8002906:	e017      	b.n	8002938 <Joy_State+0x244>
		}
	}
	else
	{
		A = 0;
 8002908:	4b2f      	ldr	r3, [pc, #188]	@ (80029c8 <Joy_State+0x2d4>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2101      	movs	r1, #1
 8002912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002916:	f004 f993 	bl	8006c40 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 800291a:	4b2c      	ldr	r3, [pc, #176]	@ (80029cc <Joy_State+0x2d8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2200      	movs	r2, #0
 8002920:	635a      	str	r2, [r3, #52]	@ 0x34
 8002922:	e009      	b.n	8002938 <Joy_State+0x244>
	}
 }
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2101      	movs	r1, #1
 8002928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800292c:	f004 f988 	bl	8006c40 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 8002930:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <Joy_State+0x2d8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2200      	movs	r2, #0
 8002936:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	static uint64_t timestamp2 =0;
	if(timestamp2 < HAL_GetTick())
 8002938:	f001 ff00 	bl	800473c <HAL_GetTick>
 800293c:	4603      	mov	r3, r0
 800293e:	2200      	movs	r2, #0
 8002940:	461c      	mov	r4, r3
 8002942:	4615      	mov	r5, r2
 8002944:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <Joy_State+0x2dc>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	42a2      	cmp	r2, r4
 800294c:	41ab      	sbcs	r3, r5
 800294e:	d27c      	bcs.n	8002a4a <Joy_State+0x356>
	{
		if (joySW == 0)
 8002950:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <Joy_State+0x2b4>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d16c      	bne.n	8002a32 <Joy_State+0x33e>
		{
			switch (state)
 8002958:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <Joy_State+0x2b8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d868      	bhi.n	8002a32 <Joy_State+0x33e>
 8002960:	a201      	add	r2, pc, #4	@ (adr r2, 8002968 <Joy_State+0x274>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	08002979 	.word	0x08002979
 800296c:	0800299b 	.word	0x0800299b
 8002970:	080029ef 	.word	0x080029ef
 8002974:	08002a11 	.word	0x08002a11
			{
			case 0:
				state = 1;
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <Joy_State+0x2b8>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 800297e:	e007      	b.n	8002990 <Joy_State+0x29c>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002980:	2101      	movs	r1, #1
 8002982:	4808      	ldr	r0, [pc, #32]	@ (80029a4 <Joy_State+0x2b0>)
 8002984:	f004 f944 	bl	8006c10 <HAL_GPIO_ReadPin>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <Joy_State+0x2b4>)
 800298e:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <Joy_State+0x2b4>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f3      	beq.n	8002980 <Joy_State+0x28c>
				}
				break;
 8002998:	e04b      	b.n	8002a32 <Joy_State+0x33e>
			case 1:
				state = 2;
 800299a:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <Joy_State+0x2b8>)
 800299c:	2202      	movs	r2, #2
 800299e:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029a0:	e020      	b.n	80029e4 <Joy_State+0x2f0>
 80029a2:	bf00      	nop
 80029a4:	48000800 	.word	0x48000800
 80029a8:	200012e4 	.word	0x200012e4
 80029ac:	200012e5 	.word	0x200012e5
 80029b0:	200012f6 	.word	0x200012f6
 80029b4:	200004ac 	.word	0x200004ac
 80029b8:	20001370 	.word	0x20001370
 80029bc:	200012f4 	.word	0x200012f4
 80029c0:	20001168 	.word	0x20001168
 80029c4:	20001378 	.word	0x20001378
 80029c8:	20000200 	.word	0x20000200
 80029cc:	20000578 	.word	0x20000578
 80029d0:	20001380 	.word	0x20001380
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80029d4:	2101      	movs	r1, #1
 80029d6:	4820      	ldr	r0, [pc, #128]	@ (8002a58 <Joy_State+0x364>)
 80029d8:	f004 f91a 	bl	8006c10 <HAL_GPIO_ReadPin>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a5c <Joy_State+0x368>)
 80029e2:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029e4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <Joy_State+0x368>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f3      	beq.n	80029d4 <Joy_State+0x2e0>
				}
				break;
 80029ec:	e021      	b.n	8002a32 <Joy_State+0x33e>
			case 2:
				state = 3;
 80029ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <Joy_State+0x36c>)
 80029f0:	2203      	movs	r2, #3
 80029f2:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80029f4:	e007      	b.n	8002a06 <Joy_State+0x312>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80029f6:	2101      	movs	r1, #1
 80029f8:	4817      	ldr	r0, [pc, #92]	@ (8002a58 <Joy_State+0x364>)
 80029fa:	f004 f909 	bl	8006c10 <HAL_GPIO_ReadPin>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b16      	ldr	r3, [pc, #88]	@ (8002a5c <Joy_State+0x368>)
 8002a04:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <Joy_State+0x368>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f3      	beq.n	80029f6 <Joy_State+0x302>
				}
				break;
 8002a0e:	e010      	b.n	8002a32 <Joy_State+0x33e>
			case 3:
				state = 0;
 8002a10:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <Joy_State+0x36c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a16:	e007      	b.n	8002a28 <Joy_State+0x334>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002a18:	2101      	movs	r1, #1
 8002a1a:	480f      	ldr	r0, [pc, #60]	@ (8002a58 <Joy_State+0x364>)
 8002a1c:	f004 f8f8 	bl	8006c10 <HAL_GPIO_ReadPin>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <Joy_State+0x368>)
 8002a26:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002a28:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <Joy_State+0x368>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f3      	beq.n	8002a18 <Joy_State+0x324>
				}
				break;
 8002a30:	bf00      	nop
			}
		}
		timestamp2 = HAL_GetTick() + 100;
 8002a32:	f001 fe83 	bl	800473c <HAL_GetTick>
 8002a36:	4603      	mov	r3, r0
 8002a38:	3364      	adds	r3, #100	@ 0x64
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	4b08      	ldr	r3, [pc, #32]	@ (8002a64 <Joy_State+0x370>)
 8002a42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002a46:	e9c3 1200 	strd	r1, r2, [r3]
	}
	Joy_Averaged();
 8002a4a:	f7ff fdfd 	bl	8002648 <Joy_Averaged>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a58:	48000800 	.word	0x48000800
 8002a5c:	200012e4 	.word	0x200012e4
 8002a60:	200012e5 	.word	0x200012e5
 8002a64:	20001380 	.word	0x20001380

08002a68 <ButtonMem>:
void ButtonMem(){
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
	if(Mode == 1)
 8002a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8002be8 <ButtonMem+0x180>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f040 8081 	bne.w	8002b78 <ButtonMem+0x110>
		{
			if(ButtonTest[1] == 0)
 8002a76:	4b5d      	ldr	r3, [pc, #372]	@ (8002bec <ButtonMem+0x184>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d112      	bne.n	8002aa4 <ButtonMem+0x3c>
			{
				registerFrame[0x23].U16 = Pos*10;
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf0 <ButtonMem+0x188>)
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a90:	ee17 3a90 	vmov	r3, s15
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	4b57      	ldr	r3, [pc, #348]	@ (8002bf4 <ButtonMem+0x18c>)
 8002a98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				MemPos[0] = Pos;
 8002a9c:	4b54      	ldr	r3, [pc, #336]	@ (8002bf0 <ButtonMem+0x188>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a55      	ldr	r2, [pc, #340]	@ (8002bf8 <ButtonMem+0x190>)
 8002aa2:	6013      	str	r3, [r2, #0]
			}
			if(ButtonTest[2] == 0)
 8002aa4:	4b51      	ldr	r3, [pc, #324]	@ (8002bec <ButtonMem+0x184>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d112      	bne.n	8002ad2 <ButtonMem+0x6a>
			{
				registerFrame[0x24].U16 = Pos*10;
 8002aac:	4b50      	ldr	r3, [pc, #320]	@ (8002bf0 <ButtonMem+0x188>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002abe:	ee17 3a90 	vmov	r3, s15
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf4 <ButtonMem+0x18c>)
 8002ac6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
				MemPos[1] = Pos;
 8002aca:	4b49      	ldr	r3, [pc, #292]	@ (8002bf0 <ButtonMem+0x188>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf8 <ButtonMem+0x190>)
 8002ad0:	6053      	str	r3, [r2, #4]
			}
			if(ButtonTest[3] == 0)
 8002ad2:	4b46      	ldr	r3, [pc, #280]	@ (8002bec <ButtonMem+0x184>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d112      	bne.n	8002b00 <ButtonMem+0x98>
			{
				registerFrame[0x25].U16 = Pos*10;
 8002ada:	4b45      	ldr	r3, [pc, #276]	@ (8002bf0 <ButtonMem+0x188>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aec:	ee17 3a90 	vmov	r3, s15
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	4b40      	ldr	r3, [pc, #256]	@ (8002bf4 <ButtonMem+0x18c>)
 8002af4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
				MemPos[2] = Pos;
 8002af8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf0 <ButtonMem+0x188>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3e      	ldr	r2, [pc, #248]	@ (8002bf8 <ButtonMem+0x190>)
 8002afe:	6093      	str	r3, [r2, #8]
			}
			if(ButtonTest[4] == 0)
 8002b00:	4b3a      	ldr	r3, [pc, #232]	@ (8002bec <ButtonMem+0x184>)
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d112      	bne.n	8002b2e <ButtonMem+0xc6>
			{
				registerFrame[0x26].U16 = Pos*10;
 8002b08:	4b39      	ldr	r3, [pc, #228]	@ (8002bf0 <ButtonMem+0x188>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b1a:	ee17 3a90 	vmov	r3, s15
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	4b34      	ldr	r3, [pc, #208]	@ (8002bf4 <ButtonMem+0x18c>)
 8002b22:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
				MemPos[3] = Pos;
 8002b26:	4b32      	ldr	r3, [pc, #200]	@ (8002bf0 <ButtonMem+0x188>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a33      	ldr	r2, [pc, #204]	@ (8002bf8 <ButtonMem+0x190>)
 8002b2c:	60d3      	str	r3, [r2, #12]
			}
			if(ButtonTest[5] == 0)
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002bec <ButtonMem+0x184>)
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d112      	bne.n	8002b5c <ButtonMem+0xf4>
			{
				registerFrame[0x27].U16 = Pos*10;
 8002b36:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <ButtonMem+0x188>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b48:	ee17 3a90 	vmov	r3, s15
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	4b29      	ldr	r3, [pc, #164]	@ (8002bf4 <ButtonMem+0x18c>)
 8002b50:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
				MemPos[4] = Pos;
 8002b54:	4b26      	ldr	r3, [pc, #152]	@ (8002bf0 <ButtonMem+0x188>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a27      	ldr	r2, [pc, #156]	@ (8002bf8 <ButtonMem+0x190>)
 8002b5a:	6113      	str	r3, [r2, #16]
			}
			if(ButtonTest[0] == 0)//HOME Button
 8002b5c:	4b23      	ldr	r3, [pc, #140]	@ (8002bec <ButtonMem+0x184>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d13b      	bne.n	8002bdc <ButtonMem+0x174>
			{
				registerFrame[0x10].U16 = 0b0000;
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <ButtonMem+0x18c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	841a      	strh	r2, [r3, #32]
				Mode = 0;
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <ButtonMem+0x180>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
				state_ALL = 0;
 8002b70:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <ButtonMem+0x194>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
			{
				state_ALL = 0;
				Mode = 0;
			}
		}
}
 8002b76:	e031      	b.n	8002bdc <ButtonMem+0x174>
			if(ButtonTest[1] == 0)
 8002b78:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <ButtonMem+0x184>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d103      	bne.n	8002b88 <ButtonMem+0x120>
				MemPos[0] = Pos;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <ButtonMem+0x188>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf8 <ButtonMem+0x190>)
 8002b86:	6013      	str	r3, [r2, #0]
			if(ButtonTest[2] == 0)
 8002b88:	4b18      	ldr	r3, [pc, #96]	@ (8002bec <ButtonMem+0x184>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d103      	bne.n	8002b98 <ButtonMem+0x130>
				MemPos[1] = Pos;
 8002b90:	4b17      	ldr	r3, [pc, #92]	@ (8002bf0 <ButtonMem+0x188>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a18      	ldr	r2, [pc, #96]	@ (8002bf8 <ButtonMem+0x190>)
 8002b96:	6053      	str	r3, [r2, #4]
			if(ButtonTest[3] == 0)
 8002b98:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <ButtonMem+0x184>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <ButtonMem+0x140>
				MemPos[2] = Pos;
 8002ba0:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <ButtonMem+0x188>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a14      	ldr	r2, [pc, #80]	@ (8002bf8 <ButtonMem+0x190>)
 8002ba6:	6093      	str	r3, [r2, #8]
			if(ButtonTest[4] == 0)
 8002ba8:	4b10      	ldr	r3, [pc, #64]	@ (8002bec <ButtonMem+0x184>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <ButtonMem+0x150>
				MemPos[3] = Pos;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <ButtonMem+0x188>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a10      	ldr	r2, [pc, #64]	@ (8002bf8 <ButtonMem+0x190>)
 8002bb6:	60d3      	str	r3, [r2, #12]
			if(ButtonTest[5] == 0)
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <ButtonMem+0x184>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d103      	bne.n	8002bc8 <ButtonMem+0x160>
				MemPos[4] = Pos;
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <ButtonMem+0x188>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <ButtonMem+0x190>)
 8002bc6:	6113      	str	r3, [r2, #16]
			if(ButtonTest[0] == 0)//HOME Button
 8002bc8:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <ButtonMem+0x184>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <ButtonMem+0x174>
				state_ALL = 0;
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <ButtonMem+0x194>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
				Mode = 0;
 8002bd6:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <ButtonMem+0x180>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	2000116c 	.word	0x2000116c
 8002bec:	200011c4 	.word	0x200011c4
 8002bf0:	2000130c 	.word	0x2000130c
 8002bf4:	20000fd8 	.word	0x20000fd8
 8002bf8:	200011f8 	.word	0x200011f8
 8002bfc:	20000204 	.word	0x20000204

08002c00 <reset>:

void reset(){
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002c04:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <reset+0x88>)
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <reset+0x88>)
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002c14:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <reset+0x88>)
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <reset+0x88>)
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002c24:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <reset+0x88>)
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002c2c:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <reset+0x88>)
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002c34:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <reset+0x8c>)
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002c3c:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <reset+0x8c>)
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <reset+0x8c>)
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <reset+0x8c>)
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002c54:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <reset+0x8c>)
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <reset+0x8c>)
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
	Pos_Start = Pos;
 8002c64:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <reset+0x90>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <reset+0x94>)
 8002c6a:	6013      	str	r3, [r2, #0]
	Velo_Start = 0;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <reset+0x98>)
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
	t = 0;
 8002c74:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <reset+0x9c>)
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20001220 	.word	0x20001220
 8002c8c:	20001248 	.word	0x20001248
 8002c90:	2000130c 	.word	0x2000130c
 8002c94:	20001270 	.word	0x20001270
 8002c98:	2000127c 	.word	0x2000127c
 8002c9c:	2000128c 	.word	0x2000128c

08002ca0 <PIDreset>:
void PIDreset(){
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <PIDreset+0x70>)
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002cac:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <PIDreset+0x70>)
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <PIDreset+0x70>)
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <PIDreset+0x70>)
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002cc4:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <PIDreset+0x70>)
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002ccc:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <PIDreset+0x70>)
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <PIDreset+0x74>)
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <PIDreset+0x74>)
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <PIDreset+0x74>)
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 8002cec:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <PIDreset+0x74>)
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <PIDreset+0x74>)
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <PIDreset+0x74>)
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20001220 	.word	0x20001220
 8002d14:	20001248 	.word	0x20001248

08002d18 <QEIEncoderPos_Update>:
void QEIEncoderPos_Update()
{
 8002d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d1c:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e18 <QEIEncoderPos_Update+0x100>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b3d      	ldr	r3, [pc, #244]	@ (8002e1c <QEIEncoderPos_Update+0x104>)
 8002d28:	601a      	str	r2, [r3, #0]
	if(Count >= 0)
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <QEIEncoderPos_Update+0x108>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db29      	blt.n	8002d86 <QEIEncoderPos_Update+0x6e>
	{
		Pos = ((QEIReadRaw+(Count*57344))*25*3.14)/8192;
 8002d32:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <QEIEncoderPos_Update+0x108>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	035b      	lsls	r3, r3, #13
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b36      	ldr	r3, [pc, #216]	@ (8002e1c <QEIEncoderPos_Update+0x104>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	441a      	add	r2, r3
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009a      	lsls	r2, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fbb3 	bl	80004bc <__aeabi_i2d>
 8002d56:	a32e      	add	r3, pc, #184	@ (adr r3, 8002e10 <QEIEncoderPos_Update+0xf8>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fc18 	bl	8000590 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e24 <QEIEncoderPos_Update+0x10c>)
 8002d6e:	f7fd fd39 	bl	80007e4 <__aeabi_ddiv>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7fd fec3 	bl	8000b04 <__aeabi_d2f>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4a29      	ldr	r2, [pc, #164]	@ (8002e28 <QEIEncoderPos_Update+0x110>)
 8002d82:	6013      	str	r3, [r2, #0]
	}
	else
	{
		Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
	}
}
 8002d84:	e041      	b.n	8002e0a <QEIEncoderPos_Update+0xf2>
		Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
 8002d86:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <QEIEncoderPos_Update+0x104>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fb96 	bl	80004bc <__aeabi_i2d>
 8002d90:	4680      	mov	r8, r0
 8002d92:	4689      	mov	r9, r1
 8002d94:	4b22      	ldr	r3, [pc, #136]	@ (8002e20 <QEIEncoderPos_Update+0x108>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fb8f 	bl	80004bc <__aeabi_i2d>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4614      	mov	r4, r2
 8002da4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	4b1f      	ldr	r3, [pc, #124]	@ (8002e2c <QEIEncoderPos_Update+0x114>)
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd fbed 	bl	8000590 <__aeabi_dmul>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4640      	mov	r0, r8
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	f7fd fa2f 	bl	8000220 <__aeabi_dsub>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	4b18      	ldr	r3, [pc, #96]	@ (8002e30 <QEIEncoderPos_Update+0x118>)
 8002dd0:	f7fd fbde 	bl	8000590 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	a30c      	add	r3, pc, #48	@ (adr r3, 8002e10 <QEIEncoderPos_Update+0xf8>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	f7fd fbd5 	bl	8000590 <__aeabi_dmul>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <QEIEncoderPos_Update+0x10c>)
 8002df4:	f7fd fcf6 	bl	80007e4 <__aeabi_ddiv>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f7fd fe80 	bl	8000b04 <__aeabi_d2f>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4a08      	ldr	r2, [pc, #32]	@ (8002e28 <QEIEncoderPos_Update+0x110>)
 8002e08:	6013      	str	r3, [r2, #0]
}
 8002e0a:	bf00      	nop
 8002e0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e10:	51eb851f 	.word	0x51eb851f
 8002e14:	40091eb8 	.word	0x40091eb8
 8002e18:	200004ac 	.word	0x200004ac
 8002e1c:	20001318 	.word	0x20001318
 8002e20:	20001314 	.word	0x20001314
 8002e24:	40c00000 	.word	0x40c00000
 8002e28:	2000130c 	.word	0x2000130c
 8002e2c:	40ec0000 	.word	0x40ec0000
 8002e30:	40390000 	.word	0x40390000
 8002e34:	00000000 	.word	0x00000000

08002e38 <QEIEncoderVel_Update>:
void QEIEncoderVel_Update()
{
 8002e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 8002e40:	f001 f872 	bl	8003f28 <micros>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4995      	ldr	r1, [pc, #596]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002e4a:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8002e4e:	4b95      	ldr	r3, [pc, #596]	@ (80030a4 <QEIEncoderVel_Update+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	4a92      	ldr	r2, [pc, #584]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002e56:	6013      	str	r3, [r2, #0]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8002e58:	4b91      	ldr	r3, [pc, #580]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e68:	4b8d      	ldr	r3, [pc, #564]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002e6a:	edc3 7a06 	vstr	s15, [r3, #24]
//calculate dx
int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8002e6e:	4b8c      	ldr	r3, [pc, #560]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b8b      	ldr	r3, [pc, #556]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	607b      	str	r3, [r7, #4]
//Handle Warp around
if(diffPosition > 28672)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002e80:	dd08      	ble.n	8002e94 <QEIEncoderVel_Update+0x5c>
{
diffPosition -=57344;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f5a3 4360 	sub.w	r3, r3, #57344	@ 0xe000
 8002e88:	607b      	str	r3, [r7, #4]
Count-=1;
 8002e8a:	4b87      	ldr	r3, [pc, #540]	@ (80030a8 <QEIEncoderVel_Update+0x270>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	4a85      	ldr	r2, [pc, #532]	@ (80030a8 <QEIEncoderVel_Update+0x270>)
 8002e92:	6013      	str	r3, [r2, #0]
}
if(diffPosition < -28672)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f513 4fe0 	cmn.w	r3, #28672	@ 0x7000
 8002e9a:	da08      	bge.n	8002eae <QEIEncoderVel_Update+0x76>
{
diffPosition +=57344;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8002ea2:	607b      	str	r3, [r7, #4]
Count+=1;
 8002ea4:	4b80      	ldr	r3, [pc, #512]	@ (80030a8 <QEIEncoderVel_Update+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	4a7f      	ldr	r2, [pc, #508]	@ (80030a8 <QEIEncoderVel_Update+0x270>)
 8002eac:	6013      	str	r3, [r2, #0]
}

//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8002eae:	4b7c      	ldr	r3, [pc, #496]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002eb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002eb4:	4b7a      	ldr	r3, [pc, #488]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002eb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002eba:	ebb0 0802 	subs.w	r8, r0, r2
 8002ebe:	eb61 0903 	sbc.w	r9, r1, r3
 8002ec2:	4640      	mov	r0, r8
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	f7fd fb2d 	bl	8000524 <__aeabi_ul2d>
 8002eca:	a36b      	add	r3, pc, #428	@ (adr r3, 8003078 <QEIEncoderVel_Update+0x240>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd fb5e 	bl	8000590 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7fd fe12 	bl	8000b04 <__aeabi_d2f>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	603b      	str	r3, [r7, #0]
//calculate anglar velocity
QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eee:	ed97 7a00 	vldr	s14, [r7]
 8002ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002ef8:	edc3 7a07 	vstr	s15, [r3, #28]
speed = ((QEIdata.QEIAngularVelocity)/8192)*12.5*2*3.14;
 8002efc:	4b68      	ldr	r3, [pc, #416]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8002efe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f02:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80030ac <QEIEncoderVel_Update+0x274>
 8002f06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f0a:	ee16 0a90 	vmov	r0, s13
 8002f0e:	f7fd fae7 	bl	80004e0 <__aeabi_f2d>
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	4b66      	ldr	r3, [pc, #408]	@ (80030b0 <QEIEncoderVel_Update+0x278>)
 8002f18:	f7fd fb3a 	bl	8000590 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	f7fd f97c 	bl	8000224 <__adddf3>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	a352      	add	r3, pc, #328	@ (adr r3, 8003080 <QEIEncoderVel_Update+0x248>)
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f7fd fb29 	bl	8000590 <__aeabi_dmul>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	f7fd fddd 	bl	8000b04 <__aeabi_d2f>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4a59      	ldr	r2, [pc, #356]	@ (80030b4 <QEIEncoderVel_Update+0x27c>)
 8002f4e:	6013      	str	r3, [r2, #0]

speed_fill = (0.969*speed_fill_1)+(0.0155*speed)+(0.0155*speed_1);
 8002f50:	4b59      	ldr	r3, [pc, #356]	@ (80030b8 <QEIEncoderVel_Update+0x280>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd fac3 	bl	80004e0 <__aeabi_f2d>
 8002f5a:	a34b      	add	r3, pc, #300	@ (adr r3, 8003088 <QEIEncoderVel_Update+0x250>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd fb16 	bl	8000590 <__aeabi_dmul>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4690      	mov	r8, r2
 8002f6a:	4699      	mov	r9, r3
 8002f6c:	4b51      	ldr	r3, [pc, #324]	@ (80030b4 <QEIEncoderVel_Update+0x27c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fab5 	bl	80004e0 <__aeabi_f2d>
 8002f76:	a346      	add	r3, pc, #280	@ (adr r3, 8003090 <QEIEncoderVel_Update+0x258>)
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f7fd fb08 	bl	8000590 <__aeabi_dmul>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4640      	mov	r0, r8
 8002f86:	4649      	mov	r1, r9
 8002f88:	f7fd f94c 	bl	8000224 <__adddf3>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4690      	mov	r8, r2
 8002f92:	4699      	mov	r9, r3
 8002f94:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <QEIEncoderVel_Update+0x284>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd faa1 	bl	80004e0 <__aeabi_f2d>
 8002f9e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003090 <QEIEncoderVel_Update+0x258>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f7fd faf4 	bl	8000590 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4640      	mov	r0, r8
 8002fae:	4649      	mov	r1, r9
 8002fb0:	f7fd f938 	bl	8000224 <__adddf3>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f7fd fda2 	bl	8000b04 <__aeabi_d2f>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80030c0 <QEIEncoderVel_Update+0x288>)
 8002fc4:	6013      	str	r3, [r2, #0]
speed_1 = speed;
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80030b4 <QEIEncoderVel_Update+0x27c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a3c      	ldr	r2, [pc, #240]	@ (80030bc <QEIEncoderVel_Update+0x284>)
 8002fcc:	6013      	str	r3, [r2, #0]
speed_fill_1 = speed_fill;
 8002fce:	4b3c      	ldr	r3, [pc, #240]	@ (80030c0 <QEIEncoderVel_Update+0x288>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a39      	ldr	r2, [pc, #228]	@ (80030b8 <QEIEncoderVel_Update+0x280>)
 8002fd4:	6013      	str	r3, [r2, #0]
static uint64_t timestamp_Accelation =0;
if(timestamp_Accelation < HAL_GetTick())
 8002fd6:	f001 fbb1 	bl	800473c <HAL_GetTick>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2200      	movs	r2, #0
 8002fde:	461c      	mov	r4, r3
 8002fe0:	4615      	mov	r5, r2
 8002fe2:	4b38      	ldr	r3, [pc, #224]	@ (80030c4 <QEIEncoderVel_Update+0x28c>)
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	42a2      	cmp	r2, r4
 8002fea:	41ab      	sbcs	r3, r5
 8002fec:	d225      	bcs.n	800303a <QEIEncoderVel_Update+0x202>
{
Accelation = fabs(speed_fill-speed_fill_1)/0.01;
 8002fee:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <QEIEncoderVel_Update+0x288>)
 8002ff0:	ed93 7a00 	vldr	s14, [r3]
 8002ff4:	4b30      	ldr	r3, [pc, #192]	@ (80030b8 <QEIEncoderVel_Update+0x280>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffe:	eef0 7ae7 	vabs.f32	s15, s15
 8003002:	ee17 0a90 	vmov	r0, s15
 8003006:	f7fd fa6b 	bl	80004e0 <__aeabi_f2d>
 800300a:	a323      	add	r3, pc, #140	@ (adr r3, 8003098 <QEIEncoderVel_Update+0x260>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f7fd fbe8 	bl	80007e4 <__aeabi_ddiv>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f7fd fd72 	bl	8000b04 <__aeabi_d2f>
 8003020:	4603      	mov	r3, r0
 8003022:	4a29      	ldr	r2, [pc, #164]	@ (80030c8 <QEIEncoderVel_Update+0x290>)
 8003024:	6013      	str	r3, [r2, #0]
timestamp_Accelation = HAL_GetTick()+10;
 8003026:	f001 fb89 	bl	800473c <HAL_GetTick>
 800302a:	4603      	mov	r3, r0
 800302c:	330a      	adds	r3, #10
 800302e:	2200      	movs	r2, #0
 8003030:	469a      	mov	sl, r3
 8003032:	4693      	mov	fp, r2
 8003034:	4b23      	ldr	r3, [pc, #140]	@ (80030c4 <QEIEncoderVel_Update+0x28c>)
 8003036:	e9c3 ab00 	strd	sl, fp, [r3]





if(speed_fill>MAXspeed)
 800303a:	4b21      	ldr	r3, [pc, #132]	@ (80030c0 <QEIEncoderVel_Update+0x288>)
 800303c:	ed93 7a00 	vldr	s14, [r3]
 8003040:	4b22      	ldr	r3, [pc, #136]	@ (80030cc <QEIEncoderVel_Update+0x294>)
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	dd03      	ble.n	8003058 <QEIEncoderVel_Update+0x220>
{
	MAXspeed = speed_fill;
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <QEIEncoderVel_Update+0x288>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1d      	ldr	r2, [pc, #116]	@ (80030cc <QEIEncoderVel_Update+0x294>)
 8003056:	6013      	str	r3, [r2, #0]
}
//store value for next loop
QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a10      	ldr	r2, [pc, #64]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 800305e:	6053      	str	r3, [r2, #4]
QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8003060:	4b0f      	ldr	r3, [pc, #60]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8003062:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003066:	490e      	ldr	r1, [pc, #56]	@ (80030a0 <QEIEncoderVel_Update+0x268>)
 8003068:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	a0b5ed8d 	.word	0xa0b5ed8d
 800307c:	3eb0c6f7 	.word	0x3eb0c6f7
 8003080:	51eb851f 	.word	0x51eb851f
 8003084:	40091eb8 	.word	0x40091eb8
 8003088:	49ba5e35 	.word	0x49ba5e35
 800308c:	3fef020c 	.word	0x3fef020c
 8003090:	c8b43958 	.word	0xc8b43958
 8003094:	3f8fbe76 	.word	0x3f8fbe76
 8003098:	47ae147b 	.word	0x47ae147b
 800309c:	3f847ae1 	.word	0x3f847ae1
 80030a0:	20001320 	.word	0x20001320
 80030a4:	200004ac 	.word	0x200004ac
 80030a8:	20001314 	.word	0x20001314
 80030ac:	46000000 	.word	0x46000000
 80030b0:	40290000 	.word	0x40290000
 80030b4:	200012f8 	.word	0x200012f8
 80030b8:	20001308 	.word	0x20001308
 80030bc:	200012fc 	.word	0x200012fc
 80030c0:	20001304 	.word	0x20001304
 80030c4:	20001388 	.word	0x20001388
 80030c8:	20001310 	.word	0x20001310
 80030cc:	20001300 	.word	0x20001300

080030d0 <Trajectory>:

void Trajectory()
{
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
	static uint64_t timestamp_Traject =0;
		int64_t currentTime = micros();
 80030d8:	f000 ff26 	bl	8003f28 <micros>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	e9c7 2300 	strd	r2, r3, [r7]
		  if(timestamp_Traject < currentTime)
 80030e4:	4b99      	ldr	r3, [pc, #612]	@ (800334c <Trajectory+0x27c>)
 80030e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ee:	4290      	cmp	r0, r2
 80030f0:	eb71 0303 	sbcs.w	r3, r1, r3
 80030f4:	f080 8219 	bcs.w	800352a <Trajectory+0x45a>
		  {
			  switch(state_Tra)
 80030f8:	4b95      	ldr	r3, [pc, #596]	@ (8003350 <Trajectory+0x280>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	f200 81f6 	bhi.w	80034ee <Trajectory+0x41e>
 8003102:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <Trajectory+0x38>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003119 	.word	0x08003119
 800310c:	080032bd 	.word	0x080032bd
 8003110:	08003381 	.word	0x08003381
 8003114:	08003497 	.word	0x08003497
			  	  		  {
			  	  		  case 0:
			  	  			  if(Pos_Start > Pos_Target)
 8003118:	4b8e      	ldr	r3, [pc, #568]	@ (8003354 <Trajectory+0x284>)
 800311a:	ed93 7a00 	vldr	s14, [r3]
 800311e:	4b8e      	ldr	r3, [pc, #568]	@ (8003358 <Trajectory+0x288>)
 8003120:	edd3 7a00 	vldr	s15, [r3]
 8003124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312c:	dd04      	ble.n	8003138 <Trajectory+0x68>
			  	  			  {
			  	  				  direction = -1;
 800312e:	4b8b      	ldr	r3, [pc, #556]	@ (800335c <Trajectory+0x28c>)
 8003130:	f04f 32ff 	mov.w	r2, #4294967295
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e002      	b.n	800313e <Trajectory+0x6e>
			  	  			  }
			  	  			  else
			  	  			  {
			  	  				  direction = 1;
 8003138:	4b88      	ldr	r3, [pc, #544]	@ (800335c <Trajectory+0x28c>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]
			  	  			  }
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)+((direction*0.5*Max_Acc)*(t*t));
 800313e:	4b88      	ldr	r3, [pc, #544]	@ (8003360 <Trajectory+0x290>)
 8003140:	ed93 7a00 	vldr	s14, [r3]
 8003144:	4b87      	ldr	r3, [pc, #540]	@ (8003364 <Trajectory+0x294>)
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800314e:	4b81      	ldr	r3, [pc, #516]	@ (8003354 <Trajectory+0x284>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003158:	ee17 0a90 	vmov	r0, s15
 800315c:	f7fd f9c0 	bl	80004e0 <__aeabi_f2d>
 8003160:	4680      	mov	r8, r0
 8003162:	4689      	mov	r9, r1
 8003164:	4b7d      	ldr	r3, [pc, #500]	@ (800335c <Trajectory+0x28c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f9a7 	bl	80004bc <__aeabi_i2d>
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	4b7d      	ldr	r3, [pc, #500]	@ (8003368 <Trajectory+0x298>)
 8003174:	f7fd fa0c 	bl	8000590 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4692      	mov	sl, r2
 800317e:	469b      	mov	fp, r3
 8003180:	4b7a      	ldr	r3, [pc, #488]	@ (800336c <Trajectory+0x29c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f9ab 	bl	80004e0 <__aeabi_f2d>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4650      	mov	r0, sl
 8003190:	4659      	mov	r1, fp
 8003192:	f7fd f9fd 	bl	8000590 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4692      	mov	sl, r2
 800319c:	469b      	mov	fp, r3
 800319e:	4b71      	ldr	r3, [pc, #452]	@ (8003364 <Trajectory+0x294>)
 80031a0:	ed93 7a00 	vldr	s14, [r3]
 80031a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003364 <Trajectory+0x294>)
 80031a6:	edd3 7a00 	vldr	s15, [r3]
 80031aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ae:	ee17 0a90 	vmov	r0, s15
 80031b2:	f7fd f995 	bl	80004e0 <__aeabi_f2d>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4650      	mov	r0, sl
 80031bc:	4659      	mov	r1, fp
 80031be:	f7fd f9e7 	bl	8000590 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4640      	mov	r0, r8
 80031c8:	4649      	mov	r1, r9
 80031ca:	f7fd f82b 	bl	8000224 <__adddf3>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f7fd fc95 	bl	8000b04 <__aeabi_d2f>
 80031da:	4603      	mov	r3, r0
 80031dc:	4a64      	ldr	r2, [pc, #400]	@ (8003370 <Trajectory+0x2a0>)
 80031de:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start + direction*Max_Acc*t;
 80031e0:	4b5e      	ldr	r3, [pc, #376]	@ (800335c <Trajectory+0x28c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	ee07 3a90 	vmov	s15, r3
 80031e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ec:	4b5f      	ldr	r3, [pc, #380]	@ (800336c <Trajectory+0x29c>)
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003364 <Trajectory+0x294>)
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003200:	4b57      	ldr	r3, [pc, #348]	@ (8003360 <Trajectory+0x290>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320a:	4b5a      	ldr	r3, [pc, #360]	@ (8003374 <Trajectory+0x2a4>)
 800320c:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = Max_Acc*direction;
 8003210:	4b52      	ldr	r3, [pc, #328]	@ (800335c <Trajectory+0x28c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800321c:	4b53      	ldr	r3, [pc, #332]	@ (800336c <Trajectory+0x29c>)
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003226:	4b54      	ldr	r3, [pc, #336]	@ (8003378 <Trajectory+0x2a8>)
 8003228:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) >= Max_Velo)
 800322c:	4b51      	ldr	r3, [pc, #324]	@ (8003374 <Trajectory+0x2a4>)
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	eeb0 7ae7 	vabs.f32	s14, s15
 8003236:	4b51      	ldr	r3, [pc, #324]	@ (800337c <Trajectory+0x2ac>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	db0e      	blt.n	8003264 <Trajectory+0x194>
			  	  				{
			  	  					state_Tra = 1;
 8003246:	4b42      	ldr	r3, [pc, #264]	@ (8003350 <Trajectory+0x280>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 800324c:	4b48      	ldr	r3, [pc, #288]	@ (8003370 <Trajectory+0x2a0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a40      	ldr	r2, [pc, #256]	@ (8003354 <Trajectory+0x284>)
 8003252:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 8003254:	4b47      	ldr	r3, [pc, #284]	@ (8003374 <Trajectory+0x2a4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a41      	ldr	r2, [pc, #260]	@ (8003360 <Trajectory+0x290>)
 800325a:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 800325c:	4b41      	ldr	r3, [pc, #260]	@ (8003364 <Trajectory+0x294>)
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
			  	  				}
			  	  			  if(fabs((q_Pos-Pos_Start)*2) >= fabs(Pos_Target-Pos_Start))
 8003264:	4b42      	ldr	r3, [pc, #264]	@ (8003370 <Trajectory+0x2a0>)
 8003266:	ed93 7a00 	vldr	s14, [r3]
 800326a:	4b3a      	ldr	r3, [pc, #232]	@ (8003354 <Trajectory+0x284>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003274:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003278:	eeb0 7ae7 	vabs.f32	s14, s15
 800327c:	4b36      	ldr	r3, [pc, #216]	@ (8003358 <Trajectory+0x288>)
 800327e:	edd3 6a00 	vldr	s13, [r3]
 8003282:	4b34      	ldr	r3, [pc, #208]	@ (8003354 <Trajectory+0x284>)
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800328c:	eef0 7ae7 	vabs.f32	s15, s15
 8003290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	da00      	bge.n	800329c <Trajectory+0x1cc>
			  	  				state_Tra = 2;
								Pos_Start = q_Pos;
								Velo_Start = q_Velo;
								t = 0;
			  	  			  }
			  	  			  	break;
 800329a:	e128      	b.n	80034ee <Trajectory+0x41e>
			  	  				state_Tra = 2;
 800329c:	4b2c      	ldr	r3, [pc, #176]	@ (8003350 <Trajectory+0x280>)
 800329e:	2202      	movs	r2, #2
 80032a0:	601a      	str	r2, [r3, #0]
								Pos_Start = q_Pos;
 80032a2:	4b33      	ldr	r3, [pc, #204]	@ (8003370 <Trajectory+0x2a0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003354 <Trajectory+0x284>)
 80032a8:	6013      	str	r3, [r2, #0]
								Velo_Start = q_Velo;
 80032aa:	4b32      	ldr	r3, [pc, #200]	@ (8003374 <Trajectory+0x2a4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003360 <Trajectory+0x290>)
 80032b0:	6013      	str	r3, [r2, #0]
								t = 0;
 80032b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003364 <Trajectory+0x294>)
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 80032ba:	e118      	b.n	80034ee <Trajectory+0x41e>
			  	  		  case 1:
			  	  			  	q_Pos = Pos_Start +(Velo_Start*t);
 80032bc:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <Trajectory+0x290>)
 80032be:	ed93 7a00 	vldr	s14, [r3]
 80032c2:	4b28      	ldr	r3, [pc, #160]	@ (8003364 <Trajectory+0x294>)
 80032c4:	edd3 7a00 	vldr	s15, [r3]
 80032c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032cc:	4b21      	ldr	r3, [pc, #132]	@ (8003354 <Trajectory+0x284>)
 80032ce:	edd3 7a00 	vldr	s15, [r3]
 80032d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d6:	4b26      	ldr	r3, [pc, #152]	@ (8003370 <Trajectory+0x2a0>)
 80032d8:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Velo = Velo_Start;
 80032dc:	4b20      	ldr	r3, [pc, #128]	@ (8003360 <Trajectory+0x290>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a24      	ldr	r2, [pc, #144]	@ (8003374 <Trajectory+0x2a4>)
 80032e2:	6013      	str	r3, [r2, #0]
			  	  			  	q_Acc = 0;
 80032e4:	4b24      	ldr	r3, [pc, #144]	@ (8003378 <Trajectory+0x2a8>)
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
			  	  			  if(fabs(Pos_Target-q_Pos) <= (q_Velo*q_Velo)/(2*Max_Acc))
 80032ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <Trajectory+0x288>)
 80032ee:	ed93 7a00 	vldr	s14, [r3]
 80032f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003370 <Trajectory+0x2a0>)
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fc:	eeb0 7ae7 	vabs.f32	s14, s15
 8003300:	4b1c      	ldr	r3, [pc, #112]	@ (8003374 <Trajectory+0x2a4>)
 8003302:	edd3 6a00 	vldr	s13, [r3]
 8003306:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <Trajectory+0x2a4>)
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003310:	4b16      	ldr	r3, [pc, #88]	@ (800336c <Trajectory+0x29c>)
 8003312:	edd3 7a00 	vldr	s15, [r3]
 8003316:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800331a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800331e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003326:	d900      	bls.n	800332a <Trajectory+0x25a>
			  	  					state_Tra = 2;
			  	  					Pos_Start = q_Pos;
			  	  					Velo_Start = q_Velo;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 8003328:	e0e1      	b.n	80034ee <Trajectory+0x41e>
			  	  					state_Tra = 2;
 800332a:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <Trajectory+0x280>)
 800332c:	2202      	movs	r2, #2
 800332e:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8003330:	4b0f      	ldr	r3, [pc, #60]	@ (8003370 <Trajectory+0x2a0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a07      	ldr	r2, [pc, #28]	@ (8003354 <Trajectory+0x284>)
 8003336:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 8003338:	4b0e      	ldr	r3, [pc, #56]	@ (8003374 <Trajectory+0x2a4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a08      	ldr	r2, [pc, #32]	@ (8003360 <Trajectory+0x290>)
 800333e:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8003340:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <Trajectory+0x294>)
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8003348:	e0d1      	b.n	80034ee <Trajectory+0x41e>
 800334a:	bf00      	nop
 800334c:	20001390 	.word	0x20001390
 8003350:	20001290 	.word	0x20001290
 8003354:	20001270 	.word	0x20001270
 8003358:	20001274 	.word	0x20001274
 800335c:	20000214 	.word	0x20000214
 8003360:	2000127c 	.word	0x2000127c
 8003364:	2000128c 	.word	0x2000128c
 8003368:	3fe00000 	.word	0x3fe00000
 800336c:	20000210 	.word	0x20000210
 8003370:	20001280 	.word	0x20001280
 8003374:	20001284 	.word	0x20001284
 8003378:	20001288 	.word	0x20001288
 800337c:	2000020c 	.word	0x2000020c
			  	  		  case 2:
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)-((direction*0.5*Max_Acc)*(t*t));
 8003380:	4b6f      	ldr	r3, [pc, #444]	@ (8003540 <Trajectory+0x470>)
 8003382:	ed93 7a00 	vldr	s14, [r3]
 8003386:	4b6f      	ldr	r3, [pc, #444]	@ (8003544 <Trajectory+0x474>)
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003390:	4b6d      	ldr	r3, [pc, #436]	@ (8003548 <Trajectory+0x478>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339a:	ee17 0a90 	vmov	r0, s15
 800339e:	f7fd f89f 	bl	80004e0 <__aeabi_f2d>
 80033a2:	4680      	mov	r8, r0
 80033a4:	4689      	mov	r9, r1
 80033a6:	4b69      	ldr	r3, [pc, #420]	@ (800354c <Trajectory+0x47c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f886 	bl	80004bc <__aeabi_i2d>
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	4b66      	ldr	r3, [pc, #408]	@ (8003550 <Trajectory+0x480>)
 80033b6:	f7fd f8eb 	bl	8000590 <__aeabi_dmul>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4692      	mov	sl, r2
 80033c0:	469b      	mov	fp, r3
 80033c2:	4b64      	ldr	r3, [pc, #400]	@ (8003554 <Trajectory+0x484>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f88a 	bl	80004e0 <__aeabi_f2d>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4650      	mov	r0, sl
 80033d2:	4659      	mov	r1, fp
 80033d4:	f7fd f8dc 	bl	8000590 <__aeabi_dmul>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4692      	mov	sl, r2
 80033de:	469b      	mov	fp, r3
 80033e0:	4b58      	ldr	r3, [pc, #352]	@ (8003544 <Trajectory+0x474>)
 80033e2:	ed93 7a00 	vldr	s14, [r3]
 80033e6:	4b57      	ldr	r3, [pc, #348]	@ (8003544 <Trajectory+0x474>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f0:	ee17 0a90 	vmov	r0, s15
 80033f4:	f7fd f874 	bl	80004e0 <__aeabi_f2d>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4650      	mov	r0, sl
 80033fe:	4659      	mov	r1, fp
 8003400:	f7fd f8c6 	bl	8000590 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4640      	mov	r0, r8
 800340a:	4649      	mov	r1, r9
 800340c:	f7fc ff08 	bl	8000220 <__aeabi_dsub>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	f7fd fb74 	bl	8000b04 <__aeabi_d2f>
 800341c:	4603      	mov	r3, r0
 800341e:	4a4e      	ldr	r2, [pc, #312]	@ (8003558 <Trajectory+0x488>)
 8003420:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start - direction*Max_Acc*t;
 8003422:	4b47      	ldr	r3, [pc, #284]	@ (8003540 <Trajectory+0x470>)
 8003424:	ed93 7a00 	vldr	s14, [r3]
 8003428:	4b48      	ldr	r3, [pc, #288]	@ (800354c <Trajectory+0x47c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003434:	4b47      	ldr	r3, [pc, #284]	@ (8003554 <Trajectory+0x484>)
 8003436:	edd3 7a00 	vldr	s15, [r3]
 800343a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800343e:	4b41      	ldr	r3, [pc, #260]	@ (8003544 <Trajectory+0x474>)
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344c:	4b43      	ldr	r3, [pc, #268]	@ (800355c <Trajectory+0x48c>)
 800344e:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = -direction*Max_Acc;
 8003452:	4b3e      	ldr	r3, [pc, #248]	@ (800354c <Trajectory+0x47c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	425b      	negs	r3, r3
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003460:	4b3c      	ldr	r3, [pc, #240]	@ (8003554 <Trajectory+0x484>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	4b3d      	ldr	r3, [pc, #244]	@ (8003560 <Trajectory+0x490>)
 800346c:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) <= 0)
 8003470:	4b3a      	ldr	r3, [pc, #232]	@ (800355c <Trajectory+0x48c>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	eef0 7ae7 	vabs.f32	s15, s15
 800347a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	d900      	bls.n	8003486 <Trajectory+0x3b6>
			  	  				{
			  	  					state_Tra = 3;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 8003484:	e033      	b.n	80034ee <Trajectory+0x41e>
			  	  					state_Tra = 3;
 8003486:	4b37      	ldr	r3, [pc, #220]	@ (8003564 <Trajectory+0x494>)
 8003488:	2203      	movs	r2, #3
 800348a:	601a      	str	r2, [r3, #0]
			  	  					t = 0;
 800348c:	4b2d      	ldr	r3, [pc, #180]	@ (8003544 <Trajectory+0x474>)
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8003494:	e02b      	b.n	80034ee <Trajectory+0x41e>
			  	  		  case 3:
			  	  			  	if (FirstTraject == 1)
 8003496:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <Trajectory+0x498>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d106      	bne.n	80034ac <Trajectory+0x3dc>
			  	  			  	{
			  	  			  	Old_Target = Pos_Target;
 800349e:	4b33      	ldr	r3, [pc, #204]	@ (800356c <Trajectory+0x49c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a33      	ldr	r2, [pc, #204]	@ (8003570 <Trajectory+0x4a0>)
 80034a4:	6013      	str	r3, [r2, #0]
			  	  			  	FirstTraject = 0;
 80034a6:	4b30      	ldr	r3, [pc, #192]	@ (8003568 <Trajectory+0x498>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
			  	  			  	}
			  	  			  	if(Pos_Target != Old_Target)
 80034ac:	4b2f      	ldr	r3, [pc, #188]	@ (800356c <Trajectory+0x49c>)
 80034ae:	ed93 7a00 	vldr	s14, [r3]
 80034b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003570 <Trajectory+0x4a0>)
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	eeb4 7a67 	vcmp.f32	s14, s15
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	d014      	beq.n	80034ec <Trajectory+0x41c>
			  	  			  	{
			  	  			  		state_Tra = 0;
 80034c2:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <Trajectory+0x494>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
			  	  			  		t = 0;
 80034c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003544 <Trajectory+0x474>)
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
			  	  			  		Pos_Start = Pos;
 80034d0:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <Trajectory+0x4a4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <Trajectory+0x478>)
 80034d6:	6013      	str	r3, [r2, #0]
//			  	  			  		Pos_Start = q_Pos;
			  	  			  		Velo_Start = q_Velo;
 80034d8:	4b20      	ldr	r3, [pc, #128]	@ (800355c <Trajectory+0x48c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	@ (8003540 <Trajectory+0x470>)
 80034de:	6013      	str	r3, [r2, #0]
			  	  			  		Old_Target = Pos_Target;
 80034e0:	4b22      	ldr	r3, [pc, #136]	@ (800356c <Trajectory+0x49c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	@ (8003570 <Trajectory+0x4a0>)
 80034e6:	6013      	str	r3, [r2, #0]
			  	  			  		PIDreset();
 80034e8:	f7ff fbda 	bl	8002ca0 <PIDreset>

			  	  			  	}
			  	  			  	break;
 80034ec:	bf00      	nop
			  	  		  }
		  t = t+0.0001;
 80034ee:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <Trajectory+0x474>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fc fff4 	bl	80004e0 <__aeabi_f2d>
 80034f8:	a30f      	add	r3, pc, #60	@ (adr r3, 8003538 <Trajectory+0x468>)
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f7fc fe91 	bl	8000224 <__adddf3>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f7fd fafb 	bl	8000b04 <__aeabi_d2f>
 800350e:	4603      	mov	r3, r0
 8003510:	4a0c      	ldr	r2, [pc, #48]	@ (8003544 <Trajectory+0x474>)
 8003512:	6013      	str	r3, [r2, #0]
		  timestamp_Traject = currentTime + 100;
 8003514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003518:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 800351c:	f143 0500 	adc.w	r5, r3, #0
 8003520:	4622      	mov	r2, r4
 8003522:	462b      	mov	r3, r5
 8003524:	4914      	ldr	r1, [pc, #80]	@ (8003578 <Trajectory+0x4a8>)
 8003526:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003534:	f3af 8000 	nop.w
 8003538:	eb1c432d 	.word	0xeb1c432d
 800353c:	3f1a36e2 	.word	0x3f1a36e2
 8003540:	2000127c 	.word	0x2000127c
 8003544:	2000128c 	.word	0x2000128c
 8003548:	20001270 	.word	0x20001270
 800354c:	20000214 	.word	0x20000214
 8003550:	3fe00000 	.word	0x3fe00000
 8003554:	20000210 	.word	0x20000210
 8003558:	20001280 	.word	0x20001280
 800355c:	20001284 	.word	0x20001284
 8003560:	20001288 	.word	0x20001288
 8003564:	20001290 	.word	0x20001290
 8003568:	20000208 	.word	0x20000208
 800356c:	20001274 	.word	0x20001274
 8003570:	20001278 	.word	0x20001278
 8003574:	2000130c 	.word	0x2000130c
 8003578:	20001390 	.word	0x20001390

0800357c <PIDposition>:

void PIDposition()
{
 800357c:	b5b0      	push	{r4, r5, r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
	static uint64_t timestamp3 =0;
	int64_t currentTime = micros();
 8003582:	f000 fcd1 	bl	8003f28 <micros>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentTime > timestamp3)
 800358e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003592:	499c      	ldr	r1, [pc, #624]	@ (8003804 <PIDposition+0x288>)
 8003594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003598:	4290      	cmp	r0, r2
 800359a:	eb71 0303 	sbcs.w	r3, r1, r3
 800359e:	f080 8102 	bcs.w	80037a6 <PIDposition+0x22a>
	  {
			Poscontrol.Error[NEW] = q_Pos-Pos;
 80035a2:	4b99      	ldr	r3, [pc, #612]	@ (8003808 <PIDposition+0x28c>)
 80035a4:	ed93 7a00 	vldr	s14, [r3]
 80035a8:	4b98      	ldr	r3, [pc, #608]	@ (800380c <PIDposition+0x290>)
 80035aa:	edd3 7a00 	vldr	s15, [r3]
 80035ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b2:	4b97      	ldr	r3, [pc, #604]	@ (8003810 <PIDposition+0x294>)
 80035b4:	edc3 7a03 	vstr	s15, [r3, #12]
			Poscontrol.Output[NEW] = ((((Poscontrol.kp*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[OLD])+(Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*Poscontrol.T))/Poscontrol.T;
 80035b8:	4b95      	ldr	r3, [pc, #596]	@ (8003810 <PIDposition+0x294>)
 80035ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80035be:	4b94      	ldr	r3, [pc, #592]	@ (8003810 <PIDposition+0x294>)
 80035c0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80035c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c8:	4b91      	ldr	r3, [pc, #580]	@ (8003810 <PIDposition+0x294>)
 80035ca:	edd3 6a07 	vldr	s13, [r3, #28]
 80035ce:	4b90      	ldr	r3, [pc, #576]	@ (8003810 <PIDposition+0x294>)
 80035d0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80035d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003810 <PIDposition+0x294>)
 80035da:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80035de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e6:	4b8a      	ldr	r3, [pc, #552]	@ (8003810 <PIDposition+0x294>)
 80035e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80035ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035f0:	4b87      	ldr	r3, [pc, #540]	@ (8003810 <PIDposition+0x294>)
 80035f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80035f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035fa:	4b85      	ldr	r3, [pc, #532]	@ (8003810 <PIDposition+0x294>)
 80035fc:	edd3 6a06 	vldr	s13, [r3, #24]
 8003600:	4b83      	ldr	r3, [pc, #524]	@ (8003810 <PIDposition+0x294>)
 8003602:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003606:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800360a:	4b81      	ldr	r3, [pc, #516]	@ (8003810 <PIDposition+0x294>)
 800360c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003610:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003614:	4b7e      	ldr	r3, [pc, #504]	@ (8003810 <PIDposition+0x294>)
 8003616:	edd3 7a04 	vldr	s15, [r3, #16]
 800361a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800361e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003622:	4b7b      	ldr	r3, [pc, #492]	@ (8003810 <PIDposition+0x294>)
 8003624:	edd3 6a08 	vldr	s13, [r3, #32]
 8003628:	4b79      	ldr	r3, [pc, #484]	@ (8003810 <PIDposition+0x294>)
 800362a:	edd3 7a05 	vldr	s15, [r3, #20]
 800362e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003632:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003636:	4b76      	ldr	r3, [pc, #472]	@ (8003810 <PIDposition+0x294>)
 8003638:	edd3 6a01 	vldr	s13, [r3, #4]
 800363c:	4b74      	ldr	r3, [pc, #464]	@ (8003810 <PIDposition+0x294>)
 800363e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003646:	ee77 6a27 	vadd.f32	s13, s14, s15
 800364a:	4b71      	ldr	r3, [pc, #452]	@ (8003810 <PIDposition+0x294>)
 800364c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003654:	4b6e      	ldr	r3, [pc, #440]	@ (8003810 <PIDposition+0x294>)
 8003656:	edc3 7a00 	vstr	s15, [r3]
			Poscontrol.Error[OLDER] = Poscontrol.Error[OLD];
 800365a:	4b6d      	ldr	r3, [pc, #436]	@ (8003810 <PIDposition+0x294>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	4a6c      	ldr	r2, [pc, #432]	@ (8003810 <PIDposition+0x294>)
 8003660:	6153      	str	r3, [r2, #20]
			Poscontrol.Error[OLD] = Poscontrol.Error[NEW];
 8003662:	4b6b      	ldr	r3, [pc, #428]	@ (8003810 <PIDposition+0x294>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4a6a      	ldr	r2, [pc, #424]	@ (8003810 <PIDposition+0x294>)
 8003668:	6113      	str	r3, [r2, #16]
			Poscontrol.Output[OLDER] = Poscontrol.Output[OLD];
 800366a:	4b69      	ldr	r3, [pc, #420]	@ (8003810 <PIDposition+0x294>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4a68      	ldr	r2, [pc, #416]	@ (8003810 <PIDposition+0x294>)
 8003670:	6093      	str	r3, [r2, #8]
			Poscontrol.Output[OLD] = Poscontrol.Output[NEW];
 8003672:	4b67      	ldr	r3, [pc, #412]	@ (8003810 <PIDposition+0x294>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a66      	ldr	r2, [pc, #408]	@ (8003810 <PIDposition+0x294>)
 8003678:	6053      	str	r3, [r2, #4]

			Velocontrol.Error[NEW] = Poscontrol.Output[NEW]+q_Velo-speed_fill;
 800367a:	4b65      	ldr	r3, [pc, #404]	@ (8003810 <PIDposition+0x294>)
 800367c:	ed93 7a00 	vldr	s14, [r3]
 8003680:	4b64      	ldr	r3, [pc, #400]	@ (8003814 <PIDposition+0x298>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800368a:	4b63      	ldr	r3, [pc, #396]	@ (8003818 <PIDposition+0x29c>)
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003694:	4b61      	ldr	r3, [pc, #388]	@ (800381c <PIDposition+0x2a0>)
 8003696:	edc3 7a03 	vstr	s15, [r3, #12]
			Velocontrol.Output[NEW] = ((((Velocontrol.kp*Velocontrol.T)+(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[NEW])-(((Velocontrol.kp*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[OLD])+(Velocontrol.kd*Velocontrol.Error[OLDER])+(Velocontrol.Output[OLD]*Velocontrol.T))/Velocontrol.T;
 800369a:	4b60      	ldr	r3, [pc, #384]	@ (800381c <PIDposition+0x2a0>)
 800369c:	ed93 7a06 	vldr	s14, [r3, #24]
 80036a0:	4b5e      	ldr	r3, [pc, #376]	@ (800381c <PIDposition+0x2a0>)
 80036a2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80036a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036aa:	4b5c      	ldr	r3, [pc, #368]	@ (800381c <PIDposition+0x2a0>)
 80036ac:	edd3 6a07 	vldr	s13, [r3, #28]
 80036b0:	4b5a      	ldr	r3, [pc, #360]	@ (800381c <PIDposition+0x2a0>)
 80036b2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80036b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036ba:	4b58      	ldr	r3, [pc, #352]	@ (800381c <PIDposition+0x2a0>)
 80036bc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80036c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036c8:	4b54      	ldr	r3, [pc, #336]	@ (800381c <PIDposition+0x2a0>)
 80036ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80036ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036d2:	4b52      	ldr	r3, [pc, #328]	@ (800381c <PIDposition+0x2a0>)
 80036d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80036d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036dc:	4b4f      	ldr	r3, [pc, #316]	@ (800381c <PIDposition+0x2a0>)
 80036de:	edd3 6a06 	vldr	s13, [r3, #24]
 80036e2:	4b4e      	ldr	r3, [pc, #312]	@ (800381c <PIDposition+0x2a0>)
 80036e4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80036e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036ec:	4b4b      	ldr	r3, [pc, #300]	@ (800381c <PIDposition+0x2a0>)
 80036ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80036f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80036f6:	4b49      	ldr	r3, [pc, #292]	@ (800381c <PIDposition+0x2a0>)
 80036f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80036fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003704:	4b45      	ldr	r3, [pc, #276]	@ (800381c <PIDposition+0x2a0>)
 8003706:	edd3 6a08 	vldr	s13, [r3, #32]
 800370a:	4b44      	ldr	r3, [pc, #272]	@ (800381c <PIDposition+0x2a0>)
 800370c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003718:	4b40      	ldr	r3, [pc, #256]	@ (800381c <PIDposition+0x2a0>)
 800371a:	edd3 6a01 	vldr	s13, [r3, #4]
 800371e:	4b3f      	ldr	r3, [pc, #252]	@ (800381c <PIDposition+0x2a0>)
 8003720:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003728:	ee77 6a27 	vadd.f32	s13, s14, s15
 800372c:	4b3b      	ldr	r3, [pc, #236]	@ (800381c <PIDposition+0x2a0>)
 800372e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003736:	4b39      	ldr	r3, [pc, #228]	@ (800381c <PIDposition+0x2a0>)
 8003738:	edc3 7a00 	vstr	s15, [r3]
			if(Velocontrol.Output[NEW]>42500)Velocontrol.Output[NEW]=42500;
 800373c:	4b37      	ldr	r3, [pc, #220]	@ (800381c <PIDposition+0x2a0>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003820 <PIDposition+0x2a4>
 8003746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	dd02      	ble.n	8003756 <PIDposition+0x1da>
 8003750:	4b32      	ldr	r3, [pc, #200]	@ (800381c <PIDposition+0x2a0>)
 8003752:	4a34      	ldr	r2, [pc, #208]	@ (8003824 <PIDposition+0x2a8>)
 8003754:	601a      	str	r2, [r3, #0]
			if(Velocontrol.Output[NEW]<-42500)Velocontrol.Output[NEW]=-42500;
 8003756:	4b31      	ldr	r3, [pc, #196]	@ (800381c <PIDposition+0x2a0>)
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003828 <PIDposition+0x2ac>
 8003760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	d502      	bpl.n	8003770 <PIDposition+0x1f4>
 800376a:	4b2c      	ldr	r3, [pc, #176]	@ (800381c <PIDposition+0x2a0>)
 800376c:	4a2f      	ldr	r2, [pc, #188]	@ (800382c <PIDposition+0x2b0>)
 800376e:	601a      	str	r2, [r3, #0]
			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
 8003770:	4b2a      	ldr	r3, [pc, #168]	@ (800381c <PIDposition+0x2a0>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	4a29      	ldr	r2, [pc, #164]	@ (800381c <PIDposition+0x2a0>)
 8003776:	6153      	str	r3, [r2, #20]
			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
 8003778:	4b28      	ldr	r3, [pc, #160]	@ (800381c <PIDposition+0x2a0>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4a27      	ldr	r2, [pc, #156]	@ (800381c <PIDposition+0x2a0>)
 800377e:	6113      	str	r3, [r2, #16]
			Velocontrol.Output[OLDER] = Velocontrol.Output[OLD];
 8003780:	4b26      	ldr	r3, [pc, #152]	@ (800381c <PIDposition+0x2a0>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a25      	ldr	r2, [pc, #148]	@ (800381c <PIDposition+0x2a0>)
 8003786:	6093      	str	r3, [r2, #8]
			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
 8003788:	4b24      	ldr	r3, [pc, #144]	@ (800381c <PIDposition+0x2a0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a23      	ldr	r2, [pc, #140]	@ (800381c <PIDposition+0x2a0>)
 800378e:	6053      	str	r3, [r2, #4]
	//					if(fabs(Pos_Target-Pos) <= 0.1)start = 0;
			timestamp3 =currentTime + 100;
 8003790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003794:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8003798:	f143 0500 	adc.w	r5, r3, #0
 800379c:	4622      	mov	r2, r4
 800379e:	462b      	mov	r3, r5
 80037a0:	4918      	ldr	r1, [pc, #96]	@ (8003804 <PIDposition+0x288>)
 80037a2:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  if(Velocontrol.Output[NEW] > 0)
 80037a6:	4b1d      	ldr	r3, [pc, #116]	@ (800381c <PIDposition+0x2a0>)
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	dd10      	ble.n	80037d8 <PIDposition+0x25c>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2101      	movs	r1, #1
 80037ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037be:	f003 fa3f 	bl	8006c40 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Velocontrol.Output[NEW]);
 80037c2:	4b16      	ldr	r3, [pc, #88]	@ (800381c <PIDposition+0x2a0>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <PIDposition+0x2b4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d0:	ee17 2a90 	vmov	r2, s15
 80037d4:	635a      	str	r2, [r3, #52]	@ 0x34
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
	  }
}
 80037d6:	e011      	b.n	80037fc <PIDposition+0x280>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80037d8:	2201      	movs	r2, #1
 80037da:	2101      	movs	r1, #1
 80037dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037e0:	f003 fa2e 	bl	8006c40 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
 80037e4:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <PIDposition+0x2a0>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	eef0 7ae7 	vabs.f32	s15, s15
 80037ee:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <PIDposition+0x2b4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f6:	ee17 2a90 	vmov	r2, s15
 80037fa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bdb0      	pop	{r4, r5, r7, pc}
 8003804:	20001398 	.word	0x20001398
 8003808:	20001280 	.word	0x20001280
 800380c:	2000130c 	.word	0x2000130c
 8003810:	20001248 	.word	0x20001248
 8003814:	20001284 	.word	0x20001284
 8003818:	20001304 	.word	0x20001304
 800381c:	20001220 	.word	0x20001220
 8003820:	47260400 	.word	0x47260400
 8003824:	47260400 	.word	0x47260400
 8003828:	c7260400 	.word	0xc7260400
 800382c:	c7260400 	.word	0xc7260400
 8003830:	20000578 	.word	0x20000578

08003834 <State_To_Mode>:

void State_To_Mode(){
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
        if(registerFrame[0x01].U16 == 0b0001){
 8003838:	4b42      	ldr	r3, [pc, #264]	@ (8003944 <State_To_Mode+0x110>)
 800383a:	885b      	ldrh	r3, [r3, #2]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d115      	bne.n	800386c <State_To_Mode+0x38>
        	registerFrame[0x01].U16 = 0b0000;
 8003840:	4b40      	ldr	r3, [pc, #256]	@ (8003944 <State_To_Mode+0x110>)
 8003842:	2200      	movs	r2, #0
 8003844:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0001;
 8003846:	4b3f      	ldr	r3, [pc, #252]	@ (8003944 <State_To_Mode+0x110>)
 8003848:	2201      	movs	r2, #1
 800384a:	841a      	strh	r2, [r3, #32]
        	Mode = 1;
 800384c:	4b3e      	ldr	r3, [pc, #248]	@ (8003948 <State_To_Mode+0x114>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]
        	state_ALL = 4;
 8003852:	4b3e      	ldr	r3, [pc, #248]	@ (800394c <State_To_Mode+0x118>)
 8003854:	2204      	movs	r2, #4
 8003856:	601a      	str	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8003858:	2200      	movs	r2, #0
 800385a:	2108      	movs	r1, #8
 800385c:	483c      	ldr	r0, [pc, #240]	@ (8003950 <State_To_Mode+0x11c>)
 800385e:	f003 f9ef 	bl	8006c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 8003862:	2201      	movs	r2, #1
 8003864:	2104      	movs	r1, #4
 8003866:	483a      	ldr	r0, [pc, #232]	@ (8003950 <State_To_Mode+0x11c>)
 8003868:	f003 f9ea 	bl	8006c40 <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b0010){
 800386c:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <State_To_Mode+0x110>)
 800386e:	885b      	ldrh	r3, [r3, #2]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d10f      	bne.n	8003894 <State_To_Mode+0x60>
//            Mode = 2;
        	Mode = 1;
 8003874:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <State_To_Mode+0x114>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
            state_ALL = 0;
 800387a:	4b34      	ldr	r3, [pc, #208]	@ (800394c <State_To_Mode+0x118>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8003880:	2200      	movs	r2, #0
 8003882:	2108      	movs	r1, #8
 8003884:	4832      	ldr	r0, [pc, #200]	@ (8003950 <State_To_Mode+0x11c>)
 8003886:	f003 f9db 	bl	8006c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 800388a:	2201      	movs	r2, #1
 800388c:	2104      	movs	r1, #4
 800388e:	4830      	ldr	r0, [pc, #192]	@ (8003950 <State_To_Mode+0x11c>)
 8003890:	f003 f9d6 	bl	8006c40 <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b0100){
 8003894:	4b2b      	ldr	r3, [pc, #172]	@ (8003944 <State_To_Mode+0x110>)
 8003896:	885b      	ldrh	r3, [r3, #2]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d120      	bne.n	80038de <State_To_Mode+0xaa>
//            Mode = 3;
        	Mode = 1;
 800389c:	4b2a      	ldr	r3, [pc, #168]	@ (8003948 <State_To_Mode+0x114>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
        	registerFrame[0x01].U16 = 0b0000;
 80038a2:	4b28      	ldr	r3, [pc, #160]	@ (8003944 <State_To_Mode+0x110>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	805a      	strh	r2, [r3, #2]
			splitInteger(registerFrame[0x21].U16, Pick_Order);
 80038a8:	4b26      	ldr	r3, [pc, #152]	@ (8003944 <State_To_Mode+0x110>)
 80038aa:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80038ae:	4929      	ldr	r1, [pc, #164]	@ (8003954 <State_To_Mode+0x120>)
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fa53 	bl	8003d5c <splitInteger>
			splitInteger(registerFrame[0x22].U16, Place_Order);
 80038b6:	4b23      	ldr	r3, [pc, #140]	@ (8003944 <State_To_Mode+0x110>)
 80038b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038bc:	4926      	ldr	r1, [pc, #152]	@ (8003958 <State_To_Mode+0x124>)
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fa4c 	bl	8003d5c <splitInteger>
			state_ALL = 5;
 80038c4:	4b21      	ldr	r3, [pc, #132]	@ (800394c <State_To_Mode+0x118>)
 80038c6:	2205      	movs	r2, #5
 80038c8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2108      	movs	r1, #8
 80038ce:	4820      	ldr	r0, [pc, #128]	@ (8003950 <State_To_Mode+0x11c>)
 80038d0:	f003 f9b6 	bl	8006c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 80038d4:	2201      	movs	r2, #1
 80038d6:	2104      	movs	r1, #4
 80038d8:	481d      	ldr	r0, [pc, #116]	@ (8003950 <State_To_Mode+0x11c>)
 80038da:	f003 f9b1 	bl	8006c40 <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b1000){
 80038de:	4b19      	ldr	r3, [pc, #100]	@ (8003944 <State_To_Mode+0x110>)
 80038e0:	885b      	ldrh	r3, [r3, #2]
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d12c      	bne.n	8003940 <State_To_Mode+0x10c>
//          Point Mode
        	Mode = 1;
 80038e6:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <State_To_Mode+0x114>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
        	registerFrame[0x01].U16 = 0b0000;
 80038ec:	4b15      	ldr	r3, [pc, #84]	@ (8003944 <State_To_Mode+0x110>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b00010000;
 80038f2:	4b14      	ldr	r3, [pc, #80]	@ (8003944 <State_To_Mode+0x110>)
 80038f4:	2210      	movs	r2, #16
 80038f6:	841a      	strh	r2, [r3, #32]
			Goal_Point = registerFrame[0x30].U16/10;
 80038f8:	4b12      	ldr	r3, [pc, #72]	@ (8003944 <State_To_Mode+0x110>)
 80038fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <State_To_Mode+0x128>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	4b15      	ldr	r3, [pc, #84]	@ (8003960 <State_To_Mode+0x12c>)
 800390c:	601a      	str	r2, [r3, #0]
			Pos_Target = Goal_Point;
 800390e:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <State_To_Mode+0x12c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391a:	4b12      	ldr	r3, [pc, #72]	@ (8003964 <State_To_Mode+0x130>)
 800391c:	edc3 7a00 	vstr	s15, [r3]
			state_ALL = 3;
 8003920:	4b0a      	ldr	r3, [pc, #40]	@ (800394c <State_To_Mode+0x118>)
 8003922:	2203      	movs	r2, #3
 8003924:	601a      	str	r2, [r3, #0]
			state_ALL_Old = 2;
 8003926:	4b10      	ldr	r3, [pc, #64]	@ (8003968 <State_To_Mode+0x134>)
 8003928:	2202      	movs	r2, #2
 800392a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 800392c:	2200      	movs	r2, #0
 800392e:	2108      	movs	r1, #8
 8003930:	4807      	ldr	r0, [pc, #28]	@ (8003950 <State_To_Mode+0x11c>)
 8003932:	f003 f985 	bl	8006c40 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 8003936:	2201      	movs	r2, #1
 8003938:	2104      	movs	r1, #4
 800393a:	4805      	ldr	r0, [pc, #20]	@ (8003950 <State_To_Mode+0x11c>)
 800393c:	f003 f980 	bl	8006c40 <HAL_GPIO_WritePin>
        }
}
 8003940:	bf00      	nop
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000fd8 	.word	0x20000fd8
 8003948:	2000116c 	.word	0x2000116c
 800394c:	20000204 	.word	0x20000204
 8003950:	48000800 	.word	0x48000800
 8003954:	20001180 	.word	0x20001180
 8003958:	20001194 	.word	0x20001194
 800395c:	cccccccd 	.word	0xcccccccd
 8003960:	2000117c 	.word	0x2000117c
 8003964:	20001274 	.word	0x20001274
 8003968:	200011b4 	.word	0x200011b4

0800396c <Heartbeat>:

void Heartbeat(){
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
        registerFrame[0x00].U16 =22881;
 8003970:	4b04      	ldr	r3, [pc, #16]	@ (8003984 <Heartbeat+0x18>)
 8003972:	f645 1261 	movw	r2, #22881	@ 0x5961
 8003976:	801a      	strh	r2, [r3, #0]
    }
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000fd8 	.word	0x20000fd8

08003988 <Routine>:

void Routine () {
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
        if (registerFrame[0x00].U16 == 18537){
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <Routine+0x30>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	f644 0269 	movw	r2, #18537	@ 0x4869
 8003994:	4293      	cmp	r3, r2
 8003996:	d10a      	bne.n	80039ae <Routine+0x26>
            registerFrame[0x04].U16 = Gripper_Movement_Actual_Status;
 8003998:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <Routine+0x34>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <Routine+0x30>)
 80039a0:	811a      	strh	r2, [r3, #8]

            registerFrame[0x10].U16 = 0b0001;
 80039a2:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <Routine+0x30>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	841a      	strh	r2, [r3, #32]
            registerFrame[0x10].U16 = 0b0000;
 80039a8:	4b03      	ldr	r3, [pc, #12]	@ (80039b8 <Routine+0x30>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	841a      	strh	r2, [r3, #32]
        }
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	20000fd8 	.word	0x20000fd8
 80039bc:	20001178 	.word	0x20001178

080039c0 <UpdatePosRoutine>:
void UpdatePosRoutine()
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
	registerFrame[0x11].U16 = fabs(Pos)*10;
 80039c4:	4b27      	ldr	r3, [pc, #156]	@ (8003a64 <UpdatePosRoutine+0xa4>)
 80039c6:	edd3 7a00 	vldr	s15, [r3]
 80039ca:	eef0 7ae7 	vabs.f32	s15, s15
 80039ce:	ee17 0a90 	vmov	r0, s15
 80039d2:	f7fc fd85 	bl	80004e0 <__aeabi_f2d>
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	4b23      	ldr	r3, [pc, #140]	@ (8003a68 <UpdatePosRoutine+0xa8>)
 80039dc:	f7fc fdd8 	bl	8000590 <__aeabi_dmul>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	f7fd f86c 	bl	8000ac4 <__aeabi_d2uiz>
 80039ec:	4603      	mov	r3, r0
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <UpdatePosRoutine+0xac>)
 80039f2:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[0x12].U16 = fabs(speed_fill)*10;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a70 <UpdatePosRoutine+0xb0>)
 80039f6:	edd3 7a00 	vldr	s15, [r3]
 80039fa:	eef0 7ae7 	vabs.f32	s15, s15
 80039fe:	ee17 0a90 	vmov	r0, s15
 8003a02:	f7fc fd6d 	bl	80004e0 <__aeabi_f2d>
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	4b17      	ldr	r3, [pc, #92]	@ (8003a68 <UpdatePosRoutine+0xa8>)
 8003a0c:	f7fc fdc0 	bl	8000590 <__aeabi_dmul>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	f7fd f854 	bl	8000ac4 <__aeabi_d2uiz>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	4b12      	ldr	r3, [pc, #72]	@ (8003a6c <UpdatePosRoutine+0xac>)
 8003a22:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 = Accelation*10;
 8003a24:	4b13      	ldr	r3, [pc, #76]	@ (8003a74 <UpdatePosRoutine+0xb4>)
 8003a26:	edd3 7a00 	vldr	s15, [r3]
 8003a2a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a36:	ee17 3a90 	vmov	r3, s15
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <UpdatePosRoutine+0xac>)
 8003a3e:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 = X_Actual_Position*10;
 8003a40:	4b0d      	ldr	r3, [pc, #52]	@ (8003a78 <UpdatePosRoutine+0xb8>)
 8003a42:	edd3 7a00 	vldr	s15, [r3]
 8003a46:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a52:	ee17 3a90 	vmov	r3, s15
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <UpdatePosRoutine+0xac>)
 8003a5a:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000130c 	.word	0x2000130c
 8003a68:	40240000 	.word	0x40240000
 8003a6c:	20000fd8 	.word	0x20000fd8
 8003a70:	20001304 	.word	0x20001304
 8003a74:	20001310 	.word	0x20001310
 8003a78:	20001168 	.word	0x20001168

08003a7c <Vacuum>:
void Vacuum() {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
        Vacuum_Status = registerFrame[0x02].U16;
 8003a80:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <Vacuum+0x30>)
 8003a82:	889b      	ldrh	r3, [r3, #4]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab0 <Vacuum+0x34>)
 8003a88:	601a      	str	r2, [r3, #0]
        if(Vacuum_Status == 1)
 8003a8a:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <Vacuum+0x34>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d105      	bne.n	8003a9e <Vacuum+0x22>
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 8003a92:	2201      	movs	r2, #1
 8003a94:	2140      	movs	r1, #64	@ 0x40
 8003a96:	4807      	ldr	r0, [pc, #28]	@ (8003ab4 <Vacuum+0x38>)
 8003a98:	f003 f8d2 	bl	8006c40 <HAL_GPIO_WritePin>
        }
        else
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
        }
}
 8003a9c:	e004      	b.n	8003aa8 <Vacuum+0x2c>
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2140      	movs	r1, #64	@ 0x40
 8003aa2:	4804      	ldr	r0, [pc, #16]	@ (8003ab4 <Vacuum+0x38>)
 8003aa4:	f003 f8cc 	bl	8006c40 <HAL_GPIO_WritePin>
}
 8003aa8:	bf00      	nop
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000fd8 	.word	0x20000fd8
 8003ab0:	20001170 	.word	0x20001170
 8003ab4:	48000800 	.word	0x48000800

08003ab8 <GripperMovement>:
//Write Gripper Movement Status
void GripperMovement() {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
        Gripper_Movement_Status = registerFrame[0x03].U16;
 8003abc:	4b28      	ldr	r3, [pc, #160]	@ (8003b60 <GripperMovement+0xa8>)
 8003abe:	88db      	ldrh	r3, [r3, #6]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b28      	ldr	r3, [pc, #160]	@ (8003b64 <GripperMovement+0xac>)
 8003ac4:	601a      	str	r2, [r3, #0]
        if( Gripper_Movement_Status == 1)
 8003ac6:	4b27      	ldr	r3, [pc, #156]	@ (8003b64 <GripperMovement+0xac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d11b      	bne.n	8003b06 <GripperMovement+0x4e>
	   {
        	if(LeadSW[1] == 0)
 8003ace:	4b26      	ldr	r3, [pc, #152]	@ (8003b68 <GripperMovement+0xb0>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <GripperMovement+0x36>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2120      	movs	r1, #32
 8003ada:	4824      	ldr	r0, [pc, #144]	@ (8003b6c <GripperMovement+0xb4>)
 8003adc:	f003 f8b0 	bl	8006c40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ae6:	4821      	ldr	r0, [pc, #132]	@ (8003b6c <GripperMovement+0xb4>)
 8003ae8:	f003 f8aa 	bl	8006c40 <HAL_GPIO_WritePin>
	   else
	   {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
	   }
}
 8003aec:	e036      	b.n	8003b5c <GripperMovement+0xa4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,1);
 8003aee:	2201      	movs	r2, #1
 8003af0:	2120      	movs	r1, #32
 8003af2:	481e      	ldr	r0, [pc, #120]	@ (8003b6c <GripperMovement+0xb4>)
 8003af4:	f003 f8a4 	bl	8006c40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003af8:	2200      	movs	r2, #0
 8003afa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003afe:	481b      	ldr	r0, [pc, #108]	@ (8003b6c <GripperMovement+0xb4>)
 8003b00:	f003 f89e 	bl	8006c40 <HAL_GPIO_WritePin>
}
 8003b04:	e02a      	b.n	8003b5c <GripperMovement+0xa4>
        else if(Gripper_Movement_Status == 0)
 8003b06:	4b17      	ldr	r3, [pc, #92]	@ (8003b64 <GripperMovement+0xac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11b      	bne.n	8003b46 <GripperMovement+0x8e>
        	if(LeadSW[0] == 0)
 8003b0e:	4b16      	ldr	r3, [pc, #88]	@ (8003b68 <GripperMovement+0xb0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <GripperMovement+0x76>
        		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2120      	movs	r1, #32
 8003b1a:	4814      	ldr	r0, [pc, #80]	@ (8003b6c <GripperMovement+0xb4>)
 8003b1c:	f003 f890 	bl	8006c40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003b20:	2200      	movs	r2, #0
 8003b22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b26:	4811      	ldr	r0, [pc, #68]	@ (8003b6c <GripperMovement+0xb4>)
 8003b28:	f003 f88a 	bl	8006c40 <HAL_GPIO_WritePin>
}
 8003b2c:	e016      	b.n	8003b5c <GripperMovement+0xa4>
        		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2120      	movs	r1, #32
 8003b32:	480e      	ldr	r0, [pc, #56]	@ (8003b6c <GripperMovement+0xb4>)
 8003b34:	f003 f884 	bl	8006c40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,1);
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b3e:	480b      	ldr	r0, [pc, #44]	@ (8003b6c <GripperMovement+0xb4>)
 8003b40:	f003 f87e 	bl	8006c40 <HAL_GPIO_WritePin>
}
 8003b44:	e00a      	b.n	8003b5c <GripperMovement+0xa4>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2120      	movs	r1, #32
 8003b4a:	4808      	ldr	r0, [pc, #32]	@ (8003b6c <GripperMovement+0xb4>)
 8003b4c:	f003 f878 	bl	8006c40 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b56:	4805      	ldr	r0, [pc, #20]	@ (8003b6c <GripperMovement+0xb4>)
 8003b58:	f003 f872 	bl	8006c40 <HAL_GPIO_WritePin>
}
 8003b5c:	bf00      	nop
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000fd8 	.word	0x20000fd8
 8003b64:	20001174 	.word	0x20001174
 8003b68:	200011dc 	.word	0x200011dc
 8003b6c:	48000800 	.word	0x48000800

08003b70 <SetHome>:
void SetHome() {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
	if(Mode == 1)
 8003b74:	4b6b      	ldr	r3, [pc, #428]	@ (8003d24 <SetHome+0x1b4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d16c      	bne.n	8003c56 <SetHome+0xe6>
		{
			registerFrame[0x01].U16 = 0b0000;
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d28 <SetHome+0x1b8>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0010;
 8003b82:	4b69      	ldr	r3, [pc, #420]	@ (8003d28 <SetHome+0x1b8>)
 8003b84:	2202      	movs	r2, #2
 8003b86:	841a      	strh	r2, [r3, #32]
			test = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8003b88:	2110      	movs	r1, #16
 8003b8a:	4868      	ldr	r0, [pc, #416]	@ (8003d2c <SetHome+0x1bc>)
 8003b8c:	f003 f840 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003b90:	4603      	mov	r3, r0
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b66      	ldr	r3, [pc, #408]	@ (8003d30 <SetHome+0x1c0>)
 8003b96:	601a      	str	r2, [r3, #0]
			if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8003b98:	4b66      	ldr	r3, [pc, #408]	@ (8003d34 <SetHome+0x1c4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d006      	beq.n	8003bae <SetHome+0x3e>
 8003ba0:	2110      	movs	r1, #16
 8003ba2:	4862      	ldr	r0, [pc, #392]	@ (8003d2c <SetHome+0x1bc>)
 8003ba4:	f003 f834 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d144      	bne.n	8003c38 <SetHome+0xc8>
			{
				if(CountHome > 100)
 8003bae:	4b62      	ldr	r3, [pc, #392]	@ (8003d38 <SetHome+0x1c8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b64      	cmp	r3, #100	@ 0x64
 8003bb4:	dd3a      	ble.n	8003c2c <SetHome+0xbc>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	2101      	movs	r1, #1
 8003bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bbe:	f003 f83f 	bl	8006c40 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8003d3c <SetHome+0x1cc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(1000);
 8003bca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003bce:	f000 fdc1 	bl	8004754 <HAL_Delay>
					HOME = 0;
 8003bd2:	4b58      	ldr	r3, [pc, #352]	@ (8003d34 <SetHome+0x1c4>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3,0);
 8003bd8:	4b59      	ldr	r3, [pc, #356]	@ (8003d40 <SetHome+0x1d0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	625a      	str	r2, [r3, #36]	@ 0x24
					Count = 0;
 8003be0:	4b58      	ldr	r3, [pc, #352]	@ (8003d44 <SetHome+0x1d4>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
					QEIdata.Position[NEW] = 0;
 8003be6:	4b58      	ldr	r3, [pc, #352]	@ (8003d48 <SetHome+0x1d8>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
					QEIdata.Position[OLD] = 0;
 8003bec:	4b56      	ldr	r3, [pc, #344]	@ (8003d48 <SetHome+0x1d8>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	605a      	str	r2, [r3, #4]
					Pos_Start = 0;
 8003bf2:	4b56      	ldr	r3, [pc, #344]	@ (8003d4c <SetHome+0x1dc>)
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
					state_ALL = 2;
 8003bfa:	4b55      	ldr	r3, [pc, #340]	@ (8003d50 <SetHome+0x1e0>)
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	601a      	str	r2, [r3, #0]
					state_Tra = 0;
 8003c00:	4b54      	ldr	r3, [pc, #336]	@ (8003d54 <SetHome+0x1e4>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
					CountHome = 0;
 8003c06:	4b4c      	ldr	r3, [pc, #304]	@ (8003d38 <SetHome+0x1c8>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
					registerFrame[0x10].U16 = 0b0000;//Reset ModBus
 8003c0c:	4b46      	ldr	r3, [pc, #280]	@ (8003d28 <SetHome+0x1b8>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	841a      	strh	r2, [r3, #32]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8003c12:	2201      	movs	r2, #1
 8003c14:	2108      	movs	r1, #8
 8003c16:	4850      	ldr	r0, [pc, #320]	@ (8003d58 <SetHome+0x1e8>)
 8003c18:	f003 f812 	bl	8006c40 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2104      	movs	r1, #4
 8003c20:	484d      	ldr	r0, [pc, #308]	@ (8003d58 <SetHome+0x1e8>)
 8003c22:	f003 f80d 	bl	8006c40 <HAL_GPIO_WritePin>
					reset();
 8003c26:	f7fe ffeb 	bl	8002c00 <reset>
				if(CountHome > 100)
 8003c2a:	e078      	b.n	8003d1e <SetHome+0x1ae>
				}
				else
				{
					CountHome++;
 8003c2c:	4b42      	ldr	r3, [pc, #264]	@ (8003d38 <SetHome+0x1c8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a41      	ldr	r2, [pc, #260]	@ (8003d38 <SetHome+0x1c8>)
 8003c34:	6013      	str	r3, [r2, #0]
				if(CountHome > 100)
 8003c36:	e072      	b.n	8003d1e <SetHome+0x1ae>
				}
			}
			else
			{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003c38:	2201      	movs	r2, #1
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c40:	f002 fffe 	bl	8006c40 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7500);
 8003c44:	4b3d      	ldr	r3, [pc, #244]	@ (8003d3c <SetHome+0x1cc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8003c4c:	635a      	str	r2, [r3, #52]	@ 0x34
			CountHome = 0;
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d38 <SetHome+0x1c8>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7500);
			CountHome = 0;
			}
		}
    }
 8003c54:	e063      	b.n	8003d1e <SetHome+0x1ae>
			test = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8003c56:	2110      	movs	r1, #16
 8003c58:	4834      	ldr	r0, [pc, #208]	@ (8003d2c <SetHome+0x1bc>)
 8003c5a:	f002 ffd9 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b33      	ldr	r3, [pc, #204]	@ (8003d30 <SetHome+0x1c0>)
 8003c64:	601a      	str	r2, [r3, #0]
			if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8003c66:	4b33      	ldr	r3, [pc, #204]	@ (8003d34 <SetHome+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d006      	beq.n	8003c7c <SetHome+0x10c>
 8003c6e:	2110      	movs	r1, #16
 8003c70:	482e      	ldr	r0, [pc, #184]	@ (8003d2c <SetHome+0x1bc>)
 8003c72:	f002 ffcd 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d141      	bne.n	8003d00 <SetHome+0x190>
				if(CountHome > 100)
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d38 <SetHome+0x1c8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b64      	cmp	r3, #100	@ 0x64
 8003c82:	dd37      	ble.n	8003cf4 <SetHome+0x184>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003c84:	2201      	movs	r2, #1
 8003c86:	2101      	movs	r1, #1
 8003c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c8c:	f002 ffd8 	bl	8006c40 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003c90:	4b2a      	ldr	r3, [pc, #168]	@ (8003d3c <SetHome+0x1cc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	635a      	str	r2, [r3, #52]	@ 0x34
					HAL_Delay(1000);
 8003c98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c9c:	f000 fd5a 	bl	8004754 <HAL_Delay>
					HOME = 0;
 8003ca0:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <SetHome+0x1c4>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3,0);
 8003ca6:	4b26      	ldr	r3, [pc, #152]	@ (8003d40 <SetHome+0x1d0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24
					Count = 0;
 8003cae:	4b25      	ldr	r3, [pc, #148]	@ (8003d44 <SetHome+0x1d4>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
					QEIdata.Position[NEW] = 0;
 8003cb4:	4b24      	ldr	r3, [pc, #144]	@ (8003d48 <SetHome+0x1d8>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
					QEIdata.Position[OLD] = 0;
 8003cba:	4b23      	ldr	r3, [pc, #140]	@ (8003d48 <SetHome+0x1d8>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	605a      	str	r2, [r3, #4]
					Pos_Start = 0;
 8003cc0:	4b22      	ldr	r3, [pc, #136]	@ (8003d4c <SetHome+0x1dc>)
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
					state_ALL = 2;
 8003cc8:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <SetHome+0x1e0>)
 8003cca:	2202      	movs	r2, #2
 8003ccc:	601a      	str	r2, [r3, #0]
					state_Tra = 0;
 8003cce:	4b21      	ldr	r3, [pc, #132]	@ (8003d54 <SetHome+0x1e4>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
					CountHome = 0;
 8003cd4:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <SetHome+0x1c8>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8003cda:	2201      	movs	r2, #1
 8003cdc:	2108      	movs	r1, #8
 8003cde:	481e      	ldr	r0, [pc, #120]	@ (8003d58 <SetHome+0x1e8>)
 8003ce0:	f002 ffae 	bl	8006c40 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2104      	movs	r1, #4
 8003ce8:	481b      	ldr	r0, [pc, #108]	@ (8003d58 <SetHome+0x1e8>)
 8003cea:	f002 ffa9 	bl	8006c40 <HAL_GPIO_WritePin>
					reset();
 8003cee:	f7fe ff87 	bl	8002c00 <reset>
				if(CountHome > 100)
 8003cf2:	e014      	b.n	8003d1e <SetHome+0x1ae>
					CountHome++;
 8003cf4:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <SetHome+0x1c8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8003d38 <SetHome+0x1c8>)
 8003cfc:	6013      	str	r3, [r2, #0]
				if(CountHome > 100)
 8003cfe:	e00e      	b.n	8003d1e <SetHome+0x1ae>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003d00:	2201      	movs	r2, #1
 8003d02:	2101      	movs	r1, #1
 8003d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d08:	f002 ff9a 	bl	8006c40 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7500);
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <SetHome+0x1cc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8003d14:	635a      	str	r2, [r3, #52]	@ 0x34
			CountHome = 0;
 8003d16:	4b08      	ldr	r3, [pc, #32]	@ (8003d38 <SetHome+0x1c8>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
    }
 8003d1c:	e7ff      	b.n	8003d1e <SetHome+0x1ae>
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	2000116c 	.word	0x2000116c
 8003d28:	20000fd8 	.word	0x20000fd8
 8003d2c:	48000400 	.word	0x48000400
 8003d30:	200011a8 	.word	0x200011a8
 8003d34:	200011c0 	.word	0x200011c0
 8003d38:	200011f0 	.word	0x200011f0
 8003d3c:	20000578 	.word	0x20000578
 8003d40:	200004ac 	.word	0x200004ac
 8003d44:	20001314 	.word	0x20001314
 8003d48:	20001320 	.word	0x20001320
 8003d4c:	20001270 	.word	0x20001270
 8003d50:	20000204 	.word	0x20000204
 8003d54:	20001290 	.word	0x20001290
 8003d58:	48000800 	.word	0x48000800

08003d5c <splitInteger>:

void splitInteger(int number, int *digitsArray) {
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
    int temp = number;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
    for (int b = 0; b < 5; b++) {
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	e01d      	b.n	8003dac <splitInteger+0x50>
        digitsArray[4 - b] = temp % 10;  // Getting the last digit
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f1c3 0304 	rsb	r3, r3, #4
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	18d0      	adds	r0, r2, r3
 8003d7c:	68f9      	ldr	r1, [r7, #12]
 8003d7e:	4b10      	ldr	r3, [pc, #64]	@ (8003dc0 <splitInteger+0x64>)
 8003d80:	fb83 2301 	smull	r2, r3, r3, r1
 8003d84:	109a      	asrs	r2, r3, #2
 8003d86:	17cb      	asrs	r3, r1, #31
 8003d88:	1ad2      	subs	r2, r2, r3
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	1aca      	subs	r2, r1, r3
 8003d94:	6002      	str	r2, [r0, #0]
        temp /= 10;  // Removing the last digit
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4a09      	ldr	r2, [pc, #36]	@ (8003dc0 <splitInteger+0x64>)
 8003d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8003d9e:	1092      	asrs	r2, r2, #2
 8003da0:	17db      	asrs	r3, r3, #31
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	60fb      	str	r3, [r7, #12]
    for (int b = 0; b < 5; b++) {
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	ddde      	ble.n	8003d70 <splitInteger+0x14>
    }
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	66666667 	.word	0x66666667

08003dc4 <SensorRead>:
void SensorRead()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	ButtonTest[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8003dc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dd0:	f002 ff1e 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b39      	ldr	r3, [pc, #228]	@ (8003ec0 <SensorRead+0xfc>)
 8003dda:	601a      	str	r2, [r3, #0]
	ButtonTest[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8003ddc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003de0:	4838      	ldr	r0, [pc, #224]	@ (8003ec4 <SensorRead+0x100>)
 8003de2:	f002 ff15 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003de6:	4603      	mov	r3, r0
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b35      	ldr	r3, [pc, #212]	@ (8003ec0 <SensorRead+0xfc>)
 8003dec:	605a      	str	r2, [r3, #4]
	ButtonTest[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8003dee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003df2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003df6:	f002 ff0b 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b30      	ldr	r3, [pc, #192]	@ (8003ec0 <SensorRead+0xfc>)
 8003e00:	609a      	str	r2, [r3, #8]
	ButtonTest[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8003e02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e0a:	f002 ff01 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec0 <SensorRead+0xfc>)
 8003e14:	60da      	str	r2, [r3, #12]
	ButtonTest[4] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8003e16:	2180      	movs	r1, #128	@ 0x80
 8003e18:	482b      	ldr	r0, [pc, #172]	@ (8003ec8 <SensorRead+0x104>)
 8003e1a:	f002 fef9 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b27      	ldr	r3, [pc, #156]	@ (8003ec0 <SensorRead+0xfc>)
 8003e24:	611a      	str	r2, [r3, #16]
	ButtonTest[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8003e26:	2140      	movs	r1, #64	@ 0x40
 8003e28:	4826      	ldr	r0, [pc, #152]	@ (8003ec4 <SensorRead+0x100>)
 8003e2a:	f002 fef1 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b23      	ldr	r3, [pc, #140]	@ (8003ec0 <SensorRead+0xfc>)
 8003e34:	615a      	str	r2, [r3, #20]
	LeadSW[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8003e36:	2101      	movs	r1, #1
 8003e38:	4822      	ldr	r0, [pc, #136]	@ (8003ec4 <SensorRead+0x100>)
 8003e3a:	f002 fee9 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b22      	ldr	r3, [pc, #136]	@ (8003ecc <SensorRead+0x108>)
 8003e44:	601a      	str	r2, [r3, #0]
	LeadSW[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8003e46:	2102      	movs	r1, #2
 8003e48:	481f      	ldr	r0, [pc, #124]	@ (8003ec8 <SensorRead+0x104>)
 8003e4a:	f002 fee1 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <SensorRead+0x108>)
 8003e54:	605a      	str	r2, [r3, #4]
	test = LeadSW[1] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1);
 8003e56:	4b1d      	ldr	r3, [pc, #116]	@ (8003ecc <SensorRead+0x108>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <SensorRead+0xaa>
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <SensorRead+0x108>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <SensorRead+0xae>
 8003e66:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <SensorRead+0x108>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <SensorRead+0xae>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <SensorRead+0xb0>
 8003e72:	2300      	movs	r3, #0
 8003e74:	4a16      	ldr	r2, [pc, #88]	@ (8003ed0 <SensorRead+0x10c>)
 8003e76:	6013      	str	r3, [r2, #0]
	test2 = LeadSW[0] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1);
 8003e78:	4b14      	ldr	r3, [pc, #80]	@ (8003ecc <SensorRead+0x108>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <SensorRead+0xcc>
 8003e80:	4b12      	ldr	r3, [pc, #72]	@ (8003ecc <SensorRead+0x108>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <SensorRead+0xd0>
 8003e88:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <SensorRead+0x108>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <SensorRead+0xd0>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <SensorRead+0xd2>
 8003e94:	2300      	movs	r3, #0
 8003e96:	4a0f      	ldr	r2, [pc, #60]	@ (8003ed4 <SensorRead+0x110>)
 8003e98:	6013      	str	r3, [r2, #0]
	emer = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //emer
 8003e9a:	2110      	movs	r1, #16
 8003e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ea0:	f002 feb6 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <SensorRead+0x114>)
 8003eaa:	601a      	str	r2, [r3, #0]
	resetBut = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2); //reset
 8003eac:	2104      	movs	r1, #4
 8003eae:	4805      	ldr	r0, [pc, #20]	@ (8003ec4 <SensorRead+0x100>)
 8003eb0:	f002 feae 	bl	8006c10 <HAL_GPIO_ReadPin>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <SensorRead+0x118>)
 8003eba:	601a      	str	r2, [r3, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200011c4 	.word	0x200011c4
 8003ec4:	48000400 	.word	0x48000400
 8003ec8:	48000800 	.word	0x48000800
 8003ecc:	200011dc 	.word	0x200011dc
 8003ed0:	200011a8 	.word	0x200011a8
 8003ed4:	200011ac 	.word	0x200011ac
 8003ed8:	20001218 	.word	0x20001218
 8003edc:	2000121c 	.word	0x2000121c

08003ee0 <HAL_TIM_PeriodElapsedCallback>:
//		CountProxi = 0;
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b5b0      	push	{r4, r5, r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0c      	ldr	r2, [pc, #48]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d108      	bne.n	8003f02 <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	1e54      	subs	r4, r2, #1
 8003ef8:	f143 0500 	adc.w	r5, r3, #0
 8003efc:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003efe:	e9c3 4500 	strd	r4, r5, [r3]
}
if(htim == &htim6)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a07      	ldr	r2, [pc, #28]	@ (8003f24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d103      	bne.n	8003f12 <HAL_TIM_PeriodElapsedCallback+0x32>
{
	Heartbeat();
 8003f0a:	f7ff fd2f 	bl	800396c <Heartbeat>
	Routine();
 8003f0e:	f7ff fd3b 	bl	8003988 <Routine>
}
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bdb0      	pop	{r4, r5, r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000644 	.word	0x20000644
 8003f20:	20001348 	.word	0x20001348
 8003f24:	20000710 	.word	0x20000710

08003f28 <micros>:
uint64_t micros()
{
 8003f28:	b4b0      	push	{r4, r5, r7}
 8003f2a:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <micros+0x2c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	2200      	movs	r2, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	4611      	mov	r1, r2
 8003f38:	4b07      	ldr	r3, [pc, #28]	@ (8003f58 <micros+0x30>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	1884      	adds	r4, r0, r2
 8003f40:	eb41 0503 	adc.w	r5, r1, r3
 8003f44:	4622      	mov	r2, r4
 8003f46:	462b      	mov	r3, r5
}
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bcb0      	pop	{r4, r5, r7}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000644 	.word	0x20000644
 8003f58:	20001348 	.word	0x20001348

08003f5c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6c:	d102      	bne.n	8003f74 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start  = 1;
 8003f6e:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <HAL_GPIO_EXTI_Callback+0x24>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
//	if(GPIO_Pin == GPIO_PIN_5)
//	{
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//		HOME = 2;
//	}
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	200011b0 	.word	0x200011b0

08003f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f88:	b672      	cpsid	i
}
 8003f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <Error_Handler+0x8>

08003f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f96:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <HAL_MspInit+0x44>)
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd4 <HAL_MspInit+0x44>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <HAL_MspInit+0x44>)
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	4b09      	ldr	r3, [pc, #36]	@ (8003fd4 <HAL_MspInit+0x44>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	4a08      	ldr	r2, [pc, #32]	@ (8003fd4 <HAL_MspInit+0x44>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fba:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <HAL_MspInit+0x44>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003fc6:	f002 ff29 	bl	8006e1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000

08003fd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b09e      	sub	sp, #120	@ 0x78
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ff0:	f107 0310 	add.w	r3, r7, #16
 8003ff4:	2254      	movs	r2, #84	@ 0x54
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f007 fded 	bl	800bbd8 <memset>
  if(hadc->Instance==ADC3)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a33      	ldr	r2, [pc, #204]	@ (80040d0 <HAL_ADC_MspInit+0xf8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d15f      	bne.n	80040c8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8004008:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800400c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800400e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004012:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004014:	f107 0310 	add.w	r3, r7, #16
 8004018:	4618      	mov	r0, r3
 800401a:	f003 fc3d 	bl	8007898 <HAL_RCCEx_PeriphCLKConfig>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004024:	f7ff ffae 	bl	8003f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8004028:	4b2a      	ldr	r3, [pc, #168]	@ (80040d4 <HAL_ADC_MspInit+0xfc>)
 800402a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402c:	4a29      	ldr	r2, [pc, #164]	@ (80040d4 <HAL_ADC_MspInit+0xfc>)
 800402e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004032:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004034:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <HAL_ADC_MspInit+0xfc>)
 8004036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004040:	4b24      	ldr	r3, [pc, #144]	@ (80040d4 <HAL_ADC_MspInit+0xfc>)
 8004042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004044:	4a23      	ldr	r2, [pc, #140]	@ (80040d4 <HAL_ADC_MspInit+0xfc>)
 8004046:	f043 0302 	orr.w	r3, r3, #2
 800404a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800404c:	4b21      	ldr	r3, [pc, #132]	@ (80040d4 <HAL_ADC_MspInit+0xfc>)
 800404e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = JOY_Y_Pin|JOY_X_Pin;
 8004058:	f242 0302 	movw	r3, #8194	@ 0x2002
 800405c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800405e:	2303      	movs	r3, #3
 8004060:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	2300      	movs	r3, #0
 8004064:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004066:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800406a:	4619      	mov	r1, r3
 800406c:	481a      	ldr	r0, [pc, #104]	@ (80040d8 <HAL_ADC_MspInit+0x100>)
 800406e:	f002 fc4d 	bl	800690c <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel3;
 8004072:	4b1a      	ldr	r3, [pc, #104]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 8004074:	4a1a      	ldr	r2, [pc, #104]	@ (80040e0 <HAL_ADC_MspInit+0x108>)
 8004076:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8004078:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 800407a:	2225      	movs	r2, #37	@ 0x25
 800407c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800407e:	4b17      	ldr	r3, [pc, #92]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004084:	4b15      	ldr	r3, [pc, #84]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 8004086:	2200      	movs	r2, #0
 8004088:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800408a:	4b14      	ldr	r3, [pc, #80]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 800408c:	2280      	movs	r2, #128	@ 0x80
 800408e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004090:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 8004092:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004096:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004098:	4b10      	ldr	r3, [pc, #64]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 800409a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800409e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80040a0:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 80040a2:	2220      	movs	r2, #32
 80040a4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80040ac:	480b      	ldr	r0, [pc, #44]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 80040ae:	f002 f8fb 	bl	80062a8 <HAL_DMA_Init>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80040b8:	f7ff ff64 	bl	8003f84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a07      	ldr	r2, [pc, #28]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 80040c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80040c2:	4a06      	ldr	r2, [pc, #24]	@ (80040dc <HAL_ADC_MspInit+0x104>)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80040c8:	bf00      	nop
 80040ca:	3778      	adds	r7, #120	@ 0x78
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	50000400 	.word	0x50000400
 80040d4:	40021000 	.word	0x40021000
 80040d8:	48000400 	.word	0x48000400
 80040dc:	200002b4 	.word	0x200002b4
 80040e0:	40020030 	.word	0x40020030

080040e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	@ 0x28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004230 <HAL_TIM_Base_MspInit+0x14c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d114      	bne.n	8004120 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 80040f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 80040fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004100:	6613      	str	r3, [r2, #96]	@ 0x60
 8004102:	4b4c      	ldr	r3, [pc, #304]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	2019      	movs	r0, #25
 8004114:	f002 f893 	bl	800623e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004118:	2019      	movs	r0, #25
 800411a:	f002 f8aa 	bl	8006272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800411e:	e082      	b.n	8004226 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004128:	d10c      	bne.n	8004144 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800412a:	4b42      	ldr	r3, [pc, #264]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412e:	4a41      	ldr	r2, [pc, #260]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6593      	str	r3, [r2, #88]	@ 0x58
 8004136:	4b3f      	ldr	r3, [pc, #252]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	6a3b      	ldr	r3, [r7, #32]
}
 8004142:	e070      	b.n	8004226 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a3b      	ldr	r2, [pc, #236]	@ (8004238 <HAL_TIM_Base_MspInit+0x154>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d10c      	bne.n	8004168 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800414e:	4b39      	ldr	r3, [pc, #228]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	4a38      	ldr	r2, [pc, #224]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6593      	str	r3, [r2, #88]	@ 0x58
 800415a:	4b36      	ldr	r3, [pc, #216]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	69fb      	ldr	r3, [r7, #28]
}
 8004166:	e05e      	b.n	8004226 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM5)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a33      	ldr	r2, [pc, #204]	@ (800423c <HAL_TIM_Base_MspInit+0x158>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d114      	bne.n	800419c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004172:	4b30      	ldr	r3, [pc, #192]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004176:	4a2f      	ldr	r2, [pc, #188]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004178:	f043 0308 	orr.w	r3, r3, #8
 800417c:	6593      	str	r3, [r2, #88]	@ 0x58
 800417e:	4b2d      	ldr	r3, [pc, #180]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800418a:	2200      	movs	r2, #0
 800418c:	2100      	movs	r1, #0
 800418e:	2032      	movs	r0, #50	@ 0x32
 8004190:	f002 f855 	bl	800623e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004194:	2032      	movs	r0, #50	@ 0x32
 8004196:	f002 f86c 	bl	8006272 <HAL_NVIC_EnableIRQ>
}
 800419a:	e044      	b.n	8004226 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a27      	ldr	r2, [pc, #156]	@ (8004240 <HAL_TIM_Base_MspInit+0x15c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d114      	bne.n	80041d0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041a6:	4b23      	ldr	r3, [pc, #140]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041aa:	4a22      	ldr	r2, [pc, #136]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 80041ac:	f043 0310 	orr.w	r3, r3, #16
 80041b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b2:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	2100      	movs	r1, #0
 80041c2:	2036      	movs	r0, #54	@ 0x36
 80041c4:	f002 f83b 	bl	800623e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041c8:	2036      	movs	r0, #54	@ 0x36
 80041ca:	f002 f852 	bl	8006272 <HAL_NVIC_EnableIRQ>
}
 80041ce:	e02a      	b.n	8004226 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <HAL_TIM_Base_MspInit+0x160>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10c      	bne.n	80041f4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80041da:	4b16      	ldr	r3, [pc, #88]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 80041dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041de:	4a15      	ldr	r2, [pc, #84]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 80041e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80041e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80041e6:	4b13      	ldr	r3, [pc, #76]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	693b      	ldr	r3, [r7, #16]
}
 80041f2:	e018      	b.n	8004226 <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a13      	ldr	r2, [pc, #76]	@ (8004248 <HAL_TIM_Base_MspInit+0x164>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80041fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004202:	4a0c      	ldr	r2, [pc, #48]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 8004204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004208:	6613      	str	r3, [r2, #96]	@ 0x60
 800420a:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <HAL_TIM_Base_MspInit+0x150>)
 800420c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004216:	2200      	movs	r2, #0
 8004218:	2100      	movs	r1, #0
 800421a:	2019      	movs	r0, #25
 800421c:	f002 f80f 	bl	800623e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004220:	2019      	movs	r0, #25
 8004222:	f002 f826 	bl	8006272 <HAL_NVIC_EnableIRQ>
}
 8004226:	bf00      	nop
 8004228:	3728      	adds	r7, #40	@ 0x28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40000800 	.word	0x40000800
 800423c:	40000c00 	.word	0x40000c00
 8004240:	40001000 	.word	0x40001000
 8004244:	40013400 	.word	0x40013400
 8004248:	40014400 	.word	0x40014400

0800424c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	@ 0x28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d130      	bne.n	80042d0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800426e:	4b1b      	ldr	r3, [pc, #108]	@ (80042dc <HAL_TIM_Encoder_MspInit+0x90>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004272:	4a1a      	ldr	r2, [pc, #104]	@ (80042dc <HAL_TIM_Encoder_MspInit+0x90>)
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	6593      	str	r3, [r2, #88]	@ 0x58
 800427a:	4b18      	ldr	r3, [pc, #96]	@ (80042dc <HAL_TIM_Encoder_MspInit+0x90>)
 800427c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	4b15      	ldr	r3, [pc, #84]	@ (80042dc <HAL_TIM_Encoder_MspInit+0x90>)
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	4a14      	ldr	r2, [pc, #80]	@ (80042dc <HAL_TIM_Encoder_MspInit+0x90>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004292:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_TIM_Encoder_MspInit+0x90>)
 8004294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_Encoder_A_Pin|TIM3_Encoder_B_Pin;
 800429e:	23c0      	movs	r3, #192	@ 0xc0
 80042a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a2:	2302      	movs	r3, #2
 80042a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042aa:	2300      	movs	r3, #0
 80042ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042ae:	2302      	movs	r3, #2
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b2:	f107 0314 	add.w	r3, r7, #20
 80042b6:	4619      	mov	r1, r3
 80042b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042bc:	f002 fb26 	bl	800690c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042c0:	2200      	movs	r2, #0
 80042c2:	2100      	movs	r1, #0
 80042c4:	201d      	movs	r0, #29
 80042c6:	f001 ffba 	bl	800623e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042ca:	201d      	movs	r0, #29
 80042cc:	f001 ffd1 	bl	8006272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80042d0:	bf00      	nop
 80042d2:	3728      	adds	r7, #40	@ 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40021000 	.word	0x40021000

080042e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <HAL_TIM_MspPostInit+0x68>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d11d      	bne.n	800433e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004302:	4b12      	ldr	r3, [pc, #72]	@ (800434c <HAL_TIM_MspPostInit+0x6c>)
 8004304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004306:	4a11      	ldr	r2, [pc, #68]	@ (800434c <HAL_TIM_MspPostInit+0x6c>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800430e:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <HAL_TIM_MspPostInit+0x6c>)
 8004310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_PWM_Pin;
 800431a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800431e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800432c:	230a      	movs	r3, #10
 800432e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_PWM_GPIO_Port, &GPIO_InitStruct);
 8004330:	f107 030c 	add.w	r3, r7, #12
 8004334:	4619      	mov	r1, r3
 8004336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800433a:	f002 fae7 	bl	800690c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800433e:	bf00      	nop
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40000800 	.word	0x40000800
 800434c:	40021000 	.word	0x40021000

08004350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b09e      	sub	sp, #120	@ 0x78
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004358:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004368:	f107 0310 	add.w	r3, r7, #16
 800436c:	2254      	movs	r2, #84	@ 0x54
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f007 fc31 	bl	800bbd8 <memset>
  if(huart->Instance==USART2)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a4d      	ldr	r2, [pc, #308]	@ (80044b0 <HAL_UART_MspInit+0x160>)
 800437c:	4293      	cmp	r3, r2
 800437e:	f040 8092 	bne.w	80044a6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004382:	2302      	movs	r3, #2
 8004384:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800438a:	f107 0310 	add.w	r3, r7, #16
 800438e:	4618      	mov	r0, r3
 8004390:	f003 fa82 	bl	8007898 <HAL_RCCEx_PeriphCLKConfig>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800439a:	f7ff fdf3 	bl	8003f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800439e:	4b45      	ldr	r3, [pc, #276]	@ (80044b4 <HAL_UART_MspInit+0x164>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	4a44      	ldr	r2, [pc, #272]	@ (80044b4 <HAL_UART_MspInit+0x164>)
 80043a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043aa:	4b42      	ldr	r3, [pc, #264]	@ (80044b4 <HAL_UART_MspInit+0x164>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b6:	4b3f      	ldr	r3, [pc, #252]	@ (80044b4 <HAL_UART_MspInit+0x164>)
 80043b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ba:	4a3e      	ldr	r2, [pc, #248]	@ (80044b4 <HAL_UART_MspInit+0x164>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043c2:	4b3c      	ldr	r3, [pc, #240]	@ (80044b4 <HAL_UART_MspInit+0x164>)
 80043c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80043ce:	230c      	movs	r3, #12
 80043d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d2:	2302      	movs	r3, #2
 80043d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043da:	2300      	movs	r3, #0
 80043dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043de:	2307      	movs	r3, #7
 80043e0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043e6:	4619      	mov	r1, r3
 80043e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043ec:	f002 fa8e 	bl	800690c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80043f0:	4b31      	ldr	r3, [pc, #196]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 80043f2:	4a32      	ldr	r2, [pc, #200]	@ (80044bc <HAL_UART_MspInit+0x16c>)
 80043f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80043f6:	4b30      	ldr	r3, [pc, #192]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 80043f8:	221a      	movs	r2, #26
 80043fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043fc:	4b2e      	ldr	r3, [pc, #184]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 80043fe:	2200      	movs	r2, #0
 8004400:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004402:	4b2d      	ldr	r3, [pc, #180]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 8004404:	2200      	movs	r2, #0
 8004406:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004408:	4b2b      	ldr	r3, [pc, #172]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 800440a:	2280      	movs	r2, #128	@ 0x80
 800440c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800440e:	4b2a      	ldr	r3, [pc, #168]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 8004410:	2200      	movs	r2, #0
 8004412:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004414:	4b28      	ldr	r3, [pc, #160]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 8004416:	2200      	movs	r2, #0
 8004418:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800441a:	4b27      	ldr	r3, [pc, #156]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 800441c:	2200      	movs	r2, #0
 800441e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004420:	4b25      	ldr	r3, [pc, #148]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 8004422:	2200      	movs	r2, #0
 8004424:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004426:	4824      	ldr	r0, [pc, #144]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 8004428:	f001 ff3e 	bl	80062a8 <HAL_DMA_Init>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004432:	f7ff fda7 	bl	8003f84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1f      	ldr	r2, [pc, #124]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 800443a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800443e:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <HAL_UART_MspInit+0x168>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004444:	4b1e      	ldr	r3, [pc, #120]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 8004446:	4a1f      	ldr	r2, [pc, #124]	@ (80044c4 <HAL_UART_MspInit+0x174>)
 8004448:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800444a:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 800444c:	221b      	movs	r2, #27
 800444e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004450:	4b1b      	ldr	r3, [pc, #108]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 8004452:	2210      	movs	r2, #16
 8004454:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004456:	4b1a      	ldr	r3, [pc, #104]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 8004458:	2200      	movs	r2, #0
 800445a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800445c:	4b18      	ldr	r3, [pc, #96]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 800445e:	2280      	movs	r2, #128	@ 0x80
 8004460:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004462:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 8004464:	2200      	movs	r2, #0
 8004466:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004468:	4b15      	ldr	r3, [pc, #84]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 800446a:	2200      	movs	r2, #0
 800446c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800446e:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 8004470:	2200      	movs	r2, #0
 8004472:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004474:	4b12      	ldr	r3, [pc, #72]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 8004476:	2200      	movs	r2, #0
 8004478:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800447a:	4811      	ldr	r0, [pc, #68]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 800447c:	f001 ff14 	bl	80062a8 <HAL_DMA_Init>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004486:	f7ff fd7d 	bl	8003f84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a0c      	ldr	r2, [pc, #48]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 800448e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004490:	4a0b      	ldr	r2, [pc, #44]	@ (80044c0 <HAL_UART_MspInit+0x170>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	2026      	movs	r0, #38	@ 0x26
 800449c:	f001 fecf 	bl	800623e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044a0:	2026      	movs	r0, #38	@ 0x26
 80044a2:	f001 fee6 	bl	8006272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044a6:	bf00      	nop
 80044a8:	3778      	adds	r7, #120	@ 0x78
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40004400 	.word	0x40004400
 80044b4:	40021000 	.word	0x40021000
 80044b8:	20000a40 	.word	0x20000a40
 80044bc:	40020008 	.word	0x40020008
 80044c0:	20000aa0 	.word	0x20000aa0
 80044c4:	4002001c 	.word	0x4002001c

080044c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044cc:	bf00      	nop
 80044ce:	e7fd      	b.n	80044cc <NMI_Handler+0x4>

080044d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <HardFault_Handler+0x4>

080044d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <MemManage_Handler+0x4>

080044e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <BusFault_Handler+0x4>

080044e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <UsageFault_Handler+0x4>

080044f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004510:	bf00      	nop
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800451e:	f000 f8fb 	bl	8004718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}

08004526 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lowerprox_Pin);
 800452a:	2010      	movs	r0, #16
 800452c:	f002 fbba 	bl	8006ca4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004530:	bf00      	nop
 8004532:	bd80      	pop	{r7, pc}

08004534 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004538:	4802      	ldr	r0, [pc, #8]	@ (8004544 <DMA1_Channel1_IRQHandler+0x10>)
 800453a:	f002 f898 	bl	800666e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000a40 	.word	0x20000a40

08004548 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800454c:	4802      	ldr	r0, [pc, #8]	@ (8004558 <DMA1_Channel2_IRQHandler+0x10>)
 800454e:	f002 f88e 	bl	800666e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000aa0 	.word	0x20000aa0

0800455c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004560:	4802      	ldr	r0, [pc, #8]	@ (800456c <DMA1_Channel3_IRQHandler+0x10>)
 8004562:	f002 f884 	bl	800666e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200002b4 	.word	0x200002b4

08004570 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UpperProx_Pin);
 8004574:	2020      	movs	r0, #32
 8004576:	f002 fb95 	bl	8006ca4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004584:	4803      	ldr	r0, [pc, #12]	@ (8004594 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004586:	f004 f8d9 	bl	800873c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800458a:	4803      	ldr	r0, [pc, #12]	@ (8004598 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800458c:	f004 f8d6 	bl	800873c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000314 	.word	0x20000314
 8004598:	200008a8 	.word	0x200008a8

0800459c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045a0:	4802      	ldr	r0, [pc, #8]	@ (80045ac <TIM3_IRQHandler+0x10>)
 80045a2:	f004 f8cb 	bl	800873c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045a6:	bf00      	nop
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	200004ac 	.word	0x200004ac

080045b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045b4:	4802      	ldr	r0, [pc, #8]	@ (80045c0 <USART2_IRQHandler+0x10>)
 80045b6:	f005 fe01 	bl	800a1bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000974 	.word	0x20000974

080045c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80045c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80045cc:	f002 fb6a 	bl	8006ca4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80045d8:	4802      	ldr	r0, [pc, #8]	@ (80045e4 <TIM5_IRQHandler+0x10>)
 80045da:	f004 f8af 	bl	800873c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000644 	.word	0x20000644

080045e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80045ec:	4802      	ldr	r0, [pc, #8]	@ (80045f8 <TIM6_DAC_IRQHandler+0x10>)
 80045ee:	f004 f8a5 	bl	800873c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000710 	.word	0x20000710

080045fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004600:	4b06      	ldr	r3, [pc, #24]	@ (800461c <SystemInit+0x20>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004606:	4a05      	ldr	r2, [pc, #20]	@ (800461c <SystemInit+0x20>)
 8004608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800460c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004620:	480d      	ldr	r0, [pc, #52]	@ (8004658 <LoopForever+0x2>)

  mov   sp, r0          /* set stack pointer */
 8004622:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004624:	f7ff ffea 	bl	80045fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004628:	480c      	ldr	r0, [pc, #48]	@ (800465c <LoopForever+0x6>)
  ldr r1, =_edata
 800462a:	490d      	ldr	r1, [pc, #52]	@ (8004660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800462c:	4a0d      	ldr	r2, [pc, #52]	@ (8004664 <LoopForever+0xe>)
  movs r3, #0
 800462e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004630:	e002      	b.n	8004638 <LoopCopyDataInit>

08004632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004636:	3304      	adds	r3, #4

08004638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800463a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800463c:	d3f9      	bcc.n	8004632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800463e:	4a0a      	ldr	r2, [pc, #40]	@ (8004668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004640:	4c0a      	ldr	r4, [pc, #40]	@ (800466c <LoopForever+0x16>)
  movs r3, #0
 8004642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004644:	e001      	b.n	800464a <LoopFillZerobss>

08004646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004648:	3204      	adds	r2, #4

0800464a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800464a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800464c:	d3fb      	bcc.n	8004646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800464e:	f007 facb 	bl	800bbe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004652:	f7fc ff55 	bl	8001500 <main>

08004656 <LoopForever>:

LoopForever:
    b LoopForever
 8004656:	e7fe      	b.n	8004656 <LoopForever>
  ldr   r0, =_estack
 8004658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800465c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004660:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8004664:	0800bcb4 	.word	0x0800bcb4
  ldr r2, =_sbss
 8004668:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800466c:	200013a4 	.word	0x200013a4

08004670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004670:	e7fe      	b.n	8004670 <ADC1_2_IRQHandler>

08004672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800467c:	2003      	movs	r0, #3
 800467e:	f001 fdd3 	bl	8006228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004682:	2000      	movs	r0, #0
 8004684:	f000 f80e 	bl	80046a4 <HAL_InitTick>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	71fb      	strb	r3, [r7, #7]
 8004692:	e001      	b.n	8004698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004694:	f7ff fc7c 	bl	8003f90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004698:	79fb      	ldrb	r3, [r7, #7]

}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80046b0:	4b16      	ldr	r3, [pc, #88]	@ (800470c <HAL_InitTick+0x68>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d022      	beq.n	80046fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80046b8:	4b15      	ldr	r3, [pc, #84]	@ (8004710 <HAL_InitTick+0x6c>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4b13      	ldr	r3, [pc, #76]	@ (800470c <HAL_InitTick+0x68>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80046c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 fdde 	bl	800628e <HAL_SYSTICK_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10f      	bne.n	80046f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	d809      	bhi.n	80046f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046de:	2200      	movs	r2, #0
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	f001 fdaa 	bl	800623e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004714 <HAL_InitTick+0x70>)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e007      	b.n	8004702 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
 80046f6:	e004      	b.n	8004702 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	e001      	b.n	8004702 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000220 	.word	0x20000220
 8004710:	20000218 	.word	0x20000218
 8004714:	2000021c 	.word	0x2000021c

08004718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <HAL_IncTick+0x1c>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_IncTick+0x20>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4413      	add	r3, r2
 8004726:	4a03      	ldr	r2, [pc, #12]	@ (8004734 <HAL_IncTick+0x1c>)
 8004728:	6013      	str	r3, [r2, #0]
}
 800472a:	bf00      	nop
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	200013a0 	.word	0x200013a0
 8004738:	20000220 	.word	0x20000220

0800473c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  return uwTick;
 8004740:	4b03      	ldr	r3, [pc, #12]	@ (8004750 <HAL_GetTick+0x14>)
 8004742:	681b      	ldr	r3, [r3, #0]
}
 8004744:	4618      	mov	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	200013a0 	.word	0x200013a0

08004754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800475c:	f7ff ffee 	bl	800473c <HAL_GetTick>
 8004760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476c:	d004      	beq.n	8004778 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800476e:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <HAL_Delay+0x40>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004778:	bf00      	nop
 800477a:	f7ff ffdf 	bl	800473c <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	429a      	cmp	r2, r3
 8004788:	d8f7      	bhi.n	800477a <HAL_Delay+0x26>
  {
  }
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000220 	.word	0x20000220

08004798 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3360      	adds	r3, #96	@ 0x60
 8004812:	461a      	mov	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b08      	ldr	r3, [pc, #32]	@ (8004844 <LL_ADC_SetOffset+0x44>)
 8004822:	4013      	ands	r3, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	03fff000 	.word	0x03fff000

08004848 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3360      	adds	r3, #96	@ 0x60
 8004856:	461a      	mov	r2, r3
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3360      	adds	r3, #96	@ 0x60
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	431a      	orrs	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b087      	sub	sp, #28
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3360      	adds	r3, #96	@ 0x60
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3360      	adds	r3, #96	@ 0x60
 80048f0:	461a      	mov	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	431a      	orrs	r2, r3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	615a      	str	r2, [r3, #20]
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004962:	b480      	push	{r7}
 8004964:	b087      	sub	sp, #28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3330      	adds	r3, #48	@ 0x30
 8004972:	461a      	mov	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	4413      	add	r3, r2
 8004980:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	211f      	movs	r1, #31
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	401a      	ands	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0e9b      	lsrs	r3, r3, #26
 800499a:	f003 011f 	and.w	r1, r3, #31
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	fa01 f303 	lsl.w	r3, r1, r3
 80049a8:	431a      	orrs	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b087      	sub	sp, #28
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3314      	adds	r3, #20
 80049ca:	461a      	mov	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	0e5b      	lsrs	r3, r3, #25
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	4413      	add	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	0d1b      	lsrs	r3, r3, #20
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2107      	movs	r1, #7
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	401a      	ands	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	0d1b      	lsrs	r3, r3, #20
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	fa01 f303 	lsl.w	r3, r1, r3
 80049fe:	431a      	orrs	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f003 0318 	and.w	r3, r3, #24
 8004a32:	4908      	ldr	r1, [pc, #32]	@ (8004a54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a34:	40d9      	lsrs	r1, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	400b      	ands	r3, r1
 8004a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	0007ffff 	.word	0x0007ffff

08004a58 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 031f 	and.w	r3, r3, #31
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004a84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6093      	str	r3, [r2, #8]
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aac:	d101      	bne.n	8004ab2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004ad0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ad4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004afc:	d101      	bne.n	8004b02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b24:	f043 0201 	orr.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b4c:	f043 0202 	orr.w	r2, r3, #2
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <LL_ADC_IsEnabled+0x18>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <LL_ADC_IsEnabled+0x1a>
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d101      	bne.n	8004b9e <LL_ADC_IsDisableOngoing+0x18>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <LL_ADC_IsDisableOngoing+0x1a>
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bc0:	f043 0204 	orr.w	r2, r3, #4
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d101      	bne.n	8004bec <LL_ADC_REG_IsConversionOngoing+0x18>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d101      	bne.n	8004c12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e1a9      	b.n	8004f8e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff f9c5 	bl	8003fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff19 	bl	8004a98 <LL_ADC_IsDeepPowerDownEnabled>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff feff 	bl	8004a74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff ff34 	bl	8004ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d115      	bne.n	8004cb2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff ff18 	bl	8004ac0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c90:	4b9c      	ldr	r3, [pc, #624]	@ (8004f04 <HAL_ADC_Init+0x2e4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	099b      	lsrs	r3, r3, #6
 8004c96:	4a9c      	ldr	r2, [pc, #624]	@ (8004f08 <HAL_ADC_Init+0x2e8>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	099b      	lsrs	r3, r3, #6
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ca4:	e002      	b.n	8004cac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f9      	bne.n	8004ca6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff ff16 	bl	8004ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10d      	bne.n	8004cde <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	f043 0210 	orr.w	r2, r3, #16
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff ff76 	bl	8004bd4 <LL_ADC_REG_IsConversionOngoing>
 8004ce8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f040 8142 	bne.w	8004f7c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f040 813e 	bne.w	8004f7c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d04:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d08:	f043 0202 	orr.w	r2, r3, #2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff ff23 	bl	8004b60 <LL_ADC_IsEnabled>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d141      	bne.n	8004da4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d28:	d004      	beq.n	8004d34 <HAL_ADC_Init+0x114>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a77      	ldr	r2, [pc, #476]	@ (8004f0c <HAL_ADC_Init+0x2ec>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d10f      	bne.n	8004d54 <HAL_ADC_Init+0x134>
 8004d34:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d38:	f7ff ff12 	bl	8004b60 <LL_ADC_IsEnabled>
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	4873      	ldr	r0, [pc, #460]	@ (8004f0c <HAL_ADC_Init+0x2ec>)
 8004d40:	f7ff ff0e 	bl	8004b60 <LL_ADC_IsEnabled>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4323      	orrs	r3, r4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e012      	b.n	8004d7a <HAL_ADC_Init+0x15a>
 8004d54:	486e      	ldr	r0, [pc, #440]	@ (8004f10 <HAL_ADC_Init+0x2f0>)
 8004d56:	f7ff ff03 	bl	8004b60 <LL_ADC_IsEnabled>
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	486d      	ldr	r0, [pc, #436]	@ (8004f14 <HAL_ADC_Init+0x2f4>)
 8004d5e:	f7ff feff 	bl	8004b60 <LL_ADC_IsEnabled>
 8004d62:	4603      	mov	r3, r0
 8004d64:	431c      	orrs	r4, r3
 8004d66:	486c      	ldr	r0, [pc, #432]	@ (8004f18 <HAL_ADC_Init+0x2f8>)
 8004d68:	f7ff fefa 	bl	8004b60 <LL_ADC_IsEnabled>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4323      	orrs	r3, r4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d012      	beq.n	8004da4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d86:	d004      	beq.n	8004d92 <HAL_ADC_Init+0x172>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f0c <HAL_ADC_Init+0x2ec>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_ADC_Init+0x176>
 8004d92:	4a62      	ldr	r2, [pc, #392]	@ (8004f1c <HAL_ADC_Init+0x2fc>)
 8004d94:	e000      	b.n	8004d98 <HAL_ADC_Init+0x178>
 8004d96:	4a62      	ldr	r2, [pc, #392]	@ (8004f20 <HAL_ADC_Init+0x300>)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f7ff fcfa 	bl	8004798 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	7f5b      	ldrb	r3, [r3, #29]
 8004da8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004dae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004db4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004dba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dc2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d106      	bne.n	8004de0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	045b      	lsls	r3, r3, #17
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d009      	beq.n	8004dfc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	4b48      	ldr	r3, [pc, #288]	@ (8004f24 <HAL_ADC_Init+0x304>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fee5 	bl	8004bfa <LL_ADC_INJ_IsConversionOngoing>
 8004e30:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d17f      	bne.n	8004f38 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d17c      	bne.n	8004f38 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004e42:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e4a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e5a:	f023 0302 	bic.w	r3, r3, #2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	69b9      	ldr	r1, [r7, #24]
 8004e64:	430b      	orrs	r3, r1
 8004e66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d017      	beq.n	8004ea0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e88:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004e8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6911      	ldr	r1, [r2, #16]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004e9e:	e013      	b.n	8004ec8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004eae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ec4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d12a      	bne.n	8004f28 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ee8:	4311      	orrs	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004eee:	4311      	orrs	r1, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	611a      	str	r2, [r3, #16]
 8004f02:	e019      	b.n	8004f38 <HAL_ADC_Init+0x318>
 8004f04:	20000218 	.word	0x20000218
 8004f08:	053e2d63 	.word	0x053e2d63
 8004f0c:	50000100 	.word	0x50000100
 8004f10:	50000400 	.word	0x50000400
 8004f14:	50000500 	.word	0x50000500
 8004f18:	50000600 	.word	0x50000600
 8004f1c:	50000300 	.word	0x50000300
 8004f20:	50000700 	.word	0x50000700
 8004f24:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10c      	bne.n	8004f5a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	f023 010f 	bic.w	r1, r3, #15
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	1e5a      	subs	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f58:	e007      	b.n	8004f6a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 020f 	bic.w	r2, r2, #15
 8004f68:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f7a:	e007      	b.n	8004f8c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f80:	f043 0210 	orr.w	r2, r3, #16
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3724      	adds	r7, #36	@ 0x24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}
 8004f96:	bf00      	nop

08004f98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fac:	d004      	beq.n	8004fb8 <HAL_ADC_Start_DMA+0x20>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800511c <HAL_ADC_Start_DMA+0x184>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <HAL_ADC_Start_DMA+0x24>
 8004fb8:	4b59      	ldr	r3, [pc, #356]	@ (8005120 <HAL_ADC_Start_DMA+0x188>)
 8004fba:	e000      	b.n	8004fbe <HAL_ADC_Start_DMA+0x26>
 8004fbc:	4b59      	ldr	r3, [pc, #356]	@ (8005124 <HAL_ADC_Start_DMA+0x18c>)
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fd4a 	bl	8004a58 <LL_ADC_GetMultimode>
 8004fc4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fe02 	bl	8004bd4 <LL_ADC_REG_IsConversionOngoing>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 809b 	bne.w	800510e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_ADC_Start_DMA+0x4e>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e096      	b.n	8005114 <HAL_ADC_Start_DMA+0x17c>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a4d      	ldr	r2, [pc, #308]	@ (8005128 <HAL_ADC_Start_DMA+0x190>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d008      	beq.n	800500a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b05      	cmp	r3, #5
 8005002:	d002      	beq.n	800500a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b09      	cmp	r3, #9
 8005008:	d17a      	bne.n	8005100 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 fcf6 	bl	80059fc <ADC_Enable>
 8005010:	4603      	mov	r3, r0
 8005012:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d16d      	bne.n	80050f6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3a      	ldr	r2, [pc, #232]	@ (800511c <HAL_ADC_Start_DMA+0x184>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_ADC_Start_DMA+0xb4>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a3b      	ldr	r2, [pc, #236]	@ (800512c <HAL_ADC_Start_DMA+0x194>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d002      	beq.n	8005048 <HAL_ADC_Start_DMA+0xb0>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	e003      	b.n	8005050 <HAL_ADC_Start_DMA+0xb8>
 8005048:	4b39      	ldr	r3, [pc, #228]	@ (8005130 <HAL_ADC_Start_DMA+0x198>)
 800504a:	e001      	b.n	8005050 <HAL_ADC_Start_DMA+0xb8>
 800504c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	4293      	cmp	r3, r2
 8005056:	d002      	beq.n	800505e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d105      	bne.n	800506a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d006      	beq.n	8005084 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800507a:	f023 0206 	bic.w	r2, r3, #6
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	661a      	str	r2, [r3, #96]	@ 0x60
 8005082:	e002      	b.n	800508a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508e:	4a29      	ldr	r2, [pc, #164]	@ (8005134 <HAL_ADC_Start_DMA+0x19c>)
 8005090:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005096:	4a28      	ldr	r2, [pc, #160]	@ (8005138 <HAL_ADC_Start_DMA+0x1a0>)
 8005098:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509e:	4a27      	ldr	r2, [pc, #156]	@ (800513c <HAL_ADC_Start_DMA+0x1a4>)
 80050a0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	221c      	movs	r2, #28
 80050a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0210 	orr.w	r2, r2, #16
 80050c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3340      	adds	r3, #64	@ 0x40
 80050dc:	4619      	mov	r1, r3
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f001 f989 	bl	80063f8 <HAL_DMA_Start_IT>
 80050e6:	4603      	mov	r3, r0
 80050e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fd5c 	bl	8004bac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80050f4:	e00d      	b.n	8005112 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80050fe:	e008      	b.n	8005112 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800510c:	e001      	b.n	8005112 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800510e:	2302      	movs	r3, #2
 8005110:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	50000100 	.word	0x50000100
 8005120:	50000300 	.word	0x50000300
 8005124:	50000700 	.word	0x50000700
 8005128:	50000600 	.word	0x50000600
 800512c:	50000500 	.word	0x50000500
 8005130:	50000400 	.word	0x50000400
 8005134:	08005be7 	.word	0x08005be7
 8005138:	08005cbf 	.word	0x08005cbf
 800513c:	08005cdb 	.word	0x08005cdb

08005140 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0b6      	sub	sp, #216	@ 0xd8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005196:	2b01      	cmp	r3, #1
 8005198:	d102      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x24>
 800519a:	2302      	movs	r3, #2
 800519c:	f000 bc13 	b.w	80059c6 <HAL_ADC_ConfigChannel+0x84a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fd11 	bl	8004bd4 <LL_ADC_REG_IsConversionOngoing>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 83f3 	bne.w	80059a0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f7ff fbcb 	bl	8004962 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fcff 	bl	8004bd4 <LL_ADC_REG_IsConversionOngoing>
 80051d6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fd0b 	bl	8004bfa <LL_ADC_INJ_IsConversionOngoing>
 80051e4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f040 81d9 	bne.w	80055a4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 81d4 	bne.w	80055a4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005204:	d10f      	bne.n	8005226 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	4619      	mov	r1, r3
 8005212:	f7ff fbd2 	bl	80049ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fb79 	bl	8004916 <LL_ADC_SetSamplingTimeCommonConfig>
 8005224:	e00e      	b.n	8005244 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6819      	ldr	r1, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	461a      	mov	r2, r3
 8005234:	f7ff fbc1 	bl	80049ba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fb69 	bl	8004916 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695a      	ldr	r2, [r3, #20]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	08db      	lsrs	r3, r3, #3
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b04      	cmp	r3, #4
 8005264:	d022      	beq.n	80052ac <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6919      	ldr	r1, [r3, #16]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005276:	f7ff fac3 	bl	8004800 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6919      	ldr	r1, [r3, #16]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	461a      	mov	r2, r3
 8005288:	f7ff fb0f 	bl	80048aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <HAL_ADC_ConfigChannel+0x126>
 800529c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052a0:	e000      	b.n	80052a4 <HAL_ADC_ConfigChannel+0x128>
 80052a2:	2300      	movs	r3, #0
 80052a4:	461a      	mov	r2, r3
 80052a6:	f7ff fb1b 	bl	80048e0 <LL_ADC_SetOffsetSaturation>
 80052aa:	e17b      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fac8 	bl	8004848 <LL_ADC_GetOffsetChannel>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <HAL_ADC_ConfigChannel+0x15c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fabd 	bl	8004848 <LL_ADC_GetOffsetChannel>
 80052ce:	4603      	mov	r3, r0
 80052d0:	0e9b      	lsrs	r3, r3, #26
 80052d2:	f003 021f 	and.w	r2, r3, #31
 80052d6:	e01e      	b.n	8005316 <HAL_ADC_ConfigChannel+0x19a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fab2 	bl	8004848 <LL_ADC_GetOffsetChannel>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052ee:	fa93 f3a3 	rbit	r3, r3
 80052f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005306:	2320      	movs	r3, #32
 8005308:	e004      	b.n	8005314 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800530a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800531e:	2b00      	cmp	r3, #0
 8005320:	d105      	bne.n	800532e <HAL_ADC_ConfigChannel+0x1b2>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	0e9b      	lsrs	r3, r3, #26
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	e018      	b.n	8005360 <HAL_ADC_ConfigChannel+0x1e4>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800533a:	fa93 f3a3 	rbit	r3, r3
 800533e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005346:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800534a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005352:	2320      	movs	r3, #32
 8005354:	e004      	b.n	8005360 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005360:	429a      	cmp	r2, r3
 8005362:	d106      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2200      	movs	r2, #0
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fa81 	bl	8004874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2101      	movs	r1, #1
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fa65 	bl	8004848 <LL_ADC_GetOffsetChannel>
 800537e:	4603      	mov	r3, r0
 8005380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <HAL_ADC_ConfigChannel+0x222>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fa5a 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005394:	4603      	mov	r3, r0
 8005396:	0e9b      	lsrs	r3, r3, #26
 8005398:	f003 021f 	and.w	r2, r3, #31
 800539c:	e01e      	b.n	80053dc <HAL_ADC_ConfigChannel+0x260>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2101      	movs	r1, #1
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff fa4f 	bl	8004848 <LL_ADC_GetOffsetChannel>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80053b4:	fa93 f3a3 	rbit	r3, r3
 80053b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80053bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80053c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80053cc:	2320      	movs	r3, #32
 80053ce:	e004      	b.n	80053da <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80053d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053d4:	fab3 f383 	clz	r3, r3
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x278>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0e9b      	lsrs	r3, r3, #26
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	e018      	b.n	8005426 <HAL_ADC_ConfigChannel+0x2aa>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005408:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800540c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005410:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005418:	2320      	movs	r3, #32
 800541a:	e004      	b.n	8005426 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800541c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005420:	fab3 f383 	clz	r3, r3
 8005424:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005426:	429a      	cmp	r2, r3
 8005428:	d106      	bne.n	8005438 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	2101      	movs	r1, #1
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fa1e 	bl	8004874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2102      	movs	r1, #2
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fa02 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005444:	4603      	mov	r3, r0
 8005446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <HAL_ADC_ConfigChannel+0x2e8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2102      	movs	r1, #2
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff f9f7 	bl	8004848 <LL_ADC_GetOffsetChannel>
 800545a:	4603      	mov	r3, r0
 800545c:	0e9b      	lsrs	r3, r3, #26
 800545e:	f003 021f 	and.w	r2, r3, #31
 8005462:	e01e      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x326>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2102      	movs	r1, #2
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff f9ec 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005470:	4603      	mov	r3, r0
 8005472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005482:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005486:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800548a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005492:	2320      	movs	r3, #32
 8005494:	e004      	b.n	80054a0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005496:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800549a:	fab3 f383 	clz	r3, r3
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_ADC_ConfigChannel+0x33e>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	0e9b      	lsrs	r3, r3, #26
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	e016      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x36c>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054c6:	fa93 f3a3 	rbit	r3, r3
 80054ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80054cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80054d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80054da:	2320      	movs	r3, #32
 80054dc:	e004      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80054de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054e2:	fab3 f383 	clz	r3, r3
 80054e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d106      	bne.n	80054fa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2200      	movs	r2, #0
 80054f2:	2102      	movs	r1, #2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff f9bd 	bl	8004874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2103      	movs	r1, #3
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff f9a1 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005506:	4603      	mov	r3, r0
 8005508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x3aa>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2103      	movs	r1, #3
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff f996 	bl	8004848 <LL_ADC_GetOffsetChannel>
 800551c:	4603      	mov	r3, r0
 800551e:	0e9b      	lsrs	r3, r3, #26
 8005520:	f003 021f 	and.w	r2, r3, #31
 8005524:	e017      	b.n	8005556 <HAL_ADC_ConfigChannel+0x3da>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2103      	movs	r1, #3
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff f98b 	bl	8004848 <LL_ADC_GetOffsetChannel>
 8005532:	4603      	mov	r3, r0
 8005534:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005538:	fa93 f3a3 	rbit	r3, r3
 800553c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800553e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005540:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005542:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005548:	2320      	movs	r3, #32
 800554a:	e003      	b.n	8005554 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800554c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800554e:	fab3 f383 	clz	r3, r3
 8005552:	b2db      	uxtb	r3, r3
 8005554:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555e:	2b00      	cmp	r3, #0
 8005560:	d105      	bne.n	800556e <HAL_ADC_ConfigChannel+0x3f2>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	0e9b      	lsrs	r3, r3, #26
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	e011      	b.n	8005592 <HAL_ADC_ConfigChannel+0x416>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005574:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005576:	fa93 f3a3 	rbit	r3, r3
 800557a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800557c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800557e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005586:	2320      	movs	r3, #32
 8005588:	e003      	b.n	8005592 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800558a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005592:	429a      	cmp	r2, r3
 8005594:	d106      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	2103      	movs	r1, #3
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff f968 	bl	8004874 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff fad9 	bl	8004b60 <LL_ADC_IsEnabled>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f040 813d 	bne.w	8005830 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7ff fa24 	bl	8004a10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4aa2      	ldr	r2, [pc, #648]	@ (8005858 <HAL_ADC_ConfigChannel+0x6dc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	f040 812e 	bne.w	8005830 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x480>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	0e9b      	lsrs	r3, r3, #26
 80055ea:	3301      	adds	r3, #1
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2b09      	cmp	r3, #9
 80055f2:	bf94      	ite	ls
 80055f4:	2301      	movls	r3, #1
 80055f6:	2300      	movhi	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e019      	b.n	8005630 <HAL_ADC_ConfigChannel+0x4b4>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005604:	fa93 f3a3 	rbit	r3, r3
 8005608:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800560a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800560c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800560e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005614:	2320      	movs	r3, #32
 8005616:	e003      	b.n	8005620 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005618:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800561a:	fab3 f383 	clz	r3, r3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	3301      	adds	r3, #1
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2b09      	cmp	r3, #9
 8005628:	bf94      	ite	ls
 800562a:	2301      	movls	r3, #1
 800562c:	2300      	movhi	r3, #0
 800562e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005630:	2b00      	cmp	r3, #0
 8005632:	d079      	beq.n	8005728 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563c:	2b00      	cmp	r3, #0
 800563e:	d107      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x4d4>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	0e9b      	lsrs	r3, r3, #26
 8005646:	3301      	adds	r3, #1
 8005648:	069b      	lsls	r3, r3, #26
 800564a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800564e:	e015      	b.n	800567c <HAL_ADC_ConfigChannel+0x500>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005658:	fa93 f3a3 	rbit	r3, r3
 800565c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800565e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005660:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005668:	2320      	movs	r3, #32
 800566a:	e003      	b.n	8005674 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800566c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	3301      	adds	r3, #1
 8005676:	069b      	lsls	r3, r3, #26
 8005678:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <HAL_ADC_ConfigChannel+0x520>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	0e9b      	lsrs	r3, r3, #26
 800568e:	3301      	adds	r3, #1
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2101      	movs	r1, #1
 8005696:	fa01 f303 	lsl.w	r3, r1, r3
 800569a:	e017      	b.n	80056cc <HAL_ADC_ConfigChannel+0x550>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a4:	fa93 f3a3 	rbit	r3, r3
 80056a8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80056aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80056ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80056b4:	2320      	movs	r3, #32
 80056b6:	e003      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80056b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ba:	fab3 f383 	clz	r3, r3
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	3301      	adds	r3, #1
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	2101      	movs	r1, #1
 80056c8:	fa01 f303 	lsl.w	r3, r1, r3
 80056cc:	ea42 0103 	orr.w	r1, r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <HAL_ADC_ConfigChannel+0x576>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	0e9b      	lsrs	r3, r3, #26
 80056e2:	3301      	adds	r3, #1
 80056e4:	f003 021f 	and.w	r2, r3, #31
 80056e8:	4613      	mov	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4413      	add	r3, r2
 80056ee:	051b      	lsls	r3, r3, #20
 80056f0:	e018      	b.n	8005724 <HAL_ADC_ConfigChannel+0x5a8>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	fa93 f3a3 	rbit	r3, r3
 80056fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800570a:	2320      	movs	r3, #32
 800570c:	e003      	b.n	8005716 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800570e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	b2db      	uxtb	r3, r3
 8005716:	3301      	adds	r3, #1
 8005718:	f003 021f 	and.w	r2, r3, #31
 800571c:	4613      	mov	r3, r2
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	4413      	add	r3, r2
 8005722:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005724:	430b      	orrs	r3, r1
 8005726:	e07e      	b.n	8005826 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005730:	2b00      	cmp	r3, #0
 8005732:	d107      	bne.n	8005744 <HAL_ADC_ConfigChannel+0x5c8>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	0e9b      	lsrs	r3, r3, #26
 800573a:	3301      	adds	r3, #1
 800573c:	069b      	lsls	r3, r3, #26
 800573e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005742:	e015      	b.n	8005770 <HAL_ADC_ConfigChannel+0x5f4>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574c:	fa93 f3a3 	rbit	r3, r3
 8005750:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005754:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800575c:	2320      	movs	r3, #32
 800575e:	e003      	b.n	8005768 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005762:	fab3 f383 	clz	r3, r3
 8005766:	b2db      	uxtb	r3, r3
 8005768:	3301      	adds	r3, #1
 800576a:	069b      	lsls	r3, r3, #26
 800576c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005778:	2b00      	cmp	r3, #0
 800577a:	d109      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x614>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	0e9b      	lsrs	r3, r3, #26
 8005782:	3301      	adds	r3, #1
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	2101      	movs	r1, #1
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	e017      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x644>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	fa93 f3a3 	rbit	r3, r3
 800579c:	61fb      	str	r3, [r7, #28]
  return result;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80057a8:	2320      	movs	r3, #32
 80057aa:	e003      	b.n	80057b4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	fab3 f383 	clz	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	3301      	adds	r3, #1
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2101      	movs	r1, #1
 80057bc:	fa01 f303 	lsl.w	r3, r1, r3
 80057c0:	ea42 0103 	orr.w	r1, r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10d      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x670>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	0e9b      	lsrs	r3, r3, #26
 80057d6:	3301      	adds	r3, #1
 80057d8:	f003 021f 	and.w	r2, r3, #31
 80057dc:	4613      	mov	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4413      	add	r3, r2
 80057e2:	3b1e      	subs	r3, #30
 80057e4:	051b      	lsls	r3, r3, #20
 80057e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057ea:	e01b      	b.n	8005824 <HAL_ADC_ConfigChannel+0x6a8>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	fa93 f3a3 	rbit	r3, r3
 80057f8:	613b      	str	r3, [r7, #16]
  return result;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005804:	2320      	movs	r3, #32
 8005806:	e003      	b.n	8005810 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	fab3 f383 	clz	r3, r3
 800580e:	b2db      	uxtb	r3, r3
 8005810:	3301      	adds	r3, #1
 8005812:	f003 021f 	and.w	r2, r3, #31
 8005816:	4613      	mov	r3, r2
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	4413      	add	r3, r2
 800581c:	3b1e      	subs	r3, #30
 800581e:	051b      	lsls	r3, r3, #20
 8005820:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005824:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800582a:	4619      	mov	r1, r3
 800582c:	f7ff f8c5 	bl	80049ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b09      	ldr	r3, [pc, #36]	@ (800585c <HAL_ADC_ConfigChannel+0x6e0>)
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80be 	beq.w	80059ba <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005846:	d004      	beq.n	8005852 <HAL_ADC_ConfigChannel+0x6d6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a04      	ldr	r2, [pc, #16]	@ (8005860 <HAL_ADC_ConfigChannel+0x6e4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10a      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x6ec>
 8005852:	4b04      	ldr	r3, [pc, #16]	@ (8005864 <HAL_ADC_ConfigChannel+0x6e8>)
 8005854:	e009      	b.n	800586a <HAL_ADC_ConfigChannel+0x6ee>
 8005856:	bf00      	nop
 8005858:	407f0000 	.word	0x407f0000
 800585c:	80080000 	.word	0x80080000
 8005860:	50000100 	.word	0x50000100
 8005864:	50000300 	.word	0x50000300
 8005868:	4b59      	ldr	r3, [pc, #356]	@ (80059d0 <HAL_ADC_ConfigChannel+0x854>)
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe ffba 	bl	80047e4 <LL_ADC_GetCommonPathInternalCh>
 8005870:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a56      	ldr	r2, [pc, #344]	@ (80059d4 <HAL_ADC_ConfigChannel+0x858>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x70c>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a55      	ldr	r2, [pc, #340]	@ (80059d8 <HAL_ADC_ConfigChannel+0x85c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d13a      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800588c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d134      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800589c:	d005      	beq.n	80058aa <HAL_ADC_ConfigChannel+0x72e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a4e      	ldr	r2, [pc, #312]	@ (80059dc <HAL_ADC_ConfigChannel+0x860>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	f040 8085 	bne.w	80059b4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058b2:	d004      	beq.n	80058be <HAL_ADC_ConfigChannel+0x742>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a49      	ldr	r2, [pc, #292]	@ (80059e0 <HAL_ADC_ConfigChannel+0x864>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d101      	bne.n	80058c2 <HAL_ADC_ConfigChannel+0x746>
 80058be:	4a49      	ldr	r2, [pc, #292]	@ (80059e4 <HAL_ADC_ConfigChannel+0x868>)
 80058c0:	e000      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x748>
 80058c2:	4a43      	ldr	r2, [pc, #268]	@ (80059d0 <HAL_ADC_ConfigChannel+0x854>)
 80058c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7fe ff75 	bl	80047be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058d4:	4b44      	ldr	r3, [pc, #272]	@ (80059e8 <HAL_ADC_ConfigChannel+0x86c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	099b      	lsrs	r3, r3, #6
 80058da:	4a44      	ldr	r2, [pc, #272]	@ (80059ec <HAL_ADC_ConfigChannel+0x870>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	099b      	lsrs	r3, r3, #6
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	4613      	mov	r3, r2
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058ee:	e002      	b.n	80058f6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f9      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058fc:	e05a      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a3b      	ldr	r2, [pc, #236]	@ (80059f0 <HAL_ADC_ConfigChannel+0x874>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d125      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800590c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d11f      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a31      	ldr	r2, [pc, #196]	@ (80059e0 <HAL_ADC_ConfigChannel+0x864>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d104      	bne.n	8005928 <HAL_ADC_ConfigChannel+0x7ac>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a34      	ldr	r2, [pc, #208]	@ (80059f4 <HAL_ADC_ConfigChannel+0x878>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d047      	beq.n	80059b8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005930:	d004      	beq.n	800593c <HAL_ADC_ConfigChannel+0x7c0>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a2a      	ldr	r2, [pc, #168]	@ (80059e0 <HAL_ADC_ConfigChannel+0x864>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d101      	bne.n	8005940 <HAL_ADC_ConfigChannel+0x7c4>
 800593c:	4a29      	ldr	r2, [pc, #164]	@ (80059e4 <HAL_ADC_ConfigChannel+0x868>)
 800593e:	e000      	b.n	8005942 <HAL_ADC_ConfigChannel+0x7c6>
 8005940:	4a23      	ldr	r2, [pc, #140]	@ (80059d0 <HAL_ADC_ConfigChannel+0x854>)
 8005942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f7fe ff36 	bl	80047be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005952:	e031      	b.n	80059b8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a27      	ldr	r2, [pc, #156]	@ (80059f8 <HAL_ADC_ConfigChannel+0x87c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d12d      	bne.n	80059ba <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800595e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d127      	bne.n	80059ba <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1c      	ldr	r2, [pc, #112]	@ (80059e0 <HAL_ADC_ConfigChannel+0x864>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d022      	beq.n	80059ba <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800597c:	d004      	beq.n	8005988 <HAL_ADC_ConfigChannel+0x80c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a17      	ldr	r2, [pc, #92]	@ (80059e0 <HAL_ADC_ConfigChannel+0x864>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d101      	bne.n	800598c <HAL_ADC_ConfigChannel+0x810>
 8005988:	4a16      	ldr	r2, [pc, #88]	@ (80059e4 <HAL_ADC_ConfigChannel+0x868>)
 800598a:	e000      	b.n	800598e <HAL_ADC_ConfigChannel+0x812>
 800598c:	4a10      	ldr	r2, [pc, #64]	@ (80059d0 <HAL_ADC_ConfigChannel+0x854>)
 800598e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005992:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7fe ff10 	bl	80047be <LL_ADC_SetCommonPathInternalCh>
 800599e:	e00c      	b.n	80059ba <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a4:	f043 0220 	orr.w	r2, r3, #32
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80059b2:	e002      	b.n	80059ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80059c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	37d8      	adds	r7, #216	@ 0xd8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	50000700 	.word	0x50000700
 80059d4:	c3210000 	.word	0xc3210000
 80059d8:	90c00010 	.word	0x90c00010
 80059dc:	50000600 	.word	0x50000600
 80059e0:	50000100 	.word	0x50000100
 80059e4:	50000300 	.word	0x50000300
 80059e8:	20000218 	.word	0x20000218
 80059ec:	053e2d63 	.word	0x053e2d63
 80059f0:	c7520000 	.word	0xc7520000
 80059f4:	50000500 	.word	0x50000500
 80059f8:	cb840000 	.word	0xcb840000

080059fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff f8a7 	bl	8004b60 <LL_ADC_IsEnabled>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d176      	bne.n	8005b06 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b10 <ADC_Enable+0x114>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2a:	f043 0210 	orr.w	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a36:	f043 0201 	orr.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e062      	b.n	8005b08 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff f862 	bl	8004b10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a54:	d004      	beq.n	8005a60 <ADC_Enable+0x64>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b14 <ADC_Enable+0x118>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d101      	bne.n	8005a64 <ADC_Enable+0x68>
 8005a60:	4b2d      	ldr	r3, [pc, #180]	@ (8005b18 <ADC_Enable+0x11c>)
 8005a62:	e000      	b.n	8005a66 <ADC_Enable+0x6a>
 8005a64:	4b2d      	ldr	r3, [pc, #180]	@ (8005b1c <ADC_Enable+0x120>)
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe febc 	bl	80047e4 <LL_ADC_GetCommonPathInternalCh>
 8005a6c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005a6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d013      	beq.n	8005a9e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a76:	4b2a      	ldr	r3, [pc, #168]	@ (8005b20 <ADC_Enable+0x124>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	099b      	lsrs	r3, r3, #6
 8005a7c:	4a29      	ldr	r2, [pc, #164]	@ (8005b24 <ADC_Enable+0x128>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	099b      	lsrs	r3, r3, #6
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a90:	e002      	b.n	8005a98 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f9      	bne.n	8005a92 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a9e:	f7fe fe4d 	bl	800473c <HAL_GetTick>
 8005aa2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aa4:	e028      	b.n	8005af8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff f858 	bl	8004b60 <LL_ADC_IsEnabled>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff f828 	bl	8004b10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ac0:	f7fe fe3c 	bl	800473c <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d914      	bls.n	8005af8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d00d      	beq.n	8005af8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae0:	f043 0210 	orr.w	r2, r3, #16
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aec:	f043 0201 	orr.w	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e007      	b.n	8005b08 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d1cf      	bne.n	8005aa6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	8000003f 	.word	0x8000003f
 8005b14:	50000100 	.word	0x50000100
 8005b18:	50000300 	.word	0x50000300
 8005b1c:	50000700 	.word	0x50000700
 8005b20:	20000218 	.word	0x20000218
 8005b24:	053e2d63 	.word	0x053e2d63

08005b28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff f826 	bl	8004b86 <LL_ADC_IsDisableOngoing>
 8005b3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff f80d 	bl	8004b60 <LL_ADC_IsEnabled>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d047      	beq.n	8005bdc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d144      	bne.n	8005bdc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 030d 	and.w	r3, r3, #13
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10c      	bne.n	8005b7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe ffe7 	bl	8004b38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2203      	movs	r2, #3
 8005b70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b72:	f7fe fde3 	bl	800473c <HAL_GetTick>
 8005b76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b78:	e029      	b.n	8005bce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7e:	f043 0210 	orr.w	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b8a:	f043 0201 	orr.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e023      	b.n	8005bde <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b96:	f7fe fdd1 	bl	800473c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d914      	bls.n	8005bce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00d      	beq.n	8005bce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb6:	f043 0210 	orr.w	r2, r3, #16
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc2:	f043 0201 	orr.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e007      	b.n	8005bde <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1dc      	bne.n	8005b96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d14b      	bne.n	8005c98 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d021      	beq.n	8005c5e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fe8c 	bl	800493c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d032      	beq.n	8005c90 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d12b      	bne.n	8005c90 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d11f      	bne.n	8005c90 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c54:	f043 0201 	orr.w	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c5c:	e018      	b.n	8005c90 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d111      	bne.n	8005c90 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c88:	f043 0201 	orr.w	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7ff fa55 	bl	8005140 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c96:	e00e      	b.n	8005cb6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff fa5f 	bl	8005168 <HAL_ADC_ErrorCallback>
}
 8005caa:	e004      	b.n	8005cb6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7ff fa41 	bl	8005154 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf8:	f043 0204 	orr.w	r2, r3, #4
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7ff fa31 	bl	8005168 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <LL_ADC_IsEnabled>:
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <LL_ADC_IsEnabled+0x18>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <LL_ADC_IsEnabled+0x1a>
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <LL_ADC_StartCalibration>:
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005d46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	609a      	str	r2, [r3, #8]
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <LL_ADC_IsCalibrationOnGoing>:
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d7a:	d101      	bne.n	8005d80 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <LL_ADC_REG_IsConversionOngoing>:
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d101      	bne.n	8005da6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_ADCEx_Calibration_Start+0x1c>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e04d      	b.n	8005e6c <HAL_ADCEx_Calibration_Start+0xb8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff fea5 	bl	8005b28 <ADC_Disable>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d136      	bne.n	8005e56 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005df0:	f023 0302 	bic.w	r3, r3, #2
 8005df4:	f043 0202 	orr.w	r2, r3, #2
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff ff96 	bl	8005d34 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e08:	e014      	b.n	8005e34 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4a18      	ldr	r2, [pc, #96]	@ (8005e74 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d90d      	bls.n	8005e34 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1c:	f023 0312 	bic.w	r3, r3, #18
 8005e20:	f043 0210 	orr.w	r2, r3, #16
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e01b      	b.n	8005e6c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff ff94 	bl	8005d66 <LL_ADC_IsCalibrationOnGoing>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e2      	bne.n	8005e0a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e48:	f023 0303 	bic.w	r3, r3, #3
 8005e4c:	f043 0201 	orr.w	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e54:	e005      	b.n	8005e62 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e5a:	f043 0210 	orr.w	r2, r3, #16
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	0004de01 	.word	0x0004de01

08005e78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b0a1      	sub	sp, #132	@ 0x84
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0e7      	b.n	8006066 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eae:	d102      	bne.n	8005eb6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005eb2:	60bb      	str	r3, [r7, #8]
 8005eb4:	e009      	b.n	8005eca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a6e      	ldr	r2, [pc, #440]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d102      	bne.n	8005ec6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005ec0:	4b6d      	ldr	r3, [pc, #436]	@ (8006078 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	e001      	b.n	8005eca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0be      	b.n	8006066 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff ff4f 	bl	8005d8e <LL_ADC_REG_IsConversionOngoing>
 8005ef0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ff49 	bl	8005d8e <LL_ADC_REG_IsConversionOngoing>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 80a0 	bne.w	8006044 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 809c 	bne.w	8006044 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f14:	d004      	beq.n	8005f20 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a55      	ldr	r2, [pc, #340]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d101      	bne.n	8005f24 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005f20:	4b56      	ldr	r3, [pc, #344]	@ (800607c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005f22:	e000      	b.n	8005f26 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005f24:	4b56      	ldr	r3, [pc, #344]	@ (8006080 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005f26:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d04b      	beq.n	8005fc8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	6859      	ldr	r1, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f42:	035b      	lsls	r3, r3, #13
 8005f44:	430b      	orrs	r3, r1
 8005f46:	431a      	orrs	r2, r3
 8005f48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f54:	d004      	beq.n	8005f60 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a45      	ldr	r2, [pc, #276]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d10f      	bne.n	8005f80 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005f60:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005f64:	f7ff fed3 	bl	8005d0e <LL_ADC_IsEnabled>
 8005f68:	4604      	mov	r4, r0
 8005f6a:	4841      	ldr	r0, [pc, #260]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f6c:	f7ff fecf 	bl	8005d0e <LL_ADC_IsEnabled>
 8005f70:	4603      	mov	r3, r0
 8005f72:	4323      	orrs	r3, r4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e012      	b.n	8005fa6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005f80:	483c      	ldr	r0, [pc, #240]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f82:	f7ff fec4 	bl	8005d0e <LL_ADC_IsEnabled>
 8005f86:	4604      	mov	r4, r0
 8005f88:	483b      	ldr	r0, [pc, #236]	@ (8006078 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f8a:	f7ff fec0 	bl	8005d0e <LL_ADC_IsEnabled>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	431c      	orrs	r4, r3
 8005f92:	483c      	ldr	r0, [pc, #240]	@ (8006084 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f94:	f7ff febb 	bl	8005d0e <LL_ADC_IsEnabled>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4323      	orrs	r3, r4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d056      	beq.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005fb2:	f023 030f 	bic.w	r3, r3, #15
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	6811      	ldr	r1, [r2, #0]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	6892      	ldr	r2, [r2, #8]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fc4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fc6:	e047      	b.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fd2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fdc:	d004      	beq.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a23      	ldr	r2, [pc, #140]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d10f      	bne.n	8006008 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005fe8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005fec:	f7ff fe8f 	bl	8005d0e <LL_ADC_IsEnabled>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	481f      	ldr	r0, [pc, #124]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ff4:	f7ff fe8b 	bl	8005d0e <LL_ADC_IsEnabled>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4323      	orrs	r3, r4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	e012      	b.n	800602e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006008:	481a      	ldr	r0, [pc, #104]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800600a:	f7ff fe80 	bl	8005d0e <LL_ADC_IsEnabled>
 800600e:	4604      	mov	r4, r0
 8006010:	4819      	ldr	r0, [pc, #100]	@ (8006078 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006012:	f7ff fe7c 	bl	8005d0e <LL_ADC_IsEnabled>
 8006016:	4603      	mov	r3, r0
 8006018:	431c      	orrs	r4, r3
 800601a:	481a      	ldr	r0, [pc, #104]	@ (8006084 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800601c:	f7ff fe77 	bl	8005d0e <LL_ADC_IsEnabled>
 8006020:	4603      	mov	r3, r0
 8006022:	4323      	orrs	r3, r4
 8006024:	2b00      	cmp	r3, #0
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d012      	beq.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800603a:	f023 030f 	bic.w	r3, r3, #15
 800603e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006040:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006042:	e009      	b.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006056:	e000      	b.n	800605a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006058:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006062:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006066:	4618      	mov	r0, r3
 8006068:	3784      	adds	r7, #132	@ 0x84
 800606a:	46bd      	mov	sp, r7
 800606c:	bd90      	pop	{r4, r7, pc}
 800606e:	bf00      	nop
 8006070:	50000100 	.word	0x50000100
 8006074:	50000400 	.word	0x50000400
 8006078:	50000500 	.word	0x50000500
 800607c:	50000300 	.word	0x50000300
 8006080:	50000700 	.word	0x50000700
 8006084:	50000600 	.word	0x50000600

08006088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006098:	4b0c      	ldr	r3, [pc, #48]	@ (80060cc <__NVIC_SetPriorityGrouping+0x44>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80060a4:	4013      	ands	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060ba:	4a04      	ldr	r2, [pc, #16]	@ (80060cc <__NVIC_SetPriorityGrouping+0x44>)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	60d3      	str	r3, [r2, #12]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	e000ed00 	.word	0xe000ed00

080060d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060d4:	4b04      	ldr	r3, [pc, #16]	@ (80060e8 <__NVIC_GetPriorityGrouping+0x18>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	0a1b      	lsrs	r3, r3, #8
 80060da:	f003 0307 	and.w	r3, r3, #7
}
 80060de:	4618      	mov	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	e000ed00 	.word	0xe000ed00

080060ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	db0b      	blt.n	8006116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	f003 021f 	and.w	r2, r3, #31
 8006104:	4907      	ldr	r1, [pc, #28]	@ (8006124 <__NVIC_EnableIRQ+0x38>)
 8006106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	2001      	movs	r0, #1
 800610e:	fa00 f202 	lsl.w	r2, r0, r2
 8006112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	e000e100 	.word	0xe000e100

08006128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	6039      	str	r1, [r7, #0]
 8006132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006138:	2b00      	cmp	r3, #0
 800613a:	db0a      	blt.n	8006152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	b2da      	uxtb	r2, r3
 8006140:	490c      	ldr	r1, [pc, #48]	@ (8006174 <__NVIC_SetPriority+0x4c>)
 8006142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006146:	0112      	lsls	r2, r2, #4
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	440b      	add	r3, r1
 800614c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006150:	e00a      	b.n	8006168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	b2da      	uxtb	r2, r3
 8006156:	4908      	ldr	r1, [pc, #32]	@ (8006178 <__NVIC_SetPriority+0x50>)
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	3b04      	subs	r3, #4
 8006160:	0112      	lsls	r2, r2, #4
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	440b      	add	r3, r1
 8006166:	761a      	strb	r2, [r3, #24]
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	e000e100 	.word	0xe000e100
 8006178:	e000ed00 	.word	0xe000ed00

0800617c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800617c:	b480      	push	{r7}
 800617e:	b089      	sub	sp, #36	@ 0x24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f1c3 0307 	rsb	r3, r3, #7
 8006196:	2b04      	cmp	r3, #4
 8006198:	bf28      	it	cs
 800619a:	2304      	movcs	r3, #4
 800619c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3304      	adds	r3, #4
 80061a2:	2b06      	cmp	r3, #6
 80061a4:	d902      	bls.n	80061ac <NVIC_EncodePriority+0x30>
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	3b03      	subs	r3, #3
 80061aa:	e000      	b.n	80061ae <NVIC_EncodePriority+0x32>
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43da      	mvns	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	401a      	ands	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061c4:	f04f 31ff 	mov.w	r1, #4294967295
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	43d9      	mvns	r1, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d4:	4313      	orrs	r3, r2
         );
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3724      	adds	r7, #36	@ 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061f4:	d301      	bcc.n	80061fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061f6:	2301      	movs	r3, #1
 80061f8:	e00f      	b.n	800621a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006224 <SysTick_Config+0x40>)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3b01      	subs	r3, #1
 8006200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006202:	210f      	movs	r1, #15
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	f7ff ff8e 	bl	8006128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800620c:	4b05      	ldr	r3, [pc, #20]	@ (8006224 <SysTick_Config+0x40>)
 800620e:	2200      	movs	r2, #0
 8006210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006212:	4b04      	ldr	r3, [pc, #16]	@ (8006224 <SysTick_Config+0x40>)
 8006214:	2207      	movs	r2, #7
 8006216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000e010 	.word	0xe000e010

08006228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff29 	bl	8006088 <__NVIC_SetPriorityGrouping>
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b086      	sub	sp, #24
 8006242:	af00      	add	r7, sp, #0
 8006244:	4603      	mov	r3, r0
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	607a      	str	r2, [r7, #4]
 800624a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800624c:	f7ff ff40 	bl	80060d0 <__NVIC_GetPriorityGrouping>
 8006250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	6978      	ldr	r0, [r7, #20]
 8006258:	f7ff ff90 	bl	800617c <NVIC_EncodePriority>
 800625c:	4602      	mov	r2, r0
 800625e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff ff5f 	bl	8006128 <__NVIC_SetPriority>
}
 800626a:	bf00      	nop
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	4603      	mov	r3, r0
 800627a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800627c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff ff33 	bl	80060ec <__NVIC_EnableIRQ>
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff ffa4 	bl	80061e4 <SysTick_Config>
 800629c:	4603      	mov	r3, r0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e08d      	b.n	80063d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	4b47      	ldr	r3, [pc, #284]	@ (80063e0 <HAL_DMA_Init+0x138>)
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d80f      	bhi.n	80062e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	4b45      	ldr	r3, [pc, #276]	@ (80063e4 <HAL_DMA_Init+0x13c>)
 80062ce:	4413      	add	r3, r2
 80062d0:	4a45      	ldr	r2, [pc, #276]	@ (80063e8 <HAL_DMA_Init+0x140>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	009a      	lsls	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a42      	ldr	r2, [pc, #264]	@ (80063ec <HAL_DMA_Init+0x144>)
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80062e4:	e00e      	b.n	8006304 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	4b40      	ldr	r3, [pc, #256]	@ (80063f0 <HAL_DMA_Init+0x148>)
 80062ee:	4413      	add	r3, r2
 80062f0:	4a3d      	ldr	r2, [pc, #244]	@ (80063e8 <HAL_DMA_Init+0x140>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	009a      	lsls	r2, r3, #2
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a3c      	ldr	r2, [pc, #240]	@ (80063f4 <HAL_DMA_Init+0x14c>)
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800631a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006328:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006334:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006340:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa76 	bl	8006848 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006364:	d102      	bne.n	800636c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006380:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d010      	beq.n	80063ac <HAL_DMA_Init+0x104>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b04      	cmp	r3, #4
 8006390:	d80c      	bhi.n	80063ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa96 	bl	80068c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	e008      	b.n	80063be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40020407 	.word	0x40020407
 80063e4:	bffdfff8 	.word	0xbffdfff8
 80063e8:	cccccccd 	.word	0xcccccccd
 80063ec:	40020000 	.word	0x40020000
 80063f0:	bffdfbf8 	.word	0xbffdfbf8
 80063f4:	40020400 	.word	0x40020400

080063f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_DMA_Start_IT+0x20>
 8006414:	2302      	movs	r3, #2
 8006416:	e066      	b.n	80064e6 <HAL_DMA_Start_IT+0xee>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d155      	bne.n	80064d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 f9bb 	bl	80067cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 020e 	orr.w	r2, r2, #14
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e00f      	b.n	8006490 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0204 	bic.w	r2, r2, #4
 800647e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 020a 	orr.w	r2, r2, #10
 800648e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e005      	b.n	80064e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
 80064e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d005      	beq.n	8006512 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2204      	movs	r2, #4
 800650a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	e037      	b.n	8006582 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 020e 	bic.w	r2, r2, #14
 8006520:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800652c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006530:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006546:	f003 021f 	and.w	r2, r3, #31
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654e:	2101      	movs	r1, #1
 8006550:	fa01 f202 	lsl.w	r2, r1, r2
 8006554:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800655e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00c      	beq.n	8006582 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006572:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006576:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006580:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006592:	7bfb      	ldrb	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d00d      	beq.n	80065d4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2204      	movs	r2, #4
 80065bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	73fb      	strb	r3, [r7, #15]
 80065d2:	e047      	b.n	8006664 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 020e 	bic.w	r2, r2, #14
 80065e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0201 	bic.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006602:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006608:	f003 021f 	and.w	r2, r3, #31
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006610:	2101      	movs	r1, #1
 8006612:	fa01 f202 	lsl.w	r2, r1, r2
 8006616:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006620:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00c      	beq.n	8006644 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006638:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006642:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
    }
  }
  return status;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	2204      	movs	r2, #4
 8006690:	409a      	lsls	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4013      	ands	r3, r2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d026      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x7a>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d021      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0204 	bic.w	r2, r2, #4
 80066c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c6:	f003 021f 	and.w	r2, r3, #31
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	2104      	movs	r1, #4
 80066d0:	fa01 f202 	lsl.w	r2, r1, r2
 80066d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d071      	beq.n	80067c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80066e6:	e06c      	b.n	80067c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2202      	movs	r2, #2
 80066f2:	409a      	lsls	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d02e      	beq.n	800675a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d029      	beq.n	800675a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 020a 	bic.w	r2, r2, #10
 8006722:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006730:	f003 021f 	and.w	r2, r3, #31
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006738:	2102      	movs	r1, #2
 800673a:	fa01 f202 	lsl.w	r2, r1, r2
 800673e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d038      	beq.n	80067c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006758:	e033      	b.n	80067c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2208      	movs	r2, #8
 8006764:	409a      	lsls	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4013      	ands	r3, r2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02a      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d025      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 020e 	bic.w	r2, r2, #14
 8006786:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678c:	f003 021f 	and.w	r2, r3, #31
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	2101      	movs	r1, #1
 8006796:	fa01 f202 	lsl.w	r2, r1, r2
 800679a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
}
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80067f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	f003 021f 	and.w	r2, r3, #31
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	2101      	movs	r1, #1
 8006804:	fa01 f202 	lsl.w	r2, r1, r2
 8006808:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b10      	cmp	r3, #16
 8006818:	d108      	bne.n	800682c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800682a:	e007      	b.n	800683c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]
}
 800683c:	bf00      	nop
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	4b16      	ldr	r3, [pc, #88]	@ (80068b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006858:	429a      	cmp	r2, r3
 800685a:	d802      	bhi.n	8006862 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800685c:	4b15      	ldr	r3, [pc, #84]	@ (80068b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e001      	b.n	8006866 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006862:	4b15      	ldr	r3, [pc, #84]	@ (80068b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006864:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	3b08      	subs	r3, #8
 8006872:	4a12      	ldr	r2, [pc, #72]	@ (80068bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006874:	fba2 2303 	umull	r2, r3, r2, r3
 8006878:	091b      	lsrs	r3, r3, #4
 800687a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006880:	089b      	lsrs	r3, r3, #2
 8006882:	009a      	lsls	r2, r3, #2
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4413      	add	r3, r2
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a0b      	ldr	r2, [pc, #44]	@ (80068c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006892:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	2201      	movs	r2, #1
 800689c:	409a      	lsls	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40020407 	.word	0x40020407
 80068b4:	40020800 	.word	0x40020800
 80068b8:	40020820 	.word	0x40020820
 80068bc:	cccccccd 	.word	0xcccccccd
 80068c0:	40020880 	.word	0x40020880

080068c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	461a      	mov	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a08      	ldr	r2, [pc, #32]	@ (8006908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80068e6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	2201      	movs	r2, #1
 80068f2:	409a      	lsls	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	1000823f 	.word	0x1000823f
 8006908:	40020940 	.word	0x40020940

0800690c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800691a:	e15a      	b.n	8006bd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	2101      	movs	r1, #1
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	fa01 f303 	lsl.w	r3, r1, r3
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 814c 	beq.w	8006bcc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d005      	beq.n	800694c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006948:	2b02      	cmp	r3, #2
 800694a:	d130      	bne.n	80069ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	2203      	movs	r2, #3
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4013      	ands	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006982:	2201      	movs	r2, #1
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4013      	ands	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	091b      	lsrs	r3, r3, #4
 8006998:	f003 0201 	and.w	r2, r3, #1
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d017      	beq.n	80069ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	2203      	movs	r2, #3
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4013      	ands	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d123      	bne.n	8006a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	08da      	lsrs	r2, r3, #3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3208      	adds	r2, #8
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	220f      	movs	r2, #15
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4013      	ands	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	08da      	lsrs	r2, r3, #3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3208      	adds	r2, #8
 8006a38:	6939      	ldr	r1, [r7, #16]
 8006a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	2203      	movs	r2, #3
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4013      	ands	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 0203 	and.w	r2, r3, #3
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80a6 	beq.w	8006bcc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a80:	4b5b      	ldr	r3, [pc, #364]	@ (8006bf0 <HAL_GPIO_Init+0x2e4>)
 8006a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a84:	4a5a      	ldr	r2, [pc, #360]	@ (8006bf0 <HAL_GPIO_Init+0x2e4>)
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a8c:	4b58      	ldr	r3, [pc, #352]	@ (8006bf0 <HAL_GPIO_Init+0x2e4>)
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a98:	4a56      	ldr	r2, [pc, #344]	@ (8006bf4 <HAL_GPIO_Init+0x2e8>)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	089b      	lsrs	r3, r3, #2
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	220f      	movs	r2, #15
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006ac2:	d01f      	beq.n	8006b04 <HAL_GPIO_Init+0x1f8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a4c      	ldr	r2, [pc, #304]	@ (8006bf8 <HAL_GPIO_Init+0x2ec>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d019      	beq.n	8006b00 <HAL_GPIO_Init+0x1f4>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a4b      	ldr	r2, [pc, #300]	@ (8006bfc <HAL_GPIO_Init+0x2f0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <HAL_GPIO_Init+0x1f0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8006c00 <HAL_GPIO_Init+0x2f4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00d      	beq.n	8006af8 <HAL_GPIO_Init+0x1ec>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a49      	ldr	r2, [pc, #292]	@ (8006c04 <HAL_GPIO_Init+0x2f8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <HAL_GPIO_Init+0x1e8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a48      	ldr	r2, [pc, #288]	@ (8006c08 <HAL_GPIO_Init+0x2fc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d101      	bne.n	8006af0 <HAL_GPIO_Init+0x1e4>
 8006aec:	2305      	movs	r3, #5
 8006aee:	e00a      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006af0:	2306      	movs	r3, #6
 8006af2:	e008      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006af4:	2304      	movs	r3, #4
 8006af6:	e006      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006af8:	2303      	movs	r3, #3
 8006afa:	e004      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e002      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006b04:	2300      	movs	r3, #0
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	f002 0203 	and.w	r2, r2, #3
 8006b0c:	0092      	lsls	r2, r2, #2
 8006b0e:	4093      	lsls	r3, r2
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b16:	4937      	ldr	r1, [pc, #220]	@ (8006bf4 <HAL_GPIO_Init+0x2e8>)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b24:	4b39      	ldr	r3, [pc, #228]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4013      	ands	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b48:	4a30      	ldr	r2, [pc, #192]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	43db      	mvns	r3, r3
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b72:	4a26      	ldr	r2, [pc, #152]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b78:	4b24      	ldr	r3, [pc, #144]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4013      	ands	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	43db      	mvns	r3, r3
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bc6:	4a11      	ldr	r2, [pc, #68]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f ae9d 	bne.w	800691c <HAL_GPIO_Init+0x10>
  }
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	48000400 	.word	0x48000400
 8006bfc:	48000800 	.word	0x48000800
 8006c00:	48000c00 	.word	0x48000c00
 8006c04:	48001000 	.word	0x48001000
 8006c08:	48001400 	.word	0x48001400
 8006c0c:	40010400 	.word	0x40010400

08006c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	887b      	ldrh	r3, [r7, #2]
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	73fb      	strb	r3, [r7, #15]
 8006c2c:	e001      	b.n	8006c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	807b      	strh	r3, [r7, #2]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c50:	787b      	ldrb	r3, [r7, #1]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c56:	887a      	ldrh	r2, [r7, #2]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c5c:	e002      	b.n	8006c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c5e:	887a      	ldrh	r2, [r7, #2]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006c82:	887a      	ldrh	r2, [r7, #2]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4013      	ands	r3, r2
 8006c88:	041a      	lsls	r2, r3, #16
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	43d9      	mvns	r1, r3
 8006c8e:	887b      	ldrh	r3, [r7, #2]
 8006c90:	400b      	ands	r3, r1
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	619a      	str	r2, [r3, #24]
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006cae:	4b08      	ldr	r3, [pc, #32]	@ (8006cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d006      	beq.n	8006cc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006cba:	4a05      	ldr	r2, [pc, #20]	@ (8006cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006cc0:	88fb      	ldrh	r3, [r7, #6]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fd f94a 	bl	8003f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40010400 	.word	0x40010400

08006cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d141      	bne.n	8006d66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cee:	d131      	bne.n	8006d54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cf0:	4b47      	ldr	r3, [pc, #284]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cf6:	4a46      	ldr	r2, [pc, #280]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d00:	4b43      	ldr	r3, [pc, #268]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d08:	4a41      	ldr	r2, [pc, #260]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d10:	4b40      	ldr	r3, [pc, #256]	@ (8006e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2232      	movs	r2, #50	@ 0x32
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8006e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d20:	0c9b      	lsrs	r3, r3, #18
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d26:	e002      	b.n	8006d2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d2e:	4b38      	ldr	r3, [pc, #224]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d3a:	d102      	bne.n	8006d42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f2      	bne.n	8006d28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d42:	4b33      	ldr	r3, [pc, #204]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d4e:	d158      	bne.n	8006e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e057      	b.n	8006e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d54:	4b2e      	ldr	r3, [pc, #184]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d64:	e04d      	b.n	8006e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6c:	d141      	bne.n	8006df2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d6e:	4b28      	ldr	r3, [pc, #160]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d7a:	d131      	bne.n	8006de0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d7c:	4b24      	ldr	r3, [pc, #144]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d82:	4a23      	ldr	r2, [pc, #140]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d8c:	4b20      	ldr	r3, [pc, #128]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d94:	4a1e      	ldr	r2, [pc, #120]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2232      	movs	r2, #50	@ 0x32
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006da8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dac:	0c9b      	lsrs	r3, r3, #18
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006db2:	e002      	b.n	8006dba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dba:	4b15      	ldr	r3, [pc, #84]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dc6:	d102      	bne.n	8006dce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f2      	bne.n	8006db4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dce:	4b10      	ldr	r3, [pc, #64]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dda:	d112      	bne.n	8006e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e011      	b.n	8006e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006de0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006de6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006df0:	e007      	b.n	8006e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006df2:	4b07      	ldr	r3, [pc, #28]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006dfa:	4a05      	ldr	r2, [pc, #20]	@ (8006e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40007000 	.word	0x40007000
 8006e14:	20000218 	.word	0x20000218
 8006e18:	431bde83 	.word	0x431bde83

08006e1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006e20:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	4a04      	ldr	r2, [pc, #16]	@ (8006e38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e2a:	6093      	str	r3, [r2, #8]
}
 8006e2c:	bf00      	nop
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40007000 	.word	0x40007000

08006e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e2fe      	b.n	800744c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d075      	beq.n	8006f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e5a:	4b97      	ldr	r3, [pc, #604]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e64:	4b94      	ldr	r3, [pc, #592]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	2b0c      	cmp	r3, #12
 8006e72:	d102      	bne.n	8006e7a <HAL_RCC_OscConfig+0x3e>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d002      	beq.n	8006e80 <HAL_RCC_OscConfig+0x44>
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d10b      	bne.n	8006e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e80:	4b8d      	ldr	r3, [pc, #564]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d05b      	beq.n	8006f44 <HAL_RCC_OscConfig+0x108>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d157      	bne.n	8006f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e2d9      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea0:	d106      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x74>
 8006ea2:	4b85      	ldr	r3, [pc, #532]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a84      	ldr	r2, [pc, #528]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e01d      	b.n	8006eec <HAL_RCC_OscConfig+0xb0>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x98>
 8006eba:	4b7f      	ldr	r3, [pc, #508]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a7e      	ldr	r2, [pc, #504]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a7b      	ldr	r2, [pc, #492]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e00b      	b.n	8006eec <HAL_RCC_OscConfig+0xb0>
 8006ed4:	4b78      	ldr	r3, [pc, #480]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a77      	ldr	r2, [pc, #476]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	4b75      	ldr	r3, [pc, #468]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a74      	ldr	r2, [pc, #464]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d013      	beq.n	8006f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef4:	f7fd fc22 	bl	800473c <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006efc:	f7fd fc1e 	bl	800473c <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b64      	cmp	r3, #100	@ 0x64
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e29e      	b.n	800744c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0f0      	beq.n	8006efc <HAL_RCC_OscConfig+0xc0>
 8006f1a:	e014      	b.n	8006f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1c:	f7fd fc0e 	bl	800473c <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f24:	f7fd fc0a 	bl	800473c <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b64      	cmp	r3, #100	@ 0x64
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e28a      	b.n	800744c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f36:	4b60      	ldr	r3, [pc, #384]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f0      	bne.n	8006f24 <HAL_RCC_OscConfig+0xe8>
 8006f42:	e000      	b.n	8006f46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d075      	beq.n	800703e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f52:	4b59      	ldr	r3, [pc, #356]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 030c 	and.w	r3, r3, #12
 8006f5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f5c:	4b56      	ldr	r3, [pc, #344]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0303 	and.w	r3, r3, #3
 8006f64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b0c      	cmp	r3, #12
 8006f6a:	d102      	bne.n	8006f72 <HAL_RCC_OscConfig+0x136>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d002      	beq.n	8006f78 <HAL_RCC_OscConfig+0x13c>
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d11f      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f78:	4b4f      	ldr	r3, [pc, #316]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_RCC_OscConfig+0x154>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e25d      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f90:	4b49      	ldr	r3, [pc, #292]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	061b      	lsls	r3, r3, #24
 8006f9e:	4946      	ldr	r1, [pc, #280]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006fa4:	4b45      	ldr	r3, [pc, #276]	@ (80070bc <HAL_RCC_OscConfig+0x280>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fd fb7b 	bl	80046a4 <HAL_InitTick>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d043      	beq.n	800703c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e249      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d023      	beq.n	8007008 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a3c      	ldr	r2, [pc, #240]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fcc:	f7fd fbb6 	bl	800473c <HAL_GetTick>
 8006fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fd4:	f7fd fbb2 	bl	800473c <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e232      	b.n	800744c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fe6:	4b34      	ldr	r3, [pc, #208]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0f0      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff2:	4b31      	ldr	r3, [pc, #196]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	061b      	lsls	r3, r3, #24
 8007000:	492d      	ldr	r1, [pc, #180]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8007002:	4313      	orrs	r3, r2
 8007004:	604b      	str	r3, [r1, #4]
 8007006:	e01a      	b.n	800703e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007008:	4b2b      	ldr	r3, [pc, #172]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a2a      	ldr	r2, [pc, #168]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 800700e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007014:	f7fd fb92 	bl	800473c <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800701c:	f7fd fb8e 	bl	800473c <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e20e      	b.n	800744c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800702e:	4b22      	ldr	r3, [pc, #136]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1f0      	bne.n	800701c <HAL_RCC_OscConfig+0x1e0>
 800703a:	e000      	b.n	800703e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800703c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d041      	beq.n	80070ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01c      	beq.n	800708c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007052:	4b19      	ldr	r3, [pc, #100]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8007054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007058:	4a17      	ldr	r2, [pc, #92]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007062:	f7fd fb6b 	bl	800473c <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800706a:	f7fd fb67 	bl	800473c <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e1e7      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800707c:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 800707e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0ef      	beq.n	800706a <HAL_RCC_OscConfig+0x22e>
 800708a:	e020      	b.n	80070ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800708c:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 800708e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007092:	4a09      	ldr	r2, [pc, #36]	@ (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709c:	f7fd fb4e 	bl	800473c <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070a2:	e00d      	b.n	80070c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070a4:	f7fd fb4a 	bl	800473c <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d906      	bls.n	80070c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e1ca      	b.n	800744c <HAL_RCC_OscConfig+0x610>
 80070b6:	bf00      	nop
 80070b8:	40021000 	.word	0x40021000
 80070bc:	2000021c 	.word	0x2000021c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070c0:	4b8c      	ldr	r3, [pc, #560]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80070c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1ea      	bne.n	80070a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 80a6 	beq.w	8007228 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070dc:	2300      	movs	r3, #0
 80070de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070e0:	4b84      	ldr	r3, [pc, #528]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80070e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <HAL_RCC_OscConfig+0x2b4>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <HAL_RCC_OscConfig+0x2b6>
 80070f0:	2300      	movs	r3, #0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00d      	beq.n	8007112 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070f6:	4b7f      	ldr	r3, [pc, #508]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80070f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fa:	4a7e      	ldr	r2, [pc, #504]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80070fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007100:	6593      	str	r3, [r2, #88]	@ 0x58
 8007102:	4b7c      	ldr	r3, [pc, #496]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 8007104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800710e:	2301      	movs	r3, #1
 8007110:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007112:	4b79      	ldr	r3, [pc, #484]	@ (80072f8 <HAL_RCC_OscConfig+0x4bc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d118      	bne.n	8007150 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800711e:	4b76      	ldr	r3, [pc, #472]	@ (80072f8 <HAL_RCC_OscConfig+0x4bc>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a75      	ldr	r2, [pc, #468]	@ (80072f8 <HAL_RCC_OscConfig+0x4bc>)
 8007124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800712a:	f7fd fb07 	bl	800473c <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007130:	e008      	b.n	8007144 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007132:	f7fd fb03 	bl	800473c <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e183      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007144:	4b6c      	ldr	r3, [pc, #432]	@ (80072f8 <HAL_RCC_OscConfig+0x4bc>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0f0      	beq.n	8007132 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d108      	bne.n	800716a <HAL_RCC_OscConfig+0x32e>
 8007158:	4b66      	ldr	r3, [pc, #408]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 800715a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715e:	4a65      	ldr	r2, [pc, #404]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007168:	e024      	b.n	80071b4 <HAL_RCC_OscConfig+0x378>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b05      	cmp	r3, #5
 8007170:	d110      	bne.n	8007194 <HAL_RCC_OscConfig+0x358>
 8007172:	4b60      	ldr	r3, [pc, #384]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007178:	4a5e      	ldr	r2, [pc, #376]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 800717a:	f043 0304 	orr.w	r3, r3, #4
 800717e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007182:	4b5c      	ldr	r3, [pc, #368]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007188:	4a5a      	ldr	r2, [pc, #360]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007192:	e00f      	b.n	80071b4 <HAL_RCC_OscConfig+0x378>
 8007194:	4b57      	ldr	r3, [pc, #348]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 8007196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719a:	4a56      	ldr	r2, [pc, #344]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80071a4:	4b53      	ldr	r3, [pc, #332]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071aa:	4a52      	ldr	r2, [pc, #328]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80071ac:	f023 0304 	bic.w	r3, r3, #4
 80071b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d016      	beq.n	80071ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071bc:	f7fd fabe 	bl	800473c <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071c2:	e00a      	b.n	80071da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071c4:	f7fd faba 	bl	800473c <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e138      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071da:	4b46      	ldr	r3, [pc, #280]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ed      	beq.n	80071c4 <HAL_RCC_OscConfig+0x388>
 80071e8:	e015      	b.n	8007216 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ea:	f7fd faa7 	bl	800473c <HAL_GetTick>
 80071ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071f0:	e00a      	b.n	8007208 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f2:	f7fd faa3 	bl	800473c <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007200:	4293      	cmp	r3, r2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e121      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007208:	4b3a      	ldr	r3, [pc, #232]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 800720a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1ed      	bne.n	80071f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007216:	7ffb      	ldrb	r3, [r7, #31]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d105      	bne.n	8007228 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800721c:	4b35      	ldr	r3, [pc, #212]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 800721e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007220:	4a34      	ldr	r2, [pc, #208]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 8007222:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007226:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b00      	cmp	r3, #0
 8007232:	d03c      	beq.n	80072ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01c      	beq.n	8007276 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800723c:	4b2d      	ldr	r3, [pc, #180]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 800723e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007242:	4a2c      	ldr	r2, [pc, #176]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724c:	f7fd fa76 	bl	800473c <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007254:	f7fd fa72 	bl	800473c <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e0f2      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007266:	4b23      	ldr	r3, [pc, #140]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 8007268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0ef      	beq.n	8007254 <HAL_RCC_OscConfig+0x418>
 8007274:	e01b      	b.n	80072ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007276:	4b1f      	ldr	r3, [pc, #124]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 8007278:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800727c:	4a1d      	ldr	r2, [pc, #116]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 800727e:	f023 0301 	bic.w	r3, r3, #1
 8007282:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007286:	f7fd fa59 	bl	800473c <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800728e:	f7fd fa55 	bl	800473c <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e0d5      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80072a0:	4b14      	ldr	r3, [pc, #80]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80072a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ef      	bne.n	800728e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80c9 	beq.w	800744a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072b8:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 030c 	and.w	r3, r3, #12
 80072c0:	2b0c      	cmp	r3, #12
 80072c2:	f000 8083 	beq.w	80073cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d15e      	bne.n	800738c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ce:	4b09      	ldr	r3, [pc, #36]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a08      	ldr	r2, [pc, #32]	@ (80072f4 <HAL_RCC_OscConfig+0x4b8>)
 80072d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072da:	f7fd fa2f 	bl	800473c <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072e0:	e00c      	b.n	80072fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072e2:	f7fd fa2b 	bl	800473c <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d905      	bls.n	80072fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e0ab      	b.n	800744c <HAL_RCC_OscConfig+0x610>
 80072f4:	40021000 	.word	0x40021000
 80072f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072fc:	4b55      	ldr	r3, [pc, #340]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1ec      	bne.n	80072e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007308:	4b52      	ldr	r3, [pc, #328]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	4b52      	ldr	r3, [pc, #328]	@ (8007458 <HAL_RCC_OscConfig+0x61c>)
 800730e:	4013      	ands	r3, r2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6a11      	ldr	r1, [r2, #32]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007318:	3a01      	subs	r2, #1
 800731a:	0112      	lsls	r2, r2, #4
 800731c:	4311      	orrs	r1, r2
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007322:	0212      	lsls	r2, r2, #8
 8007324:	4311      	orrs	r1, r2
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800732a:	0852      	lsrs	r2, r2, #1
 800732c:	3a01      	subs	r2, #1
 800732e:	0552      	lsls	r2, r2, #21
 8007330:	4311      	orrs	r1, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007336:	0852      	lsrs	r2, r2, #1
 8007338:	3a01      	subs	r2, #1
 800733a:	0652      	lsls	r2, r2, #25
 800733c:	4311      	orrs	r1, r2
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007342:	06d2      	lsls	r2, r2, #27
 8007344:	430a      	orrs	r2, r1
 8007346:	4943      	ldr	r1, [pc, #268]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 8007348:	4313      	orrs	r3, r2
 800734a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800734c:	4b41      	ldr	r3, [pc, #260]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a40      	ldr	r2, [pc, #256]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 8007352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007356:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007358:	4b3e      	ldr	r3, [pc, #248]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4a3d      	ldr	r2, [pc, #244]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 800735e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007362:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007364:	f7fd f9ea 	bl	800473c <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800736c:	f7fd f9e6 	bl	800473c <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e066      	b.n	800744c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800737e:	4b35      	ldr	r3, [pc, #212]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0f0      	beq.n	800736c <HAL_RCC_OscConfig+0x530>
 800738a:	e05e      	b.n	800744a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800738c:	4b31      	ldr	r3, [pc, #196]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a30      	ldr	r2, [pc, #192]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 8007392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007398:	f7fd f9d0 	bl	800473c <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a0:	f7fd f9cc 	bl	800473c <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e04c      	b.n	800744c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073b2:	4b28      	ldr	r3, [pc, #160]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f0      	bne.n	80073a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80073be:	4b25      	ldr	r3, [pc, #148]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	4924      	ldr	r1, [pc, #144]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 80073c4:	4b25      	ldr	r3, [pc, #148]	@ (800745c <HAL_RCC_OscConfig+0x620>)
 80073c6:	4013      	ands	r3, r2
 80073c8:	60cb      	str	r3, [r1, #12]
 80073ca:	e03e      	b.n	800744a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e039      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80073d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007454 <HAL_RCC_OscConfig+0x618>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f003 0203 	and.w	r2, r3, #3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d12c      	bne.n	8007446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	3b01      	subs	r3, #1
 80073f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d123      	bne.n	8007446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007408:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800740a:	429a      	cmp	r2, r3
 800740c:	d11b      	bne.n	8007446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007418:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800741a:	429a      	cmp	r2, r3
 800741c:	d113      	bne.n	8007446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007428:	085b      	lsrs	r3, r3, #1
 800742a:	3b01      	subs	r3, #1
 800742c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800742e:	429a      	cmp	r2, r3
 8007430:	d109      	bne.n	8007446 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743c:	085b      	lsrs	r3, r3, #1
 800743e:	3b01      	subs	r3, #1
 8007440:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007442:	429a      	cmp	r2, r3
 8007444:	d001      	beq.n	800744a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40021000 	.word	0x40021000
 8007458:	019f800c 	.word	0x019f800c
 800745c:	feeefffc 	.word	0xfeeefffc

08007460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e11e      	b.n	80076b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007478:	4b91      	ldr	r3, [pc, #580]	@ (80076c0 <HAL_RCC_ClockConfig+0x260>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d910      	bls.n	80074a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007486:	4b8e      	ldr	r3, [pc, #568]	@ (80076c0 <HAL_RCC_ClockConfig+0x260>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f023 020f 	bic.w	r2, r3, #15
 800748e:	498c      	ldr	r1, [pc, #560]	@ (80076c0 <HAL_RCC_ClockConfig+0x260>)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	4313      	orrs	r3, r2
 8007494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007496:	4b8a      	ldr	r3, [pc, #552]	@ (80076c0 <HAL_RCC_ClockConfig+0x260>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d001      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e106      	b.n	80076b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d073      	beq.n	800759c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d129      	bne.n	8007510 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074bc:	4b81      	ldr	r3, [pc, #516]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0f4      	b.n	80076b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80074cc:	f000 f99e 	bl	800780c <RCC_GetSysClockFreqFromPLLSource>
 80074d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	4a7c      	ldr	r2, [pc, #496]	@ (80076c8 <HAL_RCC_ClockConfig+0x268>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d93f      	bls.n	800755a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80074da:	4b7a      	ldr	r3, [pc, #488]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d009      	beq.n	80074fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d033      	beq.n	800755a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d12f      	bne.n	800755a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074fa:	4b72      	ldr	r3, [pc, #456]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007502:	4a70      	ldr	r2, [pc, #448]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 8007504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007508:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800750a:	2380      	movs	r3, #128	@ 0x80
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	e024      	b.n	800755a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d107      	bne.n	8007528 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007518:	4b6a      	ldr	r3, [pc, #424]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d109      	bne.n	8007538 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0c6      	b.n	80076b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007528:	4b66      	ldr	r3, [pc, #408]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e0be      	b.n	80076b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007538:	f000 f8ce 	bl	80076d8 <HAL_RCC_GetSysClockFreq>
 800753c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	4a61      	ldr	r2, [pc, #388]	@ (80076c8 <HAL_RCC_ClockConfig+0x268>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d909      	bls.n	800755a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007546:	4b5f      	ldr	r3, [pc, #380]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800754e:	4a5d      	ldr	r2, [pc, #372]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 8007550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007554:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007556:	2380      	movs	r3, #128	@ 0x80
 8007558:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800755a:	4b5a      	ldr	r3, [pc, #360]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f023 0203 	bic.w	r2, r3, #3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	4957      	ldr	r1, [pc, #348]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 8007568:	4313      	orrs	r3, r2
 800756a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756c:	f7fd f8e6 	bl	800473c <HAL_GetTick>
 8007570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007572:	e00a      	b.n	800758a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007574:	f7fd f8e2 	bl	800473c <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007582:	4293      	cmp	r3, r2
 8007584:	d901      	bls.n	800758a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e095      	b.n	80076b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800758a:	4b4e      	ldr	r3, [pc, #312]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 020c 	and.w	r2, r3, #12
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	429a      	cmp	r2, r3
 800759a:	d1eb      	bne.n	8007574 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d023      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d005      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075b4:	4b43      	ldr	r3, [pc, #268]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	4a42      	ldr	r2, [pc, #264]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80075ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d007      	beq.n	80075dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80075cc:	4b3d      	ldr	r3, [pc, #244]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075d4:	4a3b      	ldr	r2, [pc, #236]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80075d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075dc:	4b39      	ldr	r3, [pc, #228]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4936      	ldr	r1, [pc, #216]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	608b      	str	r3, [r1, #8]
 80075ee:	e008      	b.n	8007602 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2b80      	cmp	r3, #128	@ 0x80
 80075f4:	d105      	bne.n	8007602 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80075f6:	4b33      	ldr	r3, [pc, #204]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	4a32      	ldr	r2, [pc, #200]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 80075fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007600:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007602:	4b2f      	ldr	r3, [pc, #188]	@ (80076c0 <HAL_RCC_ClockConfig+0x260>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d21d      	bcs.n	800764c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007610:	4b2b      	ldr	r3, [pc, #172]	@ (80076c0 <HAL_RCC_ClockConfig+0x260>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f023 020f 	bic.w	r2, r3, #15
 8007618:	4929      	ldr	r1, [pc, #164]	@ (80076c0 <HAL_RCC_ClockConfig+0x260>)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	4313      	orrs	r3, r2
 800761e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007620:	f7fd f88c 	bl	800473c <HAL_GetTick>
 8007624:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007626:	e00a      	b.n	800763e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007628:	f7fd f888 	bl	800473c <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e03b      	b.n	80076b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800763e:	4b20      	ldr	r3, [pc, #128]	@ (80076c0 <HAL_RCC_ClockConfig+0x260>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d1ed      	bne.n	8007628 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d008      	beq.n	800766a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007658:	4b1a      	ldr	r3, [pc, #104]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4917      	ldr	r1, [pc, #92]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 8007666:	4313      	orrs	r3, r2
 8007668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007676:	4b13      	ldr	r3, [pc, #76]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	490f      	ldr	r1, [pc, #60]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 8007686:	4313      	orrs	r3, r2
 8007688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800768a:	f000 f825 	bl	80076d8 <HAL_RCC_GetSysClockFreq>
 800768e:	4602      	mov	r2, r0
 8007690:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <HAL_RCC_ClockConfig+0x264>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	091b      	lsrs	r3, r3, #4
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	490c      	ldr	r1, [pc, #48]	@ (80076cc <HAL_RCC_ClockConfig+0x26c>)
 800769c:	5ccb      	ldrb	r3, [r1, r3]
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	fa22 f303 	lsr.w	r3, r2, r3
 80076a6:	4a0a      	ldr	r2, [pc, #40]	@ (80076d0 <HAL_RCC_ClockConfig+0x270>)
 80076a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80076aa:	4b0a      	ldr	r3, [pc, #40]	@ (80076d4 <HAL_RCC_ClockConfig+0x274>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fc fff8 	bl	80046a4 <HAL_InitTick>
 80076b4:	4603      	mov	r3, r0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40022000 	.word	0x40022000
 80076c4:	40021000 	.word	0x40021000
 80076c8:	04c4b400 	.word	0x04c4b400
 80076cc:	0800bc64 	.word	0x0800bc64
 80076d0:	20000218 	.word	0x20000218
 80076d4:	2000021c 	.word	0x2000021c

080076d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80076de:	4b2c      	ldr	r3, [pc, #176]	@ (8007790 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 030c 	and.w	r3, r3, #12
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d102      	bne.n	80076f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80076ea:	4b2a      	ldr	r3, [pc, #168]	@ (8007794 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076ec:	613b      	str	r3, [r7, #16]
 80076ee:	e047      	b.n	8007780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80076f0:	4b27      	ldr	r3, [pc, #156]	@ (8007790 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f003 030c 	and.w	r3, r3, #12
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d102      	bne.n	8007702 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076fc:	4b26      	ldr	r3, [pc, #152]	@ (8007798 <HAL_RCC_GetSysClockFreq+0xc0>)
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	e03e      	b.n	8007780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007702:	4b23      	ldr	r3, [pc, #140]	@ (8007790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 030c 	and.w	r3, r3, #12
 800770a:	2b0c      	cmp	r3, #12
 800770c:	d136      	bne.n	800777c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800770e:	4b20      	ldr	r3, [pc, #128]	@ (8007790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007718:	4b1d      	ldr	r3, [pc, #116]	@ (8007790 <HAL_RCC_GetSysClockFreq+0xb8>)
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	091b      	lsrs	r3, r3, #4
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	3301      	adds	r3, #1
 8007724:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d10c      	bne.n	8007746 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800772c:	4a1a      	ldr	r2, [pc, #104]	@ (8007798 <HAL_RCC_GetSysClockFreq+0xc0>)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	fbb2 f3f3 	udiv	r3, r2, r3
 8007734:	4a16      	ldr	r2, [pc, #88]	@ (8007790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007736:	68d2      	ldr	r2, [r2, #12]
 8007738:	0a12      	lsrs	r2, r2, #8
 800773a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800773e:	fb02 f303 	mul.w	r3, r2, r3
 8007742:	617b      	str	r3, [r7, #20]
      break;
 8007744:	e00c      	b.n	8007760 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007746:	4a13      	ldr	r2, [pc, #76]	@ (8007794 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	fbb2 f3f3 	udiv	r3, r2, r3
 800774e:	4a10      	ldr	r2, [pc, #64]	@ (8007790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007750:	68d2      	ldr	r2, [r2, #12]
 8007752:	0a12      	lsrs	r2, r2, #8
 8007754:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007758:	fb02 f303 	mul.w	r3, r2, r3
 800775c:	617b      	str	r3, [r7, #20]
      break;
 800775e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007760:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	0e5b      	lsrs	r3, r3, #25
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	3301      	adds	r3, #1
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	fbb2 f3f3 	udiv	r3, r2, r3
 8007778:	613b      	str	r3, [r7, #16]
 800777a:	e001      	b.n	8007780 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007780:	693b      	ldr	r3, [r7, #16]
}
 8007782:	4618      	mov	r0, r3
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40021000 	.word	0x40021000
 8007794:	00f42400 	.word	0x00f42400
 8007798:	016e3600 	.word	0x016e3600

0800779c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077a0:	4b03      	ldr	r3, [pc, #12]	@ (80077b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80077a2:	681b      	ldr	r3, [r3, #0]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20000218 	.word	0x20000218

080077b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80077b8:	f7ff fff0 	bl	800779c <HAL_RCC_GetHCLKFreq>
 80077bc:	4602      	mov	r2, r0
 80077be:	4b06      	ldr	r3, [pc, #24]	@ (80077d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	0a1b      	lsrs	r3, r3, #8
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	4904      	ldr	r1, [pc, #16]	@ (80077dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80077ca:	5ccb      	ldrb	r3, [r1, r3]
 80077cc:	f003 031f 	and.w	r3, r3, #31
 80077d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40021000 	.word	0x40021000
 80077dc:	0800bc74 	.word	0x0800bc74

080077e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80077e4:	f7ff ffda 	bl	800779c <HAL_RCC_GetHCLKFreq>
 80077e8:	4602      	mov	r2, r0
 80077ea:	4b06      	ldr	r3, [pc, #24]	@ (8007804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	0adb      	lsrs	r3, r3, #11
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	4904      	ldr	r1, [pc, #16]	@ (8007808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077f6:	5ccb      	ldrb	r3, [r1, r3]
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007800:	4618      	mov	r0, r3
 8007802:	bd80      	pop	{r7, pc}
 8007804:	40021000 	.word	0x40021000
 8007808:	0800bc74 	.word	0x0800bc74

0800780c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007812:	4b1e      	ldr	r3, [pc, #120]	@ (800788c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800781c:	4b1b      	ldr	r3, [pc, #108]	@ (800788c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	091b      	lsrs	r3, r3, #4
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	3301      	adds	r3, #1
 8007828:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b03      	cmp	r3, #3
 800782e:	d10c      	bne.n	800784a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007830:	4a17      	ldr	r2, [pc, #92]	@ (8007890 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	4a14      	ldr	r2, [pc, #80]	@ (800788c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800783a:	68d2      	ldr	r2, [r2, #12]
 800783c:	0a12      	lsrs	r2, r2, #8
 800783e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	617b      	str	r3, [r7, #20]
    break;
 8007848:	e00c      	b.n	8007864 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800784a:	4a12      	ldr	r2, [pc, #72]	@ (8007894 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007852:	4a0e      	ldr	r2, [pc, #56]	@ (800788c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007854:	68d2      	ldr	r2, [r2, #12]
 8007856:	0a12      	lsrs	r2, r2, #8
 8007858:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800785c:	fb02 f303 	mul.w	r3, r2, r3
 8007860:	617b      	str	r3, [r7, #20]
    break;
 8007862:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007864:	4b09      	ldr	r3, [pc, #36]	@ (800788c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	0e5b      	lsrs	r3, r3, #25
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	3301      	adds	r3, #1
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800787e:	687b      	ldr	r3, [r7, #4]
}
 8007880:	4618      	mov	r0, r3
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	40021000 	.word	0x40021000
 8007890:	016e3600 	.word	0x016e3600
 8007894:	00f42400 	.word	0x00f42400

08007898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078a0:	2300      	movs	r3, #0
 80078a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078a4:	2300      	movs	r3, #0
 80078a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8098 	beq.w	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078b6:	2300      	movs	r3, #0
 80078b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078ba:	4b43      	ldr	r3, [pc, #268]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10d      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078c6:	4b40      	ldr	r3, [pc, #256]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ca:	4a3f      	ldr	r2, [pc, #252]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80078d2:	4b3d      	ldr	r3, [pc, #244]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078da:	60bb      	str	r3, [r7, #8]
 80078dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078de:	2301      	movs	r3, #1
 80078e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078e2:	4b3a      	ldr	r3, [pc, #232]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a39      	ldr	r2, [pc, #228]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078ee:	f7fc ff25 	bl	800473c <HAL_GetTick>
 80078f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078f4:	e009      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f6:	f7fc ff21 	bl	800473c <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d902      	bls.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	74fb      	strb	r3, [r7, #19]
        break;
 8007908:	e005      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800790a:	4b30      	ldr	r3, [pc, #192]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0ef      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007916:	7cfb      	ldrb	r3, [r7, #19]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d159      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800791c:	4b2a      	ldr	r3, [pc, #168]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007926:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01e      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	429a      	cmp	r2, r3
 8007936:	d019      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007938:	4b23      	ldr	r3, [pc, #140]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007942:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007944:	4b20      	ldr	r3, [pc, #128]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794a:	4a1f      	ldr	r2, [pc, #124]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800794c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007954:	4b1c      	ldr	r3, [pc, #112]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800795a:	4a1b      	ldr	r2, [pc, #108]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800795c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007964:	4a18      	ldr	r2, [pc, #96]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d016      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007976:	f7fc fee1 	bl	800473c <HAL_GetTick>
 800797a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800797c:	e00b      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800797e:	f7fc fedd 	bl	800473c <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800798c:	4293      	cmp	r3, r2
 800798e:	d902      	bls.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	74fb      	strb	r3, [r7, #19]
            break;
 8007994:	e006      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007996:	4b0c      	ldr	r3, [pc, #48]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0ec      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80079a4:	7cfb      	ldrb	r3, [r7, #19]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079aa:	4b07      	ldr	r3, [pc, #28]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079b8:	4903      	ldr	r1, [pc, #12]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80079c0:	e008      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079c2:	7cfb      	ldrb	r3, [r7, #19]
 80079c4:	74bb      	strb	r3, [r7, #18]
 80079c6:	e005      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80079c8:	40021000 	.word	0x40021000
 80079cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d0:	7cfb      	ldrb	r3, [r7, #19]
 80079d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079d4:	7c7b      	ldrb	r3, [r7, #17]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d105      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079da:	4ba7      	ldr	r3, [pc, #668]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079de:	4aa6      	ldr	r2, [pc, #664]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079f2:	4ba1      	ldr	r3, [pc, #644]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f8:	f023 0203 	bic.w	r2, r3, #3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	499d      	ldr	r1, [pc, #628]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00a      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a14:	4b98      	ldr	r3, [pc, #608]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1a:	f023 020c 	bic.w	r2, r3, #12
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	4995      	ldr	r1, [pc, #596]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a36:	4b90      	ldr	r3, [pc, #576]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	498c      	ldr	r1, [pc, #560]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0308 	and.w	r3, r3, #8
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00a      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a58:	4b87      	ldr	r3, [pc, #540]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	4984      	ldr	r1, [pc, #528]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	497b      	ldr	r1, [pc, #492]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00a      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a9c:	4b76      	ldr	r3, [pc, #472]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	4973      	ldr	r1, [pc, #460]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007abe:	4b6e      	ldr	r3, [pc, #440]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	496a      	ldr	r1, [pc, #424]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ae0:	4b65      	ldr	r3, [pc, #404]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	4962      	ldr	r1, [pc, #392]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b02:	4b5d      	ldr	r3, [pc, #372]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	4959      	ldr	r1, [pc, #356]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b24:	4b54      	ldr	r3, [pc, #336]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b2a:	f023 0203 	bic.w	r2, r3, #3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b32:	4951      	ldr	r1, [pc, #324]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b46:	4b4c      	ldr	r3, [pc, #304]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b54:	4948      	ldr	r1, [pc, #288]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d015      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b68:	4b43      	ldr	r3, [pc, #268]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	4940      	ldr	r1, [pc, #256]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b86:	d105      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b88:	4b3b      	ldr	r3, [pc, #236]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d015      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ba0:	4b35      	ldr	r3, [pc, #212]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bae:	4932      	ldr	r1, [pc, #200]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bbe:	d105      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d015      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bd8:	4b27      	ldr	r3, [pc, #156]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be6:	4924      	ldr	r1, [pc, #144]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bf6:	d105      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d015      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c10:	4b19      	ldr	r3, [pc, #100]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1e:	4916      	ldr	r1, [pc, #88]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c2e:	d105      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c30:	4b11      	ldr	r3, [pc, #68]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	4a10      	ldr	r2, [pc, #64]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d019      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c48:	4b0b      	ldr	r3, [pc, #44]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c56:	4908      	ldr	r1, [pc, #32]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c66:	d109      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c68:	4b03      	ldr	r3, [pc, #12]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	4a02      	ldr	r2, [pc, #8]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c72:	60d3      	str	r3, [r2, #12]
 8007c74:	e002      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007c76:	bf00      	nop
 8007c78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d015      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c88:	4b29      	ldr	r3, [pc, #164]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c96:	4926      	ldr	r1, [pc, #152]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ca6:	d105      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ca8:	4b21      	ldr	r3, [pc, #132]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	4a20      	ldr	r2, [pc, #128]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cb2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d015      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cce:	4918      	ldr	r1, [pc, #96]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cde:	d105      	bne.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ce0:	4b13      	ldr	r3, [pc, #76]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	4a12      	ldr	r2, [pc, #72]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d015      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d06:	490a      	ldr	r1, [pc, #40]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d16:	d105      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d18:	4b05      	ldr	r3, [pc, #20]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	4a04      	ldr	r2, [pc, #16]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007d24:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40021000 	.word	0x40021000

08007d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e054      	b.n	8007df0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d111      	bne.n	8007d76 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 feec 	bl	8009b38 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a23      	ldr	r2, [pc, #140]	@ (8007df8 <HAL_TIM_Base_Init+0xc4>)
 8007d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f001 fa35 	bl	80091f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	080040e5 	.word	0x080040e5

08007dfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d001      	beq.n	8007e14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e04c      	b.n	8007eae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a26      	ldr	r2, [pc, #152]	@ (8007ebc <HAL_TIM_Base_Start+0xc0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d022      	beq.n	8007e6c <HAL_TIM_Base_Start+0x70>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2e:	d01d      	beq.n	8007e6c <HAL_TIM_Base_Start+0x70>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a22      	ldr	r2, [pc, #136]	@ (8007ec0 <HAL_TIM_Base_Start+0xc4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <HAL_TIM_Base_Start+0x70>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a21      	ldr	r2, [pc, #132]	@ (8007ec4 <HAL_TIM_Base_Start+0xc8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <HAL_TIM_Base_Start+0x70>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a1f      	ldr	r2, [pc, #124]	@ (8007ec8 <HAL_TIM_Base_Start+0xcc>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00e      	beq.n	8007e6c <HAL_TIM_Base_Start+0x70>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1e      	ldr	r2, [pc, #120]	@ (8007ecc <HAL_TIM_Base_Start+0xd0>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <HAL_TIM_Base_Start+0x70>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed0 <HAL_TIM_Base_Start+0xd4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_TIM_Base_Start+0x70>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed4 <HAL_TIM_Base_Start+0xd8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d115      	bne.n	8007e98 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	4b19      	ldr	r3, [pc, #100]	@ (8007ed8 <HAL_TIM_Base_Start+0xdc>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b06      	cmp	r3, #6
 8007e7c:	d015      	beq.n	8007eaa <HAL_TIM_Base_Start+0xae>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e84:	d011      	beq.n	8007eaa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f042 0201 	orr.w	r2, r2, #1
 8007e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e96:	e008      	b.n	8007eaa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e000      	b.n	8007eac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	40012c00 	.word	0x40012c00
 8007ec0:	40000400 	.word	0x40000400
 8007ec4:	40000800 	.word	0x40000800
 8007ec8:	40000c00 	.word	0x40000c00
 8007ecc:	40013400 	.word	0x40013400
 8007ed0:	40014000 	.word	0x40014000
 8007ed4:	40015000 	.word	0x40015000
 8007ed8:	00010007 	.word	0x00010007

08007edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d001      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e054      	b.n	8007f9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a26      	ldr	r2, [pc, #152]	@ (8007fac <HAL_TIM_Base_Start_IT+0xd0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d022      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x80>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1e:	d01d      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x80>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a22      	ldr	r2, [pc, #136]	@ (8007fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d018      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x80>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a21      	ldr	r2, [pc, #132]	@ (8007fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d013      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x80>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a1f      	ldr	r2, [pc, #124]	@ (8007fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00e      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x80>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a1e      	ldr	r2, [pc, #120]	@ (8007fbc <HAL_TIM_Base_Start_IT+0xe0>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d009      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x80>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007fc0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d004      	beq.n	8007f5c <HAL_TIM_Base_Start_IT+0x80>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a1b      	ldr	r2, [pc, #108]	@ (8007fc4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d115      	bne.n	8007f88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	4b19      	ldr	r3, [pc, #100]	@ (8007fc8 <HAL_TIM_Base_Start_IT+0xec>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b06      	cmp	r3, #6
 8007f6c:	d015      	beq.n	8007f9a <HAL_TIM_Base_Start_IT+0xbe>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f74:	d011      	beq.n	8007f9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0201 	orr.w	r2, r2, #1
 8007f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f86:	e008      	b.n	8007f9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e000      	b.n	8007f9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40012c00 	.word	0x40012c00
 8007fb0:	40000400 	.word	0x40000400
 8007fb4:	40000800 	.word	0x40000800
 8007fb8:	40000c00 	.word	0x40000c00
 8007fbc:	40013400 	.word	0x40013400
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40015000 	.word	0x40015000
 8007fc8:	00010007 	.word	0x00010007

08007fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e054      	b.n	8008088 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d111      	bne.n	800800e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 fda0 	bl	8009b38 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d102      	bne.n	8008006 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a23      	ldr	r2, [pc, #140]	@ (8008090 <HAL_TIM_PWM_Init+0xc4>)
 8008004:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f001 f8e9 	bl	80091f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	08008095 	.word	0x08008095

08008094 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d109      	bne.n	80080cc <HAL_TIM_PWM_Start+0x24>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	bf14      	ite	ne
 80080c4:	2301      	movne	r3, #1
 80080c6:	2300      	moveq	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	e03c      	b.n	8008146 <HAL_TIM_PWM_Start+0x9e>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d109      	bne.n	80080e6 <HAL_TIM_PWM_Start+0x3e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b01      	cmp	r3, #1
 80080dc:	bf14      	ite	ne
 80080de:	2301      	movne	r3, #1
 80080e0:	2300      	moveq	r3, #0
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	e02f      	b.n	8008146 <HAL_TIM_PWM_Start+0x9e>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d109      	bne.n	8008100 <HAL_TIM_PWM_Start+0x58>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	bf14      	ite	ne
 80080f8:	2301      	movne	r3, #1
 80080fa:	2300      	moveq	r3, #0
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	e022      	b.n	8008146 <HAL_TIM_PWM_Start+0x9e>
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b0c      	cmp	r3, #12
 8008104:	d109      	bne.n	800811a <HAL_TIM_PWM_Start+0x72>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b01      	cmp	r3, #1
 8008110:	bf14      	ite	ne
 8008112:	2301      	movne	r3, #1
 8008114:	2300      	moveq	r3, #0
 8008116:	b2db      	uxtb	r3, r3
 8008118:	e015      	b.n	8008146 <HAL_TIM_PWM_Start+0x9e>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b10      	cmp	r3, #16
 800811e:	d109      	bne.n	8008134 <HAL_TIM_PWM_Start+0x8c>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b01      	cmp	r3, #1
 800812a:	bf14      	ite	ne
 800812c:	2301      	movne	r3, #1
 800812e:	2300      	moveq	r3, #0
 8008130:	b2db      	uxtb	r3, r3
 8008132:	e008      	b.n	8008146 <HAL_TIM_PWM_Start+0x9e>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b01      	cmp	r3, #1
 800813e:	bf14      	ite	ne
 8008140:	2301      	movne	r3, #1
 8008142:	2300      	moveq	r3, #0
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e0a6      	b.n	800829c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d104      	bne.n	800815e <HAL_TIM_PWM_Start+0xb6>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800815c:	e023      	b.n	80081a6 <HAL_TIM_PWM_Start+0xfe>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b04      	cmp	r3, #4
 8008162:	d104      	bne.n	800816e <HAL_TIM_PWM_Start+0xc6>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2202      	movs	r2, #2
 8008168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800816c:	e01b      	b.n	80081a6 <HAL_TIM_PWM_Start+0xfe>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b08      	cmp	r3, #8
 8008172:	d104      	bne.n	800817e <HAL_TIM_PWM_Start+0xd6>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800817c:	e013      	b.n	80081a6 <HAL_TIM_PWM_Start+0xfe>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b0c      	cmp	r3, #12
 8008182:	d104      	bne.n	800818e <HAL_TIM_PWM_Start+0xe6>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800818c:	e00b      	b.n	80081a6 <HAL_TIM_PWM_Start+0xfe>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b10      	cmp	r3, #16
 8008192:	d104      	bne.n	800819e <HAL_TIM_PWM_Start+0xf6>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800819c:	e003      	b.n	80081a6 <HAL_TIM_PWM_Start+0xfe>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2201      	movs	r2, #1
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 fc9c 	bl	8009aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a3a      	ldr	r2, [pc, #232]	@ (80082a4 <HAL_TIM_PWM_Start+0x1fc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d018      	beq.n	80081f0 <HAL_TIM_PWM_Start+0x148>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a39      	ldr	r2, [pc, #228]	@ (80082a8 <HAL_TIM_PWM_Start+0x200>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d013      	beq.n	80081f0 <HAL_TIM_PWM_Start+0x148>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a37      	ldr	r2, [pc, #220]	@ (80082ac <HAL_TIM_PWM_Start+0x204>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00e      	beq.n	80081f0 <HAL_TIM_PWM_Start+0x148>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a36      	ldr	r2, [pc, #216]	@ (80082b0 <HAL_TIM_PWM_Start+0x208>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d009      	beq.n	80081f0 <HAL_TIM_PWM_Start+0x148>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a34      	ldr	r2, [pc, #208]	@ (80082b4 <HAL_TIM_PWM_Start+0x20c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d004      	beq.n	80081f0 <HAL_TIM_PWM_Start+0x148>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a33      	ldr	r2, [pc, #204]	@ (80082b8 <HAL_TIM_PWM_Start+0x210>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d101      	bne.n	80081f4 <HAL_TIM_PWM_Start+0x14c>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <HAL_TIM_PWM_Start+0x14e>
 80081f4:	2300      	movs	r3, #0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008208:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a25      	ldr	r2, [pc, #148]	@ (80082a4 <HAL_TIM_PWM_Start+0x1fc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d022      	beq.n	800825a <HAL_TIM_PWM_Start+0x1b2>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800821c:	d01d      	beq.n	800825a <HAL_TIM_PWM_Start+0x1b2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a26      	ldr	r2, [pc, #152]	@ (80082bc <HAL_TIM_PWM_Start+0x214>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d018      	beq.n	800825a <HAL_TIM_PWM_Start+0x1b2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a24      	ldr	r2, [pc, #144]	@ (80082c0 <HAL_TIM_PWM_Start+0x218>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d013      	beq.n	800825a <HAL_TIM_PWM_Start+0x1b2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a23      	ldr	r2, [pc, #140]	@ (80082c4 <HAL_TIM_PWM_Start+0x21c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d00e      	beq.n	800825a <HAL_TIM_PWM_Start+0x1b2>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a19      	ldr	r2, [pc, #100]	@ (80082a8 <HAL_TIM_PWM_Start+0x200>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d009      	beq.n	800825a <HAL_TIM_PWM_Start+0x1b2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a18      	ldr	r2, [pc, #96]	@ (80082ac <HAL_TIM_PWM_Start+0x204>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d004      	beq.n	800825a <HAL_TIM_PWM_Start+0x1b2>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a18      	ldr	r2, [pc, #96]	@ (80082b8 <HAL_TIM_PWM_Start+0x210>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d115      	bne.n	8008286 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	4b19      	ldr	r3, [pc, #100]	@ (80082c8 <HAL_TIM_PWM_Start+0x220>)
 8008262:	4013      	ands	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b06      	cmp	r3, #6
 800826a:	d015      	beq.n	8008298 <HAL_TIM_PWM_Start+0x1f0>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008272:	d011      	beq.n	8008298 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0201 	orr.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008284:	e008      	b.n	8008298 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0201 	orr.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	e000      	b.n	800829a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008298:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	40012c00 	.word	0x40012c00
 80082a8:	40013400 	.word	0x40013400
 80082ac:	40014000 	.word	0x40014000
 80082b0:	40014400 	.word	0x40014400
 80082b4:	40014800 	.word	0x40014800
 80082b8:	40015000 	.word	0x40015000
 80082bc:	40000400 	.word	0x40000400
 80082c0:	40000800 	.word	0x40000800
 80082c4:	40000c00 	.word	0x40000c00
 80082c8:	00010007 	.word	0x00010007

080082cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e04c      	b.n	800837a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d111      	bne.n	8008310 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 fc1f 	bl	8009b38 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d102      	bne.n	8008308 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a1f      	ldr	r2, [pc, #124]	@ (8008384 <HAL_TIM_OnePulse_Init+0xb8>)
 8008306:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f000 ff68 	bl	80091f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0208 	bic.w	r2, r2, #8
 8008336:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6819      	ldr	r1, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	08008389 	.word	0x08008389

08008388 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083c4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d108      	bne.n	80083de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d105      	bne.n	80083de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083d2:	7b7b      	ldrb	r3, [r7, #13]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d102      	bne.n	80083de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80083d8:	7b3b      	ldrb	r3, [r7, #12]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d001      	beq.n	80083e2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e059      	b.n	8008496 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2202      	movs	r2, #2
 80083e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2202      	movs	r2, #2
 80083ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2202      	movs	r2, #2
 80083f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2202      	movs	r2, #2
 80083fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f042 0202 	orr.w	r2, r2, #2
 8008410:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f042 0204 	orr.w	r2, r2, #4
 8008420:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2201      	movs	r2, #1
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f001 fb5e 	bl	8009aec <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2201      	movs	r2, #1
 8008436:	2104      	movs	r1, #4
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fb57 	bl	8009aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a17      	ldr	r2, [pc, #92]	@ (80084a0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d018      	beq.n	800847a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a15      	ldr	r2, [pc, #84]	@ (80084a4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d013      	beq.n	800847a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a14      	ldr	r2, [pc, #80]	@ (80084a8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00e      	beq.n	800847a <HAL_TIM_OnePulse_Start_IT+0xde>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a12      	ldr	r2, [pc, #72]	@ (80084ac <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d009      	beq.n	800847a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a11      	ldr	r2, [pc, #68]	@ (80084b0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d004      	beq.n	800847a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a0f      	ldr	r2, [pc, #60]	@ (80084b4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d101      	bne.n	800847e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800847e:	2300      	movs	r3, #0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008492:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	40012c00 	.word	0x40012c00
 80084a4:	40013400 	.word	0x40013400
 80084a8:	40014000 	.word	0x40014000
 80084ac:	40014400 	.word	0x40014400
 80084b0:	40014800 	.word	0x40014800
 80084b4:	40015000 	.word	0x40015000

080084b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0a2      	b.n	8008612 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d111      	bne.n	80084fc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 fb29 	bl	8009b38 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a4a      	ldr	r2, [pc, #296]	@ (800861c <HAL_TIM_Encoder_Init+0x164>)
 80084f2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2202      	movs	r2, #2
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	6812      	ldr	r2, [r2, #0]
 800850e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008512:	f023 0307 	bic.w	r3, r3, #7
 8008516:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3304      	adds	r3, #4
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f000 fe68 	bl	80091f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008550:	f023 0303 	bic.w	r3, r3, #3
 8008554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	021b      	lsls	r3, r3, #8
 8008560:	4313      	orrs	r3, r2
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	4313      	orrs	r3, r2
 8008566:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800856e:	f023 030c 	bic.w	r3, r3, #12
 8008572:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800857a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800857e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	4313      	orrs	r3, r2
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	011a      	lsls	r2, r3, #4
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	031b      	lsls	r3, r3, #12
 800859e:	4313      	orrs	r3, r2
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80085ac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80085b4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	4313      	orrs	r3, r2
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	0800424d 	.word	0x0800424d

08008620 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008630:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008638:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008640:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008648:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d110      	bne.n	8008672 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d102      	bne.n	800865c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008656:	7b7b      	ldrb	r3, [r7, #13]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d001      	beq.n	8008660 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e069      	b.n	8008734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008670:	e031      	b.n	80086d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b04      	cmp	r3, #4
 8008676:	d110      	bne.n	800869a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d102      	bne.n	8008684 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800867e:	7b3b      	ldrb	r3, [r7, #12]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d001      	beq.n	8008688 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e055      	b.n	8008734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008698:	e01d      	b.n	80086d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d108      	bne.n	80086b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d105      	bne.n	80086b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086a6:	7b7b      	ldrb	r3, [r7, #13]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d102      	bne.n	80086b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086ac:	7b3b      	ldrb	r3, [r7, #12]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d001      	beq.n	80086b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e03e      	b.n	8008734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2202      	movs	r2, #2
 80086c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2202      	movs	r2, #2
 80086ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2202      	movs	r2, #2
 80086d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <HAL_TIM_Encoder_Start+0xc4>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d008      	beq.n	80086f4 <HAL_TIM_Encoder_Start+0xd4>
 80086e2:	e00f      	b.n	8008704 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2201      	movs	r2, #1
 80086ea:	2100      	movs	r1, #0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 f9fd 	bl	8009aec <TIM_CCxChannelCmd>
      break;
 80086f2:	e016      	b.n	8008722 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2201      	movs	r2, #1
 80086fa:	2104      	movs	r1, #4
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 f9f5 	bl	8009aec <TIM_CCxChannelCmd>
      break;
 8008702:	e00e      	b.n	8008722 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2201      	movs	r2, #1
 800870a:	2100      	movs	r1, #0
 800870c:	4618      	mov	r0, r3
 800870e:	f001 f9ed 	bl	8009aec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2201      	movs	r2, #1
 8008718:	2104      	movs	r1, #4
 800871a:	4618      	mov	r0, r3
 800871c:	f001 f9e6 	bl	8009aec <TIM_CCxChannelCmd>
      break;
 8008720:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f042 0201 	orr.w	r2, r2, #1
 8008730:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d026      	beq.n	80087ac <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d021      	beq.n	80087ac <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f06f 0202 	mvn.w	r2, #2
 8008770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	f003 0303 	and.w	r3, r3, #3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	4798      	blx	r3
 8008790:	e009      	b.n	80087a6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d026      	beq.n	8008804 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d021      	beq.n	8008804 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f06f 0204 	mvn.w	r2, #4
 80087c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2202      	movs	r2, #2
 80087ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
 80087e8:	e009      	b.n	80087fe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d026      	beq.n	800885c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f003 0308 	and.w	r3, r3, #8
 8008814:	2b00      	cmp	r3, #0
 8008816:	d021      	beq.n	800885c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f06f 0208 	mvn.w	r2, #8
 8008820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2204      	movs	r2, #4
 8008826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	f003 0303 	and.w	r3, r3, #3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	4798      	blx	r3
 8008840:	e009      	b.n	8008856 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f003 0310 	and.w	r3, r3, #16
 8008862:	2b00      	cmp	r3, #0
 8008864:	d026      	beq.n	80088b4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b00      	cmp	r3, #0
 800886e:	d021      	beq.n	80088b4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0210 	mvn.w	r2, #16
 8008878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2208      	movs	r2, #8
 800887e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800888a:	2b00      	cmp	r3, #0
 800888c:	d005      	beq.n	800889a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	4798      	blx	r3
 8008898:	e009      	b.n	80088ae <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00e      	beq.n	80088dc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d009      	beq.n	80088dc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f06f 0201 	mvn.w	r2, #1
 80088d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d104      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00e      	beq.n	800890e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d009      	beq.n	800890e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00e      	beq.n	8008936 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800891e:	2b00      	cmp	r3, #0
 8008920:	d009      	beq.n	8008936 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800892a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00e      	beq.n	800895e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d009      	beq.n	800895e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00e      	beq.n	8008986 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f06f 0220 	mvn.w	r2, #32
 800897a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00e      	beq.n	80089ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d009      	beq.n	80089ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80089a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00e      	beq.n	80089d6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80089ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00e      	beq.n	80089fe <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d009      	beq.n	80089fe <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80089f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00e      	beq.n	8008a26 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a26:	bf00      	nop
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e0ff      	b.n	8008c4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b14      	cmp	r3, #20
 8008a5a:	f200 80f0 	bhi.w	8008c3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008ab9 	.word	0x08008ab9
 8008a68:	08008c3f 	.word	0x08008c3f
 8008a6c:	08008c3f 	.word	0x08008c3f
 8008a70:	08008c3f 	.word	0x08008c3f
 8008a74:	08008af9 	.word	0x08008af9
 8008a78:	08008c3f 	.word	0x08008c3f
 8008a7c:	08008c3f 	.word	0x08008c3f
 8008a80:	08008c3f 	.word	0x08008c3f
 8008a84:	08008b3b 	.word	0x08008b3b
 8008a88:	08008c3f 	.word	0x08008c3f
 8008a8c:	08008c3f 	.word	0x08008c3f
 8008a90:	08008c3f 	.word	0x08008c3f
 8008a94:	08008b7b 	.word	0x08008b7b
 8008a98:	08008c3f 	.word	0x08008c3f
 8008a9c:	08008c3f 	.word	0x08008c3f
 8008aa0:	08008c3f 	.word	0x08008c3f
 8008aa4:	08008bbd 	.word	0x08008bbd
 8008aa8:	08008c3f 	.word	0x08008c3f
 8008aac:	08008c3f 	.word	0x08008c3f
 8008ab0:	08008c3f 	.word	0x08008c3f
 8008ab4:	08008bfd 	.word	0x08008bfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fc4e 	bl	8009360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	699a      	ldr	r2, [r3, #24]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0208 	orr.w	r2, r2, #8
 8008ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	699a      	ldr	r2, [r3, #24]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0204 	bic.w	r2, r2, #4
 8008ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6999      	ldr	r1, [r3, #24]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	691a      	ldr	r2, [r3, #16]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	619a      	str	r2, [r3, #24]
      break;
 8008af6:	e0a5      	b.n	8008c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fcc8 	bl	8009494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699a      	ldr	r2, [r3, #24]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699a      	ldr	r2, [r3, #24]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6999      	ldr	r1, [r3, #24]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	021a      	lsls	r2, r3, #8
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	619a      	str	r2, [r3, #24]
      break;
 8008b38:	e084      	b.n	8008c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 fd3b 	bl	80095bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69da      	ldr	r2, [r3, #28]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0208 	orr.w	r2, r2, #8
 8008b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	69da      	ldr	r2, [r3, #28]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 0204 	bic.w	r2, r2, #4
 8008b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	69d9      	ldr	r1, [r3, #28]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	61da      	str	r2, [r3, #28]
      break;
 8008b78:	e064      	b.n	8008c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68b9      	ldr	r1, [r7, #8]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fdad 	bl	80096e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69da      	ldr	r2, [r3, #28]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69da      	ldr	r2, [r3, #28]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	69d9      	ldr	r1, [r3, #28]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	021a      	lsls	r2, r3, #8
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	61da      	str	r2, [r3, #28]
      break;
 8008bba:	e043      	b.n	8008c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68b9      	ldr	r1, [r7, #8]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fe20 	bl	8009808 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0208 	orr.w	r2, r2, #8
 8008bd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0204 	bic.w	r2, r2, #4
 8008be6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	691a      	ldr	r2, [r3, #16]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008bfa:	e023      	b.n	8008c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fe6a 	bl	80098dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c16:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c26:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	021a      	lsls	r2, r3, #8
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008c3c:	e002      	b.n	8008c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	75fb      	strb	r3, [r7, #23]
      break;
 8008c42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop

08008c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_TIM_ConfigClockSource+0x1c>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e0f6      	b.n	8008e62 <HAL_TIM_ConfigClockSource+0x20a>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008c92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a6f      	ldr	r2, [pc, #444]	@ (8008e6c <HAL_TIM_ConfigClockSource+0x214>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	f000 80c1 	beq.w	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008cb4:	4a6d      	ldr	r2, [pc, #436]	@ (8008e6c <HAL_TIM_ConfigClockSource+0x214>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	f200 80c6 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cbc:	4a6c      	ldr	r2, [pc, #432]	@ (8008e70 <HAL_TIM_ConfigClockSource+0x218>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	f000 80b9 	beq.w	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8008e70 <HAL_TIM_ConfigClockSource+0x218>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	f200 80be 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ccc:	4a69      	ldr	r2, [pc, #420]	@ (8008e74 <HAL_TIM_ConfigClockSource+0x21c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	f000 80b1 	beq.w	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008cd4:	4a67      	ldr	r2, [pc, #412]	@ (8008e74 <HAL_TIM_ConfigClockSource+0x21c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	f200 80b6 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cdc:	4a66      	ldr	r2, [pc, #408]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x220>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	f000 80a9 	beq.w	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008ce4:	4a64      	ldr	r2, [pc, #400]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x220>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	f200 80ae 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cec:	4a63      	ldr	r2, [pc, #396]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x224>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	f000 80a1 	beq.w	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008cf4:	4a61      	ldr	r2, [pc, #388]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x224>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	f200 80a6 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cfc:	4a60      	ldr	r2, [pc, #384]	@ (8008e80 <HAL_TIM_ConfigClockSource+0x228>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	f000 8099 	beq.w	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008d04:	4a5e      	ldr	r2, [pc, #376]	@ (8008e80 <HAL_TIM_ConfigClockSource+0x228>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	f200 809e 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d10:	f000 8091 	beq.w	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008d14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d18:	f200 8096 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d20:	f000 8089 	beq.w	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d28:	f200 808e 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d30:	d03e      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x158>
 8008d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d36:	f200 8087 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d3e:	f000 8086 	beq.w	8008e4e <HAL_TIM_ConfigClockSource+0x1f6>
 8008d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d46:	d87f      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d48:	2b70      	cmp	r3, #112	@ 0x70
 8008d4a:	d01a      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0x12a>
 8008d4c:	2b70      	cmp	r3, #112	@ 0x70
 8008d4e:	d87b      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d50:	2b60      	cmp	r3, #96	@ 0x60
 8008d52:	d050      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x19e>
 8008d54:	2b60      	cmp	r3, #96	@ 0x60
 8008d56:	d877      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d58:	2b50      	cmp	r3, #80	@ 0x50
 8008d5a:	d03c      	beq.n	8008dd6 <HAL_TIM_ConfigClockSource+0x17e>
 8008d5c:	2b50      	cmp	r3, #80	@ 0x50
 8008d5e:	d873      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d60:	2b40      	cmp	r3, #64	@ 0x40
 8008d62:	d058      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x1be>
 8008d64:	2b40      	cmp	r3, #64	@ 0x40
 8008d66:	d86f      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d68:	2b30      	cmp	r3, #48	@ 0x30
 8008d6a:	d064      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008d6c:	2b30      	cmp	r3, #48	@ 0x30
 8008d6e:	d86b      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d70:	2b20      	cmp	r3, #32
 8008d72:	d060      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	d867      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d05c      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008d7c:	2b10      	cmp	r3, #16
 8008d7e:	d05a      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x1de>
 8008d80:	e062      	b.n	8008e48 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d92:	f000 fe8b 	bl	8009aac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008da4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	609a      	str	r2, [r3, #8]
      break;
 8008dae:	e04f      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dc0:	f000 fe74 	bl	8009aac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689a      	ldr	r2, [r3, #8]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dd2:	609a      	str	r2, [r3, #8]
      break;
 8008dd4:	e03c      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008de2:	461a      	mov	r2, r3
 8008de4:	f000 fde6 	bl	80099b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2150      	movs	r1, #80	@ 0x50
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fe3f 	bl	8009a72 <TIM_ITRx_SetConfig>
      break;
 8008df4:	e02c      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e02:	461a      	mov	r2, r3
 8008e04:	f000 fe05 	bl	8009a12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2160      	movs	r1, #96	@ 0x60
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fe2f 	bl	8009a72 <TIM_ITRx_SetConfig>
      break;
 8008e14:	e01c      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e22:	461a      	mov	r2, r3
 8008e24:	f000 fdc6 	bl	80099b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2140      	movs	r1, #64	@ 0x40
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fe1f 	bl	8009a72 <TIM_ITRx_SetConfig>
      break;
 8008e34:	e00c      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	4610      	mov	r0, r2
 8008e42:	f000 fe16 	bl	8009a72 <TIM_ITRx_SetConfig>
      break;
 8008e46:	e003      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4c:	e000      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	00100070 	.word	0x00100070
 8008e70:	00100060 	.word	0x00100060
 8008e74:	00100050 	.word	0x00100050
 8008e78:	00100040 	.word	0x00100040
 8008e7c:	00100030 	.word	0x00100030
 8008e80:	00100020 	.word	0x00100020

08008e84 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	460b      	mov	r3, r1
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e14a      	b.n	80091ea <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	f040 80dd 	bne.w	800911c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008f62:	7afb      	ldrb	r3, [r7, #11]
 8008f64:	2b1f      	cmp	r3, #31
 8008f66:	f200 80d6 	bhi.w	8009116 <HAL_TIM_RegisterCallback+0x1de>
 8008f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f70 <HAL_TIM_RegisterCallback+0x38>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08008ff1 	.word	0x08008ff1
 8008f74:	08008ff9 	.word	0x08008ff9
 8008f78:	08009001 	.word	0x08009001
 8008f7c:	08009009 	.word	0x08009009
 8008f80:	08009011 	.word	0x08009011
 8008f84:	08009019 	.word	0x08009019
 8008f88:	08009021 	.word	0x08009021
 8008f8c:	08009029 	.word	0x08009029
 8008f90:	08009031 	.word	0x08009031
 8008f94:	08009039 	.word	0x08009039
 8008f98:	08009041 	.word	0x08009041
 8008f9c:	08009049 	.word	0x08009049
 8008fa0:	08009051 	.word	0x08009051
 8008fa4:	08009059 	.word	0x08009059
 8008fa8:	08009063 	.word	0x08009063
 8008fac:	0800906d 	.word	0x0800906d
 8008fb0:	08009077 	.word	0x08009077
 8008fb4:	08009081 	.word	0x08009081
 8008fb8:	0800908b 	.word	0x0800908b
 8008fbc:	08009095 	.word	0x08009095
 8008fc0:	0800909f 	.word	0x0800909f
 8008fc4:	080090a9 	.word	0x080090a9
 8008fc8:	080090b3 	.word	0x080090b3
 8008fcc:	080090bd 	.word	0x080090bd
 8008fd0:	080090c7 	.word	0x080090c7
 8008fd4:	080090d1 	.word	0x080090d1
 8008fd8:	080090db 	.word	0x080090db
 8008fdc:	080090e5 	.word	0x080090e5
 8008fe0:	080090ef 	.word	0x080090ef
 8008fe4:	080090f9 	.word	0x080090f9
 8008fe8:	08009103 	.word	0x08009103
 8008fec:	0800910d 	.word	0x0800910d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008ff6:	e0f7      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008ffe:	e0f3      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009006:	e0ef      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800900e:	e0eb      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009016:	e0e7      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800901e:	e0e3      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009026:	e0df      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800902e:	e0db      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009036:	e0d7      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800903e:	e0d3      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009046:	e0cf      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800904e:	e0cb      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009056:	e0c7      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009060:	e0c2      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800906a:	e0bd      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009074:	e0b8      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800907e:	e0b3      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009088:	e0ae      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009092:	e0a9      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800909c:	e0a4      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80090a6:	e09f      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80090b0:	e09a      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80090ba:	e095      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80090c4:	e090      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80090ce:	e08b      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80090d8:	e086      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80090e2:	e081      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80090ec:	e07c      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80090f6:	e077      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009100:	e072      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800910a:	e06d      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009114:	e068      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	75fb      	strb	r3, [r7, #23]
        break;
 800911a:	e065      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009122:	b2db      	uxtb	r3, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	d15d      	bne.n	80091e4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009128:	7afb      	ldrb	r3, [r7, #11]
 800912a:	2b0d      	cmp	r3, #13
 800912c:	d857      	bhi.n	80091de <HAL_TIM_RegisterCallback+0x2a6>
 800912e:	a201      	add	r2, pc, #4	@ (adr r2, 8009134 <HAL_TIM_RegisterCallback+0x1fc>)
 8009130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009134:	0800916d 	.word	0x0800916d
 8009138:	08009175 	.word	0x08009175
 800913c:	0800917d 	.word	0x0800917d
 8009140:	08009185 	.word	0x08009185
 8009144:	0800918d 	.word	0x0800918d
 8009148:	08009195 	.word	0x08009195
 800914c:	0800919d 	.word	0x0800919d
 8009150:	080091a5 	.word	0x080091a5
 8009154:	080091ad 	.word	0x080091ad
 8009158:	080091b5 	.word	0x080091b5
 800915c:	080091bd 	.word	0x080091bd
 8009160:	080091c5 	.word	0x080091c5
 8009164:	080091cd 	.word	0x080091cd
 8009168:	080091d5 	.word	0x080091d5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009172:	e039      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800917a:	e035      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009182:	e031      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800918a:	e02d      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009192:	e029      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800919a:	e025      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80091a2:	e021      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80091aa:	e01d      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80091b2:	e019      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80091ba:	e015      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80091c2:	e011      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80091ca:	e00d      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80091d2:	e009      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80091dc:	e004      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	75fb      	strb	r3, [r7, #23]
        break;
 80091e2:	e001      	b.n	80091e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	371c      	adds	r7, #28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop

080091f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a4c      	ldr	r2, [pc, #304]	@ (800933c <TIM_Base_SetConfig+0x144>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d017      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009216:	d013      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a49      	ldr	r2, [pc, #292]	@ (8009340 <TIM_Base_SetConfig+0x148>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d00f      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a48      	ldr	r2, [pc, #288]	@ (8009344 <TIM_Base_SetConfig+0x14c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d00b      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a47      	ldr	r2, [pc, #284]	@ (8009348 <TIM_Base_SetConfig+0x150>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d007      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a46      	ldr	r2, [pc, #280]	@ (800934c <TIM_Base_SetConfig+0x154>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d003      	beq.n	8009240 <TIM_Base_SetConfig+0x48>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a45      	ldr	r2, [pc, #276]	@ (8009350 <TIM_Base_SetConfig+0x158>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d108      	bne.n	8009252 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a39      	ldr	r2, [pc, #228]	@ (800933c <TIM_Base_SetConfig+0x144>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d023      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009260:	d01f      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a36      	ldr	r2, [pc, #216]	@ (8009340 <TIM_Base_SetConfig+0x148>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d01b      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a35      	ldr	r2, [pc, #212]	@ (8009344 <TIM_Base_SetConfig+0x14c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d017      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a34      	ldr	r2, [pc, #208]	@ (8009348 <TIM_Base_SetConfig+0x150>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d013      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a33      	ldr	r2, [pc, #204]	@ (800934c <TIM_Base_SetConfig+0x154>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d00f      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a33      	ldr	r2, [pc, #204]	@ (8009354 <TIM_Base_SetConfig+0x15c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d00b      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a32      	ldr	r2, [pc, #200]	@ (8009358 <TIM_Base_SetConfig+0x160>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d007      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a31      	ldr	r2, [pc, #196]	@ (800935c <TIM_Base_SetConfig+0x164>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d003      	beq.n	80092a2 <TIM_Base_SetConfig+0xaa>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a2c      	ldr	r2, [pc, #176]	@ (8009350 <TIM_Base_SetConfig+0x158>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d108      	bne.n	80092b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a18      	ldr	r2, [pc, #96]	@ (800933c <TIM_Base_SetConfig+0x144>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d013      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a1a      	ldr	r2, [pc, #104]	@ (800934c <TIM_Base_SetConfig+0x154>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d00f      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009354 <TIM_Base_SetConfig+0x15c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d00b      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a19      	ldr	r2, [pc, #100]	@ (8009358 <TIM_Base_SetConfig+0x160>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d007      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a18      	ldr	r2, [pc, #96]	@ (800935c <TIM_Base_SetConfig+0x164>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d003      	beq.n	8009308 <TIM_Base_SetConfig+0x110>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a13      	ldr	r2, [pc, #76]	@ (8009350 <TIM_Base_SetConfig+0x158>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d103      	bne.n	8009310 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b01      	cmp	r3, #1
 8009320:	d105      	bne.n	800932e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	f023 0201 	bic.w	r2, r3, #1
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	611a      	str	r2, [r3, #16]
  }
}
 800932e:	bf00      	nop
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	40012c00 	.word	0x40012c00
 8009340:	40000400 	.word	0x40000400
 8009344:	40000800 	.word	0x40000800
 8009348:	40000c00 	.word	0x40000c00
 800934c:	40013400 	.word	0x40013400
 8009350:	40015000 	.word	0x40015000
 8009354:	40014000 	.word	0x40014000
 8009358:	40014400 	.word	0x40014400
 800935c:	40014800 	.word	0x40014800

08009360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	f023 0201 	bic.w	r2, r3, #1
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800938e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0303 	bic.w	r3, r3, #3
 800939a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f023 0302 	bic.w	r3, r3, #2
 80093ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a30      	ldr	r2, [pc, #192]	@ (800947c <TIM_OC1_SetConfig+0x11c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d013      	beq.n	80093e8 <TIM_OC1_SetConfig+0x88>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a2f      	ldr	r2, [pc, #188]	@ (8009480 <TIM_OC1_SetConfig+0x120>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00f      	beq.n	80093e8 <TIM_OC1_SetConfig+0x88>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009484 <TIM_OC1_SetConfig+0x124>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00b      	beq.n	80093e8 <TIM_OC1_SetConfig+0x88>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a2d      	ldr	r2, [pc, #180]	@ (8009488 <TIM_OC1_SetConfig+0x128>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_OC1_SetConfig+0x88>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a2c      	ldr	r2, [pc, #176]	@ (800948c <TIM_OC1_SetConfig+0x12c>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_OC1_SetConfig+0x88>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a2b      	ldr	r2, [pc, #172]	@ (8009490 <TIM_OC1_SetConfig+0x130>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d10c      	bne.n	8009402 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f023 0308 	bic.w	r3, r3, #8
 80093ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f023 0304 	bic.w	r3, r3, #4
 8009400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a1d      	ldr	r2, [pc, #116]	@ (800947c <TIM_OC1_SetConfig+0x11c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d013      	beq.n	8009432 <TIM_OC1_SetConfig+0xd2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a1c      	ldr	r2, [pc, #112]	@ (8009480 <TIM_OC1_SetConfig+0x120>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00f      	beq.n	8009432 <TIM_OC1_SetConfig+0xd2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a1b      	ldr	r2, [pc, #108]	@ (8009484 <TIM_OC1_SetConfig+0x124>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00b      	beq.n	8009432 <TIM_OC1_SetConfig+0xd2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a1a      	ldr	r2, [pc, #104]	@ (8009488 <TIM_OC1_SetConfig+0x128>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d007      	beq.n	8009432 <TIM_OC1_SetConfig+0xd2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a19      	ldr	r2, [pc, #100]	@ (800948c <TIM_OC1_SetConfig+0x12c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d003      	beq.n	8009432 <TIM_OC1_SetConfig+0xd2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a18      	ldr	r2, [pc, #96]	@ (8009490 <TIM_OC1_SetConfig+0x130>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d111      	bne.n	8009456 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	4313      	orrs	r3, r2
 8009454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	621a      	str	r2, [r3, #32]
}
 8009470:	bf00      	nop
 8009472:	371c      	adds	r7, #28
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	40012c00 	.word	0x40012c00
 8009480:	40013400 	.word	0x40013400
 8009484:	40014000 	.word	0x40014000
 8009488:	40014400 	.word	0x40014400
 800948c:	40014800 	.word	0x40014800
 8009490:	40015000 	.word	0x40015000

08009494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	f023 0210 	bic.w	r2, r3, #16
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	021b      	lsls	r3, r3, #8
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f023 0320 	bic.w	r3, r3, #32
 80094e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a2c      	ldr	r2, [pc, #176]	@ (80095a4 <TIM_OC2_SetConfig+0x110>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d007      	beq.n	8009508 <TIM_OC2_SetConfig+0x74>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a2b      	ldr	r2, [pc, #172]	@ (80095a8 <TIM_OC2_SetConfig+0x114>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d003      	beq.n	8009508 <TIM_OC2_SetConfig+0x74>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a2a      	ldr	r2, [pc, #168]	@ (80095ac <TIM_OC2_SetConfig+0x118>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d10d      	bne.n	8009524 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800950e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	011b      	lsls	r3, r3, #4
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4313      	orrs	r3, r2
 800951a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a1f      	ldr	r2, [pc, #124]	@ (80095a4 <TIM_OC2_SetConfig+0x110>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d013      	beq.n	8009554 <TIM_OC2_SetConfig+0xc0>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a1e      	ldr	r2, [pc, #120]	@ (80095a8 <TIM_OC2_SetConfig+0x114>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00f      	beq.n	8009554 <TIM_OC2_SetConfig+0xc0>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a1e      	ldr	r2, [pc, #120]	@ (80095b0 <TIM_OC2_SetConfig+0x11c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d00b      	beq.n	8009554 <TIM_OC2_SetConfig+0xc0>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a1d      	ldr	r2, [pc, #116]	@ (80095b4 <TIM_OC2_SetConfig+0x120>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d007      	beq.n	8009554 <TIM_OC2_SetConfig+0xc0>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a1c      	ldr	r2, [pc, #112]	@ (80095b8 <TIM_OC2_SetConfig+0x124>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_OC2_SetConfig+0xc0>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a17      	ldr	r2, [pc, #92]	@ (80095ac <TIM_OC2_SetConfig+0x118>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d113      	bne.n	800957c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800955a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	4313      	orrs	r3, r2
 800956e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	4313      	orrs	r3, r2
 800957a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	621a      	str	r2, [r3, #32]
}
 8009596:	bf00      	nop
 8009598:	371c      	adds	r7, #28
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	40012c00 	.word	0x40012c00
 80095a8:	40013400 	.word	0x40013400
 80095ac:	40015000 	.word	0x40015000
 80095b0:	40014000 	.word	0x40014000
 80095b4:	40014400 	.word	0x40014400
 80095b8:	40014800 	.word	0x40014800

080095bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0303 	bic.w	r3, r3, #3
 80095f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	021b      	lsls	r3, r3, #8
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	4313      	orrs	r3, r2
 8009614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a2b      	ldr	r2, [pc, #172]	@ (80096c8 <TIM_OC3_SetConfig+0x10c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d007      	beq.n	800962e <TIM_OC3_SetConfig+0x72>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a2a      	ldr	r2, [pc, #168]	@ (80096cc <TIM_OC3_SetConfig+0x110>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d003      	beq.n	800962e <TIM_OC3_SetConfig+0x72>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a29      	ldr	r2, [pc, #164]	@ (80096d0 <TIM_OC3_SetConfig+0x114>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d10d      	bne.n	800964a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	4313      	orrs	r3, r2
 8009640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a1e      	ldr	r2, [pc, #120]	@ (80096c8 <TIM_OC3_SetConfig+0x10c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d013      	beq.n	800967a <TIM_OC3_SetConfig+0xbe>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a1d      	ldr	r2, [pc, #116]	@ (80096cc <TIM_OC3_SetConfig+0x110>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d00f      	beq.n	800967a <TIM_OC3_SetConfig+0xbe>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a1d      	ldr	r2, [pc, #116]	@ (80096d4 <TIM_OC3_SetConfig+0x118>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00b      	beq.n	800967a <TIM_OC3_SetConfig+0xbe>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a1c      	ldr	r2, [pc, #112]	@ (80096d8 <TIM_OC3_SetConfig+0x11c>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d007      	beq.n	800967a <TIM_OC3_SetConfig+0xbe>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a1b      	ldr	r2, [pc, #108]	@ (80096dc <TIM_OC3_SetConfig+0x120>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d003      	beq.n	800967a <TIM_OC3_SetConfig+0xbe>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a16      	ldr	r2, [pc, #88]	@ (80096d0 <TIM_OC3_SetConfig+0x114>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d113      	bne.n	80096a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	4313      	orrs	r3, r2
 80096a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	621a      	str	r2, [r3, #32]
}
 80096bc:	bf00      	nop
 80096be:	371c      	adds	r7, #28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	40012c00 	.word	0x40012c00
 80096cc:	40013400 	.word	0x40013400
 80096d0:	40015000 	.word	0x40015000
 80096d4:	40014000 	.word	0x40014000
 80096d8:	40014400 	.word	0x40014400
 80096dc:	40014800 	.word	0x40014800

080096e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800970e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800971a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800972e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	031b      	lsls	r3, r3, #12
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	4313      	orrs	r3, r2
 800973a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a2c      	ldr	r2, [pc, #176]	@ (80097f0 <TIM_OC4_SetConfig+0x110>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d007      	beq.n	8009754 <TIM_OC4_SetConfig+0x74>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a2b      	ldr	r2, [pc, #172]	@ (80097f4 <TIM_OC4_SetConfig+0x114>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_OC4_SetConfig+0x74>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a2a      	ldr	r2, [pc, #168]	@ (80097f8 <TIM_OC4_SetConfig+0x118>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d10d      	bne.n	8009770 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800975a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	031b      	lsls	r3, r3, #12
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	4313      	orrs	r3, r2
 8009766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800976e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a1f      	ldr	r2, [pc, #124]	@ (80097f0 <TIM_OC4_SetConfig+0x110>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d013      	beq.n	80097a0 <TIM_OC4_SetConfig+0xc0>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a1e      	ldr	r2, [pc, #120]	@ (80097f4 <TIM_OC4_SetConfig+0x114>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00f      	beq.n	80097a0 <TIM_OC4_SetConfig+0xc0>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a1e      	ldr	r2, [pc, #120]	@ (80097fc <TIM_OC4_SetConfig+0x11c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d00b      	beq.n	80097a0 <TIM_OC4_SetConfig+0xc0>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a1d      	ldr	r2, [pc, #116]	@ (8009800 <TIM_OC4_SetConfig+0x120>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d007      	beq.n	80097a0 <TIM_OC4_SetConfig+0xc0>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a1c      	ldr	r2, [pc, #112]	@ (8009804 <TIM_OC4_SetConfig+0x124>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d003      	beq.n	80097a0 <TIM_OC4_SetConfig+0xc0>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a17      	ldr	r2, [pc, #92]	@ (80097f8 <TIM_OC4_SetConfig+0x118>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d113      	bne.n	80097c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	019b      	lsls	r3, r3, #6
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	019b      	lsls	r3, r3, #6
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	621a      	str	r2, [r3, #32]
}
 80097e2:	bf00      	nop
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	40012c00 	.word	0x40012c00
 80097f4:	40013400 	.word	0x40013400
 80097f8:	40015000 	.word	0x40015000
 80097fc:	40014000 	.word	0x40014000
 8009800:	40014400 	.word	0x40014400
 8009804:	40014800 	.word	0x40014800

08009808 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800982e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800983a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	4313      	orrs	r3, r2
 8009844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800984c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	041b      	lsls	r3, r3, #16
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	4313      	orrs	r3, r2
 8009858:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a19      	ldr	r2, [pc, #100]	@ (80098c4 <TIM_OC5_SetConfig+0xbc>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d013      	beq.n	800988a <TIM_OC5_SetConfig+0x82>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a18      	ldr	r2, [pc, #96]	@ (80098c8 <TIM_OC5_SetConfig+0xc0>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00f      	beq.n	800988a <TIM_OC5_SetConfig+0x82>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a17      	ldr	r2, [pc, #92]	@ (80098cc <TIM_OC5_SetConfig+0xc4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00b      	beq.n	800988a <TIM_OC5_SetConfig+0x82>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a16      	ldr	r2, [pc, #88]	@ (80098d0 <TIM_OC5_SetConfig+0xc8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d007      	beq.n	800988a <TIM_OC5_SetConfig+0x82>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a15      	ldr	r2, [pc, #84]	@ (80098d4 <TIM_OC5_SetConfig+0xcc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d003      	beq.n	800988a <TIM_OC5_SetConfig+0x82>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a14      	ldr	r2, [pc, #80]	@ (80098d8 <TIM_OC5_SetConfig+0xd0>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d109      	bne.n	800989e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009890:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	021b      	lsls	r3, r3, #8
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	4313      	orrs	r3, r2
 800989c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	621a      	str	r2, [r3, #32]
}
 80098b8:	bf00      	nop
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	40012c00 	.word	0x40012c00
 80098c8:	40013400 	.word	0x40013400
 80098cc:	40014000 	.word	0x40014000
 80098d0:	40014400 	.word	0x40014400
 80098d4:	40014800 	.word	0x40014800
 80098d8:	40015000 	.word	0x40015000

080098dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098dc:	b480      	push	{r7}
 80098de:	b087      	sub	sp, #28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800990a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800990e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	021b      	lsls	r3, r3, #8
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4313      	orrs	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	051b      	lsls	r3, r3, #20
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	4313      	orrs	r3, r2
 800992e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a1a      	ldr	r2, [pc, #104]	@ (800999c <TIM_OC6_SetConfig+0xc0>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d013      	beq.n	8009960 <TIM_OC6_SetConfig+0x84>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a19      	ldr	r2, [pc, #100]	@ (80099a0 <TIM_OC6_SetConfig+0xc4>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d00f      	beq.n	8009960 <TIM_OC6_SetConfig+0x84>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a18      	ldr	r2, [pc, #96]	@ (80099a4 <TIM_OC6_SetConfig+0xc8>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d00b      	beq.n	8009960 <TIM_OC6_SetConfig+0x84>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a17      	ldr	r2, [pc, #92]	@ (80099a8 <TIM_OC6_SetConfig+0xcc>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d007      	beq.n	8009960 <TIM_OC6_SetConfig+0x84>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a16      	ldr	r2, [pc, #88]	@ (80099ac <TIM_OC6_SetConfig+0xd0>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d003      	beq.n	8009960 <TIM_OC6_SetConfig+0x84>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a15      	ldr	r2, [pc, #84]	@ (80099b0 <TIM_OC6_SetConfig+0xd4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d109      	bne.n	8009974 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009966:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	029b      	lsls	r3, r3, #10
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	4313      	orrs	r3, r2
 8009972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	621a      	str	r2, [r3, #32]
}
 800998e:	bf00      	nop
 8009990:	371c      	adds	r7, #28
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	40012c00 	.word	0x40012c00
 80099a0:	40013400 	.word	0x40013400
 80099a4:	40014000 	.word	0x40014000
 80099a8:	40014400 	.word	0x40014400
 80099ac:	40014800 	.word	0x40014800
 80099b0:	40015000 	.word	0x40015000

080099b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b087      	sub	sp, #28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	f023 0201 	bic.w	r2, r3, #1
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	011b      	lsls	r3, r3, #4
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f023 030a 	bic.w	r3, r3, #10
 80099f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	621a      	str	r2, [r3, #32]
}
 8009a06:	bf00      	nop
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b087      	sub	sp, #28
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	60f8      	str	r0, [r7, #12]
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	f023 0210 	bic.w	r2, r3, #16
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	031b      	lsls	r3, r3, #12
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009a4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	011b      	lsls	r3, r3, #4
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	621a      	str	r2, [r3, #32]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b085      	sub	sp, #20
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	f043 0307 	orr.w	r3, r3, #7
 8009a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	609a      	str	r2, [r3, #8]
}
 8009aa0:	bf00      	nop
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	021a      	lsls	r2, r3, #8
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	431a      	orrs	r2, r3
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	609a      	str	r2, [r3, #8]
}
 8009ae0:	bf00      	nop
 8009ae2:	371c      	adds	r7, #28
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f003 031f 	and.w	r3, r3, #31
 8009afe:	2201      	movs	r2, #1
 8009b00:	fa02 f303 	lsl.w	r3, r2, r3
 8009b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6a1a      	ldr	r2, [r3, #32]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	43db      	mvns	r3, r3
 8009b0e:	401a      	ands	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a1a      	ldr	r2, [r3, #32]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f003 031f 	and.w	r3, r3, #31
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	fa01 f303 	lsl.w	r3, r1, r3
 8009b24:	431a      	orrs	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	621a      	str	r2, [r3, #32]
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
	...

08009b38 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a26      	ldr	r2, [pc, #152]	@ (8009bdc <TIM_ResetCallback+0xa4>)
 8009b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a25      	ldr	r2, [pc, #148]	@ (8009be0 <TIM_ResetCallback+0xa8>)
 8009b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a24      	ldr	r2, [pc, #144]	@ (8009be4 <TIM_ResetCallback+0xac>)
 8009b54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a23      	ldr	r2, [pc, #140]	@ (8009be8 <TIM_ResetCallback+0xb0>)
 8009b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a22      	ldr	r2, [pc, #136]	@ (8009bec <TIM_ResetCallback+0xb4>)
 8009b64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a21      	ldr	r2, [pc, #132]	@ (8009bf0 <TIM_ResetCallback+0xb8>)
 8009b6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a20      	ldr	r2, [pc, #128]	@ (8009bf4 <TIM_ResetCallback+0xbc>)
 8009b74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8009bf8 <TIM_ResetCallback+0xc0>)
 8009b7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a1e      	ldr	r2, [pc, #120]	@ (8009bfc <TIM_ResetCallback+0xc4>)
 8009b84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8009c00 <TIM_ResetCallback+0xc8>)
 8009b8c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a1c      	ldr	r2, [pc, #112]	@ (8009c04 <TIM_ResetCallback+0xcc>)
 8009b94:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8009c08 <TIM_ResetCallback+0xd0>)
 8009b9c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8009c0c <TIM_ResetCallback+0xd4>)
 8009ba4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a19      	ldr	r2, [pc, #100]	@ (8009c10 <TIM_ResetCallback+0xd8>)
 8009bac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a18      	ldr	r2, [pc, #96]	@ (8009c14 <TIM_ResetCallback+0xdc>)
 8009bb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a17      	ldr	r2, [pc, #92]	@ (8009c18 <TIM_ResetCallback+0xe0>)
 8009bbc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a16      	ldr	r2, [pc, #88]	@ (8009c1c <TIM_ResetCallback+0xe4>)
 8009bc4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a15      	ldr	r2, [pc, #84]	@ (8009c20 <TIM_ResetCallback+0xe8>)
 8009bcc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	08003ee1 	.word	0x08003ee1
 8009be0:	08008e85 	.word	0x08008e85
 8009be4:	08008efd 	.word	0x08008efd
 8009be8:	08008f11 	.word	0x08008f11
 8009bec:	08008ead 	.word	0x08008ead
 8009bf0:	08008ec1 	.word	0x08008ec1
 8009bf4:	08008e99 	.word	0x08008e99
 8009bf8:	08008ed5 	.word	0x08008ed5
 8009bfc:	08008ee9 	.word	0x08008ee9
 8009c00:	08008f25 	.word	0x08008f25
 8009c04:	08009d51 	.word	0x08009d51
 8009c08:	08009d65 	.word	0x08009d65
 8009c0c:	08009d79 	.word	0x08009d79
 8009c10:	08009d8d 	.word	0x08009d8d
 8009c14:	08009da1 	.word	0x08009da1
 8009c18:	08009db5 	.word	0x08009db5
 8009c1c:	08009dc9 	.word	0x08009dc9
 8009c20:	08009ddd 	.word	0x08009ddd

08009c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e074      	b.n	8009d26 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a34      	ldr	r2, [pc, #208]	@ (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d009      	beq.n	8009c7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a33      	ldr	r2, [pc, #204]	@ (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d004      	beq.n	8009c7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a31      	ldr	r2, [pc, #196]	@ (8009d3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d108      	bne.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a21      	ldr	r2, [pc, #132]	@ (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d022      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cbc:	d01d      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8009d40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d018      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d013      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8009d48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d00e      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a15      	ldr	r2, [pc, #84]	@ (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d009      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a18      	ldr	r2, [pc, #96]	@ (8009d4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d004      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a11      	ldr	r2, [pc, #68]	@ (8009d3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d10c      	bne.n	8009d14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	40012c00 	.word	0x40012c00
 8009d38:	40013400 	.word	0x40013400
 8009d3c:	40015000 	.word	0x40015000
 8009d40:	40000400 	.word	0x40000400
 8009d44:	40000800 	.word	0x40000800
 8009d48:	40000c00 	.word	0x40000c00
 8009d4c:	40014000 	.word	0x40014000

08009d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e050      	b.n	8009ea4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d114      	bne.n	8009e36 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fdc5 	bl	800a9a4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d103      	bne.n	8009e2c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a21      	ldr	r2, [pc, #132]	@ (8009eac <HAL_UART_Init+0xbc>)
 8009e28:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2224      	movs	r2, #36	@ 0x24
 8009e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0201 	bic.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 f8f2 	bl	800b040 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fdf3 	bl	800aa48 <UART_SetConfig>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e01b      	b.n	8009ea4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689a      	ldr	r2, [r3, #8]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f042 0201 	orr.w	r2, r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f001 f971 	bl	800b184 <UART_CheckIdleState>
 8009ea2:	4603      	mov	r3, r0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	08004351 	.word	0x08004351

08009eb0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d109      	bne.n	8009edc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ece:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e09c      	b.n	800a016 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ee2:	2b20      	cmp	r3, #32
 8009ee4:	d16c      	bne.n	8009fc0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009ee6:	7afb      	ldrb	r3, [r7, #11]
 8009ee8:	2b0c      	cmp	r3, #12
 8009eea:	d85e      	bhi.n	8009faa <HAL_UART_RegisterCallback+0xfa>
 8009eec:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef4 <HAL_UART_RegisterCallback+0x44>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f29 	.word	0x08009f29
 8009ef8:	08009f33 	.word	0x08009f33
 8009efc:	08009f3d 	.word	0x08009f3d
 8009f00:	08009f47 	.word	0x08009f47
 8009f04:	08009f51 	.word	0x08009f51
 8009f08:	08009f5b 	.word	0x08009f5b
 8009f0c:	08009f65 	.word	0x08009f65
 8009f10:	08009f6f 	.word	0x08009f6f
 8009f14:	08009f79 	.word	0x08009f79
 8009f18:	08009f83 	.word	0x08009f83
 8009f1c:	08009f8d 	.word	0x08009f8d
 8009f20:	08009f97 	.word	0x08009f97
 8009f24:	08009fa1 	.word	0x08009fa1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009f30:	e070      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009f3a:	e06b      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009f44:	e066      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009f4e:	e061      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009f58:	e05c      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009f62:	e057      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009f6c:	e052      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009f76:	e04d      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009f80:	e048      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009f8a:	e043      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009f94:	e03e      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009f9e:	e039      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009fa8:	e034      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	75fb      	strb	r3, [r7, #23]
        break;
 8009fbe:	e029      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d11a      	bne.n	800a000 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009fca:	7afb      	ldrb	r3, [r7, #11]
 8009fcc:	2b0b      	cmp	r3, #11
 8009fce:	d002      	beq.n	8009fd6 <HAL_UART_RegisterCallback+0x126>
 8009fd0:	2b0c      	cmp	r3, #12
 8009fd2:	d005      	beq.n	8009fe0 <HAL_UART_RegisterCallback+0x130>
 8009fd4:	e009      	b.n	8009fea <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009fde:	e019      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009fe8:	e014      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ff0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	75fb      	strb	r3, [r7, #23]
        break;
 8009ffe:	e009      	b.n	800a014 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a006:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a014:	7dfb      	ldrb	r3, [r7, #23]
}
 800a016:	4618      	mov	r0, r3
 800a018:	371c      	adds	r7, #28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop

0800a024 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08a      	sub	sp, #40	@ 0x28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a038:	2b20      	cmp	r3, #32
 800a03a:	d167      	bne.n	800a10c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <HAL_UART_Transmit_DMA+0x24>
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e060      	b.n	800a10e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	88fa      	ldrh	r2, [r7, #6]
 800a056:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	88fa      	ldrh	r2, [r7, #6]
 800a05e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2221      	movs	r2, #33	@ 0x21
 800a06e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a076:	2b00      	cmp	r3, #0
 800a078:	d028      	beq.n	800a0cc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a07e:	4a26      	ldr	r2, [pc, #152]	@ (800a118 <HAL_UART_Transmit_DMA+0xf4>)
 800a080:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a086:	4a25      	ldr	r2, [pc, #148]	@ (800a11c <HAL_UART_Transmit_DMA+0xf8>)
 800a088:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a08e:	4a24      	ldr	r2, [pc, #144]	@ (800a120 <HAL_UART_Transmit_DMA+0xfc>)
 800a090:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a096:	2200      	movs	r2, #0
 800a098:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3328      	adds	r3, #40	@ 0x28
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	88fb      	ldrh	r3, [r7, #6]
 800a0ae:	f7fc f9a3 	bl	80063f8 <HAL_DMA_Start_IT>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d009      	beq.n	800a0cc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2210      	movs	r2, #16
 800a0bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2220      	movs	r2, #32
 800a0c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e020      	b.n	800a10e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2240      	movs	r2, #64	@ 0x40
 800a0d2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3308      	adds	r3, #8
 800a0da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0f4:	623a      	str	r2, [r7, #32]
 800a0f6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	69f9      	ldr	r1, [r7, #28]
 800a0fa:	6a3a      	ldr	r2, [r7, #32]
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	61bb      	str	r3, [r7, #24]
   return(result);
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e5      	bne.n	800a0d4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	e000      	b.n	800a10e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a10c:	2302      	movs	r3, #2
  }
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3728      	adds	r7, #40	@ 0x28
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	0800b64f 	.word	0x0800b64f
 800a11c:	0800b6ed 	.word	0x0800b6ed
 800a120:	0800b887 	.word	0x0800b887

0800a124 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08a      	sub	sp, #40	@ 0x28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a138:	2b20      	cmp	r3, #32
 800a13a:	d137      	bne.n	800a1ac <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <HAL_UART_Receive_DMA+0x24>
 800a142:	88fb      	ldrh	r3, [r7, #6]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e030      	b.n	800a1ae <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a18      	ldr	r2, [pc, #96]	@ (800a1b8 <HAL_UART_Receive_DMA+0x94>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d01f      	beq.n	800a19c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d018      	beq.n	800a19c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	613b      	str	r3, [r7, #16]
   return(result);
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a17e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	623b      	str	r3, [r7, #32]
 800a18a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18c:	69f9      	ldr	r1, [r7, #28]
 800a18e:	6a3a      	ldr	r2, [r7, #32]
 800a190:	e841 2300 	strex	r3, r2, [r1]
 800a194:	61bb      	str	r3, [r7, #24]
   return(result);
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e6      	bne.n	800a16a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a19c:	88fb      	ldrh	r3, [r7, #6]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	68b9      	ldr	r1, [r7, #8]
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f001 f906 	bl	800b3b4 <UART_Start_Receive_DMA>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	e000      	b.n	800a1ae <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a1ac:	2302      	movs	r3, #2
  }
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3728      	adds	r7, #40	@ 0x28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	40008000 	.word	0x40008000

0800a1bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b0ba      	sub	sp, #232	@ 0xe8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a1e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a1e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a1f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d11b      	bne.n	800a230 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d015      	beq.n	800a230 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d105      	bne.n	800a21c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d009      	beq.n	800a230 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 82f3 	beq.w	800a80c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	4798      	blx	r3
      }
      return;
 800a22e:	e2ed      	b.n	800a80c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 8129 	beq.w	800a48c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a23a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a23e:	4b90      	ldr	r3, [pc, #576]	@ (800a480 <HAL_UART_IRQHandler+0x2c4>)
 800a240:	4013      	ands	r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d106      	bne.n	800a254 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a246:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a24a:	4b8e      	ldr	r3, [pc, #568]	@ (800a484 <HAL_UART_IRQHandler+0x2c8>)
 800a24c:	4013      	ands	r3, r2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 811c 	beq.w	800a48c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d011      	beq.n	800a284 <HAL_UART_IRQHandler+0xc8>
 800a260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00b      	beq.n	800a284 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2201      	movs	r2, #1
 800a272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a27a:	f043 0201 	orr.w	r2, r3, #1
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d011      	beq.n	800a2b4 <HAL_UART_IRQHandler+0xf8>
 800a290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a294:	f003 0301 	and.w	r3, r3, #1
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00b      	beq.n	800a2b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2aa:	f043 0204 	orr.w	r2, r3, #4
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d011      	beq.n	800a2e4 <HAL_UART_IRQHandler+0x128>
 800a2c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00b      	beq.n	800a2e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2da:	f043 0202 	orr.w	r2, r3, #2
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2e8:	f003 0308 	and.w	r3, r3, #8
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d017      	beq.n	800a320 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2f4:	f003 0320 	and.w	r3, r3, #32
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d105      	bne.n	800a308 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a2fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a300:	4b5f      	ldr	r3, [pc, #380]	@ (800a480 <HAL_UART_IRQHandler+0x2c4>)
 800a302:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00b      	beq.n	800a320 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2208      	movs	r2, #8
 800a30e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a316:	f043 0208 	orr.w	r2, r3, #8
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d012      	beq.n	800a352 <HAL_UART_IRQHandler+0x196>
 800a32c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a330:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00c      	beq.n	800a352 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a348:	f043 0220 	orr.w	r2, r3, #32
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 8259 	beq.w	800a810 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a362:	f003 0320 	and.w	r3, r3, #32
 800a366:	2b00      	cmp	r3, #0
 800a368:	d013      	beq.n	800a392 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a36e:	f003 0320 	and.w	r3, r3, #32
 800a372:	2b00      	cmp	r3, #0
 800a374:	d105      	bne.n	800a382 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a37a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d007      	beq.n	800a392 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a398:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a6:	2b40      	cmp	r3, #64	@ 0x40
 800a3a8:	d005      	beq.n	800a3b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a3aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a3ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d058      	beq.n	800a468 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f001 f8e3 	bl	800b582 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c6:	2b40      	cmp	r3, #64	@ 0x40
 800a3c8:	d148      	bne.n	800a45c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3d8:	e853 3f00 	ldrex	r3, [r3]
 800a3dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a3e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a3f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a3fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a40e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1d9      	bne.n	800a3ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d017      	beq.n	800a450 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a426:	4a18      	ldr	r2, [pc, #96]	@ (800a488 <HAL_UART_IRQHandler+0x2cc>)
 800a428:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a430:	4618      	mov	r0, r3
 800a432:	f7fc f8b5 	bl	80065a0 <HAL_DMA_Abort_IT>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01f      	beq.n	800a47c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a44a:	4610      	mov	r0, r2
 800a44c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a44e:	e015      	b.n	800a47c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a45a:	e00f      	b.n	800a47c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a466:	e009      	b.n	800a47c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a47a:	e1c9      	b.n	800a810 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a47c:	bf00      	nop
    return;
 800a47e:	e1c7      	b.n	800a810 <HAL_UART_IRQHandler+0x654>
 800a480:	10000001 	.word	0x10000001
 800a484:	04000120 	.word	0x04000120
 800a488:	0800b90b 	.word	0x0800b90b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a490:	2b01      	cmp	r3, #1
 800a492:	f040 8157 	bne.w	800a744 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a49a:	f003 0310 	and.w	r3, r3, #16
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 8150 	beq.w	800a744 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4a8:	f003 0310 	and.w	r3, r3, #16
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 8149 	beq.w	800a744 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2210      	movs	r2, #16
 800a4b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c4:	2b40      	cmp	r3, #64	@ 0x40
 800a4c6:	f040 80bd 	bne.w	800a644 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8199 	beq.w	800a814 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	f080 8191 	bcs.w	800a814 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f040 8087 	bne.w	800a61e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a518:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a51c:	e853 3f00 	ldrex	r3, [r3]
 800a520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a524:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a52c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	461a      	mov	r2, r3
 800a536:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a53a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a53e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a546:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a54a:	e841 2300 	strex	r3, r2, [r1]
 800a54e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1da      	bne.n	800a510 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3308      	adds	r3, #8
 800a560:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a562:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a564:	e853 3f00 	ldrex	r3, [r3]
 800a568:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a56a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a56c:	f023 0301 	bic.w	r3, r3, #1
 800a570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3308      	adds	r3, #8
 800a57a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a57e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a582:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a586:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e1      	bne.n	800a55a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5a0:	e853 3f00 	ldrex	r3, [r3]
 800a5a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a5a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a5ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a5bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a5c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a5c2:	e841 2300 	strex	r3, r2, [r1]
 800a5c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a5c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e3      	bne.n	800a596 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5e4:	e853 3f00 	ldrex	r3, [r3]
 800a5e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5ec:	f023 0310 	bic.w	r3, r3, #16
 800a5f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a600:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a602:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a604:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a606:	e841 2300 	strex	r3, r2, [r1]
 800a60a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a60c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1e4      	bne.n	800a5dc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fb ff68 	bl	80064ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2202      	movs	r2, #2
 800a622:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a636:	b292      	uxth	r2, r2
 800a638:	1a8a      	subs	r2, r1, r2
 800a63a:	b292      	uxth	r2, r2
 800a63c:	4611      	mov	r1, r2
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a642:	e0e7      	b.n	800a814 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a650:	b29b      	uxth	r3, r3
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a65e:	b29b      	uxth	r3, r3
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 80d9 	beq.w	800a818 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a666:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 80d4 	beq.w	800a818 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a67e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a692:	647b      	str	r3, [r7, #68]	@ 0x44
 800a694:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e4      	bne.n	800a670 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	623b      	str	r3, [r7, #32]
   return(result);
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6bc:	f023 0301 	bic.w	r3, r3, #1
 800a6c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a6ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800a6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e1      	bne.n	800a6a6 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	60fb      	str	r3, [r7, #12]
   return(result);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0310 	bic.w	r3, r3, #16
 800a70a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	461a      	mov	r2, r3
 800a714:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a718:	61fb      	str	r3, [r7, #28]
 800a71a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	69b9      	ldr	r1, [r7, #24]
 800a71e:	69fa      	ldr	r2, [r7, #28]
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	617b      	str	r3, [r7, #20]
   return(result);
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e4      	bne.n	800a6f6 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2202      	movs	r2, #2
 800a730:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a738:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a73c:	4611      	mov	r1, r2
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a742:	e069      	b.n	800a818 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d010      	beq.n	800a772 <HAL_UART_IRQHandler+0x5b6>
 800a750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00a      	beq.n	800a772 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a764:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a770:	e055      	b.n	800a81e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d014      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a786:	2b00      	cmp	r3, #0
 800a788:	d105      	bne.n	800a796 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a78e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d008      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d03e      	beq.n	800a81c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	4798      	blx	r3
    }
    return;
 800a7a6:	e039      	b.n	800a81c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d009      	beq.n	800a7c8 <HAL_UART_IRQHandler+0x60c>
 800a7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f001 f8ba 	bl	800b93a <UART_EndTransmit_IT>
    return;
 800a7c6:	e02a      	b.n	800a81e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00b      	beq.n	800a7ec <HAL_UART_IRQHandler+0x630>
 800a7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d005      	beq.n	800a7ec <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7ea:	e018      	b.n	800a81e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d012      	beq.n	800a81e <HAL_UART_IRQHandler+0x662>
 800a7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	da0e      	bge.n	800a81e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a80a:	e008      	b.n	800a81e <HAL_UART_IRQHandler+0x662>
      return;
 800a80c:	bf00      	nop
 800a80e:	e006      	b.n	800a81e <HAL_UART_IRQHandler+0x662>
    return;
 800a810:	bf00      	nop
 800a812:	e004      	b.n	800a81e <HAL_UART_IRQHandler+0x662>
      return;
 800a814:	bf00      	nop
 800a816:	e002      	b.n	800a81e <HAL_UART_IRQHandler+0x662>
      return;
 800a818:	bf00      	nop
 800a81a:	e000      	b.n	800a81e <HAL_UART_IRQHandler+0x662>
    return;
 800a81c:	bf00      	nop
  }
}
 800a81e:	37e8      	adds	r7, #232	@ 0xe8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a09      	ldr	r2, [pc, #36]	@ (800a910 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d009      	beq.n	800a904 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	430a      	orrs	r2, r1
 800a902:	615a      	str	r2, [r3, #20]
  }
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	40008000 	.word	0x40008000

0800a914 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a18      	ldr	r2, [pc, #96]	@ (800a984 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d027      	beq.n	800a976 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a92c:	2b20      	cmp	r3, #32
 800a92e:	d120      	bne.n	800a972 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a936:	2b01      	cmp	r3, #1
 800a938:	d101      	bne.n	800a93e <HAL_UART_EnableReceiverTimeout+0x2a>
 800a93a:	2302      	movs	r3, #2
 800a93c:	e01c      	b.n	800a978 <HAL_UART_EnableReceiverTimeout+0x64>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2224      	movs	r2, #36	@ 0x24
 800a94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a95c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2220      	movs	r2, #32
 800a962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	e002      	b.n	800a978 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a972:	2302      	movs	r3, #2
 800a974:	e000      	b.n	800a978 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
  }
}
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	40008000 	.word	0x40008000

0800a988 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
	...

0800a9a4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a1a      	ldr	r2, [pc, #104]	@ (800aa18 <UART_InitCallbacksToDefault+0x74>)
 800a9b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a19      	ldr	r2, [pc, #100]	@ (800aa1c <UART_InitCallbacksToDefault+0x78>)
 800a9b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a18      	ldr	r2, [pc, #96]	@ (800aa20 <UART_InitCallbacksToDefault+0x7c>)
 800a9c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a17      	ldr	r2, [pc, #92]	@ (800aa24 <UART_InitCallbacksToDefault+0x80>)
 800a9c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a16      	ldr	r2, [pc, #88]	@ (800aa28 <UART_InitCallbacksToDefault+0x84>)
 800a9d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a15      	ldr	r2, [pc, #84]	@ (800aa2c <UART_InitCallbacksToDefault+0x88>)
 800a9d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a14      	ldr	r2, [pc, #80]	@ (800aa30 <UART_InitCallbacksToDefault+0x8c>)
 800a9e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a13      	ldr	r2, [pc, #76]	@ (800aa34 <UART_InitCallbacksToDefault+0x90>)
 800a9e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a12      	ldr	r2, [pc, #72]	@ (800aa38 <UART_InitCallbacksToDefault+0x94>)
 800a9f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a11      	ldr	r2, [pc, #68]	@ (800aa3c <UART_InitCallbacksToDefault+0x98>)
 800a9f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a10      	ldr	r2, [pc, #64]	@ (800aa40 <UART_InitCallbacksToDefault+0x9c>)
 800aa00:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a0f      	ldr	r2, [pc, #60]	@ (800aa44 <UART_InitCallbacksToDefault+0xa0>)
 800aa08:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	0800a839 	.word	0x0800a839
 800aa1c:	0800a825 	.word	0x0800a825
 800aa20:	0800a861 	.word	0x0800a861
 800aa24:	0800a84d 	.word	0x0800a84d
 800aa28:	0800a875 	.word	0x0800a875
 800aa2c:	0800a889 	.word	0x0800a889
 800aa30:	0800a89d 	.word	0x0800a89d
 800aa34:	0800a8b1 	.word	0x0800a8b1
 800aa38:	0800b995 	.word	0x0800b995
 800aa3c:	0800b9a9 	.word	0x0800b9a9
 800aa40:	0800b9bd 	.word	0x0800b9bd
 800aa44:	0800a8c5 	.word	0x0800a8c5

0800aa48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa4c:	b08c      	sub	sp, #48	@ 0x30
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	689a      	ldr	r2, [r3, #8]
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	431a      	orrs	r2, r3
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	431a      	orrs	r2, r3
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	4baa      	ldr	r3, [pc, #680]	@ (800ad20 <UART_SetConfig+0x2d8>)
 800aa78:	4013      	ands	r3, r2
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	6812      	ldr	r2, [r2, #0]
 800aa7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa80:	430b      	orrs	r3, r1
 800aa82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a9f      	ldr	r2, [pc, #636]	@ (800ad24 <UART_SetConfig+0x2dc>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d004      	beq.n	800aab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aab0:	4313      	orrs	r3, r2
 800aab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aabe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aac8:	430b      	orrs	r3, r1
 800aaca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad2:	f023 010f 	bic.w	r1, r3, #15
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a90      	ldr	r2, [pc, #576]	@ (800ad28 <UART_SetConfig+0x2e0>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d125      	bne.n	800ab38 <UART_SetConfig+0xf0>
 800aaec:	4b8f      	ldr	r3, [pc, #572]	@ (800ad2c <UART_SetConfig+0x2e4>)
 800aaee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaf2:	f003 0303 	and.w	r3, r3, #3
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d81a      	bhi.n	800ab30 <UART_SetConfig+0xe8>
 800aafa:	a201      	add	r2, pc, #4	@ (adr r2, 800ab00 <UART_SetConfig+0xb8>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab11 	.word	0x0800ab11
 800ab04:	0800ab21 	.word	0x0800ab21
 800ab08:	0800ab19 	.word	0x0800ab19
 800ab0c:	0800ab29 	.word	0x0800ab29
 800ab10:	2301      	movs	r3, #1
 800ab12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab16:	e116      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ab18:	2302      	movs	r3, #2
 800ab1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1e:	e112      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ab20:	2304      	movs	r3, #4
 800ab22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab26:	e10e      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ab28:	2308      	movs	r3, #8
 800ab2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab2e:	e10a      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ab30:	2310      	movs	r3, #16
 800ab32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab36:	e106      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a7c      	ldr	r2, [pc, #496]	@ (800ad30 <UART_SetConfig+0x2e8>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d138      	bne.n	800abb4 <UART_SetConfig+0x16c>
 800ab42:	4b7a      	ldr	r3, [pc, #488]	@ (800ad2c <UART_SetConfig+0x2e4>)
 800ab44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab48:	f003 030c 	and.w	r3, r3, #12
 800ab4c:	2b0c      	cmp	r3, #12
 800ab4e:	d82d      	bhi.n	800abac <UART_SetConfig+0x164>
 800ab50:	a201      	add	r2, pc, #4	@ (adr r2, 800ab58 <UART_SetConfig+0x110>)
 800ab52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab56:	bf00      	nop
 800ab58:	0800ab8d 	.word	0x0800ab8d
 800ab5c:	0800abad 	.word	0x0800abad
 800ab60:	0800abad 	.word	0x0800abad
 800ab64:	0800abad 	.word	0x0800abad
 800ab68:	0800ab9d 	.word	0x0800ab9d
 800ab6c:	0800abad 	.word	0x0800abad
 800ab70:	0800abad 	.word	0x0800abad
 800ab74:	0800abad 	.word	0x0800abad
 800ab78:	0800ab95 	.word	0x0800ab95
 800ab7c:	0800abad 	.word	0x0800abad
 800ab80:	0800abad 	.word	0x0800abad
 800ab84:	0800abad 	.word	0x0800abad
 800ab88:	0800aba5 	.word	0x0800aba5
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab92:	e0d8      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ab94:	2302      	movs	r3, #2
 800ab96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab9a:	e0d4      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aba2:	e0d0      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800aba4:	2308      	movs	r3, #8
 800aba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abaa:	e0cc      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800abac:	2310      	movs	r3, #16
 800abae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abb2:	e0c8      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a5e      	ldr	r2, [pc, #376]	@ (800ad34 <UART_SetConfig+0x2ec>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d125      	bne.n	800ac0a <UART_SetConfig+0x1c2>
 800abbe:	4b5b      	ldr	r3, [pc, #364]	@ (800ad2c <UART_SetConfig+0x2e4>)
 800abc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800abc8:	2b30      	cmp	r3, #48	@ 0x30
 800abca:	d016      	beq.n	800abfa <UART_SetConfig+0x1b2>
 800abcc:	2b30      	cmp	r3, #48	@ 0x30
 800abce:	d818      	bhi.n	800ac02 <UART_SetConfig+0x1ba>
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d00a      	beq.n	800abea <UART_SetConfig+0x1a2>
 800abd4:	2b20      	cmp	r3, #32
 800abd6:	d814      	bhi.n	800ac02 <UART_SetConfig+0x1ba>
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <UART_SetConfig+0x19a>
 800abdc:	2b10      	cmp	r3, #16
 800abde:	d008      	beq.n	800abf2 <UART_SetConfig+0x1aa>
 800abe0:	e00f      	b.n	800ac02 <UART_SetConfig+0x1ba>
 800abe2:	2300      	movs	r3, #0
 800abe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abe8:	e0ad      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800abea:	2302      	movs	r3, #2
 800abec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abf0:	e0a9      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800abf2:	2304      	movs	r3, #4
 800abf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abf8:	e0a5      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800abfa:	2308      	movs	r3, #8
 800abfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac00:	e0a1      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ac02:	2310      	movs	r3, #16
 800ac04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac08:	e09d      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a4a      	ldr	r2, [pc, #296]	@ (800ad38 <UART_SetConfig+0x2f0>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d125      	bne.n	800ac60 <UART_SetConfig+0x218>
 800ac14:	4b45      	ldr	r3, [pc, #276]	@ (800ad2c <UART_SetConfig+0x2e4>)
 800ac16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac20:	d016      	beq.n	800ac50 <UART_SetConfig+0x208>
 800ac22:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac24:	d818      	bhi.n	800ac58 <UART_SetConfig+0x210>
 800ac26:	2b80      	cmp	r3, #128	@ 0x80
 800ac28:	d00a      	beq.n	800ac40 <UART_SetConfig+0x1f8>
 800ac2a:	2b80      	cmp	r3, #128	@ 0x80
 800ac2c:	d814      	bhi.n	800ac58 <UART_SetConfig+0x210>
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <UART_SetConfig+0x1f0>
 800ac32:	2b40      	cmp	r3, #64	@ 0x40
 800ac34:	d008      	beq.n	800ac48 <UART_SetConfig+0x200>
 800ac36:	e00f      	b.n	800ac58 <UART_SetConfig+0x210>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac3e:	e082      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ac40:	2302      	movs	r3, #2
 800ac42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac46:	e07e      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ac48:	2304      	movs	r3, #4
 800ac4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac4e:	e07a      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ac50:	2308      	movs	r3, #8
 800ac52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac56:	e076      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ac58:	2310      	movs	r3, #16
 800ac5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac5e:	e072      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a35      	ldr	r2, [pc, #212]	@ (800ad3c <UART_SetConfig+0x2f4>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d12a      	bne.n	800acc0 <UART_SetConfig+0x278>
 800ac6a:	4b30      	ldr	r3, [pc, #192]	@ (800ad2c <UART_SetConfig+0x2e4>)
 800ac6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac78:	d01a      	beq.n	800acb0 <UART_SetConfig+0x268>
 800ac7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac7e:	d81b      	bhi.n	800acb8 <UART_SetConfig+0x270>
 800ac80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac84:	d00c      	beq.n	800aca0 <UART_SetConfig+0x258>
 800ac86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac8a:	d815      	bhi.n	800acb8 <UART_SetConfig+0x270>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d003      	beq.n	800ac98 <UART_SetConfig+0x250>
 800ac90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac94:	d008      	beq.n	800aca8 <UART_SetConfig+0x260>
 800ac96:	e00f      	b.n	800acb8 <UART_SetConfig+0x270>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac9e:	e052      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800aca0:	2302      	movs	r3, #2
 800aca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aca6:	e04e      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800aca8:	2304      	movs	r3, #4
 800acaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acae:	e04a      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800acb0:	2308      	movs	r3, #8
 800acb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acb6:	e046      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800acb8:	2310      	movs	r3, #16
 800acba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acbe:	e042      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a17      	ldr	r2, [pc, #92]	@ (800ad24 <UART_SetConfig+0x2dc>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d13a      	bne.n	800ad40 <UART_SetConfig+0x2f8>
 800acca:	4b18      	ldr	r3, [pc, #96]	@ (800ad2c <UART_SetConfig+0x2e4>)
 800accc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800acd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acd8:	d01a      	beq.n	800ad10 <UART_SetConfig+0x2c8>
 800acda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800acde:	d81b      	bhi.n	800ad18 <UART_SetConfig+0x2d0>
 800ace0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ace4:	d00c      	beq.n	800ad00 <UART_SetConfig+0x2b8>
 800ace6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acea:	d815      	bhi.n	800ad18 <UART_SetConfig+0x2d0>
 800acec:	2b00      	cmp	r3, #0
 800acee:	d003      	beq.n	800acf8 <UART_SetConfig+0x2b0>
 800acf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acf4:	d008      	beq.n	800ad08 <UART_SetConfig+0x2c0>
 800acf6:	e00f      	b.n	800ad18 <UART_SetConfig+0x2d0>
 800acf8:	2300      	movs	r3, #0
 800acfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acfe:	e022      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ad00:	2302      	movs	r3, #2
 800ad02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad06:	e01e      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ad08:	2304      	movs	r3, #4
 800ad0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad0e:	e01a      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ad10:	2308      	movs	r3, #8
 800ad12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad16:	e016      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ad18:	2310      	movs	r3, #16
 800ad1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad1e:	e012      	b.n	800ad46 <UART_SetConfig+0x2fe>
 800ad20:	cfff69f3 	.word	0xcfff69f3
 800ad24:	40008000 	.word	0x40008000
 800ad28:	40013800 	.word	0x40013800
 800ad2c:	40021000 	.word	0x40021000
 800ad30:	40004400 	.word	0x40004400
 800ad34:	40004800 	.word	0x40004800
 800ad38:	40004c00 	.word	0x40004c00
 800ad3c:	40005000 	.word	0x40005000
 800ad40:	2310      	movs	r3, #16
 800ad42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4aae      	ldr	r2, [pc, #696]	@ (800b004 <UART_SetConfig+0x5bc>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	f040 8097 	bne.w	800ae80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad56:	2b08      	cmp	r3, #8
 800ad58:	d823      	bhi.n	800ada2 <UART_SetConfig+0x35a>
 800ad5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad60 <UART_SetConfig+0x318>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800ad85 	.word	0x0800ad85
 800ad64:	0800ada3 	.word	0x0800ada3
 800ad68:	0800ad8d 	.word	0x0800ad8d
 800ad6c:	0800ada3 	.word	0x0800ada3
 800ad70:	0800ad93 	.word	0x0800ad93
 800ad74:	0800ada3 	.word	0x0800ada3
 800ad78:	0800ada3 	.word	0x0800ada3
 800ad7c:	0800ada3 	.word	0x0800ada3
 800ad80:	0800ad9b 	.word	0x0800ad9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad84:	f7fc fd16 	bl	80077b4 <HAL_RCC_GetPCLK1Freq>
 800ad88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad8a:	e010      	b.n	800adae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad8c:	4b9e      	ldr	r3, [pc, #632]	@ (800b008 <UART_SetConfig+0x5c0>)
 800ad8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad90:	e00d      	b.n	800adae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad92:	f7fc fca1 	bl	80076d8 <HAL_RCC_GetSysClockFreq>
 800ad96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad98:	e009      	b.n	800adae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ada0:	e005      	b.n	800adae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800adae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8130 	beq.w	800b016 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adba:	4a94      	ldr	r2, [pc, #592]	@ (800b00c <UART_SetConfig+0x5c4>)
 800adbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adc0:	461a      	mov	r2, r3
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800adc8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	4613      	mov	r3, r2
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	4413      	add	r3, r2
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	429a      	cmp	r2, r3
 800add8:	d305      	bcc.n	800ade6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d903      	bls.n	800adee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800adec:	e113      	b.n	800b016 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf0:	2200      	movs	r2, #0
 800adf2:	60bb      	str	r3, [r7, #8]
 800adf4:	60fa      	str	r2, [r7, #12]
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adfa:	4a84      	ldr	r2, [pc, #528]	@ (800b00c <UART_SetConfig+0x5c4>)
 800adfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	2200      	movs	r2, #0
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae10:	f7f5 fec8 	bl	8000ba4 <__aeabi_uldivmod>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	4610      	mov	r0, r2
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	f04f 0200 	mov.w	r2, #0
 800ae20:	f04f 0300 	mov.w	r3, #0
 800ae24:	020b      	lsls	r3, r1, #8
 800ae26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae2a:	0202      	lsls	r2, r0, #8
 800ae2c:	6979      	ldr	r1, [r7, #20]
 800ae2e:	6849      	ldr	r1, [r1, #4]
 800ae30:	0849      	lsrs	r1, r1, #1
 800ae32:	2000      	movs	r0, #0
 800ae34:	460c      	mov	r4, r1
 800ae36:	4605      	mov	r5, r0
 800ae38:	eb12 0804 	adds.w	r8, r2, r4
 800ae3c:	eb43 0905 	adc.w	r9, r3, r5
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	469a      	mov	sl, r3
 800ae48:	4693      	mov	fp, r2
 800ae4a:	4652      	mov	r2, sl
 800ae4c:	465b      	mov	r3, fp
 800ae4e:	4640      	mov	r0, r8
 800ae50:	4649      	mov	r1, r9
 800ae52:	f7f5 fea7 	bl	8000ba4 <__aeabi_uldivmod>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae64:	d308      	bcc.n	800ae78 <UART_SetConfig+0x430>
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae6c:	d204      	bcs.n	800ae78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6a3a      	ldr	r2, [r7, #32]
 800ae74:	60da      	str	r2, [r3, #12]
 800ae76:	e0ce      	b.n	800b016 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae7e:	e0ca      	b.n	800b016 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae88:	d166      	bne.n	800af58 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ae8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae8e:	2b08      	cmp	r3, #8
 800ae90:	d827      	bhi.n	800aee2 <UART_SetConfig+0x49a>
 800ae92:	a201      	add	r2, pc, #4	@ (adr r2, 800ae98 <UART_SetConfig+0x450>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800aebd 	.word	0x0800aebd
 800ae9c:	0800aec5 	.word	0x0800aec5
 800aea0:	0800aecd 	.word	0x0800aecd
 800aea4:	0800aee3 	.word	0x0800aee3
 800aea8:	0800aed3 	.word	0x0800aed3
 800aeac:	0800aee3 	.word	0x0800aee3
 800aeb0:	0800aee3 	.word	0x0800aee3
 800aeb4:	0800aee3 	.word	0x0800aee3
 800aeb8:	0800aedb 	.word	0x0800aedb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aebc:	f7fc fc7a 	bl	80077b4 <HAL_RCC_GetPCLK1Freq>
 800aec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aec2:	e014      	b.n	800aeee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aec4:	f7fc fc8c 	bl	80077e0 <HAL_RCC_GetPCLK2Freq>
 800aec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aeca:	e010      	b.n	800aeee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aecc:	4b4e      	ldr	r3, [pc, #312]	@ (800b008 <UART_SetConfig+0x5c0>)
 800aece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aed0:	e00d      	b.n	800aeee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aed2:	f7fc fc01 	bl	80076d8 <HAL_RCC_GetSysClockFreq>
 800aed6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aed8:	e009      	b.n	800aeee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aee0:	e005      	b.n	800aeee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800aee2:	2300      	movs	r3, #0
 800aee4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aeec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aeee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 8090 	beq.w	800b016 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aefa:	4a44      	ldr	r2, [pc, #272]	@ (800b00c <UART_SetConfig+0x5c4>)
 800aefc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af00:	461a      	mov	r2, r3
 800af02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af04:	fbb3 f3f2 	udiv	r3, r3, r2
 800af08:	005a      	lsls	r2, r3, #1
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	085b      	lsrs	r3, r3, #1
 800af10:	441a      	add	r2, r3
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	2b0f      	cmp	r3, #15
 800af20:	d916      	bls.n	800af50 <UART_SetConfig+0x508>
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af28:	d212      	bcs.n	800af50 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	f023 030f 	bic.w	r3, r3, #15
 800af32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af34:	6a3b      	ldr	r3, [r7, #32]
 800af36:	085b      	lsrs	r3, r3, #1
 800af38:	b29b      	uxth	r3, r3
 800af3a:	f003 0307 	and.w	r3, r3, #7
 800af3e:	b29a      	uxth	r2, r3
 800af40:	8bfb      	ldrh	r3, [r7, #30]
 800af42:	4313      	orrs	r3, r2
 800af44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	8bfa      	ldrh	r2, [r7, #30]
 800af4c:	60da      	str	r2, [r3, #12]
 800af4e:	e062      	b.n	800b016 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800af56:	e05e      	b.n	800b016 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d828      	bhi.n	800afb2 <UART_SetConfig+0x56a>
 800af60:	a201      	add	r2, pc, #4	@ (adr r2, 800af68 <UART_SetConfig+0x520>)
 800af62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af66:	bf00      	nop
 800af68:	0800af8d 	.word	0x0800af8d
 800af6c:	0800af95 	.word	0x0800af95
 800af70:	0800af9d 	.word	0x0800af9d
 800af74:	0800afb3 	.word	0x0800afb3
 800af78:	0800afa3 	.word	0x0800afa3
 800af7c:	0800afb3 	.word	0x0800afb3
 800af80:	0800afb3 	.word	0x0800afb3
 800af84:	0800afb3 	.word	0x0800afb3
 800af88:	0800afab 	.word	0x0800afab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af8c:	f7fc fc12 	bl	80077b4 <HAL_RCC_GetPCLK1Freq>
 800af90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af92:	e014      	b.n	800afbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af94:	f7fc fc24 	bl	80077e0 <HAL_RCC_GetPCLK2Freq>
 800af98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af9a:	e010      	b.n	800afbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af9c:	4b1a      	ldr	r3, [pc, #104]	@ (800b008 <UART_SetConfig+0x5c0>)
 800af9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afa0:	e00d      	b.n	800afbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afa2:	f7fc fb99 	bl	80076d8 <HAL_RCC_GetSysClockFreq>
 800afa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afa8:	e009      	b.n	800afbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afb0:	e005      	b.n	800afbe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800afb2:	2300      	movs	r3, #0
 800afb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800afbc:	bf00      	nop
    }

    if (pclk != 0U)
 800afbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d028      	beq.n	800b016 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc8:	4a10      	ldr	r2, [pc, #64]	@ (800b00c <UART_SetConfig+0x5c4>)
 800afca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afce:	461a      	mov	r2, r3
 800afd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd2:	fbb3 f2f2 	udiv	r2, r3, r2
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	085b      	lsrs	r3, r3, #1
 800afdc:	441a      	add	r2, r3
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afe8:	6a3b      	ldr	r3, [r7, #32]
 800afea:	2b0f      	cmp	r3, #15
 800afec:	d910      	bls.n	800b010 <UART_SetConfig+0x5c8>
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aff4:	d20c      	bcs.n	800b010 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	b29a      	uxth	r2, r3
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60da      	str	r2, [r3, #12]
 800b000:	e009      	b.n	800b016 <UART_SetConfig+0x5ce>
 800b002:	bf00      	nop
 800b004:	40008000 	.word	0x40008000
 800b008:	00f42400 	.word	0x00f42400
 800b00c:	0800bc7c 	.word	0x0800bc7c
      }
      else
      {
        ret = HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	2201      	movs	r2, #1
 800b01a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2201      	movs	r2, #1
 800b022:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2200      	movs	r2, #0
 800b02a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2200      	movs	r2, #0
 800b030:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b032:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b036:	4618      	mov	r0, r3
 800b038:	3730      	adds	r7, #48	@ 0x30
 800b03a:	46bd      	mov	sp, r7
 800b03c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b04c:	f003 0308 	and.w	r3, r3, #8
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00a      	beq.n	800b06a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	430a      	orrs	r2, r1
 800b068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00a      	beq.n	800b0ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	430a      	orrs	r2, r1
 800b0ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b2:	f003 0304 	and.w	r3, r3, #4
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	430a      	orrs	r2, r1
 800b0ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d4:	f003 0310 	and.w	r3, r3, #16
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00a      	beq.n	800b0f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f6:	f003 0320 	and.w	r3, r3, #32
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d01a      	beq.n	800b156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b13a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b13e:	d10a      	bne.n	800b156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	430a      	orrs	r2, r1
 800b154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00a      	beq.n	800b178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	430a      	orrs	r2, r1
 800b176:	605a      	str	r2, [r3, #4]
  }
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b098      	sub	sp, #96	@ 0x60
 800b188:	af02      	add	r7, sp, #8
 800b18a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b194:	f7f9 fad2 	bl	800473c <HAL_GetTick>
 800b198:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0308 	and.w	r3, r3, #8
 800b1a4:	2b08      	cmp	r3, #8
 800b1a6:	d12f      	bne.n	800b208 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f88e 	bl	800b2d8 <UART_WaitOnFlagUntilTimeout>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d022      	beq.n	800b208 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ca:	e853 3f00 	ldrex	r3, [r3]
 800b1ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1e8:	e841 2300 	strex	r3, r2, [r1]
 800b1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e6      	bne.n	800b1c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2220      	movs	r2, #32
 800b1f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b204:	2303      	movs	r3, #3
 800b206:	e063      	b.n	800b2d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 0304 	and.w	r3, r3, #4
 800b212:	2b04      	cmp	r3, #4
 800b214:	d149      	bne.n	800b2aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b216:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b21e:	2200      	movs	r2, #0
 800b220:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f857 	bl	800b2d8 <UART_WaitOnFlagUntilTimeout>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d03c      	beq.n	800b2aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	623b      	str	r3, [r7, #32]
   return(result);
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b24e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b250:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e6      	bne.n	800b230 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	3308      	adds	r3, #8
 800b268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	e853 3f00 	ldrex	r3, [r3]
 800b270:	60fb      	str	r3, [r7, #12]
   return(result);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f023 0301 	bic.w	r3, r3, #1
 800b278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3308      	adds	r3, #8
 800b280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b282:	61fa      	str	r2, [r7, #28]
 800b284:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	69b9      	ldr	r1, [r7, #24]
 800b288:	69fa      	ldr	r2, [r7, #28]
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	617b      	str	r3, [r7, #20]
   return(result);
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e5      	bne.n	800b262 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2220      	movs	r2, #32
 800b29a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e012      	b.n	800b2d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3758      	adds	r7, #88	@ 0x58
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	603b      	str	r3, [r7, #0]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2e8:	e04f      	b.n	800b38a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f0:	d04b      	beq.n	800b38a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2f2:	f7f9 fa23 	bl	800473c <HAL_GetTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d302      	bcc.n	800b308 <UART_WaitOnFlagUntilTimeout+0x30>
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d101      	bne.n	800b30c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e04e      	b.n	800b3aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 0304 	and.w	r3, r3, #4
 800b316:	2b00      	cmp	r3, #0
 800b318:	d037      	beq.n	800b38a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2b80      	cmp	r3, #128	@ 0x80
 800b31e:	d034      	beq.n	800b38a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2b40      	cmp	r3, #64	@ 0x40
 800b324:	d031      	beq.n	800b38a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	69db      	ldr	r3, [r3, #28]
 800b32c:	f003 0308 	and.w	r3, r3, #8
 800b330:	2b08      	cmp	r3, #8
 800b332:	d110      	bne.n	800b356 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2208      	movs	r2, #8
 800b33a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 f920 	bl	800b582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2208      	movs	r2, #8
 800b346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e029      	b.n	800b3aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b364:	d111      	bne.n	800b38a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b36e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 f906 	bl	800b582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2220      	movs	r2, #32
 800b37a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e00f      	b.n	800b3aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	69da      	ldr	r2, [r3, #28]
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	4013      	ands	r3, r2
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	429a      	cmp	r2, r3
 800b398:	bf0c      	ite	eq
 800b39a:	2301      	moveq	r3, #1
 800b39c:	2300      	movne	r3, #0
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d0a0      	beq.n	800b2ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
	...

0800b3b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b096      	sub	sp, #88	@ 0x58
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	88fa      	ldrh	r2, [r7, #6]
 800b3cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2222      	movs	r2, #34	@ 0x22
 800b3dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d02d      	beq.n	800b446 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3f0:	4a40      	ldr	r2, [pc, #256]	@ (800b4f4 <UART_Start_Receive_DMA+0x140>)
 800b3f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3fa:	4a3f      	ldr	r2, [pc, #252]	@ (800b4f8 <UART_Start_Receive_DMA+0x144>)
 800b3fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b404:	4a3d      	ldr	r2, [pc, #244]	@ (800b4fc <UART_Start_Receive_DMA+0x148>)
 800b406:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b40e:	2200      	movs	r2, #0
 800b410:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	3324      	adds	r3, #36	@ 0x24
 800b41e:	4619      	mov	r1, r3
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b424:	461a      	mov	r2, r3
 800b426:	88fb      	ldrh	r3, [r7, #6]
 800b428:	f7fa ffe6 	bl	80063f8 <HAL_DMA_Start_IT>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d009      	beq.n	800b446 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2210      	movs	r2, #16
 800b436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e051      	b.n	800b4ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d018      	beq.n	800b480 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b456:	e853 3f00 	ldrex	r3, [r3]
 800b45a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b462:	657b      	str	r3, [r7, #84]	@ 0x54
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	461a      	mov	r2, r3
 800b46a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b46c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b46e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b470:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b472:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b474:	e841 2300 	strex	r3, r2, [r1]
 800b478:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b47a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1e6      	bne.n	800b44e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3308      	adds	r3, #8
 800b486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48a:	e853 3f00 	ldrex	r3, [r3]
 800b48e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b492:	f043 0301 	orr.w	r3, r3, #1
 800b496:	653b      	str	r3, [r7, #80]	@ 0x50
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3308      	adds	r3, #8
 800b49e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b4a0:	637a      	str	r2, [r7, #52]	@ 0x34
 800b4a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b4a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e5      	bne.n	800b480 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3308      	adds	r3, #8
 800b4ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	e853 3f00 	ldrex	r3, [r3]
 800b4c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3308      	adds	r3, #8
 800b4d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b4d4:	623a      	str	r2, [r7, #32]
 800b4d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d8:	69f9      	ldr	r1, [r7, #28]
 800b4da:	6a3a      	ldr	r2, [r7, #32]
 800b4dc:	e841 2300 	strex	r3, r2, [r1]
 800b4e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1e5      	bne.n	800b4b4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3758      	adds	r7, #88	@ 0x58
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	0800b70d 	.word	0x0800b70d
 800b4f8:	0800b841 	.word	0x0800b841
 800b4fc:	0800b887 	.word	0x0800b887

0800b500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b500:	b480      	push	{r7}
 800b502:	b08f      	sub	sp, #60	@ 0x3c
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	e853 3f00 	ldrex	r3, [r3]
 800b514:	61fb      	str	r3, [r7, #28]
   return(result);
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b51c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	461a      	mov	r2, r3
 800b524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b528:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b52c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b52e:	e841 2300 	strex	r3, r2, [r1]
 800b532:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1e6      	bne.n	800b508 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3308      	adds	r3, #8
 800b540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	e853 3f00 	ldrex	r3, [r3]
 800b548:	60bb      	str	r3, [r7, #8]
   return(result);
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b550:	633b      	str	r3, [r7, #48]	@ 0x30
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3308      	adds	r3, #8
 800b558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b55a:	61ba      	str	r2, [r7, #24]
 800b55c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55e:	6979      	ldr	r1, [r7, #20]
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	e841 2300 	strex	r3, r2, [r1]
 800b566:	613b      	str	r3, [r7, #16]
   return(result);
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1e5      	bne.n	800b53a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2220      	movs	r2, #32
 800b572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b576:	bf00      	nop
 800b578:	373c      	adds	r7, #60	@ 0x3c
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b582:	b480      	push	{r7}
 800b584:	b095      	sub	sp, #84	@ 0x54
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b592:	e853 3f00 	ldrex	r3, [r3]
 800b596:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b59e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b5ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5b0:	e841 2300 	strex	r3, r2, [r1]
 800b5b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e6      	bne.n	800b58a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	e853 3f00 	ldrex	r3, [r3]
 800b5ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5d2:	f023 0301 	bic.w	r3, r3, #1
 800b5d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	3308      	adds	r3, #8
 800b5de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5e8:	e841 2300 	strex	r3, r2, [r1]
 800b5ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1e3      	bne.n	800b5bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d118      	bne.n	800b62e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	e853 3f00 	ldrex	r3, [r3]
 800b608:	60bb      	str	r3, [r7, #8]
   return(result);
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	f023 0310 	bic.w	r3, r3, #16
 800b610:	647b      	str	r3, [r7, #68]	@ 0x44
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b61a:	61bb      	str	r3, [r7, #24]
 800b61c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61e:	6979      	ldr	r1, [r7, #20]
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	e841 2300 	strex	r3, r2, [r1]
 800b626:	613b      	str	r3, [r7, #16]
   return(result);
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1e6      	bne.n	800b5fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2220      	movs	r2, #32
 800b632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b642:	bf00      	nop
 800b644:	3754      	adds	r7, #84	@ 0x54
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b090      	sub	sp, #64	@ 0x40
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b65a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 0320 	and.w	r3, r3, #32
 800b666:	2b00      	cmp	r3, #0
 800b668:	d137      	bne.n	800b6da <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b66c:	2200      	movs	r2, #0
 800b66e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3308      	adds	r3, #8
 800b678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	e853 3f00 	ldrex	r3, [r3]
 800b680:	623b      	str	r3, [r7, #32]
   return(result);
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b688:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3308      	adds	r3, #8
 800b690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b692:	633a      	str	r2, [r7, #48]	@ 0x30
 800b694:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b696:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b69a:	e841 2300 	strex	r3, r2, [r1]
 800b69e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1e5      	bne.n	800b672 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	e853 3f00 	ldrex	r3, [r3]
 800b6b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c4:	61fb      	str	r3, [r7, #28]
 800b6c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c8:	69b9      	ldr	r1, [r7, #24]
 800b6ca:	69fa      	ldr	r2, [r7, #28]
 800b6cc:	e841 2300 	strex	r3, r2, [r1]
 800b6d0:	617b      	str	r3, [r7, #20]
   return(result);
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1e6      	bne.n	800b6a6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6d8:	e004      	b.n	800b6e4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b6da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b6e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b6e2:	4798      	blx	r3
}
 800b6e4:	bf00      	nop
 800b6e6:	3740      	adds	r7, #64	@ 0x40
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b704:	bf00      	nop
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b09c      	sub	sp, #112	@ 0x70
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b718:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 0320 	and.w	r3, r3, #32
 800b724:	2b00      	cmp	r3, #0
 800b726:	d171      	bne.n	800b80c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b738:	e853 3f00 	ldrex	r3, [r3]
 800b73c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b73e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b744:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b74e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b756:	e841 2300 	strex	r3, r2, [r1]
 800b75a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b75c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1e6      	bne.n	800b730 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3308      	adds	r3, #8
 800b768:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76c:	e853 3f00 	ldrex	r3, [r3]
 800b770:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b774:	f023 0301 	bic.w	r3, r3, #1
 800b778:	667b      	str	r3, [r7, #100]	@ 0x64
 800b77a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3308      	adds	r3, #8
 800b780:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b782:	647a      	str	r2, [r7, #68]	@ 0x44
 800b784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b788:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b78a:	e841 2300 	strex	r3, r2, [r1]
 800b78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e5      	bne.n	800b762 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3308      	adds	r3, #8
 800b79c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	e853 3f00 	ldrex	r3, [r3]
 800b7a4:	623b      	str	r3, [r7, #32]
   return(result);
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b7b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7be:	e841 2300 	strex	r3, r2, [r1]
 800b7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1e5      	bne.n	800b796 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7cc:	2220      	movs	r2, #32
 800b7ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d118      	bne.n	800b80c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	e853 3f00 	ldrex	r3, [r3]
 800b7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f023 0310 	bic.w	r3, r3, #16
 800b7ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	69b9      	ldr	r1, [r7, #24]
 800b7fe:	69fa      	ldr	r2, [r7, #28]
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	617b      	str	r3, [r7, #20]
   return(result);
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e6      	bne.n	800b7da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b80c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b80e:	2200      	movs	r2, #0
 800b810:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b816:	2b01      	cmp	r3, #1
 800b818:	d109      	bne.n	800b82e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b81a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b81c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b820:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b822:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b826:	4611      	mov	r1, r2
 800b828:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b82a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b82c:	e004      	b.n	800b838 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b82e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b830:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b834:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b836:	4798      	blx	r3
}
 800b838:	bf00      	nop
 800b83a:	3770      	adds	r7, #112	@ 0x70
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2201      	movs	r2, #1
 800b852:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d10b      	bne.n	800b874 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b868:	0852      	lsrs	r2, r2, #1
 800b86a:	b292      	uxth	r2, r2
 800b86c:	4611      	mov	r1, r2
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b872:	e004      	b.n	800b87e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	4798      	blx	r3
}
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b086      	sub	sp, #24
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b892:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b89a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ae:	2b80      	cmp	r3, #128	@ 0x80
 800b8b0:	d109      	bne.n	800b8c6 <UART_DMAError+0x40>
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2b21      	cmp	r3, #33	@ 0x21
 800b8b6:	d106      	bne.n	800b8c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b8c0:	6978      	ldr	r0, [r7, #20]
 800b8c2:	f7ff fe1d 	bl	800b500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d0:	2b40      	cmp	r3, #64	@ 0x40
 800b8d2:	d109      	bne.n	800b8e8 <UART_DMAError+0x62>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2b22      	cmp	r3, #34	@ 0x22
 800b8d8:	d106      	bne.n	800b8e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b8e2:	6978      	ldr	r0, [r7, #20]
 800b8e4:	f7ff fe4d 	bl	800b582 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ee:	f043 0210 	orr.w	r2, r3, #16
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b8fe:	6978      	ldr	r0, [r7, #20]
 800b900:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b902:	bf00      	nop
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b084      	sub	sp, #16
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b916:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b932:	bf00      	nop
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b088      	sub	sp, #32
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	e853 3f00 	ldrex	r3, [r3]
 800b94e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b956:	61fb      	str	r3, [r7, #28]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	461a      	mov	r2, r3
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b964:	6979      	ldr	r1, [r7, #20]
 800b966:	69ba      	ldr	r2, [r7, #24]
 800b968:	e841 2300 	strex	r3, r2, [r1]
 800b96c:	613b      	str	r3, [r7, #16]
   return(result);
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e6      	bne.n	800b942 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2220      	movs	r2, #32
 800b978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b98c:	bf00      	nop
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b9b0:	bf00      	nop
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d101      	bne.n	800b9e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	e027      	b.n	800ba36 <HAL_UARTEx_DisableFifoMode+0x66>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2224      	movs	r2, #36	@ 0x24
 800b9f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f022 0201 	bic.w	r2, r2, #1
 800ba0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ba14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2220      	movs	r2, #32
 800ba28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d101      	bne.n	800ba5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba56:	2302      	movs	r3, #2
 800ba58:	e02d      	b.n	800bab6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2224      	movs	r2, #36	@ 0x24
 800ba66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f022 0201 	bic.w	r2, r2, #1
 800ba80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f850 	bl	800bb3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2220      	movs	r2, #32
 800baa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d101      	bne.n	800bad6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bad2:	2302      	movs	r3, #2
 800bad4:	e02d      	b.n	800bb32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2201      	movs	r2, #1
 800bada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2224      	movs	r2, #36	@ 0x24
 800bae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f022 0201 	bic.w	r2, r2, #1
 800bafc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f812 	bl	800bb3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2220      	movs	r2, #32
 800bb24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
	...

0800bb3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d108      	bne.n	800bb5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb5c:	e031      	b.n	800bbc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb5e:	2308      	movs	r3, #8
 800bb60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb62:	2308      	movs	r3, #8
 800bb64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	0e5b      	lsrs	r3, r3, #25
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	f003 0307 	and.w	r3, r3, #7
 800bb74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	0f5b      	lsrs	r3, r3, #29
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	f003 0307 	and.w	r3, r3, #7
 800bb84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
 800bb88:	7b3a      	ldrb	r2, [r7, #12]
 800bb8a:	4911      	ldr	r1, [pc, #68]	@ (800bbd0 <UARTEx_SetNbDataToProcess+0x94>)
 800bb8c:	5c8a      	ldrb	r2, [r1, r2]
 800bb8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb92:	7b3a      	ldrb	r2, [r7, #12]
 800bb94:	490f      	ldr	r1, [pc, #60]	@ (800bbd4 <UARTEx_SetNbDataToProcess+0x98>)
 800bb96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb98:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
 800bba6:	7b7a      	ldrb	r2, [r7, #13]
 800bba8:	4909      	ldr	r1, [pc, #36]	@ (800bbd0 <UARTEx_SetNbDataToProcess+0x94>)
 800bbaa:	5c8a      	ldrb	r2, [r1, r2]
 800bbac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bbb0:	7b7a      	ldrb	r2, [r7, #13]
 800bbb2:	4908      	ldr	r1, [pc, #32]	@ (800bbd4 <UARTEx_SetNbDataToProcess+0x98>)
 800bbb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bbc2:	bf00      	nop
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	0800bc94 	.word	0x0800bc94
 800bbd4:	0800bc9c 	.word	0x0800bc9c

0800bbd8 <memset>:
 800bbd8:	4402      	add	r2, r0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d100      	bne.n	800bbe2 <memset+0xa>
 800bbe0:	4770      	bx	lr
 800bbe2:	f803 1b01 	strb.w	r1, [r3], #1
 800bbe6:	e7f9      	b.n	800bbdc <memset+0x4>

0800bbe8 <__libc_init_array>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	4d0d      	ldr	r5, [pc, #52]	@ (800bc20 <__libc_init_array+0x38>)
 800bbec:	4c0d      	ldr	r4, [pc, #52]	@ (800bc24 <__libc_init_array+0x3c>)
 800bbee:	1b64      	subs	r4, r4, r5
 800bbf0:	10a4      	asrs	r4, r4, #2
 800bbf2:	2600      	movs	r6, #0
 800bbf4:	42a6      	cmp	r6, r4
 800bbf6:	d109      	bne.n	800bc0c <__libc_init_array+0x24>
 800bbf8:	4d0b      	ldr	r5, [pc, #44]	@ (800bc28 <__libc_init_array+0x40>)
 800bbfa:	4c0c      	ldr	r4, [pc, #48]	@ (800bc2c <__libc_init_array+0x44>)
 800bbfc:	f000 f826 	bl	800bc4c <_init>
 800bc00:	1b64      	subs	r4, r4, r5
 800bc02:	10a4      	asrs	r4, r4, #2
 800bc04:	2600      	movs	r6, #0
 800bc06:	42a6      	cmp	r6, r4
 800bc08:	d105      	bne.n	800bc16 <__libc_init_array+0x2e>
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc10:	4798      	blx	r3
 800bc12:	3601      	adds	r6, #1
 800bc14:	e7ee      	b.n	800bbf4 <__libc_init_array+0xc>
 800bc16:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc1a:	4798      	blx	r3
 800bc1c:	3601      	adds	r6, #1
 800bc1e:	e7f2      	b.n	800bc06 <__libc_init_array+0x1e>
 800bc20:	0800bcac 	.word	0x0800bcac
 800bc24:	0800bcac 	.word	0x0800bcac
 800bc28:	0800bcac 	.word	0x0800bcac
 800bc2c:	0800bcb0 	.word	0x0800bcb0

0800bc30 <memcpy>:
 800bc30:	440a      	add	r2, r1
 800bc32:	4291      	cmp	r1, r2
 800bc34:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc38:	d100      	bne.n	800bc3c <memcpy+0xc>
 800bc3a:	4770      	bx	lr
 800bc3c:	b510      	push	{r4, lr}
 800bc3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc46:	4291      	cmp	r1, r2
 800bc48:	d1f9      	bne.n	800bc3e <memcpy+0xe>
 800bc4a:	bd10      	pop	{r4, pc}

0800bc4c <_init>:
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4e:	bf00      	nop
 800bc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc52:	bc08      	pop	{r3}
 800bc54:	469e      	mov	lr, r3
 800bc56:	4770      	bx	lr

0800bc58 <_fini>:
 800bc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5a:	bf00      	nop
 800bc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc5e:	bc08      	pop	{r3}
 800bc60:	469e      	mov	lr, r3
 800bc62:	4770      	bx	lr
