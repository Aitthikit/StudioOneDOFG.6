
testnew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca48  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800cc20  0800cc20  0000dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc84  0800cc84  0000e26c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc84  0800cc84  0000dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc8c  0800cc8c  0000e26c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc8c  0800cc8c  0000dc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc90  0800cc90  0000dc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800cc94  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001248  20000270  0800cf00  0000e270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200014b8  0800cf00  0000e4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e26c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb1c  00000000  00000000  0000e29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c9  00000000  00000000  00029db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  0002ce88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122a  00000000  00000000  0002e568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028935  00000000  00000000  0002f792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aeb6  00000000  00000000  000580c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011395d  00000000  00000000  00072f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001868da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006584  00000000  00000000  00186920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018cea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000270 	.word	0x20000270
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cc08 	.word	0x0800cc08

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000274 	.word	0x20000274
 8000214:	0800cc08 	.word	0x0800cc08

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <modbus_1t5_Timeout+0x3c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2000028c 	.word	0x2000028c

08000ed4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <modbus_3t5_Timeout+0x1c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	755a      	strb	r2, [r3, #21]

}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	2000028c 	.word	0x2000028c

08000ef4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f00a fd21 	bl	800b944 <HAL_UART_GetError>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d101      	bne.n	8000f0c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f08:	f7ff ffc4 	bl	8000e94 <modbus_1t5_Timeout>

	}
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f1e:	4a25      	ldr	r2, [pc, #148]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f24:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <Modbus_init+0xa4>)
 8000f32:	210e      	movs	r1, #14
 8000f34:	4618      	mov	r0, r3
 8000f36:	f008 ffdd 	bl	8009ef4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00a fca9 	bl	800b898 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f00a fcc0 	bl	800b8d0 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <Modbus_init+0xa8>)
 8000f56:	2104      	movs	r1, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f009 ff87 	bl	800ae6c <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f70:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f74:	4413      	add	r3, r2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f00a f8af 	bl	800b0e0 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10c      	bne.n	8000fac <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <Modbus_init+0xa0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 ff7d 	bl	8008e98 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <Modbus_init+0xa0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f008 f9d6 	bl	8009358 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000028c 	.word	0x2000028c
 8000fb8:	08000ed5 	.word	0x08000ed5
 8000fbc:	08000ef5 	.word	0x08000ef5

08000fc0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000fcc:	23ff      	movs	r3, #255	@ 0xff
 8000fce:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000fd0:	23ff      	movs	r3, #255	@ 0xff
 8000fd2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000fd4:	e013      	b.n	8000ffe <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	4053      	eors	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <CRC16+0x64>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <CRC16+0x68>)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000ffe:	883b      	ldrh	r3, [r7, #0]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	803a      	strh	r2, [r7, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1e6      	bne.n	8000fd6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29b      	uxth	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000100 	.word	0x20000100
 8001028:	20000000 	.word	0x20000000

0800102c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001032:	4b7e      	ldr	r3, [pc, #504]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	7ddb      	ldrb	r3, [r3, #23]
 8001038:	3b01      	subs	r3, #1
 800103a:	2b03      	cmp	r3, #3
 800103c:	d80a      	bhi.n	8001054 <Modbus_Protocal_Worker+0x28>
 800103e:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <Modbus_Protocal_Worker+0x18>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	0800105f 	.word	0x0800105f
 8001048:	080011f3 	.word	0x080011f3
 800104c:	080010eb 	.word	0x080010eb
 8001050:	0800112f 	.word	0x0800112f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001054:	4b75      	ldr	r3, [pc, #468]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	75da      	strb	r2, [r3, #23]
		break;
 800105c:	e0e1      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800105e:	4b73      	ldr	r3, [pc, #460]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800106a:	4b70      	ldr	r3, [pc, #448]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2202      	movs	r2, #2
 8001070:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001072:	f000 f9cd 	bl	8001410 <Modbus_Emission>
 8001076:	e018      	b.n	80010aa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001078:	4b6c      	ldr	r3, [pc, #432]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001082:	4b6a      	ldr	r3, [pc, #424]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800108c:	b29b      	uxth	r3, r3
 800108e:	429a      	cmp	r2, r3
 8001090:	d00b      	beq.n	80010aa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001092:	4b66      	ldr	r3, [pc, #408]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800109a:	4b64      	ldr	r3, [pc, #400]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010a2:	4b62      	ldr	r3, [pc, #392]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2203      	movs	r2, #3
 80010a8:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010aa:	4b60      	ldr	r3, [pc, #384]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b4:	2b20      	cmp	r3, #32
 80010b6:	f040 80ad 	bne.w	8001214 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010ba:	4b5c      	ldr	r3, [pc, #368]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b57      	ldr	r3, [pc, #348]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010d6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010da:	4413      	add	r3, r2
 80010dc:	3302      	adds	r3, #2
 80010de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010e2:	4619      	mov	r1, r3
 80010e4:	f009 fffc 	bl	800b0e0 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80010e8:	e094      	b.n	8001214 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010ea:	4b50      	ldr	r3, [pc, #320]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	7d1b      	ldrb	r3, [r3, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8091 	beq.w	8001218 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80010f6:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	22fe      	movs	r2, #254	@ 0xfe
 80010fc:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80010fe:	4b4b      	ldr	r3, [pc, #300]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001108:	4b48      	ldr	r3, [pc, #288]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001118:	4b44      	ldr	r3, [pc, #272]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800111a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800111c:	1a8a      	subs	r2, r1, r2
 800111e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001120:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001124:	4b41      	ldr	r3, [pc, #260]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800112c:	e074      	b.n	8001218 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800112e:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001136:	f113 0f02 	cmn.w	r3, #2
 800113a:	d150      	bne.n	80011de <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800113c:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001144:	4b39      	ldr	r3, [pc, #228]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800114c:	4b37      	ldr	r3, [pc, #220]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001154:	3b02      	subs	r3, #2
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff ff31 	bl	8000fc0 <CRC16>
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001162:	793a      	ldrb	r2, [r7, #4]
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	4b30      	ldr	r3, [pc, #192]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001170:	3b02      	subs	r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001178:	429a      	cmp	r2, r3
 800117a:	d10c      	bne.n	8001196 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800117c:	797a      	ldrb	r2, [r7, #5]
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800118a:	3b01      	subs	r3, #1
 800118c:	440b      	add	r3, r1
 800118e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001192:	429a      	cmp	r2, r3
 8001194:	d004      	beq.n	80011a0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	22ff      	movs	r2, #255	@ 0xff
 800119c:	759a      	strb	r2, [r3, #22]
				break;
 800119e:	e040      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d113      	bne.n	80011da <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80011c2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011cc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80011ce:	461a      	mov	r2, r3
 80011d0:	f00b fd0c 	bl	800cbec <memcpy>

			//execute command
			Modbus_frame_response();
 80011d4:	f000 f904 	bl	80013e0 <Modbus_frame_response>
 80011d8:	e001      	b.n	80011de <Modbus_Protocal_Worker+0x1b2>
				break;
 80011da:	bf00      	nop
					}
		break;


	}
}
 80011dc:	e021      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	7d5b      	ldrb	r3, [r3, #21]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d019      	beq.n	800121c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	75da      	strb	r2, [r3, #23]
		break;
 80011f0:	e014      	b.n	800121c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fc:	2b20      	cmp	r3, #32
 80011fe:	d10f      	bne.n	8001220 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <Modbus_Protocal_Worker+0x200>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	75da      	strb	r2, [r3, #23]
		break;
 8001212:	e005      	b.n	8001220 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001214:	bf00      	nop
 8001216:	e004      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001218:	bf00      	nop
 800121a:	e002      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 800121c:	bf00      	nop
 800121e:	e000      	b.n	8001222 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001220:	bf00      	nop
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000028c 	.word	0x2000028c

08001230 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	7e5b      	ldrb	r3, [r3, #25]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	4a1a      	ldr	r2, [pc, #104]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	7e92      	ldrb	r2, [r2, #26]
 8001246:	4413      	add	r3, r2
 8001248:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800124a:	88fa      	ldrh	r2, [r7, #6]
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <modbusWrite1Register+0x7c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	429a      	cmp	r2, r3
 8001254:	d903      	bls.n	800125e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001256:	2002      	movs	r0, #2
 8001258:	f000 f8a0 	bl	800139c <ModbusErrorReply>
			 return;
 800125c:	e023      	b.n	80012a6 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	440b      	add	r3, r1
 800126e:	7ed2      	ldrb	r2, [r2, #27]
 8001270:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	7f12      	ldrb	r2, [r2, #28]
 8001284:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <modbusWrite1Register+0x7c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001294:	2208      	movs	r2, #8
 8001296:	4619      	mov	r1, r3
 8001298:	f00b fca8 	bl	800cbec <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <modbusWrite1Register+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000028c 	.word	0x2000028c

080012b0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <modbusRead1Register+0xe8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	7edb      	ldrb	r3, [r3, #27]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4a35      	ldr	r2, [pc, #212]	@ (8001398 <modbusRead1Register+0xe8>)
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	7f12      	ldrb	r2, [r2, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80012ca:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <modbusRead1Register+0xe8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	7e5b      	ldrb	r3, [r3, #25]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4a30      	ldr	r2, [pc, #192]	@ (8001398 <modbusRead1Register+0xe8>)
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	7e92      	ldrb	r2, [r2, #26]
 80012da:	4413      	add	r3, r2
 80012dc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <modbusRead1Register+0x3a>
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	2b7d      	cmp	r3, #125	@ 0x7d
 80012e8:	d903      	bls.n	80012f2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 f856 	bl	800139c <ModbusErrorReply>
		 return;
 80012f0:	e04e      	b.n	8001390 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <modbusRead1Register+0xe8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d808      	bhi.n	8001310 <modbusRead1Register+0x60>
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4413      	add	r3, r2
 8001304:	461a      	mov	r2, r3
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <modbusRead1Register+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	429a      	cmp	r2, r3
 800130e:	d903      	bls.n	8001318 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001310:	2002      	movs	r0, #2
 8001312:	f000 f843 	bl	800139c <ModbusErrorReply>
		 return;
 8001316:	e03b      	b.n	8001390 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <modbusRead1Register+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2203      	movs	r2, #3
 800131e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <modbusRead1Register+0xe8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0052      	lsls	r2, r2, #1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001332:	2400      	movs	r4, #0
 8001334:	e020      	b.n	8001378 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <modbusRead1Register+0xe8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	4423      	add	r3, r4
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	18d1      	adds	r1, r2, r3
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <modbusRead1Register+0xe8>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	1c63      	adds	r3, r4, #1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	7849      	ldrb	r1, [r1, #1]
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <modbusRead1Register+0xe8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	4423      	add	r3, r4
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <modbusRead1Register+0xe8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	0063      	lsls	r3, r4, #1
 800136a:	3303      	adds	r3, #3
 800136c:	7809      	ldrb	r1, [r1, #0]
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001376:	3401      	adds	r4, #1
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	429c      	cmp	r4, r3
 800137c:	dbdb      	blt.n	8001336 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	3301      	adds	r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <modbusRead1Register+0xe8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0052      	lsls	r2, r2, #1
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	2000028c 	.word	0x2000028c

0800139c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <ModbusErrorReply+0x40>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	7e1a      	ldrb	r2, [r3, #24]
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <ModbusErrorReply+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <ModbusErrorReply+0x40>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <ModbusErrorReply+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2202      	movs	r2, #2
 80013ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000028c 	.word	0x2000028c

080013e0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <Modbus_frame_response+0x2c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	7e1b      	ldrb	r3, [r3, #24]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d004      	beq.n	80013f8 <Modbus_frame_response+0x18>
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d105      	bne.n	80013fe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80013f2:	f7ff ff1d 	bl	8001230 <modbusWrite1Register>
		break;
 80013f6:	e006      	b.n	8001406 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80013f8:	f7ff ff5a 	bl	80012b0 <modbusRead1Register>
		break;
 80013fc:	e003      	b.n	8001406 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff ffcc 	bl	800139c <ModbusErrorReply>
		break;
 8001404:	bf00      	nop

	}
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000028c 	.word	0x2000028c

08001410 <Modbus_Emission>:

void Modbus_Emission()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001420:	2b20      	cmp	r3, #32
 8001422:	d15d      	bne.n	80014e0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <Modbus_Emission+0xe8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800143a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <Modbus_Emission+0xe8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800144c:	461a      	mov	r2, r3
 800144e:	f00b fbcd 	bl	800cbec <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800145a:	461a      	mov	r2, r3
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <Modbus_Emission+0xe8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3203      	adds	r2, #3
 8001462:	b292      	uxth	r2, r2
 8001464:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <Modbus_Emission+0xe8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001478:	3b02      	subs	r3, #2
 800147a:	4619      	mov	r1, r3
 800147c:	4610      	mov	r0, r2
 800147e:	f7ff fd9f 	bl	8000fc0 <CRC16>
 8001482:	4603      	mov	r3, r0
 8001484:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <Modbus_Emission+0xe8>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <Modbus_Emission+0xe8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001492:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001494:	7939      	ldrb	r1, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014aa:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014ac:	7979      	ldrb	r1, [r7, #5]
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d10d      	bne.n	80014e0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014d6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014da:	461a      	mov	r2, r3
 80014dc:	f009 fd80 	bl	800afe0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <Modbus_Emission+0xe8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	755a      	strb	r2, [r3, #21]

}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000028c 	.word	0x2000028c

080014fc <mat_mult>:
float x_est[3] = {0, 0, 0};
float P_est[3][3] = {0};

float y;
// Matrix operations
void mat_mult(float a[3][3], float b[3][3], float result[3][3]) {
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	e05a      	b.n	80015c4 <mat_mult+0xc8>
        for (int j = 0; j < 3; j++) {
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	e051      	b.n	80015b8 <mat_mult+0xbc>
            result[i][j] = 0;
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	441a      	add	r2, r3
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e03a      	b.n	80015ac <mat_mult+0xb0>
                result[i][j] += a[i][k] * b[k][j];
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	461a      	mov	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	441a      	add	r2, r3
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	ed93 7a00 	vldr	s14, [r3]
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	441a      	add	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	edd3 6a00 	vldr	s13, [r3]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	461a      	mov	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	441a      	add	r2, r3
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	461a      	mov	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	441a      	add	r2, r3
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	ddc1      	ble.n	8001536 <mat_mult+0x3a>
        for (int j = 0; j < 3; j++) {
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	ddaa      	ble.n	8001514 <mat_mult+0x18>
    for (int i = 0; i < 3; i++) {
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	dda1      	ble.n	800150e <mat_mult+0x12>
            }
        }
    }
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3724      	adds	r7, #36	@ 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <mat_add>:

void mat_add(float a[3][3], float b[3][3], float result[3][3]) {
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e034      	b.n	8001654 <mat_add+0x7c>
        for (int j = 0; j < 3; j++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	e02b      	b.n	8001648 <mat_add+0x70>
            result[i][j] = a[i][j] + b[i][j];
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	441a      	add	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	461a      	mov	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	441a      	add	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	441a      	add	r2, r3
 8001634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	3301      	adds	r3, #1
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	2b02      	cmp	r3, #2
 800164c:	ddd0      	ble.n	80015f0 <mat_add+0x18>
    for (int i = 0; i < 3; i++) {
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b02      	cmp	r3, #2
 8001658:	ddc7      	ble.n	80015ea <mat_add+0x12>
        }
    }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <mat_sub>:

void mat_sub(float a[3][3], float b[3][3], float result[3][3]) {
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e034      	b.n	80016e4 <mat_sub+0x7c>
        for (int j = 0; j < 3; j++) {
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	e02b      	b.n	80016d8 <mat_sub+0x70>
            result[i][j] = a[i][j] - b[i][j];
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	441a      	add	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	441a      	add	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	461a      	mov	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	441a      	add	r2, r3
 80016c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	3301      	adds	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	ddd0      	ble.n	8001680 <mat_sub+0x18>
    for (int i = 0; i < 3; i++) {
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	ddc7      	ble.n	800167a <mat_sub+0x12>
        }
    }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <mat_transpose>:

void mat_transpose(float a[1][3], float result[3][1]) {
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	e00c      	b.n	8001722 <mat_transpose+0x2a>
        result[i][0] = a[0][i];
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	4413      	add	r3, r2
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	440a      	add	r2, r1
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3301      	adds	r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b02      	cmp	r3, #2
 8001726:	ddef      	ble.n	8001708 <mat_transpose+0x10>
    }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <mat_transpose_3x3>:
            result[i][j] = a[i][j] * scalar;
        }
    }
}

void mat_transpose_3x3(float a[3][3], float result[3][3]) {
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 3; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	e023      	b.n	800178e <mat_transpose_3x3+0x58>
		for (int j = 0; j < 3; j++) {
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	e01a      	b.n	8001782 <mat_transpose_3x3+0x4c>
			result[j][i] = a[i][j];
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	461a      	mov	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	1898      	adds	r0, r3, r2
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	461a      	mov	r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	1899      	adds	r1, r3, r2
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4403      	add	r3, r0
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++) {
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3301      	adds	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b02      	cmp	r3, #2
 8001786:	dde1      	ble.n	800174c <mat_transpose_3x3+0x16>
	for (int i = 0; i < 3; i++) {
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b02      	cmp	r3, #2
 8001792:	ddd8      	ble.n	8001746 <mat_transpose_3x3+0x10>
		}
	}
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <mat_transpose_3x1>:
void mat_transpose_3x1(float a[3][1], float result[1][3]) {
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e00c      	b.n	80017cc <mat_transpose_3x1+0x2a>
        result[0][i] = a[i][0];
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3301      	adds	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	ddef      	ble.n	80017b2 <mat_transpose_3x1+0x10>
    }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <mat_mult_1x3_3x3>:

void mat_mult_1x3_3x3(float a[1][3], float b[3][3], float result[1][3]) {
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e035      	b.n	800185e <mat_mult_1x3_3x3+0x7e>
        result[0][i] = 0;
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	e025      	b.n	8001852 <mat_mult_1x3_3x3+0x72>
            result[0][i] += a[0][j] * b[j][i];
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	ed93 7a00 	vldr	s14, [r3]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	edd3 6a00 	vldr	s13, [r3]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	461a      	mov	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	441a      	add	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	3301      	adds	r3, #1
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b02      	cmp	r3, #2
 8001856:	ddd6      	ble.n	8001806 <mat_mult_1x3_3x3+0x26>
    for (int i = 0; i < 3; i++) {
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b02      	cmp	r3, #2
 8001862:	ddc6      	ble.n	80017f2 <mat_mult_1x3_3x3+0x12>
        }
    }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <mat_mult_3x1_1x3>:
void mat_mult_3x1_1x3(float a[3][1], float b[1][3], float result[3][3]) {
 8001872:	b480      	push	{r7}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e026      	b.n	80018d2 <mat_mult_3x1_1x3+0x60>
        for (int j = 0; j < 3; j++) {
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e01d      	b.n	80018c6 <mat_mult_3x1_1x3+0x54>
            result[i][j] = a[i][0] * b[0][j]; // Perform the multiplication for each element
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	ed93 7a00 	vldr	s14, [r3]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	461a      	mov	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	441a      	add	r2, r3
 80018b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	3301      	adds	r3, #1
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	ddde      	ble.n	800188a <mat_mult_3x1_1x3+0x18>
    for (int i = 0; i < 3; i++) {
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	ddd5      	ble.n	8001884 <mat_mult_3x1_1x3+0x12>
        }
    }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <mat_mult_1x3_3x1>:
void mat_mult_1x3_3x1(float a[1][3], float b[3][1], float *result) {
 80018e6:	b480      	push	{r7}
 80018e8:	b087      	sub	sp, #28
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
    *result = 0; // Initialize the result as 0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e018      	b.n	8001932 <mat_mult_1x3_3x1+0x4c>
        *result += a[0][i] * b[i][0]; // Perform the multiplication and accumulate
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	ed93 7a00 	vldr	s14, [r3]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	edd3 6a00 	vldr	s13, [r3]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	4413      	add	r3, r2
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2b02      	cmp	r3, #2
 8001936:	dde3      	ble.n	8001900 <mat_mult_1x3_3x1+0x1a>
    }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <mat_mult_3x3_3x1>:

void mat_mult_3x3_3x1(float a[3][3], float b[3][1], float result[3][1]) {
 8001946:	b480      	push	{r7}
 8001948:	b087      	sub	sp, #28
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e035      	b.n	80019c4 <mat_mult_3x3_3x1+0x7e>
        result[i][0] = 0; // Initialize each element of the result
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e025      	b.n	80019b8 <mat_mult_3x3_3x1+0x72>
            result[i][0] += a[i][j] * b[j][0]; // Perform multiplication and accumulate
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	ed93 7a00 	vldr	s14, [r3]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	441a      	add	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	edd3 6a00 	vldr	s13, [r3]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	4413      	add	r3, r2
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	3301      	adds	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	ddd6      	ble.n	800196c <mat_mult_3x3_3x1+0x26>
    for (int i = 0; i < 3; i++) {
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	ddc6      	ble.n	8001958 <mat_mult_3x3_3x1+0x12>
        }
    }
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <mat_mult_3x3_1x3>:
void mat_mult_3x3_1x3(float a[3][3], float b[1][3], float result[3][3]) {
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e02d      	b.n	8001a46 <mat_mult_3x3_1x3+0x6e>
        for (int j = 0; j < 3; j++) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	e024      	b.n	8001a3a <mat_mult_3x3_1x3+0x62>
            result[i][j] = a[i][j] * b[0][j]; // Perform the multiplication for each element
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	441a      	add	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	ed93 7a00 	vldr	s14, [r3]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	441a      	add	r2, r3
 8001a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	3301      	adds	r3, #1
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	ddd7      	ble.n	80019f0 <mat_mult_3x3_1x3+0x18>
    for (int i = 0; i < 3; i++) {
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	ddce      	ble.n	80019ea <mat_mult_3x3_1x3+0x12>
        }
    }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <kalman_predict>:
void kalman_predict(float x_est[3], float P_est[3][3], float A[3][3], float G[3][1], float Q) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0b8      	sub	sp, #224	@ 0xe0
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6178      	str	r0, [r7, #20]
 8001a64:	6139      	str	r1, [r7, #16]
 8001a66:	60fa      	str	r2, [r7, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	ed87 0a01 	vstr	s0, [r7, #4]
    // x_pred = A * x_est
    float x_pred[3] = {0};
 8001a6e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 3; i++) {
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a80:	e039      	b.n	8001af6 <kalman_predict+0x9a>
        for (int j = 0; j < 3; j++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001a88:	e02c      	b.n	8001ae4 <kalman_predict+0x88>
            x_pred[i] += Ak[i][j] * x_est[j];
 8001a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	33e0      	adds	r3, #224	@ 0xe0
 8001a92:	443b      	add	r3, r7
 8001a94:	3b1c      	subs	r3, #28
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	494f      	ldr	r1, [pc, #316]	@ (8001bd8 <kalman_predict+0x17c>)
 8001a9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	edd3 6a00 	vldr	s13, [r3]
 8001ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4413      	add	r3, r2
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	33e0      	adds	r3, #224	@ 0xe0
 8001ad2:	443b      	add	r3, r7
 8001ad4:	3b1c      	subs	r3, #28
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8001ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	ddce      	ble.n	8001a8a <kalman_predict+0x2e>
    for (int i = 0; i < 3; i++) {
 8001aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001af0:	3301      	adds	r3, #1
 8001af2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	ddc1      	ble.n	8001a82 <kalman_predict+0x26>
        }
    }

    // P_pred = A * P_est * A' + G * Q * G'
    float A_T[3][3];
    mat_transpose_3x3(Ak, A_T);
 8001afe:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001b02:	4619      	mov	r1, r3
 8001b04:	4834      	ldr	r0, [pc, #208]	@ (8001bd8 <kalman_predict+0x17c>)
 8001b06:	f7ff fe16 	bl	8001736 <mat_transpose_3x3>

    float temp1[3][3];
    mat_mult(Ak, P_est, temp1);
 8001b0a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001b0e:	461a      	mov	r2, r3
 8001b10:	6939      	ldr	r1, [r7, #16]
 8001b12:	4831      	ldr	r0, [pc, #196]	@ (8001bd8 <kalman_predict+0x17c>)
 8001b14:	f7ff fcf2 	bl	80014fc <mat_mult>

    float temp2[3][3];
    mat_mult(temp1, A_T, temp2);
 8001b18:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001b1c:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8001b20:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fce9 	bl	80014fc <mat_mult>

    float G_Q[3][1];
    for (int i = 0; i < 3; i++) {
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b30:	e017      	b.n	8001b62 <kalman_predict+0x106>
		G_Q[i][0] = G[i][0] * Q;
 8001b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	33e0      	adds	r3, #224	@ 0xe0
 8001b50:	443b      	add	r3, r7
 8001b52:	3b94      	subs	r3, #148	@ 0x94
 8001b54:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	dde3      	ble.n	8001b32 <kalman_predict+0xd6>
	}
//    mat_scalar_mult(G, Q, G_Q);

    float G_T[1][3];
    mat_transpose_3x1(G, G_T);
 8001b6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b6e:	4619      	mov	r1, r3
 8001b70:	68b8      	ldr	r0, [r7, #8]
 8001b72:	f7ff fe16 	bl	80017a2 <mat_transpose_3x1>

    float G_Q_G_T[3][3];
    mat_mult_3x1_1x3(G_Q, G_T, G_Q_G_T);
 8001b76:	f107 021c 	add.w	r2, r7, #28
 8001b7a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001b7e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fe75 	bl	8001872 <mat_mult_3x1_1x3>

    mat_add(temp2, G_Q_G_T, P_est);
 8001b88:	f107 011c 	add.w	r1, r7, #28
 8001b8c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fd20 	bl	80015d8 <mat_add>

    // Update the state estimate
    for (int i = 0; i < 3; i++) {
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001b9e:	e011      	b.n	8001bc4 <kalman_predict+0x168>
        x_est[i] = x_pred[i];
 8001ba0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	32e0      	adds	r2, #224	@ 0xe0
 8001bb2:	443a      	add	r2, r7
 8001bb4:	3a1c      	subs	r2, #28
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001bba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001bc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	dde9      	ble.n	8001ba0 <kalman_predict+0x144>
    }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	37e0      	adds	r7, #224	@ 0xe0
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000200 	.word	0x20000200

08001bdc <kalman_update>:

void kalman_update(float x_est[3], float P_est[3][3], float C[1][3], float R, float z) {
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b0be      	sub	sp, #248	@ 0xf8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6178      	str	r0, [r7, #20]
 8001be4:	6139      	str	r1, [r7, #16]
 8001be6:	60fa      	str	r2, [r7, #12]
 8001be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bec:	edc7 0a01 	vstr	s1, [r7, #4]
    // y = z - C * x_pred
    float C_x[1] = {0};
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    for (int i = 0; i < 3; i++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001bfe:	e01a      	b.n	8001c36 <kalman_update+0x5a>
        C_x[0] += Ck[0][i] * x_est[i];
 8001c00:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8001c04:	4a79      	ldr	r2, [pc, #484]	@ (8001dec <kalman_update+0x210>)
 8001c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	edd3 6a00 	vldr	s13, [r3]
 8001c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c28:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
    for (int i = 0; i < 3; i++) {
 8001c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c30:	3301      	adds	r3, #1
 8001c32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	dde0      	ble.n	8001c00 <kalman_update+0x24>
    }

    y = z - C_x[0];
 8001c3e:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001c42:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4a:	4b69      	ldr	r3, [pc, #420]	@ (8001df0 <kalman_update+0x214>)
 8001c4c:	edc3 7a00 	vstr	s15, [r3]

    // S = C * P_pred * C' + R
    float C_T[3][1];
    mat_transpose(Ck, C_T);
 8001c50:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001c54:	4619      	mov	r1, r3
 8001c56:	4865      	ldr	r0, [pc, #404]	@ (8001dec <kalman_update+0x210>)
 8001c58:	f7ff fd4e 	bl	80016f8 <mat_transpose>

    float temp1[1][3];
    mat_mult_1x3_3x3(Ck, P_est, temp1);
 8001c5c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001c60:	461a      	mov	r2, r3
 8001c62:	6939      	ldr	r1, [r7, #16]
 8001c64:	4861      	ldr	r0, [pc, #388]	@ (8001dec <kalman_update+0x210>)
 8001c66:	f7ff fdbb 	bl	80017e0 <mat_mult_1x3_3x3>

    float temp2;
    mat_mult_1x3_3x1(temp1, C_T, &temp2);
 8001c6a:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8001c6e:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8001c72:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fe35 	bl	80018e6 <mat_mult_1x3_3x1>

    float S = temp2 + R;
 8001c7c:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001c80:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

    // K = P_pred * C' / S
    float temp3[3][1];
    mat_mult_3x3_3x1(P_est, C_T, temp3);
 8001c8c:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8001c90:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001c94:	4619      	mov	r1, r3
 8001c96:	6938      	ldr	r0, [r7, #16]
 8001c98:	f7ff fe55 	bl	8001946 <mat_mult_3x3_3x1>

    float K[3][1];
    for (int i = 0; i < 3; i++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001ca2:	e018      	b.n	8001cd6 <kalman_update+0xfa>
        K[i][0] = temp3[i][0] / S;
 8001ca4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	33f8      	adds	r3, #248	@ 0xf8
 8001cac:	443b      	add	r3, r7
 8001cae:	3b44      	subs	r3, #68	@ 0x44
 8001cb0:	edd3 6a00 	vldr	s13, [r3]
 8001cb4:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8001cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	33f8      	adds	r3, #248	@ 0xf8
 8001cc4:	443b      	add	r3, r7
 8001cc6:	3b50      	subs	r3, #80	@ 0x50
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001ccc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001cd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	dde2      	ble.n	8001ca4 <kalman_update+0xc8>
    }

    // x_est = x_pred + K * y
    for (int i = 0; i < 3; i++) {
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001ce4:	e021      	b.n	8001d2a <kalman_update+0x14e>
        x_est[i] += K[i][0] * y;
 8001ce6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4413      	add	r3, r2
 8001cf0:	ed93 7a00 	vldr	s14, [r3]
 8001cf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	33f8      	adds	r3, #248	@ 0xf8
 8001cfc:	443b      	add	r3, r7
 8001cfe:	3b50      	subs	r3, #80	@ 0x50
 8001d00:	edd3 6a00 	vldr	s13, [r3]
 8001d04:	4b3a      	ldr	r3, [pc, #232]	@ (8001df0 <kalman_update+0x214>)
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	4413      	add	r3, r2
 8001d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001d20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001d24:	3301      	adds	r3, #1
 8001d26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	ddd9      	ble.n	8001ce6 <kalman_update+0x10a>
    }

    // P_est = (I - K * C) * P_pred
    float K_C[3][3];
    mat_mult_3x3_1x3(K, Ck, K_C);
 8001d32:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8001d36:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001d3a:	492c      	ldr	r1, [pc, #176]	@ (8001dec <kalman_update+0x210>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fe4b 	bl	80019d8 <mat_mult_3x3_1x3>

    float I[3][3] = { {1, 0, 0}, {0, 1, 0}, {0, 0, 1} };
 8001d42:	4b2c      	ldr	r3, [pc, #176]	@ (8001df4 <kalman_update+0x218>)
 8001d44:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001d48:	461d      	mov	r5, r3
 8001d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d52:	682b      	ldr	r3, [r5, #0]
 8001d54:	6023      	str	r3, [r4, #0]

    float I_minus_K_C[3][3];
    mat_sub(I, K_C, I_minus_K_C);
 8001d56:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001d5a:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8001d5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc80 	bl	8001668 <mat_sub>

    float new_P[3][3];
    mat_mult(I_minus_K_C, P_est, new_P);
 8001d68:	f107 0218 	add.w	r2, r7, #24
 8001d6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d70:	6939      	ldr	r1, [r7, #16]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fbc2 	bl	80014fc <mat_mult>

    for (int i = 0; i < 3; i++) {
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d7e:	e02c      	b.n	8001dda <kalman_update+0x1fe>
        for (int j = 0; j < 3; j++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d86:	e01f      	b.n	8001dc8 <kalman_update+0x1ec>
            P_est[i][j] = new_P[i][j];
 8001d88:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	461a      	mov	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1899      	adds	r1, r3, r2
 8001d9a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	33f8      	adds	r3, #248	@ 0xf8
 8001dae:	443b      	add	r3, r7
 8001db0:	3be0      	subs	r3, #224	@ 0xe0
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8001dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	dddb      	ble.n	8001d88 <kalman_update+0x1ac>
    for (int i = 0; i < 3; i++) {
 8001dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001dda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	ddce      	ble.n	8001d80 <kalman_update+0x1a4>
        }
    }
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	37f8      	adds	r7, #248	@ 0xf8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bdb0      	pop	{r4, r5, r7, pc}
 8001dec:	20000224 	.word	0x20000224
 8001df0:	200002b4 	.word	0x200002b4
 8001df4:	0800cc20 	.word	0x0800cc20

08001df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e00:	f003 fc37 	bl	8005672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e04:	f000 fc54 	bl	80026b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e08:	f001 f826 	bl	8002e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e0c:	f000 ffea 	bl	8002de4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001e10:	f000 fd22 	bl	8002858 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e14:	f000 fd74 	bl	8002900 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e18:	f000 fdc0 	bl	800299c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e1c:	f000 fe14 	bl	8002a48 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001e20:	f000 ff0e 	bl	8002c40 <MX_TIM8_Init>
  MX_TIM5_Init();
 8001e24:	f000 fe88 	bl	8002b38 <MX_TIM5_Init>
  MX_ADC3_Init();
 8001e28:	f000 fc8e 	bl	8002748 <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8001e2c:	f000 ff8c 	bl	8002d48 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001e30:	f000 ff5a 	bl	8002ce8 <MX_TIM16_Init>
  MX_TIM6_Init();
 8001e34:	f000 fece 	bl	8002bd4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8001e38:	4894      	ldr	r0, [pc, #592]	@ (800208c <main+0x294>)
 8001e3a:	f006 ffbd 	bl	8008db8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4892      	ldr	r0, [pc, #584]	@ (800208c <main+0x294>)
 8001e42:	f007 f90f 	bl	8009064 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001e46:	213c      	movs	r1, #60	@ 0x3c
 8001e48:	4891      	ldr	r0, [pc, #580]	@ (8002090 <main+0x298>)
 8001e4a:	f007 fbc7 	bl	80095dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001e4e:	4891      	ldr	r0, [pc, #580]	@ (8002094 <main+0x29c>)
 8001e50:	f007 f822 	bl	8008e98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001e54:	4890      	ldr	r0, [pc, #576]	@ (8002098 <main+0x2a0>)
 8001e56:	f007 f81f 	bl	8008e98 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001e5a:	217f      	movs	r1, #127	@ 0x7f
 8001e5c:	488f      	ldr	r0, [pc, #572]	@ (800209c <main+0x2a4>)
 8001e5e:	f004 ff87 	bl	8006d70 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joyAnalogRead, 40);
 8001e62:	2228      	movs	r2, #40	@ 0x28
 8001e64:	498e      	ldr	r1, [pc, #568]	@ (80020a0 <main+0x2a8>)
 8001e66:	488d      	ldr	r0, [pc, #564]	@ (800209c <main+0x2a4>)
 8001e68:	f004 f874 	bl	8005f54 <HAL_ADC_Start_DMA>
  _micros = 0;
 8001e6c:	498d      	ldr	r1, [pc, #564]	@ (80020a4 <main+0x2ac>)
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9c1 2300 	strd	r2, r3, [r1]

	Velocontrol.kp = 0.106;//157;//225;//180
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80020a8 <main+0x2b0>)
 8001e7c:	4a8b      	ldr	r2, [pc, #556]	@ (80020ac <main+0x2b4>)
 8001e7e:	619a      	str	r2, [r3, #24]
	Velocontrol.ki = 0.0000001;//74;//2;//25
 8001e80:	4b89      	ldr	r3, [pc, #548]	@ (80020a8 <main+0x2b0>)
 8001e82:	4a8b      	ldr	r2, [pc, #556]	@ (80020b0 <main+0x2b8>)
 8001e84:	61da      	str	r2, [r3, #28]
	Velocontrol.kd = 0;
 8001e86:	4b88      	ldr	r3, [pc, #544]	@ (80020a8 <main+0x2b0>)
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	621a      	str	r2, [r3, #32]
	Velocontrol.T = 0.0001;
 8001e8e:	4b86      	ldr	r3, [pc, #536]	@ (80020a8 <main+0x2b0>)
 8001e90:	4a88      	ldr	r2, [pc, #544]	@ (80020b4 <main+0x2bc>)
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol.kp = 25.5;//22.8;//77;//50;//0.123;//2.1;//1;//0.5667;//2.015,0.6
 8001e94:	4b88      	ldr	r3, [pc, #544]	@ (80020b8 <main+0x2c0>)
 8001e96:	4a89      	ldr	r2, [pc, #548]	@ (80020bc <main+0x2c4>)
 8001e98:	619a      	str	r2, [r3, #24]
	Poscontrol.ki = 17.8;//0.06;//1;//0.46;//0.4;//1.29;//4.5425,1.34
 8001e9a:	4b87      	ldr	r3, [pc, #540]	@ (80020b8 <main+0x2c0>)
 8001e9c:	4a88      	ldr	r2, [pc, #544]	@ (80020c0 <main+0x2c8>)
 8001e9e:	61da      	str	r2, [r3, #28]
	Poscontrol.kd = 0;//0.00005;//0.0000007;//0.000001;//0.0000021,0.0000004
 8001ea0:	4b85      	ldr	r3, [pc, #532]	@ (80020b8 <main+0x2c0>)
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
	Poscontrol.T = 0.0001;
 8001ea8:	4b83      	ldr	r3, [pc, #524]	@ (80020b8 <main+0x2c0>)
 8001eaa:	4a82      	ldr	r2, [pc, #520]	@ (80020b4 <main+0x2bc>)
 8001eac:	625a      	str	r2, [r3, #36]	@ 0x24

	Velocontrol2.kp = 50;//225;//180
 8001eae:	4b85      	ldr	r3, [pc, #532]	@ (80020c4 <main+0x2cc>)
 8001eb0:	4a85      	ldr	r2, [pc, #532]	@ (80020c8 <main+0x2d0>)
 8001eb2:	619a      	str	r2, [r3, #24]
	Velocontrol2.ki = 1;//2;//25
 8001eb4:	4b83      	ldr	r3, [pc, #524]	@ (80020c4 <main+0x2cc>)
 8001eb6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001eba:	61da      	str	r2, [r3, #28]
	Velocontrol2.kd = 0;
 8001ebc:	4b81      	ldr	r3, [pc, #516]	@ (80020c4 <main+0x2cc>)
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
	Velocontrol2.T = 0.0001;
 8001ec4:	4b7f      	ldr	r3, [pc, #508]	@ (80020c4 <main+0x2cc>)
 8001ec6:	4a7b      	ldr	r2, [pc, #492]	@ (80020b4 <main+0x2bc>)
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol2.kp = 10;//0.5667;//2.015,0.6
 8001eca:	4b80      	ldr	r3, [pc, #512]	@ (80020cc <main+0x2d4>)
 8001ecc:	4a80      	ldr	r2, [pc, #512]	@ (80020d0 <main+0x2d8>)
 8001ece:	619a      	str	r2, [r3, #24]
	Poscontrol2.ki = 1;//1.29;//4.5425,1.34
 8001ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80020cc <main+0x2d4>)
 8001ed2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ed6:	61da      	str	r2, [r3, #28]
	Poscontrol2.kd = 0.0000007;//0.000001;//0.0000021,0.0000004
 8001ed8:	4b7c      	ldr	r3, [pc, #496]	@ (80020cc <main+0x2d4>)
 8001eda:	4a7e      	ldr	r2, [pc, #504]	@ (80020d4 <main+0x2dc>)
 8001edc:	621a      	str	r2, [r3, #32]
	Poscontrol2.T = 0.0001;
 8001ede:	4b7b      	ldr	r3, [pc, #492]	@ (80020cc <main+0x2d4>)
 8001ee0:	4a74      	ldr	r2, [pc, #464]	@ (80020b4 <main+0x2bc>)
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24

	hmodbus.huart = &huart2;
 8001ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80020d8 <main+0x2e0>)
 8001ee6:	4a7d      	ldr	r2, [pc, #500]	@ (80020dc <main+0x2e4>)
 8001ee8:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8001eea:	4b7b      	ldr	r3, [pc, #492]	@ (80020d8 <main+0x2e0>)
 8001eec:	4a7c      	ldr	r2, [pc, #496]	@ (80020e0 <main+0x2e8>)
 8001eee:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001ef0:	4b79      	ldr	r3, [pc, #484]	@ (80020d8 <main+0x2e0>)
 8001ef2:	2215      	movs	r2, #21
 8001ef4:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize =200;
 8001ef6:	4b78      	ldr	r3, [pc, #480]	@ (80020d8 <main+0x2e0>)
 8001ef8:	22c8      	movs	r2, #200	@ 0xc8
 8001efa:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001efc:	4979      	ldr	r1, [pc, #484]	@ (80020e4 <main+0x2ec>)
 8001efe:	4876      	ldr	r0, [pc, #472]	@ (80020d8 <main+0x2e0>)
 8001f00:	f7ff f808 	bl	8000f14 <Modbus_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ModBus
	  Modbus_Protocal_Worker();
 8001f04:	f7ff f892 	bl	800102c <Modbus_Protocal_Worker>
	  State_To_Mode();
 8001f08:	f002 faee 	bl	80044e8 <State_To_Mode>
	  emergency();
 8001f0c:	f002 ff74 	bl	8004df8 <emergency>
//	  HAL_Delay(1000);
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);//PULL/PUSH
//	  HAL_Delay(1000);
	  //ModBus
	  static uint64_t Heartbeattime =0;
	  if(Heartbeattime < HAL_GetTick())
 8001f10:	f003 fc14 	bl	800573c <HAL_GetTick>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2200      	movs	r2, #0
 8001f18:	461c      	mov	r4, r3
 8001f1a:	4615      	mov	r5, r2
 8001f1c:	4b72      	ldr	r3, [pc, #456]	@ (80020e8 <main+0x2f0>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	42a2      	cmp	r2, r4
 8001f24:	41ab      	sbcs	r3, r5
 8001f26:	d211      	bcs.n	8001f4c <main+0x154>
	  {
	  Heartbeat();
 8001f28:	f002 fb8c 	bl	8004644 <Heartbeat>
	  UpdatePosRoutine();
 8001f2c:	f002 fbae 	bl	800468c <UpdatePosRoutine>
	  Routine();
 8001f30:	f002 fb96 	bl	8004660 <Routine>
	  Heartbeattime = HAL_GetTick()+100;
 8001f34:	f003 fc02 	bl	800573c <HAL_GetTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	3364      	adds	r3, #100	@ 0x64
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	60fa      	str	r2, [r7, #12]
 8001f42:	4b69      	ldr	r3, [pc, #420]	@ (80020e8 <main+0x2f0>)
 8001f44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f48:	e9c3 1200 	strd	r1, r2, [r3]
	  }

	  //Timer SET
	  int64_t currentTime = micros();
 8001f4c:	f002 fffe 	bl	8004f4c <micros>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  static uint64_t timestamp =0;
	  static uint64_t timestamp5 =0;
	  //Timer SET

		//ReadSensor
		if(currentTime > timestamp)
 8001f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f5c:	4963      	ldr	r1, [pc, #396]	@ (80020ec <main+0x2f4>)
 8001f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f62:	4290      	cmp	r0, r2
 8001f64:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f68:	d20e      	bcs.n	8001f88 <main+0x190>
			{
			QEIEncoderPos_Update();
 8001f6a:	f001 fc55 	bl	8003818 <QEIEncoderPos_Update>
			QEIEncoderVel_Update();
 8001f6e:	f001 fcbf 	bl	80038f0 <QEIEncoderVel_Update>
			timestamp =currentTime + 50;//us
 8001f72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f76:	f112 0832 	adds.w	r8, r2, #50	@ 0x32
 8001f7a:	f143 0900 	adc.w	r9, r3, #0
 8001f7e:	4642      	mov	r2, r8
 8001f80:	464b      	mov	r3, r9
 8001f82:	495a      	ldr	r1, [pc, #360]	@ (80020ec <main+0x2f4>)
 8001f84:	e9c1 2300 	strd	r2, r3, [r1]
			}
		SensorRead();
 8001f88:	f002 fece 	bl	8004d28 <SensorRead>
		//ReadSensor

	  switch (state_ALL)
 8001f8c:	4b58      	ldr	r3, [pc, #352]	@ (80020f0 <main+0x2f8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b07      	cmp	r3, #7
 8001f92:	d8b7      	bhi.n	8001f04 <main+0x10c>
 8001f94:	a201      	add	r2, pc, #4	@ (adr r2, 8001f9c <main+0x1a4>)
 8001f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9a:	bf00      	nop
 8001f9c:	08001fbd 	.word	0x08001fbd
 8001fa0:	08001fc3 	.word	0x08001fc3
 8001fa4:	08001ff1 	.word	0x08001ff1
 8001fa8:	08002029 	.word	0x08002029
 8001fac:	080022a1 	.word	0x080022a1
 8001fb0:	080022c1 	.word	0x080022c1
 8001fb4:	08002433 	.word	0x08002433
 8001fb8:	080025e5 	.word	0x080025e5
	  			{
	  			case 0://HOME
	  				SetHome();
 8001fbc:	f002 fc5c 	bl	8004878 <SetHome>
	  				break;
 8001fc0:	e374      	b.n	80026ac <main+0x8b4>
	  			case 1://Standby
	  				if(start == 1)//MODBUS HERE
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80020f4 <main+0x2fc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <main+0x1d8>
	  				{
	  					state_ALL = 2;
 8001fca:	4b49      	ldr	r3, [pc, #292]	@ (80020f0 <main+0x2f8>)
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
	  				}
	  				if(ButtonTest[1] == 0)//MODBUS HERE
 8001fd0:	4b49      	ldr	r3, [pc, #292]	@ (80020f8 <main+0x300>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <main+0x1e6>
					{
						state_ALL = 4;
 8001fd8:	4b45      	ldr	r3, [pc, #276]	@ (80020f0 <main+0x2f8>)
 8001fda:	2204      	movs	r2, #4
 8001fdc:	601a      	str	r2, [r3, #0]
					}
	  				if(start == 1)//HOME Button
 8001fde:	4b45      	ldr	r3, [pc, #276]	@ (80020f4 <main+0x2fc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	f040 8334 	bne.w	8002650 <main+0x858>
					{
						state_ALL = 2;
 8001fe8:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <main+0x2f8>)
 8001fea:	2202      	movs	r2, #2
 8001fec:	601a      	str	r2, [r3, #0]
					}
	  				break;
 8001fee:	e32f      	b.n	8002650 <main+0x858>
	  			case 2://JOY SET
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4841      	ldr	r0, [pc, #260]	@ (80020fc <main+0x304>)
 8001ff6:	f005 fe01 	bl	8007bfc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	483f      	ldr	r0, [pc, #252]	@ (80020fc <main+0x304>)
 8002000:	f005 fdfc 	bl	8007bfc <HAL_GPIO_WritePin>
	  				Joy_State();
 8002004:	f001 f866 	bl	80030d4 <Joy_State>
	  				Vacuum();
 8002008:	f002 fbbc 	bl	8004784 <Vacuum>
	  				GripperMovement();
 800200c:	f002 fbd8 	bl	80047c0 <GripperMovement>
	  				if(ButtonTest[0] == 0)//HOME Button
 8002010:	4b39      	ldr	r3, [pc, #228]	@ (80020f8 <main+0x300>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f040 831d 	bne.w	8002654 <main+0x85c>
					{
//	  					Pos_Target = 0;
						state_ALL = 0;
 800201a:	4b35      	ldr	r3, [pc, #212]	@ (80020f0 <main+0x2f8>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
						Mode = 0;
 8002020:	4b37      	ldr	r3, [pc, #220]	@ (8002100 <main+0x308>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
//	  				{
////	  					state_ALL = 3;
////	  					start = 0;
//						Trajectory();
//	  				}
	  				break;
 8002026:	e315      	b.n	8002654 <main+0x85c>
	  			case 3://PID
	  				if(Mode == 1)
 8002028:	4b35      	ldr	r3, [pc, #212]	@ (8002100 <main+0x308>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 80c0 	bne.w	80021b2 <main+0x3ba>
	  				{
	  					Trajectory();
 8002032:	f001 fe1d 	bl	8003c70 <Trajectory>
						if(CountSetpoint < 50)
 8002036:	4b33      	ldr	r3, [pc, #204]	@ (8002104 <main+0x30c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b31      	cmp	r3, #49	@ 0x31
 800203c:	dc02      	bgt.n	8002044 <main+0x24c>
						{
							PIDposition();
 800203e:	f002 f86d 	bl	800411c <PIDposition>
 8002042:	e079      	b.n	8002138 <main+0x340>
						}
						else
						{
							if(state_ALL_Old == 5 || state_ALL_Old == 0 || state_ALL_Old == 7 || state_ALL_Old == 8)
 8002044:	4b30      	ldr	r3, [pc, #192]	@ (8002108 <main+0x310>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d00b      	beq.n	8002064 <main+0x26c>
 800204c:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <main+0x310>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <main+0x26c>
 8002054:	4b2c      	ldr	r3, [pc, #176]	@ (8002108 <main+0x310>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b07      	cmp	r3, #7
 800205a:	d003      	beq.n	8002064 <main+0x26c>
 800205c:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <main+0x310>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b08      	cmp	r3, #8
 8002062:	d153      	bne.n	800210c <main+0x314>
							{
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2101      	movs	r1, #1
 8002068:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800206c:	f005 fdc6 	bl	8007bfc <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1111);
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <main+0x294>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f240 4257 	movw	r2, #1111	@ 0x457
 8002078:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 800207a:	f001 fab9 	bl	80035f0 <reset>
							state_ALL = 6;
 800207e:	4b1c      	ldr	r3, [pc, #112]	@ (80020f0 <main+0x2f8>)
 8002080:	2206      	movs	r2, #6
 8002082:	601a      	str	r2, [r3, #0]
	//						state_ALL = 2;
							CountSetpoint = 0;
 8002084:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <main+0x30c>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e052      	b.n	8002132 <main+0x33a>
 800208c:	200005e8 	.word	0x200005e8
 8002090:	2000051c 	.word	0x2000051c
 8002094:	20000780 	.word	0x20000780
 8002098:	200006b4 	.word	0x200006b4
 800209c:	200002b8 	.word	0x200002b8
 80020a0:	20001374 	.word	0x20001374
 80020a4:	20001430 	.word	0x20001430
 80020a8:	200012b0 	.word	0x200012b0
 80020ac:	3dd91687 	.word	0x3dd91687
 80020b0:	33d6bf95 	.word	0x33d6bf95
 80020b4:	38d1b717 	.word	0x38d1b717
 80020b8:	200012d8 	.word	0x200012d8
 80020bc:	41cc0000 	.word	0x41cc0000
 80020c0:	418e6666 	.word	0x418e6666
 80020c4:	20001300 	.word	0x20001300
 80020c8:	42480000 	.word	0x42480000
 80020cc:	20001328 	.word	0x20001328
 80020d0:	41200000 	.word	0x41200000
 80020d4:	353be7a2 	.word	0x353be7a2
 80020d8:	20000b70 	.word	0x20000b70
 80020dc:	200009e4 	.word	0x200009e4
 80020e0:	20000918 	.word	0x20000918
 80020e4:	20001048 	.word	0x20001048
 80020e8:	20001438 	.word	0x20001438
 80020ec:	20001440 	.word	0x20001440
 80020f0:	20000248 	.word	0x20000248
 80020f4:	20001228 	.word	0x20001228
 80020f8:	2000123c 	.word	0x2000123c
 80020fc:	48000800 	.word	0x48000800
 8002100:	200011dc 	.word	0x200011dc
 8002104:	2000125c 	.word	0x2000125c
 8002108:	2000122c 	.word	0x2000122c
							}
							else
							{
							state_ALL = 2;
 800210c:	4ba4      	ldr	r3, [pc, #656]	@ (80023a0 <main+0x5a8>)
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 8002112:	4ba4      	ldr	r3, [pc, #656]	@ (80023a4 <main+0x5ac>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002120:	f005 fd6c 	bl	8007bfc <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1111);
 8002124:	4ba0      	ldr	r3, [pc, #640]	@ (80023a8 <main+0x5b0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f240 4257 	movw	r2, #1111	@ 0x457
 800212c:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 800212e:	f001 fa5f 	bl	80035f0 <reset>
							}
							registerFrame[0x10].U16 = 0b0000;
 8002132:	4b9e      	ldr	r3, [pc, #632]	@ (80023ac <main+0x5b4>)
 8002134:	2200      	movs	r2, #0
 8002136:	841a      	strh	r2, [r3, #32]

						}
						if(ButtonTest[0] == 0)//HOME Button
 8002138:	4b9d      	ldr	r3, [pc, #628]	@ (80023b0 <main+0x5b8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <main+0x358>
						{
							state_ALL = 0;
 8002140:	4b97      	ldr	r3, [pc, #604]	@ (80023a0 <main+0x5a8>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
							Mode = 0;
 8002146:	4b9b      	ldr	r3, [pc, #620]	@ (80023b4 <main+0x5bc>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
							reset();
 800214c:	f001 fa50 	bl	80035f0 <reset>
						}
						if(fabs(Pos-Pos_Target) <= rangePos)//Limit
 8002150:	4b99      	ldr	r3, [pc, #612]	@ (80023b8 <main+0x5c0>)
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	4b99      	ldr	r3, [pc, #612]	@ (80023bc <main+0x5c4>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002160:	eeb0 7ae7 	vabs.f32	s14, s15
 8002164:	4b96      	ldr	r3, [pc, #600]	@ (80023c0 <main+0x5c8>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800216e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002172:	d81a      	bhi.n	80021aa <main+0x3b2>
						{
							if(currentTime > timestamp5)
 8002174:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002178:	4992      	ldr	r1, [pc, #584]	@ (80023c4 <main+0x5cc>)
 800217a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800217e:	4290      	cmp	r0, r2
 8002180:	eb71 0303 	sbcs.w	r3, r1, r3
 8002184:	f080 8268 	bcs.w	8002658 <main+0x860>
						  {
								CountSetpoint++;
 8002188:	4b86      	ldr	r3, [pc, #536]	@ (80023a4 <main+0x5ac>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	4a85      	ldr	r2, [pc, #532]	@ (80023a4 <main+0x5ac>)
 8002190:	6013      	str	r3, [r2, #0]
								timestamp5 =currentTime + 1000;
 8002192:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002196:	f512 7a7a 	adds.w	sl, r2, #1000	@ 0x3e8
 800219a:	f143 0b00 	adc.w	fp, r3, #0
 800219e:	4652      	mov	r2, sl
 80021a0:	465b      	mov	r3, fp
 80021a2:	4988      	ldr	r1, [pc, #544]	@ (80023c4 <main+0x5cc>)
 80021a4:	e9c1 2300 	strd	r2, r3, [r1]
						{
							CountSetpoint = 0;
						}
	  				}

	  				break;
 80021a8:	e256      	b.n	8002658 <main+0x860>
							CountSetpoint = 0;
 80021aa:	4b7e      	ldr	r3, [pc, #504]	@ (80023a4 <main+0x5ac>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
	  				break;
 80021b0:	e252      	b.n	8002658 <main+0x860>
	  					Trajectory();
 80021b2:	f001 fd5d 	bl	8003c70 <Trajectory>
						if(CountSetpoint < 50)
 80021b6:	4b7b      	ldr	r3, [pc, #492]	@ (80023a4 <main+0x5ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b31      	cmp	r3, #49	@ 0x31
 80021bc:	dc02      	bgt.n	80021c4 <main+0x3cc>
							PIDposition();
 80021be:	f001 ffad 	bl	800411c <PIDposition>
 80021c2:	e02e      	b.n	8002222 <main+0x42a>
							if(state_ALL_Old == 5 || state_ALL_Old == 0)
 80021c4:	4b80      	ldr	r3, [pc, #512]	@ (80023c8 <main+0x5d0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d003      	beq.n	80021d4 <main+0x3dc>
 80021cc:	4b7e      	ldr	r3, [pc, #504]	@ (80023c8 <main+0x5d0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d113      	bne.n	80021fc <main+0x404>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2101      	movs	r1, #1
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021dc:	f005 fd0e 	bl	8007bfc <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1111);
 80021e0:	4b71      	ldr	r3, [pc, #452]	@ (80023a8 <main+0x5b0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f240 4257 	movw	r2, #1111	@ 0x457
 80021e8:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 80021ea:	f001 fa01 	bl	80035f0 <reset>
							state_ALL = 2;
 80021ee:	4b6c      	ldr	r3, [pc, #432]	@ (80023a0 <main+0x5a8>)
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 80021f4:	4b6b      	ldr	r3, [pc, #428]	@ (80023a4 <main+0x5ac>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e012      	b.n	8002222 <main+0x42a>
							state_ALL = 2;
 80021fc:	4b68      	ldr	r3, [pc, #416]	@ (80023a0 <main+0x5a8>)
 80021fe:	2202      	movs	r2, #2
 8002200:	601a      	str	r2, [r3, #0]
							CountSetpoint = 0;
 8002202:	4b68      	ldr	r3, [pc, #416]	@ (80023a4 <main+0x5ac>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2101      	movs	r1, #1
 800220c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002210:	f005 fcf4 	bl	8007bfc <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1111);
 8002214:	4b64      	ldr	r3, [pc, #400]	@ (80023a8 <main+0x5b0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f240 4257 	movw	r2, #1111	@ 0x457
 800221c:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 800221e:	f001 f9e7 	bl	80035f0 <reset>
						if(ButtonTest[0] == 0)//HOME Button
 8002222:	4b63      	ldr	r3, [pc, #396]	@ (80023b0 <main+0x5b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d107      	bne.n	800223a <main+0x442>
							state_ALL = 0;
 800222a:	4b5d      	ldr	r3, [pc, #372]	@ (80023a0 <main+0x5a8>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
							Mode = 0;
 8002230:	4b60      	ldr	r3, [pc, #384]	@ (80023b4 <main+0x5bc>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
							reset();
 8002236:	f001 f9db 	bl	80035f0 <reset>
						if(fabs(Pos-Pos_Target) <= rangePos)//Limit
 800223a:	4b5f      	ldr	r3, [pc, #380]	@ (80023b8 <main+0x5c0>)
 800223c:	ed93 7a00 	vldr	s14, [r3]
 8002240:	4b5e      	ldr	r3, [pc, #376]	@ (80023bc <main+0x5c4>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224a:	eeb0 7ae7 	vabs.f32	s14, s15
 800224e:	4b5c      	ldr	r3, [pc, #368]	@ (80023c0 <main+0x5c8>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	d81c      	bhi.n	8002298 <main+0x4a0>
							if(currentTime > timestamp5)
 800225e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002262:	4958      	ldr	r1, [pc, #352]	@ (80023c4 <main+0x5cc>)
 8002264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002268:	4290      	cmp	r0, r2
 800226a:	eb71 0303 	sbcs.w	r3, r1, r3
 800226e:	f080 81f3 	bcs.w	8002658 <main+0x860>
								CountSetpoint++;
 8002272:	4b4c      	ldr	r3, [pc, #304]	@ (80023a4 <main+0x5ac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a4a      	ldr	r2, [pc, #296]	@ (80023a4 <main+0x5ac>)
 800227a:	6013      	str	r3, [r2, #0]
								timestamp5 =currentTime + 1000;
 800227c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002280:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	f143 0300 	adc.w	r3, r3, #0
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002290:	494c      	ldr	r1, [pc, #304]	@ (80023c4 <main+0x5cc>)
 8002292:	e9c1 2300 	strd	r2, r3, [r1]
	  				break;
 8002296:	e1df      	b.n	8002658 <main+0x860>
							CountSetpoint = 0;
 8002298:	4b42      	ldr	r3, [pc, #264]	@ (80023a4 <main+0x5ac>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
	  				break;
 800229e:	e1db      	b.n	8002658 <main+0x860>
	  			case 4://TEST
	  				Joy_State();
 80022a0:	f000 ff18 	bl	80030d4 <Joy_State>
	  			  if(resetBut == 0)
 80022a4:	4b49      	ldr	r3, [pc, #292]	@ (80023cc <main+0x5d4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <main+0x4bc>
	  				  {
	  					  state = 0;
 80022ac:	4b48      	ldr	r3, [pc, #288]	@ (80023d0 <main+0x5d8>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e002      	b.n	80022ba <main+0x4c2>
	  				  }
	  				  else
	  				  {
	  					  state = 1;
 80022b4:	4b46      	ldr	r3, [pc, #280]	@ (80023d0 <main+0x5d8>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
	  				  }
	  				ButtonMem();
 80022ba:	f001 f8c3 	bl	8003444 <ButtonMem>
					break;
 80022be:	e1f5      	b.n	80026ac <main+0x8b4>
	  			case 5://JOG MODE
	  				if(Mode == 1)
 80022c0:	4b3c      	ldr	r3, [pc, #240]	@ (80023b4 <main+0x5bc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	f040 8093 	bne.w	80023f0 <main+0x5f8>
	  				{
						switch(state_Pick_Place){
 80022ca:	4b42      	ldr	r3, [pc, #264]	@ (80023d4 <main+0x5dc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <main+0x4e0>
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d039      	beq.n	800234a <main+0x552>
						i = 0;
						}

						PIDreset();
	  				}
					break;
 80022d6:	e1e9      	b.n	80026ac <main+0x8b4>
								registerFrame[0x10].U16 = 0b0100;
 80022d8:	4b34      	ldr	r3, [pc, #208]	@ (80023ac <main+0x5b4>)
 80022da:	2204      	movs	r2, #4
 80022dc:	841a      	strh	r2, [r3, #32]
								Pos_Target = MemPos[Pick_Order[Pick]-1];
 80022de:	4b3e      	ldr	r3, [pc, #248]	@ (80023d8 <main+0x5e0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a3e      	ldr	r2, [pc, #248]	@ (80023dc <main+0x5e4>)
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	4a3d      	ldr	r2, [pc, #244]	@ (80023e0 <main+0x5e8>)
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a32      	ldr	r2, [pc, #200]	@ (80023bc <main+0x5c4>)
 80022f4:	6013      	str	r3, [r2, #0]
								Pick++;
 80022f6:	4b38      	ldr	r3, [pc, #224]	@ (80023d8 <main+0x5e0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a36      	ldr	r2, [pc, #216]	@ (80023d8 <main+0x5e0>)
 80022fe:	6013      	str	r3, [r2, #0]
								state_ALL = 3;
 8002300:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <main+0x5a8>)
 8002302:	2203      	movs	r2, #3
 8002304:	601a      	str	r2, [r3, #0]
								state_ALL_Old = 7;
 8002306:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <main+0x5d0>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
								state_Pick_Place = 1;
 800230c:	4b31      	ldr	r3, [pc, #196]	@ (80023d4 <main+0x5dc>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]
								rangePos = 0.8;
 8002312:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <main+0x5c8>)
 8002314:	4a33      	ldr	r2, [pc, #204]	@ (80023e4 <main+0x5ec>)
 8002316:	601a      	str	r2, [r3, #0]
								if(Place == 5)
 8002318:	4b33      	ldr	r3, [pc, #204]	@ (80023e8 <main+0x5f0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d111      	bne.n	8002344 <main+0x54c>
									state_ALL = 2;
 8002320:	4b1f      	ldr	r3, [pc, #124]	@ (80023a0 <main+0x5a8>)
 8002322:	2202      	movs	r2, #2
 8002324:	601a      	str	r2, [r3, #0]
									Place = 0;
 8002326:	4b30      	ldr	r3, [pc, #192]	@ (80023e8 <main+0x5f0>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
									Pick = 0;
 800232c:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <main+0x5e0>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
									Mode = 0;
 8002332:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <main+0x5bc>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
									state_Pick_Place = 0;
 8002338:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <main+0x5dc>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
									registerFrame[0x10].U16 = 0b0000;
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <main+0x5b4>)
 8002340:	2200      	movs	r2, #0
 8002342:	841a      	strh	r2, [r3, #32]
								PIDreset();
 8002344:	f001 fa2c 	bl	80037a0 <PIDreset>
								break;
 8002348:	e072      	b.n	8002430 <main+0x638>
								registerFrame[0x10].U16 = 0b1000;
 800234a:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <main+0x5b4>)
 800234c:	2208      	movs	r2, #8
 800234e:	841a      	strh	r2, [r3, #32]
								Pos_Target = MemPos[Place_Order[Place]-1]+12;
 8002350:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <main+0x5f0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a25      	ldr	r2, [pc, #148]	@ (80023ec <main+0x5f4>)
 8002356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235a:	3b01      	subs	r3, #1
 800235c:	4a20      	ldr	r2, [pc, #128]	@ (80023e0 <main+0x5e8>)
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 800236a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800236e:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <main+0x5c4>)
 8002370:	edc3 7a00 	vstr	s15, [r3]
								Place++;
 8002374:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <main+0x5f0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	4a1b      	ldr	r2, [pc, #108]	@ (80023e8 <main+0x5f0>)
 800237c:	6013      	str	r3, [r2, #0]
								state_ALL = 3;
 800237e:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <main+0x5a8>)
 8002380:	2203      	movs	r2, #3
 8002382:	601a      	str	r2, [r3, #0]
								state_ALL_Old = 8;
 8002384:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <main+0x5d0>)
 8002386:	2208      	movs	r2, #8
 8002388:	601a      	str	r2, [r3, #0]
								state_Pick_Place = 0;
 800238a:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <main+0x5dc>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
								rangePos = 1;
 8002390:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <main+0x5c8>)
 8002392:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002396:	601a      	str	r2, [r3, #0]
								PIDreset();
 8002398:	f001 fa02 	bl	80037a0 <PIDreset>
								break;
 800239c:	e048      	b.n	8002430 <main+0x638>
 800239e:	bf00      	nop
 80023a0:	20000248 	.word	0x20000248
 80023a4:	2000125c 	.word	0x2000125c
 80023a8:	200005e8 	.word	0x200005e8
 80023ac:	20001048 	.word	0x20001048
 80023b0:	2000123c 	.word	0x2000123c
 80023b4:	200011dc 	.word	0x200011dc
 80023b8:	200013f8 	.word	0x200013f8
 80023bc:	20001354 	.word	0x20001354
 80023c0:	20000250 	.word	0x20000250
 80023c4:	20001448 	.word	0x20001448
 80023c8:	2000122c 	.word	0x2000122c
 80023cc:	20001290 	.word	0x20001290
 80023d0:	200013c5 	.word	0x200013c5
 80023d4:	20001234 	.word	0x20001234
 80023d8:	20001284 	.word	0x20001284
 80023dc:	200011ec 	.word	0x200011ec
 80023e0:	2000126c 	.word	0x2000126c
 80023e4:	3f4ccccd 	.word	0x3f4ccccd
 80023e8:	20001288 	.word	0x20001288
 80023ec:	20001200 	.word	0x20001200
	  					Pos_Target = MemPos[i];
 80023f0:	4b9b      	ldr	r3, [pc, #620]	@ (8002660 <main+0x868>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a9b      	ldr	r2, [pc, #620]	@ (8002664 <main+0x86c>)
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a9a      	ldr	r2, [pc, #616]	@ (8002668 <main+0x870>)
 80023fe:	6013      	str	r3, [r2, #0]
						state_ALL = 3;
 8002400:	4b9a      	ldr	r3, [pc, #616]	@ (800266c <main+0x874>)
 8002402:	2203      	movs	r2, #3
 8002404:	601a      	str	r2, [r3, #0]
						state_ALL_Old = 5;
 8002406:	4b9a      	ldr	r3, [pc, #616]	@ (8002670 <main+0x878>)
 8002408:	2205      	movs	r2, #5
 800240a:	601a      	str	r2, [r3, #0]
						i++;
 800240c:	4b94      	ldr	r3, [pc, #592]	@ (8002660 <main+0x868>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a93      	ldr	r2, [pc, #588]	@ (8002660 <main+0x868>)
 8002414:	6013      	str	r3, [r2, #0]
						if(i == 5)
 8002416:	4b92      	ldr	r3, [pc, #584]	@ (8002660 <main+0x868>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d105      	bne.n	800242a <main+0x632>
						state_ALL_Old = 0;
 800241e:	4b94      	ldr	r3, [pc, #592]	@ (8002670 <main+0x878>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
						i = 0;
 8002424:	4b8e      	ldr	r3, [pc, #568]	@ (8002660 <main+0x868>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
						PIDreset();
 800242a:	f001 f9b9 	bl	80037a0 <PIDreset>
					break;
 800242e:	e13d      	b.n	80026ac <main+0x8b4>
 8002430:	e13c      	b.n	80026ac <main+0x8b4>
	  			case 6://Gripper
	  				switch (state_Griper)
 8002432:	4b90      	ldr	r3, [pc, #576]	@ (8002674 <main+0x87c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d074      	beq.n	8002524 <main+0x72c>
 800243a:	2b02      	cmp	r3, #2
 800243c:	f300 810e 	bgt.w	800265c <main+0x864>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <main+0x652>
 8002444:	2b01      	cmp	r3, #1
 8002446:	d069      	beq.n	800251c <main+0x724>
	  						break;

	  				}


	  				break;
 8002448:	e108      	b.n	800265c <main+0x864>
	  							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 800244a:	2201      	movs	r2, #1
 800244c:	2140      	movs	r1, #64	@ 0x40
 800244e:	488a      	ldr	r0, [pc, #552]	@ (8002678 <main+0x880>)
 8002450:	f005 fbd4 	bl	8007bfc <HAL_GPIO_WritePin>
								if(LeadSW[0] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 8002454:	4b89      	ldr	r3, [pc, #548]	@ (800267c <main+0x884>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <main+0x674>
 800245c:	4b87      	ldr	r3, [pc, #540]	@ (800267c <main+0x884>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10f      	bne.n	8002484 <main+0x68c>
 8002464:	4b85      	ldr	r3, [pc, #532]	@ (800267c <main+0x884>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10b      	bne.n	8002484 <main+0x68c>
									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,1);
 800246c:	2201      	movs	r2, #1
 800246e:	2120      	movs	r1, #32
 8002470:	4881      	ldr	r0, [pc, #516]	@ (8002678 <main+0x880>)
 8002472:	f005 fbc3 	bl	8007bfc <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8002476:	2200      	movs	r2, #0
 8002478:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800247c:	487e      	ldr	r0, [pc, #504]	@ (8002678 <main+0x880>)
 800247e:	f005 fbbd 	bl	8007bfc <HAL_GPIO_WritePin>
	  						break;
 8002482:	e0ab      	b.n	80025dc <main+0x7e4>
								else if(LeadSW[1] == 0)
 8002484:	4b7d      	ldr	r3, [pc, #500]	@ (800267c <main+0x884>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 80a7 	bne.w	80025dc <main+0x7e4>
									if(CountGriper > 10)
 800248e:	4b7c      	ldr	r3, [pc, #496]	@ (8002680 <main+0x888>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b0a      	cmp	r3, #10
 8002494:	dd2f      	ble.n	80024f6 <main+0x6fe>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8002496:	2200      	movs	r2, #0
 8002498:	2120      	movs	r1, #32
 800249a:	4877      	ldr	r0, [pc, #476]	@ (8002678 <main+0x880>)
 800249c:	f005 fbae 	bl	8007bfc <HAL_GPIO_WritePin>
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024a6:	4874      	ldr	r0, [pc, #464]	@ (8002678 <main+0x880>)
 80024a8:	f005 fba8 	bl	8007bfc <HAL_GPIO_WritePin>
										state_Griper = 1;
 80024ac:	4b71      	ldr	r3, [pc, #452]	@ (8002674 <main+0x87c>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 80024b2:	4b73      	ldr	r3, [pc, #460]	@ (8002680 <main+0x888>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
										if(VacuumNF == 0)
 80024b8:	4b72      	ldr	r3, [pc, #456]	@ (8002684 <main+0x88c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d108      	bne.n	80024d2 <main+0x6da>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 80024c0:	2201      	movs	r2, #1
 80024c2:	2140      	movs	r1, #64	@ 0x40
 80024c4:	486c      	ldr	r0, [pc, #432]	@ (8002678 <main+0x880>)
 80024c6:	f005 fb99 	bl	8007bfc <HAL_GPIO_WritePin>
											VacuumNF = 1;
 80024ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002684 <main+0x88c>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e007      	b.n	80024e2 <main+0x6ea>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2140      	movs	r1, #64	@ 0x40
 80024d6:	4868      	ldr	r0, [pc, #416]	@ (8002678 <main+0x880>)
 80024d8:	f005 fb90 	bl	8007bfc <HAL_GPIO_WritePin>
											VacuumNF = 0;
 80024dc:	4b69      	ldr	r3, [pc, #420]	@ (8002684 <main+0x88c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
										if(state_ALL_Old == 8)
 80024e2:	4b63      	ldr	r3, [pc, #396]	@ (8002670 <main+0x878>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d178      	bne.n	80025dc <main+0x7e4>
											HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2140      	movs	r1, #64	@ 0x40
 80024ee:	4862      	ldr	r0, [pc, #392]	@ (8002678 <main+0x880>)
 80024f0:	f005 fb84 	bl	8007bfc <HAL_GPIO_WritePin>
	  						break;
 80024f4:	e072      	b.n	80025dc <main+0x7e4>
										if(timeGriper < HAL_GetTick())
 80024f6:	f003 f921 	bl	800573c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b62      	ldr	r3, [pc, #392]	@ (8002688 <main+0x890>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d96b      	bls.n	80025dc <main+0x7e4>
											CountGriper++;
 8002504:	4b5e      	ldr	r3, [pc, #376]	@ (8002680 <main+0x888>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	4a5d      	ldr	r2, [pc, #372]	@ (8002680 <main+0x888>)
 800250c:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 800250e:	f003 f915 	bl	800573c <HAL_GetTick>
 8002512:	4603      	mov	r3, r0
 8002514:	330a      	adds	r3, #10
 8002516:	4a5c      	ldr	r2, [pc, #368]	@ (8002688 <main+0x890>)
 8002518:	6013      	str	r3, [r2, #0]
	  						break;
 800251a:	e05f      	b.n	80025dc <main+0x7e4>
	  							state_Griper = 2;
 800251c:	4b55      	ldr	r3, [pc, #340]	@ (8002674 <main+0x87c>)
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
								break;
 8002522:	e05e      	b.n	80025e2 <main+0x7ea>
	  							if(LeadSW[1] == 0 || (LeadSW[1] == 1 && LeadSW[0] == 1))
 8002524:	4b55      	ldr	r3, [pc, #340]	@ (800267c <main+0x884>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <main+0x744>
 800252c:	4b53      	ldr	r3, [pc, #332]	@ (800267c <main+0x884>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10f      	bne.n	8002554 <main+0x75c>
 8002534:	4b51      	ldr	r3, [pc, #324]	@ (800267c <main+0x884>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d10b      	bne.n	8002554 <main+0x75c>
	  								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 800253c:	2200      	movs	r2, #0
 800253e:	2120      	movs	r1, #32
 8002540:	484d      	ldr	r0, [pc, #308]	@ (8002678 <main+0x880>)
 8002542:	f005 fb5b 	bl	8007bfc <HAL_GPIO_WritePin>
	  								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,1);
 8002546:	2201      	movs	r2, #1
 8002548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800254c:	484a      	ldr	r0, [pc, #296]	@ (8002678 <main+0x880>)
 800254e:	f005 fb55 	bl	8007bfc <HAL_GPIO_WritePin>
 8002552:	e042      	b.n	80025da <main+0x7e2>
	  							else if(LeadSW[0] == 0)
 8002554:	4b49      	ldr	r3, [pc, #292]	@ (800267c <main+0x884>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d141      	bne.n	80025e0 <main+0x7e8>
	  								if(CountGriper > 10)
 800255c:	4b48      	ldr	r3, [pc, #288]	@ (8002680 <main+0x888>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b0a      	cmp	r3, #10
 8002562:	dd27      	ble.n	80025b4 <main+0x7bc>
	  									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8002564:	2200      	movs	r2, #0
 8002566:	2120      	movs	r1, #32
 8002568:	4843      	ldr	r0, [pc, #268]	@ (8002678 <main+0x880>)
 800256a:	f005 fb47 	bl	8007bfc <HAL_GPIO_WritePin>
	  									HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 800256e:	2200      	movs	r2, #0
 8002570:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002574:	4840      	ldr	r0, [pc, #256]	@ (8002678 <main+0x880>)
 8002576:	f005 fb41 	bl	8007bfc <HAL_GPIO_WritePin>
	  									state_Griper = 0;
 800257a:	4b3e      	ldr	r3, [pc, #248]	@ (8002674 <main+0x87c>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
										CountGriper = 0;
 8002580:	4b3f      	ldr	r3, [pc, #252]	@ (8002680 <main+0x888>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
										if(state_ALL_Old == 5 || state_ALL_Old == 7 || state_ALL_Old == 8)
 8002586:	4b3a      	ldr	r3, [pc, #232]	@ (8002670 <main+0x878>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b05      	cmp	r3, #5
 800258c:	d007      	beq.n	800259e <main+0x7a6>
 800258e:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <main+0x878>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b07      	cmp	r3, #7
 8002594:	d003      	beq.n	800259e <main+0x7a6>
 8002596:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <main+0x878>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b08      	cmp	r3, #8
 800259c:	d103      	bne.n	80025a6 <main+0x7ae>
											state_ALL = 5;
 800259e:	4b33      	ldr	r3, [pc, #204]	@ (800266c <main+0x874>)
 80025a0:	2205      	movs	r2, #5
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e019      	b.n	80025da <main+0x7e2>
											state_ALL = 0;
 80025a6:	4b31      	ldr	r3, [pc, #196]	@ (800266c <main+0x874>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
											Mode = 0;
 80025ac:	4b37      	ldr	r3, [pc, #220]	@ (800268c <main+0x894>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
	  						break;
 80025b2:	e015      	b.n	80025e0 <main+0x7e8>
										if(timeGriper < HAL_GetTick())
 80025b4:	f003 f8c2 	bl	800573c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b35      	ldr	r3, [pc, #212]	@ (8002690 <main+0x898>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d90e      	bls.n	80025e0 <main+0x7e8>
											CountGriper++;
 80025c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002680 <main+0x888>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002680 <main+0x888>)
 80025ca:	6013      	str	r3, [r2, #0]
											timeGriper = HAL_GetTick()+10;
 80025cc:	f003 f8b6 	bl	800573c <HAL_GetTick>
 80025d0:	4603      	mov	r3, r0
 80025d2:	330a      	adds	r3, #10
 80025d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002690 <main+0x898>)
 80025d6:	6013      	str	r3, [r2, #0]
	  						break;
 80025d8:	e002      	b.n	80025e0 <main+0x7e8>
 80025da:	e001      	b.n	80025e0 <main+0x7e8>
	  						break;
 80025dc:	bf00      	nop
 80025de:	e03d      	b.n	800265c <main+0x864>
	  						break;
 80025e0:	bf00      	nop
	  				break;
 80025e2:	e03b      	b.n	800265c <main+0x864>
	  				case 7://FREEZE
	  					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80025e4:	2201      	movs	r2, #1
 80025e6:	2101      	movs	r1, #1
 80025e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ec:	f005 fb06 	bl	8007bfc <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 80025f0:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <main+0x89c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	635a      	str	r2, [r3, #52]	@ 0x34
	  					if(resetBut == 0)
 80025f8:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <main+0x8a0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d123      	bne.n	8002648 <main+0x850>
	  					{
	  						if(resetCount > 50)
 8002600:	4b26      	ldr	r3, [pc, #152]	@ (800269c <main+0x8a4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b32      	cmp	r3, #50	@ 0x32
 8002606:	dd0c      	ble.n	8002622 <main+0x82a>
							{
	  							Mode = 0;
 8002608:	4b20      	ldr	r3, [pc, #128]	@ (800268c <main+0x894>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
							emerthick = 1;
 800260e:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <main+0x8a8>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]
							state_ALL = 0;
 8002614:	4b15      	ldr	r3, [pc, #84]	@ (800266c <main+0x874>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
							resetCount = 0;
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <main+0x8a4>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
	  					else
	  					{
	  						resetCount = 0;
	  					}

	  					break;
 8002620:	e042      	b.n	80026a8 <main+0x8b0>
							if(timeResetbut < HAL_GetTick())
 8002622:	f003 f88b 	bl	800573c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	4b1e      	ldr	r3, [pc, #120]	@ (80026a4 <main+0x8ac>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d93b      	bls.n	80026a8 <main+0x8b0>
								resetCount++;
 8002630:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <main+0x8a4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a19      	ldr	r2, [pc, #100]	@ (800269c <main+0x8a4>)
 8002638:	6013      	str	r3, [r2, #0]
								timeResetbut = HAL_GetTick()+10;
 800263a:	f003 f87f 	bl	800573c <HAL_GetTick>
 800263e:	4603      	mov	r3, r0
 8002640:	330a      	adds	r3, #10
 8002642:	4a18      	ldr	r2, [pc, #96]	@ (80026a4 <main+0x8ac>)
 8002644:	6013      	str	r3, [r2, #0]
	  					break;
 8002646:	e02f      	b.n	80026a8 <main+0x8b0>
	  						resetCount = 0;
 8002648:	4b14      	ldr	r3, [pc, #80]	@ (800269c <main+0x8a4>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
	  					break;
 800264e:	e02b      	b.n	80026a8 <main+0x8b0>
	  				break;
 8002650:	bf00      	nop
 8002652:	e457      	b.n	8001f04 <main+0x10c>
	  				break;
 8002654:	bf00      	nop
 8002656:	e455      	b.n	8001f04 <main+0x10c>
	  				break;
 8002658:	bf00      	nop
 800265a:	e453      	b.n	8001f04 <main+0x10c>
	  				break;
 800265c:	bf00      	nop
 800265e:	e451      	b.n	8001f04 <main+0x10c>
 8002660:	20001280 	.word	0x20001280
 8002664:	2000126c 	.word	0x2000126c
 8002668:	20001354 	.word	0x20001354
 800266c:	20000248 	.word	0x20000248
 8002670:	2000122c 	.word	0x2000122c
 8002674:	20001230 	.word	0x20001230
 8002678:	48000800 	.word	0x48000800
 800267c:	20001254 	.word	0x20001254
 8002680:	20001260 	.word	0x20001260
 8002684:	20001268 	.word	0x20001268
 8002688:	20001450 	.word	0x20001450
 800268c:	200011dc 	.word	0x200011dc
 8002690:	20001454 	.word	0x20001454
 8002694:	200005e8 	.word	0x200005e8
 8002698:	20001290 	.word	0x20001290
 800269c:	200012ac 	.word	0x200012ac
 80026a0:	200012a4 	.word	0x200012a4
 80026a4:	20001458 	.word	0x20001458
	  					break;
 80026a8:	bf00      	nop
 80026aa:	e42b      	b.n	8001f04 <main+0x10c>
  {
 80026ac:	e42a      	b.n	8001f04 <main+0x10c>
 80026ae:	bf00      	nop

080026b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b094      	sub	sp, #80	@ 0x50
 80026b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b6:	f107 0318 	add.w	r3, r7, #24
 80026ba:	2238      	movs	r2, #56	@ 0x38
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f00a fa68 	bl	800cb94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f005 fadc 	bl	8007c90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026d8:	2302      	movs	r3, #2
 80026da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026e2:	2340      	movs	r3, #64	@ 0x40
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e6:	2302      	movs	r3, #2
 80026e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026ea:	2302      	movs	r3, #2
 80026ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80026ee:	2304      	movs	r3, #4
 80026f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80026f2:	2355      	movs	r3, #85	@ 0x55
 80026f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026f6:	2302      	movs	r3, #2
 80026f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026fa:	2302      	movs	r3, #2
 80026fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026fe:	2302      	movs	r3, #2
 8002700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002702:	f107 0318 	add.w	r3, r7, #24
 8002706:	4618      	mov	r0, r3
 8002708:	f005 fb76 	bl	8007df8 <HAL_RCC_OscConfig>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002712:	f002 fc49 	bl	8004fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002716:	230f      	movs	r3, #15
 8002718:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800271a:	2303      	movs	r3, #3
 800271c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2104      	movs	r1, #4
 800272e:	4618      	mov	r0, r3
 8002730:	f005 fe74 	bl	800841c <HAL_RCC_ClockConfig>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800273a:	f002 fc35 	bl	8004fa8 <Error_Handler>
  }
}
 800273e:	bf00      	nop
 8002740:	3750      	adds	r7, #80	@ 0x50
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	@ 0x30
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800274e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2220      	movs	r2, #32
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f00a fa17 	bl	800cb94 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002766:	4b38      	ldr	r3, [pc, #224]	@ (8002848 <MX_ADC3_Init+0x100>)
 8002768:	4a38      	ldr	r2, [pc, #224]	@ (800284c <MX_ADC3_Init+0x104>)
 800276a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800276c:	4b36      	ldr	r3, [pc, #216]	@ (8002848 <MX_ADC3_Init+0x100>)
 800276e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002772:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002774:	4b34      	ldr	r3, [pc, #208]	@ (8002848 <MX_ADC3_Init+0x100>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800277a:	4b33      	ldr	r3, [pc, #204]	@ (8002848 <MX_ADC3_Init+0x100>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8002780:	4b31      	ldr	r3, [pc, #196]	@ (8002848 <MX_ADC3_Init+0x100>)
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002786:	4b30      	ldr	r3, [pc, #192]	@ (8002848 <MX_ADC3_Init+0x100>)
 8002788:	2201      	movs	r2, #1
 800278a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800278c:	4b2e      	ldr	r3, [pc, #184]	@ (8002848 <MX_ADC3_Init+0x100>)
 800278e:	2204      	movs	r2, #4
 8002790:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002792:	4b2d      	ldr	r3, [pc, #180]	@ (8002848 <MX_ADC3_Init+0x100>)
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002798:	4b2b      	ldr	r3, [pc, #172]	@ (8002848 <MX_ADC3_Init+0x100>)
 800279a:	2201      	movs	r2, #1
 800279c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 800279e:	4b2a      	ldr	r3, [pc, #168]	@ (8002848 <MX_ADC3_Init+0x100>)
 80027a0:	2202      	movs	r2, #2
 80027a2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80027a4:	4b28      	ldr	r3, [pc, #160]	@ (8002848 <MX_ADC3_Init+0x100>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027ac:	4b26      	ldr	r3, [pc, #152]	@ (8002848 <MX_ADC3_Init+0x100>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027b2:	4b25      	ldr	r3, [pc, #148]	@ (8002848 <MX_ADC3_Init+0x100>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80027b8:	4b23      	ldr	r3, [pc, #140]	@ (8002848 <MX_ADC3_Init+0x100>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027c0:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <MX_ADC3_Init+0x100>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80027c6:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <MX_ADC3_Init+0x100>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80027ce:	481e      	ldr	r0, [pc, #120]	@ (8002848 <MX_ADC3_Init+0x100>)
 80027d0:	f003 fa04 	bl	8005bdc <HAL_ADC_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80027da:	f002 fbe5 	bl	8004fa8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80027e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e6:	4619      	mov	r1, r3
 80027e8:	4817      	ldr	r0, [pc, #92]	@ (8002848 <MX_ADC3_Init+0x100>)
 80027ea:	f004 fb23 	bl	8006e34 <HAL_ADCEx_MultiModeConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80027f4:	f002 fbd8 	bl	8004fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027f8:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <MX_ADC3_Init+0x108>)
 80027fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027fc:	2306      	movs	r3, #6
 80027fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002804:	237f      	movs	r3, #127	@ 0x7f
 8002806:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002808:	2304      	movs	r3, #4
 800280a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	4619      	mov	r1, r3
 8002814:	480c      	ldr	r0, [pc, #48]	@ (8002848 <MX_ADC3_Init+0x100>)
 8002816:	f003 fc8f 	bl	8006138 <HAL_ADC_ConfigChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8002820:	f002 fbc2 	bl	8004fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <MX_ADC3_Init+0x10c>)
 8002826:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002828:	230c      	movs	r3, #12
 800282a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	4619      	mov	r1, r3
 8002830:	4805      	ldr	r0, [pc, #20]	@ (8002848 <MX_ADC3_Init+0x100>)
 8002832:	f003 fc81 	bl	8006138 <HAL_ADC_ConfigChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 800283c:	f002 fbb4 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	3730      	adds	r7, #48	@ 0x30
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200002b8 	.word	0x200002b8
 800284c:	50000400 	.word	0x50000400
 8002850:	04300002 	.word	0x04300002
 8002854:	14f00020 	.word	0x14f00020

08002858 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0310 	add.w	r3, r7, #16
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 8002878:	4a20      	ldr	r2, [pc, #128]	@ (80028fc <MX_TIM1_Init+0xa4>)
 800287a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800287c:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002882:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 800288a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800288e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002890:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002896:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 8002898:	2200      	movs	r2, #0
 800289a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289c:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028a2:	4815      	ldr	r0, [pc, #84]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 80028a4:	f006 fa24 	bl	8008cf0 <HAL_TIM_Base_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80028ae:	f002 fb7b 	bl	8004fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	4619      	mov	r1, r3
 80028be:	480e      	ldr	r0, [pc, #56]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 80028c0:	f007 f9a8 	bl	8009c14 <HAL_TIM_ConfigClockSource>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80028ca:	f002 fb6d 	bl	8004fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4806      	ldr	r0, [pc, #24]	@ (80028f8 <MX_TIM1_Init+0xa0>)
 80028e0:	f008 f97e 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80028ea:	f002 fb5d 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000384 	.word	0x20000384
 80028fc:	40012c00 	.word	0x40012c00

08002900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800291e:	4b1e      	ldr	r3, [pc, #120]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002920:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002924:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292c:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <MX_TIM2_Init+0x98>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002932:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <MX_TIM2_Init+0x98>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002946:	4814      	ldr	r0, [pc, #80]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002948:	f006 f9d2 	bl	8008cf0 <HAL_TIM_Base_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002952:	f002 fb29 	bl	8004fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800295a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	4619      	mov	r1, r3
 8002962:	480d      	ldr	r0, [pc, #52]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002964:	f007 f956 	bl	8009c14 <HAL_TIM_ConfigClockSource>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800296e:	f002 fb1b 	bl	8004fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4806      	ldr	r0, [pc, #24]	@ (8002998 <MX_TIM2_Init+0x98>)
 8002980:	f008 f92e 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800298a:	f002 fb0d 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000450 	.word	0x20000450

0800299c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	@ 0x30
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	2224      	movs	r2, #36	@ 0x24
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f00a f8f2 	bl	800cb94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	463b      	mov	r3, r7
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029ba:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029bc:	4a21      	ldr	r2, [pc, #132]	@ (8002a44 <MX_TIM3_Init+0xa8>)
 80029be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029da:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029e0:	2303      	movs	r3, #3
 80029e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029e8:	2301      	movs	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80029f0:	2302      	movs	r3, #2
 80029f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029f8:	2301      	movs	r3, #1
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480d      	ldr	r0, [pc, #52]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 8002a0c:	f006 fd32 	bl	8009474 <HAL_TIM_Encoder_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002a16:	f002 fac7 	bl	8004fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a22:	463b      	mov	r3, r7
 8002a24:	4619      	mov	r1, r3
 8002a26:	4806      	ldr	r0, [pc, #24]	@ (8002a40 <MX_TIM3_Init+0xa4>)
 8002a28:	f008 f8da 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002a32:	f002 fab9 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a36:	bf00      	nop
 8002a38:	3730      	adds	r7, #48	@ 0x30
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000051c 	.word	0x2000051c
 8002a44:	40000400 	.word	0x40000400

08002a48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08e      	sub	sp, #56	@ 0x38
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a68:	463b      	mov	r3, r7
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b34 <MX_TIM4_Init+0xec>)
 8002a7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002a80:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a86:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42499;
 8002a8c:	4b28      	ldr	r3, [pc, #160]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002a8e:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8002a92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a94:	4b26      	ldr	r3, [pc, #152]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a9a:	4b25      	ldr	r3, [pc, #148]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002aa0:	4823      	ldr	r0, [pc, #140]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002aa2:	f006 f925 	bl	8008cf0 <HAL_TIM_Base_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002aac:	f002 fa7c 	bl	8004fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ab6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aba:	4619      	mov	r1, r3
 8002abc:	481c      	ldr	r0, [pc, #112]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002abe:	f007 f8a9 	bl	8009c14 <HAL_TIM_ConfigClockSource>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002ac8:	f002 fa6e 	bl	8004fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002acc:	4818      	ldr	r0, [pc, #96]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002ace:	f006 fa5b 	bl	8008f88 <HAL_TIM_PWM_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002ad8:	f002 fa66 	bl	8004fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4811      	ldr	r0, [pc, #68]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002aec:	f008 f878 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002af6:	f002 fa57 	bl	8004fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002afa:	2360      	movs	r3, #96	@ 0x60
 8002afc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4807      	ldr	r0, [pc, #28]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002b12:	f006 ff6b 	bl	80099ec <HAL_TIM_PWM_ConfigChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002b1c:	f002 fa44 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b20:	4803      	ldr	r0, [pc, #12]	@ (8002b30 <MX_TIM4_Init+0xe8>)
 8002b22:	f002 fbe7 	bl	80052f4 <HAL_TIM_MspPostInit>

}
 8002b26:	bf00      	nop
 8002b28:	3738      	adds	r7, #56	@ 0x38
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200005e8 	.word	0x200005e8
 8002b34:	40000800 	.word	0x40000800

08002b38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3e:	f107 0310 	add.w	r3, r7, #16
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b56:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <MX_TIM5_Init+0x94>)
 8002b58:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd0 <MX_TIM5_Init+0x98>)
 8002b5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <MX_TIM5_Init+0x94>)
 8002b5e:	22a9      	movs	r2, #169	@ 0xa9
 8002b60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <MX_TIM5_Init+0x94>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002b68:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <MX_TIM5_Init+0x94>)
 8002b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b70:	4b16      	ldr	r3, [pc, #88]	@ (8002bcc <MX_TIM5_Init+0x94>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b76:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <MX_TIM5_Init+0x94>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b7c:	4813      	ldr	r0, [pc, #76]	@ (8002bcc <MX_TIM5_Init+0x94>)
 8002b7e:	f006 f8b7 	bl	8008cf0 <HAL_TIM_Base_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002b88:	f002 fa0e 	bl	8004fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	@ (8002bcc <MX_TIM5_Init+0x94>)
 8002b9a:	f007 f83b 	bl	8009c14 <HAL_TIM_ConfigClockSource>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002ba4:	f002 fa00 	bl	8004fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <MX_TIM5_Init+0x94>)
 8002bb6:	f008 f813 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002bc0:	f002 f9f2 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200006b4 	.word	0x200006b4
 8002bd0:	40000c00 	.word	0x40000c00

08002bd4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <MX_TIM6_Init+0x64>)
 8002be6:	4a15      	ldr	r2, [pc, #84]	@ (8002c3c <MX_TIM6_Init+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8002bea:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <MX_TIM6_Init+0x64>)
 8002bec:	22a9      	movs	r2, #169	@ 0xa9
 8002bee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <MX_TIM6_Init+0x64>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <MX_TIM6_Init+0x64>)
 8002bf8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bfc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <MX_TIM6_Init+0x64>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c04:	480c      	ldr	r0, [pc, #48]	@ (8002c38 <MX_TIM6_Init+0x64>)
 8002c06:	f006 f873 	bl	8008cf0 <HAL_TIM_Base_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002c10:	f002 f9ca 	bl	8004fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c1c:	1d3b      	adds	r3, r7, #4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4805      	ldr	r0, [pc, #20]	@ (8002c38 <MX_TIM6_Init+0x64>)
 8002c22:	f007 ffdd 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002c2c:	f002 f9bc 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000780 	.word	0x20000780
 8002c3c:	40001000 	.word	0x40001000

08002c40 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002c60:	4a20      	ldr	r2, [pc, #128]	@ (8002ce4 <MX_TIM8_Init+0xa4>)
 8002c62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8002c64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002c66:	22a9      	movs	r2, #169	@ 0xa9
 8002c68:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c76:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c78:	4b19      	ldr	r3, [pc, #100]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c8a:	4815      	ldr	r0, [pc, #84]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002c8c:	f006 f830 	bl	8008cf0 <HAL_TIM_Base_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002c96:	f002 f987 	bl	8004fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480e      	ldr	r0, [pc, #56]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002ca8:	f006 ffb4 	bl	8009c14 <HAL_TIM_ConfigClockSource>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002cb2:	f002 f979 	bl	8004fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4806      	ldr	r0, [pc, #24]	@ (8002ce0 <MX_TIM8_Init+0xa0>)
 8002cc8:	f007 ff8a 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002cd2:	f002 f969 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002cd6:	bf00      	nop
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2000084c 	.word	0x2000084c
 8002ce4:	40013400 	.word	0x40013400

08002ce8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002cec:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <MX_TIM16_Init+0x58>)
 8002cee:	4a15      	ldr	r2, [pc, #84]	@ (8002d44 <MX_TIM16_Init+0x5c>)
 8002cf0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <MX_TIM16_Init+0x58>)
 8002cf4:	22a9      	movs	r2, #169	@ 0xa9
 8002cf6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <MX_TIM16_Init+0x58>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002cfe:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <MX_TIM16_Init+0x58>)
 8002d00:	f240 4279 	movw	r2, #1145	@ 0x479
 8002d04:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d06:	4b0e      	ldr	r3, [pc, #56]	@ (8002d40 <MX_TIM16_Init+0x58>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <MX_TIM16_Init+0x58>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d12:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <MX_TIM16_Init+0x58>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d18:	4809      	ldr	r0, [pc, #36]	@ (8002d40 <MX_TIM16_Init+0x58>)
 8002d1a:	f005 ffe9 	bl	8008cf0 <HAL_TIM_Base_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002d24:	f002 f940 	bl	8004fa8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002d28:	2108      	movs	r1, #8
 8002d2a:	4805      	ldr	r0, [pc, #20]	@ (8002d40 <MX_TIM16_Init+0x58>)
 8002d2c:	f006 faac 	bl	8009288 <HAL_TIM_OnePulse_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002d36:	f002 f937 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000918 	.word	0x20000918
 8002d44:	40014400 	.word	0x40014400

08002d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d4c:	4b23      	ldr	r3, [pc, #140]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d4e:	4a24      	ldr	r2, [pc, #144]	@ (8002de0 <MX_USART2_UART_Init+0x98>)
 8002d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002d52:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d54:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002d5a:	4b20      	ldr	r3, [pc, #128]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d60:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d62:	4b1e      	ldr	r3, [pc, #120]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002d68:	4b1c      	ldr	r3, [pc, #112]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d72:	220c      	movs	r2, #12
 8002d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d76:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d7c:	4b17      	ldr	r3, [pc, #92]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d82:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d88:	4b14      	ldr	r3, [pc, #80]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d8e:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d94:	4811      	ldr	r0, [pc, #68]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002d96:	f008 f809 	bl	800adac <HAL_UART_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002da0:	f002 f902 	bl	8004fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da4:	2100      	movs	r1, #0
 8002da6:	480d      	ldr	r0, [pc, #52]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002da8:	f009 fe29 	bl	800c9fe <HAL_UARTEx_SetTxFifoThreshold>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002db2:	f002 f8f9 	bl	8004fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db6:	2100      	movs	r1, #0
 8002db8:	4808      	ldr	r0, [pc, #32]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002dba:	f009 fe5e 	bl	800ca7a <HAL_UARTEx_SetRxFifoThreshold>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002dc4:	f002 f8f0 	bl	8004fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <MX_USART2_UART_Init+0x94>)
 8002dca:	f009 fddf 	bl	800c98c <HAL_UARTEx_DisableFifoMode>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002dd4:	f002 f8e8 	bl	8004fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	200009e4 	.word	0x200009e4
 8002de0:	40004400 	.word	0x40004400

08002de4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002dea:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <MX_DMA_Init+0x70>)
 8002dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dee:	4a19      	ldr	r2, [pc, #100]	@ (8002e54 <MX_DMA_Init+0x70>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6493      	str	r3, [r2, #72]	@ 0x48
 8002df6:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <MX_DMA_Init+0x70>)
 8002df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	607b      	str	r3, [r7, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e02:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <MX_DMA_Init+0x70>)
 8002e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e06:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <MX_DMA_Init+0x70>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e0e:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <MX_DMA_Init+0x70>)
 8002e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	200b      	movs	r0, #11
 8002e20:	f004 f9eb 	bl	80071fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002e24:	200b      	movs	r0, #11
 8002e26:	f004 fa02 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	200c      	movs	r0, #12
 8002e30:	f004 f9e3 	bl	80071fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002e34:	200c      	movs	r0, #12
 8002e36:	f004 f9fa 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	200d      	movs	r0, #13
 8002e40:	f004 f9db 	bl	80071fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002e44:	200d      	movs	r0, #13
 8002e46:	f004 f9f2 	bl	800722e <HAL_NVIC_EnableIRQ>

}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000

08002e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5e:	f107 0314 	add.w	r3, r7, #20
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6e:	4b6b      	ldr	r3, [pc, #428]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e72:	4a6a      	ldr	r2, [pc, #424]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e7a:	4b68      	ldr	r3, [pc, #416]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e86:	4b65      	ldr	r3, [pc, #404]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8a:	4a64      	ldr	r2, [pc, #400]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002e8c:	f043 0320 	orr.w	r3, r3, #32
 8002e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e92:	4b62      	ldr	r3, [pc, #392]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	4a5e      	ldr	r2, [pc, #376]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb6:	4b59      	ldr	r3, [pc, #356]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eba:	4a58      	ldr	r2, [pc, #352]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ec2:	4b56      	ldr	r3, [pc, #344]	@ (800301c <MX_GPIO_Init+0x1c4>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LAMP1_Pin|LAMP2_Pin|PUSH_Pin|Vacuum_Pin, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002ed4:	4852      	ldr	r0, [pc, #328]	@ (8003020 <MX_GPIO_Init+0x1c8>)
 8002ed6:	f004 fe91 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2123      	movs	r1, #35	@ 0x23
 8002ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ee2:	f004 fe8b 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULL_GPIO_Port, PULL_Pin, GPIO_PIN_SET);
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	2120      	movs	r1, #32
 8002eea:	484d      	ldr	r0, [pc, #308]	@ (8003020 <MX_GPIO_Init+0x1c8>)
 8002eec:	f004 fe86 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ef6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4619      	mov	r1, r3
 8002f06:	4846      	ldr	r0, [pc, #280]	@ (8003020 <MX_GPIO_Init+0x1c8>)
 8002f08:	f004 fcde 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWJoy_Pin LeadSW1_Pin Floor4_Pin */
  GPIO_InitStruct.Pin = SWJoy_Pin|LeadSW1_Pin|Floor4_Pin;
 8002f0c:	2383      	movs	r3, #131	@ 0x83
 8002f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f14:	2301      	movs	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4840      	ldr	r0, [pc, #256]	@ (8003020 <MX_GPIO_Init+0x1c8>)
 8002f20:	f004 fcd2 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAMP1_Pin LAMP2_Pin PULL_Pin PUSH_Pin
                           Vacuum_Pin */
  GPIO_InitStruct.Pin = LAMP1_Pin|LAMP2_Pin|PULL_Pin|PUSH_Pin
 8002f24:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002f28:	617b      	str	r3, [r7, #20]
                          |Vacuum_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4838      	ldr	r0, [pc, #224]	@ (8003020 <MX_GPIO_Init+0x1c8>)
 8002f3e:	f004 fcc3 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DirectionMotor_Pin AnotherDMotor_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DirectionMotor_Pin|AnotherDMotor_Pin|LD2_Pin;
 8002f42:	2323      	movs	r3, #35	@ 0x23
 8002f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	f107 0314 	add.w	r3, r7, #20
 8002f56:	4619      	mov	r1, r3
 8002f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f5c:	f004 fcb4 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ResetSw_Pin */
  GPIO_InitStruct.Pin = ResetSw_Pin;
 8002f60:	2310      	movs	r3, #16
 8002f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ResetSw_GPIO_Port, &GPIO_InitStruct);
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	4619      	mov	r1, r3
 8002f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f76:	f004 fca7 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeadSW2_Pin Floor1_Pin Floor5_Pin */
  GPIO_InitStruct.Pin = LeadSW2_Pin|Floor1_Pin|Floor5_Pin;
 8002f7a:	f240 4341 	movw	r3, #1089	@ 0x441
 8002f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f84:	2301      	movs	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4825      	ldr	r0, [pc, #148]	@ (8003024 <MX_GPIO_Init+0x1cc>)
 8002f90:	f004 fc9a 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EmergencySw_Pin */
  GPIO_InitStruct.Pin = EmergencySw_Pin;
 8002f94:	2304      	movs	r3, #4
 8002f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EmergencySw_GPIO_Port, &GPIO_InitStruct);
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	481f      	ldr	r0, [pc, #124]	@ (8003024 <MX_GPIO_Init+0x1cc>)
 8002fa8:	f004 fc8e 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Floor2_Pin Floor3_Pin HomeButton_Pin */
  GPIO_InitStruct.Pin = Floor2_Pin|Floor3_Pin|HomeButton_Pin;
 8002fac:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc4:	f004 fc80 	bl	80078c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lowerprox_Pin UpperProx_Pin */
  GPIO_InitStruct.Pin = Lowerprox_Pin|UpperProx_Pin;
 8002fc8:	2330      	movs	r3, #48	@ 0x30
 8002fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fcc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4811      	ldr	r0, [pc, #68]	@ (8003024 <MX_GPIO_Init+0x1cc>)
 8002fde:	f004 fc73 	bl	80078c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	200a      	movs	r0, #10
 8002fe8:	f004 f907 	bl	80071fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002fec:	200a      	movs	r0, #10
 8002fee:	f004 f91e 	bl	800722e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2017      	movs	r0, #23
 8002ff8:	f004 f8ff 	bl	80071fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ffc:	2017      	movs	r0, #23
 8002ffe:	f004 f916 	bl	800722e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	2028      	movs	r0, #40	@ 0x28
 8003008:	f004 f8f7 	bl	80071fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800300c:	2028      	movs	r0, #40	@ 0x28
 800300e:	f004 f90e 	bl	800722e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003012:	bf00      	nop
 8003014:	3728      	adds	r7, #40	@ 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	48000800 	.word	0x48000800
 8003024:	48000400 	.word	0x48000400

08003028 <Joy_Averaged>:

/* USER CODE BEGIN 4 */
void Joy_Averaged()
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++)
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	e017      	b.n	8003064 <Joy_Averaged+0x3c>
	{
		joySum[0] += joyAnalogRead[2*i];
 8003034:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <Joy_Averaged+0x94>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	0052      	lsls	r2, r2, #1
 800303c:	4920      	ldr	r1, [pc, #128]	@ (80030c0 <Joy_Averaged+0x98>)
 800303e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003042:	4413      	add	r3, r2
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <Joy_Averaged+0x94>)
 8003046:	6013      	str	r3, [r2, #0]
		joySum[1] += joyAnalogRead[1+(2*i)];
 8003048:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <Joy_Averaged+0x94>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	0052      	lsls	r2, r2, #1
 8003050:	3201      	adds	r2, #1
 8003052:	491b      	ldr	r1, [pc, #108]	@ (80030c0 <Joy_Averaged+0x98>)
 8003054:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003058:	4413      	add	r3, r2
 800305a:	4a18      	ldr	r2, [pc, #96]	@ (80030bc <Joy_Averaged+0x94>)
 800305c:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 20; i++)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3301      	adds	r3, #1
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b13      	cmp	r3, #19
 8003068:	dde4      	ble.n	8003034 <Joy_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 800306a:	2300      	movs	r3, #0
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	e014      	b.n	800309a <Joy_Averaged+0x72>
	{
		joyAvg[i] = joySum[i] / 20;
 8003070:	4a12      	ldr	r2, [pc, #72]	@ (80030bc <Joy_Averaged+0x94>)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003078:	4a12      	ldr	r2, [pc, #72]	@ (80030c4 <Joy_Averaged+0x9c>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	b299      	uxth	r1, r3
 8003082:	4a11      	ldr	r2, [pc, #68]	@ (80030c8 <Joy_Averaged+0xa0>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		joySum[i] = 0;
 800308a:	4a0c      	ldr	r2, [pc, #48]	@ (80030bc <Joy_Averaged+0x94>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2100      	movs	r1, #0
 8003090:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	dde7      	ble.n	8003070 <Joy_Averaged+0x48>
	}

	joyX = joyAvg[0];
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <Joy_Averaged+0xa0>)
 80030a2:	881a      	ldrh	r2, [r3, #0]
 80030a4:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <Joy_Averaged+0xa4>)
 80030a6:	801a      	strh	r2, [r3, #0]
	joyY = joyAvg[1];
 80030a8:	4b07      	ldr	r3, [pc, #28]	@ (80030c8 <Joy_Averaged+0xa0>)
 80030aa:	885a      	ldrh	r2, [r3, #2]
 80030ac:	4b08      	ldr	r3, [pc, #32]	@ (80030d0 <Joy_Averaged+0xa8>)
 80030ae:	801a      	strh	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	200013cc 	.word	0x200013cc
 80030c0:	20001374 	.word	0x20001374
 80030c4:	cccccccd 	.word	0xcccccccd
 80030c8:	200013c8 	.word	0x200013c8
 80030cc:	200013d4 	.word	0x200013d4
 80030d0:	200013d6 	.word	0x200013d6

080030d4 <Joy_State>:
void Joy_State()
{
 80030d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80030dc:	2101      	movs	r1, #1
 80030de:	48af      	ldr	r0, [pc, #700]	@ (800339c <Joy_State+0x2c8>)
 80030e0:	f004 fd74 	bl	8007bcc <HAL_GPIO_ReadPin>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4aae      	ldr	r2, [pc, #696]	@ (80033a0 <Joy_State+0x2cc>)
 80030e8:	7013      	strb	r3, [r2, #0]
if(state == 0)
 80030ea:	4bae      	ldr	r3, [pc, #696]	@ (80033a4 <Joy_State+0x2d0>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d14a      	bne.n	8003188 <Joy_State+0xb4>
	if (joyY > 3000)
	{
//		__HAL_TIM_SET_COUNTER(&htim3, 0);
	}
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 80030f2:	f002 fb23 	bl	800573c <HAL_GetTick>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2200      	movs	r2, #0
 80030fa:	469a      	mov	sl, r3
 80030fc:	4693      	mov	fp, r2
 80030fe:	4baa      	ldr	r3, [pc, #680]	@ (80033a8 <Joy_State+0x2d4>)
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	4552      	cmp	r2, sl
 8003106:	eb73 030b 	sbcs.w	r3, r3, fp
 800310a:	f080 8105 	bcs.w	8003318 <Joy_State+0x244>
	{
		if(joyX > 3000)
 800310e:	4ba7      	ldr	r3, [pc, #668]	@ (80033ac <Joy_State+0x2d8>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003116:	4293      	cmp	r3, r2
 8003118:	d909      	bls.n	800312e <Joy_State+0x5a>
		{
			X_Actual_Position = X_Actual_Position-5;
 800311a:	4ba5      	ldr	r3, [pc, #660]	@ (80033b0 <Joy_State+0x2dc>)
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003128:	4ba1      	ldr	r3, [pc, #644]	@ (80033b0 <Joy_State+0x2dc>)
 800312a:	edc3 7a00 	vstr	s15, [r3]
		}
		if(joyX < 1600)
 800312e:	4b9f      	ldr	r3, [pc, #636]	@ (80033ac <Joy_State+0x2d8>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003136:	d209      	bcs.n	800314c <Joy_State+0x78>
		{
			X_Actual_Position = X_Actual_Position+5;
 8003138:	4b9d      	ldr	r3, [pc, #628]	@ (80033b0 <Joy_State+0x2dc>)
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003146:	4b9a      	ldr	r3, [pc, #616]	@ (80033b0 <Joy_State+0x2dc>)
 8003148:	edc3 7a00 	vstr	s15, [r3]
		}
		if(X_Actual_Position <= 0)X_Actual_Position=0;
 800314c:	4b98      	ldr	r3, [pc, #608]	@ (80033b0 <Joy_State+0x2dc>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315a:	d803      	bhi.n	8003164 <Joy_State+0x90>
 800315c:	4b94      	ldr	r3, [pc, #592]	@ (80033b0 <Joy_State+0x2dc>)
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+200;
 8003164:	f002 faea 	bl	800573c <HAL_GetTick>
 8003168:	4603      	mov	r3, r0
 800316a:	33c8      	adds	r3, #200	@ 0xc8
 800316c:	2200      	movs	r2, #0
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	617a      	str	r2, [r7, #20]
 8003172:	4b8d      	ldr	r3, [pc, #564]	@ (80033a8 <Joy_State+0x2d4>)
 8003174:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003178:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800317c:	2120      	movs	r1, #32
 800317e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003182:	f004 fd53 	bl	8007c2c <HAL_GPIO_TogglePin>
 8003186:	e0c7      	b.n	8003318 <Joy_State+0x244>
	}
}

else if(state == 1)
 8003188:	4b86      	ldr	r3, [pc, #536]	@ (80033a4 <Joy_State+0x2d0>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d16e      	bne.n	800326e <Joy_State+0x19a>
{
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 8003190:	f002 fad4 	bl	800573c <HAL_GetTick>
 8003194:	4603      	mov	r3, r0
 8003196:	2200      	movs	r2, #0
 8003198:	4698      	mov	r8, r3
 800319a:	4691      	mov	r9, r2
 800319c:	4b85      	ldr	r3, [pc, #532]	@ (80033b4 <Joy_State+0x2e0>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	4542      	cmp	r2, r8
 80031a4:	eb73 0309 	sbcs.w	r3, r3, r9
 80031a8:	d22c      	bcs.n	8003204 <Joy_State+0x130>
	{
		if(joyX > 3000)
 80031aa:	4b80      	ldr	r3, [pc, #512]	@ (80033ac <Joy_State+0x2d8>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d904      	bls.n	80031c0 <Joy_State+0xec>
		{
			A = A-250;
 80031b6:	4b80      	ldr	r3, [pc, #512]	@ (80033b8 <Joy_State+0x2e4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3bfa      	subs	r3, #250	@ 0xfa
 80031bc:	4a7e      	ldr	r2, [pc, #504]	@ (80033b8 <Joy_State+0x2e4>)
 80031be:	6013      	str	r3, [r2, #0]
		}
		if(joyX < 1600)
 80031c0:	4b7a      	ldr	r3, [pc, #488]	@ (80033ac <Joy_State+0x2d8>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80031c8:	d204      	bcs.n	80031d4 <Joy_State+0x100>
		{
			A = A+250;
 80031ca:	4b7b      	ldr	r3, [pc, #492]	@ (80033b8 <Joy_State+0x2e4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	33fa      	adds	r3, #250	@ 0xfa
 80031d0:	4a79      	ldr	r2, [pc, #484]	@ (80033b8 <Joy_State+0x2e4>)
 80031d2:	6013      	str	r3, [r2, #0]
		}
		if(A <= 0)A=0;
 80031d4:	4b78      	ldr	r3, [pc, #480]	@ (80033b8 <Joy_State+0x2e4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	dc02      	bgt.n	80031e2 <Joy_State+0x10e>
 80031dc:	4b76      	ldr	r3, [pc, #472]	@ (80033b8 <Joy_State+0x2e4>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 80031e2:	f002 faab 	bl	800573c <HAL_GetTick>
 80031e6:	4603      	mov	r3, r0
 80031e8:	3364      	adds	r3, #100	@ 0x64
 80031ea:	2200      	movs	r2, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	60fa      	str	r2, [r7, #12]
 80031f0:	4b70      	ldr	r3, [pc, #448]	@ (80033b4 <Joy_State+0x2e0>)
 80031f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80031f6:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80031fa:	2120      	movs	r1, #32
 80031fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003200:	f004 fd14 	bl	8007c2c <HAL_GPIO_TogglePin>
	}
	if(joyY > 3000 || joyY < 1600)
 8003204:	4b6d      	ldr	r3, [pc, #436]	@ (80033bc <Joy_State+0x2e8>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800320c:	4293      	cmp	r3, r2
 800320e:	d804      	bhi.n	800321a <Joy_State+0x146>
 8003210:	4b6a      	ldr	r3, [pc, #424]	@ (80033bc <Joy_State+0x2e8>)
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003218:	d21d      	bcs.n	8003256 <Joy_State+0x182>
	{
		if (joyY > 3000)
 800321a:	4b68      	ldr	r3, [pc, #416]	@ (80033bc <Joy_State+0x2e8>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003222:	4293      	cmp	r3, r2
 8003224:	d90b      	bls.n	800323e <Joy_State+0x16a>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8003226:	2201      	movs	r2, #1
 8003228:	2101      	movs	r1, #1
 800322a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800322e:	f004 fce5 	bl	8007bfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 8003232:	4b61      	ldr	r3, [pc, #388]	@ (80033b8 <Joy_State+0x2e4>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b62      	ldr	r3, [pc, #392]	@ (80033c0 <Joy_State+0x2ec>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 800323c:	e06c      	b.n	8003318 <Joy_State+0x244>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2101      	movs	r1, #1
 8003242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003246:	f004 fcd9 	bl	8007bfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 800324a:	4b5b      	ldr	r3, [pc, #364]	@ (80033b8 <Joy_State+0x2e4>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b5c      	ldr	r3, [pc, #368]	@ (80033c0 <Joy_State+0x2ec>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 8003254:	e060      	b.n	8003318 <Joy_State+0x244>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	2101      	movs	r1, #1
 800325a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800325e:	f004 fccd 	bl	8007bfc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
 8003262:	4b57      	ldr	r3, [pc, #348]	@ (80033c0 <Joy_State+0x2ec>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800326a:	635a      	str	r2, [r3, #52]	@ 0x34
 800326c:	e054      	b.n	8003318 <Joy_State+0x244>
	}
}

else if(state == 2)
 800326e:	4b4d      	ldr	r3, [pc, #308]	@ (80033a4 <Joy_State+0x2d0>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d145      	bne.n	8003302 <Joy_State+0x22e>
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 8003276:	2201      	movs	r2, #1
 8003278:	2120      	movs	r1, #32
 800327a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800327e:	f004 fcbd 	bl	8007bfc <HAL_GPIO_WritePin>
	if(joyY > 3000 || joyY < 1600)
 8003282:	4b4e      	ldr	r3, [pc, #312]	@ (80033bc <Joy_State+0x2e8>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800328a:	4293      	cmp	r3, r2
 800328c:	d804      	bhi.n	8003298 <Joy_State+0x1c4>
 800328e:	4b4b      	ldr	r3, [pc, #300]	@ (80033bc <Joy_State+0x2e8>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003296:	d225      	bcs.n	80032e4 <Joy_State+0x210>
	{
		if (joyY > 3000)
 8003298:	4b48      	ldr	r3, [pc, #288]	@ (80033bc <Joy_State+0x2e8>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d90f      	bls.n	80032c4 <Joy_State+0x1f0>
		{
			A = 10625;
 80032a4:	4b44      	ldr	r3, [pc, #272]	@ (80033b8 <Joy_State+0x2e4>)
 80032a6:	f642 1281 	movw	r2, #10625	@ 0x2981
 80032aa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80032ac:	2201      	movs	r2, #1
 80032ae:	2101      	movs	r1, #1
 80032b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032b4:	f004 fca2 	bl	8007bfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 80032b8:	4b41      	ldr	r3, [pc, #260]	@ (80033c0 <Joy_State+0x2ec>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f642 020a 	movw	r2, #10250	@ 0x280a
 80032c0:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 80032c2:	e029      	b.n	8003318 <Joy_State+0x244>
		}
		else
		{
			A = -10625;
 80032c4:	4b3c      	ldr	r3, [pc, #240]	@ (80033b8 <Joy_State+0x2e4>)
 80032c6:	f46f 5226 	mvn.w	r2, #10624	@ 0x2980
 80032ca:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2101      	movs	r1, #1
 80032d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032d4:	f004 fc92 	bl	8007bfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 80032d8:	4b39      	ldr	r3, [pc, #228]	@ (80033c0 <Joy_State+0x2ec>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f642 020a 	movw	r2, #10250	@ 0x280a
 80032e0:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3000)
 80032e2:	e019      	b.n	8003318 <Joy_State+0x244>
		}
	}
	else
	{
		A = 0;
 80032e4:	4b34      	ldr	r3, [pc, #208]	@ (80033b8 <Joy_State+0x2e4>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2101      	movs	r1, #1
 80032ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032f2:	f004 fc83 	bl	8007bfc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 80032f6:	4b32      	ldr	r3, [pc, #200]	@ (80033c0 <Joy_State+0x2ec>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80032fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8003300:	e00a      	b.n	8003318 <Joy_State+0x244>
//	}
//	PIDposition2();
//}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2101      	movs	r1, #1
 8003306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800330a:	f004 fc77 	bl	8007bfc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 800330e:	4b2c      	ldr	r3, [pc, #176]	@ (80033c0 <Joy_State+0x2ec>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003316:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	static uint64_t timestamp2 =0;
	if(timestamp2 < HAL_GetTick())
 8003318:	f002 fa10 	bl	800573c <HAL_GetTick>
 800331c:	4603      	mov	r3, r0
 800331e:	2200      	movs	r2, #0
 8003320:	461c      	mov	r4, r3
 8003322:	4615      	mov	r5, r2
 8003324:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <Joy_State+0x2f0>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	42a2      	cmp	r2, r4
 800332c:	41ab      	sbcs	r3, r5
 800332e:	d279      	bcs.n	8003424 <Joy_State+0x350>
	{
		if (joySW == 0)
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <Joy_State+0x2cc>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d169      	bne.n	800340c <Joy_State+0x338>
		{
			switch (state)
 8003338:	4b1a      	ldr	r3, [pc, #104]	@ (80033a4 <Joy_State+0x2d0>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d865      	bhi.n	800340c <Joy_State+0x338>
 8003340:	a201      	add	r2, pc, #4	@ (adr r2, 8003348 <Joy_State+0x274>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	08003359 	.word	0x08003359
 800334c:	0800337b 	.word	0x0800337b
 8003350:	080033c9 	.word	0x080033c9
 8003354:	080033eb 	.word	0x080033eb
			{
			case 0:
				state = 1;
 8003358:	4b12      	ldr	r3, [pc, #72]	@ (80033a4 <Joy_State+0x2d0>)
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 800335e:	e007      	b.n	8003370 <Joy_State+0x29c>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8003360:	2101      	movs	r1, #1
 8003362:	480e      	ldr	r0, [pc, #56]	@ (800339c <Joy_State+0x2c8>)
 8003364:	f004 fc32 	bl	8007bcc <HAL_GPIO_ReadPin>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <Joy_State+0x2cc>)
 800336e:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <Joy_State+0x2cc>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f3      	beq.n	8003360 <Joy_State+0x28c>
				}
				break;
 8003378:	e048      	b.n	800340c <Joy_State+0x338>
			case 1:
				state = 2;
 800337a:	4b0a      	ldr	r3, [pc, #40]	@ (80033a4 <Joy_State+0x2d0>)
 800337c:	2202      	movs	r2, #2
 800337e:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8003380:	e007      	b.n	8003392 <Joy_State+0x2be>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8003382:	2101      	movs	r1, #1
 8003384:	4805      	ldr	r0, [pc, #20]	@ (800339c <Joy_State+0x2c8>)
 8003386:	f004 fc21 	bl	8007bcc <HAL_GPIO_ReadPin>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <Joy_State+0x2cc>)
 8003390:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8003392:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <Joy_State+0x2cc>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f3      	beq.n	8003382 <Joy_State+0x2ae>
				}
				break;
 800339a:	e037      	b.n	800340c <Joy_State+0x338>
 800339c:	48000800 	.word	0x48000800
 80033a0:	200013c4 	.word	0x200013c4
 80033a4:	200013c5 	.word	0x200013c5
 80033a8:	20001460 	.word	0x20001460
 80033ac:	200013d4 	.word	0x200013d4
 80033b0:	200011d8 	.word	0x200011d8
 80033b4:	20001468 	.word	0x20001468
 80033b8:	20000244 	.word	0x20000244
 80033bc:	200013d6 	.word	0x200013d6
 80033c0:	200005e8 	.word	0x200005e8
 80033c4:	20001470 	.word	0x20001470
			case 2:
				state = 3;
 80033c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <Joy_State+0x360>)
 80033ca:	2203      	movs	r2, #3
 80033cc:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80033ce:	e007      	b.n	80033e0 <Joy_State+0x30c>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80033d0:	2101      	movs	r1, #1
 80033d2:	4819      	ldr	r0, [pc, #100]	@ (8003438 <Joy_State+0x364>)
 80033d4:	f004 fbfa 	bl	8007bcc <HAL_GPIO_ReadPin>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	4b17      	ldr	r3, [pc, #92]	@ (800343c <Joy_State+0x368>)
 80033de:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80033e0:	4b16      	ldr	r3, [pc, #88]	@ (800343c <Joy_State+0x368>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f3      	beq.n	80033d0 <Joy_State+0x2fc>
				}
				break;
 80033e8:	e010      	b.n	800340c <Joy_State+0x338>
			case 3:
				state = 0;
 80033ea:	4b12      	ldr	r3, [pc, #72]	@ (8003434 <Joy_State+0x360>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80033f0:	e007      	b.n	8003402 <Joy_State+0x32e>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80033f2:	2101      	movs	r1, #1
 80033f4:	4810      	ldr	r0, [pc, #64]	@ (8003438 <Joy_State+0x364>)
 80033f6:	f004 fbe9 	bl	8007bcc <HAL_GPIO_ReadPin>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b0f      	ldr	r3, [pc, #60]	@ (800343c <Joy_State+0x368>)
 8003400:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8003402:	4b0e      	ldr	r3, [pc, #56]	@ (800343c <Joy_State+0x368>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f3      	beq.n	80033f2 <Joy_State+0x31e>
				}
				break;
 800340a:	bf00      	nop
			}
		}
		timestamp2 = HAL_GetTick() + 100;
 800340c:	f002 f996 	bl	800573c <HAL_GetTick>
 8003410:	4603      	mov	r3, r0
 8003412:	3364      	adds	r3, #100	@ 0x64
 8003414:	2200      	movs	r2, #0
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <Joy_State+0x36c>)
 800341c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003420:	e9c3 1200 	strd	r1, r2, [r3]
	}
	Joy_Averaged();
 8003424:	f7ff fe00 	bl	8003028 <Joy_Averaged>
}
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003432:	bf00      	nop
 8003434:	200013c5 	.word	0x200013c5
 8003438:	48000800 	.word	0x48000800
 800343c:	200013c4 	.word	0x200013c4
 8003440:	20001470 	.word	0x20001470

08003444 <ButtonMem>:
void ButtonMem(){
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
	if(Mode == 1)
 8003448:	4b62      	ldr	r3, [pc, #392]	@ (80035d4 <ButtonMem+0x190>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	f040 8087 	bne.w	8003560 <ButtonMem+0x11c>
		{
			if(ButtonTest[1] == 0)
 8003452:	4b61      	ldr	r3, [pc, #388]	@ (80035d8 <ButtonMem+0x194>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d112      	bne.n	8003480 <ButtonMem+0x3c>
			{
				registerFrame[0x23].U16 = Pos*10;
 800345a:	4b60      	ldr	r3, [pc, #384]	@ (80035dc <ButtonMem+0x198>)
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800346c:	ee17 3a90 	vmov	r3, s15
 8003470:	b29a      	uxth	r2, r3
 8003472:	4b5b      	ldr	r3, [pc, #364]	@ (80035e0 <ButtonMem+0x19c>)
 8003474:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				MemPos[0] = Pos;
 8003478:	4b58      	ldr	r3, [pc, #352]	@ (80035dc <ButtonMem+0x198>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a59      	ldr	r2, [pc, #356]	@ (80035e4 <ButtonMem+0x1a0>)
 800347e:	6013      	str	r3, [r2, #0]
			}
			if(ButtonTest[2] == 0)
 8003480:	4b55      	ldr	r3, [pc, #340]	@ (80035d8 <ButtonMem+0x194>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d112      	bne.n	80034ae <ButtonMem+0x6a>
			{
				registerFrame[0x24].U16 = Pos*10;
 8003488:	4b54      	ldr	r3, [pc, #336]	@ (80035dc <ButtonMem+0x198>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800349a:	ee17 3a90 	vmov	r3, s15
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b4f      	ldr	r3, [pc, #316]	@ (80035e0 <ButtonMem+0x19c>)
 80034a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
				MemPos[1] = Pos;
 80034a6:	4b4d      	ldr	r3, [pc, #308]	@ (80035dc <ButtonMem+0x198>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a4e      	ldr	r2, [pc, #312]	@ (80035e4 <ButtonMem+0x1a0>)
 80034ac:	6053      	str	r3, [r2, #4]
			}
			if(ButtonTest[3] == 0)
 80034ae:	4b4a      	ldr	r3, [pc, #296]	@ (80035d8 <ButtonMem+0x194>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d112      	bne.n	80034dc <ButtonMem+0x98>
			{
				registerFrame[0x25].U16 = Pos*10;
 80034b6:	4b49      	ldr	r3, [pc, #292]	@ (80035dc <ButtonMem+0x198>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80034c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c8:	ee17 3a90 	vmov	r3, s15
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	4b44      	ldr	r3, [pc, #272]	@ (80035e0 <ButtonMem+0x19c>)
 80034d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
				MemPos[2] = Pos;
 80034d4:	4b41      	ldr	r3, [pc, #260]	@ (80035dc <ButtonMem+0x198>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a42      	ldr	r2, [pc, #264]	@ (80035e4 <ButtonMem+0x1a0>)
 80034da:	6093      	str	r3, [r2, #8]
			}
			if(ButtonTest[4] == 0)
 80034dc:	4b3e      	ldr	r3, [pc, #248]	@ (80035d8 <ButtonMem+0x194>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d112      	bne.n	800350a <ButtonMem+0xc6>
			{
				registerFrame[0x26].U16 = Pos*10;
 80034e4:	4b3d      	ldr	r3, [pc, #244]	@ (80035dc <ButtonMem+0x198>)
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80034ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f6:	ee17 3a90 	vmov	r3, s15
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	4b38      	ldr	r3, [pc, #224]	@ (80035e0 <ButtonMem+0x19c>)
 80034fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
				MemPos[3] = Pos;
 8003502:	4b36      	ldr	r3, [pc, #216]	@ (80035dc <ButtonMem+0x198>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a37      	ldr	r2, [pc, #220]	@ (80035e4 <ButtonMem+0x1a0>)
 8003508:	60d3      	str	r3, [r2, #12]
			}
			if(ButtonTest[5] == 0)
 800350a:	4b33      	ldr	r3, [pc, #204]	@ (80035d8 <ButtonMem+0x194>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d112      	bne.n	8003538 <ButtonMem+0xf4>
			{
				registerFrame[0x27].U16 = Pos*10;
 8003512:	4b32      	ldr	r3, [pc, #200]	@ (80035dc <ButtonMem+0x198>)
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800351c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003524:	ee17 3a90 	vmov	r3, s15
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b2d      	ldr	r3, [pc, #180]	@ (80035e0 <ButtonMem+0x19c>)
 800352c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
				MemPos[4] = Pos;
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <ButtonMem+0x198>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2b      	ldr	r2, [pc, #172]	@ (80035e4 <ButtonMem+0x1a0>)
 8003536:	6113      	str	r3, [r2, #16]
			}
			if(ButtonTest[0] == 0)//HOME Button
 8003538:	4b27      	ldr	r3, [pc, #156]	@ (80035d8 <ButtonMem+0x194>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d147      	bne.n	80035d0 <ButtonMem+0x18c>
			{
				registerFrame[0x10].U16 = 0b0000;
 8003540:	4b27      	ldr	r3, [pc, #156]	@ (80035e0 <ButtonMem+0x19c>)
 8003542:	2200      	movs	r2, #0
 8003544:	841a      	strh	r2, [r3, #32]
				resetHome();
 8003546:	f000 f8a9 	bl	800369c <resetHome>
				Pos_Target = 0;
 800354a:	4b27      	ldr	r3, [pc, #156]	@ (80035e8 <ButtonMem+0x1a4>)
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
				Mode = 0;
 8003552:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <ButtonMem+0x190>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
				state_ALL = 0;
 8003558:	4b24      	ldr	r3, [pc, #144]	@ (80035ec <ButtonMem+0x1a8>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
				Mode = 0;
				Pos_Target = 0;
				resetHome();
			}
		}
}
 800355e:	e037      	b.n	80035d0 <ButtonMem+0x18c>
			if(ButtonTest[1] == 0)
 8003560:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <ButtonMem+0x194>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <ButtonMem+0x12c>
				MemPos[0] = Pos;
 8003568:	4b1c      	ldr	r3, [pc, #112]	@ (80035dc <ButtonMem+0x198>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <ButtonMem+0x1a0>)
 800356e:	6013      	str	r3, [r2, #0]
			if(ButtonTest[2] == 0)
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <ButtonMem+0x194>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <ButtonMem+0x13c>
				MemPos[1] = Pos;
 8003578:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <ButtonMem+0x198>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <ButtonMem+0x1a0>)
 800357e:	6053      	str	r3, [r2, #4]
			if(ButtonTest[3] == 0)
 8003580:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <ButtonMem+0x194>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <ButtonMem+0x14c>
				MemPos[2] = Pos;
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <ButtonMem+0x198>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a15      	ldr	r2, [pc, #84]	@ (80035e4 <ButtonMem+0x1a0>)
 800358e:	6093      	str	r3, [r2, #8]
			if(ButtonTest[4] == 0)
 8003590:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <ButtonMem+0x194>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d103      	bne.n	80035a0 <ButtonMem+0x15c>
				MemPos[3] = Pos;
 8003598:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <ButtonMem+0x198>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a11      	ldr	r2, [pc, #68]	@ (80035e4 <ButtonMem+0x1a0>)
 800359e:	60d3      	str	r3, [r2, #12]
			if(ButtonTest[5] == 0)
 80035a0:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <ButtonMem+0x194>)
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <ButtonMem+0x16c>
				MemPos[4] = Pos;
 80035a8:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <ButtonMem+0x198>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0d      	ldr	r2, [pc, #52]	@ (80035e4 <ButtonMem+0x1a0>)
 80035ae:	6113      	str	r3, [r2, #16]
			if(ButtonTest[0] == 0)//HOME Button
 80035b0:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <ButtonMem+0x194>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <ButtonMem+0x18c>
				state_ALL = 0;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <ButtonMem+0x1a8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
				Mode = 0;
 80035be:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <ButtonMem+0x190>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
				Pos_Target = 0;
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <ButtonMem+0x1a4>)
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
				resetHome();
 80035cc:	f000 f866 	bl	800369c <resetHome>
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200011dc 	.word	0x200011dc
 80035d8:	2000123c 	.word	0x2000123c
 80035dc:	200013f8 	.word	0x200013f8
 80035e0:	20001048 	.word	0x20001048
 80035e4:	2000126c 	.word	0x2000126c
 80035e8:	20001354 	.word	0x20001354
 80035ec:	20000248 	.word	0x20000248

080035f0 <reset>:

void reset(){
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 80035f4:	4b22      	ldr	r3, [pc, #136]	@ (8003680 <reset+0x90>)
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 80035fc:	4b20      	ldr	r3, [pc, #128]	@ (8003680 <reset+0x90>)
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8003604:	4b1e      	ldr	r3, [pc, #120]	@ (8003680 <reset+0x90>)
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 800360c:	4b1c      	ldr	r3, [pc, #112]	@ (8003680 <reset+0x90>)
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8003614:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <reset+0x90>)
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 800361c:	4b18      	ldr	r3, [pc, #96]	@ (8003680 <reset+0x90>)
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8003624:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <reset+0x94>)
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 800362c:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <reset+0x94>)
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8003634:	4b13      	ldr	r3, [pc, #76]	@ (8003684 <reset+0x94>)
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 800363c:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <reset+0x94>)
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8003644:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <reset+0x94>)
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 800364c:	4b0d      	ldr	r3, [pc, #52]	@ (8003684 <reset+0x94>)
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
	PWMmap = 0;
 8003654:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <reset+0x98>)
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
	Pos_Start = Pos;
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <reset+0x9c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0b      	ldr	r2, [pc, #44]	@ (8003690 <reset+0xa0>)
 8003662:	6013      	str	r3, [r2, #0]
	Velo_Start = 0;
 8003664:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <reset+0xa4>)
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
	t = 0;
 800366c:	4b0a      	ldr	r3, [pc, #40]	@ (8003698 <reset+0xa8>)
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	200012b0 	.word	0x200012b0
 8003684:	200012d8 	.word	0x200012d8
 8003688:	20001214 	.word	0x20001214
 800368c:	200013f8 	.word	0x200013f8
 8003690:	20001350 	.word	0x20001350
 8003694:	2000135c 	.word	0x2000135c
 8003698:	2000136c 	.word	0x2000136c

0800369c <resetHome>:
void resetHome(){
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 80036a0:	4b38      	ldr	r3, [pc, #224]	@ (8003784 <resetHome+0xe8>)
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 80036a8:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <resetHome+0xe8>)
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 80036b0:	4b34      	ldr	r3, [pc, #208]	@ (8003784 <resetHome+0xe8>)
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 80036b8:	4b32      	ldr	r3, [pc, #200]	@ (8003784 <resetHome+0xe8>)
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 80036c0:	4b30      	ldr	r3, [pc, #192]	@ (8003784 <resetHome+0xe8>)
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 80036c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003784 <resetHome+0xe8>)
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 80036d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003788 <resetHome+0xec>)
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 80036d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <resetHome+0xec>)
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 80036e0:	4b29      	ldr	r3, [pc, #164]	@ (8003788 <resetHome+0xec>)
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 80036e8:	4b27      	ldr	r3, [pc, #156]	@ (8003788 <resetHome+0xec>)
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 80036f0:	4b25      	ldr	r3, [pc, #148]	@ (8003788 <resetHome+0xec>)
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 80036f8:	4b23      	ldr	r3, [pc, #140]	@ (8003788 <resetHome+0xec>)
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
	Velocontrol.Error[NEW] = 0;
 8003700:	4b20      	ldr	r3, [pc, #128]	@ (8003784 <resetHome+0xe8>)
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	60da      	str	r2, [r3, #12]

	Velocontrol2.Error[OLD] = 0;
 8003708:	4b20      	ldr	r3, [pc, #128]	@ (800378c <resetHome+0xf0>)
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	611a      	str	r2, [r3, #16]
	Velocontrol2.Error[OLDER] = 0;
 8003710:	4b1e      	ldr	r3, [pc, #120]	@ (800378c <resetHome+0xf0>)
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	615a      	str	r2, [r3, #20]
	Velocontrol2.Output[NEW] = 0;
 8003718:	4b1c      	ldr	r3, [pc, #112]	@ (800378c <resetHome+0xf0>)
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
	Velocontrol2.Output[OLD] = 0;
 8003720:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <resetHome+0xf0>)
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
	Velocontrol2.Output[OLDER] = 0;
 8003728:	4b18      	ldr	r3, [pc, #96]	@ (800378c <resetHome+0xf0>)
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	609a      	str	r2, [r3, #8]

	Poscontrol2.Error[NEW] = 0;
 8003730:	4b17      	ldr	r3, [pc, #92]	@ (8003790 <resetHome+0xf4>)
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	60da      	str	r2, [r3, #12]
	Poscontrol2.Error[OLD] = 0;
 8003738:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <resetHome+0xf4>)
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	611a      	str	r2, [r3, #16]
	Poscontrol2.Error[OLDER] = 0;
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <resetHome+0xf4>)
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	615a      	str	r2, [r3, #20]
	Poscontrol2.Output[NEW] = 0;
 8003748:	4b11      	ldr	r3, [pc, #68]	@ (8003790 <resetHome+0xf4>)
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
	Poscontrol2.Output[OLD] = 0;
 8003750:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <resetHome+0xf4>)
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	605a      	str	r2, [r3, #4]
	Poscontrol2.Output[OLDER] = 0;
 8003758:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <resetHome+0xf4>)
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
	Pos_Start = 0;
 8003760:	4b0c      	ldr	r3, [pc, #48]	@ (8003794 <resetHome+0xf8>)
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
	Velo_Start = 0;
 8003768:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <resetHome+0xfc>)
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
	t = 0;
 8003770:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <resetHome+0x100>)
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	200012b0 	.word	0x200012b0
 8003788:	200012d8 	.word	0x200012d8
 800378c:	20001300 	.word	0x20001300
 8003790:	20001328 	.word	0x20001328
 8003794:	20001350 	.word	0x20001350
 8003798:	2000135c 	.word	0x2000135c
 800379c:	2000136c 	.word	0x2000136c

080037a0 <PIDreset>:
void PIDreset(){
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 80037a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003810 <PIDreset+0x70>)
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 80037ac:	4b18      	ldr	r3, [pc, #96]	@ (8003810 <PIDreset+0x70>)
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 80037b4:	4b16      	ldr	r3, [pc, #88]	@ (8003810 <PIDreset+0x70>)
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 80037bc:	4b14      	ldr	r3, [pc, #80]	@ (8003810 <PIDreset+0x70>)
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 80037c4:	4b12      	ldr	r3, [pc, #72]	@ (8003810 <PIDreset+0x70>)
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 80037cc:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <PIDreset+0x70>)
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <PIDreset+0x74>)
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 80037dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <PIDreset+0x74>)
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 80037e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <PIDreset+0x74>)
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <PIDreset+0x74>)
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 80037f4:	4b07      	ldr	r3, [pc, #28]	@ (8003814 <PIDreset+0x74>)
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 80037fc:	4b05      	ldr	r3, [pc, #20]	@ (8003814 <PIDreset+0x74>)
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	200012b0 	.word	0x200012b0
 8003814:	200012d8 	.word	0x200012d8

08003818 <QEIEncoderPos_Update>:
void QEIEncoderPos_Update()
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 800381c:	4b2e      	ldr	r3, [pc, #184]	@ (80038d8 <QEIEncoderPos_Update+0xc0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	461a      	mov	r2, r3
 8003824:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <QEIEncoderPos_Update+0xc4>)
 8003826:	601a      	str	r2, [r3, #0]
//	Pos = ((QEIReadRaw)*25*3.14)/8192;
	if(Count >= 0)
 8003828:	4b2d      	ldr	r3, [pc, #180]	@ (80038e0 <QEIEncoderPos_Update+0xc8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	db21      	blt.n	8003874 <QEIEncoderPos_Update+0x5c>
	{
//		Pos = ((QEIReadRaw+(Count*57344))*25*3.14)/8192;
		Pos = ((QEIReadRaw)*25*3.14)/8192;
 8003830:	4b2a      	ldr	r3, [pc, #168]	@ (80038dc <QEIEncoderPos_Update+0xc4>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009a      	lsls	r2, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f7fc fe3c 	bl	80004bc <__aeabi_i2d>
 8003844:	a322      	add	r3, pc, #136	@ (adr r3, 80038d0 <QEIEncoderPos_Update+0xb8>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f7fc fea1 	bl	8000590 <__aeabi_dmul>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	4b22      	ldr	r3, [pc, #136]	@ (80038e4 <QEIEncoderPos_Update+0xcc>)
 800385c:	f7fc ffc2 	bl	80007e4 <__aeabi_ddiv>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f7fd f94c 	bl	8000b04 <__aeabi_d2f>
 800386c:	4603      	mov	r3, r0
 800386e:	4a1e      	ldr	r2, [pc, #120]	@ (80038e8 <QEIEncoderPos_Update+0xd0>)
 8003870:	6013      	str	r3, [r2, #0]
	else
	{
//		Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
		Pos	= -(((65535-QEIReadRaw)*25*3.14)/8192);
	}
}
 8003872:	e028      	b.n	80038c6 <QEIEncoderPos_Update+0xae>
		Pos	= -(((65535-QEIReadRaw)*25*3.14)/8192);
 8003874:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <QEIEncoderPos_Update+0xc4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f5c3 427f 	rsb	r2, r3, #65280	@ 0xff00
 800387c:	32ff      	adds	r2, #255	@ 0xff
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fe17 	bl	80004bc <__aeabi_i2d>
 800388e:	a310      	add	r3, pc, #64	@ (adr r3, 80038d0 <QEIEncoderPos_Update+0xb8>)
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f7fc fe7c 	bl	8000590 <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <QEIEncoderPos_Update+0xcc>)
 80038a6:	f7fc ff9d 	bl	80007e4 <__aeabi_ddiv>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4610      	mov	r0, r2
 80038b0:	4619      	mov	r1, r3
 80038b2:	f7fd f927 	bl	8000b04 <__aeabi_d2f>
 80038b6:	4603      	mov	r3, r0
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eef1 7a67 	vneg.f32	s15, s15
 80038c0:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <QEIEncoderPos_Update+0xd0>)
 80038c2:	edc3 7a00 	vstr	s15, [r3]
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w
 80038d0:	51eb851f 	.word	0x51eb851f
 80038d4:	40091eb8 	.word	0x40091eb8
 80038d8:	2000051c 	.word	0x2000051c
 80038dc:	20001404 	.word	0x20001404
 80038e0:	20001400 	.word	0x20001400
 80038e4:	40c00000 	.word	0x40c00000
 80038e8:	200013f8 	.word	0x200013f8
 80038ec:	00000000 	.word	0x00000000

080038f0 <QEIEncoderVel_Update>:
void QEIEncoderVel_Update()
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 80038f8:	f001 fb28 	bl	8004f4c <micros>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	49bf      	ldr	r1, [pc, #764]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 8003902:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8003906:	4bbf      	ldr	r3, [pc, #764]	@ (8003c04 <QEIEncoderVel_Update+0x314>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	4abc      	ldr	r2, [pc, #752]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 800390e:	6013      	str	r3, [r2, #0]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8003910:	4bbb      	ldr	r3, [pc, #748]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003918:	ee07 3a90 	vmov	s15, r3
 800391c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003920:	4bb7      	ldr	r3, [pc, #732]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 8003922:	edc3 7a06 	vstr	s15, [r3, #24]
//calculate dx
int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8003926:	4bb6      	ldr	r3, [pc, #728]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4bb5      	ldr	r3, [pc, #724]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	607b      	str	r3, [r7, #4]
//Handle Warp around
if(diffPosition > 28672)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003938:	dd08      	ble.n	800394c <QEIEncoderVel_Update+0x5c>
{
diffPosition -=57344;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f5a3 4360 	sub.w	r3, r3, #57344	@ 0xe000
 8003940:	607b      	str	r3, [r7, #4]
Count-=1;
 8003942:	4bb1      	ldr	r3, [pc, #708]	@ (8003c08 <QEIEncoderVel_Update+0x318>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3b01      	subs	r3, #1
 8003948:	4aaf      	ldr	r2, [pc, #700]	@ (8003c08 <QEIEncoderVel_Update+0x318>)
 800394a:	6013      	str	r3, [r2, #0]
}
if(diffPosition < -28672)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f513 4fe0 	cmn.w	r3, #28672	@ 0x7000
 8003952:	da08      	bge.n	8003966 <QEIEncoderVel_Update+0x76>
{
diffPosition +=57344;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800395a:	607b      	str	r3, [r7, #4]
Count+=1;
 800395c:	4baa      	ldr	r3, [pc, #680]	@ (8003c08 <QEIEncoderVel_Update+0x318>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	4aa9      	ldr	r2, [pc, #676]	@ (8003c08 <QEIEncoderVel_Update+0x318>)
 8003964:	6013      	str	r3, [r2, #0]
}
//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8003966:	4ba6      	ldr	r3, [pc, #664]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 8003968:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800396c:	4ba4      	ldr	r3, [pc, #656]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 800396e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003972:	ebb0 0802 	subs.w	r8, r0, r2
 8003976:	eb61 0903 	sbc.w	r9, r1, r3
 800397a:	4640      	mov	r0, r8
 800397c:	4649      	mov	r1, r9
 800397e:	f7fc fdd1 	bl	8000524 <__aeabi_ul2d>
 8003982:	a393      	add	r3, pc, #588	@ (adr r3, 8003bd0 <QEIEncoderVel_Update+0x2e0>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f7fc fe02 	bl	8000590 <__aeabi_dmul>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	f7fd f8b6 	bl	8000b04 <__aeabi_d2f>
 8003998:	4603      	mov	r3, r0
 800399a:	603b      	str	r3, [r7, #0]
//calculate anglar velocity
QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039a6:	ed97 7a00 	vldr	s14, [r7]
 80039aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ae:	4b94      	ldr	r3, [pc, #592]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 80039b0:	edc3 7a07 	vstr	s15, [r3, #28]
speed = ((QEIdata.QEIAngularVelocity)/8192)*12.5*2*3.14;
 80039b4:	4b92      	ldr	r3, [pc, #584]	@ (8003c00 <QEIEncoderVel_Update+0x310>)
 80039b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80039ba:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8003c0c <QEIEncoderVel_Update+0x31c>
 80039be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039c2:	ee16 0a90 	vmov	r0, s13
 80039c6:	f7fc fd8b 	bl	80004e0 <__aeabi_f2d>
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	4b90      	ldr	r3, [pc, #576]	@ (8003c10 <QEIEncoderVel_Update+0x320>)
 80039d0:	f7fc fdde 	bl	8000590 <__aeabi_dmul>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	f7fc fc20 	bl	8000224 <__adddf3>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	a37a      	add	r3, pc, #488	@ (adr r3, 8003bd8 <QEIEncoderVel_Update+0x2e8>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f7fc fdcd 	bl	8000590 <__aeabi_dmul>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7fd f881 	bl	8000b04 <__aeabi_d2f>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4a83      	ldr	r2, [pc, #524]	@ (8003c14 <QEIEncoderVel_Update+0x324>)
 8003a06:	6013      	str	r3, [r2, #0]

speed_fill = (0.969*speed_fill_1)+(0.0155*speed)+(0.0155*speed_1);
 8003a08:	4b83      	ldr	r3, [pc, #524]	@ (8003c18 <QEIEncoderVel_Update+0x328>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd67 	bl	80004e0 <__aeabi_f2d>
 8003a12:	a373      	add	r3, pc, #460	@ (adr r3, 8003be0 <QEIEncoderVel_Update+0x2f0>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc fdba 	bl	8000590 <__aeabi_dmul>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4690      	mov	r8, r2
 8003a22:	4699      	mov	r9, r3
 8003a24:	4b7b      	ldr	r3, [pc, #492]	@ (8003c14 <QEIEncoderVel_Update+0x324>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fd59 	bl	80004e0 <__aeabi_f2d>
 8003a2e:	a36e      	add	r3, pc, #440	@ (adr r3, 8003be8 <QEIEncoderVel_Update+0x2f8>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f7fc fdac 	bl	8000590 <__aeabi_dmul>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	4649      	mov	r1, r9
 8003a40:	f7fc fbf0 	bl	8000224 <__adddf3>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4690      	mov	r8, r2
 8003a4a:	4699      	mov	r9, r3
 8003a4c:	4b73      	ldr	r3, [pc, #460]	@ (8003c1c <QEIEncoderVel_Update+0x32c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fc fd45 	bl	80004e0 <__aeabi_f2d>
 8003a56:	a364      	add	r3, pc, #400	@ (adr r3, 8003be8 <QEIEncoderVel_Update+0x2f8>)
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f7fc fd98 	bl	8000590 <__aeabi_dmul>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4640      	mov	r0, r8
 8003a66:	4649      	mov	r1, r9
 8003a68:	f7fc fbdc 	bl	8000224 <__adddf3>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	f7fd f846 	bl	8000b04 <__aeabi_d2f>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4a69      	ldr	r2, [pc, #420]	@ (8003c20 <QEIEncoderVel_Update+0x330>)
 8003a7c:	6013      	str	r3, [r2, #0]
speed_1 = speed;
 8003a7e:	4b65      	ldr	r3, [pc, #404]	@ (8003c14 <QEIEncoderVel_Update+0x324>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a66      	ldr	r2, [pc, #408]	@ (8003c1c <QEIEncoderVel_Update+0x32c>)
 8003a84:	6013      	str	r3, [r2, #0]
speed_fill_1 = speed_fill;
 8003a86:	4b66      	ldr	r3, [pc, #408]	@ (8003c20 <QEIEncoderVel_Update+0x330>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a63      	ldr	r2, [pc, #396]	@ (8003c18 <QEIEncoderVel_Update+0x328>)
 8003a8c:	6013      	str	r3, [r2, #0]
if(fabs(speed_fill) < 0.0001 )
 8003a8e:	4b64      	ldr	r3, [pc, #400]	@ (8003c20 <QEIEncoderVel_Update+0x330>)
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	eef0 7ae7 	vabs.f32	s15, s15
 8003a98:	ee17 0a90 	vmov	r0, s15
 8003a9c:	f7fc fd20 	bl	80004e0 <__aeabi_f2d>
 8003aa0:	a353      	add	r3, pc, #332	@ (adr r3, 8003bf0 <QEIEncoderVel_Update+0x300>)
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f7fc ffe5 	bl	8000a74 <__aeabi_dcmplt>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <QEIEncoderVel_Update+0x1c8>
{
	speed_fill = 0;
 8003ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8003c20 <QEIEncoderVel_Update+0x330>)
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
}

static uint64_t timestamp_Accelation =0;

if(timestamp_Accelation < HAL_GetTick())
 8003ab8:	f001 fe40 	bl	800573c <HAL_GetTick>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2200      	movs	r2, #0
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	4615      	mov	r5, r2
 8003ac4:	4b57      	ldr	r3, [pc, #348]	@ (8003c24 <QEIEncoderVel_Update+0x334>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	42a2      	cmp	r2, r4
 8003acc:	41ab      	sbcs	r3, r5
 8003ace:	d270      	bcs.n	8003bb2 <QEIEncoderVel_Update+0x2c2>
{
static float oldVelo = 0;
Accelation = speed_fill-oldVelo/0.001;
 8003ad0:	4b53      	ldr	r3, [pc, #332]	@ (8003c20 <QEIEncoderVel_Update+0x330>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fc fd03 	bl	80004e0 <__aeabi_f2d>
 8003ada:	4604      	mov	r4, r0
 8003adc:	460d      	mov	r5, r1
 8003ade:	4b52      	ldr	r3, [pc, #328]	@ (8003c28 <QEIEncoderVel_Update+0x338>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fcfc 	bl	80004e0 <__aeabi_f2d>
 8003ae8:	a343      	add	r3, pc, #268	@ (adr r3, 8003bf8 <QEIEncoderVel_Update+0x308>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fe79 	bl	80007e4 <__aeabi_ddiv>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4620      	mov	r0, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	f7fc fb91 	bl	8000220 <__aeabi_dsub>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	f7fc fffd 	bl	8000b04 <__aeabi_d2f>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4a47      	ldr	r2, [pc, #284]	@ (8003c2c <QEIEncoderVel_Update+0x33c>)
 8003b0e:	6013      	str	r3, [r2, #0]
Accelation_fill = (0.969*Accelation_fill_1)+(0.0155*Accelation)+(0.0155*Accelation_1);
 8003b10:	4b47      	ldr	r3, [pc, #284]	@ (8003c30 <QEIEncoderVel_Update+0x340>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fc fce3 	bl	80004e0 <__aeabi_f2d>
 8003b1a:	a331      	add	r3, pc, #196	@ (adr r3, 8003be0 <QEIEncoderVel_Update+0x2f0>)
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f7fc fd36 	bl	8000590 <__aeabi_dmul>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c2c <QEIEncoderVel_Update+0x33c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fcd5 	bl	80004e0 <__aeabi_f2d>
 8003b36:	a32c      	add	r3, pc, #176	@ (adr r3, 8003be8 <QEIEncoderVel_Update+0x2f8>)
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f7fc fd28 	bl	8000590 <__aeabi_dmul>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4620      	mov	r0, r4
 8003b46:	4629      	mov	r1, r5
 8003b48:	f7fc fb6c 	bl	8000224 <__adddf3>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4614      	mov	r4, r2
 8003b52:	461d      	mov	r5, r3
 8003b54:	4b37      	ldr	r3, [pc, #220]	@ (8003c34 <QEIEncoderVel_Update+0x344>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fc fcc1 	bl	80004e0 <__aeabi_f2d>
 8003b5e:	a322      	add	r3, pc, #136	@ (adr r3, 8003be8 <QEIEncoderVel_Update+0x2f8>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc fd14 	bl	8000590 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	4629      	mov	r1, r5
 8003b70:	f7fc fb58 	bl	8000224 <__adddf3>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f7fc ffc2 	bl	8000b04 <__aeabi_d2f>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4a2d      	ldr	r2, [pc, #180]	@ (8003c38 <QEIEncoderVel_Update+0x348>)
 8003b84:	6013      	str	r3, [r2, #0]
Accelation_1 = Accelation;
 8003b86:	4b29      	ldr	r3, [pc, #164]	@ (8003c2c <QEIEncoderVel_Update+0x33c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c34 <QEIEncoderVel_Update+0x344>)
 8003b8c:	6013      	str	r3, [r2, #0]
Accelation_fill_1 = Accelation_fill;
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c38 <QEIEncoderVel_Update+0x348>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a27      	ldr	r2, [pc, #156]	@ (8003c30 <QEIEncoderVel_Update+0x340>)
 8003b94:	6013      	str	r3, [r2, #0]
oldVelo =  speed_fill;
 8003b96:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <QEIEncoderVel_Update+0x330>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a23      	ldr	r2, [pc, #140]	@ (8003c28 <QEIEncoderVel_Update+0x338>)
 8003b9c:	6013      	str	r3, [r2, #0]
timestamp_Accelation = HAL_GetTick()+1;
 8003b9e:	f001 fdcd 	bl	800573c <HAL_GetTick>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	469a      	mov	sl, r3
 8003baa:	4693      	mov	fp, r2
 8003bac:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <QEIEncoderVel_Update+0x334>)
 8003bae:	e9c3 ab00 	strd	sl, fp, [r3]





if(speed_fill>MAXspeed)
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c20 <QEIEncoderVel_Update+0x330>)
 8003bb4:	ed93 7a00 	vldr	s14, [r3]
 8003bb8:	4b20      	ldr	r3, [pc, #128]	@ (8003c3c <QEIEncoderVel_Update+0x34c>)
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc6:	dd3d      	ble.n	8003c44 <QEIEncoderVel_Update+0x354>
{
	MAXspeed = speed_fill;
 8003bc8:	4b15      	ldr	r3, [pc, #84]	@ (8003c20 <QEIEncoderVel_Update+0x330>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	e038      	b.n	8003c40 <QEIEncoderVel_Update+0x350>
 8003bce:	bf00      	nop
 8003bd0:	a0b5ed8d 	.word	0xa0b5ed8d
 8003bd4:	3eb0c6f7 	.word	0x3eb0c6f7
 8003bd8:	51eb851f 	.word	0x51eb851f
 8003bdc:	40091eb8 	.word	0x40091eb8
 8003be0:	49ba5e35 	.word	0x49ba5e35
 8003be4:	3fef020c 	.word	0x3fef020c
 8003be8:	c8b43958 	.word	0xc8b43958
 8003bec:	3f8fbe76 	.word	0x3f8fbe76
 8003bf0:	eb1c432d 	.word	0xeb1c432d
 8003bf4:	3f1a36e2 	.word	0x3f1a36e2
 8003bf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003bfc:	3f50624d 	.word	0x3f50624d
 8003c00:	20001408 	.word	0x20001408
 8003c04:	2000051c 	.word	0x2000051c
 8003c08:	20001400 	.word	0x20001400
 8003c0c:	46000000 	.word	0x46000000
 8003c10:	40290000 	.word	0x40290000
 8003c14:	200013d8 	.word	0x200013d8
 8003c18:	200013e8 	.word	0x200013e8
 8003c1c:	200013dc 	.word	0x200013dc
 8003c20:	200013e4 	.word	0x200013e4
 8003c24:	20001478 	.word	0x20001478
 8003c28:	20001480 	.word	0x20001480
 8003c2c:	200013fc 	.word	0x200013fc
 8003c30:	200013f4 	.word	0x200013f4
 8003c34:	200013ec 	.word	0x200013ec
 8003c38:	200013f0 	.word	0x200013f0
 8003c3c:	200013e0 	.word	0x200013e0
 8003c40:	4a08      	ldr	r2, [pc, #32]	@ (8003c64 <QEIEncoderVel_Update+0x374>)
 8003c42:	6013      	str	r3, [r2, #0]
}
//store value for next loop
QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8003c44:	4b08      	ldr	r3, [pc, #32]	@ (8003c68 <QEIEncoderVel_Update+0x378>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a07      	ldr	r2, [pc, #28]	@ (8003c68 <QEIEncoderVel_Update+0x378>)
 8003c4a:	6053      	str	r3, [r2, #4]
QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <QEIEncoderVel_Update+0x378>)
 8003c4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c52:	4905      	ldr	r1, [pc, #20]	@ (8003c68 <QEIEncoderVel_Update+0x378>)
 8003c54:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c62:	bf00      	nop
 8003c64:	200013e0 	.word	0x200013e0
 8003c68:	20001408 	.word	0x20001408
 8003c6c:	00000000 	.word	0x00000000

08003c70 <Trajectory>:

void Trajectory()
{
 8003c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
	static uint64_t timestamp_Traject =0;
		int64_t currentTime = micros();
 8003c78:	f001 f968 	bl	8004f4c <micros>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	e9c7 2300 	strd	r2, r3, [r7]
		  if(timestamp_Traject < currentTime)
 8003c84:	4b99      	ldr	r3, [pc, #612]	@ (8003eec <Trajectory+0x27c>)
 8003c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c8e:	4290      	cmp	r0, r2
 8003c90:	eb71 0303 	sbcs.w	r3, r1, r3
 8003c94:	f080 8219 	bcs.w	80040ca <Trajectory+0x45a>
		  {
			  switch(state_Tra)
 8003c98:	4b95      	ldr	r3, [pc, #596]	@ (8003ef0 <Trajectory+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	f200 81f6 	bhi.w	800408e <Trajectory+0x41e>
 8003ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca8 <Trajectory+0x38>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003e5d 	.word	0x08003e5d
 8003cb0:	08003f21 	.word	0x08003f21
 8003cb4:	08004037 	.word	0x08004037
			  	  		  {
			  	  		  case 0:
			  	  			  if(Pos_Start > Pos_Target)
 8003cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8003ef4 <Trajectory+0x284>)
 8003cba:	ed93 7a00 	vldr	s14, [r3]
 8003cbe:	4b8e      	ldr	r3, [pc, #568]	@ (8003ef8 <Trajectory+0x288>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	dd04      	ble.n	8003cd8 <Trajectory+0x68>
			  	  			  {
			  	  				  direction = -1;
 8003cce:	4b8b      	ldr	r3, [pc, #556]	@ (8003efc <Trajectory+0x28c>)
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e002      	b.n	8003cde <Trajectory+0x6e>
			  	  			  }
			  	  			  else
			  	  			  {
			  	  				  direction = 1;
 8003cd8:	4b88      	ldr	r3, [pc, #544]	@ (8003efc <Trajectory+0x28c>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
			  	  			  }
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)+((direction*0.5*Max_Acc)*(t*t));
 8003cde:	4b88      	ldr	r3, [pc, #544]	@ (8003f00 <Trajectory+0x290>)
 8003ce0:	ed93 7a00 	vldr	s14, [r3]
 8003ce4:	4b87      	ldr	r3, [pc, #540]	@ (8003f04 <Trajectory+0x294>)
 8003ce6:	edd3 7a00 	vldr	s15, [r3]
 8003cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cee:	4b81      	ldr	r3, [pc, #516]	@ (8003ef4 <Trajectory+0x284>)
 8003cf0:	edd3 7a00 	vldr	s15, [r3]
 8003cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf8:	ee17 0a90 	vmov	r0, s15
 8003cfc:	f7fc fbf0 	bl	80004e0 <__aeabi_f2d>
 8003d00:	4680      	mov	r8, r0
 8003d02:	4689      	mov	r9, r1
 8003d04:	4b7d      	ldr	r3, [pc, #500]	@ (8003efc <Trajectory+0x28c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fc fbd7 	bl	80004bc <__aeabi_i2d>
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	4b7d      	ldr	r3, [pc, #500]	@ (8003f08 <Trajectory+0x298>)
 8003d14:	f7fc fc3c 	bl	8000590 <__aeabi_dmul>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4692      	mov	sl, r2
 8003d1e:	469b      	mov	fp, r3
 8003d20:	4b7a      	ldr	r3, [pc, #488]	@ (8003f0c <Trajectory+0x29c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fc fbdb 	bl	80004e0 <__aeabi_f2d>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4650      	mov	r0, sl
 8003d30:	4659      	mov	r1, fp
 8003d32:	f7fc fc2d 	bl	8000590 <__aeabi_dmul>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4692      	mov	sl, r2
 8003d3c:	469b      	mov	fp, r3
 8003d3e:	4b71      	ldr	r3, [pc, #452]	@ (8003f04 <Trajectory+0x294>)
 8003d40:	ed93 7a00 	vldr	s14, [r3]
 8003d44:	4b6f      	ldr	r3, [pc, #444]	@ (8003f04 <Trajectory+0x294>)
 8003d46:	edd3 7a00 	vldr	s15, [r3]
 8003d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4e:	ee17 0a90 	vmov	r0, s15
 8003d52:	f7fc fbc5 	bl	80004e0 <__aeabi_f2d>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4650      	mov	r0, sl
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	f7fc fc17 	bl	8000590 <__aeabi_dmul>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4640      	mov	r0, r8
 8003d68:	4649      	mov	r1, r9
 8003d6a:	f7fc fa5b 	bl	8000224 <__adddf3>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7fc fec5 	bl	8000b04 <__aeabi_d2f>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4a64      	ldr	r2, [pc, #400]	@ (8003f10 <Trajectory+0x2a0>)
 8003d7e:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start + direction*Max_Acc*t;
 8003d80:	4b5e      	ldr	r3, [pc, #376]	@ (8003efc <Trajectory+0x28c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d8c:	4b5f      	ldr	r3, [pc, #380]	@ (8003f0c <Trajectory+0x29c>)
 8003d8e:	edd3 7a00 	vldr	s15, [r3]
 8003d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d96:	4b5b      	ldr	r3, [pc, #364]	@ (8003f04 <Trajectory+0x294>)
 8003d98:	edd3 7a00 	vldr	s15, [r3]
 8003d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da0:	4b57      	ldr	r3, [pc, #348]	@ (8003f00 <Trajectory+0x290>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003daa:	4b5a      	ldr	r3, [pc, #360]	@ (8003f14 <Trajectory+0x2a4>)
 8003dac:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = Max_Acc*direction;
 8003db0:	4b52      	ldr	r3, [pc, #328]	@ (8003efc <Trajectory+0x28c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dbc:	4b53      	ldr	r3, [pc, #332]	@ (8003f0c <Trajectory+0x29c>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc6:	4b54      	ldr	r3, [pc, #336]	@ (8003f18 <Trajectory+0x2a8>)
 8003dc8:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) >= Max_Velo)
 8003dcc:	4b51      	ldr	r3, [pc, #324]	@ (8003f14 <Trajectory+0x2a4>)
 8003dce:	edd3 7a00 	vldr	s15, [r3]
 8003dd2:	eeb0 7ae7 	vabs.f32	s14, s15
 8003dd6:	4b51      	ldr	r3, [pc, #324]	@ (8003f1c <Trajectory+0x2ac>)
 8003dd8:	edd3 7a00 	vldr	s15, [r3]
 8003ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de4:	db0e      	blt.n	8003e04 <Trajectory+0x194>
			  	  				{
			  	  					state_Tra = 1;
 8003de6:	4b42      	ldr	r3, [pc, #264]	@ (8003ef0 <Trajectory+0x280>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8003dec:	4b48      	ldr	r3, [pc, #288]	@ (8003f10 <Trajectory+0x2a0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a40      	ldr	r2, [pc, #256]	@ (8003ef4 <Trajectory+0x284>)
 8003df2:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 8003df4:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <Trajectory+0x2a4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a41      	ldr	r2, [pc, #260]	@ (8003f00 <Trajectory+0x290>)
 8003dfa:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8003dfc:	4b41      	ldr	r3, [pc, #260]	@ (8003f04 <Trajectory+0x294>)
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
			  	  				}
			  	  			  if(fabs((q_Pos-Pos_Start)*2) >= fabs(Pos_Target-Pos_Start))
 8003e04:	4b42      	ldr	r3, [pc, #264]	@ (8003f10 <Trajectory+0x2a0>)
 8003e06:	ed93 7a00 	vldr	s14, [r3]
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef4 <Trajectory+0x284>)
 8003e0c:	edd3 7a00 	vldr	s15, [r3]
 8003e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e18:	eeb0 7ae7 	vabs.f32	s14, s15
 8003e1c:	4b36      	ldr	r3, [pc, #216]	@ (8003ef8 <Trajectory+0x288>)
 8003e1e:	edd3 6a00 	vldr	s13, [r3]
 8003e22:	4b34      	ldr	r3, [pc, #208]	@ (8003ef4 <Trajectory+0x284>)
 8003e24:	edd3 7a00 	vldr	s15, [r3]
 8003e28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e2c:	eef0 7ae7 	vabs.f32	s15, s15
 8003e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e38:	da00      	bge.n	8003e3c <Trajectory+0x1cc>
			  	  				state_Tra = 2;
								Pos_Start = q_Pos;
								Velo_Start = q_Velo;
								t = 0;
			  	  			  }
			  	  			  	break;
 8003e3a:	e128      	b.n	800408e <Trajectory+0x41e>
			  	  				state_Tra = 2;
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef0 <Trajectory+0x280>)
 8003e3e:	2202      	movs	r2, #2
 8003e40:	601a      	str	r2, [r3, #0]
								Pos_Start = q_Pos;
 8003e42:	4b33      	ldr	r3, [pc, #204]	@ (8003f10 <Trajectory+0x2a0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef4 <Trajectory+0x284>)
 8003e48:	6013      	str	r3, [r2, #0]
								Velo_Start = q_Velo;
 8003e4a:	4b32      	ldr	r3, [pc, #200]	@ (8003f14 <Trajectory+0x2a4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <Trajectory+0x290>)
 8003e50:	6013      	str	r3, [r2, #0]
								t = 0;
 8003e52:	4b2c      	ldr	r3, [pc, #176]	@ (8003f04 <Trajectory+0x294>)
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8003e5a:	e118      	b.n	800408e <Trajectory+0x41e>
			  	  		  case 1:
			  	  			  	q_Pos = Pos_Start +(Velo_Start*t);
 8003e5c:	4b28      	ldr	r3, [pc, #160]	@ (8003f00 <Trajectory+0x290>)
 8003e5e:	ed93 7a00 	vldr	s14, [r3]
 8003e62:	4b28      	ldr	r3, [pc, #160]	@ (8003f04 <Trajectory+0x294>)
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ef4 <Trajectory+0x284>)
 8003e6e:	edd3 7a00 	vldr	s15, [r3]
 8003e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e76:	4b26      	ldr	r3, [pc, #152]	@ (8003f10 <Trajectory+0x2a0>)
 8003e78:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Velo = Velo_Start;
 8003e7c:	4b20      	ldr	r3, [pc, #128]	@ (8003f00 <Trajectory+0x290>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a24      	ldr	r2, [pc, #144]	@ (8003f14 <Trajectory+0x2a4>)
 8003e82:	6013      	str	r3, [r2, #0]
			  	  			  	q_Acc = 0;
 8003e84:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <Trajectory+0x2a8>)
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
			  	  			  if(fabs(Pos_Target-q_Pos) <= (q_Velo*q_Velo)/(2*Max_Acc))
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <Trajectory+0x288>)
 8003e8e:	ed93 7a00 	vldr	s14, [r3]
 8003e92:	4b1f      	ldr	r3, [pc, #124]	@ (8003f10 <Trajectory+0x2a0>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e9c:	eeb0 7ae7 	vabs.f32	s14, s15
 8003ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f14 <Trajectory+0x2a4>)
 8003ea2:	edd3 6a00 	vldr	s13, [r3]
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f14 <Trajectory+0x2a4>)
 8003ea8:	edd3 7a00 	vldr	s15, [r3]
 8003eac:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003eb0:	4b16      	ldr	r3, [pc, #88]	@ (8003f0c <Trajectory+0x29c>)
 8003eb2:	edd3 7a00 	vldr	s15, [r3]
 8003eb6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003eba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec6:	d900      	bls.n	8003eca <Trajectory+0x25a>
			  	  					state_Tra = 2;
			  	  					Pos_Start = q_Pos;
			  	  					Velo_Start = q_Velo;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 8003ec8:	e0e1      	b.n	800408e <Trajectory+0x41e>
			  	  					state_Tra = 2;
 8003eca:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <Trajectory+0x280>)
 8003ecc:	2202      	movs	r2, #2
 8003ece:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <Trajectory+0x2a0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a07      	ldr	r2, [pc, #28]	@ (8003ef4 <Trajectory+0x284>)
 8003ed6:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 8003ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f14 <Trajectory+0x2a4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a08      	ldr	r2, [pc, #32]	@ (8003f00 <Trajectory+0x290>)
 8003ede:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8003ee0:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <Trajectory+0x294>)
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8003ee8:	e0d1      	b.n	800408e <Trajectory+0x41e>
 8003eea:	bf00      	nop
 8003eec:	20001488 	.word	0x20001488
 8003ef0:	20001370 	.word	0x20001370
 8003ef4:	20001350 	.word	0x20001350
 8003ef8:	20001354 	.word	0x20001354
 8003efc:	2000025c 	.word	0x2000025c
 8003f00:	2000135c 	.word	0x2000135c
 8003f04:	2000136c 	.word	0x2000136c
 8003f08:	3fe00000 	.word	0x3fe00000
 8003f0c:	20000258 	.word	0x20000258
 8003f10:	20001360 	.word	0x20001360
 8003f14:	20001364 	.word	0x20001364
 8003f18:	20001368 	.word	0x20001368
 8003f1c:	20000254 	.word	0x20000254
			  	  		  case 2:
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)-((direction*0.5*Max_Acc)*(t*t));
 8003f20:	4b6f      	ldr	r3, [pc, #444]	@ (80040e0 <Trajectory+0x470>)
 8003f22:	ed93 7a00 	vldr	s14, [r3]
 8003f26:	4b6f      	ldr	r3, [pc, #444]	@ (80040e4 <Trajectory+0x474>)
 8003f28:	edd3 7a00 	vldr	s15, [r3]
 8003f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f30:	4b6d      	ldr	r3, [pc, #436]	@ (80040e8 <Trajectory+0x478>)
 8003f32:	edd3 7a00 	vldr	s15, [r3]
 8003f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f3a:	ee17 0a90 	vmov	r0, s15
 8003f3e:	f7fc facf 	bl	80004e0 <__aeabi_f2d>
 8003f42:	4680      	mov	r8, r0
 8003f44:	4689      	mov	r9, r1
 8003f46:	4b69      	ldr	r3, [pc, #420]	@ (80040ec <Trajectory+0x47c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc fab6 	bl	80004bc <__aeabi_i2d>
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	4b66      	ldr	r3, [pc, #408]	@ (80040f0 <Trajectory+0x480>)
 8003f56:	f7fc fb1b 	bl	8000590 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4692      	mov	sl, r2
 8003f60:	469b      	mov	fp, r3
 8003f62:	4b64      	ldr	r3, [pc, #400]	@ (80040f4 <Trajectory+0x484>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc faba 	bl	80004e0 <__aeabi_f2d>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4650      	mov	r0, sl
 8003f72:	4659      	mov	r1, fp
 8003f74:	f7fc fb0c 	bl	8000590 <__aeabi_dmul>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4692      	mov	sl, r2
 8003f7e:	469b      	mov	fp, r3
 8003f80:	4b58      	ldr	r3, [pc, #352]	@ (80040e4 <Trajectory+0x474>)
 8003f82:	ed93 7a00 	vldr	s14, [r3]
 8003f86:	4b57      	ldr	r3, [pc, #348]	@ (80040e4 <Trajectory+0x474>)
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f90:	ee17 0a90 	vmov	r0, s15
 8003f94:	f7fc faa4 	bl	80004e0 <__aeabi_f2d>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4650      	mov	r0, sl
 8003f9e:	4659      	mov	r1, fp
 8003fa0:	f7fc faf6 	bl	8000590 <__aeabi_dmul>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4640      	mov	r0, r8
 8003faa:	4649      	mov	r1, r9
 8003fac:	f7fc f938 	bl	8000220 <__aeabi_dsub>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f7fc fda4 	bl	8000b04 <__aeabi_d2f>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80040f8 <Trajectory+0x488>)
 8003fc0:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start - direction*Max_Acc*t;
 8003fc2:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <Trajectory+0x470>)
 8003fc4:	ed93 7a00 	vldr	s14, [r3]
 8003fc8:	4b48      	ldr	r3, [pc, #288]	@ (80040ec <Trajectory+0x47c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fd4:	4b47      	ldr	r3, [pc, #284]	@ (80040f4 <Trajectory+0x484>)
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fde:	4b41      	ldr	r3, [pc, #260]	@ (80040e4 <Trajectory+0x474>)
 8003fe0:	edd3 7a00 	vldr	s15, [r3]
 8003fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fec:	4b43      	ldr	r3, [pc, #268]	@ (80040fc <Trajectory+0x48c>)
 8003fee:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = -direction*Max_Acc;
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80040ec <Trajectory+0x47c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	425b      	negs	r3, r3
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004000:	4b3c      	ldr	r3, [pc, #240]	@ (80040f4 <Trajectory+0x484>)
 8004002:	edd3 7a00 	vldr	s15, [r3]
 8004006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400a:	4b3d      	ldr	r3, [pc, #244]	@ (8004100 <Trajectory+0x490>)
 800400c:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) <= 0)
 8004010:	4b3a      	ldr	r3, [pc, #232]	@ (80040fc <Trajectory+0x48c>)
 8004012:	edd3 7a00 	vldr	s15, [r3]
 8004016:	eef0 7ae7 	vabs.f32	s15, s15
 800401a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004022:	d900      	bls.n	8004026 <Trajectory+0x3b6>
			  	  				{
			  	  					state_Tra = 3;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 8004024:	e033      	b.n	800408e <Trajectory+0x41e>
			  	  					state_Tra = 3;
 8004026:	4b37      	ldr	r3, [pc, #220]	@ (8004104 <Trajectory+0x494>)
 8004028:	2203      	movs	r2, #3
 800402a:	601a      	str	r2, [r3, #0]
			  	  					t = 0;
 800402c:	4b2d      	ldr	r3, [pc, #180]	@ (80040e4 <Trajectory+0x474>)
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8004034:	e02b      	b.n	800408e <Trajectory+0x41e>
			  	  		  case 3:
			  	  			  	if (FirstTraject == 1)
 8004036:	4b34      	ldr	r3, [pc, #208]	@ (8004108 <Trajectory+0x498>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d106      	bne.n	800404c <Trajectory+0x3dc>
			  	  			  	{
			  	  			  	Old_Target = Pos_Target;
 800403e:	4b33      	ldr	r3, [pc, #204]	@ (800410c <Trajectory+0x49c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a33      	ldr	r2, [pc, #204]	@ (8004110 <Trajectory+0x4a0>)
 8004044:	6013      	str	r3, [r2, #0]
			  	  			  	FirstTraject = 0;
 8004046:	4b30      	ldr	r3, [pc, #192]	@ (8004108 <Trajectory+0x498>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
			  	  			  	}
			  	  			  	if(Pos_Target != Old_Target)
 800404c:	4b2f      	ldr	r3, [pc, #188]	@ (800410c <Trajectory+0x49c>)
 800404e:	ed93 7a00 	vldr	s14, [r3]
 8004052:	4b2f      	ldr	r3, [pc, #188]	@ (8004110 <Trajectory+0x4a0>)
 8004054:	edd3 7a00 	vldr	s15, [r3]
 8004058:	eeb4 7a67 	vcmp.f32	s14, s15
 800405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004060:	d014      	beq.n	800408c <Trajectory+0x41c>
			  	  			  	{
			  	  			  		state_Tra = 0;
 8004062:	4b28      	ldr	r3, [pc, #160]	@ (8004104 <Trajectory+0x494>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
			  	  			  		t = 0;
 8004068:	4b1e      	ldr	r3, [pc, #120]	@ (80040e4 <Trajectory+0x474>)
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
			  	  			  		Pos_Start = Pos;
 8004070:	4b28      	ldr	r3, [pc, #160]	@ (8004114 <Trajectory+0x4a4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1c      	ldr	r2, [pc, #112]	@ (80040e8 <Trajectory+0x478>)
 8004076:	6013      	str	r3, [r2, #0]
//			  	  			  		Pos_Start = q_Pos;
			  	  			  		Velo_Start = q_Velo;
 8004078:	4b20      	ldr	r3, [pc, #128]	@ (80040fc <Trajectory+0x48c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a18      	ldr	r2, [pc, #96]	@ (80040e0 <Trajectory+0x470>)
 800407e:	6013      	str	r3, [r2, #0]
			  	  			  		Old_Target = Pos_Target;
 8004080:	4b22      	ldr	r3, [pc, #136]	@ (800410c <Trajectory+0x49c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a22      	ldr	r2, [pc, #136]	@ (8004110 <Trajectory+0x4a0>)
 8004086:	6013      	str	r3, [r2, #0]
			  	  			  		PIDreset();
 8004088:	f7ff fb8a 	bl	80037a0 <PIDreset>

			  	  			  	}
			  	  			  	break;
 800408c:	bf00      	nop
			  	  		  }
		  t = t+0.0001;
 800408e:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <Trajectory+0x474>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fa24 	bl	80004e0 <__aeabi_f2d>
 8004098:	a30f      	add	r3, pc, #60	@ (adr r3, 80040d8 <Trajectory+0x468>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f7fc f8c1 	bl	8000224 <__adddf3>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	f7fc fd2b 	bl	8000b04 <__aeabi_d2f>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4a0c      	ldr	r2, [pc, #48]	@ (80040e4 <Trajectory+0x474>)
 80040b2:	6013      	str	r3, [r2, #0]
		  timestamp_Traject = currentTime + 100;
 80040b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040b8:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 80040bc:	f143 0500 	adc.w	r5, r3, #0
 80040c0:	4622      	mov	r2, r4
 80040c2:	462b      	mov	r3, r5
 80040c4:	4914      	ldr	r1, [pc, #80]	@ (8004118 <Trajectory+0x4a8>)
 80040c6:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040d4:	f3af 8000 	nop.w
 80040d8:	eb1c432d 	.word	0xeb1c432d
 80040dc:	3f1a36e2 	.word	0x3f1a36e2
 80040e0:	2000135c 	.word	0x2000135c
 80040e4:	2000136c 	.word	0x2000136c
 80040e8:	20001350 	.word	0x20001350
 80040ec:	2000025c 	.word	0x2000025c
 80040f0:	3fe00000 	.word	0x3fe00000
 80040f4:	20000258 	.word	0x20000258
 80040f8:	20001360 	.word	0x20001360
 80040fc:	20001364 	.word	0x20001364
 8004100:	20001368 	.word	0x20001368
 8004104:	20001370 	.word	0x20001370
 8004108:	2000024c 	.word	0x2000024c
 800410c:	20001354 	.word	0x20001354
 8004110:	20001358 	.word	0x20001358
 8004114:	200013f8 	.word	0x200013f8
 8004118:	20001488 	.word	0x20001488

0800411c <PIDposition>:

void PIDposition()
{
 800411c:	b5b0      	push	{r4, r5, r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
	static uint64_t timestamp3 =0;
	int64_t currentTime = micros();
 8004122:	f000 ff13 	bl	8004f4c <micros>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentTime > timestamp3)
 800412e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004132:	49c7      	ldr	r1, [pc, #796]	@ (8004450 <PIDposition+0x334>)
 8004134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004138:	4290      	cmp	r0, r2
 800413a:	eb71 0303 	sbcs.w	r3, r1, r3
 800413e:	f080 8169 	bcs.w	8004414 <PIDposition+0x2f8>
	  {
			Poscontrol.Error[NEW] = q_Pos - Pos;//
 8004142:	4bc4      	ldr	r3, [pc, #784]	@ (8004454 <PIDposition+0x338>)
 8004144:	ed93 7a00 	vldr	s14, [r3]
 8004148:	4bc3      	ldr	r3, [pc, #780]	@ (8004458 <PIDposition+0x33c>)
 800414a:	edd3 7a00 	vldr	s15, [r3]
 800414e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004152:	4bc2      	ldr	r3, [pc, #776]	@ (800445c <PIDposition+0x340>)
 8004154:	edc3 7a03 	vstr	s15, [r3, #12]
//			Poscontrol.Output[NEW] = ((((Poscontrol.kp*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*Poscontrol.T)+(2*Poscontrol.kd))*Poscontrol.Error[OLD])+(Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*Poscontrol.T))/Poscontrol.T;
			Poscontrol.Output[NEW] = ((((Poscontrol.kp*2*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(2*Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*2*Poscontrol.T)-(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(4*Poscontrol.kd))*Poscontrol.Error[OLD])+(2*Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*2*Poscontrol.T))/(2*Poscontrol.T);
 8004158:	4bc0      	ldr	r3, [pc, #768]	@ (800445c <PIDposition+0x340>)
 800415a:	edd3 7a06 	vldr	s15, [r3, #24]
 800415e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004162:	4bbe      	ldr	r3, [pc, #760]	@ (800445c <PIDposition+0x340>)
 8004164:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800416c:	4bbb      	ldr	r3, [pc, #748]	@ (800445c <PIDposition+0x340>)
 800416e:	edd3 6a07 	vldr	s13, [r3, #28]
 8004172:	4bba      	ldr	r3, [pc, #744]	@ (800445c <PIDposition+0x340>)
 8004174:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004178:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800417c:	4bb7      	ldr	r3, [pc, #732]	@ (800445c <PIDposition+0x340>)
 800417e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800418a:	4bb4      	ldr	r3, [pc, #720]	@ (800445c <PIDposition+0x340>)
 800418c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004190:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004198:	4bb0      	ldr	r3, [pc, #704]	@ (800445c <PIDposition+0x340>)
 800419a:	edd3 7a03 	vldr	s15, [r3, #12]
 800419e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041a2:	4bae      	ldr	r3, [pc, #696]	@ (800445c <PIDposition+0x340>)
 80041a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80041a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80041ac:	4bab      	ldr	r3, [pc, #684]	@ (800445c <PIDposition+0x340>)
 80041ae:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80041b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041b6:	4ba9      	ldr	r3, [pc, #676]	@ (800445c <PIDposition+0x340>)
 80041b8:	ed93 6a07 	vldr	s12, [r3, #28]
 80041bc:	4ba7      	ldr	r3, [pc, #668]	@ (800445c <PIDposition+0x340>)
 80041be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80041c2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80041c6:	4ba5      	ldr	r3, [pc, #660]	@ (800445c <PIDposition+0x340>)
 80041c8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80041cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80041d4:	4ba1      	ldr	r3, [pc, #644]	@ (800445c <PIDposition+0x340>)
 80041d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80041da:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80041de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80041e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80041e6:	4b9d      	ldr	r3, [pc, #628]	@ (800445c <PIDposition+0x340>)
 80041e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80041ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041f4:	4b99      	ldr	r3, [pc, #612]	@ (800445c <PIDposition+0x340>)
 80041f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80041fa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80041fe:	4b97      	ldr	r3, [pc, #604]	@ (800445c <PIDposition+0x340>)
 8004200:	edd3 7a05 	vldr	s15, [r3, #20]
 8004204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800420c:	4b93      	ldr	r3, [pc, #588]	@ (800445c <PIDposition+0x340>)
 800420e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004212:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004216:	4b91      	ldr	r3, [pc, #580]	@ (800445c <PIDposition+0x340>)
 8004218:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800421c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004220:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004224:	4b8d      	ldr	r3, [pc, #564]	@ (800445c <PIDposition+0x340>)
 8004226:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800422a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800422e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004232:	4b8a      	ldr	r3, [pc, #552]	@ (800445c <PIDposition+0x340>)
 8004234:	edc3 7a00 	vstr	s15, [r3]
			Poscontrol.Error[OLDER] = Poscontrol.Error[OLD];
 8004238:	4b88      	ldr	r3, [pc, #544]	@ (800445c <PIDposition+0x340>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	4a87      	ldr	r2, [pc, #540]	@ (800445c <PIDposition+0x340>)
 800423e:	6153      	str	r3, [r2, #20]
			Poscontrol.Error[OLD] = Poscontrol.Error[NEW];
 8004240:	4b86      	ldr	r3, [pc, #536]	@ (800445c <PIDposition+0x340>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a85      	ldr	r2, [pc, #532]	@ (800445c <PIDposition+0x340>)
 8004246:	6113      	str	r3, [r2, #16]
			Poscontrol.Output[OLDER] = Poscontrol.Output[OLD];
 8004248:	4b84      	ldr	r3, [pc, #528]	@ (800445c <PIDposition+0x340>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a83      	ldr	r2, [pc, #524]	@ (800445c <PIDposition+0x340>)
 800424e:	6093      	str	r3, [r2, #8]
			Poscontrol.Output[OLD] = Poscontrol.Output[NEW];
 8004250:	4b82      	ldr	r3, [pc, #520]	@ (800445c <PIDposition+0x340>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a81      	ldr	r2, [pc, #516]	@ (800445c <PIDposition+0x340>)
 8004256:	6053      	str	r3, [r2, #4]

			Velocontrol.Error[NEW] = Poscontrol.Output[NEW]+q_Velo-speed_fill;//-speed_fill
 8004258:	4b80      	ldr	r3, [pc, #512]	@ (800445c <PIDposition+0x340>)
 800425a:	ed93 7a00 	vldr	s14, [r3]
 800425e:	4b80      	ldr	r3, [pc, #512]	@ (8004460 <PIDposition+0x344>)
 8004260:	edd3 7a00 	vldr	s15, [r3]
 8004264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004268:	4b7e      	ldr	r3, [pc, #504]	@ (8004464 <PIDposition+0x348>)
 800426a:	edd3 7a00 	vldr	s15, [r3]
 800426e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004272:	4b7d      	ldr	r3, [pc, #500]	@ (8004468 <PIDposition+0x34c>)
 8004274:	edc3 7a03 	vstr	s15, [r3, #12]
			ONE = (((Velocontrol.kp*2*Velocontrol.T)+(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(2*Velocontrol.kd))*Velocontrol.Error[NEW])/(2*Velocontrol.T);
 8004278:	4b7b      	ldr	r3, [pc, #492]	@ (8004468 <PIDposition+0x34c>)
 800427a:	edd3 7a06 	vldr	s15, [r3, #24]
 800427e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004282:	4b79      	ldr	r3, [pc, #484]	@ (8004468 <PIDposition+0x34c>)
 8004284:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800428c:	4b76      	ldr	r3, [pc, #472]	@ (8004468 <PIDposition+0x34c>)
 800428e:	edd3 6a07 	vldr	s13, [r3, #28]
 8004292:	4b75      	ldr	r3, [pc, #468]	@ (8004468 <PIDposition+0x34c>)
 8004294:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004298:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800429c:	4b72      	ldr	r3, [pc, #456]	@ (8004468 <PIDposition+0x34c>)
 800429e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80042a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004468 <PIDposition+0x34c>)
 80042ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80042b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004468 <PIDposition+0x34c>)
 80042ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80042be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80042c2:	4b69      	ldr	r3, [pc, #420]	@ (8004468 <PIDposition+0x34c>)
 80042c4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80042c8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80042cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d0:	4b66      	ldr	r3, [pc, #408]	@ (800446c <PIDposition+0x350>)
 80042d2:	edc3 7a00 	vstr	s15, [r3]
			TWO = (((Velocontrol.kp*2*Velocontrol.T)-(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(4*Velocontrol.kd))*Velocontrol.Error[OLD])/(2*Velocontrol.T);
 80042d6:	4b64      	ldr	r3, [pc, #400]	@ (8004468 <PIDposition+0x34c>)
 80042d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80042dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80042e0:	4b61      	ldr	r3, [pc, #388]	@ (8004468 <PIDposition+0x34c>)
 80042e2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80042e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004468 <PIDposition+0x34c>)
 80042ec:	edd3 6a07 	vldr	s13, [r3, #28]
 80042f0:	4b5d      	ldr	r3, [pc, #372]	@ (8004468 <PIDposition+0x34c>)
 80042f2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80042f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004468 <PIDposition+0x34c>)
 80042fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004304:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004308:	4b57      	ldr	r3, [pc, #348]	@ (8004468 <PIDposition+0x34c>)
 800430a:	edd3 7a08 	vldr	s15, [r3, #32]
 800430e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8004312:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800431a:	4b53      	ldr	r3, [pc, #332]	@ (8004468 <PIDposition+0x34c>)
 800431c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004320:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004324:	4b50      	ldr	r3, [pc, #320]	@ (8004468 <PIDposition+0x34c>)
 8004326:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800432a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800432e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004332:	4b4f      	ldr	r3, [pc, #316]	@ (8004470 <PIDposition+0x354>)
 8004334:	edc3 7a00 	vstr	s15, [r3]
			THREE = (2*Velocontrol.kd*Velocontrol.Error[OLDER])/(2*Velocontrol.T);
 8004338:	4b4b      	ldr	r3, [pc, #300]	@ (8004468 <PIDposition+0x34c>)
 800433a:	edd3 7a08 	vldr	s15, [r3, #32]
 800433e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004342:	4b49      	ldr	r3, [pc, #292]	@ (8004468 <PIDposition+0x34c>)
 8004344:	edd3 7a05 	vldr	s15, [r3, #20]
 8004348:	ee67 6a27 	vmul.f32	s13, s14, s15
 800434c:	4b46      	ldr	r3, [pc, #280]	@ (8004468 <PIDposition+0x34c>)
 800434e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004352:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800435a:	4b46      	ldr	r3, [pc, #280]	@ (8004474 <PIDposition+0x358>)
 800435c:	edc3 7a00 	vstr	s15, [r3]
			FOUR = (Velocontrol.Output[OLD]*2*Velocontrol.T)/(2*Velocontrol.T);
 8004360:	4b41      	ldr	r3, [pc, #260]	@ (8004468 <PIDposition+0x34c>)
 8004362:	edd3 7a01 	vldr	s15, [r3, #4]
 8004366:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800436a:	4b3f      	ldr	r3, [pc, #252]	@ (8004468 <PIDposition+0x34c>)
 800436c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004370:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004374:	4b3c      	ldr	r3, [pc, #240]	@ (8004468 <PIDposition+0x34c>)
 8004376:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800437a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800437e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004382:	4b3d      	ldr	r3, [pc, #244]	@ (8004478 <PIDposition+0x35c>)
 8004384:	edc3 7a00 	vstr	s15, [r3]
			Velocontrol.Output[NEW] = (ONE-TWO+THREE+FOUR);//
 8004388:	4b38      	ldr	r3, [pc, #224]	@ (800446c <PIDposition+0x350>)
 800438a:	ed93 7a00 	vldr	s14, [r3]
 800438e:	4b38      	ldr	r3, [pc, #224]	@ (8004470 <PIDposition+0x354>)
 8004390:	edd3 7a00 	vldr	s15, [r3]
 8004394:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004398:	4b36      	ldr	r3, [pc, #216]	@ (8004474 <PIDposition+0x358>)
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043a2:	4b35      	ldr	r3, [pc, #212]	@ (8004478 <PIDposition+0x35c>)
 80043a4:	edd3 7a00 	vldr	s15, [r3]
 80043a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004468 <PIDposition+0x34c>)
 80043ae:	edc3 7a00 	vstr	s15, [r3]
//			test = (ONE-TWO+THREE+FOUR);
			if(Velocontrol.Output[NEW]>24)Velocontrol.Output[NEW]=24;
 80043b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004468 <PIDposition+0x34c>)
 80043b4:	edd3 7a00 	vldr	s15, [r3]
 80043b8:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80043bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c4:	dd02      	ble.n	80043cc <PIDposition+0x2b0>
 80043c6:	4b28      	ldr	r3, [pc, #160]	@ (8004468 <PIDposition+0x34c>)
 80043c8:	4a2c      	ldr	r2, [pc, #176]	@ (800447c <PIDposition+0x360>)
 80043ca:	601a      	str	r2, [r3, #0]
			if(Velocontrol.Output[NEW]<-24)Velocontrol.Output[NEW]=-24;
 80043cc:	4b26      	ldr	r3, [pc, #152]	@ (8004468 <PIDposition+0x34c>)
 80043ce:	edd3 7a00 	vldr	s15, [r3]
 80043d2:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 80043d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	d502      	bpl.n	80043e6 <PIDposition+0x2ca>
 80043e0:	4b21      	ldr	r3, [pc, #132]	@ (8004468 <PIDposition+0x34c>)
 80043e2:	4a27      	ldr	r2, [pc, #156]	@ (8004480 <PIDposition+0x364>)
 80043e4:	601a      	str	r2, [r3, #0]
			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
 80043e6:	4b20      	ldr	r3, [pc, #128]	@ (8004468 <PIDposition+0x34c>)
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004468 <PIDposition+0x34c>)
 80043ec:	6153      	str	r3, [r2, #20]
			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
 80043ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004468 <PIDposition+0x34c>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <PIDposition+0x34c>)
 80043f4:	6113      	str	r3, [r2, #16]
			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
 80043f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <PIDposition+0x34c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004468 <PIDposition+0x34c>)
 80043fc:	6053      	str	r3, [r2, #4]
//			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
//			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
//			Velocontrol.Output[OLDER] = Velocontrol.Output[OLD];
//			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
	//					if(fabs(Pos_Target-Pos) <= 0.1)start = 0;
			timestamp3 =currentTime + 100;
 80043fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004402:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8004406:	f143 0500 	adc.w	r5, r3, #0
 800440a:	4622      	mov	r2, r4
 800440c:	462b      	mov	r3, r5
 800440e:	4910      	ldr	r1, [pc, #64]	@ (8004450 <PIDposition+0x334>)
 8004410:	e9c1 2300 	strd	r2, r3, [r1]
	  }
		PWMmap = mapFloat(Velocontrol.Output[NEW],-24.0,24.0,-42500,42500);
 8004414:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <PIDposition+0x34c>)
 8004416:	edd3 7a00 	vldr	s15, [r3]
 800441a:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8004484 <PIDposition+0x368>
 800441e:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8004488 <PIDposition+0x36c>
 8004422:	eeb3 1a08 	vmov.f32	s2, #56	@ 0x41c00000  24.0
 8004426:	eefb 0a08 	vmov.f32	s1, #184	@ 0xc1c00000 -24.0
 800442a:	eeb0 0a67 	vmov.f32	s0, s15
 800442e:	f000 fd15 	bl	8004e5c <mapFloat>
 8004432:	eef0 7a40 	vmov.f32	s15, s0
 8004436:	4b15      	ldr	r3, [pc, #84]	@ (800448c <PIDposition+0x370>)
 8004438:	edc3 7a00 	vstr	s15, [r3]
	  if(PWMmap > 0)
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <PIDposition+0x370>)
 800443e:	edd3 7a00 	vldr	s15, [r3]
 8004442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444a:	dd32      	ble.n	80044b2 <PIDposition+0x396>
 800444c:	e020      	b.n	8004490 <PIDposition+0x374>
 800444e:	bf00      	nop
 8004450:	20001490 	.word	0x20001490
 8004454:	20001360 	.word	0x20001360
 8004458:	200013f8 	.word	0x200013f8
 800445c:	200012d8 	.word	0x200012d8
 8004460:	20001364 	.word	0x20001364
 8004464:	200013e4 	.word	0x200013e4
 8004468:	200012b0 	.word	0x200012b0
 800446c:	20001218 	.word	0x20001218
 8004470:	2000121c 	.word	0x2000121c
 8004474:	20001220 	.word	0x20001220
 8004478:	20001224 	.word	0x20001224
 800447c:	41c00000 	.word	0x41c00000
 8004480:	c1c00000 	.word	0xc1c00000
 8004484:	47260400 	.word	0x47260400
 8004488:	c7260400 	.word	0xc7260400
 800448c:	20001214 	.word	0x20001214
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8004490:	2200      	movs	r2, #0
 8004492:	2101      	movs	r1, #1
 8004494:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004498:	f003 fbb0 	bl	8007bfc <HAL_GPIO_WritePin>
//		  }
//		  else
//		  {
//		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Velocontrol.Output[NEW]);
//		  }
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMmap);
 800449c:	4b10      	ldr	r3, [pc, #64]	@ (80044e0 <PIDposition+0x3c4>)
 800449e:	edd3 7a00 	vldr	s15, [r3]
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <PIDposition+0x3c8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044aa:	ee17 2a90 	vmov	r2, s15
 80044ae:	635a      	str	r2, [r3, #52]	@ 0x34
//			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
//		  }
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(PWMmap));

	  }
}
 80044b0:	e011      	b.n	80044d6 <PIDposition+0x3ba>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80044b2:	2201      	movs	r2, #1
 80044b4:	2101      	movs	r1, #1
 80044b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044ba:	f003 fb9f 	bl	8007bfc <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(PWMmap));
 80044be:	4b08      	ldr	r3, [pc, #32]	@ (80044e0 <PIDposition+0x3c4>)
 80044c0:	edd3 7a00 	vldr	s15, [r3]
 80044c4:	eef0 7ae7 	vabs.f32	s15, s15
 80044c8:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <PIDposition+0x3c8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d0:	ee17 2a90 	vmov	r2, s15
 80044d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bdb0      	pop	{r4, r5, r7, pc}
 80044de:	bf00      	nop
 80044e0:	20001214 	.word	0x20001214
 80044e4:	200005e8 	.word	0x200005e8

080044e8 <State_To_Mode>:
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol2.Output[NEW]));
	  }
}

void State_To_Mode(){
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
        if(registerFrame[0x01].U16 == 0b0001){
 80044ec:	4b47      	ldr	r3, [pc, #284]	@ (800460c <State_To_Mode+0x124>)
 80044ee:	885b      	ldrh	r3, [r3, #2]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d11c      	bne.n	800452e <State_To_Mode+0x46>
        	registerFrame[0x01].U16 = 0b0000;
 80044f4:	4b45      	ldr	r3, [pc, #276]	@ (800460c <State_To_Mode+0x124>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0001;
 80044fa:	4b44      	ldr	r3, [pc, #272]	@ (800460c <State_To_Mode+0x124>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	841a      	strh	r2, [r3, #32]
        	Mode = 1;
 8004500:	4b43      	ldr	r3, [pc, #268]	@ (8004610 <State_To_Mode+0x128>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
        	state_ALL = 4;
 8004506:	4b43      	ldr	r3, [pc, #268]	@ (8004614 <State_To_Mode+0x12c>)
 8004508:	2204      	movs	r2, #4
 800450a:	601a      	str	r2, [r3, #0]
        	state = 1;
 800450c:	4b42      	ldr	r3, [pc, #264]	@ (8004618 <State_To_Mode+0x130>)
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
        	A = 6000;
 8004512:	4b42      	ldr	r3, [pc, #264]	@ (800461c <State_To_Mode+0x134>)
 8004514:	f241 7270 	movw	r2, #6000	@ 0x1770
 8004518:	601a      	str	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 800451a:	2200      	movs	r2, #0
 800451c:	2108      	movs	r1, #8
 800451e:	4840      	ldr	r0, [pc, #256]	@ (8004620 <State_To_Mode+0x138>)
 8004520:	f003 fb6c 	bl	8007bfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 8004524:	2201      	movs	r2, #1
 8004526:	2104      	movs	r1, #4
 8004528:	483d      	ldr	r0, [pc, #244]	@ (8004620 <State_To_Mode+0x138>)
 800452a:	f003 fb67 	bl	8007bfc <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b0010){
 800452e:	4b37      	ldr	r3, [pc, #220]	@ (800460c <State_To_Mode+0x124>)
 8004530:	885b      	ldrh	r3, [r3, #2]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d10f      	bne.n	8004556 <State_To_Mode+0x6e>
//            Mode = 2;
        	Mode = 1;
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <State_To_Mode+0x128>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]
            state_ALL = 0;
 800453c:	4b35      	ldr	r3, [pc, #212]	@ (8004614 <State_To_Mode+0x12c>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 8004542:	2200      	movs	r2, #0
 8004544:	2108      	movs	r1, #8
 8004546:	4836      	ldr	r0, [pc, #216]	@ (8004620 <State_To_Mode+0x138>)
 8004548:	f003 fb58 	bl	8007bfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 800454c:	2201      	movs	r2, #1
 800454e:	2104      	movs	r1, #4
 8004550:	4833      	ldr	r0, [pc, #204]	@ (8004620 <State_To_Mode+0x138>)
 8004552:	f003 fb53 	bl	8007bfc <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b0100){
 8004556:	4b2d      	ldr	r3, [pc, #180]	@ (800460c <State_To_Mode+0x124>)
 8004558:	885b      	ldrh	r3, [r3, #2]
 800455a:	2b04      	cmp	r3, #4
 800455c:	d120      	bne.n	80045a0 <State_To_Mode+0xb8>
//            Mode = 3;
        	Mode = 1;
 800455e:	4b2c      	ldr	r3, [pc, #176]	@ (8004610 <State_To_Mode+0x128>)
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]
        	registerFrame[0x01].U16 = 0b0000;
 8004564:	4b29      	ldr	r3, [pc, #164]	@ (800460c <State_To_Mode+0x124>)
 8004566:	2200      	movs	r2, #0
 8004568:	805a      	strh	r2, [r3, #2]
			splitInteger(registerFrame[0x21].U16, Pick_Order);
 800456a:	4b28      	ldr	r3, [pc, #160]	@ (800460c <State_To_Mode+0x124>)
 800456c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8004570:	492c      	ldr	r1, [pc, #176]	@ (8004624 <State_To_Mode+0x13c>)
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fba4 	bl	8004cc0 <splitInteger>
			splitInteger(registerFrame[0x22].U16, Place_Order);
 8004578:	4b24      	ldr	r3, [pc, #144]	@ (800460c <State_To_Mode+0x124>)
 800457a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800457e:	492a      	ldr	r1, [pc, #168]	@ (8004628 <State_To_Mode+0x140>)
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fb9d 	bl	8004cc0 <splitInteger>
			state_ALL = 5;
 8004586:	4b23      	ldr	r3, [pc, #140]	@ (8004614 <State_To_Mode+0x12c>)
 8004588:	2205      	movs	r2, #5
 800458a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 800458c:	2200      	movs	r2, #0
 800458e:	2108      	movs	r1, #8
 8004590:	4823      	ldr	r0, [pc, #140]	@ (8004620 <State_To_Mode+0x138>)
 8004592:	f003 fb33 	bl	8007bfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 8004596:	2201      	movs	r2, #1
 8004598:	2104      	movs	r1, #4
 800459a:	4821      	ldr	r0, [pc, #132]	@ (8004620 <State_To_Mode+0x138>)
 800459c:	f003 fb2e 	bl	8007bfc <HAL_GPIO_WritePin>
        }
        if(registerFrame[0x01].U16 == 0b1000){
 80045a0:	4b1a      	ldr	r3, [pc, #104]	@ (800460c <State_To_Mode+0x124>)
 80045a2:	885b      	ldrh	r3, [r3, #2]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d12f      	bne.n	8004608 <State_To_Mode+0x120>
//          Point Mode
        	Mode = 1;
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <State_To_Mode+0x128>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
        	registerFrame[0x01].U16 = 0b0000;
 80045ae:	4b17      	ldr	r3, [pc, #92]	@ (800460c <State_To_Mode+0x124>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b00010000;
 80045b4:	4b15      	ldr	r3, [pc, #84]	@ (800460c <State_To_Mode+0x124>)
 80045b6:	2210      	movs	r2, #16
 80045b8:	841a      	strh	r2, [r3, #32]
			Goal_Point = registerFrame[0x30].U16/10;
 80045ba:	4b14      	ldr	r3, [pc, #80]	@ (800460c <State_To_Mode+0x124>)
 80045bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80045c0:	4a1a      	ldr	r2, [pc, #104]	@ (800462c <State_To_Mode+0x144>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	08db      	lsrs	r3, r3, #3
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	4b18      	ldr	r3, [pc, #96]	@ (8004630 <State_To_Mode+0x148>)
 80045ce:	601a      	str	r2, [r3, #0]
			Pos_Target = Goal_Point;
 80045d0:	4b17      	ldr	r3, [pc, #92]	@ (8004630 <State_To_Mode+0x148>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045dc:	4b15      	ldr	r3, [pc, #84]	@ (8004634 <State_To_Mode+0x14c>)
 80045de:	edc3 7a00 	vstr	s15, [r3]
			rangePos = 0.2;
 80045e2:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <State_To_Mode+0x150>)
 80045e4:	4a15      	ldr	r2, [pc, #84]	@ (800463c <State_To_Mode+0x154>)
 80045e6:	601a      	str	r2, [r3, #0]
			state_ALL = 3;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <State_To_Mode+0x12c>)
 80045ea:	2203      	movs	r2, #3
 80045ec:	601a      	str	r2, [r3, #0]
			state_ALL_Old = 2;
 80045ee:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <State_To_Mode+0x158>)
 80045f0:	2202      	movs	r2, #2
 80045f2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,0);
 80045f4:	2200      	movs	r2, #0
 80045f6:	2108      	movs	r1, #8
 80045f8:	4809      	ldr	r0, [pc, #36]	@ (8004620 <State_To_Mode+0x138>)
 80045fa:	f003 faff 	bl	8007bfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,1);
 80045fe:	2201      	movs	r2, #1
 8004600:	2104      	movs	r1, #4
 8004602:	4807      	ldr	r0, [pc, #28]	@ (8004620 <State_To_Mode+0x138>)
 8004604:	f003 fafa 	bl	8007bfc <HAL_GPIO_WritePin>
        }
}
 8004608:	bf00      	nop
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20001048 	.word	0x20001048
 8004610:	200011dc 	.word	0x200011dc
 8004614:	20000248 	.word	0x20000248
 8004618:	200013c5 	.word	0x200013c5
 800461c:	20000244 	.word	0x20000244
 8004620:	48000800 	.word	0x48000800
 8004624:	200011ec 	.word	0x200011ec
 8004628:	20001200 	.word	0x20001200
 800462c:	cccccccd 	.word	0xcccccccd
 8004630:	200011e8 	.word	0x200011e8
 8004634:	20001354 	.word	0x20001354
 8004638:	20000250 	.word	0x20000250
 800463c:	3e4ccccd 	.word	0x3e4ccccd
 8004640:	2000122c 	.word	0x2000122c

08004644 <Heartbeat>:

void Heartbeat(){
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
        registerFrame[0x00].U16 =22881;
 8004648:	4b04      	ldr	r3, [pc, #16]	@ (800465c <Heartbeat+0x18>)
 800464a:	f645 1261 	movw	r2, #22881	@ 0x5961
 800464e:	801a      	strh	r2, [r3, #0]
    }
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20001048 	.word	0x20001048

08004660 <Routine>:

void Routine () {
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
        if (registerFrame[0x00].U16 == 18537){
 8004664:	4b08      	ldr	r3, [pc, #32]	@ (8004688 <Routine+0x28>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	f644 0269 	movw	r2, #18537	@ 0x4869
 800466c:	4293      	cmp	r3, r2
 800466e:	d105      	bne.n	800467c <Routine+0x1c>
//            registerFrame[0x04].U16 = Gripper_Movement_Actual_Status;
            registerFrame[0x10].U16 = 0b0001;
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <Routine+0x28>)
 8004672:	2201      	movs	r2, #1
 8004674:	841a      	strh	r2, [r3, #32]
            registerFrame[0x10].U16 = 0b0000;
 8004676:	4b04      	ldr	r3, [pc, #16]	@ (8004688 <Routine+0x28>)
 8004678:	2200      	movs	r2, #0
 800467a:	841a      	strh	r2, [r3, #32]
        }
}
 800467c:	bf00      	nop
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20001048 	.word	0x20001048

0800468c <UpdatePosRoutine>:
void UpdatePosRoutine()
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
	if(LeadSW[0] == 0)
 8004690:	4b35      	ldr	r3, [pc, #212]	@ (8004768 <UpdatePosRoutine+0xdc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <UpdatePosRoutine+0x14>
	{
		registerFrame[0x04].U16 = 0b0001;
 8004698:	4b34      	ldr	r3, [pc, #208]	@ (800476c <UpdatePosRoutine+0xe0>)
 800469a:	2201      	movs	r2, #1
 800469c:	811a      	strh	r2, [r3, #8]
 800469e:	e00a      	b.n	80046b6 <UpdatePosRoutine+0x2a>
	}
	else if(LeadSW[1] == 0)
 80046a0:	4b31      	ldr	r3, [pc, #196]	@ (8004768 <UpdatePosRoutine+0xdc>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <UpdatePosRoutine+0x24>
	{
		registerFrame[0x04].U16 = 0b0010;
 80046a8:	4b30      	ldr	r3, [pc, #192]	@ (800476c <UpdatePosRoutine+0xe0>)
 80046aa:	2202      	movs	r2, #2
 80046ac:	811a      	strh	r2, [r3, #8]
 80046ae:	e002      	b.n	80046b6 <UpdatePosRoutine+0x2a>
	}
	else
	{
		registerFrame[0x04].U16 = 0b0000;
 80046b0:	4b2e      	ldr	r3, [pc, #184]	@ (800476c <UpdatePosRoutine+0xe0>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	811a      	strh	r2, [r3, #8]
	}
	registerFrame[0x11].U16 = fabs(Pos)*10;
 80046b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004770 <UpdatePosRoutine+0xe4>)
 80046b8:	edd3 7a00 	vldr	s15, [r3]
 80046bc:	eef0 7ae7 	vabs.f32	s15, s15
 80046c0:	ee17 0a90 	vmov	r0, s15
 80046c4:	f7fb ff0c 	bl	80004e0 <__aeabi_f2d>
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	4b29      	ldr	r3, [pc, #164]	@ (8004774 <UpdatePosRoutine+0xe8>)
 80046ce:	f7fb ff5f 	bl	8000590 <__aeabi_dmul>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	f7fc f9f3 	bl	8000ac4 <__aeabi_d2uiz>
 80046de:	4603      	mov	r3, r0
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	4b22      	ldr	r3, [pc, #136]	@ (800476c <UpdatePosRoutine+0xe0>)
 80046e4:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[0x12].U16 = fabs(speed_fill)*10;
 80046e6:	4b24      	ldr	r3, [pc, #144]	@ (8004778 <UpdatePosRoutine+0xec>)
 80046e8:	edd3 7a00 	vldr	s15, [r3]
 80046ec:	eef0 7ae7 	vabs.f32	s15, s15
 80046f0:	ee17 0a90 	vmov	r0, s15
 80046f4:	f7fb fef4 	bl	80004e0 <__aeabi_f2d>
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004774 <UpdatePosRoutine+0xe8>)
 80046fe:	f7fb ff47 	bl	8000590 <__aeabi_dmul>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	f7fc f9db 	bl	8000ac4 <__aeabi_d2uiz>
 800470e:	4603      	mov	r3, r0
 8004710:	b29a      	uxth	r2, r3
 8004712:	4b16      	ldr	r3, [pc, #88]	@ (800476c <UpdatePosRoutine+0xe0>)
 8004714:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 = fabs(feedback[2])*10;
 8004716:	4b19      	ldr	r3, [pc, #100]	@ (800477c <UpdatePosRoutine+0xf0>)
 8004718:	edd3 7a02 	vldr	s15, [r3, #8]
 800471c:	eef0 7ae7 	vabs.f32	s15, s15
 8004720:	ee17 0a90 	vmov	r0, s15
 8004724:	f7fb fedc 	bl	80004e0 <__aeabi_f2d>
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	4b11      	ldr	r3, [pc, #68]	@ (8004774 <UpdatePosRoutine+0xe8>)
 800472e:	f7fb ff2f 	bl	8000590 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	f7fc f9c3 	bl	8000ac4 <__aeabi_d2uiz>
 800473e:	4603      	mov	r3, r0
 8004740:	b29a      	uxth	r2, r3
 8004742:	4b0a      	ldr	r3, [pc, #40]	@ (800476c <UpdatePosRoutine+0xe0>)
 8004744:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 = X_Actual_Position*10;
 8004746:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <UpdatePosRoutine+0xf4>)
 8004748:	edd3 7a00 	vldr	s15, [r3]
 800474c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004758:	ee17 3a90 	vmov	r3, s15
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b03      	ldr	r3, [pc, #12]	@ (800476c <UpdatePosRoutine+0xe0>)
 8004760:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 8004764:	bf00      	nop
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20001254 	.word	0x20001254
 800476c:	20001048 	.word	0x20001048
 8004770:	200013f8 	.word	0x200013f8
 8004774:	40240000 	.word	0x40240000
 8004778:	200013e4 	.word	0x200013e4
 800477c:	20001298 	.word	0x20001298
 8004780:	200011d8 	.word	0x200011d8

08004784 <Vacuum>:
void Vacuum() {
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
        Vacuum_Status = registerFrame[0x02].U16;
 8004788:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <Vacuum+0x30>)
 800478a:	889b      	ldrh	r3, [r3, #4]
 800478c:	461a      	mov	r2, r3
 800478e:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <Vacuum+0x34>)
 8004790:	601a      	str	r2, [r3, #0]
        if(Vacuum_Status == 1)
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <Vacuum+0x34>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <Vacuum+0x22>
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,1);
 800479a:	2201      	movs	r2, #1
 800479c:	2140      	movs	r1, #64	@ 0x40
 800479e:	4807      	ldr	r0, [pc, #28]	@ (80047bc <Vacuum+0x38>)
 80047a0:	f003 fa2c 	bl	8007bfc <HAL_GPIO_WritePin>
        }
        else
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
        }
}
 80047a4:	e004      	b.n	80047b0 <Vacuum+0x2c>
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,0);
 80047a6:	2200      	movs	r2, #0
 80047a8:	2140      	movs	r1, #64	@ 0x40
 80047aa:	4804      	ldr	r0, [pc, #16]	@ (80047bc <Vacuum+0x38>)
 80047ac:	f003 fa26 	bl	8007bfc <HAL_GPIO_WritePin>
}
 80047b0:	bf00      	nop
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20001048 	.word	0x20001048
 80047b8:	200011e0 	.word	0x200011e0
 80047bc:	48000800 	.word	0x48000800

080047c0 <GripperMovement>:
//Write Gripper Movement Status
void GripperMovement() {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
        Gripper_Movement_Status = registerFrame[0x03].U16;
 80047c4:	4b28      	ldr	r3, [pc, #160]	@ (8004868 <GripperMovement+0xa8>)
 80047c6:	88db      	ldrh	r3, [r3, #6]
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b28      	ldr	r3, [pc, #160]	@ (800486c <GripperMovement+0xac>)
 80047cc:	601a      	str	r2, [r3, #0]
        if( Gripper_Movement_Status == 1)
 80047ce:	4b27      	ldr	r3, [pc, #156]	@ (800486c <GripperMovement+0xac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d11b      	bne.n	800480e <GripperMovement+0x4e>
	   {
        	if(LeadSW[1] == 0)
 80047d6:	4b26      	ldr	r3, [pc, #152]	@ (8004870 <GripperMovement+0xb0>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <GripperMovement+0x36>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 80047de:	2200      	movs	r2, #0
 80047e0:	2120      	movs	r1, #32
 80047e2:	4824      	ldr	r0, [pc, #144]	@ (8004874 <GripperMovement+0xb4>)
 80047e4:	f003 fa0a 	bl	8007bfc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047ee:	4821      	ldr	r0, [pc, #132]	@ (8004874 <GripperMovement+0xb4>)
 80047f0:	f003 fa04 	bl	8007bfc <HAL_GPIO_WritePin>
	   else
	   {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
	   }
}
 80047f4:	e036      	b.n	8004864 <GripperMovement+0xa4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,1);
 80047f6:	2201      	movs	r2, #1
 80047f8:	2120      	movs	r1, #32
 80047fa:	481e      	ldr	r0, [pc, #120]	@ (8004874 <GripperMovement+0xb4>)
 80047fc:	f003 f9fe 	bl	8007bfc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8004800:	2200      	movs	r2, #0
 8004802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004806:	481b      	ldr	r0, [pc, #108]	@ (8004874 <GripperMovement+0xb4>)
 8004808:	f003 f9f8 	bl	8007bfc <HAL_GPIO_WritePin>
}
 800480c:	e02a      	b.n	8004864 <GripperMovement+0xa4>
        else if(Gripper_Movement_Status == 0)
 800480e:	4b17      	ldr	r3, [pc, #92]	@ (800486c <GripperMovement+0xac>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11b      	bne.n	800484e <GripperMovement+0x8e>
        	if(LeadSW[0] == 0)
 8004816:	4b16      	ldr	r3, [pc, #88]	@ (8004870 <GripperMovement+0xb0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <GripperMovement+0x76>
        		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 800481e:	2200      	movs	r2, #0
 8004820:	2120      	movs	r1, #32
 8004822:	4814      	ldr	r0, [pc, #80]	@ (8004874 <GripperMovement+0xb4>)
 8004824:	f003 f9ea 	bl	8007bfc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8004828:	2200      	movs	r2, #0
 800482a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800482e:	4811      	ldr	r0, [pc, #68]	@ (8004874 <GripperMovement+0xb4>)
 8004830:	f003 f9e4 	bl	8007bfc <HAL_GPIO_WritePin>
}
 8004834:	e016      	b.n	8004864 <GripperMovement+0xa4>
        		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 8004836:	2200      	movs	r2, #0
 8004838:	2120      	movs	r1, #32
 800483a:	480e      	ldr	r0, [pc, #56]	@ (8004874 <GripperMovement+0xb4>)
 800483c:	f003 f9de 	bl	8007bfc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,1);
 8004840:	2201      	movs	r2, #1
 8004842:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004846:	480b      	ldr	r0, [pc, #44]	@ (8004874 <GripperMovement+0xb4>)
 8004848:	f003 f9d8 	bl	8007bfc <HAL_GPIO_WritePin>
}
 800484c:	e00a      	b.n	8004864 <GripperMovement+0xa4>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,0);
 800484e:	2200      	movs	r2, #0
 8004850:	2120      	movs	r1, #32
 8004852:	4808      	ldr	r0, [pc, #32]	@ (8004874 <GripperMovement+0xb4>)
 8004854:	f003 f9d2 	bl	8007bfc <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,0);
 8004858:	2200      	movs	r2, #0
 800485a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800485e:	4805      	ldr	r0, [pc, #20]	@ (8004874 <GripperMovement+0xb4>)
 8004860:	f003 f9cc 	bl	8007bfc <HAL_GPIO_WritePin>
}
 8004864:	bf00      	nop
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20001048 	.word	0x20001048
 800486c:	200011e4 	.word	0x200011e4
 8004870:	20001254 	.word	0x20001254
 8004874:	48000800 	.word	0x48000800

08004878 <SetHome>:
void SetHome() {
 8004878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487c:	b086      	sub	sp, #24
 800487e:	af00      	add	r7, sp, #0
	if(Mode == 1)
 8004880:	4b99      	ldr	r3, [pc, #612]	@ (8004ae8 <SetHome+0x270>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	f040 8096 	bne.w	80049b6 <SetHome+0x13e>
		{
			registerFrame[0x01].U16 = 0b0000;
 800488a:	4b98      	ldr	r3, [pc, #608]	@ (8004aec <SetHome+0x274>)
 800488c:	2200      	movs	r2, #0
 800488e:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0010;
 8004890:	4b96      	ldr	r3, [pc, #600]	@ (8004aec <SetHome+0x274>)
 8004892:	2202      	movs	r2, #2
 8004894:	841a      	strh	r2, [r3, #32]
			if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8004896:	4b96      	ldr	r3, [pc, #600]	@ (8004af0 <SetHome+0x278>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d006      	beq.n	80048ac <SetHome+0x34>
 800489e:	2110      	movs	r1, #16
 80048a0:	4894      	ldr	r0, [pc, #592]	@ (8004af4 <SetHome+0x27c>)
 80048a2:	f003 f993 	bl	8007bcc <HAL_GPIO_ReadPin>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d175      	bne.n	8004998 <SetHome+0x120>
			{
				if(CountHome > 100)
 80048ac:	4b92      	ldr	r3, [pc, #584]	@ (8004af8 <SetHome+0x280>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b64      	cmp	r3, #100	@ 0x64
 80048b2:	dd6b      	ble.n	800498c <SetHome+0x114>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80048b4:	2201      	movs	r2, #1
 80048b6:	2101      	movs	r1, #1
 80048b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048bc:	f003 f99e 	bl	8007bfc <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80048c0:	4b8e      	ldr	r3, [pc, #568]	@ (8004afc <SetHome+0x284>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2200      	movs	r2, #0
 80048c6:	635a      	str	r2, [r3, #52]	@ 0x34
					static uint64_t DelayTime = 0;
					if(DelayTime < HAL_GetTick())
 80048c8:	f000 ff38 	bl	800573c <HAL_GetTick>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2200      	movs	r2, #0
 80048d0:	469a      	mov	sl, r3
 80048d2:	4693      	mov	fp, r2
 80048d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004b00 <SetHome+0x288>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	4552      	cmp	r2, sl
 80048dc:	eb73 030b 	sbcs.w	r3, r3, fp
 80048e0:	d211      	bcs.n	8004906 <SetHome+0x8e>
					{
						 CountingDelay++;
 80048e2:	4b88      	ldr	r3, [pc, #544]	@ (8004b04 <SetHome+0x28c>)
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	4b86      	ldr	r3, [pc, #536]	@ (8004b04 <SetHome+0x28c>)
 80048ec:	801a      	strh	r2, [r3, #0]
						 DelayTime = HAL_GetTick()+10;
 80048ee:	f000 ff25 	bl	800573c <HAL_GetTick>
 80048f2:	4603      	mov	r3, r0
 80048f4:	330a      	adds	r3, #10
 80048f6:	2200      	movs	r2, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	617a      	str	r2, [r7, #20]
 80048fc:	4b80      	ldr	r3, [pc, #512]	@ (8004b00 <SetHome+0x288>)
 80048fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004902:	e9c3 1200 	strd	r1, r2, [r3]
					}
					//HAL_Delay(1000);
					if(CountingDelay > 100)
 8004906:	4b7f      	ldr	r3, [pc, #508]	@ (8004b04 <SetHome+0x28c>)
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	2b64      	cmp	r3, #100	@ 0x64
 800490c:	f240 81a7 	bls.w	8004c5e <SetHome+0x3e6>
					{
						HOME = 0;
 8004910:	4b77      	ldr	r3, [pc, #476]	@ (8004af0 <SetHome+0x278>)
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(&htim3,0);
 8004916:	4b7c      	ldr	r3, [pc, #496]	@ (8004b08 <SetHome+0x290>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	625a      	str	r2, [r3, #36]	@ 0x24
						Count = 0;
 800491e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b0c <SetHome+0x294>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
						QEIdata.Position[NEW] = 0;
 8004924:	4b7a      	ldr	r3, [pc, #488]	@ (8004b10 <SetHome+0x298>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
						QEIdata.Position[OLD] = 0;
 800492a:	4b79      	ldr	r3, [pc, #484]	@ (8004b10 <SetHome+0x298>)
 800492c:	2200      	movs	r2, #0
 800492e:	605a      	str	r2, [r3, #4]
//						Pos_Start = 0;
//						state_ALL = 2;
						VacuumNF = 0;
 8004930:	4b78      	ldr	r3, [pc, #480]	@ (8004b14 <SetHome+0x29c>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
						Pos_Target = 6;
 8004936:	4b78      	ldr	r3, [pc, #480]	@ (8004b18 <SetHome+0x2a0>)
 8004938:	4a78      	ldr	r2, [pc, #480]	@ (8004b1c <SetHome+0x2a4>)
 800493a:	601a      	str	r2, [r3, #0]
						state_ALL = 3;
 800493c:	4b78      	ldr	r3, [pc, #480]	@ (8004b20 <SetHome+0x2a8>)
 800493e:	2203      	movs	r2, #3
 8004940:	601a      	str	r2, [r3, #0]
						state_ALL_Old = 1;
 8004942:	4b78      	ldr	r3, [pc, #480]	@ (8004b24 <SetHome+0x2ac>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]
						state_Tra = 0;
 8004948:	4b77      	ldr	r3, [pc, #476]	@ (8004b28 <SetHome+0x2b0>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
						CountHome = 0;
 800494e:	4b6a      	ldr	r3, [pc, #424]	@ (8004af8 <SetHome+0x280>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
						Place = 0;
 8004954:	4b75      	ldr	r3, [pc, #468]	@ (8004b2c <SetHome+0x2b4>)
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
						Pick = 0;
 800495a:	4b75      	ldr	r3, [pc, #468]	@ (8004b30 <SetHome+0x2b8>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
						state_Pick_Place = 0;
 8004960:	4b74      	ldr	r3, [pc, #464]	@ (8004b34 <SetHome+0x2bc>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
						registerFrame[0x10].U16 = 0b0000;//Reset ModBus
 8004966:	4b61      	ldr	r3, [pc, #388]	@ (8004aec <SetHome+0x274>)
 8004968:	2200      	movs	r2, #0
 800496a:	841a      	strh	r2, [r3, #32]
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 800496c:	2201      	movs	r2, #1
 800496e:	2108      	movs	r1, #8
 8004970:	4871      	ldr	r0, [pc, #452]	@ (8004b38 <SetHome+0x2c0>)
 8004972:	f003 f943 	bl	8007bfc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8004976:	2200      	movs	r2, #0
 8004978:	2104      	movs	r1, #4
 800497a:	486f      	ldr	r0, [pc, #444]	@ (8004b38 <SetHome+0x2c0>)
 800497c:	f003 f93e 	bl	8007bfc <HAL_GPIO_WritePin>
						resetHome();
 8004980:	f7fe fe8c 	bl	800369c <resetHome>
						CountingDelay = 0;
 8004984:	4b5f      	ldr	r3, [pc, #380]	@ (8004b04 <SetHome+0x28c>)
 8004986:	2200      	movs	r2, #0
 8004988:	801a      	strh	r2, [r3, #0]
				if(CountHome > 100)
 800498a:	e168      	b.n	8004c5e <SetHome+0x3e6>
					}

				}
				else
				{
					CountHome++;
 800498c:	4b5a      	ldr	r3, [pc, #360]	@ (8004af8 <SetHome+0x280>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	4a59      	ldr	r2, [pc, #356]	@ (8004af8 <SetHome+0x280>)
 8004994:	6013      	str	r3, [r2, #0]
				if(CountHome > 100)
 8004996:	e162      	b.n	8004c5e <SetHome+0x3e6>
				}
			}

	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8004998:	2201      	movs	r2, #1
 800499a:	2101      	movs	r1, #1
 800499c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049a0:	f003 f92c 	bl	8007bfc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7900);
 80049a4:	4b55      	ldr	r3, [pc, #340]	@ (8004afc <SetHome+0x284>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f641 62dc 	movw	r2, #7900	@ 0x1edc
 80049ac:	635a      	str	r2, [r3, #52]	@ 0x34
		CountHome = 0;
 80049ae:	4b52      	ldr	r3, [pc, #328]	@ (8004af8 <SetHome+0x280>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7900);
			CountHome = 0;
			}
		}
    }
 80049b4:	e158      	b.n	8004c68 <SetHome+0x3f0>
	else if(emerthick == 1)
 80049b6:	4b61      	ldr	r3, [pc, #388]	@ (8004b3c <SetHome+0x2c4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	f040 80c4 	bne.w	8004b48 <SetHome+0x2d0>
				if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 80049c0:	4b4b      	ldr	r3, [pc, #300]	@ (8004af0 <SetHome+0x278>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d006      	beq.n	80049d6 <SetHome+0x15e>
 80049c8:	2110      	movs	r1, #16
 80049ca:	484a      	ldr	r0, [pc, #296]	@ (8004af4 <SetHome+0x27c>)
 80049cc:	f003 f8fe 	bl	8007bcc <HAL_GPIO_ReadPin>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d179      	bne.n	8004aca <SetHome+0x252>
					if(CountHome > 100)
 80049d6:	4b48      	ldr	r3, [pc, #288]	@ (8004af8 <SetHome+0x280>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b64      	cmp	r3, #100	@ 0x64
 80049dc:	dd6f      	ble.n	8004abe <SetHome+0x246>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80049de:	2201      	movs	r2, #1
 80049e0:	2101      	movs	r1, #1
 80049e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049e6:	f003 f909 	bl	8007bfc <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80049ea:	4b44      	ldr	r3, [pc, #272]	@ (8004afc <SetHome+0x284>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	635a      	str	r2, [r3, #52]	@ 0x34
						if(DelayTime < HAL_GetTick())
 80049f2:	f000 fea3 	bl	800573c <HAL_GetTick>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2200      	movs	r2, #0
 80049fa:	4698      	mov	r8, r3
 80049fc:	4691      	mov	r9, r2
 80049fe:	4b50      	ldr	r3, [pc, #320]	@ (8004b40 <SetHome+0x2c8>)
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	4542      	cmp	r2, r8
 8004a06:	eb73 0309 	sbcs.w	r3, r3, r9
 8004a0a:	d211      	bcs.n	8004a30 <SetHome+0x1b8>
							 CountingDelay++;
 8004a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b04 <SetHome+0x28c>)
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	4b3b      	ldr	r3, [pc, #236]	@ (8004b04 <SetHome+0x28c>)
 8004a16:	801a      	strh	r2, [r3, #0]
							 DelayTime = HAL_GetTick()+10;
 8004a18:	f000 fe90 	bl	800573c <HAL_GetTick>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	330a      	adds	r3, #10
 8004a20:	2200      	movs	r2, #0
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	60fa      	str	r2, [r7, #12]
 8004a26:	4b46      	ldr	r3, [pc, #280]	@ (8004b40 <SetHome+0x2c8>)
 8004a28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a2c:	e9c3 1200 	strd	r1, r2, [r3]
						if(CountingDelay > 100)
 8004a30:	4b34      	ldr	r3, [pc, #208]	@ (8004b04 <SetHome+0x28c>)
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	2b64      	cmp	r3, #100	@ 0x64
 8004a36:	f240 8114 	bls.w	8004c62 <SetHome+0x3ea>
							HOME = 0;
 8004a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8004af0 <SetHome+0x278>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
							__HAL_TIM_SET_COUNTER(&htim3,0);
 8004a40:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <SetHome+0x290>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2200      	movs	r2, #0
 8004a46:	625a      	str	r2, [r3, #36]	@ 0x24
							Count = 0;
 8004a48:	4b30      	ldr	r3, [pc, #192]	@ (8004b0c <SetHome+0x294>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
							QEIdata.Position[NEW] = 0;
 8004a4e:	4b30      	ldr	r3, [pc, #192]	@ (8004b10 <SetHome+0x298>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
							QEIdata.Position[OLD] = 0;
 8004a54:	4b2e      	ldr	r3, [pc, #184]	@ (8004b10 <SetHome+0x298>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	605a      	str	r2, [r3, #4]
							Pos_Start = 0;
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b44 <SetHome+0x2cc>)
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
							state_ALL = 2;
 8004a62:	4b2f      	ldr	r3, [pc, #188]	@ (8004b20 <SetHome+0x2a8>)
 8004a64:	2202      	movs	r2, #2
 8004a66:	601a      	str	r2, [r3, #0]
							VacuumNF = 0;
 8004a68:	4b2a      	ldr	r3, [pc, #168]	@ (8004b14 <SetHome+0x29c>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
							state_ALL_Old = 1;
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b24 <SetHome+0x2ac>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
							state_Tra = 0;
 8004a74:	4b2c      	ldr	r3, [pc, #176]	@ (8004b28 <SetHome+0x2b0>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
							CountHome = 0;
 8004a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004af8 <SetHome+0x280>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
							Place = 0;
 8004a80:	4b2a      	ldr	r3, [pc, #168]	@ (8004b2c <SetHome+0x2b4>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
							Pick = 0;
 8004a86:	4b2a      	ldr	r3, [pc, #168]	@ (8004b30 <SetHome+0x2b8>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
							emerthick = 0;
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b3c <SetHome+0x2c4>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
							state_Pick_Place = 0;
 8004a92:	4b28      	ldr	r3, [pc, #160]	@ (8004b34 <SetHome+0x2bc>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
							registerFrame[0x10].U16 = 0b0000;//Reset ModBus
 8004a98:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <SetHome+0x274>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	841a      	strh	r2, [r3, #32]
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	2108      	movs	r1, #8
 8004aa2:	4825      	ldr	r0, [pc, #148]	@ (8004b38 <SetHome+0x2c0>)
 8004aa4:	f003 f8aa 	bl	8007bfc <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2104      	movs	r1, #4
 8004aac:	4822      	ldr	r0, [pc, #136]	@ (8004b38 <SetHome+0x2c0>)
 8004aae:	f003 f8a5 	bl	8007bfc <HAL_GPIO_WritePin>
							resetHome();
 8004ab2:	f7fe fdf3 	bl	800369c <resetHome>
							CountingDelay = 0;
 8004ab6:	4b13      	ldr	r3, [pc, #76]	@ (8004b04 <SetHome+0x28c>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	801a      	strh	r2, [r3, #0]
					if(CountHome > 100)
 8004abc:	e0d1      	b.n	8004c62 <SetHome+0x3ea>
						CountHome++;
 8004abe:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <SetHome+0x280>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8004af8 <SetHome+0x280>)
 8004ac6:	6013      	str	r3, [r2, #0]
					if(CountHome > 100)
 8004ac8:	e0cb      	b.n	8004c62 <SetHome+0x3ea>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8004aca:	2201      	movs	r2, #1
 8004acc:	2101      	movs	r1, #1
 8004ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ad2:	f003 f893 	bl	8007bfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7900);
 8004ad6:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <SetHome+0x284>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f641 62dc 	movw	r2, #7900	@ 0x1edc
 8004ade:	635a      	str	r2, [r3, #52]	@ 0x34
			CountHome = 0;
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <SetHome+0x280>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
    }
 8004ae6:	e0bf      	b.n	8004c68 <SetHome+0x3f0>
 8004ae8:	200011dc 	.word	0x200011dc
 8004aec:	20001048 	.word	0x20001048
 8004af0:	20001238 	.word	0x20001238
 8004af4:	48000400 	.word	0x48000400
 8004af8:	20001264 	.word	0x20001264
 8004afc:	200005e8 	.word	0x200005e8
 8004b00:	20001498 	.word	0x20001498
 8004b04:	20001294 	.word	0x20001294
 8004b08:	2000051c 	.word	0x2000051c
 8004b0c:	20001400 	.word	0x20001400
 8004b10:	20001408 	.word	0x20001408
 8004b14:	20001268 	.word	0x20001268
 8004b18:	20001354 	.word	0x20001354
 8004b1c:	40c00000 	.word	0x40c00000
 8004b20:	20000248 	.word	0x20000248
 8004b24:	2000122c 	.word	0x2000122c
 8004b28:	20001370 	.word	0x20001370
 8004b2c:	20001288 	.word	0x20001288
 8004b30:	20001284 	.word	0x20001284
 8004b34:	20001234 	.word	0x20001234
 8004b38:	48000800 	.word	0x48000800
 8004b3c:	200012a4 	.word	0x200012a4
 8004b40:	200014a0 	.word	0x200014a0
 8004b44:	20001350 	.word	0x20001350
			if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 1)
 8004b48:	4b4a      	ldr	r3, [pc, #296]	@ (8004c74 <SetHome+0x3fc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d006      	beq.n	8004b5e <SetHome+0x2e6>
 8004b50:	2110      	movs	r1, #16
 8004b52:	4849      	ldr	r0, [pc, #292]	@ (8004c78 <SetHome+0x400>)
 8004b54:	f003 f83a 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d170      	bne.n	8004c40 <SetHome+0x3c8>
				if(CountHome > 100)
 8004b5e:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <SetHome+0x404>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b64      	cmp	r3, #100	@ 0x64
 8004b64:	dd66      	ble.n	8004c34 <SetHome+0x3bc>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8004b66:	2201      	movs	r2, #1
 8004b68:	2101      	movs	r1, #1
 8004b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b6e:	f003 f845 	bl	8007bfc <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8004b72:	4b43      	ldr	r3, [pc, #268]	@ (8004c80 <SetHome+0x408>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	635a      	str	r2, [r3, #52]	@ 0x34
					if(DelayTime < HAL_GetTick())
 8004b7a:	f000 fddf 	bl	800573c <HAL_GetTick>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2200      	movs	r2, #0
 8004b82:	461c      	mov	r4, r3
 8004b84:	4615      	mov	r5, r2
 8004b86:	4b3f      	ldr	r3, [pc, #252]	@ (8004c84 <SetHome+0x40c>)
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	42a2      	cmp	r2, r4
 8004b8e:	41ab      	sbcs	r3, r5
 8004b90:	d211      	bcs.n	8004bb6 <SetHome+0x33e>
						 CountingDelay++;
 8004b92:	4b3d      	ldr	r3, [pc, #244]	@ (8004c88 <SetHome+0x410>)
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c88 <SetHome+0x410>)
 8004b9c:	801a      	strh	r2, [r3, #0]
						 DelayTime = HAL_GetTick()+10;
 8004b9e:	f000 fdcd 	bl	800573c <HAL_GetTick>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	330a      	adds	r3, #10
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	4b35      	ldr	r3, [pc, #212]	@ (8004c84 <SetHome+0x40c>)
 8004bae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004bb2:	e9c3 1200 	strd	r1, r2, [r3]
					if(CountingDelay > 100)
 8004bb6:	4b34      	ldr	r3, [pc, #208]	@ (8004c88 <SetHome+0x410>)
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	2b64      	cmp	r3, #100	@ 0x64
 8004bbc:	d953      	bls.n	8004c66 <SetHome+0x3ee>
					HOME = 0;
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004c74 <SetHome+0x3fc>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim3,0);
 8004bc4:	4b31      	ldr	r3, [pc, #196]	@ (8004c8c <SetHome+0x414>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	625a      	str	r2, [r3, #36]	@ 0x24
					Count = 0;
 8004bcc:	4b30      	ldr	r3, [pc, #192]	@ (8004c90 <SetHome+0x418>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
					QEIdata.Position[NEW] = 0;
 8004bd2:	4b30      	ldr	r3, [pc, #192]	@ (8004c94 <SetHome+0x41c>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
					QEIdata.Position[OLD] = 0;
 8004bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c94 <SetHome+0x41c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	605a      	str	r2, [r3, #4]
					VacuumNF = 0;
 8004bde:	4b2e      	ldr	r3, [pc, #184]	@ (8004c98 <SetHome+0x420>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
					Pos_Target = 6;
 8004be4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c9c <SetHome+0x424>)
 8004be6:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca0 <SetHome+0x428>)
 8004be8:	601a      	str	r2, [r3, #0]
					state_ALL = 3;
 8004bea:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca4 <SetHome+0x42c>)
 8004bec:	2203      	movs	r2, #3
 8004bee:	601a      	str	r2, [r3, #0]
					state_ALL_Old = 1;
 8004bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca8 <SetHome+0x430>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
					state_Tra = 0;
 8004bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8004cac <SetHome+0x434>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
					CountHome = 0;
 8004bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8004c7c <SetHome+0x404>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
					Place = 0;
 8004c02:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb0 <SetHome+0x438>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
					Pick = 0;
 8004c08:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb4 <SetHome+0x43c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
					state_Pick_Place = 0;
 8004c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb8 <SetHome+0x440>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,1);
 8004c14:	2201      	movs	r2, #1
 8004c16:	2108      	movs	r1, #8
 8004c18:	4828      	ldr	r0, [pc, #160]	@ (8004cbc <SetHome+0x444>)
 8004c1a:	f002 ffef 	bl	8007bfc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,0);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2104      	movs	r1, #4
 8004c22:	4826      	ldr	r0, [pc, #152]	@ (8004cbc <SetHome+0x444>)
 8004c24:	f002 ffea 	bl	8007bfc <HAL_GPIO_WritePin>
					resetHome();
 8004c28:	f7fe fd38 	bl	800369c <resetHome>
					CountingDelay = 0;
 8004c2c:	4b16      	ldr	r3, [pc, #88]	@ (8004c88 <SetHome+0x410>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	801a      	strh	r2, [r3, #0]
				if(CountHome > 100)
 8004c32:	e018      	b.n	8004c66 <SetHome+0x3ee>
					CountHome++;
 8004c34:	4b11      	ldr	r3, [pc, #68]	@ (8004c7c <SetHome+0x404>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	4a10      	ldr	r2, [pc, #64]	@ (8004c7c <SetHome+0x404>)
 8004c3c:	6013      	str	r3, [r2, #0]
				if(CountHome > 100)
 8004c3e:	e012      	b.n	8004c66 <SetHome+0x3ee>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8004c40:	2201      	movs	r2, #1
 8004c42:	2101      	movs	r1, #1
 8004c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c48:	f002 ffd8 	bl	8007bfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7900);
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <SetHome+0x408>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f641 62dc 	movw	r2, #7900	@ 0x1edc
 8004c54:	635a      	str	r2, [r3, #52]	@ 0x34
			CountHome = 0;
 8004c56:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <SetHome+0x404>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
    }
 8004c5c:	e004      	b.n	8004c68 <SetHome+0x3f0>
				if(CountHome > 100)
 8004c5e:	bf00      	nop
 8004c60:	e002      	b.n	8004c68 <SetHome+0x3f0>
					if(CountHome > 100)
 8004c62:	bf00      	nop
 8004c64:	e000      	b.n	8004c68 <SetHome+0x3f0>
				if(CountHome > 100)
 8004c66:	bf00      	nop
    }
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c72:	bf00      	nop
 8004c74:	20001238 	.word	0x20001238
 8004c78:	48000400 	.word	0x48000400
 8004c7c:	20001264 	.word	0x20001264
 8004c80:	200005e8 	.word	0x200005e8
 8004c84:	200014a8 	.word	0x200014a8
 8004c88:	20001294 	.word	0x20001294
 8004c8c:	2000051c 	.word	0x2000051c
 8004c90:	20001400 	.word	0x20001400
 8004c94:	20001408 	.word	0x20001408
 8004c98:	20001268 	.word	0x20001268
 8004c9c:	20001354 	.word	0x20001354
 8004ca0:	40c00000 	.word	0x40c00000
 8004ca4:	20000248 	.word	0x20000248
 8004ca8:	2000122c 	.word	0x2000122c
 8004cac:	20001370 	.word	0x20001370
 8004cb0:	20001288 	.word	0x20001288
 8004cb4:	20001284 	.word	0x20001284
 8004cb8:	20001234 	.word	0x20001234
 8004cbc:	48000800 	.word	0x48000800

08004cc0 <splitInteger>:

void splitInteger(int number, int *digitsArray) {
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
    int temp = number;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
    for (int b = 0; b < 5; b++) {
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	e01d      	b.n	8004d10 <splitInteger+0x50>
        digitsArray[4 - b] = temp % 10;  // Getting the last digit
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f1c3 0304 	rsb	r3, r3, #4
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	18d0      	adds	r0, r2, r3
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	4b10      	ldr	r3, [pc, #64]	@ (8004d24 <splitInteger+0x64>)
 8004ce4:	fb83 2301 	smull	r2, r3, r3, r1
 8004ce8:	109a      	asrs	r2, r3, #2
 8004cea:	17cb      	asrs	r3, r1, #31
 8004cec:	1ad2      	subs	r2, r2, r3
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	1aca      	subs	r2, r1, r3
 8004cf8:	6002      	str	r2, [r0, #0]
        temp /= 10;  // Removing the last digit
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4a09      	ldr	r2, [pc, #36]	@ (8004d24 <splitInteger+0x64>)
 8004cfe:	fb82 1203 	smull	r1, r2, r2, r3
 8004d02:	1092      	asrs	r2, r2, #2
 8004d04:	17db      	asrs	r3, r3, #31
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	60fb      	str	r3, [r7, #12]
    for (int b = 0; b < 5; b++) {
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	ddde      	ble.n	8004cd4 <splitInteger+0x14>
    }
}
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	66666667 	.word	0x66666667

08004d28 <SensorRead>:
void SensorRead()
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
	ButtonTest[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8004d2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d34:	f002 ff4a 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b28      	ldr	r3, [pc, #160]	@ (8004de0 <SensorRead+0xb8>)
 8004d3e:	601a      	str	r2, [r3, #0]
	ButtonTest[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8004d40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d44:	4827      	ldr	r0, [pc, #156]	@ (8004de4 <SensorRead+0xbc>)
 8004d46:	f002 ff41 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4b24      	ldr	r3, [pc, #144]	@ (8004de0 <SensorRead+0xb8>)
 8004d50:	605a      	str	r2, [r3, #4]
	ButtonTest[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8004d52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d5a:	f002 ff37 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b1f      	ldr	r3, [pc, #124]	@ (8004de0 <SensorRead+0xb8>)
 8004d64:	609a      	str	r2, [r3, #8]
	ButtonTest[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8004d66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d6e:	f002 ff2d 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004d72:	4603      	mov	r3, r0
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b1a      	ldr	r3, [pc, #104]	@ (8004de0 <SensorRead+0xb8>)
 8004d78:	60da      	str	r2, [r3, #12]
	ButtonTest[4] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8004d7a:	2180      	movs	r1, #128	@ 0x80
 8004d7c:	481a      	ldr	r0, [pc, #104]	@ (8004de8 <SensorRead+0xc0>)
 8004d7e:	f002 ff25 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004d82:	4603      	mov	r3, r0
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b16      	ldr	r3, [pc, #88]	@ (8004de0 <SensorRead+0xb8>)
 8004d88:	611a      	str	r2, [r3, #16]
	ButtonTest[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8004d8a:	2140      	movs	r1, #64	@ 0x40
 8004d8c:	4815      	ldr	r0, [pc, #84]	@ (8004de4 <SensorRead+0xbc>)
 8004d8e:	f002 ff1d 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004d92:	4603      	mov	r3, r0
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b12      	ldr	r3, [pc, #72]	@ (8004de0 <SensorRead+0xb8>)
 8004d98:	615a      	str	r2, [r3, #20]
	LeadSW[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4811      	ldr	r0, [pc, #68]	@ (8004de4 <SensorRead+0xbc>)
 8004d9e:	f002 ff15 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004da2:	4603      	mov	r3, r0
 8004da4:	461a      	mov	r2, r3
 8004da6:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <SensorRead+0xc4>)
 8004da8:	601a      	str	r2, [r3, #0]
	LeadSW[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8004daa:	2102      	movs	r1, #2
 8004dac:	480e      	ldr	r0, [pc, #56]	@ (8004de8 <SensorRead+0xc0>)
 8004dae:	f002 ff0d 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <SensorRead+0xc4>)
 8004db8:	605a      	str	r2, [r3, #4]
	emer = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //emer
 8004dba:	2110      	movs	r1, #16
 8004dbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004dc0:	f002 ff04 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4b09      	ldr	r3, [pc, #36]	@ (8004df0 <SensorRead+0xc8>)
 8004dca:	601a      	str	r2, [r3, #0]
	resetBut = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2); //reset
 8004dcc:	2104      	movs	r1, #4
 8004dce:	4805      	ldr	r0, [pc, #20]	@ (8004de4 <SensorRead+0xbc>)
 8004dd0:	f002 fefc 	bl	8007bcc <HAL_GPIO_ReadPin>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <SensorRead+0xcc>)
 8004dda:	601a      	str	r2, [r3, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	2000123c 	.word	0x2000123c
 8004de4:	48000400 	.word	0x48000400
 8004de8:	48000800 	.word	0x48000800
 8004dec:	20001254 	.word	0x20001254
 8004df0:	2000128c 	.word	0x2000128c
 8004df4:	20001290 	.word	0x20001290

08004df8 <emergency>:
void emergency()
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
	if(emer == 0)
 8004dfc:	4b13      	ldr	r3, [pc, #76]	@ (8004e4c <emergency+0x54>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11d      	bne.n	8004e40 <emergency+0x48>
	{
		if(emerCount > 50)
 8004e04:	4b12      	ldr	r3, [pc, #72]	@ (8004e50 <emergency+0x58>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b32      	cmp	r3, #50	@ 0x32
 8004e0a:	dd06      	ble.n	8004e1a <emergency+0x22>
		{
		state_ALL = 7;
 8004e0c:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <emergency+0x5c>)
 8004e0e:	2207      	movs	r2, #7
 8004e10:	601a      	str	r2, [r3, #0]
		emerCount = 0;
 8004e12:	4b0f      	ldr	r3, [pc, #60]	@ (8004e50 <emergency+0x58>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		emerCount = 0;
	}
}
 8004e18:	e015      	b.n	8004e46 <emergency+0x4e>
		if(timeEmerbut < HAL_GetTick())
 8004e1a:	f000 fc8f 	bl	800573c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	4b0d      	ldr	r3, [pc, #52]	@ (8004e58 <emergency+0x60>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d90e      	bls.n	8004e46 <emergency+0x4e>
			emerCount++;
 8004e28:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <emergency+0x58>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	4a08      	ldr	r2, [pc, #32]	@ (8004e50 <emergency+0x58>)
 8004e30:	6013      	str	r3, [r2, #0]
			timeEmerbut = HAL_GetTick()+10;
 8004e32:	f000 fc83 	bl	800573c <HAL_GetTick>
 8004e36:	4603      	mov	r3, r0
 8004e38:	330a      	adds	r3, #10
 8004e3a:	4a07      	ldr	r2, [pc, #28]	@ (8004e58 <emergency+0x60>)
 8004e3c:	6013      	str	r3, [r2, #0]
}
 8004e3e:	e002      	b.n	8004e46 <emergency+0x4e>
		emerCount = 0;
 8004e40:	4b03      	ldr	r3, [pc, #12]	@ (8004e50 <emergency+0x58>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	2000128c 	.word	0x2000128c
 8004e50:	200012a8 	.word	0x200012a8
 8004e54:	20000248 	.word	0x20000248
 8004e58:	200014b0 	.word	0x200014b0

08004e5c <mapFloat>:
//	else
//	{
//		CountProxi = 0;
//	}
//}
float mapFloat(float x, float in_min, float in_max, float out_min, float out_max) {
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	ed87 0a05 	vstr	s0, [r7, #20]
 8004e66:	edc7 0a04 	vstr	s1, [r7, #16]
 8004e6a:	ed87 1a03 	vstr	s2, [r7, #12]
 8004e6e:	edc7 1a02 	vstr	s3, [r7, #8]
 8004e72:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004e76:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e82:	edd7 6a01 	vldr	s13, [r7, #4]
 8004e86:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004e8e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e92:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b5b0      	push	{r4, r5, r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a17      	ldr	r2, [pc, #92]	@ (8004f20 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d108      	bne.n	8004eda <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 8004ec8:	4b16      	ldr	r3, [pc, #88]	@ (8004f24 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	1e54      	subs	r4, r2, #1
 8004ed0:	f143 0500 	adc.w	r5, r3, #0
 8004ed4:	4b13      	ldr	r3, [pc, #76]	@ (8004f24 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004ed6:	e9c3 4500 	strd	r4, r5, [r3]
}
if(htim == &htim6)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a12      	ldr	r2, [pc, #72]	@ (8004f28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d119      	bne.n	8004f16 <HAL_TIM_PeriodElapsedCallback+0x5e>
{
	kalman_predict(feedback, P_est, Ak, G, Q);
 8004ee2:	4b12      	ldr	r3, [pc, #72]	@ (8004f2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004ee4:	edd3 7a00 	vldr	s15, [r3]
 8004ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8004eec:	4b10      	ldr	r3, [pc, #64]	@ (8004f30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004eee:	4a11      	ldr	r2, [pc, #68]	@ (8004f34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004ef0:	4911      	ldr	r1, [pc, #68]	@ (8004f38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004ef2:	4812      	ldr	r0, [pc, #72]	@ (8004f3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004ef4:	f7fc fdb2 	bl	8001a5c <kalman_predict>
	kalman_update(feedback,P_est, Ck, R, Pos);
 8004ef8:	4b11      	ldr	r3, [pc, #68]	@ (8004f40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004efa:	edd3 7a00 	vldr	s15, [r3]
 8004efe:	4b11      	ldr	r3, [pc, #68]	@ (8004f44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004f00:	ed93 7a00 	vldr	s14, [r3]
 8004f04:	eef0 0a47 	vmov.f32	s1, s14
 8004f08:	eeb0 0a67 	vmov.f32	s0, s15
 8004f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004f48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004f0e:	490a      	ldr	r1, [pc, #40]	@ (8004f38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004f10:	480a      	ldr	r0, [pc, #40]	@ (8004f3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004f12:	f7fc fe63 	bl	8001bdc <kalman_update>
}
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200006b4 	.word	0x200006b4
 8004f24:	20001430 	.word	0x20001430
 8004f28:	20000780 	.word	0x20000780
 8004f2c:	20000240 	.word	0x20000240
 8004f30:	20000230 	.word	0x20000230
 8004f34:	20000200 	.word	0x20000200
 8004f38:	20000290 	.word	0x20000290
 8004f3c:	20001298 	.word	0x20001298
 8004f40:	2000023c 	.word	0x2000023c
 8004f44:	200013f8 	.word	0x200013f8
 8004f48:	20000224 	.word	0x20000224

08004f4c <micros>:
uint64_t micros()
{
 8004f4c:	b4b0      	push	{r4, r5, r7}
 8004f4e:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8004f50:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <micros+0x2c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	2200      	movs	r2, #0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <micros+0x30>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	1884      	adds	r4, r0, r2
 8004f64:	eb41 0503 	adc.w	r5, r1, r3
 8004f68:	4622      	mov	r2, r4
 8004f6a:	462b      	mov	r3, r5
}
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bcb0      	pop	{r4, r5, r7}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	200006b4 	.word	0x200006b4
 8004f7c:	20001430 	.word	0x20001430

08004f80 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f90:	d102      	bne.n	8004f98 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start  = 1;
 8004f92:	4b04      	ldr	r3, [pc, #16]	@ (8004fa4 <HAL_GPIO_EXTI_Callback+0x24>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
//	if(GPIO_Pin == GPIO_PIN_5)
//	{
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//		HOME = 2;
//	}
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	20001228 	.word	0x20001228

08004fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fac:	b672      	cpsid	i
}
 8004fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <Error_Handler+0x8>

08004fb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fba:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff8 <HAL_MspInit+0x44>)
 8004fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff8 <HAL_MspInit+0x44>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff8 <HAL_MspInit+0x44>)
 8004fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <HAL_MspInit+0x44>)
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd6:	4a08      	ldr	r2, [pc, #32]	@ (8004ff8 <HAL_MspInit+0x44>)
 8004fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fde:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <HAL_MspInit+0x44>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004fea:	f002 fef5 	bl	8007dd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40021000 	.word	0x40021000

08004ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b09e      	sub	sp, #120	@ 0x78
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005004:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	609a      	str	r2, [r3, #8]
 8005010:	60da      	str	r2, [r3, #12]
 8005012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	2254      	movs	r2, #84	@ 0x54
 800501a:	2100      	movs	r1, #0
 800501c:	4618      	mov	r0, r3
 800501e:	f007 fdb9 	bl	800cb94 <memset>
  if(hadc->Instance==ADC3)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a33      	ldr	r2, [pc, #204]	@ (80050f4 <HAL_ADC_MspInit+0xf8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d15f      	bne.n	80050ec <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800502c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005030:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8005032:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005036:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005038:	f107 0310 	add.w	r3, r7, #16
 800503c:	4618      	mov	r0, r3
 800503e:	f003 fc09 	bl	8008854 <HAL_RCCEx_PeriphCLKConfig>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8005048:	f7ff ffae 	bl	8004fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 800504c:	4b2a      	ldr	r3, [pc, #168]	@ (80050f8 <HAL_ADC_MspInit+0xfc>)
 800504e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005050:	4a29      	ldr	r2, [pc, #164]	@ (80050f8 <HAL_ADC_MspInit+0xfc>)
 8005052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005058:	4b27      	ldr	r3, [pc, #156]	@ (80050f8 <HAL_ADC_MspInit+0xfc>)
 800505a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005064:	4b24      	ldr	r3, [pc, #144]	@ (80050f8 <HAL_ADC_MspInit+0xfc>)
 8005066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005068:	4a23      	ldr	r2, [pc, #140]	@ (80050f8 <HAL_ADC_MspInit+0xfc>)
 800506a:	f043 0302 	orr.w	r3, r3, #2
 800506e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005070:	4b21      	ldr	r3, [pc, #132]	@ (80050f8 <HAL_ADC_MspInit+0xfc>)
 8005072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = JOY_Y_Pin|JOY_X_Pin;
 800507c:	f242 0302 	movw	r3, #8194	@ 0x2002
 8005080:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005082:	2303      	movs	r3, #3
 8005084:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	2300      	movs	r3, #0
 8005088:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800508e:	4619      	mov	r1, r3
 8005090:	481a      	ldr	r0, [pc, #104]	@ (80050fc <HAL_ADC_MspInit+0x100>)
 8005092:	f002 fc19 	bl	80078c8 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel3;
 8005096:	4b1a      	ldr	r3, [pc, #104]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 8005098:	4a1a      	ldr	r2, [pc, #104]	@ (8005104 <HAL_ADC_MspInit+0x108>)
 800509a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800509c:	4b18      	ldr	r3, [pc, #96]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 800509e:	2225      	movs	r2, #37	@ 0x25
 80050a0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050a2:	4b17      	ldr	r3, [pc, #92]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80050a8:	4b15      	ldr	r3, [pc, #84]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80050ae:	4b14      	ldr	r3, [pc, #80]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050b0:	2280      	movs	r2, #128	@ 0x80
 80050b2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050b4:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050ba:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050bc:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050c2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80050c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050c6:	2220      	movs	r2, #32
 80050c8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80050ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80050d0:	480b      	ldr	r0, [pc, #44]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050d2:	f002 f8c7 	bl	8007264 <HAL_DMA_Init>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80050dc:	f7ff ff64 	bl	8004fa8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a07      	ldr	r2, [pc, #28]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80050e6:	4a06      	ldr	r2, [pc, #24]	@ (8005100 <HAL_ADC_MspInit+0x104>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80050ec:	bf00      	nop
 80050ee:	3778      	adds	r7, #120	@ 0x78
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	50000400 	.word	0x50000400
 80050f8:	40021000 	.word	0x40021000
 80050fc:	48000400 	.word	0x48000400
 8005100:	20000324 	.word	0x20000324
 8005104:	40020030 	.word	0x40020030

08005108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	@ 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a4f      	ldr	r2, [pc, #316]	@ (8005254 <HAL_TIM_Base_MspInit+0x14c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d114      	bne.n	8005144 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800511a:	4b4f      	ldr	r3, [pc, #316]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 800511c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511e:	4a4e      	ldr	r2, [pc, #312]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005120:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005124:	6613      	str	r3, [r2, #96]	@ 0x60
 8005126:	4b4c      	ldr	r3, [pc, #304]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800512a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005132:	2200      	movs	r2, #0
 8005134:	2100      	movs	r1, #0
 8005136:	2019      	movs	r0, #25
 8005138:	f002 f85f 	bl	80071fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800513c:	2019      	movs	r0, #25
 800513e:	f002 f876 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005142:	e082      	b.n	800524a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514c:	d10c      	bne.n	8005168 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800514e:	4b42      	ldr	r3, [pc, #264]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005152:	4a41      	ldr	r2, [pc, #260]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	6593      	str	r3, [r2, #88]	@ 0x58
 800515a:	4b3f      	ldr	r3, [pc, #252]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	623b      	str	r3, [r7, #32]
 8005164:	6a3b      	ldr	r3, [r7, #32]
}
 8005166:	e070      	b.n	800524a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM4)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a3b      	ldr	r2, [pc, #236]	@ (800525c <HAL_TIM_Base_MspInit+0x154>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10c      	bne.n	800518c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005172:	4b39      	ldr	r3, [pc, #228]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005176:	4a38      	ldr	r2, [pc, #224]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005178:	f043 0304 	orr.w	r3, r3, #4
 800517c:	6593      	str	r3, [r2, #88]	@ 0x58
 800517e:	4b36      	ldr	r3, [pc, #216]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	69fb      	ldr	r3, [r7, #28]
}
 800518a:	e05e      	b.n	800524a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM5)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a33      	ldr	r2, [pc, #204]	@ (8005260 <HAL_TIM_Base_MspInit+0x158>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d114      	bne.n	80051c0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005196:	4b30      	ldr	r3, [pc, #192]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519a:	4a2f      	ldr	r2, [pc, #188]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 800519c:	f043 0308 	orr.w	r3, r3, #8
 80051a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80051a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80051ae:	2200      	movs	r2, #0
 80051b0:	2100      	movs	r1, #0
 80051b2:	2032      	movs	r0, #50	@ 0x32
 80051b4:	f002 f821 	bl	80071fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80051b8:	2032      	movs	r0, #50	@ 0x32
 80051ba:	f002 f838 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 80051be:	e044      	b.n	800524a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a27      	ldr	r2, [pc, #156]	@ (8005264 <HAL_TIM_Base_MspInit+0x15c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d114      	bne.n	80051f4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051ca:	4b23      	ldr	r3, [pc, #140]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 80051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ce:	4a22      	ldr	r2, [pc, #136]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 80051d0:	f043 0310 	orr.w	r3, r3, #16
 80051d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051d6:	4b20      	ldr	r3, [pc, #128]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80051e2:	2200      	movs	r2, #0
 80051e4:	2100      	movs	r1, #0
 80051e6:	2036      	movs	r0, #54	@ 0x36
 80051e8:	f002 f807 	bl	80071fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051ec:	2036      	movs	r0, #54	@ 0x36
 80051ee:	f002 f81e 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 80051f2:	e02a      	b.n	800524a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM8)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <HAL_TIM_Base_MspInit+0x160>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d10c      	bne.n	8005218 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80051fe:	4b16      	ldr	r3, [pc, #88]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005202:	4a15      	ldr	r2, [pc, #84]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005204:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005208:	6613      	str	r3, [r2, #96]	@ 0x60
 800520a:	4b13      	ldr	r3, [pc, #76]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 800520c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
}
 8005216:	e018      	b.n	800524a <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM16)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a13      	ldr	r2, [pc, #76]	@ (800526c <HAL_TIM_Base_MspInit+0x164>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d113      	bne.n	800524a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005226:	4a0c      	ldr	r2, [pc, #48]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800522c:	6613      	str	r3, [r2, #96]	@ 0x60
 800522e:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <HAL_TIM_Base_MspInit+0x150>)
 8005230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800523a:	2200      	movs	r2, #0
 800523c:	2100      	movs	r1, #0
 800523e:	2019      	movs	r0, #25
 8005240:	f001 ffdb 	bl	80071fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005244:	2019      	movs	r0, #25
 8005246:	f001 fff2 	bl	800722e <HAL_NVIC_EnableIRQ>
}
 800524a:	bf00      	nop
 800524c:	3728      	adds	r7, #40	@ 0x28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40021000 	.word	0x40021000
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40001000 	.word	0x40001000
 8005268:	40013400 	.word	0x40013400
 800526c:	40014400 	.word	0x40014400

08005270 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	@ 0x28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005278:	f107 0314 	add.w	r3, r7, #20
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a17      	ldr	r2, [pc, #92]	@ (80052ec <HAL_TIM_Encoder_MspInit+0x7c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d128      	bne.n	80052e4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005292:	4b17      	ldr	r3, [pc, #92]	@ (80052f0 <HAL_TIM_Encoder_MspInit+0x80>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <HAL_TIM_Encoder_MspInit+0x80>)
 8005298:	f043 0302 	orr.w	r3, r3, #2
 800529c:	6593      	str	r3, [r2, #88]	@ 0x58
 800529e:	4b14      	ldr	r3, [pc, #80]	@ (80052f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80052a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052aa:	4b11      	ldr	r3, [pc, #68]	@ (80052f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80052ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ae:	4a10      	ldr	r2, [pc, #64]	@ (80052f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052b6:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <HAL_TIM_Encoder_MspInit+0x80>)
 80052b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_Encoder_A_Pin|TIM3_Encoder_B_Pin;
 80052c2:	23c0      	movs	r3, #192	@ 0xc0
 80052c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c6:	2302      	movs	r3, #2
 80052c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ce:	2300      	movs	r3, #0
 80052d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052d2:	2302      	movs	r3, #2
 80052d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d6:	f107 0314 	add.w	r3, r7, #20
 80052da:	4619      	mov	r1, r3
 80052dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052e0:	f002 faf2 	bl	80078c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80052e4:	bf00      	nop
 80052e6:	3728      	adds	r7, #40	@ 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40021000 	.word	0x40021000

080052f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	609a      	str	r2, [r3, #8]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a12      	ldr	r2, [pc, #72]	@ (800535c <HAL_TIM_MspPostInit+0x68>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d11d      	bne.n	8005352 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005316:	4b12      	ldr	r3, [pc, #72]	@ (8005360 <HAL_TIM_MspPostInit+0x6c>)
 8005318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531a:	4a11      	ldr	r2, [pc, #68]	@ (8005360 <HAL_TIM_MspPostInit+0x6c>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005322:	4b0f      	ldr	r3, [pc, #60]	@ (8005360 <HAL_TIM_MspPostInit+0x6c>)
 8005324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_PWM_Pin;
 800532e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005332:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005334:	2302      	movs	r3, #2
 8005336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533c:	2300      	movs	r3, #0
 800533e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005340:	230a      	movs	r3, #10
 8005342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_PWM_GPIO_Port, &GPIO_InitStruct);
 8005344:	f107 030c 	add.w	r3, r7, #12
 8005348:	4619      	mov	r1, r3
 800534a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800534e:	f002 fabb 	bl	80078c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005352:	bf00      	nop
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40000800 	.word	0x40000800
 8005360:	40021000 	.word	0x40021000

08005364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b09e      	sub	sp, #120	@ 0x78
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800536c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800537c:	f107 0310 	add.w	r3, r7, #16
 8005380:	2254      	movs	r2, #84	@ 0x54
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f007 fc05 	bl	800cb94 <memset>
  if(huart->Instance==USART2)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a4d      	ldr	r2, [pc, #308]	@ (80054c4 <HAL_UART_MspInit+0x160>)
 8005390:	4293      	cmp	r3, r2
 8005392:	f040 8092 	bne.w	80054ba <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005396:	2302      	movs	r3, #2
 8005398:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800539a:	2300      	movs	r3, #0
 800539c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800539e:	f107 0310 	add.w	r3, r7, #16
 80053a2:	4618      	mov	r0, r3
 80053a4:	f003 fa56 	bl	8008854 <HAL_RCCEx_PeriphCLKConfig>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80053ae:	f7ff fdfb 	bl	8004fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053b2:	4b45      	ldr	r3, [pc, #276]	@ (80054c8 <HAL_UART_MspInit+0x164>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b6:	4a44      	ldr	r2, [pc, #272]	@ (80054c8 <HAL_UART_MspInit+0x164>)
 80053b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80053be:	4b42      	ldr	r3, [pc, #264]	@ (80054c8 <HAL_UART_MspInit+0x164>)
 80053c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ca:	4b3f      	ldr	r3, [pc, #252]	@ (80054c8 <HAL_UART_MspInit+0x164>)
 80053cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ce:	4a3e      	ldr	r2, [pc, #248]	@ (80054c8 <HAL_UART_MspInit+0x164>)
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053d6:	4b3c      	ldr	r3, [pc, #240]	@ (80054c8 <HAL_UART_MspInit+0x164>)
 80053d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	60bb      	str	r3, [r7, #8]
 80053e0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80053e2:	230c      	movs	r3, #12
 80053e4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e6:	2302      	movs	r3, #2
 80053e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ee:	2300      	movs	r3, #0
 80053f0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053f2:	2307      	movs	r3, #7
 80053f4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80053fa:	4619      	mov	r1, r3
 80053fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005400:	f002 fa62 	bl	80078c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005404:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <HAL_UART_MspInit+0x168>)
 8005406:	4a32      	ldr	r2, [pc, #200]	@ (80054d0 <HAL_UART_MspInit+0x16c>)
 8005408:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800540a:	4b30      	ldr	r3, [pc, #192]	@ (80054cc <HAL_UART_MspInit+0x168>)
 800540c:	221a      	movs	r2, #26
 800540e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005410:	4b2e      	ldr	r3, [pc, #184]	@ (80054cc <HAL_UART_MspInit+0x168>)
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005416:	4b2d      	ldr	r3, [pc, #180]	@ (80054cc <HAL_UART_MspInit+0x168>)
 8005418:	2200      	movs	r2, #0
 800541a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800541c:	4b2b      	ldr	r3, [pc, #172]	@ (80054cc <HAL_UART_MspInit+0x168>)
 800541e:	2280      	movs	r2, #128	@ 0x80
 8005420:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005422:	4b2a      	ldr	r3, [pc, #168]	@ (80054cc <HAL_UART_MspInit+0x168>)
 8005424:	2200      	movs	r2, #0
 8005426:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005428:	4b28      	ldr	r3, [pc, #160]	@ (80054cc <HAL_UART_MspInit+0x168>)
 800542a:	2200      	movs	r2, #0
 800542c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800542e:	4b27      	ldr	r3, [pc, #156]	@ (80054cc <HAL_UART_MspInit+0x168>)
 8005430:	2200      	movs	r2, #0
 8005432:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005434:	4b25      	ldr	r3, [pc, #148]	@ (80054cc <HAL_UART_MspInit+0x168>)
 8005436:	2200      	movs	r2, #0
 8005438:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800543a:	4824      	ldr	r0, [pc, #144]	@ (80054cc <HAL_UART_MspInit+0x168>)
 800543c:	f001 ff12 	bl	8007264 <HAL_DMA_Init>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005446:	f7ff fdaf 	bl	8004fa8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1f      	ldr	r2, [pc, #124]	@ (80054cc <HAL_UART_MspInit+0x168>)
 800544e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005452:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <HAL_UART_MspInit+0x168>)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8005458:	4b1e      	ldr	r3, [pc, #120]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 800545a:	4a1f      	ldr	r2, [pc, #124]	@ (80054d8 <HAL_UART_MspInit+0x174>)
 800545c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800545e:	4b1d      	ldr	r3, [pc, #116]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 8005460:	221b      	movs	r2, #27
 8005462:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005464:	4b1b      	ldr	r3, [pc, #108]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 8005466:	2210      	movs	r2, #16
 8005468:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800546a:	4b1a      	ldr	r3, [pc, #104]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 800546c:	2200      	movs	r2, #0
 800546e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005470:	4b18      	ldr	r3, [pc, #96]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 8005472:	2280      	movs	r2, #128	@ 0x80
 8005474:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005476:	4b17      	ldr	r3, [pc, #92]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 8005478:	2200      	movs	r2, #0
 800547a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800547c:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 800547e:	2200      	movs	r2, #0
 8005480:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 8005484:	2200      	movs	r2, #0
 8005486:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005488:	4b12      	ldr	r3, [pc, #72]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 800548a:	2200      	movs	r2, #0
 800548c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800548e:	4811      	ldr	r0, [pc, #68]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 8005490:	f001 fee8 	bl	8007264 <HAL_DMA_Init>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800549a:	f7ff fd85 	bl	8004fa8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a0c      	ldr	r2, [pc, #48]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 80054a2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80054a4:	4a0b      	ldr	r2, [pc, #44]	@ (80054d4 <HAL_UART_MspInit+0x170>)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054aa:	2200      	movs	r2, #0
 80054ac:	2100      	movs	r1, #0
 80054ae:	2026      	movs	r0, #38	@ 0x26
 80054b0:	f001 fea3 	bl	80071fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054b4:	2026      	movs	r0, #38	@ 0x26
 80054b6:	f001 feba 	bl	800722e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80054ba:	bf00      	nop
 80054bc:	3778      	adds	r7, #120	@ 0x78
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40004400 	.word	0x40004400
 80054c8:	40021000 	.word	0x40021000
 80054cc:	20000ab0 	.word	0x20000ab0
 80054d0:	40020008 	.word	0x40020008
 80054d4:	20000b10 	.word	0x20000b10
 80054d8:	4002001c 	.word	0x4002001c

080054dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80054e0:	bf00      	nop
 80054e2:	e7fd      	b.n	80054e0 <NMI_Handler+0x4>

080054e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054e8:	bf00      	nop
 80054ea:	e7fd      	b.n	80054e8 <HardFault_Handler+0x4>

080054ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <MemManage_Handler+0x4>

080054f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <BusFault_Handler+0x4>

080054fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <UsageFault_Handler+0x4>

08005504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005512:	b480      	push	{r7}
 8005514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005516:	bf00      	nop
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005532:	f000 f8f1 	bl	8005718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005536:	bf00      	nop
 8005538:	bd80      	pop	{r7, pc}

0800553a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lowerprox_Pin);
 800553e:	2010      	movs	r0, #16
 8005540:	f002 fb8e 	bl	8007c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005544:	bf00      	nop
 8005546:	bd80      	pop	{r7, pc}

08005548 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800554c:	4802      	ldr	r0, [pc, #8]	@ (8005558 <DMA1_Channel1_IRQHandler+0x10>)
 800554e:	f002 f86c 	bl	800762a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000ab0 	.word	0x20000ab0

0800555c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005560:	4802      	ldr	r0, [pc, #8]	@ (800556c <DMA1_Channel2_IRQHandler+0x10>)
 8005562:	f002 f862 	bl	800762a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000b10 	.word	0x20000b10

08005570 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005574:	4802      	ldr	r0, [pc, #8]	@ (8005580 <DMA1_Channel3_IRQHandler+0x10>)
 8005576:	f002 f858 	bl	800762a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000324 	.word	0x20000324

08005584 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UpperProx_Pin);
 8005588:	2020      	movs	r0, #32
 800558a:	f002 fb69 	bl	8007c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005598:	4803      	ldr	r0, [pc, #12]	@ (80055a8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800559a:	f004 f8ad 	bl	80096f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800559e:	4803      	ldr	r0, [pc, #12]	@ (80055ac <TIM1_UP_TIM16_IRQHandler+0x18>)
 80055a0:	f004 f8aa 	bl	80096f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80055a4:	bf00      	nop
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000384 	.word	0x20000384
 80055ac:	20000918 	.word	0x20000918

080055b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055b4:	4802      	ldr	r0, [pc, #8]	@ (80055c0 <USART2_IRQHandler+0x10>)
 80055b6:	f005 fddf 	bl	800b178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	200009e4 	.word	0x200009e4

080055c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80055c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80055cc:	f002 fb48 	bl	8007c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055d0:	bf00      	nop
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80055d8:	4802      	ldr	r0, [pc, #8]	@ (80055e4 <TIM5_IRQHandler+0x10>)
 80055da:	f004 f88d 	bl	80096f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	200006b4 	.word	0x200006b4

080055e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80055ec:	4802      	ldr	r0, [pc, #8]	@ (80055f8 <TIM6_DAC_IRQHandler+0x10>)
 80055ee:	f004 f883 	bl	80096f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000780 	.word	0x20000780

080055fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005600:	4b06      	ldr	r3, [pc, #24]	@ (800561c <SystemInit+0x20>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005606:	4a05      	ldr	r2, [pc, #20]	@ (800561c <SystemInit+0x20>)
 8005608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800560c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000ed00 	.word	0xe000ed00

08005620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005620:	480d      	ldr	r0, [pc, #52]	@ (8005658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005622:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005624:	f7ff ffea 	bl	80055fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005628:	480c      	ldr	r0, [pc, #48]	@ (800565c <LoopForever+0x6>)
  ldr r1, =_edata
 800562a:	490d      	ldr	r1, [pc, #52]	@ (8005660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800562c:	4a0d      	ldr	r2, [pc, #52]	@ (8005664 <LoopForever+0xe>)
  movs r3, #0
 800562e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005630:	e002      	b.n	8005638 <LoopCopyDataInit>

08005632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005636:	3304      	adds	r3, #4

08005638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800563a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800563c:	d3f9      	bcc.n	8005632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800563e:	4a0a      	ldr	r2, [pc, #40]	@ (8005668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005640:	4c0a      	ldr	r4, [pc, #40]	@ (800566c <LoopForever+0x16>)
  movs r3, #0
 8005642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005644:	e001      	b.n	800564a <LoopFillZerobss>

08005646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005648:	3204      	adds	r2, #4

0800564a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800564a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800564c:	d3fb      	bcc.n	8005646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800564e:	f007 faa9 	bl	800cba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005652:	f7fc fbd1 	bl	8001df8 <main>

08005656 <LoopForever>:

LoopForever:
    b LoopForever
 8005656:	e7fe      	b.n	8005656 <LoopForever>
  ldr   r0, =_estack
 8005658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800565c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005660:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8005664:	0800cc94 	.word	0x0800cc94
  ldr r2, =_sbss
 8005668:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 800566c:	200014b8 	.word	0x200014b8

08005670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005670:	e7fe      	b.n	8005670 <ADC1_2_IRQHandler>

08005672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800567c:	2003      	movs	r0, #3
 800567e:	f001 fdb1 	bl	80071e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005682:	2000      	movs	r0, #0
 8005684:	f000 f80e 	bl	80056a4 <HAL_InitTick>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	71fb      	strb	r3, [r7, #7]
 8005692:	e001      	b.n	8005698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005694:	f7ff fc8e 	bl	8004fb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005698:	79fb      	ldrb	r3, [r7, #7]

}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80056b0:	4b16      	ldr	r3, [pc, #88]	@ (800570c <HAL_InitTick+0x68>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d022      	beq.n	80056fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80056b8:	4b15      	ldr	r3, [pc, #84]	@ (8005710 <HAL_InitTick+0x6c>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	4b13      	ldr	r3, [pc, #76]	@ (800570c <HAL_InitTick+0x68>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80056c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80056c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 fdbc 	bl	800724a <HAL_SYSTICK_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10f      	bne.n	80056f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b0f      	cmp	r3, #15
 80056dc:	d809      	bhi.n	80056f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056de:	2200      	movs	r2, #0
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295
 80056e6:	f001 fd88 	bl	80071fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005714 <HAL_InitTick+0x70>)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	e007      	b.n	8005702 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
 80056f6:	e004      	b.n	8005702 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e001      	b.n	8005702 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000268 	.word	0x20000268
 8005710:	20000260 	.word	0x20000260
 8005714:	20000264 	.word	0x20000264

08005718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800571c:	4b05      	ldr	r3, [pc, #20]	@ (8005734 <HAL_IncTick+0x1c>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <HAL_IncTick+0x20>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4413      	add	r3, r2
 8005726:	4a03      	ldr	r2, [pc, #12]	@ (8005734 <HAL_IncTick+0x1c>)
 8005728:	6013      	str	r3, [r2, #0]
}
 800572a:	bf00      	nop
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	200014b4 	.word	0x200014b4
 8005738:	20000268 	.word	0x20000268

0800573c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  return uwTick;
 8005740:	4b03      	ldr	r3, [pc, #12]	@ (8005750 <HAL_GetTick+0x14>)
 8005742:	681b      	ldr	r3, [r3, #0]
}
 8005744:	4618      	mov	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	200014b4 	.word	0x200014b4

08005754 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	609a      	str	r2, [r3, #8]
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3360      	adds	r3, #96	@ 0x60
 80057ce:	461a      	mov	r2, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b08      	ldr	r3, [pc, #32]	@ (8005800 <LL_ADC_SetOffset+0x44>)
 80057de:	4013      	ands	r3, r2
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	03fff000 	.word	0x03fff000

08005804 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3360      	adds	r3, #96	@ 0x60
 8005812:	461a      	mov	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3360      	adds	r3, #96	@ 0x60
 8005840:	461a      	mov	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	431a      	orrs	r2, r3
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005866:	b480      	push	{r7}
 8005868:	b087      	sub	sp, #28
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3360      	adds	r3, #96	@ 0x60
 8005876:	461a      	mov	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	431a      	orrs	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005890:	bf00      	nop
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3360      	adds	r3, #96	@ 0x60
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	615a      	str	r2, [r3, #20]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800591e:	b480      	push	{r7}
 8005920:	b087      	sub	sp, #28
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3330      	adds	r3, #48	@ 0x30
 800592e:	461a      	mov	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	0a1b      	lsrs	r3, r3, #8
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	4413      	add	r3, r2
 800593c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	211f      	movs	r1, #31
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	43db      	mvns	r3, r3
 8005950:	401a      	ands	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	0e9b      	lsrs	r3, r3, #26
 8005956:	f003 011f 	and.w	r1, r3, #31
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	431a      	orrs	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005976:	b480      	push	{r7}
 8005978:	b087      	sub	sp, #28
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3314      	adds	r3, #20
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	0e5b      	lsrs	r3, r3, #25
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	4413      	add	r3, r2
 8005994:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	0d1b      	lsrs	r3, r3, #20
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2107      	movs	r1, #7
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	401a      	ands	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	0d1b      	lsrs	r3, r3, #20
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	431a      	orrs	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e4:	43db      	mvns	r3, r3
 80059e6:	401a      	ands	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f003 0318 	and.w	r3, r3, #24
 80059ee:	4908      	ldr	r1, [pc, #32]	@ (8005a10 <LL_ADC_SetChannelSingleDiff+0x44>)
 80059f0:	40d9      	lsrs	r1, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	400b      	ands	r3, r1
 80059f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	0007ffff 	.word	0x0007ffff

08005a14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 031f 	and.w	r3, r3, #31
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005a40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6093      	str	r3, [r2, #8]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a68:	d101      	bne.n	8005a6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005a8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ab8:	d101      	bne.n	8005abe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005adc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ae0:	f043 0201 	orr.w	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b08:	f043 0202 	orr.w	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <LL_ADC_IsEnabled+0x18>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <LL_ADC_IsEnabled+0x1a>
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d101      	bne.n	8005b5a <LL_ADC_IsDisableOngoing+0x18>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <LL_ADC_IsDisableOngoing+0x1a>
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b7c:	f043 0204 	orr.w	r2, r3, #4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d101      	bne.n	8005ba8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d101      	bne.n	8005bce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b089      	sub	sp, #36	@ 0x24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e1a9      	b.n	8005f4a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff f9f9 	bl	8004ffc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff ff19 	bl	8005a54 <LL_ADC_IsDeepPowerDownEnabled>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff feff 	bl	8005a30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff ff34 	bl	8005aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d115      	bne.n	8005c6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff ff18 	bl	8005a7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c4c:	4b9c      	ldr	r3, [pc, #624]	@ (8005ec0 <HAL_ADC_Init+0x2e4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	4a9c      	ldr	r2, [pc, #624]	@ (8005ec4 <HAL_ADC_Init+0x2e8>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	099b      	lsrs	r3, r3, #6
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005c60:	e002      	b.n	8005c68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f9      	bne.n	8005c62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff ff16 	bl	8005aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10d      	bne.n	8005c9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c82:	f043 0210 	orr.w	r2, r3, #16
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff ff76 	bl	8005b90 <LL_ADC_REG_IsConversionOngoing>
 8005ca4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 8142 	bne.w	8005f38 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 813e 	bne.w	8005f38 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005cc4:	f043 0202 	orr.w	r2, r3, #2
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff23 	bl	8005b1c <LL_ADC_IsEnabled>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d141      	bne.n	8005d60 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ce4:	d004      	beq.n	8005cf0 <HAL_ADC_Init+0x114>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a77      	ldr	r2, [pc, #476]	@ (8005ec8 <HAL_ADC_Init+0x2ec>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d10f      	bne.n	8005d10 <HAL_ADC_Init+0x134>
 8005cf0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005cf4:	f7ff ff12 	bl	8005b1c <LL_ADC_IsEnabled>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	4873      	ldr	r0, [pc, #460]	@ (8005ec8 <HAL_ADC_Init+0x2ec>)
 8005cfc:	f7ff ff0e 	bl	8005b1c <LL_ADC_IsEnabled>
 8005d00:	4603      	mov	r3, r0
 8005d02:	4323      	orrs	r3, r4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	e012      	b.n	8005d36 <HAL_ADC_Init+0x15a>
 8005d10:	486e      	ldr	r0, [pc, #440]	@ (8005ecc <HAL_ADC_Init+0x2f0>)
 8005d12:	f7ff ff03 	bl	8005b1c <LL_ADC_IsEnabled>
 8005d16:	4604      	mov	r4, r0
 8005d18:	486d      	ldr	r0, [pc, #436]	@ (8005ed0 <HAL_ADC_Init+0x2f4>)
 8005d1a:	f7ff feff 	bl	8005b1c <LL_ADC_IsEnabled>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	431c      	orrs	r4, r3
 8005d22:	486c      	ldr	r0, [pc, #432]	@ (8005ed4 <HAL_ADC_Init+0x2f8>)
 8005d24:	f7ff fefa 	bl	8005b1c <LL_ADC_IsEnabled>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	4323      	orrs	r3, r4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d012      	beq.n	8005d60 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d42:	d004      	beq.n	8005d4e <HAL_ADC_Init+0x172>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec8 <HAL_ADC_Init+0x2ec>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d101      	bne.n	8005d52 <HAL_ADC_Init+0x176>
 8005d4e:	4a62      	ldr	r2, [pc, #392]	@ (8005ed8 <HAL_ADC_Init+0x2fc>)
 8005d50:	e000      	b.n	8005d54 <HAL_ADC_Init+0x178>
 8005d52:	4a62      	ldr	r2, [pc, #392]	@ (8005edc <HAL_ADC_Init+0x300>)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7ff fcfa 	bl	8005754 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	7f5b      	ldrb	r3, [r3, #29]
 8005d64:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d6a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005d70:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005d76:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d7e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d106      	bne.n	8005d9c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	3b01      	subs	r3, #1
 8005d94:	045b      	lsls	r3, r3, #17
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d009      	beq.n	8005db8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	4b48      	ldr	r3, [pc, #288]	@ (8005ee0 <HAL_ADC_Init+0x304>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	69b9      	ldr	r1, [r7, #24]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fee5 	bl	8005bb6 <LL_ADC_INJ_IsConversionOngoing>
 8005dec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d17f      	bne.n	8005ef4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d17c      	bne.n	8005ef4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005dfe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e06:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e16:	f023 0302 	bic.w	r3, r3, #2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	69b9      	ldr	r1, [r7, #24]
 8005e20:	430b      	orrs	r3, r1
 8005e22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d017      	beq.n	8005e5c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005e3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e44:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005e48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6911      	ldr	r1, [r2, #16]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	430b      	orrs	r3, r1
 8005e56:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005e5a:	e013      	b.n	8005e84 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005e6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005e7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e80:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d12a      	bne.n	8005ee4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e98:	f023 0304 	bic.w	r3, r3, #4
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ea4:	4311      	orrs	r1, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005eaa:	4311      	orrs	r1, r2
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0201 	orr.w	r2, r2, #1
 8005ebc:	611a      	str	r2, [r3, #16]
 8005ebe:	e019      	b.n	8005ef4 <HAL_ADC_Init+0x318>
 8005ec0:	20000260 	.word	0x20000260
 8005ec4:	053e2d63 	.word	0x053e2d63
 8005ec8:	50000100 	.word	0x50000100
 8005ecc:	50000400 	.word	0x50000400
 8005ed0:	50000500 	.word	0x50000500
 8005ed4:	50000600 	.word	0x50000600
 8005ed8:	50000300 	.word	0x50000300
 8005edc:	50000700 	.word	0x50000700
 8005ee0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d10c      	bne.n	8005f16 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f02:	f023 010f 	bic.w	r1, r3, #15
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	1e5a      	subs	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f14:	e007      	b.n	8005f26 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 020f 	bic.w	r2, r2, #15
 8005f24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	f043 0201 	orr.w	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f36:	e007      	b.n	8005f48 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	f043 0210 	orr.w	r2, r3, #16
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3724      	adds	r7, #36	@ 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}
 8005f52:	bf00      	nop

08005f54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f68:	d004      	beq.n	8005f74 <HAL_ADC_Start_DMA+0x20>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80060d8 <HAL_ADC_Start_DMA+0x184>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d101      	bne.n	8005f78 <HAL_ADC_Start_DMA+0x24>
 8005f74:	4b59      	ldr	r3, [pc, #356]	@ (80060dc <HAL_ADC_Start_DMA+0x188>)
 8005f76:	e000      	b.n	8005f7a <HAL_ADC_Start_DMA+0x26>
 8005f78:	4b59      	ldr	r3, [pc, #356]	@ (80060e0 <HAL_ADC_Start_DMA+0x18c>)
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff fd4a 	bl	8005a14 <LL_ADC_GetMultimode>
 8005f80:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fe02 	bl	8005b90 <LL_ADC_REG_IsConversionOngoing>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 809b 	bne.w	80060ca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_ADC_Start_DMA+0x4e>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e096      	b.n	80060d0 <HAL_ADC_Start_DMA+0x17c>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a4d      	ldr	r2, [pc, #308]	@ (80060e4 <HAL_ADC_Start_DMA+0x190>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d008      	beq.n	8005fc6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b05      	cmp	r3, #5
 8005fbe:	d002      	beq.n	8005fc6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d17a      	bne.n	80060bc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fcf6 	bl	80069b8 <ADC_Enable>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d16d      	bne.n	80060b2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fda:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005fde:	f023 0301 	bic.w	r3, r3, #1
 8005fe2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a3a      	ldr	r2, [pc, #232]	@ (80060d8 <HAL_ADC_Start_DMA+0x184>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_ADC_Start_DMA+0xb4>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80060e8 <HAL_ADC_Start_DMA+0x194>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d002      	beq.n	8006004 <HAL_ADC_Start_DMA+0xb0>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	e003      	b.n	800600c <HAL_ADC_Start_DMA+0xb8>
 8006004:	4b39      	ldr	r3, [pc, #228]	@ (80060ec <HAL_ADC_Start_DMA+0x198>)
 8006006:	e001      	b.n	800600c <HAL_ADC_Start_DMA+0xb8>
 8006008:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	4293      	cmp	r3, r2
 8006012:	d002      	beq.n	800601a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d105      	bne.n	8006026 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800602a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d006      	beq.n	8006040 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006036:	f023 0206 	bic.w	r2, r3, #6
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	661a      	str	r2, [r3, #96]	@ 0x60
 800603e:	e002      	b.n	8006046 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604a:	4a29      	ldr	r2, [pc, #164]	@ (80060f0 <HAL_ADC_Start_DMA+0x19c>)
 800604c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006052:	4a28      	ldr	r2, [pc, #160]	@ (80060f4 <HAL_ADC_Start_DMA+0x1a0>)
 8006054:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605a:	4a27      	ldr	r2, [pc, #156]	@ (80060f8 <HAL_ADC_Start_DMA+0x1a4>)
 800605c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	221c      	movs	r2, #28
 8006064:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0210 	orr.w	r2, r2, #16
 800607c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3340      	adds	r3, #64	@ 0x40
 8006098:	4619      	mov	r1, r3
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f001 f989 	bl	80073b4 <HAL_DMA_Start_IT>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fd5c 	bl	8005b68 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80060b0:	e00d      	b.n	80060ce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80060ba:	e008      	b.n	80060ce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80060c8:	e001      	b.n	80060ce <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
 80060cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	50000100 	.word	0x50000100
 80060dc:	50000300 	.word	0x50000300
 80060e0:	50000700 	.word	0x50000700
 80060e4:	50000600 	.word	0x50000600
 80060e8:	50000500 	.word	0x50000500
 80060ec:	50000400 	.word	0x50000400
 80060f0:	08006ba3 	.word	0x08006ba3
 80060f4:	08006c7b 	.word	0x08006c7b
 80060f8:	08006c97 	.word	0x08006c97

080060fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b0b6      	sub	sp, #216	@ 0xd8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006152:	2b01      	cmp	r3, #1
 8006154:	d102      	bne.n	800615c <HAL_ADC_ConfigChannel+0x24>
 8006156:	2302      	movs	r3, #2
 8006158:	f000 bc13 	b.w	8006982 <HAL_ADC_ConfigChannel+0x84a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fd11 	bl	8005b90 <LL_ADC_REG_IsConversionOngoing>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	f040 83f3 	bne.w	800695c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6859      	ldr	r1, [r3, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	f7ff fbcb 	bl	800591e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fcff 	bl	8005b90 <LL_ADC_REG_IsConversionOngoing>
 8006192:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff fd0b 	bl	8005bb6 <LL_ADC_INJ_IsConversionOngoing>
 80061a0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80061a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 81d9 	bne.w	8006560 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f040 81d4 	bne.w	8006560 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061c0:	d10f      	bne.n	80061e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	4619      	mov	r1, r3
 80061ce:	f7ff fbd2 	bl	8005976 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff fb79 	bl	80058d2 <LL_ADC_SetSamplingTimeCommonConfig>
 80061e0:	e00e      	b.n	8006200 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6819      	ldr	r1, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f7ff fbc1 	bl	8005976 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fb69 	bl	80058d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	695a      	ldr	r2, [r3, #20]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	08db      	lsrs	r3, r3, #3
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b04      	cmp	r3, #4
 8006220:	d022      	beq.n	8006268 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6919      	ldr	r1, [r3, #16]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006232:	f7ff fac3 	bl	80057bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6919      	ldr	r1, [r3, #16]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	461a      	mov	r2, r3
 8006244:	f7ff fb0f 	bl	8005866 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006254:	2b01      	cmp	r3, #1
 8006256:	d102      	bne.n	800625e <HAL_ADC_ConfigChannel+0x126>
 8006258:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800625c:	e000      	b.n	8006260 <HAL_ADC_ConfigChannel+0x128>
 800625e:	2300      	movs	r3, #0
 8006260:	461a      	mov	r2, r3
 8006262:	f7ff fb1b 	bl	800589c <LL_ADC_SetOffsetSaturation>
 8006266:	e17b      	b.n	8006560 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fac8 	bl	8005804 <LL_ADC_GetOffsetChannel>
 8006274:	4603      	mov	r3, r0
 8006276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <HAL_ADC_ConfigChannel+0x15c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2100      	movs	r1, #0
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fabd 	bl	8005804 <LL_ADC_GetOffsetChannel>
 800628a:	4603      	mov	r3, r0
 800628c:	0e9b      	lsrs	r3, r3, #26
 800628e:	f003 021f 	and.w	r2, r3, #31
 8006292:	e01e      	b.n	80062d2 <HAL_ADC_ConfigChannel+0x19a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fab2 	bl	8005804 <LL_ADC_GetOffsetChannel>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062aa:	fa93 f3a3 	rbit	r3, r3
 80062ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80062b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80062ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80062c2:	2320      	movs	r3, #32
 80062c4:	e004      	b.n	80062d0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80062c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062ca:	fab3 f383 	clz	r3, r3
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <HAL_ADC_ConfigChannel+0x1b2>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	0e9b      	lsrs	r3, r3, #26
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	e018      	b.n	800631c <HAL_ADC_ConfigChannel+0x1e4>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062f6:	fa93 f3a3 	rbit	r3, r3
 80062fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80062fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800630e:	2320      	movs	r3, #32
 8006310:	e004      	b.n	800631c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006316:	fab3 f383 	clz	r3, r3
 800631a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800631c:	429a      	cmp	r2, r3
 800631e:	d106      	bne.n	800632e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2200      	movs	r2, #0
 8006326:	2100      	movs	r1, #0
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff fa81 	bl	8005830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2101      	movs	r1, #1
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fa65 	bl	8005804 <LL_ADC_GetOffsetChannel>
 800633a:	4603      	mov	r3, r0
 800633c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <HAL_ADC_ConfigChannel+0x222>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2101      	movs	r1, #1
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fa5a 	bl	8005804 <LL_ADC_GetOffsetChannel>
 8006350:	4603      	mov	r3, r0
 8006352:	0e9b      	lsrs	r3, r3, #26
 8006354:	f003 021f 	and.w	r2, r3, #31
 8006358:	e01e      	b.n	8006398 <HAL_ADC_ConfigChannel+0x260>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2101      	movs	r1, #1
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff fa4f 	bl	8005804 <LL_ADC_GetOffsetChannel>
 8006366:	4603      	mov	r3, r0
 8006368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006370:	fa93 f3a3 	rbit	r3, r3
 8006374:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800637c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006388:	2320      	movs	r3, #32
 800638a:	e004      	b.n	8006396 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800638c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006390:	fab3 f383 	clz	r3, r3
 8006394:	b2db      	uxtb	r3, r3
 8006396:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <HAL_ADC_ConfigChannel+0x278>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	0e9b      	lsrs	r3, r3, #26
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	e018      	b.n	80063e2 <HAL_ADC_ConfigChannel+0x2aa>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063bc:	fa93 f3a3 	rbit	r3, r3
 80063c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80063c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80063c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80063cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80063d4:	2320      	movs	r3, #32
 80063d6:	e004      	b.n	80063e2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80063d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063dc:	fab3 f383 	clz	r3, r3
 80063e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d106      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	2101      	movs	r1, #1
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fa1e 	bl	8005830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2102      	movs	r1, #2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff fa02 	bl	8005804 <LL_ADC_GetOffsetChannel>
 8006400:	4603      	mov	r3, r0
 8006402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x2e8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2102      	movs	r1, #2
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff f9f7 	bl	8005804 <LL_ADC_GetOffsetChannel>
 8006416:	4603      	mov	r3, r0
 8006418:	0e9b      	lsrs	r3, r3, #26
 800641a:	f003 021f 	and.w	r2, r3, #31
 800641e:	e01e      	b.n	800645e <HAL_ADC_ConfigChannel+0x326>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2102      	movs	r1, #2
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff f9ec 	bl	8005804 <LL_ADC_GetOffsetChannel>
 800642c:	4603      	mov	r3, r0
 800642e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006436:	fa93 f3a3 	rbit	r3, r3
 800643a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800643e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006446:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800644e:	2320      	movs	r3, #32
 8006450:	e004      	b.n	800645c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006456:	fab3 f383 	clz	r3, r3
 800645a:	b2db      	uxtb	r3, r3
 800645c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <HAL_ADC_ConfigChannel+0x33e>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	0e9b      	lsrs	r3, r3, #26
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	e016      	b.n	80064a4 <HAL_ADC_ConfigChannel+0x36c>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006482:	fa93 f3a3 	rbit	r3, r3
 8006486:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006488:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800648a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800648e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006496:	2320      	movs	r3, #32
 8006498:	e004      	b.n	80064a4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800649a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800649e:	fab3 f383 	clz	r3, r3
 80064a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d106      	bne.n	80064b6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2200      	movs	r2, #0
 80064ae:	2102      	movs	r1, #2
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff f9bd 	bl	8005830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2103      	movs	r1, #3
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff f9a1 	bl	8005804 <LL_ADC_GetOffsetChannel>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x3aa>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2103      	movs	r1, #3
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff f996 	bl	8005804 <LL_ADC_GetOffsetChannel>
 80064d8:	4603      	mov	r3, r0
 80064da:	0e9b      	lsrs	r3, r3, #26
 80064dc:	f003 021f 	and.w	r2, r3, #31
 80064e0:	e017      	b.n	8006512 <HAL_ADC_ConfigChannel+0x3da>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2103      	movs	r1, #3
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff f98b 	bl	8005804 <LL_ADC_GetOffsetChannel>
 80064ee:	4603      	mov	r3, r0
 80064f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064f4:	fa93 f3a3 	rbit	r3, r3
 80064f8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80064fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80064fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006504:	2320      	movs	r3, #32
 8006506:	e003      	b.n	8006510 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800650a:	fab3 f383 	clz	r3, r3
 800650e:	b2db      	uxtb	r3, r3
 8006510:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651a:	2b00      	cmp	r3, #0
 800651c:	d105      	bne.n	800652a <HAL_ADC_ConfigChannel+0x3f2>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	0e9b      	lsrs	r3, r3, #26
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	e011      	b.n	800654e <HAL_ADC_ConfigChannel+0x416>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006532:	fa93 f3a3 	rbit	r3, r3
 8006536:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800653a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800653c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006542:	2320      	movs	r3, #32
 8006544:	e003      	b.n	800654e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006548:	fab3 f383 	clz	r3, r3
 800654c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800654e:	429a      	cmp	r2, r3
 8006550:	d106      	bne.n	8006560 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2200      	movs	r2, #0
 8006558:	2103      	movs	r1, #3
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff f968 	bl	8005830 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fad9 	bl	8005b1c <LL_ADC_IsEnabled>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 813d 	bne.w	80067ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	6819      	ldr	r1, [r3, #0]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	461a      	mov	r2, r3
 8006580:	f7ff fa24 	bl	80059cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	4aa2      	ldr	r2, [pc, #648]	@ (8006814 <HAL_ADC_ConfigChannel+0x6dc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	f040 812e 	bne.w	80067ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <HAL_ADC_ConfigChannel+0x480>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	0e9b      	lsrs	r3, r3, #26
 80065a6:	3301      	adds	r3, #1
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	bf94      	ite	ls
 80065b0:	2301      	movls	r3, #1
 80065b2:	2300      	movhi	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	e019      	b.n	80065ec <HAL_ADC_ConfigChannel+0x4b4>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065c0:	fa93 f3a3 	rbit	r3, r3
 80065c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80065c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80065ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80065d0:	2320      	movs	r3, #32
 80065d2:	e003      	b.n	80065dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80065d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065d6:	fab3 f383 	clz	r3, r3
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	3301      	adds	r3, #1
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2b09      	cmp	r3, #9
 80065e4:	bf94      	ite	ls
 80065e6:	2301      	movls	r3, #1
 80065e8:	2300      	movhi	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d079      	beq.n	80066e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <HAL_ADC_ConfigChannel+0x4d4>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	0e9b      	lsrs	r3, r3, #26
 8006602:	3301      	adds	r3, #1
 8006604:	069b      	lsls	r3, r3, #26
 8006606:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800660a:	e015      	b.n	8006638 <HAL_ADC_ConfigChannel+0x500>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006614:	fa93 f3a3 	rbit	r3, r3
 8006618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800661a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800661e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006624:	2320      	movs	r3, #32
 8006626:	e003      	b.n	8006630 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800662a:	fab3 f383 	clz	r3, r3
 800662e:	b2db      	uxtb	r3, r3
 8006630:	3301      	adds	r3, #1
 8006632:	069b      	lsls	r3, r3, #26
 8006634:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_ADC_ConfigChannel+0x520>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	0e9b      	lsrs	r3, r3, #26
 800664a:	3301      	adds	r3, #1
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2101      	movs	r1, #1
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	e017      	b.n	8006688 <HAL_ADC_ConfigChannel+0x550>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800665e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006660:	fa93 f3a3 	rbit	r3, r3
 8006664:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006668:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800666a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006670:	2320      	movs	r3, #32
 8006672:	e003      	b.n	800667c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006676:	fab3 f383 	clz	r3, r3
 800667a:	b2db      	uxtb	r3, r3
 800667c:	3301      	adds	r3, #1
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2101      	movs	r1, #1
 8006684:	fa01 f303 	lsl.w	r3, r1, r3
 8006688:	ea42 0103 	orr.w	r1, r2, r3
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <HAL_ADC_ConfigChannel+0x576>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	0e9b      	lsrs	r3, r3, #26
 800669e:	3301      	adds	r3, #1
 80066a0:	f003 021f 	and.w	r2, r3, #31
 80066a4:	4613      	mov	r3, r2
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	4413      	add	r3, r2
 80066aa:	051b      	lsls	r3, r3, #20
 80066ac:	e018      	b.n	80066e0 <HAL_ADC_ConfigChannel+0x5a8>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b6:	fa93 f3a3 	rbit	r3, r3
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80066c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80066c6:	2320      	movs	r3, #32
 80066c8:	e003      	b.n	80066d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80066ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066cc:	fab3 f383 	clz	r3, r3
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	3301      	adds	r3, #1
 80066d4:	f003 021f 	and.w	r2, r3, #31
 80066d8:	4613      	mov	r3, r2
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	4413      	add	r3, r2
 80066de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066e0:	430b      	orrs	r3, r1
 80066e2:	e07e      	b.n	80067e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d107      	bne.n	8006700 <HAL_ADC_ConfigChannel+0x5c8>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	0e9b      	lsrs	r3, r3, #26
 80066f6:	3301      	adds	r3, #1
 80066f8:	069b      	lsls	r3, r3, #26
 80066fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066fe:	e015      	b.n	800672c <HAL_ADC_ConfigChannel+0x5f4>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006708:	fa93 f3a3 	rbit	r3, r3
 800670c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006718:	2320      	movs	r3, #32
 800671a:	e003      	b.n	8006724 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	fab3 f383 	clz	r3, r3
 8006722:	b2db      	uxtb	r3, r3
 8006724:	3301      	adds	r3, #1
 8006726:	069b      	lsls	r3, r3, #26
 8006728:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <HAL_ADC_ConfigChannel+0x614>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	0e9b      	lsrs	r3, r3, #26
 800673e:	3301      	adds	r3, #1
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	2101      	movs	r1, #1
 8006746:	fa01 f303 	lsl.w	r3, r1, r3
 800674a:	e017      	b.n	800677c <HAL_ADC_ConfigChannel+0x644>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	fa93 f3a3 	rbit	r3, r3
 8006758:	61fb      	str	r3, [r7, #28]
  return result;
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006764:	2320      	movs	r3, #32
 8006766:	e003      	b.n	8006770 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	fab3 f383 	clz	r3, r3
 800676e:	b2db      	uxtb	r3, r3
 8006770:	3301      	adds	r3, #1
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	2101      	movs	r1, #1
 8006778:	fa01 f303 	lsl.w	r3, r1, r3
 800677c:	ea42 0103 	orr.w	r1, r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10d      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x670>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	0e9b      	lsrs	r3, r3, #26
 8006792:	3301      	adds	r3, #1
 8006794:	f003 021f 	and.w	r2, r3, #31
 8006798:	4613      	mov	r3, r2
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	4413      	add	r3, r2
 800679e:	3b1e      	subs	r3, #30
 80067a0:	051b      	lsls	r3, r3, #20
 80067a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067a6:	e01b      	b.n	80067e0 <HAL_ADC_ConfigChannel+0x6a8>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	fa93 f3a3 	rbit	r3, r3
 80067b4:	613b      	str	r3, [r7, #16]
  return result;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80067c0:	2320      	movs	r3, #32
 80067c2:	e003      	b.n	80067cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	fab3 f383 	clz	r3, r3
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	3301      	adds	r3, #1
 80067ce:	f003 021f 	and.w	r2, r3, #31
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	3b1e      	subs	r3, #30
 80067da:	051b      	lsls	r3, r3, #20
 80067dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067e6:	4619      	mov	r1, r3
 80067e8:	f7ff f8c5 	bl	8005976 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4b09      	ldr	r3, [pc, #36]	@ (8006818 <HAL_ADC_ConfigChannel+0x6e0>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80be 	beq.w	8006976 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006802:	d004      	beq.n	800680e <HAL_ADC_ConfigChannel+0x6d6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a04      	ldr	r2, [pc, #16]	@ (800681c <HAL_ADC_ConfigChannel+0x6e4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d10a      	bne.n	8006824 <HAL_ADC_ConfigChannel+0x6ec>
 800680e:	4b04      	ldr	r3, [pc, #16]	@ (8006820 <HAL_ADC_ConfigChannel+0x6e8>)
 8006810:	e009      	b.n	8006826 <HAL_ADC_ConfigChannel+0x6ee>
 8006812:	bf00      	nop
 8006814:	407f0000 	.word	0x407f0000
 8006818:	80080000 	.word	0x80080000
 800681c:	50000100 	.word	0x50000100
 8006820:	50000300 	.word	0x50000300
 8006824:	4b59      	ldr	r3, [pc, #356]	@ (800698c <HAL_ADC_ConfigChannel+0x854>)
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe ffba 	bl	80057a0 <LL_ADC_GetCommonPathInternalCh>
 800682c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a56      	ldr	r2, [pc, #344]	@ (8006990 <HAL_ADC_ConfigChannel+0x858>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <HAL_ADC_ConfigChannel+0x70c>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a55      	ldr	r2, [pc, #340]	@ (8006994 <HAL_ADC_ConfigChannel+0x85c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d13a      	bne.n	80068ba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006848:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d134      	bne.n	80068ba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006858:	d005      	beq.n	8006866 <HAL_ADC_ConfigChannel+0x72e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a4e      	ldr	r2, [pc, #312]	@ (8006998 <HAL_ADC_ConfigChannel+0x860>)
 8006860:	4293      	cmp	r3, r2
 8006862:	f040 8085 	bne.w	8006970 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800686e:	d004      	beq.n	800687a <HAL_ADC_ConfigChannel+0x742>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a49      	ldr	r2, [pc, #292]	@ (800699c <HAL_ADC_ConfigChannel+0x864>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d101      	bne.n	800687e <HAL_ADC_ConfigChannel+0x746>
 800687a:	4a49      	ldr	r2, [pc, #292]	@ (80069a0 <HAL_ADC_ConfigChannel+0x868>)
 800687c:	e000      	b.n	8006880 <HAL_ADC_ConfigChannel+0x748>
 800687e:	4a43      	ldr	r2, [pc, #268]	@ (800698c <HAL_ADC_ConfigChannel+0x854>)
 8006880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006884:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7fe ff75 	bl	800577a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006890:	4b44      	ldr	r3, [pc, #272]	@ (80069a4 <HAL_ADC_ConfigChannel+0x86c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	4a44      	ldr	r2, [pc, #272]	@ (80069a8 <HAL_ADC_ConfigChannel+0x870>)
 8006898:	fba2 2303 	umull	r2, r3, r2, r3
 800689c:	099b      	lsrs	r3, r3, #6
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	4613      	mov	r3, r2
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80068aa:	e002      	b.n	80068b2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1f9      	bne.n	80068ac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068b8:	e05a      	b.n	8006970 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a3b      	ldr	r2, [pc, #236]	@ (80069ac <HAL_ADC_ConfigChannel+0x874>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d125      	bne.n	8006910 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80068c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d11f      	bne.n	8006910 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a31      	ldr	r2, [pc, #196]	@ (800699c <HAL_ADC_ConfigChannel+0x864>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d104      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x7ac>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a34      	ldr	r2, [pc, #208]	@ (80069b0 <HAL_ADC_ConfigChannel+0x878>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d047      	beq.n	8006974 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068ec:	d004      	beq.n	80068f8 <HAL_ADC_ConfigChannel+0x7c0>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a2a      	ldr	r2, [pc, #168]	@ (800699c <HAL_ADC_ConfigChannel+0x864>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d101      	bne.n	80068fc <HAL_ADC_ConfigChannel+0x7c4>
 80068f8:	4a29      	ldr	r2, [pc, #164]	@ (80069a0 <HAL_ADC_ConfigChannel+0x868>)
 80068fa:	e000      	b.n	80068fe <HAL_ADC_ConfigChannel+0x7c6>
 80068fc:	4a23      	ldr	r2, [pc, #140]	@ (800698c <HAL_ADC_ConfigChannel+0x854>)
 80068fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f7fe ff36 	bl	800577a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800690e:	e031      	b.n	8006974 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a27      	ldr	r2, [pc, #156]	@ (80069b4 <HAL_ADC_ConfigChannel+0x87c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d12d      	bne.n	8006976 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800691a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800691e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d127      	bne.n	8006976 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1c      	ldr	r2, [pc, #112]	@ (800699c <HAL_ADC_ConfigChannel+0x864>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006938:	d004      	beq.n	8006944 <HAL_ADC_ConfigChannel+0x80c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a17      	ldr	r2, [pc, #92]	@ (800699c <HAL_ADC_ConfigChannel+0x864>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d101      	bne.n	8006948 <HAL_ADC_ConfigChannel+0x810>
 8006944:	4a16      	ldr	r2, [pc, #88]	@ (80069a0 <HAL_ADC_ConfigChannel+0x868>)
 8006946:	e000      	b.n	800694a <HAL_ADC_ConfigChannel+0x812>
 8006948:	4a10      	ldr	r2, [pc, #64]	@ (800698c <HAL_ADC_ConfigChannel+0x854>)
 800694a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800694e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fe ff10 	bl	800577a <LL_ADC_SetCommonPathInternalCh>
 800695a:	e00c      	b.n	8006976 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800696e:	e002      	b.n	8006976 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006970:	bf00      	nop
 8006972:	e000      	b.n	8006976 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006974:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800697e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006982:	4618      	mov	r0, r3
 8006984:	37d8      	adds	r7, #216	@ 0xd8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	50000700 	.word	0x50000700
 8006990:	c3210000 	.word	0xc3210000
 8006994:	90c00010 	.word	0x90c00010
 8006998:	50000600 	.word	0x50000600
 800699c:	50000100 	.word	0x50000100
 80069a0:	50000300 	.word	0x50000300
 80069a4:	20000260 	.word	0x20000260
 80069a8:	053e2d63 	.word	0x053e2d63
 80069ac:	c7520000 	.word	0xc7520000
 80069b0:	50000500 	.word	0x50000500
 80069b4:	cb840000 	.word	0xcb840000

080069b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff f8a7 	bl	8005b1c <LL_ADC_IsEnabled>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d176      	bne.n	8006ac2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	4b3c      	ldr	r3, [pc, #240]	@ (8006acc <ADC_Enable+0x114>)
 80069dc:	4013      	ands	r3, r2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00d      	beq.n	80069fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e6:	f043 0210 	orr.w	r2, r3, #16
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069f2:	f043 0201 	orr.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e062      	b.n	8006ac4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff f862 	bl	8005acc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a10:	d004      	beq.n	8006a1c <ADC_Enable+0x64>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2e      	ldr	r2, [pc, #184]	@ (8006ad0 <ADC_Enable+0x118>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d101      	bne.n	8006a20 <ADC_Enable+0x68>
 8006a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad4 <ADC_Enable+0x11c>)
 8006a1e:	e000      	b.n	8006a22 <ADC_Enable+0x6a>
 8006a20:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad8 <ADC_Enable+0x120>)
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe febc 	bl	80057a0 <LL_ADC_GetCommonPathInternalCh>
 8006a28:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d013      	beq.n	8006a5a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a32:	4b2a      	ldr	r3, [pc, #168]	@ (8006adc <ADC_Enable+0x124>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	099b      	lsrs	r3, r3, #6
 8006a38:	4a29      	ldr	r2, [pc, #164]	@ (8006ae0 <ADC_Enable+0x128>)
 8006a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3e:	099b      	lsrs	r3, r3, #6
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	4613      	mov	r3, r2
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a4c:	e002      	b.n	8006a54 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1f9      	bne.n	8006a4e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006a5a:	f7fe fe6f 	bl	800573c <HAL_GetTick>
 8006a5e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a60:	e028      	b.n	8006ab4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff f858 	bl	8005b1c <LL_ADC_IsEnabled>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d104      	bne.n	8006a7c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff f828 	bl	8005acc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a7c:	f7fe fe5e 	bl	800573c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d914      	bls.n	8006ab4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d00d      	beq.n	8006ab4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a9c:	f043 0210 	orr.w	r2, r3, #16
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa8:	f043 0201 	orr.w	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e007      	b.n	8006ac4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d1cf      	bne.n	8006a62 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	8000003f 	.word	0x8000003f
 8006ad0:	50000100 	.word	0x50000100
 8006ad4:	50000300 	.word	0x50000300
 8006ad8:	50000700 	.word	0x50000700
 8006adc:	20000260 	.word	0x20000260
 8006ae0:	053e2d63 	.word	0x053e2d63

08006ae4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff f826 	bl	8005b42 <LL_ADC_IsDisableOngoing>
 8006af6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff f80d 	bl	8005b1c <LL_ADC_IsEnabled>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d047      	beq.n	8006b98 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d144      	bne.n	8006b98 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f003 030d 	and.w	r3, r3, #13
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d10c      	bne.n	8006b36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe ffe7 	bl	8005af4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b2e:	f7fe fe05 	bl	800573c <HAL_GetTick>
 8006b32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b34:	e029      	b.n	8006b8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b3a:	f043 0210 	orr.w	r2, r3, #16
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b46:	f043 0201 	orr.w	r2, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e023      	b.n	8006b9a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006b52:	f7fe fdf3 	bl	800573c <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d914      	bls.n	8006b8a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b72:	f043 0210 	orr.w	r2, r3, #16
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b7e:	f043 0201 	orr.w	r2, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e007      	b.n	8006b9a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1dc      	bne.n	8006b52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d14b      	bne.n	8006c54 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d021      	beq.n	8006c1a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fe8c 	bl	80058f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d032      	beq.n	8006c4c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d12b      	bne.n	8006c4c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11f      	bne.n	8006c4c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c10:	f043 0201 	orr.w	r2, r3, #1
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c18:	e018      	b.n	8006c4c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d111      	bne.n	8006c4c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c44:	f043 0201 	orr.w	r2, r3, #1
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff fa55 	bl	80060fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006c52:	e00e      	b.n	8006c72 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff fa5f 	bl	8006124 <HAL_ADC_ErrorCallback>
}
 8006c66:	e004      	b.n	8006c72 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
}
 8006c72:	bf00      	nop
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f7ff fa41 	bl	8006110 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb4:	f043 0204 	orr.w	r2, r3, #4
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff fa31 	bl	8006124 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <LL_ADC_IsEnabled>:
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <LL_ADC_IsEnabled+0x18>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <LL_ADC_IsEnabled+0x1a>
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <LL_ADC_StartCalibration>:
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006d02:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	609a      	str	r2, [r3, #8]
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <LL_ADC_IsCalibrationOnGoing>:
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d36:	d101      	bne.n	8006d3c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <LL_ADC_REG_IsConversionOngoing>:
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d101      	bne.n	8006d62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_ADCEx_Calibration_Start+0x1c>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e04d      	b.n	8006e28 <HAL_ADCEx_Calibration_Start+0xb8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff fea5 	bl	8006ae4 <ADC_Disable>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d136      	bne.n	8006e12 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006da8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006dac:	f023 0302 	bic.w	r3, r3, #2
 8006db0:	f043 0202 	orr.w	r2, r3, #2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff ff96 	bl	8006cf0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006dc4:	e014      	b.n	8006df0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a18      	ldr	r2, [pc, #96]	@ (8006e30 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d90d      	bls.n	8006df0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd8:	f023 0312 	bic.w	r3, r3, #18
 8006ddc:	f043 0210 	orr.w	r2, r3, #16
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e01b      	b.n	8006e28 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff ff94 	bl	8006d22 <LL_ADC_IsCalibrationOnGoing>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e2      	bne.n	8006dc6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e04:	f023 0303 	bic.w	r3, r3, #3
 8006e08:	f043 0201 	orr.w	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e10:	e005      	b.n	8006e1e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e16:	f043 0210 	orr.w	r2, r3, #16
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	0004de01 	.word	0x0004de01

08006e34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006e34:	b590      	push	{r4, r7, lr}
 8006e36:	b0a1      	sub	sp, #132	@ 0x84
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e0e7      	b.n	8007022 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e6a:	d102      	bne.n	8006e72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800702c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006e6e:	60bb      	str	r3, [r7, #8]
 8006e70:	e009      	b.n	8006e86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6e      	ldr	r2, [pc, #440]	@ (8007030 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d102      	bne.n	8006e82 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006e7c:	4b6d      	ldr	r3, [pc, #436]	@ (8007034 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006e7e:	60bb      	str	r3, [r7, #8]
 8006e80:	e001      	b.n	8006e86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006e82:	2300      	movs	r3, #0
 8006e84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10b      	bne.n	8006ea4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e90:	f043 0220 	orr.w	r2, r3, #32
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0be      	b.n	8007022 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff ff4f 	bl	8006d4a <LL_ADC_REG_IsConversionOngoing>
 8006eac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff ff49 	bl	8006d4a <LL_ADC_REG_IsConversionOngoing>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 80a0 	bne.w	8007000 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006ec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f040 809c 	bne.w	8007000 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ed0:	d004      	beq.n	8006edc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a55      	ldr	r2, [pc, #340]	@ (800702c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d101      	bne.n	8006ee0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006edc:	4b56      	ldr	r3, [pc, #344]	@ (8007038 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006ede:	e000      	b.n	8006ee2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006ee0:	4b56      	ldr	r3, [pc, #344]	@ (800703c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006ee2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d04b      	beq.n	8006f84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006eec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	6859      	ldr	r1, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006efe:	035b      	lsls	r3, r3, #13
 8006f00:	430b      	orrs	r3, r1
 8006f02:	431a      	orrs	r2, r3
 8006f04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f10:	d004      	beq.n	8006f1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a45      	ldr	r2, [pc, #276]	@ (800702c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d10f      	bne.n	8006f3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006f1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006f20:	f7ff fed3 	bl	8006cca <LL_ADC_IsEnabled>
 8006f24:	4604      	mov	r4, r0
 8006f26:	4841      	ldr	r0, [pc, #260]	@ (800702c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f28:	f7ff fecf 	bl	8006cca <LL_ADC_IsEnabled>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	4323      	orrs	r3, r4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	e012      	b.n	8006f62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006f3c:	483c      	ldr	r0, [pc, #240]	@ (8007030 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006f3e:	f7ff fec4 	bl	8006cca <LL_ADC_IsEnabled>
 8006f42:	4604      	mov	r4, r0
 8006f44:	483b      	ldr	r0, [pc, #236]	@ (8007034 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006f46:	f7ff fec0 	bl	8006cca <LL_ADC_IsEnabled>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	431c      	orrs	r4, r3
 8006f4e:	483c      	ldr	r0, [pc, #240]	@ (8007040 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006f50:	f7ff febb 	bl	8006cca <LL_ADC_IsEnabled>
 8006f54:	4603      	mov	r3, r0
 8006f56:	4323      	orrs	r3, r4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bf0c      	ite	eq
 8006f5c:	2301      	moveq	r3, #1
 8006f5e:	2300      	movne	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d056      	beq.n	8007014 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006f6e:	f023 030f 	bic.w	r3, r3, #15
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	6811      	ldr	r1, [r2, #0]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	6892      	ldr	r2, [r2, #8]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f80:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006f82:	e047      	b.n	8007014 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f98:	d004      	beq.n	8006fa4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a23      	ldr	r2, [pc, #140]	@ (800702c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d10f      	bne.n	8006fc4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006fa4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006fa8:	f7ff fe8f 	bl	8006cca <LL_ADC_IsEnabled>
 8006fac:	4604      	mov	r4, r0
 8006fae:	481f      	ldr	r0, [pc, #124]	@ (800702c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fb0:	f7ff fe8b 	bl	8006cca <LL_ADC_IsEnabled>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	4323      	orrs	r3, r4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf0c      	ite	eq
 8006fbc:	2301      	moveq	r3, #1
 8006fbe:	2300      	movne	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	e012      	b.n	8006fea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006fc4:	481a      	ldr	r0, [pc, #104]	@ (8007030 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006fc6:	f7ff fe80 	bl	8006cca <LL_ADC_IsEnabled>
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4819      	ldr	r0, [pc, #100]	@ (8007034 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006fce:	f7ff fe7c 	bl	8006cca <LL_ADC_IsEnabled>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	431c      	orrs	r4, r3
 8006fd6:	481a      	ldr	r0, [pc, #104]	@ (8007040 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006fd8:	f7ff fe77 	bl	8006cca <LL_ADC_IsEnabled>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	4323      	orrs	r3, r4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d012      	beq.n	8007014 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006ff6:	f023 030f 	bic.w	r3, r3, #15
 8006ffa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006ffc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006ffe:	e009      	b.n	8007014 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007012:	e000      	b.n	8007016 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007014:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800701e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007022:	4618      	mov	r0, r3
 8007024:	3784      	adds	r7, #132	@ 0x84
 8007026:	46bd      	mov	sp, r7
 8007028:	bd90      	pop	{r4, r7, pc}
 800702a:	bf00      	nop
 800702c:	50000100 	.word	0x50000100
 8007030:	50000400 	.word	0x50000400
 8007034:	50000500 	.word	0x50000500
 8007038:	50000300 	.word	0x50000300
 800703c:	50000700 	.word	0x50000700
 8007040:	50000600 	.word	0x50000600

08007044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007054:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <__NVIC_SetPriorityGrouping+0x44>)
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007060:	4013      	ands	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800706c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007076:	4a04      	ldr	r2, [pc, #16]	@ (8007088 <__NVIC_SetPriorityGrouping+0x44>)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	60d3      	str	r3, [r2, #12]
}
 800707c:	bf00      	nop
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	e000ed00 	.word	0xe000ed00

0800708c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007090:	4b04      	ldr	r3, [pc, #16]	@ (80070a4 <__NVIC_GetPriorityGrouping+0x18>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	0a1b      	lsrs	r3, r3, #8
 8007096:	f003 0307 	and.w	r3, r3, #7
}
 800709a:	4618      	mov	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	e000ed00 	.word	0xe000ed00

080070a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	db0b      	blt.n	80070d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	f003 021f 	and.w	r2, r3, #31
 80070c0:	4907      	ldr	r1, [pc, #28]	@ (80070e0 <__NVIC_EnableIRQ+0x38>)
 80070c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	2001      	movs	r0, #1
 80070ca:	fa00 f202 	lsl.w	r2, r0, r2
 80070ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	e000e100 	.word	0xe000e100

080070e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	db0a      	blt.n	800710e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	490c      	ldr	r1, [pc, #48]	@ (8007130 <__NVIC_SetPriority+0x4c>)
 80070fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007102:	0112      	lsls	r2, r2, #4
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	440b      	add	r3, r1
 8007108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800710c:	e00a      	b.n	8007124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	b2da      	uxtb	r2, r3
 8007112:	4908      	ldr	r1, [pc, #32]	@ (8007134 <__NVIC_SetPriority+0x50>)
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	3b04      	subs	r3, #4
 800711c:	0112      	lsls	r2, r2, #4
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	440b      	add	r3, r1
 8007122:	761a      	strb	r2, [r3, #24]
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	e000e100 	.word	0xe000e100
 8007134:	e000ed00 	.word	0xe000ed00

08007138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007138:	b480      	push	{r7}
 800713a:	b089      	sub	sp, #36	@ 0x24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f1c3 0307 	rsb	r3, r3, #7
 8007152:	2b04      	cmp	r3, #4
 8007154:	bf28      	it	cs
 8007156:	2304      	movcs	r3, #4
 8007158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	3304      	adds	r3, #4
 800715e:	2b06      	cmp	r3, #6
 8007160:	d902      	bls.n	8007168 <NVIC_EncodePriority+0x30>
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	3b03      	subs	r3, #3
 8007166:	e000      	b.n	800716a <NVIC_EncodePriority+0x32>
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800716c:	f04f 32ff 	mov.w	r2, #4294967295
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	43da      	mvns	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	401a      	ands	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007180:	f04f 31ff 	mov.w	r1, #4294967295
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	fa01 f303 	lsl.w	r3, r1, r3
 800718a:	43d9      	mvns	r1, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007190:	4313      	orrs	r3, r2
         );
}
 8007192:	4618      	mov	r0, r3
 8007194:	3724      	adds	r7, #36	@ 0x24
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071b0:	d301      	bcc.n	80071b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071b2:	2301      	movs	r3, #1
 80071b4:	e00f      	b.n	80071d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071b6:	4a0a      	ldr	r2, [pc, #40]	@ (80071e0 <SysTick_Config+0x40>)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071be:	210f      	movs	r1, #15
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	f7ff ff8e 	bl	80070e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071c8:	4b05      	ldr	r3, [pc, #20]	@ (80071e0 <SysTick_Config+0x40>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071ce:	4b04      	ldr	r3, [pc, #16]	@ (80071e0 <SysTick_Config+0x40>)
 80071d0:	2207      	movs	r2, #7
 80071d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	e000e010 	.word	0xe000e010

080071e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff ff29 	bl	8007044 <__NVIC_SetPriorityGrouping>
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b086      	sub	sp, #24
 80071fe:	af00      	add	r7, sp, #0
 8007200:	4603      	mov	r3, r0
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
 8007206:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007208:	f7ff ff40 	bl	800708c <__NVIC_GetPriorityGrouping>
 800720c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	6978      	ldr	r0, [r7, #20]
 8007214:	f7ff ff90 	bl	8007138 <NVIC_EncodePriority>
 8007218:	4602      	mov	r2, r0
 800721a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800721e:	4611      	mov	r1, r2
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff ff5f 	bl	80070e4 <__NVIC_SetPriority>
}
 8007226:	bf00      	nop
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	4603      	mov	r3, r0
 8007236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff ff33 	bl	80070a8 <__NVIC_EnableIRQ>
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff ffa4 	bl	80071a0 <SysTick_Config>
 8007258:	4603      	mov	r3, r0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e08d      	b.n	8007392 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	4b47      	ldr	r3, [pc, #284]	@ (800739c <HAL_DMA_Init+0x138>)
 800727e:	429a      	cmp	r2, r3
 8007280:	d80f      	bhi.n	80072a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	4b45      	ldr	r3, [pc, #276]	@ (80073a0 <HAL_DMA_Init+0x13c>)
 800728a:	4413      	add	r3, r2
 800728c:	4a45      	ldr	r2, [pc, #276]	@ (80073a4 <HAL_DMA_Init+0x140>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	091b      	lsrs	r3, r3, #4
 8007294:	009a      	lsls	r2, r3, #2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a42      	ldr	r2, [pc, #264]	@ (80073a8 <HAL_DMA_Init+0x144>)
 800729e:	641a      	str	r2, [r3, #64]	@ 0x40
 80072a0:	e00e      	b.n	80072c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	4b40      	ldr	r3, [pc, #256]	@ (80073ac <HAL_DMA_Init+0x148>)
 80072aa:	4413      	add	r3, r2
 80072ac:	4a3d      	ldr	r2, [pc, #244]	@ (80073a4 <HAL_DMA_Init+0x140>)
 80072ae:	fba2 2303 	umull	r2, r3, r2, r3
 80072b2:	091b      	lsrs	r3, r3, #4
 80072b4:	009a      	lsls	r2, r3, #2
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a3c      	ldr	r2, [pc, #240]	@ (80073b0 <HAL_DMA_Init+0x14c>)
 80072be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80072d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80072e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa76 	bl	8007804 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007320:	d102      	bne.n	8007328 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007330:	b2d2      	uxtb	r2, r2
 8007332:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800733c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d010      	beq.n	8007368 <HAL_DMA_Init+0x104>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b04      	cmp	r3, #4
 800734c:	d80c      	bhi.n	8007368 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa96 	bl	8007880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007364:	605a      	str	r2, [r3, #4]
 8007366:	e008      	b.n	800737a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40020407 	.word	0x40020407
 80073a0:	bffdfff8 	.word	0xbffdfff8
 80073a4:	cccccccd 	.word	0xcccccccd
 80073a8:	40020000 	.word	0x40020000
 80073ac:	bffdfbf8 	.word	0xbffdfbf8
 80073b0:	40020400 	.word	0x40020400

080073b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_DMA_Start_IT+0x20>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e066      	b.n	80074a2 <HAL_DMA_Start_IT+0xee>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d155      	bne.n	8007494 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 f9bb 	bl	8007788 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007416:	2b00      	cmp	r3, #0
 8007418:	d008      	beq.n	800742c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 020e 	orr.w	r2, r2, #14
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	e00f      	b.n	800744c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0204 	bic.w	r2, r2, #4
 800743a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 020a 	orr.w	r2, r2, #10
 800744a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007468:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007480:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0201 	orr.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e005      	b.n	80074a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800749c:	2302      	movs	r3, #2
 800749e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d005      	beq.n	80074ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2204      	movs	r2, #4
 80074c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]
 80074cc:	e037      	b.n	800753e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 020e 	bic.w	r2, r2, #14
 80074dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0201 	bic.w	r2, r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007502:	f003 021f 	and.w	r2, r3, #31
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750a:	2101      	movs	r1, #1
 800750c:	fa01 f202 	lsl.w	r2, r1, r2
 8007510:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800751a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00c      	beq.n	800753e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007532:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800753c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d00d      	beq.n	8007590 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2204      	movs	r2, #4
 8007578:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	73fb      	strb	r3, [r7, #15]
 800758e:	e047      	b.n	8007620 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 020e 	bic.w	r2, r2, #14
 800759e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0201 	bic.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c4:	f003 021f 	and.w	r2, r3, #31
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075cc:	2101      	movs	r1, #1
 80075ce:	fa01 f202 	lsl.w	r2, r1, r2
 80075d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80075dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00c      	beq.n	8007600 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80075fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
    }
  }
  return status;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	2204      	movs	r2, #4
 800764c:	409a      	lsls	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4013      	ands	r3, r2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d026      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x7a>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d021      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d107      	bne.n	800767e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0204 	bic.w	r2, r2, #4
 800767c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007682:	f003 021f 	and.w	r2, r3, #31
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768a:	2104      	movs	r1, #4
 800768c:	fa01 f202 	lsl.w	r2, r1, r2
 8007690:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007696:	2b00      	cmp	r3, #0
 8007698:	d071      	beq.n	800777e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80076a2:	e06c      	b.n	800777e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	2202      	movs	r2, #2
 80076ae:	409a      	lsls	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4013      	ands	r3, r2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d02e      	beq.n	8007716 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d029      	beq.n	8007716 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 020a 	bic.w	r2, r2, #10
 80076de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ec:	f003 021f 	and.w	r2, r3, #31
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f4:	2102      	movs	r1, #2
 80076f6:	fa01 f202 	lsl.w	r2, r1, r2
 80076fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d038      	beq.n	800777e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007714:	e033      	b.n	800777e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800771a:	f003 031f 	and.w	r3, r3, #31
 800771e:	2208      	movs	r2, #8
 8007720:	409a      	lsls	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4013      	ands	r3, r2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d02a      	beq.n	8007780 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d025      	beq.n	8007780 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 020e 	bic.w	r2, r2, #14
 8007742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007748:	f003 021f 	and.w	r2, r3, #31
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007750:	2101      	movs	r1, #1
 8007752:	fa01 f202 	lsl.w	r2, r1, r2
 8007756:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800777e:	bf00      	nop
 8007780:	bf00      	nop
}
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800779e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80077b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b6:	f003 021f 	and.w	r2, r3, #31
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077be:	2101      	movs	r1, #1
 80077c0:	fa01 f202 	lsl.w	r2, r1, r2
 80077c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	2b10      	cmp	r3, #16
 80077d4:	d108      	bne.n	80077e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80077e6:	e007      	b.n	80077f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	60da      	str	r2, [r3, #12]
}
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	4b16      	ldr	r3, [pc, #88]	@ (800786c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007814:	429a      	cmp	r2, r3
 8007816:	d802      	bhi.n	800781e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007818:	4b15      	ldr	r3, [pc, #84]	@ (8007870 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e001      	b.n	8007822 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800781e:	4b15      	ldr	r3, [pc, #84]	@ (8007874 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007820:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	3b08      	subs	r3, #8
 800782e:	4a12      	ldr	r2, [pc, #72]	@ (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007830:	fba2 2303 	umull	r2, r3, r2, r3
 8007834:	091b      	lsrs	r3, r3, #4
 8007836:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783c:	089b      	lsrs	r3, r3, #2
 800783e:	009a      	lsls	r2, r3, #2
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	4413      	add	r3, r2
 8007844:	461a      	mov	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a0b      	ldr	r2, [pc, #44]	@ (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800784e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f003 031f 	and.w	r3, r3, #31
 8007856:	2201      	movs	r2, #1
 8007858:	409a      	lsls	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800785e:	bf00      	nop
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40020407 	.word	0x40020407
 8007870:	40020800 	.word	0x40020800
 8007874:	40020820 	.word	0x40020820
 8007878:	cccccccd 	.word	0xcccccccd
 800787c:	40020880 	.word	0x40020880

08007880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4b0b      	ldr	r3, [pc, #44]	@ (80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	461a      	mov	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a08      	ldr	r2, [pc, #32]	@ (80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80078a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2201      	movs	r2, #1
 80078ae:	409a      	lsls	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	1000823f 	.word	0x1000823f
 80078c4:	40020940 	.word	0x40020940

080078c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80078d6:	e15a      	b.n	8007b8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	2101      	movs	r1, #1
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	fa01 f303 	lsl.w	r3, r1, r3
 80078e4:	4013      	ands	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 814c 	beq.w	8007b88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d005      	beq.n	8007908 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007904:	2b02      	cmp	r3, #2
 8007906:	d130      	bne.n	800796a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	2203      	movs	r2, #3
 8007914:	fa02 f303 	lsl.w	r3, r2, r3
 8007918:	43db      	mvns	r3, r3
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4013      	ands	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	fa02 f303 	lsl.w	r3, r2, r3
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800793e:	2201      	movs	r2, #1
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	43db      	mvns	r3, r3
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4013      	ands	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	091b      	lsrs	r3, r3, #4
 8007954:	f003 0201 	and.w	r2, r3, #1
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	2b03      	cmp	r3, #3
 8007974:	d017      	beq.n	80079a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	2203      	movs	r2, #3
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	43db      	mvns	r3, r3
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4013      	ands	r3, r2
 800798c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	fa02 f303 	lsl.w	r3, r2, r3
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d123      	bne.n	80079fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	08da      	lsrs	r2, r3, #3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3208      	adds	r2, #8
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	220f      	movs	r2, #15
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	43db      	mvns	r3, r3
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4013      	ands	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	08da      	lsrs	r2, r3, #3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3208      	adds	r2, #8
 80079f4:	6939      	ldr	r1, [r7, #16]
 80079f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	2203      	movs	r2, #3
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	43db      	mvns	r3, r3
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 0203 	and.w	r2, r3, #3
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 80a6 	beq.w	8007b88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a3c:	4b5b      	ldr	r3, [pc, #364]	@ (8007bac <HAL_GPIO_Init+0x2e4>)
 8007a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a40:	4a5a      	ldr	r2, [pc, #360]	@ (8007bac <HAL_GPIO_Init+0x2e4>)
 8007a42:	f043 0301 	orr.w	r3, r3, #1
 8007a46:	6613      	str	r3, [r2, #96]	@ 0x60
 8007a48:	4b58      	ldr	r3, [pc, #352]	@ (8007bac <HAL_GPIO_Init+0x2e4>)
 8007a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	60bb      	str	r3, [r7, #8]
 8007a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a54:	4a56      	ldr	r2, [pc, #344]	@ (8007bb0 <HAL_GPIO_Init+0x2e8>)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	3302      	adds	r3, #2
 8007a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f003 0303 	and.w	r3, r3, #3
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	220f      	movs	r2, #15
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	43db      	mvns	r3, r3
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4013      	ands	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007a7e:	d01f      	beq.n	8007ac0 <HAL_GPIO_Init+0x1f8>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a4c      	ldr	r2, [pc, #304]	@ (8007bb4 <HAL_GPIO_Init+0x2ec>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d019      	beq.n	8007abc <HAL_GPIO_Init+0x1f4>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a4b      	ldr	r2, [pc, #300]	@ (8007bb8 <HAL_GPIO_Init+0x2f0>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d013      	beq.n	8007ab8 <HAL_GPIO_Init+0x1f0>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a4a      	ldr	r2, [pc, #296]	@ (8007bbc <HAL_GPIO_Init+0x2f4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00d      	beq.n	8007ab4 <HAL_GPIO_Init+0x1ec>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a49      	ldr	r2, [pc, #292]	@ (8007bc0 <HAL_GPIO_Init+0x2f8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d007      	beq.n	8007ab0 <HAL_GPIO_Init+0x1e8>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a48      	ldr	r2, [pc, #288]	@ (8007bc4 <HAL_GPIO_Init+0x2fc>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d101      	bne.n	8007aac <HAL_GPIO_Init+0x1e4>
 8007aa8:	2305      	movs	r3, #5
 8007aaa:	e00a      	b.n	8007ac2 <HAL_GPIO_Init+0x1fa>
 8007aac:	2306      	movs	r3, #6
 8007aae:	e008      	b.n	8007ac2 <HAL_GPIO_Init+0x1fa>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	e006      	b.n	8007ac2 <HAL_GPIO_Init+0x1fa>
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e004      	b.n	8007ac2 <HAL_GPIO_Init+0x1fa>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e002      	b.n	8007ac2 <HAL_GPIO_Init+0x1fa>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <HAL_GPIO_Init+0x1fa>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	f002 0203 	and.w	r2, r2, #3
 8007ac8:	0092      	lsls	r2, r2, #2
 8007aca:	4093      	lsls	r3, r2
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ad2:	4937      	ldr	r1, [pc, #220]	@ (8007bb0 <HAL_GPIO_Init+0x2e8>)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	089b      	lsrs	r3, r3, #2
 8007ad8:	3302      	adds	r3, #2
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ae0:	4b39      	ldr	r3, [pc, #228]	@ (8007bc8 <HAL_GPIO_Init+0x300>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4013      	ands	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b04:	4a30      	ldr	r2, [pc, #192]	@ (8007bc8 <HAL_GPIO_Init+0x300>)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8007bc8 <HAL_GPIO_Init+0x300>)
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	43db      	mvns	r3, r3
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4013      	ands	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007b2e:	4a26      	ldr	r2, [pc, #152]	@ (8007bc8 <HAL_GPIO_Init+0x300>)
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007b34:	4b24      	ldr	r3, [pc, #144]	@ (8007bc8 <HAL_GPIO_Init+0x300>)
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4013      	ands	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007b58:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc8 <HAL_GPIO_Init+0x300>)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc8 <HAL_GPIO_Init+0x300>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	43db      	mvns	r3, r3
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b82:	4a11      	ldr	r2, [pc, #68]	@ (8007bc8 <HAL_GPIO_Init+0x300>)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f47f ae9d 	bne.w	80078d8 <HAL_GPIO_Init+0x10>
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	40010000 	.word	0x40010000
 8007bb4:	48000400 	.word	0x48000400
 8007bb8:	48000800 	.word	0x48000800
 8007bbc:	48000c00 	.word	0x48000c00
 8007bc0:	48001000 	.word	0x48001000
 8007bc4:	48001400 	.word	0x48001400
 8007bc8:	40010400 	.word	0x40010400

08007bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691a      	ldr	r2, [r3, #16]
 8007bdc:	887b      	ldrh	r3, [r7, #2]
 8007bde:	4013      	ands	r3, r2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
 8007be8:	e001      	b.n	8007bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c0c:	787b      	ldrb	r3, [r7, #1]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c12:	887a      	ldrh	r2, [r7, #2]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c18:	e002      	b.n	8007c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c1a:	887a      	ldrh	r2, [r7, #2]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c3e:	887a      	ldrh	r2, [r7, #2]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4013      	ands	r3, r2
 8007c44:	041a      	lsls	r2, r3, #16
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	43d9      	mvns	r1, r3
 8007c4a:	887b      	ldrh	r3, [r7, #2]
 8007c4c:	400b      	ands	r3, r1
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	619a      	str	r2, [r3, #24]
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c6a:	4b08      	ldr	r3, [pc, #32]	@ (8007c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c6c:	695a      	ldr	r2, [r3, #20]
 8007c6e:	88fb      	ldrh	r3, [r7, #6]
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d006      	beq.n	8007c84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c76:	4a05      	ldr	r2, [pc, #20]	@ (8007c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c78:	88fb      	ldrh	r3, [r7, #6]
 8007c7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fd f97e 	bl	8004f80 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	40010400 	.word	0x40010400

08007c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d141      	bne.n	8007d22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007caa:	d131      	bne.n	8007d10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007cac:	4b47      	ldr	r3, [pc, #284]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb2:	4a46      	ldr	r2, [pc, #280]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007cbc:	4b43      	ldr	r3, [pc, #268]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007cc4:	4a41      	ldr	r2, [pc, #260]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007cca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ccc:	4b40      	ldr	r3, [pc, #256]	@ (8007dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2232      	movs	r2, #50	@ 0x32
 8007cd2:	fb02 f303 	mul.w	r3, r2, r3
 8007cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8007dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cdc:	0c9b      	lsrs	r3, r3, #18
 8007cde:	3301      	adds	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ce2:	e002      	b.n	8007cea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cea:	4b38      	ldr	r3, [pc, #224]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cf6:	d102      	bne.n	8007cfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f2      	bne.n	8007ce4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007cfe:	4b33      	ldr	r3, [pc, #204]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d0a:	d158      	bne.n	8007dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e057      	b.n	8007dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d10:	4b2e      	ldr	r3, [pc, #184]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d16:	4a2d      	ldr	r2, [pc, #180]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007d20:	e04d      	b.n	8007dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d28:	d141      	bne.n	8007dae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d2a:	4b28      	ldr	r3, [pc, #160]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d36:	d131      	bne.n	8007d9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d38:	4b24      	ldr	r3, [pc, #144]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d3e:	4a23      	ldr	r2, [pc, #140]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d48:	4b20      	ldr	r3, [pc, #128]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007d50:	4a1e      	ldr	r2, [pc, #120]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d58:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2232      	movs	r2, #50	@ 0x32
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
 8007d62:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d64:	fba2 2303 	umull	r2, r3, r2, r3
 8007d68:	0c9b      	lsrs	r3, r3, #18
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d6e:	e002      	b.n	8007d76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d76:	4b15      	ldr	r3, [pc, #84]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d82:	d102      	bne.n	8007d8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1f2      	bne.n	8007d70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d8a:	4b10      	ldr	r3, [pc, #64]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d96:	d112      	bne.n	8007dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e011      	b.n	8007dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da2:	4a0a      	ldr	r2, [pc, #40]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007dac:	e007      	b.n	8007dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007dae:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007db6:	4a05      	ldr	r2, [pc, #20]	@ (8007dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007dbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40007000 	.word	0x40007000
 8007dd0:	20000260 	.word	0x20000260
 8007dd4:	431bde83 	.word	0x431bde83

08007dd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007ddc:	4b05      	ldr	r3, [pc, #20]	@ (8007df4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	4a04      	ldr	r2, [pc, #16]	@ (8007df4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007de6:	6093      	str	r3, [r2, #8]
}
 8007de8:	bf00      	nop
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40007000 	.word	0x40007000

08007df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e2fe      	b.n	8008408 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d075      	beq.n	8007f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e16:	4b97      	ldr	r3, [pc, #604]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f003 030c 	and.w	r3, r3, #12
 8007e1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e20:	4b94      	ldr	r3, [pc, #592]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f003 0303 	and.w	r3, r3, #3
 8007e28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b0c      	cmp	r3, #12
 8007e2e:	d102      	bne.n	8007e36 <HAL_RCC_OscConfig+0x3e>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d002      	beq.n	8007e3c <HAL_RCC_OscConfig+0x44>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d10b      	bne.n	8007e54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e3c:	4b8d      	ldr	r3, [pc, #564]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d05b      	beq.n	8007f00 <HAL_RCC_OscConfig+0x108>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d157      	bne.n	8007f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e2d9      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e5c:	d106      	bne.n	8007e6c <HAL_RCC_OscConfig+0x74>
 8007e5e:	4b85      	ldr	r3, [pc, #532]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a84      	ldr	r2, [pc, #528]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	e01d      	b.n	8007ea8 <HAL_RCC_OscConfig+0xb0>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e74:	d10c      	bne.n	8007e90 <HAL_RCC_OscConfig+0x98>
 8007e76:	4b7f      	ldr	r3, [pc, #508]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	4b7c      	ldr	r3, [pc, #496]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a7b      	ldr	r2, [pc, #492]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	e00b      	b.n	8007ea8 <HAL_RCC_OscConfig+0xb0>
 8007e90:	4b78      	ldr	r3, [pc, #480]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a77      	ldr	r2, [pc, #476]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	4b75      	ldr	r3, [pc, #468]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a74      	ldr	r2, [pc, #464]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007ea2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d013      	beq.n	8007ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb0:	f7fd fc44 	bl	800573c <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eb6:	e008      	b.n	8007eca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eb8:	f7fd fc40 	bl	800573c <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b64      	cmp	r3, #100	@ 0x64
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e29e      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eca:	4b6a      	ldr	r3, [pc, #424]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HAL_RCC_OscConfig+0xc0>
 8007ed6:	e014      	b.n	8007f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed8:	f7fd fc30 	bl	800573c <HAL_GetTick>
 8007edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ee0:	f7fd fc2c 	bl	800573c <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b64      	cmp	r3, #100	@ 0x64
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e28a      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ef2:	4b60      	ldr	r3, [pc, #384]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f0      	bne.n	8007ee0 <HAL_RCC_OscConfig+0xe8>
 8007efe:	e000      	b.n	8007f02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d075      	beq.n	8007ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f0e:	4b59      	ldr	r3, [pc, #356]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 030c 	and.w	r3, r3, #12
 8007f16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f18:	4b56      	ldr	r3, [pc, #344]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0303 	and.w	r3, r3, #3
 8007f20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b0c      	cmp	r3, #12
 8007f26:	d102      	bne.n	8007f2e <HAL_RCC_OscConfig+0x136>
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d002      	beq.n	8007f34 <HAL_RCC_OscConfig+0x13c>
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d11f      	bne.n	8007f74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f34:	4b4f      	ldr	r3, [pc, #316]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <HAL_RCC_OscConfig+0x154>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e25d      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f4c:	4b49      	ldr	r3, [pc, #292]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	4946      	ldr	r1, [pc, #280]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f60:	4b45      	ldr	r3, [pc, #276]	@ (8008078 <HAL_RCC_OscConfig+0x280>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fd fb9d 	bl	80056a4 <HAL_InitTick>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d043      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e249      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d023      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a3c      	ldr	r2, [pc, #240]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f88:	f7fd fbd8 	bl	800573c <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f90:	f7fd fbd4 	bl	800573c <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e232      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fa2:	4b34      	ldr	r3, [pc, #208]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0f0      	beq.n	8007f90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fae:	4b31      	ldr	r3, [pc, #196]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	061b      	lsls	r3, r3, #24
 8007fbc:	492d      	ldr	r1, [pc, #180]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	604b      	str	r3, [r1, #4]
 8007fc2:	e01a      	b.n	8007ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007fca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd0:	f7fd fbb4 	bl	800573c <HAL_GetTick>
 8007fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fd6:	e008      	b.n	8007fea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fd8:	f7fd fbb0 	bl	800573c <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d901      	bls.n	8007fea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e20e      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fea:	4b22      	ldr	r3, [pc, #136]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1f0      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x1e0>
 8007ff6:	e000      	b.n	8007ffa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ff8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0308 	and.w	r3, r3, #8
 8008002:	2b00      	cmp	r3, #0
 8008004:	d041      	beq.n	800808a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d01c      	beq.n	8008048 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800800e:	4b19      	ldr	r3, [pc, #100]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8008010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008014:	4a17      	ldr	r2, [pc, #92]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8008016:	f043 0301 	orr.w	r3, r3, #1
 800801a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800801e:	f7fd fb8d 	bl	800573c <HAL_GetTick>
 8008022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008024:	e008      	b.n	8008038 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008026:	f7fd fb89 	bl	800573c <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e1e7      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008038:	4b0e      	ldr	r3, [pc, #56]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 800803a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0ef      	beq.n	8008026 <HAL_RCC_OscConfig+0x22e>
 8008046:	e020      	b.n	800808a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008048:	4b0a      	ldr	r3, [pc, #40]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 800804a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800804e:	4a09      	ldr	r2, [pc, #36]	@ (8008074 <HAL_RCC_OscConfig+0x27c>)
 8008050:	f023 0301 	bic.w	r3, r3, #1
 8008054:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008058:	f7fd fb70 	bl	800573c <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800805e:	e00d      	b.n	800807c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008060:	f7fd fb6c 	bl	800573c <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d906      	bls.n	800807c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e1ca      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
 8008072:	bf00      	nop
 8008074:	40021000 	.word	0x40021000
 8008078:	20000264 	.word	0x20000264
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800807c:	4b8c      	ldr	r3, [pc, #560]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 800807e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1ea      	bne.n	8008060 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 80a6 	beq.w	80081e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008098:	2300      	movs	r3, #0
 800809a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800809c:	4b84      	ldr	r3, [pc, #528]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 800809e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <HAL_RCC_OscConfig+0x2b4>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <HAL_RCC_OscConfig+0x2b6>
 80080ac:	2300      	movs	r3, #0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00d      	beq.n	80080ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080b2:	4b7f      	ldr	r3, [pc, #508]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 80080b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b6:	4a7e      	ldr	r2, [pc, #504]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 80080b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80080be:	4b7c      	ldr	r3, [pc, #496]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80080ca:	2301      	movs	r3, #1
 80080cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080ce:	4b79      	ldr	r3, [pc, #484]	@ (80082b4 <HAL_RCC_OscConfig+0x4bc>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d118      	bne.n	800810c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080da:	4b76      	ldr	r3, [pc, #472]	@ (80082b4 <HAL_RCC_OscConfig+0x4bc>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a75      	ldr	r2, [pc, #468]	@ (80082b4 <HAL_RCC_OscConfig+0x4bc>)
 80080e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080e6:	f7fd fb29 	bl	800573c <HAL_GetTick>
 80080ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080ec:	e008      	b.n	8008100 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080ee:	f7fd fb25 	bl	800573c <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d901      	bls.n	8008100 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e183      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008100:	4b6c      	ldr	r3, [pc, #432]	@ (80082b4 <HAL_RCC_OscConfig+0x4bc>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0f0      	beq.n	80080ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d108      	bne.n	8008126 <HAL_RCC_OscConfig+0x32e>
 8008114:	4b66      	ldr	r3, [pc, #408]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800811a:	4a65      	ldr	r2, [pc, #404]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 800811c:	f043 0301 	orr.w	r3, r3, #1
 8008120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008124:	e024      	b.n	8008170 <HAL_RCC_OscConfig+0x378>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	2b05      	cmp	r3, #5
 800812c:	d110      	bne.n	8008150 <HAL_RCC_OscConfig+0x358>
 800812e:	4b60      	ldr	r3, [pc, #384]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008134:	4a5e      	ldr	r2, [pc, #376]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008136:	f043 0304 	orr.w	r3, r3, #4
 800813a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800813e:	4b5c      	ldr	r3, [pc, #368]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008144:	4a5a      	ldr	r2, [pc, #360]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008146:	f043 0301 	orr.w	r3, r3, #1
 800814a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800814e:	e00f      	b.n	8008170 <HAL_RCC_OscConfig+0x378>
 8008150:	4b57      	ldr	r3, [pc, #348]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008156:	4a56      	ldr	r2, [pc, #344]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008158:	f023 0301 	bic.w	r3, r3, #1
 800815c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008160:	4b53      	ldr	r3, [pc, #332]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008166:	4a52      	ldr	r2, [pc, #328]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008168:	f023 0304 	bic.w	r3, r3, #4
 800816c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d016      	beq.n	80081a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008178:	f7fd fae0 	bl	800573c <HAL_GetTick>
 800817c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800817e:	e00a      	b.n	8008196 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008180:	f7fd fadc 	bl	800573c <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800818e:	4293      	cmp	r3, r2
 8008190:	d901      	bls.n	8008196 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e138      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008196:	4b46      	ldr	r3, [pc, #280]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0ed      	beq.n	8008180 <HAL_RCC_OscConfig+0x388>
 80081a4:	e015      	b.n	80081d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a6:	f7fd fac9 	bl	800573c <HAL_GetTick>
 80081aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081ac:	e00a      	b.n	80081c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ae:	f7fd fac5 	bl	800573c <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081bc:	4293      	cmp	r3, r2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e121      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081c4:	4b3a      	ldr	r3, [pc, #232]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 80081c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1ed      	bne.n	80081ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081d2:	7ffb      	ldrb	r3, [r7, #31]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d105      	bne.n	80081e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081d8:	4b35      	ldr	r3, [pc, #212]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 80081da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081dc:	4a34      	ldr	r2, [pc, #208]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 80081de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d03c      	beq.n	800826a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01c      	beq.n	8008232 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081f8:	4b2d      	ldr	r3, [pc, #180]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 80081fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081fe:	4a2c      	ldr	r2, [pc, #176]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008200:	f043 0301 	orr.w	r3, r3, #1
 8008204:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008208:	f7fd fa98 	bl	800573c <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800820e:	e008      	b.n	8008222 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008210:	f7fd fa94 	bl	800573c <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d901      	bls.n	8008222 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e0f2      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008222:	4b23      	ldr	r3, [pc, #140]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008224:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0ef      	beq.n	8008210 <HAL_RCC_OscConfig+0x418>
 8008230:	e01b      	b.n	800826a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008232:	4b1f      	ldr	r3, [pc, #124]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008234:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008238:	4a1d      	ldr	r2, [pc, #116]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 800823a:	f023 0301 	bic.w	r3, r3, #1
 800823e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008242:	f7fd fa7b 	bl	800573c <HAL_GetTick>
 8008246:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008248:	e008      	b.n	800825c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800824a:	f7fd fa77 	bl	800573c <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	2b02      	cmp	r3, #2
 8008256:	d901      	bls.n	800825c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e0d5      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800825c:	4b14      	ldr	r3, [pc, #80]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 800825e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1ef      	bne.n	800824a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80c9 	beq.w	8008406 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008274:	4b0e      	ldr	r3, [pc, #56]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f003 030c 	and.w	r3, r3, #12
 800827c:	2b0c      	cmp	r3, #12
 800827e:	f000 8083 	beq.w	8008388 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	2b02      	cmp	r3, #2
 8008288:	d15e      	bne.n	8008348 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800828a:	4b09      	ldr	r3, [pc, #36]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a08      	ldr	r2, [pc, #32]	@ (80082b0 <HAL_RCC_OscConfig+0x4b8>)
 8008290:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008296:	f7fd fa51 	bl	800573c <HAL_GetTick>
 800829a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800829c:	e00c      	b.n	80082b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800829e:	f7fd fa4d 	bl	800573c <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d905      	bls.n	80082b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e0ab      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
 80082b0:	40021000 	.word	0x40021000
 80082b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082b8:	4b55      	ldr	r3, [pc, #340]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1ec      	bne.n	800829e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082c4:	4b52      	ldr	r3, [pc, #328]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	4b52      	ldr	r3, [pc, #328]	@ (8008414 <HAL_RCC_OscConfig+0x61c>)
 80082ca:	4013      	ands	r3, r2
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6a11      	ldr	r1, [r2, #32]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80082d4:	3a01      	subs	r2, #1
 80082d6:	0112      	lsls	r2, r2, #4
 80082d8:	4311      	orrs	r1, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80082de:	0212      	lsls	r2, r2, #8
 80082e0:	4311      	orrs	r1, r2
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80082e6:	0852      	lsrs	r2, r2, #1
 80082e8:	3a01      	subs	r2, #1
 80082ea:	0552      	lsls	r2, r2, #21
 80082ec:	4311      	orrs	r1, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80082f2:	0852      	lsrs	r2, r2, #1
 80082f4:	3a01      	subs	r2, #1
 80082f6:	0652      	lsls	r2, r2, #25
 80082f8:	4311      	orrs	r1, r2
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80082fe:	06d2      	lsls	r2, r2, #27
 8008300:	430a      	orrs	r2, r1
 8008302:	4943      	ldr	r1, [pc, #268]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 8008304:	4313      	orrs	r3, r2
 8008306:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008308:	4b41      	ldr	r3, [pc, #260]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a40      	ldr	r2, [pc, #256]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 800830e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008312:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008314:	4b3e      	ldr	r3, [pc, #248]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	4a3d      	ldr	r2, [pc, #244]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 800831a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800831e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008320:	f7fd fa0c 	bl	800573c <HAL_GetTick>
 8008324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008326:	e008      	b.n	800833a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008328:	f7fd fa08 	bl	800573c <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e066      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800833a:	4b35      	ldr	r3, [pc, #212]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f0      	beq.n	8008328 <HAL_RCC_OscConfig+0x530>
 8008346:	e05e      	b.n	8008406 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008348:	4b31      	ldr	r3, [pc, #196]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a30      	ldr	r2, [pc, #192]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 800834e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008354:	f7fd f9f2 	bl	800573c <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800835a:	e008      	b.n	800836e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800835c:	f7fd f9ee 	bl	800573c <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e04c      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800836e:	4b28      	ldr	r3, [pc, #160]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f0      	bne.n	800835c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800837a:	4b25      	ldr	r3, [pc, #148]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	4924      	ldr	r1, [pc, #144]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 8008380:	4b25      	ldr	r3, [pc, #148]	@ (8008418 <HAL_RCC_OscConfig+0x620>)
 8008382:	4013      	ands	r3, r2
 8008384:	60cb      	str	r3, [r1, #12]
 8008386:	e03e      	b.n	8008406 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e039      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008394:	4b1e      	ldr	r3, [pc, #120]	@ (8008410 <HAL_RCC_OscConfig+0x618>)
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f003 0203 	and.w	r2, r3, #3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d12c      	bne.n	8008402 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b2:	3b01      	subs	r3, #1
 80083b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d123      	bne.n	8008402 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d11b      	bne.n	8008402 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d113      	bne.n	8008402 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e4:	085b      	lsrs	r3, r3, #1
 80083e6:	3b01      	subs	r3, #1
 80083e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d109      	bne.n	8008402 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f8:	085b      	lsrs	r3, r3, #1
 80083fa:	3b01      	subs	r3, #1
 80083fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80083fe:	429a      	cmp	r2, r3
 8008400:	d001      	beq.n	8008406 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e000      	b.n	8008408 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3720      	adds	r7, #32
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40021000 	.word	0x40021000
 8008414:	019f800c 	.word	0x019f800c
 8008418:	feeefffc 	.word	0xfeeefffc

0800841c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e11e      	b.n	8008672 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008434:	4b91      	ldr	r3, [pc, #580]	@ (800867c <HAL_RCC_ClockConfig+0x260>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 030f 	and.w	r3, r3, #15
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d910      	bls.n	8008464 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008442:	4b8e      	ldr	r3, [pc, #568]	@ (800867c <HAL_RCC_ClockConfig+0x260>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f023 020f 	bic.w	r2, r3, #15
 800844a:	498c      	ldr	r1, [pc, #560]	@ (800867c <HAL_RCC_ClockConfig+0x260>)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	4313      	orrs	r3, r2
 8008450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008452:	4b8a      	ldr	r3, [pc, #552]	@ (800867c <HAL_RCC_ClockConfig+0x260>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d001      	beq.n	8008464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e106      	b.n	8008672 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d073      	beq.n	8008558 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b03      	cmp	r3, #3
 8008476:	d129      	bne.n	80084cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008478:	4b81      	ldr	r3, [pc, #516]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e0f4      	b.n	8008672 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008488:	f000 f99e 	bl	80087c8 <RCC_GetSysClockFreqFromPLLSource>
 800848c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	4a7c      	ldr	r2, [pc, #496]	@ (8008684 <HAL_RCC_ClockConfig+0x268>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d93f      	bls.n	8008516 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008496:	4b7a      	ldr	r3, [pc, #488]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d009      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d033      	beq.n	8008516 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d12f      	bne.n	8008516 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80084b6:	4b72      	ldr	r3, [pc, #456]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084be:	4a70      	ldr	r2, [pc, #448]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 80084c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80084c6:	2380      	movs	r3, #128	@ 0x80
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	e024      	b.n	8008516 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d107      	bne.n	80084e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0c6      	b.n	8008672 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084e4:	4b66      	ldr	r3, [pc, #408]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0be      	b.n	8008672 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80084f4:	f000 f8ce 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 80084f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4a61      	ldr	r2, [pc, #388]	@ (8008684 <HAL_RCC_ClockConfig+0x268>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d909      	bls.n	8008516 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008502:	4b5f      	ldr	r3, [pc, #380]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800850a:	4a5d      	ldr	r2, [pc, #372]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 800850c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008510:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008512:	2380      	movs	r3, #128	@ 0x80
 8008514:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008516:	4b5a      	ldr	r3, [pc, #360]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f023 0203 	bic.w	r2, r3, #3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	4957      	ldr	r1, [pc, #348]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008524:	4313      	orrs	r3, r2
 8008526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008528:	f7fd f908 	bl	800573c <HAL_GetTick>
 800852c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800852e:	e00a      	b.n	8008546 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008530:	f7fd f904 	bl	800573c <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800853e:	4293      	cmp	r3, r2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e095      	b.n	8008672 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008546:	4b4e      	ldr	r3, [pc, #312]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f003 020c 	and.w	r2, r3, #12
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	429a      	cmp	r2, r3
 8008556:	d1eb      	bne.n	8008530 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0302 	and.w	r3, r3, #2
 8008560:	2b00      	cmp	r3, #0
 8008562:	d023      	beq.n	80085ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008570:	4b43      	ldr	r3, [pc, #268]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	4a42      	ldr	r2, [pc, #264]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008576:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800857a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008588:	4b3d      	ldr	r3, [pc, #244]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008590:	4a3b      	ldr	r2, [pc, #236]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008592:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008596:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008598:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	4936      	ldr	r1, [pc, #216]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	608b      	str	r3, [r1, #8]
 80085aa:	e008      	b.n	80085be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b80      	cmp	r3, #128	@ 0x80
 80085b0:	d105      	bne.n	80085be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80085b2:	4b33      	ldr	r3, [pc, #204]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	4a32      	ldr	r2, [pc, #200]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 80085b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085be:	4b2f      	ldr	r3, [pc, #188]	@ (800867c <HAL_RCC_ClockConfig+0x260>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 030f 	and.w	r3, r3, #15
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d21d      	bcs.n	8008608 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085cc:	4b2b      	ldr	r3, [pc, #172]	@ (800867c <HAL_RCC_ClockConfig+0x260>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f023 020f 	bic.w	r2, r3, #15
 80085d4:	4929      	ldr	r1, [pc, #164]	@ (800867c <HAL_RCC_ClockConfig+0x260>)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	4313      	orrs	r3, r2
 80085da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085dc:	f7fd f8ae 	bl	800573c <HAL_GetTick>
 80085e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085e2:	e00a      	b.n	80085fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085e4:	f7fd f8aa 	bl	800573c <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e03b      	b.n	8008672 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085fa:	4b20      	ldr	r3, [pc, #128]	@ (800867c <HAL_RCC_ClockConfig+0x260>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 030f 	and.w	r3, r3, #15
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d1ed      	bne.n	80085e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d008      	beq.n	8008626 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008614:	4b1a      	ldr	r3, [pc, #104]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	4917      	ldr	r1, [pc, #92]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008622:	4313      	orrs	r3, r2
 8008624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008632:	4b13      	ldr	r3, [pc, #76]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	490f      	ldr	r1, [pc, #60]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 8008642:	4313      	orrs	r3, r2
 8008644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008646:	f000 f825 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 800864a:	4602      	mov	r2, r0
 800864c:	4b0c      	ldr	r3, [pc, #48]	@ (8008680 <HAL_RCC_ClockConfig+0x264>)
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	091b      	lsrs	r3, r3, #4
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	490c      	ldr	r1, [pc, #48]	@ (8008688 <HAL_RCC_ClockConfig+0x26c>)
 8008658:	5ccb      	ldrb	r3, [r1, r3]
 800865a:	f003 031f 	and.w	r3, r3, #31
 800865e:	fa22 f303 	lsr.w	r3, r2, r3
 8008662:	4a0a      	ldr	r2, [pc, #40]	@ (800868c <HAL_RCC_ClockConfig+0x270>)
 8008664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008666:	4b0a      	ldr	r3, [pc, #40]	@ (8008690 <HAL_RCC_ClockConfig+0x274>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4618      	mov	r0, r3
 800866c:	f7fd f81a 	bl	80056a4 <HAL_InitTick>
 8008670:	4603      	mov	r3, r0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	40022000 	.word	0x40022000
 8008680:	40021000 	.word	0x40021000
 8008684:	04c4b400 	.word	0x04c4b400
 8008688:	0800cc44 	.word	0x0800cc44
 800868c:	20000260 	.word	0x20000260
 8008690:	20000264 	.word	0x20000264

08008694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800869a:	4b2c      	ldr	r3, [pc, #176]	@ (800874c <HAL_RCC_GetSysClockFreq+0xb8>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 030c 	and.w	r3, r3, #12
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d102      	bne.n	80086ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80086a6:	4b2a      	ldr	r3, [pc, #168]	@ (8008750 <HAL_RCC_GetSysClockFreq+0xbc>)
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	e047      	b.n	800873c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80086ac:	4b27      	ldr	r3, [pc, #156]	@ (800874c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f003 030c 	and.w	r3, r3, #12
 80086b4:	2b08      	cmp	r3, #8
 80086b6:	d102      	bne.n	80086be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086b8:	4b26      	ldr	r3, [pc, #152]	@ (8008754 <HAL_RCC_GetSysClockFreq+0xc0>)
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	e03e      	b.n	800873c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80086be:	4b23      	ldr	r3, [pc, #140]	@ (800874c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f003 030c 	and.w	r3, r3, #12
 80086c6:	2b0c      	cmp	r3, #12
 80086c8:	d136      	bne.n	8008738 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086ca:	4b20      	ldr	r3, [pc, #128]	@ (800874c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086d4:	4b1d      	ldr	r3, [pc, #116]	@ (800874c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	091b      	lsrs	r3, r3, #4
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	3301      	adds	r3, #1
 80086e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d10c      	bne.n	8008702 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008754 <HAL_RCC_GetSysClockFreq+0xc0>)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f0:	4a16      	ldr	r2, [pc, #88]	@ (800874c <HAL_RCC_GetSysClockFreq+0xb8>)
 80086f2:	68d2      	ldr	r2, [r2, #12]
 80086f4:	0a12      	lsrs	r2, r2, #8
 80086f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086fa:	fb02 f303 	mul.w	r3, r2, r3
 80086fe:	617b      	str	r3, [r7, #20]
      break;
 8008700:	e00c      	b.n	800871c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008702:	4a13      	ldr	r2, [pc, #76]	@ (8008750 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	fbb2 f3f3 	udiv	r3, r2, r3
 800870a:	4a10      	ldr	r2, [pc, #64]	@ (800874c <HAL_RCC_GetSysClockFreq+0xb8>)
 800870c:	68d2      	ldr	r2, [r2, #12]
 800870e:	0a12      	lsrs	r2, r2, #8
 8008710:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008714:	fb02 f303 	mul.w	r3, r2, r3
 8008718:	617b      	str	r3, [r7, #20]
      break;
 800871a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800871c:	4b0b      	ldr	r3, [pc, #44]	@ (800874c <HAL_RCC_GetSysClockFreq+0xb8>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	0e5b      	lsrs	r3, r3, #25
 8008722:	f003 0303 	and.w	r3, r3, #3
 8008726:	3301      	adds	r3, #1
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	fbb2 f3f3 	udiv	r3, r2, r3
 8008734:	613b      	str	r3, [r7, #16]
 8008736:	e001      	b.n	800873c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800873c:	693b      	ldr	r3, [r7, #16]
}
 800873e:	4618      	mov	r0, r3
 8008740:	371c      	adds	r7, #28
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	40021000 	.word	0x40021000
 8008750:	00f42400 	.word	0x00f42400
 8008754:	016e3600 	.word	0x016e3600

08008758 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800875c:	4b03      	ldr	r3, [pc, #12]	@ (800876c <HAL_RCC_GetHCLKFreq+0x14>)
 800875e:	681b      	ldr	r3, [r3, #0]
}
 8008760:	4618      	mov	r0, r3
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000260 	.word	0x20000260

08008770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008774:	f7ff fff0 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 8008778:	4602      	mov	r2, r0
 800877a:	4b06      	ldr	r3, [pc, #24]	@ (8008794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	0a1b      	lsrs	r3, r3, #8
 8008780:	f003 0307 	and.w	r3, r3, #7
 8008784:	4904      	ldr	r1, [pc, #16]	@ (8008798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008786:	5ccb      	ldrb	r3, [r1, r3]
 8008788:	f003 031f 	and.w	r3, r3, #31
 800878c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008790:	4618      	mov	r0, r3
 8008792:	bd80      	pop	{r7, pc}
 8008794:	40021000 	.word	0x40021000
 8008798:	0800cc54 	.word	0x0800cc54

0800879c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80087a0:	f7ff ffda 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 80087a4:	4602      	mov	r2, r0
 80087a6:	4b06      	ldr	r3, [pc, #24]	@ (80087c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	0adb      	lsrs	r3, r3, #11
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	4904      	ldr	r1, [pc, #16]	@ (80087c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80087b2:	5ccb      	ldrb	r3, [r1, r3]
 80087b4:	f003 031f 	and.w	r3, r3, #31
 80087b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087bc:	4618      	mov	r0, r3
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	40021000 	.word	0x40021000
 80087c4:	0800cc54 	.word	0x0800cc54

080087c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80087ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	091b      	lsrs	r3, r3, #4
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	3301      	adds	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d10c      	bne.n	8008806 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087ec:	4a17      	ldr	r2, [pc, #92]	@ (800884c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f4:	4a14      	ldr	r2, [pc, #80]	@ (8008848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087f6:	68d2      	ldr	r2, [r2, #12]
 80087f8:	0a12      	lsrs	r2, r2, #8
 80087fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80087fe:	fb02 f303 	mul.w	r3, r2, r3
 8008802:	617b      	str	r3, [r7, #20]
    break;
 8008804:	e00c      	b.n	8008820 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008806:	4a12      	ldr	r2, [pc, #72]	@ (8008850 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	fbb2 f3f3 	udiv	r3, r2, r3
 800880e:	4a0e      	ldr	r2, [pc, #56]	@ (8008848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008810:	68d2      	ldr	r2, [r2, #12]
 8008812:	0a12      	lsrs	r2, r2, #8
 8008814:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008818:	fb02 f303 	mul.w	r3, r2, r3
 800881c:	617b      	str	r3, [r7, #20]
    break;
 800881e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008820:	4b09      	ldr	r3, [pc, #36]	@ (8008848 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	0e5b      	lsrs	r3, r3, #25
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	3301      	adds	r3, #1
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	fbb2 f3f3 	udiv	r3, r2, r3
 8008838:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800883a:	687b      	ldr	r3, [r7, #4]
}
 800883c:	4618      	mov	r0, r3
 800883e:	371c      	adds	r7, #28
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	40021000 	.word	0x40021000
 800884c:	016e3600 	.word	0x016e3600
 8008850:	00f42400 	.word	0x00f42400

08008854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800885c:	2300      	movs	r3, #0
 800885e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008860:	2300      	movs	r3, #0
 8008862:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 8098 	beq.w	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008872:	2300      	movs	r3, #0
 8008874:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008876:	4b43      	ldr	r3, [pc, #268]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800887a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10d      	bne.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008882:	4b40      	ldr	r3, [pc, #256]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008886:	4a3f      	ldr	r2, [pc, #252]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800888c:	6593      	str	r3, [r2, #88]	@ 0x58
 800888e:	4b3d      	ldr	r3, [pc, #244]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008896:	60bb      	str	r3, [r7, #8]
 8008898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800889a:	2301      	movs	r3, #1
 800889c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800889e:	4b3a      	ldr	r3, [pc, #232]	@ (8008988 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a39      	ldr	r2, [pc, #228]	@ (8008988 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80088a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088aa:	f7fc ff47 	bl	800573c <HAL_GetTick>
 80088ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088b0:	e009      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088b2:	f7fc ff43 	bl	800573c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d902      	bls.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	74fb      	strb	r3, [r7, #19]
        break;
 80088c4:	e005      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088c6:	4b30      	ldr	r3, [pc, #192]	@ (8008988 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0ef      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80088d2:	7cfb      	ldrb	r3, [r7, #19]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d159      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80088d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d01e      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d019      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088f4:	4b23      	ldr	r3, [pc, #140]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008900:	4b20      	ldr	r3, [pc, #128]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008906:	4a1f      	ldr	r2, [pc, #124]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800890c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008910:	4b1c      	ldr	r3, [pc, #112]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008916:	4a1b      	ldr	r2, [pc, #108]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800891c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008920:	4a18      	ldr	r2, [pc, #96]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d016      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008932:	f7fc ff03 	bl	800573c <HAL_GetTick>
 8008936:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008938:	e00b      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800893a:	f7fc feff 	bl	800573c <HAL_GetTick>
 800893e:	4602      	mov	r2, r0
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008948:	4293      	cmp	r3, r2
 800894a:	d902      	bls.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	74fb      	strb	r3, [r7, #19]
            break;
 8008950:	e006      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008952:	4b0c      	ldr	r3, [pc, #48]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0ec      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008960:	7cfb      	ldrb	r3, [r7, #19]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008966:	4b07      	ldr	r3, [pc, #28]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800896c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008974:	4903      	ldr	r1, [pc, #12]	@ (8008984 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008976:	4313      	orrs	r3, r2
 8008978:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800897c:	e008      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800897e:	7cfb      	ldrb	r3, [r7, #19]
 8008980:	74bb      	strb	r3, [r7, #18]
 8008982:	e005      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008984:	40021000 	.word	0x40021000
 8008988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898c:	7cfb      	ldrb	r3, [r7, #19]
 800898e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008990:	7c7b      	ldrb	r3, [r7, #17]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d105      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008996:	4ba7      	ldr	r3, [pc, #668]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800899a:	4aa6      	ldr	r2, [pc, #664]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800899c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80089ae:	4ba1      	ldr	r3, [pc, #644]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b4:	f023 0203 	bic.w	r2, r3, #3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	499d      	ldr	r1, [pc, #628]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00a      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80089d0:	4b98      	ldr	r3, [pc, #608]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d6:	f023 020c 	bic.w	r2, r3, #12
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	4995      	ldr	r1, [pc, #596]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80089f2:	4b90      	ldr	r3, [pc, #576]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	498c      	ldr	r1, [pc, #560]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0308 	and.w	r3, r3, #8
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00a      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008a14:	4b87      	ldr	r3, [pc, #540]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	4984      	ldr	r1, [pc, #528]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0310 	and.w	r3, r3, #16
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008a36:	4b7f      	ldr	r3, [pc, #508]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	497b      	ldr	r1, [pc, #492]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0320 	and.w	r3, r3, #32
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a58:	4b76      	ldr	r3, [pc, #472]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	4973      	ldr	r1, [pc, #460]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	496a      	ldr	r1, [pc, #424]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a9c:	4b65      	ldr	r3, [pc, #404]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	4962      	ldr	r1, [pc, #392]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008abe:	4b5d      	ldr	r3, [pc, #372]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008acc:	4959      	ldr	r1, [pc, #356]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00a      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ae0:	4b54      	ldr	r3, [pc, #336]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ae6:	f023 0203 	bic.w	r2, r3, #3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aee:	4951      	ldr	r1, [pc, #324]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b02:	4b4c      	ldr	r3, [pc, #304]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b10:	4948      	ldr	r1, [pc, #288]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d015      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b24:	4b43      	ldr	r3, [pc, #268]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b32:	4940      	ldr	r1, [pc, #256]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b42:	d105      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b44:	4b3b      	ldr	r3, [pc, #236]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	4a3a      	ldr	r2, [pc, #232]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d015      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008b5c:	4b35      	ldr	r3, [pc, #212]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b6a:	4932      	ldr	r1, [pc, #200]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b7a:	d105      	bne.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	4a2c      	ldr	r2, [pc, #176]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b86:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d015      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008b94:	4b27      	ldr	r3, [pc, #156]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba2:	4924      	ldr	r1, [pc, #144]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bb2:	d105      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d015      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bcc:	4b19      	ldr	r3, [pc, #100]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bda:	4916      	ldr	r1, [pc, #88]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bea:	d105      	bne.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bec:	4b11      	ldr	r3, [pc, #68]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	4a10      	ldr	r2, [pc, #64]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bf6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d019      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c04:	4b0b      	ldr	r3, [pc, #44]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c12:	4908      	ldr	r1, [pc, #32]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c22:	d109      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c24:	4b03      	ldr	r3, [pc, #12]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	4a02      	ldr	r2, [pc, #8]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c2e:	60d3      	str	r3, [r2, #12]
 8008c30:	e002      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008c32:	bf00      	nop
 8008c34:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d015      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008c44:	4b29      	ldr	r3, [pc, #164]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c52:	4926      	ldr	r1, [pc, #152]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c62:	d105      	bne.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c64:	4b21      	ldr	r3, [pc, #132]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	4a20      	ldr	r2, [pc, #128]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d015      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c8a:	4918      	ldr	r1, [pc, #96]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c9a:	d105      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c9c:	4b13      	ldr	r3, [pc, #76]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	4a12      	ldr	r2, [pc, #72]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ca6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d015      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc2:	490a      	ldr	r1, [pc, #40]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cd2:	d105      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cd4:	4b05      	ldr	r3, [pc, #20]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	4a04      	ldr	r2, [pc, #16]	@ (8008cec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008ce0:	7cbb      	ldrb	r3, [r7, #18]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	40021000 	.word	0x40021000

08008cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e054      	b.n	8008dac <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d111      	bne.n	8008d32 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 feec 	bl	800aaf4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a23      	ldr	r2, [pc, #140]	@ (8008db4 <HAL_TIM_Base_Init+0xc4>)
 8008d28:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2202      	movs	r2, #2
 8008d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3304      	adds	r3, #4
 8008d42:	4619      	mov	r1, r3
 8008d44:	4610      	mov	r0, r2
 8008d46:	f001 fa35 	bl	800a1b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	08005109 	.word	0x08005109

08008db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d001      	beq.n	8008dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e04c      	b.n	8008e6a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a26      	ldr	r2, [pc, #152]	@ (8008e78 <HAL_TIM_Base_Start+0xc0>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d022      	beq.n	8008e28 <HAL_TIM_Base_Start+0x70>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dea:	d01d      	beq.n	8008e28 <HAL_TIM_Base_Start+0x70>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a22      	ldr	r2, [pc, #136]	@ (8008e7c <HAL_TIM_Base_Start+0xc4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d018      	beq.n	8008e28 <HAL_TIM_Base_Start+0x70>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a21      	ldr	r2, [pc, #132]	@ (8008e80 <HAL_TIM_Base_Start+0xc8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d013      	beq.n	8008e28 <HAL_TIM_Base_Start+0x70>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a1f      	ldr	r2, [pc, #124]	@ (8008e84 <HAL_TIM_Base_Start+0xcc>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d00e      	beq.n	8008e28 <HAL_TIM_Base_Start+0x70>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8008e88 <HAL_TIM_Base_Start+0xd0>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d009      	beq.n	8008e28 <HAL_TIM_Base_Start+0x70>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a1c      	ldr	r2, [pc, #112]	@ (8008e8c <HAL_TIM_Base_Start+0xd4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d004      	beq.n	8008e28 <HAL_TIM_Base_Start+0x70>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a1b      	ldr	r2, [pc, #108]	@ (8008e90 <HAL_TIM_Base_Start+0xd8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d115      	bne.n	8008e54 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689a      	ldr	r2, [r3, #8]
 8008e2e:	4b19      	ldr	r3, [pc, #100]	@ (8008e94 <HAL_TIM_Base_Start+0xdc>)
 8008e30:	4013      	ands	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b06      	cmp	r3, #6
 8008e38:	d015      	beq.n	8008e66 <HAL_TIM_Base_Start+0xae>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e40:	d011      	beq.n	8008e66 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f042 0201 	orr.w	r2, r2, #1
 8008e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e52:	e008      	b.n	8008e66 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0201 	orr.w	r2, r2, #1
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	e000      	b.n	8008e68 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	40012c00 	.word	0x40012c00
 8008e7c:	40000400 	.word	0x40000400
 8008e80:	40000800 	.word	0x40000800
 8008e84:	40000c00 	.word	0x40000c00
 8008e88:	40013400 	.word	0x40013400
 8008e8c:	40014000 	.word	0x40014000
 8008e90:	40015000 	.word	0x40015000
 8008e94:	00010007 	.word	0x00010007

08008e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d001      	beq.n	8008eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e054      	b.n	8008f5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f042 0201 	orr.w	r2, r2, #1
 8008ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a26      	ldr	r2, [pc, #152]	@ (8008f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d022      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eda:	d01d      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a22      	ldr	r2, [pc, #136]	@ (8008f6c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d018      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a21      	ldr	r2, [pc, #132]	@ (8008f70 <HAL_TIM_Base_Start_IT+0xd8>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d013      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8008f74 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00e      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a1e      	ldr	r2, [pc, #120]	@ (8008f78 <HAL_TIM_Base_Start_IT+0xe0>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d009      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a1c      	ldr	r2, [pc, #112]	@ (8008f7c <HAL_TIM_Base_Start_IT+0xe4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d004      	beq.n	8008f18 <HAL_TIM_Base_Start_IT+0x80>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a1b      	ldr	r2, [pc, #108]	@ (8008f80 <HAL_TIM_Base_Start_IT+0xe8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d115      	bne.n	8008f44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	4b19      	ldr	r3, [pc, #100]	@ (8008f84 <HAL_TIM_Base_Start_IT+0xec>)
 8008f20:	4013      	ands	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b06      	cmp	r3, #6
 8008f28:	d015      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0xbe>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f30:	d011      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 0201 	orr.w	r2, r2, #1
 8008f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f42:	e008      	b.n	8008f56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0201 	orr.w	r2, r2, #1
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	e000      	b.n	8008f58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40012c00 	.word	0x40012c00
 8008f6c:	40000400 	.word	0x40000400
 8008f70:	40000800 	.word	0x40000800
 8008f74:	40000c00 	.word	0x40000c00
 8008f78:	40013400 	.word	0x40013400
 8008f7c:	40014000 	.word	0x40014000
 8008f80:	40015000 	.word	0x40015000
 8008f84:	00010007 	.word	0x00010007

08008f88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e054      	b.n	8009044 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d111      	bne.n	8008fca <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 fda0 	bl	800aaf4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d102      	bne.n	8008fc2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a23      	ldr	r2, [pc, #140]	@ (800904c <HAL_TIM_PWM_Init+0xc4>)
 8008fc0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4610      	mov	r0, r2
 8008fde:	f001 f8e9 	bl	800a1b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	08009051 	.word	0x08009051

08009050 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d109      	bne.n	8009088 <HAL_TIM_PWM_Start+0x24>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	bf14      	ite	ne
 8009080:	2301      	movne	r3, #1
 8009082:	2300      	moveq	r3, #0
 8009084:	b2db      	uxtb	r3, r3
 8009086:	e03c      	b.n	8009102 <HAL_TIM_PWM_Start+0x9e>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b04      	cmp	r3, #4
 800908c:	d109      	bne.n	80090a2 <HAL_TIM_PWM_Start+0x3e>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b01      	cmp	r3, #1
 8009098:	bf14      	ite	ne
 800909a:	2301      	movne	r3, #1
 800909c:	2300      	moveq	r3, #0
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	e02f      	b.n	8009102 <HAL_TIM_PWM_Start+0x9e>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d109      	bne.n	80090bc <HAL_TIM_PWM_Start+0x58>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	bf14      	ite	ne
 80090b4:	2301      	movne	r3, #1
 80090b6:	2300      	moveq	r3, #0
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	e022      	b.n	8009102 <HAL_TIM_PWM_Start+0x9e>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b0c      	cmp	r3, #12
 80090c0:	d109      	bne.n	80090d6 <HAL_TIM_PWM_Start+0x72>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	bf14      	ite	ne
 80090ce:	2301      	movne	r3, #1
 80090d0:	2300      	moveq	r3, #0
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	e015      	b.n	8009102 <HAL_TIM_PWM_Start+0x9e>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b10      	cmp	r3, #16
 80090da:	d109      	bne.n	80090f0 <HAL_TIM_PWM_Start+0x8c>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	bf14      	ite	ne
 80090e8:	2301      	movne	r3, #1
 80090ea:	2300      	moveq	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	e008      	b.n	8009102 <HAL_TIM_PWM_Start+0x9e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	bf14      	ite	ne
 80090fc:	2301      	movne	r3, #1
 80090fe:	2300      	moveq	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e0a6      	b.n	8009258 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <HAL_TIM_PWM_Start+0xb6>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009118:	e023      	b.n	8009162 <HAL_TIM_PWM_Start+0xfe>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b04      	cmp	r3, #4
 800911e:	d104      	bne.n	800912a <HAL_TIM_PWM_Start+0xc6>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009128:	e01b      	b.n	8009162 <HAL_TIM_PWM_Start+0xfe>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b08      	cmp	r3, #8
 800912e:	d104      	bne.n	800913a <HAL_TIM_PWM_Start+0xd6>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009138:	e013      	b.n	8009162 <HAL_TIM_PWM_Start+0xfe>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b0c      	cmp	r3, #12
 800913e:	d104      	bne.n	800914a <HAL_TIM_PWM_Start+0xe6>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009148:	e00b      	b.n	8009162 <HAL_TIM_PWM_Start+0xfe>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b10      	cmp	r3, #16
 800914e:	d104      	bne.n	800915a <HAL_TIM_PWM_Start+0xf6>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009158:	e003      	b.n	8009162 <HAL_TIM_PWM_Start+0xfe>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2202      	movs	r2, #2
 800915e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2201      	movs	r2, #1
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f001 fc9c 	bl	800aaa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a3a      	ldr	r2, [pc, #232]	@ (8009260 <HAL_TIM_PWM_Start+0x1fc>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d018      	beq.n	80091ac <HAL_TIM_PWM_Start+0x148>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a39      	ldr	r2, [pc, #228]	@ (8009264 <HAL_TIM_PWM_Start+0x200>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d013      	beq.n	80091ac <HAL_TIM_PWM_Start+0x148>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a37      	ldr	r2, [pc, #220]	@ (8009268 <HAL_TIM_PWM_Start+0x204>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d00e      	beq.n	80091ac <HAL_TIM_PWM_Start+0x148>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a36      	ldr	r2, [pc, #216]	@ (800926c <HAL_TIM_PWM_Start+0x208>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d009      	beq.n	80091ac <HAL_TIM_PWM_Start+0x148>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a34      	ldr	r2, [pc, #208]	@ (8009270 <HAL_TIM_PWM_Start+0x20c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d004      	beq.n	80091ac <HAL_TIM_PWM_Start+0x148>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a33      	ldr	r2, [pc, #204]	@ (8009274 <HAL_TIM_PWM_Start+0x210>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d101      	bne.n	80091b0 <HAL_TIM_PWM_Start+0x14c>
 80091ac:	2301      	movs	r3, #1
 80091ae:	e000      	b.n	80091b2 <HAL_TIM_PWM_Start+0x14e>
 80091b0:	2300      	movs	r3, #0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a25      	ldr	r2, [pc, #148]	@ (8009260 <HAL_TIM_PWM_Start+0x1fc>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d022      	beq.n	8009216 <HAL_TIM_PWM_Start+0x1b2>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d8:	d01d      	beq.n	8009216 <HAL_TIM_PWM_Start+0x1b2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a26      	ldr	r2, [pc, #152]	@ (8009278 <HAL_TIM_PWM_Start+0x214>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d018      	beq.n	8009216 <HAL_TIM_PWM_Start+0x1b2>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a24      	ldr	r2, [pc, #144]	@ (800927c <HAL_TIM_PWM_Start+0x218>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d013      	beq.n	8009216 <HAL_TIM_PWM_Start+0x1b2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a23      	ldr	r2, [pc, #140]	@ (8009280 <HAL_TIM_PWM_Start+0x21c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00e      	beq.n	8009216 <HAL_TIM_PWM_Start+0x1b2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a19      	ldr	r2, [pc, #100]	@ (8009264 <HAL_TIM_PWM_Start+0x200>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d009      	beq.n	8009216 <HAL_TIM_PWM_Start+0x1b2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a18      	ldr	r2, [pc, #96]	@ (8009268 <HAL_TIM_PWM_Start+0x204>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d004      	beq.n	8009216 <HAL_TIM_PWM_Start+0x1b2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a18      	ldr	r2, [pc, #96]	@ (8009274 <HAL_TIM_PWM_Start+0x210>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d115      	bne.n	8009242 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	4b19      	ldr	r3, [pc, #100]	@ (8009284 <HAL_TIM_PWM_Start+0x220>)
 800921e:	4013      	ands	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b06      	cmp	r3, #6
 8009226:	d015      	beq.n	8009254 <HAL_TIM_PWM_Start+0x1f0>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800922e:	d011      	beq.n	8009254 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0201 	orr.w	r2, r2, #1
 800923e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009240:	e008      	b.n	8009254 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f042 0201 	orr.w	r2, r2, #1
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	e000      	b.n	8009256 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009254:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	40012c00 	.word	0x40012c00
 8009264:	40013400 	.word	0x40013400
 8009268:	40014000 	.word	0x40014000
 800926c:	40014400 	.word	0x40014400
 8009270:	40014800 	.word	0x40014800
 8009274:	40015000 	.word	0x40015000
 8009278:	40000400 	.word	0x40000400
 800927c:	40000800 	.word	0x40000800
 8009280:	40000c00 	.word	0x40000c00
 8009284:	00010007 	.word	0x00010007

08009288 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e04c      	b.n	8009336 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d111      	bne.n	80092cc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 fc1f 	bl	800aaf4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d102      	bne.n	80092c4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009340 <HAL_TIM_OnePulse_Init+0xb8>)
 80092c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3304      	adds	r3, #4
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	f000 ff68 	bl	800a1b4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0208 	bic.w	r2, r2, #8
 80092f2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6819      	ldr	r1, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	08009345 	.word	0x08009345

08009344 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009368:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009370:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009378:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009380:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d108      	bne.n	800939a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d105      	bne.n	800939a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800938e:	7b7b      	ldrb	r3, [r7, #13]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d102      	bne.n	800939a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009394:	7b3b      	ldrb	r3, [r7, #12]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d001      	beq.n	800939e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e059      	b.n	8009452 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2202      	movs	r2, #2
 80093a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2202      	movs	r2, #2
 80093aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2202      	movs	r2, #2
 80093b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2202      	movs	r2, #2
 80093ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0202 	orr.w	r2, r2, #2
 80093cc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68da      	ldr	r2, [r3, #12]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f042 0204 	orr.w	r2, r2, #4
 80093dc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2201      	movs	r2, #1
 80093e4:	2100      	movs	r1, #0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 fb5e 	bl	800aaa8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2201      	movs	r2, #1
 80093f2:	2104      	movs	r1, #4
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 fb57 	bl	800aaa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a17      	ldr	r2, [pc, #92]	@ (800945c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d018      	beq.n	8009436 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a15      	ldr	r2, [pc, #84]	@ (8009460 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d013      	beq.n	8009436 <HAL_TIM_OnePulse_Start_IT+0xde>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a14      	ldr	r2, [pc, #80]	@ (8009464 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00e      	beq.n	8009436 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a12      	ldr	r2, [pc, #72]	@ (8009468 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d009      	beq.n	8009436 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a11      	ldr	r2, [pc, #68]	@ (800946c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d004      	beq.n	8009436 <HAL_TIM_OnePulse_Start_IT+0xde>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a0f      	ldr	r2, [pc, #60]	@ (8009470 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d101      	bne.n	800943a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009436:	2301      	movs	r3, #1
 8009438:	e000      	b.n	800943c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800943a:	2300      	movs	r3, #0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d007      	beq.n	8009450 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800944e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	40012c00 	.word	0x40012c00
 8009460:	40013400 	.word	0x40013400
 8009464:	40014000 	.word	0x40014000
 8009468:	40014400 	.word	0x40014400
 800946c:	40014800 	.word	0x40014800
 8009470:	40015000 	.word	0x40015000

08009474 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e0a2      	b.n	80095ce <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d111      	bne.n	80094b8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 fb29 	bl	800aaf4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d102      	bne.n	80094b0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a4a      	ldr	r2, [pc, #296]	@ (80095d8 <HAL_TIM_Encoder_Init+0x164>)
 80094ae:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	6812      	ldr	r2, [r2, #0]
 80094ca:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80094ce:	f023 0307 	bic.w	r3, r3, #7
 80094d2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3304      	adds	r3, #4
 80094dc:	4619      	mov	r1, r3
 80094de:	4610      	mov	r0, r2
 80094e0:	f000 fe68 	bl	800a1b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800950c:	f023 0303 	bic.w	r3, r3, #3
 8009510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	4313      	orrs	r3, r2
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	4313      	orrs	r3, r2
 8009522:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800952a:	f023 030c 	bic.w	r3, r3, #12
 800952e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800953a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	68da      	ldr	r2, [r3, #12]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	4313      	orrs	r3, r2
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4313      	orrs	r3, r2
 800954c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	011a      	lsls	r2, r3, #4
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	031b      	lsls	r3, r3, #12
 800955a:	4313      	orrs	r3, r2
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	4313      	orrs	r3, r2
 8009560:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009568:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009570:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	4313      	orrs	r3, r2
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	4313      	orrs	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	08005271 	.word	0x08005271

080095dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80095f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009604:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d110      	bne.n	800962e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d102      	bne.n	8009618 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009612:	7b7b      	ldrb	r3, [r7, #13]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d001      	beq.n	800961c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e069      	b.n	80096f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800962c:	e031      	b.n	8009692 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b04      	cmp	r3, #4
 8009632:	d110      	bne.n	8009656 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d102      	bne.n	8009640 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800963a:	7b3b      	ldrb	r3, [r7, #12]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d001      	beq.n	8009644 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e055      	b.n	80096f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009654:	e01d      	b.n	8009692 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d108      	bne.n	800966e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d105      	bne.n	800966e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009662:	7b7b      	ldrb	r3, [r7, #13]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d102      	bne.n	800966e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009668:	7b3b      	ldrb	r3, [r7, #12]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d001      	beq.n	8009672 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e03e      	b.n	80096f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2202      	movs	r2, #2
 8009676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2202      	movs	r2, #2
 800967e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2202      	movs	r2, #2
 8009686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2202      	movs	r2, #2
 800968e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <HAL_TIM_Encoder_Start+0xc4>
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b04      	cmp	r3, #4
 800969c:	d008      	beq.n	80096b0 <HAL_TIM_Encoder_Start+0xd4>
 800969e:	e00f      	b.n	80096c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2201      	movs	r2, #1
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f001 f9fd 	bl	800aaa8 <TIM_CCxChannelCmd>
      break;
 80096ae:	e016      	b.n	80096de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2201      	movs	r2, #1
 80096b6:	2104      	movs	r1, #4
 80096b8:	4618      	mov	r0, r3
 80096ba:	f001 f9f5 	bl	800aaa8 <TIM_CCxChannelCmd>
      break;
 80096be:	e00e      	b.n	80096de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2201      	movs	r2, #1
 80096c6:	2100      	movs	r1, #0
 80096c8:	4618      	mov	r0, r3
 80096ca:	f001 f9ed 	bl	800aaa8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2201      	movs	r2, #1
 80096d4:	2104      	movs	r1, #4
 80096d6:	4618      	mov	r0, r3
 80096d8:	f001 f9e6 	bl	800aaa8 <TIM_CCxChannelCmd>
      break;
 80096dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f042 0201 	orr.w	r2, r2, #1
 80096ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f003 0302 	and.w	r3, r3, #2
 8009716:	2b00      	cmp	r3, #0
 8009718:	d026      	beq.n	8009768 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d021      	beq.n	8009768 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f06f 0202 	mvn.w	r2, #2
 800972c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	4798      	blx	r3
 800974c:	e009      	b.n	8009762 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f003 0304 	and.w	r3, r3, #4
 800976e:	2b00      	cmp	r3, #0
 8009770:	d026      	beq.n	80097c0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d021      	beq.n	80097c0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f06f 0204 	mvn.w	r2, #4
 8009784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2202      	movs	r2, #2
 800978a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009796:	2b00      	cmp	r3, #0
 8009798:	d005      	beq.n	80097a6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	4798      	blx	r3
 80097a4:	e009      	b.n	80097ba <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f003 0308 	and.w	r3, r3, #8
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d026      	beq.n	8009818 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f003 0308 	and.w	r3, r3, #8
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d021      	beq.n	8009818 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f06f 0208 	mvn.w	r2, #8
 80097dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2204      	movs	r2, #4
 80097e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	69db      	ldr	r3, [r3, #28]
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d005      	beq.n	80097fe <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
 80097fc:	e009      	b.n	8009812 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f003 0310 	and.w	r3, r3, #16
 800981e:	2b00      	cmp	r3, #0
 8009820:	d026      	beq.n	8009870 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f003 0310 	and.w	r3, r3, #16
 8009828:	2b00      	cmp	r3, #0
 800982a:	d021      	beq.n	8009870 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f06f 0210 	mvn.w	r2, #16
 8009834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2208      	movs	r2, #8
 800983a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009846:	2b00      	cmp	r3, #0
 8009848:	d005      	beq.n	8009856 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
 8009854:	e009      	b.n	800986a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d009      	beq.n	8009898 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f06f 0201 	mvn.w	r2, #1
 800988c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d104      	bne.n	80098ac <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00e      	beq.n	80098ca <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d009      	beq.n	80098ca <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80098be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00e      	beq.n	80098f2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d009      	beq.n	80098f2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80098e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00e      	beq.n	800991a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	d009      	beq.n	800991a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800990e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f003 0320 	and.w	r3, r3, #32
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00e      	beq.n	8009942 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f003 0320 	and.w	r3, r3, #32
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f06f 0220 	mvn.w	r2, #32
 8009936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00e      	beq.n	800996a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800995e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00e      	beq.n	8009992 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d009      	beq.n	8009992 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00e      	beq.n	80099ba <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d009      	beq.n	80099ba <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80099ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00e      	beq.n	80099e2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d009      	beq.n	80099e2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80099d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099e2:	bf00      	nop
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d101      	bne.n	8009a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e0ff      	b.n	8009c0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b14      	cmp	r3, #20
 8009a16:	f200 80f0 	bhi.w	8009bfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	08009a75 	.word	0x08009a75
 8009a24:	08009bfb 	.word	0x08009bfb
 8009a28:	08009bfb 	.word	0x08009bfb
 8009a2c:	08009bfb 	.word	0x08009bfb
 8009a30:	08009ab5 	.word	0x08009ab5
 8009a34:	08009bfb 	.word	0x08009bfb
 8009a38:	08009bfb 	.word	0x08009bfb
 8009a3c:	08009bfb 	.word	0x08009bfb
 8009a40:	08009af7 	.word	0x08009af7
 8009a44:	08009bfb 	.word	0x08009bfb
 8009a48:	08009bfb 	.word	0x08009bfb
 8009a4c:	08009bfb 	.word	0x08009bfb
 8009a50:	08009b37 	.word	0x08009b37
 8009a54:	08009bfb 	.word	0x08009bfb
 8009a58:	08009bfb 	.word	0x08009bfb
 8009a5c:	08009bfb 	.word	0x08009bfb
 8009a60:	08009b79 	.word	0x08009b79
 8009a64:	08009bfb 	.word	0x08009bfb
 8009a68:	08009bfb 	.word	0x08009bfb
 8009a6c:	08009bfb 	.word	0x08009bfb
 8009a70:	08009bb9 	.word	0x08009bb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68b9      	ldr	r1, [r7, #8]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fc4e 	bl	800a31c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699a      	ldr	r2, [r3, #24]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f042 0208 	orr.w	r2, r2, #8
 8009a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 0204 	bic.w	r2, r2, #4
 8009a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6999      	ldr	r1, [r3, #24]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	619a      	str	r2, [r3, #24]
      break;
 8009ab2:	e0a5      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68b9      	ldr	r1, [r7, #8]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fcc8 	bl	800a450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	699a      	ldr	r2, [r3, #24]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6999      	ldr	r1, [r3, #24]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	021a      	lsls	r2, r3, #8
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	430a      	orrs	r2, r1
 8009af2:	619a      	str	r2, [r3, #24]
      break;
 8009af4:	e084      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68b9      	ldr	r1, [r7, #8]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fd3b 	bl	800a578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69da      	ldr	r2, [r3, #28]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f042 0208 	orr.w	r2, r2, #8
 8009b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69da      	ldr	r2, [r3, #28]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f022 0204 	bic.w	r2, r2, #4
 8009b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69d9      	ldr	r1, [r3, #28]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	691a      	ldr	r2, [r3, #16]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	430a      	orrs	r2, r1
 8009b32:	61da      	str	r2, [r3, #28]
      break;
 8009b34:	e064      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f000 fdad 	bl	800a69c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69da      	ldr	r2, [r3, #28]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69da      	ldr	r2, [r3, #28]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69d9      	ldr	r1, [r3, #28]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	021a      	lsls	r2, r3, #8
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	430a      	orrs	r2, r1
 8009b74:	61da      	str	r2, [r3, #28]
      break;
 8009b76:	e043      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68b9      	ldr	r1, [r7, #8]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fe20 	bl	800a7c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f042 0208 	orr.w	r2, r2, #8
 8009b92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f022 0204 	bic.w	r2, r2, #4
 8009ba2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	691a      	ldr	r2, [r3, #16]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009bb6:	e023      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 fe6a 	bl	800a898 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009be2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	021a      	lsls	r2, r3, #8
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009bf8:	e002      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8009bfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3718      	adds	r7, #24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop

08009c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d101      	bne.n	8009c30 <HAL_TIM_ConfigClockSource+0x1c>
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	e0f6      	b.n	8009e1e <HAL_TIM_ConfigClockSource+0x20a>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009c4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a6f      	ldr	r2, [pc, #444]	@ (8009e28 <HAL_TIM_ConfigClockSource+0x214>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	f000 80c1 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009c70:	4a6d      	ldr	r2, [pc, #436]	@ (8009e28 <HAL_TIM_ConfigClockSource+0x214>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	f200 80c6 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c78:	4a6c      	ldr	r2, [pc, #432]	@ (8009e2c <HAL_TIM_ConfigClockSource+0x218>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	f000 80b9 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009c80:	4a6a      	ldr	r2, [pc, #424]	@ (8009e2c <HAL_TIM_ConfigClockSource+0x218>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	f200 80be 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c88:	4a69      	ldr	r2, [pc, #420]	@ (8009e30 <HAL_TIM_ConfigClockSource+0x21c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	f000 80b1 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009c90:	4a67      	ldr	r2, [pc, #412]	@ (8009e30 <HAL_TIM_ConfigClockSource+0x21c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	f200 80b6 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009c98:	4a66      	ldr	r2, [pc, #408]	@ (8009e34 <HAL_TIM_ConfigClockSource+0x220>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	f000 80a9 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009ca0:	4a64      	ldr	r2, [pc, #400]	@ (8009e34 <HAL_TIM_ConfigClockSource+0x220>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	f200 80ae 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ca8:	4a63      	ldr	r2, [pc, #396]	@ (8009e38 <HAL_TIM_ConfigClockSource+0x224>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	f000 80a1 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009cb0:	4a61      	ldr	r2, [pc, #388]	@ (8009e38 <HAL_TIM_ConfigClockSource+0x224>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	f200 80a6 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009cb8:	4a60      	ldr	r2, [pc, #384]	@ (8009e3c <HAL_TIM_ConfigClockSource+0x228>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	f000 8099 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009cc0:	4a5e      	ldr	r2, [pc, #376]	@ (8009e3c <HAL_TIM_ConfigClockSource+0x228>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	f200 809e 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009cc8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ccc:	f000 8091 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009cd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009cd4:	f200 8096 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009cd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cdc:	f000 8089 	beq.w	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009ce0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ce4:	f200 808e 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cec:	d03e      	beq.n	8009d6c <HAL_TIM_ConfigClockSource+0x158>
 8009cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cf2:	f200 8087 	bhi.w	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cfa:	f000 8086 	beq.w	8009e0a <HAL_TIM_ConfigClockSource+0x1f6>
 8009cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d02:	d87f      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d04:	2b70      	cmp	r3, #112	@ 0x70
 8009d06:	d01a      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0x12a>
 8009d08:	2b70      	cmp	r3, #112	@ 0x70
 8009d0a:	d87b      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d0c:	2b60      	cmp	r3, #96	@ 0x60
 8009d0e:	d050      	beq.n	8009db2 <HAL_TIM_ConfigClockSource+0x19e>
 8009d10:	2b60      	cmp	r3, #96	@ 0x60
 8009d12:	d877      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d14:	2b50      	cmp	r3, #80	@ 0x50
 8009d16:	d03c      	beq.n	8009d92 <HAL_TIM_ConfigClockSource+0x17e>
 8009d18:	2b50      	cmp	r3, #80	@ 0x50
 8009d1a:	d873      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d1c:	2b40      	cmp	r3, #64	@ 0x40
 8009d1e:	d058      	beq.n	8009dd2 <HAL_TIM_ConfigClockSource+0x1be>
 8009d20:	2b40      	cmp	r3, #64	@ 0x40
 8009d22:	d86f      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d24:	2b30      	cmp	r3, #48	@ 0x30
 8009d26:	d064      	beq.n	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009d28:	2b30      	cmp	r3, #48	@ 0x30
 8009d2a:	d86b      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	d060      	beq.n	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	d867      	bhi.n	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d05c      	beq.n	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009d38:	2b10      	cmp	r3, #16
 8009d3a:	d05a      	beq.n	8009df2 <HAL_TIM_ConfigClockSource+0x1de>
 8009d3c:	e062      	b.n	8009e04 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d4e:	f000 fe8b 	bl	800aa68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	609a      	str	r2, [r3, #8]
      break;
 8009d6a:	e04f      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d7c:	f000 fe74 	bl	800aa68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689a      	ldr	r2, [r3, #8]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d8e:	609a      	str	r2, [r3, #8]
      break;
 8009d90:	e03c      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f000 fde6 	bl	800a970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2150      	movs	r1, #80	@ 0x50
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fe3f 	bl	800aa2e <TIM_ITRx_SetConfig>
      break;
 8009db0:	e02c      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f000 fe05 	bl	800a9ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2160      	movs	r1, #96	@ 0x60
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fe2f 	bl	800aa2e <TIM_ITRx_SetConfig>
      break;
 8009dd0:	e01c      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dde:	461a      	mov	r2, r3
 8009de0:	f000 fdc6 	bl	800a970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2140      	movs	r1, #64	@ 0x40
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 fe1f 	bl	800aa2e <TIM_ITRx_SetConfig>
      break;
 8009df0:	e00c      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	f000 fe16 	bl	800aa2e <TIM_ITRx_SetConfig>
      break;
 8009e02:	e003      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	73fb      	strb	r3, [r7, #15]
      break;
 8009e08:	e000      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	00100070 	.word	0x00100070
 8009e2c:	00100060 	.word	0x00100060
 8009e30:	00100050 	.word	0x00100050
 8009e34:	00100040 	.word	0x00100040
 8009e38:	00100030 	.word	0x00100030
 8009e3c:	00100020 	.word	0x00100020

08009e40 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	460b      	mov	r3, r1
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e14a      	b.n	800a1a6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	f040 80dd 	bne.w	800a0d8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009f1e:	7afb      	ldrb	r3, [r7, #11]
 8009f20:	2b1f      	cmp	r3, #31
 8009f22:	f200 80d6 	bhi.w	800a0d2 <HAL_TIM_RegisterCallback+0x1de>
 8009f26:	a201      	add	r2, pc, #4	@ (adr r2, 8009f2c <HAL_TIM_RegisterCallback+0x38>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009fad 	.word	0x08009fad
 8009f30:	08009fb5 	.word	0x08009fb5
 8009f34:	08009fbd 	.word	0x08009fbd
 8009f38:	08009fc5 	.word	0x08009fc5
 8009f3c:	08009fcd 	.word	0x08009fcd
 8009f40:	08009fd5 	.word	0x08009fd5
 8009f44:	08009fdd 	.word	0x08009fdd
 8009f48:	08009fe5 	.word	0x08009fe5
 8009f4c:	08009fed 	.word	0x08009fed
 8009f50:	08009ff5 	.word	0x08009ff5
 8009f54:	08009ffd 	.word	0x08009ffd
 8009f58:	0800a005 	.word	0x0800a005
 8009f5c:	0800a00d 	.word	0x0800a00d
 8009f60:	0800a015 	.word	0x0800a015
 8009f64:	0800a01f 	.word	0x0800a01f
 8009f68:	0800a029 	.word	0x0800a029
 8009f6c:	0800a033 	.word	0x0800a033
 8009f70:	0800a03d 	.word	0x0800a03d
 8009f74:	0800a047 	.word	0x0800a047
 8009f78:	0800a051 	.word	0x0800a051
 8009f7c:	0800a05b 	.word	0x0800a05b
 8009f80:	0800a065 	.word	0x0800a065
 8009f84:	0800a06f 	.word	0x0800a06f
 8009f88:	0800a079 	.word	0x0800a079
 8009f8c:	0800a083 	.word	0x0800a083
 8009f90:	0800a08d 	.word	0x0800a08d
 8009f94:	0800a097 	.word	0x0800a097
 8009f98:	0800a0a1 	.word	0x0800a0a1
 8009f9c:	0800a0ab 	.word	0x0800a0ab
 8009fa0:	0800a0b5 	.word	0x0800a0b5
 8009fa4:	0800a0bf 	.word	0x0800a0bf
 8009fa8:	0800a0c9 	.word	0x0800a0c9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009fb2:	e0f7      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009fba:	e0f3      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009fc2:	e0ef      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009fca:	e0eb      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009fd2:	e0e7      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009fda:	e0e3      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009fe2:	e0df      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009fea:	e0db      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009ff2:	e0d7      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009ffa:	e0d3      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a002:	e0cf      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a00a:	e0cb      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a012:	e0c7      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a01c:	e0c2      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a026:	e0bd      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800a030:	e0b8      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800a03a:	e0b3      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800a044:	e0ae      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a04e:	e0a9      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a058:	e0a4      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a062:	e09f      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a06c:	e09a      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a076:	e095      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a080:	e090      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a08a:	e08b      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a094:	e086      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a09e:	e081      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a0a8:	e07c      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a0b2:	e077      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800a0bc:	e072      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a0c6:	e06d      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a0d0:	e068      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	75fb      	strb	r3, [r7, #23]
        break;
 800a0d6:	e065      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d15d      	bne.n	800a1a0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800a0e4:	7afb      	ldrb	r3, [r7, #11]
 800a0e6:	2b0d      	cmp	r3, #13
 800a0e8:	d857      	bhi.n	800a19a <HAL_TIM_RegisterCallback+0x2a6>
 800a0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <HAL_TIM_RegisterCallback+0x1fc>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a129 	.word	0x0800a129
 800a0f4:	0800a131 	.word	0x0800a131
 800a0f8:	0800a139 	.word	0x0800a139
 800a0fc:	0800a141 	.word	0x0800a141
 800a100:	0800a149 	.word	0x0800a149
 800a104:	0800a151 	.word	0x0800a151
 800a108:	0800a159 	.word	0x0800a159
 800a10c:	0800a161 	.word	0x0800a161
 800a110:	0800a169 	.word	0x0800a169
 800a114:	0800a171 	.word	0x0800a171
 800a118:	0800a179 	.word	0x0800a179
 800a11c:	0800a181 	.word	0x0800a181
 800a120:	0800a189 	.word	0x0800a189
 800a124:	0800a191 	.word	0x0800a191
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a12e:	e039      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a136:	e035      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a13e:	e031      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a146:	e02d      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a14e:	e029      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a156:	e025      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a15e:	e021      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a166:	e01d      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a16e:	e019      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a176:	e015      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a17e:	e011      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a186:	e00d      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a18e:	e009      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a198:	e004      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	75fb      	strb	r3, [r7, #23]
        break;
 800a19e:	e001      	b.n	800a1a4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	371c      	adds	r7, #28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop

0800a1b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a4c      	ldr	r2, [pc, #304]	@ (800a2f8 <TIM_Base_SetConfig+0x144>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d017      	beq.n	800a1fc <TIM_Base_SetConfig+0x48>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1d2:	d013      	beq.n	800a1fc <TIM_Base_SetConfig+0x48>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a49      	ldr	r2, [pc, #292]	@ (800a2fc <TIM_Base_SetConfig+0x148>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d00f      	beq.n	800a1fc <TIM_Base_SetConfig+0x48>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a48      	ldr	r2, [pc, #288]	@ (800a300 <TIM_Base_SetConfig+0x14c>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00b      	beq.n	800a1fc <TIM_Base_SetConfig+0x48>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a47      	ldr	r2, [pc, #284]	@ (800a304 <TIM_Base_SetConfig+0x150>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d007      	beq.n	800a1fc <TIM_Base_SetConfig+0x48>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a46      	ldr	r2, [pc, #280]	@ (800a308 <TIM_Base_SetConfig+0x154>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d003      	beq.n	800a1fc <TIM_Base_SetConfig+0x48>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a45      	ldr	r2, [pc, #276]	@ (800a30c <TIM_Base_SetConfig+0x158>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d108      	bne.n	800a20e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a39      	ldr	r2, [pc, #228]	@ (800a2f8 <TIM_Base_SetConfig+0x144>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d023      	beq.n	800a25e <TIM_Base_SetConfig+0xaa>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a21c:	d01f      	beq.n	800a25e <TIM_Base_SetConfig+0xaa>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a36      	ldr	r2, [pc, #216]	@ (800a2fc <TIM_Base_SetConfig+0x148>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d01b      	beq.n	800a25e <TIM_Base_SetConfig+0xaa>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a35      	ldr	r2, [pc, #212]	@ (800a300 <TIM_Base_SetConfig+0x14c>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d017      	beq.n	800a25e <TIM_Base_SetConfig+0xaa>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a34      	ldr	r2, [pc, #208]	@ (800a304 <TIM_Base_SetConfig+0x150>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d013      	beq.n	800a25e <TIM_Base_SetConfig+0xaa>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a33      	ldr	r2, [pc, #204]	@ (800a308 <TIM_Base_SetConfig+0x154>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d00f      	beq.n	800a25e <TIM_Base_SetConfig+0xaa>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a33      	ldr	r2, [pc, #204]	@ (800a310 <TIM_Base_SetConfig+0x15c>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d00b      	beq.n	800a25e <TIM_Base_SetConfig+0xaa>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a32      	ldr	r2, [pc, #200]	@ (800a314 <TIM_Base_SetConfig+0x160>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d007      	beq.n	800a25e <TIM_Base_SetConfig+0xaa>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a31      	ldr	r2, [pc, #196]	@ (800a318 <TIM_Base_SetConfig+0x164>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d003      	beq.n	800a25e <TIM_Base_SetConfig+0xaa>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a2c      	ldr	r2, [pc, #176]	@ (800a30c <TIM_Base_SetConfig+0x158>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d108      	bne.n	800a270 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	689a      	ldr	r2, [r3, #8]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a18      	ldr	r2, [pc, #96]	@ (800a2f8 <TIM_Base_SetConfig+0x144>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d013      	beq.n	800a2c4 <TIM_Base_SetConfig+0x110>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a1a      	ldr	r2, [pc, #104]	@ (800a308 <TIM_Base_SetConfig+0x154>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d00f      	beq.n	800a2c4 <TIM_Base_SetConfig+0x110>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a1a      	ldr	r2, [pc, #104]	@ (800a310 <TIM_Base_SetConfig+0x15c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d00b      	beq.n	800a2c4 <TIM_Base_SetConfig+0x110>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a19      	ldr	r2, [pc, #100]	@ (800a314 <TIM_Base_SetConfig+0x160>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d007      	beq.n	800a2c4 <TIM_Base_SetConfig+0x110>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a18      	ldr	r2, [pc, #96]	@ (800a318 <TIM_Base_SetConfig+0x164>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d003      	beq.n	800a2c4 <TIM_Base_SetConfig+0x110>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a13      	ldr	r2, [pc, #76]	@ (800a30c <TIM_Base_SetConfig+0x158>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d103      	bne.n	800a2cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	691a      	ldr	r2, [r3, #16]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f003 0301 	and.w	r3, r3, #1
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d105      	bne.n	800a2ea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	f023 0201 	bic.w	r2, r3, #1
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	611a      	str	r2, [r3, #16]
  }
}
 800a2ea:	bf00      	nop
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	40012c00 	.word	0x40012c00
 800a2fc:	40000400 	.word	0x40000400
 800a300:	40000800 	.word	0x40000800
 800a304:	40000c00 	.word	0x40000c00
 800a308:	40013400 	.word	0x40013400
 800a30c:	40015000 	.word	0x40015000
 800a310:	40014000 	.word	0x40014000
 800a314:	40014400 	.word	0x40014400
 800a318:	40014800 	.word	0x40014800

0800a31c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	f023 0201 	bic.w	r2, r3, #1
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a34a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a34e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f023 0303 	bic.w	r3, r3, #3
 800a356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	4313      	orrs	r3, r2
 800a360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f023 0302 	bic.w	r3, r3, #2
 800a368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	4313      	orrs	r3, r2
 800a372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a30      	ldr	r2, [pc, #192]	@ (800a438 <TIM_OC1_SetConfig+0x11c>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d013      	beq.n	800a3a4 <TIM_OC1_SetConfig+0x88>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a2f      	ldr	r2, [pc, #188]	@ (800a43c <TIM_OC1_SetConfig+0x120>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d00f      	beq.n	800a3a4 <TIM_OC1_SetConfig+0x88>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a2e      	ldr	r2, [pc, #184]	@ (800a440 <TIM_OC1_SetConfig+0x124>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d00b      	beq.n	800a3a4 <TIM_OC1_SetConfig+0x88>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a2d      	ldr	r2, [pc, #180]	@ (800a444 <TIM_OC1_SetConfig+0x128>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d007      	beq.n	800a3a4 <TIM_OC1_SetConfig+0x88>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a2c      	ldr	r2, [pc, #176]	@ (800a448 <TIM_OC1_SetConfig+0x12c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d003      	beq.n	800a3a4 <TIM_OC1_SetConfig+0x88>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a2b      	ldr	r2, [pc, #172]	@ (800a44c <TIM_OC1_SetConfig+0x130>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d10c      	bne.n	800a3be <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f023 0308 	bic.w	r3, r3, #8
 800a3aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f023 0304 	bic.w	r3, r3, #4
 800a3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a438 <TIM_OC1_SetConfig+0x11c>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d013      	beq.n	800a3ee <TIM_OC1_SetConfig+0xd2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a1c      	ldr	r2, [pc, #112]	@ (800a43c <TIM_OC1_SetConfig+0x120>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00f      	beq.n	800a3ee <TIM_OC1_SetConfig+0xd2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a1b      	ldr	r2, [pc, #108]	@ (800a440 <TIM_OC1_SetConfig+0x124>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d00b      	beq.n	800a3ee <TIM_OC1_SetConfig+0xd2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a1a      	ldr	r2, [pc, #104]	@ (800a444 <TIM_OC1_SetConfig+0x128>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d007      	beq.n	800a3ee <TIM_OC1_SetConfig+0xd2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a19      	ldr	r2, [pc, #100]	@ (800a448 <TIM_OC1_SetConfig+0x12c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d003      	beq.n	800a3ee <TIM_OC1_SetConfig+0xd2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a18      	ldr	r2, [pc, #96]	@ (800a44c <TIM_OC1_SetConfig+0x130>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d111      	bne.n	800a412 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a3fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	4313      	orrs	r3, r2
 800a410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	621a      	str	r2, [r3, #32]
}
 800a42c:	bf00      	nop
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	40012c00 	.word	0x40012c00
 800a43c:	40013400 	.word	0x40013400
 800a440:	40014000 	.word	0x40014000
 800a444:	40014400 	.word	0x40014400
 800a448:	40014800 	.word	0x40014800
 800a44c:	40015000 	.word	0x40015000

0800a450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	f023 0210 	bic.w	r2, r3, #16
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a47e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4313      	orrs	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	f023 0320 	bic.w	r3, r3, #32
 800a49e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	011b      	lsls	r3, r3, #4
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a2c      	ldr	r2, [pc, #176]	@ (800a560 <TIM_OC2_SetConfig+0x110>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d007      	beq.n	800a4c4 <TIM_OC2_SetConfig+0x74>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a2b      	ldr	r2, [pc, #172]	@ (800a564 <TIM_OC2_SetConfig+0x114>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d003      	beq.n	800a4c4 <TIM_OC2_SetConfig+0x74>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a2a      	ldr	r2, [pc, #168]	@ (800a568 <TIM_OC2_SetConfig+0x118>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d10d      	bne.n	800a4e0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a1f      	ldr	r2, [pc, #124]	@ (800a560 <TIM_OC2_SetConfig+0x110>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d013      	beq.n	800a510 <TIM_OC2_SetConfig+0xc0>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a1e      	ldr	r2, [pc, #120]	@ (800a564 <TIM_OC2_SetConfig+0x114>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d00f      	beq.n	800a510 <TIM_OC2_SetConfig+0xc0>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a1e      	ldr	r2, [pc, #120]	@ (800a56c <TIM_OC2_SetConfig+0x11c>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d00b      	beq.n	800a510 <TIM_OC2_SetConfig+0xc0>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a1d      	ldr	r2, [pc, #116]	@ (800a570 <TIM_OC2_SetConfig+0x120>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d007      	beq.n	800a510 <TIM_OC2_SetConfig+0xc0>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a1c      	ldr	r2, [pc, #112]	@ (800a574 <TIM_OC2_SetConfig+0x124>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d003      	beq.n	800a510 <TIM_OC2_SetConfig+0xc0>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a17      	ldr	r2, [pc, #92]	@ (800a568 <TIM_OC2_SetConfig+0x118>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d113      	bne.n	800a538 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a51e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	695b      	ldr	r3, [r3, #20]
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4313      	orrs	r3, r2
 800a52a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	4313      	orrs	r3, r2
 800a536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	621a      	str	r2, [r3, #32]
}
 800a552:	bf00      	nop
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	40012c00 	.word	0x40012c00
 800a564:	40013400 	.word	0x40013400
 800a568:	40015000 	.word	0x40015000
 800a56c:	40014000 	.word	0x40014000
 800a570:	40014400 	.word	0x40014400
 800a574:	40014800 	.word	0x40014800

0800a578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a578:	b480      	push	{r7}
 800a57a:	b087      	sub	sp, #28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f023 0303 	bic.w	r3, r3, #3
 800a5b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a5c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	021b      	lsls	r3, r3, #8
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a2b      	ldr	r2, [pc, #172]	@ (800a684 <TIM_OC3_SetConfig+0x10c>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d007      	beq.n	800a5ea <TIM_OC3_SetConfig+0x72>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a2a      	ldr	r2, [pc, #168]	@ (800a688 <TIM_OC3_SetConfig+0x110>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d003      	beq.n	800a5ea <TIM_OC3_SetConfig+0x72>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a29      	ldr	r2, [pc, #164]	@ (800a68c <TIM_OC3_SetConfig+0x114>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d10d      	bne.n	800a606 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a5f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	021b      	lsls	r3, r3, #8
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a1e      	ldr	r2, [pc, #120]	@ (800a684 <TIM_OC3_SetConfig+0x10c>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d013      	beq.n	800a636 <TIM_OC3_SetConfig+0xbe>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a1d      	ldr	r2, [pc, #116]	@ (800a688 <TIM_OC3_SetConfig+0x110>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00f      	beq.n	800a636 <TIM_OC3_SetConfig+0xbe>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a1d      	ldr	r2, [pc, #116]	@ (800a690 <TIM_OC3_SetConfig+0x118>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00b      	beq.n	800a636 <TIM_OC3_SetConfig+0xbe>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a1c      	ldr	r2, [pc, #112]	@ (800a694 <TIM_OC3_SetConfig+0x11c>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d007      	beq.n	800a636 <TIM_OC3_SetConfig+0xbe>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a1b      	ldr	r2, [pc, #108]	@ (800a698 <TIM_OC3_SetConfig+0x120>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d003      	beq.n	800a636 <TIM_OC3_SetConfig+0xbe>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a16      	ldr	r2, [pc, #88]	@ (800a68c <TIM_OC3_SetConfig+0x114>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d113      	bne.n	800a65e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a63c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	011b      	lsls	r3, r3, #4
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	4313      	orrs	r3, r2
 800a650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	011b      	lsls	r3, r3, #4
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	621a      	str	r2, [r3, #32]
}
 800a678:	bf00      	nop
 800a67a:	371c      	adds	r7, #28
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr
 800a684:	40012c00 	.word	0x40012c00
 800a688:	40013400 	.word	0x40013400
 800a68c:	40015000 	.word	0x40015000
 800a690:	40014000 	.word	0x40014000
 800a694:	40014400 	.word	0x40014400
 800a698:	40014800 	.word	0x40014800

0800a69c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	021b      	lsls	r3, r3, #8
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a6ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	031b      	lsls	r3, r3, #12
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a2c      	ldr	r2, [pc, #176]	@ (800a7ac <TIM_OC4_SetConfig+0x110>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d007      	beq.n	800a710 <TIM_OC4_SetConfig+0x74>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a2b      	ldr	r2, [pc, #172]	@ (800a7b0 <TIM_OC4_SetConfig+0x114>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d003      	beq.n	800a710 <TIM_OC4_SetConfig+0x74>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a2a      	ldr	r2, [pc, #168]	@ (800a7b4 <TIM_OC4_SetConfig+0x118>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d10d      	bne.n	800a72c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	031b      	lsls	r3, r3, #12
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	4313      	orrs	r3, r2
 800a722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a72a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a1f      	ldr	r2, [pc, #124]	@ (800a7ac <TIM_OC4_SetConfig+0x110>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d013      	beq.n	800a75c <TIM_OC4_SetConfig+0xc0>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a1e      	ldr	r2, [pc, #120]	@ (800a7b0 <TIM_OC4_SetConfig+0x114>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d00f      	beq.n	800a75c <TIM_OC4_SetConfig+0xc0>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a1e      	ldr	r2, [pc, #120]	@ (800a7b8 <TIM_OC4_SetConfig+0x11c>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d00b      	beq.n	800a75c <TIM_OC4_SetConfig+0xc0>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a1d      	ldr	r2, [pc, #116]	@ (800a7bc <TIM_OC4_SetConfig+0x120>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d007      	beq.n	800a75c <TIM_OC4_SetConfig+0xc0>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c0 <TIM_OC4_SetConfig+0x124>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d003      	beq.n	800a75c <TIM_OC4_SetConfig+0xc0>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a17      	ldr	r2, [pc, #92]	@ (800a7b4 <TIM_OC4_SetConfig+0x118>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d113      	bne.n	800a784 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a762:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a76a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	695b      	ldr	r3, [r3, #20]
 800a770:	019b      	lsls	r3, r3, #6
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	4313      	orrs	r3, r2
 800a776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	019b      	lsls	r3, r3, #6
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	4313      	orrs	r3, r2
 800a782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	621a      	str	r2, [r3, #32]
}
 800a79e:	bf00      	nop
 800a7a0:	371c      	adds	r7, #28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	40012c00 	.word	0x40012c00
 800a7b0:	40013400 	.word	0x40013400
 800a7b4:	40015000 	.word	0x40015000
 800a7b8:	40014000 	.word	0x40014000
 800a7bc:	40014400 	.word	0x40014400
 800a7c0:	40014800 	.word	0x40014800

0800a7c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a808:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	041b      	lsls	r3, r3, #16
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	4313      	orrs	r3, r2
 800a814:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a19      	ldr	r2, [pc, #100]	@ (800a880 <TIM_OC5_SetConfig+0xbc>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d013      	beq.n	800a846 <TIM_OC5_SetConfig+0x82>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a18      	ldr	r2, [pc, #96]	@ (800a884 <TIM_OC5_SetConfig+0xc0>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d00f      	beq.n	800a846 <TIM_OC5_SetConfig+0x82>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a17      	ldr	r2, [pc, #92]	@ (800a888 <TIM_OC5_SetConfig+0xc4>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d00b      	beq.n	800a846 <TIM_OC5_SetConfig+0x82>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a16      	ldr	r2, [pc, #88]	@ (800a88c <TIM_OC5_SetConfig+0xc8>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d007      	beq.n	800a846 <TIM_OC5_SetConfig+0x82>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a15      	ldr	r2, [pc, #84]	@ (800a890 <TIM_OC5_SetConfig+0xcc>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d003      	beq.n	800a846 <TIM_OC5_SetConfig+0x82>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a14      	ldr	r2, [pc, #80]	@ (800a894 <TIM_OC5_SetConfig+0xd0>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d109      	bne.n	800a85a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a84c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	4313      	orrs	r3, r2
 800a858:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	621a      	str	r2, [r3, #32]
}
 800a874:	bf00      	nop
 800a876:	371c      	adds	r7, #28
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	40012c00 	.word	0x40012c00
 800a884:	40013400 	.word	0x40013400
 800a888:	40014000 	.word	0x40014000
 800a88c:	40014400 	.word	0x40014400
 800a890:	40014800 	.word	0x40014800
 800a894:	40015000 	.word	0x40015000

0800a898 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a1b      	ldr	r3, [r3, #32]
 800a8ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	021b      	lsls	r3, r3, #8
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a8de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	051b      	lsls	r3, r3, #20
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a958 <TIM_OC6_SetConfig+0xc0>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d013      	beq.n	800a91c <TIM_OC6_SetConfig+0x84>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a19      	ldr	r2, [pc, #100]	@ (800a95c <TIM_OC6_SetConfig+0xc4>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d00f      	beq.n	800a91c <TIM_OC6_SetConfig+0x84>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a18      	ldr	r2, [pc, #96]	@ (800a960 <TIM_OC6_SetConfig+0xc8>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d00b      	beq.n	800a91c <TIM_OC6_SetConfig+0x84>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a17      	ldr	r2, [pc, #92]	@ (800a964 <TIM_OC6_SetConfig+0xcc>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d007      	beq.n	800a91c <TIM_OC6_SetConfig+0x84>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a16      	ldr	r2, [pc, #88]	@ (800a968 <TIM_OC6_SetConfig+0xd0>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d003      	beq.n	800a91c <TIM_OC6_SetConfig+0x84>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a15      	ldr	r2, [pc, #84]	@ (800a96c <TIM_OC6_SetConfig+0xd4>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d109      	bne.n	800a930 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a922:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	695b      	ldr	r3, [r3, #20]
 800a928:	029b      	lsls	r3, r3, #10
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	685a      	ldr	r2, [r3, #4]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	621a      	str	r2, [r3, #32]
}
 800a94a:	bf00      	nop
 800a94c:	371c      	adds	r7, #28
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	40012c00 	.word	0x40012c00
 800a95c:	40013400 	.word	0x40013400
 800a960:	40014000 	.word	0x40014000
 800a964:	40014400 	.word	0x40014400
 800a968:	40014800 	.word	0x40014800
 800a96c:	40015000 	.word	0x40015000

0800a970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a970:	b480      	push	{r7}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6a1b      	ldr	r3, [r3, #32]
 800a980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	f023 0201 	bic.w	r2, r3, #1
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a99a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f023 030a 	bic.w	r3, r3, #10
 800a9ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	621a      	str	r2, [r3, #32]
}
 800a9c2:	bf00      	nop
 800a9c4:	371c      	adds	r7, #28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b087      	sub	sp, #28
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	60b9      	str	r1, [r7, #8]
 800a9d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6a1b      	ldr	r3, [r3, #32]
 800a9e4:	f023 0210 	bic.w	r2, r3, #16
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	031b      	lsls	r3, r3, #12
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aa0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	011b      	lsls	r3, r3, #4
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	621a      	str	r2, [r3, #32]
}
 800aa22:	bf00      	nop
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b085      	sub	sp, #20
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aa44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	f043 0307 	orr.w	r3, r3, #7
 800aa54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	609a      	str	r2, [r3, #8]
}
 800aa5c:	bf00      	nop
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b087      	sub	sp, #28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	021a      	lsls	r2, r3, #8
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	609a      	str	r2, [r3, #8]
}
 800aa9c:	bf00      	nop
 800aa9e:	371c      	adds	r7, #28
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f003 031f 	and.w	r3, r3, #31
 800aaba:	2201      	movs	r2, #1
 800aabc:	fa02 f303 	lsl.w	r3, r2, r3
 800aac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6a1a      	ldr	r2, [r3, #32]
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	43db      	mvns	r3, r3
 800aaca:	401a      	ands	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6a1a      	ldr	r2, [r3, #32]
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	f003 031f 	and.w	r3, r3, #31
 800aada:	6879      	ldr	r1, [r7, #4]
 800aadc:	fa01 f303 	lsl.w	r3, r1, r3
 800aae0:	431a      	orrs	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	621a      	str	r2, [r3, #32]
}
 800aae6:	bf00      	nop
 800aae8:	371c      	adds	r7, #28
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
	...

0800aaf4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a26      	ldr	r2, [pc, #152]	@ (800ab98 <TIM_ResetCallback+0xa4>)
 800ab00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a25      	ldr	r2, [pc, #148]	@ (800ab9c <TIM_ResetCallback+0xa8>)
 800ab08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a24      	ldr	r2, [pc, #144]	@ (800aba0 <TIM_ResetCallback+0xac>)
 800ab10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a23      	ldr	r2, [pc, #140]	@ (800aba4 <TIM_ResetCallback+0xb0>)
 800ab18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a22      	ldr	r2, [pc, #136]	@ (800aba8 <TIM_ResetCallback+0xb4>)
 800ab20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a21      	ldr	r2, [pc, #132]	@ (800abac <TIM_ResetCallback+0xb8>)
 800ab28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a20      	ldr	r2, [pc, #128]	@ (800abb0 <TIM_ResetCallback+0xbc>)
 800ab30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a1f      	ldr	r2, [pc, #124]	@ (800abb4 <TIM_ResetCallback+0xc0>)
 800ab38:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a1e      	ldr	r2, [pc, #120]	@ (800abb8 <TIM_ResetCallback+0xc4>)
 800ab40:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a1d      	ldr	r2, [pc, #116]	@ (800abbc <TIM_ResetCallback+0xc8>)
 800ab48:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a1c      	ldr	r2, [pc, #112]	@ (800abc0 <TIM_ResetCallback+0xcc>)
 800ab50:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a1b      	ldr	r2, [pc, #108]	@ (800abc4 <TIM_ResetCallback+0xd0>)
 800ab58:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a1a      	ldr	r2, [pc, #104]	@ (800abc8 <TIM_ResetCallback+0xd4>)
 800ab60:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a19      	ldr	r2, [pc, #100]	@ (800abcc <TIM_ResetCallback+0xd8>)
 800ab68:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a18      	ldr	r2, [pc, #96]	@ (800abd0 <TIM_ResetCallback+0xdc>)
 800ab70:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a17      	ldr	r2, [pc, #92]	@ (800abd4 <TIM_ResetCallback+0xe0>)
 800ab78:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a16      	ldr	r2, [pc, #88]	@ (800abd8 <TIM_ResetCallback+0xe4>)
 800ab80:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a15      	ldr	r2, [pc, #84]	@ (800abdc <TIM_ResetCallback+0xe8>)
 800ab88:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	08004eb9 	.word	0x08004eb9
 800ab9c:	08009e41 	.word	0x08009e41
 800aba0:	08009eb9 	.word	0x08009eb9
 800aba4:	08009ecd 	.word	0x08009ecd
 800aba8:	08009e69 	.word	0x08009e69
 800abac:	08009e7d 	.word	0x08009e7d
 800abb0:	08009e55 	.word	0x08009e55
 800abb4:	08009e91 	.word	0x08009e91
 800abb8:	08009ea5 	.word	0x08009ea5
 800abbc:	08009ee1 	.word	0x08009ee1
 800abc0:	0800ad0d 	.word	0x0800ad0d
 800abc4:	0800ad21 	.word	0x0800ad21
 800abc8:	0800ad35 	.word	0x0800ad35
 800abcc:	0800ad49 	.word	0x0800ad49
 800abd0:	0800ad5d 	.word	0x0800ad5d
 800abd4:	0800ad71 	.word	0x0800ad71
 800abd8:	0800ad85 	.word	0x0800ad85
 800abdc:	0800ad99 	.word	0x0800ad99

0800abe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d101      	bne.n	800abf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abf4:	2302      	movs	r3, #2
 800abf6:	e074      	b.n	800ace2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a34      	ldr	r2, [pc, #208]	@ (800acf0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d009      	beq.n	800ac36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a33      	ldr	r2, [pc, #204]	@ (800acf4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d004      	beq.n	800ac36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a31      	ldr	r2, [pc, #196]	@ (800acf8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d108      	bne.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ac3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ac4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a21      	ldr	r2, [pc, #132]	@ (800acf0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d022      	beq.n	800acb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac78:	d01d      	beq.n	800acb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a1f      	ldr	r2, [pc, #124]	@ (800acfc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d018      	beq.n	800acb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a1d      	ldr	r2, [pc, #116]	@ (800ad00 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d013      	beq.n	800acb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a1c      	ldr	r2, [pc, #112]	@ (800ad04 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00e      	beq.n	800acb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a15      	ldr	r2, [pc, #84]	@ (800acf4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d009      	beq.n	800acb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a18      	ldr	r2, [pc, #96]	@ (800ad08 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d004      	beq.n	800acb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a11      	ldr	r2, [pc, #68]	@ (800acf8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d10c      	bne.n	800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40012c00 	.word	0x40012c00
 800acf4:	40013400 	.word	0x40013400
 800acf8:	40015000 	.word	0x40015000
 800acfc:	40000400 	.word	0x40000400
 800ad00:	40000800 	.word	0x40000800
 800ad04:	40000c00 	.word	0x40000c00
 800ad08:	40014000 	.word	0x40014000

0800ad0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e050      	b.n	800ae60 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d114      	bne.n	800adf2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fdc5 	bl	800b960 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800addc:	2b00      	cmp	r3, #0
 800adde:	d103      	bne.n	800ade8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a21      	ldr	r2, [pc, #132]	@ (800ae68 <HAL_UART_Init+0xbc>)
 800ade4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2224      	movs	r2, #36	@ 0x24
 800adf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f022 0201 	bic.w	r2, r2, #1
 800ae08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 f8f2 	bl	800bffc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fdf3 	bl	800ba04 <UART_SetConfig>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d101      	bne.n	800ae28 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e01b      	b.n	800ae60 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ae36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689a      	ldr	r2, [r3, #8]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ae46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f042 0201 	orr.w	r2, r2, #1
 800ae56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f001 f971 	bl	800c140 <UART_CheckIdleState>
 800ae5e:	4603      	mov	r3, r0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	08005365 	.word	0x08005365

0800ae6c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	460b      	mov	r3, r1
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d109      	bne.n	800ae98 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e09c      	b.n	800afd2 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	d16c      	bne.n	800af7c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800aea2:	7afb      	ldrb	r3, [r7, #11]
 800aea4:	2b0c      	cmp	r3, #12
 800aea6:	d85e      	bhi.n	800af66 <HAL_UART_RegisterCallback+0xfa>
 800aea8:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb0 <HAL_UART_RegisterCallback+0x44>)
 800aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeae:	bf00      	nop
 800aeb0:	0800aee5 	.word	0x0800aee5
 800aeb4:	0800aeef 	.word	0x0800aeef
 800aeb8:	0800aef9 	.word	0x0800aef9
 800aebc:	0800af03 	.word	0x0800af03
 800aec0:	0800af0d 	.word	0x0800af0d
 800aec4:	0800af17 	.word	0x0800af17
 800aec8:	0800af21 	.word	0x0800af21
 800aecc:	0800af2b 	.word	0x0800af2b
 800aed0:	0800af35 	.word	0x0800af35
 800aed4:	0800af3f 	.word	0x0800af3f
 800aed8:	0800af49 	.word	0x0800af49
 800aedc:	0800af53 	.word	0x0800af53
 800aee0:	0800af5d 	.word	0x0800af5d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800aeec:	e070      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800aef6:	e06b      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800af00:	e066      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800af0a:	e061      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800af14:	e05c      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800af1e:	e057      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800af28:	e052      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800af32:	e04d      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800af3c:	e048      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800af46:	e043      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800af50:	e03e      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800af5a:	e039      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800af64:	e034      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	75fb      	strb	r3, [r7, #23]
        break;
 800af7a:	e029      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af82:	2b00      	cmp	r3, #0
 800af84:	d11a      	bne.n	800afbc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800af86:	7afb      	ldrb	r3, [r7, #11]
 800af88:	2b0b      	cmp	r3, #11
 800af8a:	d002      	beq.n	800af92 <HAL_UART_RegisterCallback+0x126>
 800af8c:	2b0c      	cmp	r3, #12
 800af8e:	d005      	beq.n	800af9c <HAL_UART_RegisterCallback+0x130>
 800af90:	e009      	b.n	800afa6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800af9a:	e019      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800afa4:	e014      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	75fb      	strb	r3, [r7, #23]
        break;
 800afba:	e009      	b.n	800afd0 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	371c      	adds	r7, #28
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop

0800afe0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b08a      	sub	sp, #40	@ 0x28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	4613      	mov	r3, r2
 800afec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aff4:	2b20      	cmp	r3, #32
 800aff6:	d167      	bne.n	800b0c8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d002      	beq.n	800b004 <HAL_UART_Transmit_DMA+0x24>
 800affe:	88fb      	ldrh	r3, [r7, #6]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e060      	b.n	800b0ca <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	88fa      	ldrh	r2, [r7, #6]
 800b012:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	88fa      	ldrh	r2, [r7, #6]
 800b01a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2221      	movs	r2, #33	@ 0x21
 800b02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d028      	beq.n	800b088 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b03a:	4a26      	ldr	r2, [pc, #152]	@ (800b0d4 <HAL_UART_Transmit_DMA+0xf4>)
 800b03c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b042:	4a25      	ldr	r2, [pc, #148]	@ (800b0d8 <HAL_UART_Transmit_DMA+0xf8>)
 800b044:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b04a:	4a24      	ldr	r2, [pc, #144]	@ (800b0dc <HAL_UART_Transmit_DMA+0xfc>)
 800b04c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b052:	2200      	movs	r2, #0
 800b054:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b05e:	4619      	mov	r1, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3328      	adds	r3, #40	@ 0x28
 800b066:	461a      	mov	r2, r3
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	f7fc f9a3 	bl	80073b4 <HAL_DMA_Start_IT>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2210      	movs	r2, #16
 800b078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2220      	movs	r2, #32
 800b080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	e020      	b.n	800b0ca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2240      	movs	r2, #64	@ 0x40
 800b08e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	e853 3f00 	ldrex	r3, [r3]
 800b09e:	613b      	str	r3, [r7, #16]
   return(result);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0b0:	623a      	str	r2, [r7, #32]
 800b0b2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b4:	69f9      	ldr	r1, [r7, #28]
 800b0b6:	6a3a      	ldr	r2, [r7, #32]
 800b0b8:	e841 2300 	strex	r3, r2, [r1]
 800b0bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1e5      	bne.n	800b090 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e000      	b.n	800b0ca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b0c8:	2302      	movs	r3, #2
  }
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3728      	adds	r7, #40	@ 0x28
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	0800c60b 	.word	0x0800c60b
 800b0d8:	0800c6a9 	.word	0x0800c6a9
 800b0dc:	0800c843 	.word	0x0800c843

0800b0e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08a      	sub	sp, #40	@ 0x28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0f4:	2b20      	cmp	r3, #32
 800b0f6:	d137      	bne.n	800b168 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <HAL_UART_Receive_DMA+0x24>
 800b0fe:	88fb      	ldrh	r3, [r7, #6]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e030      	b.n	800b16a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a18      	ldr	r2, [pc, #96]	@ (800b174 <HAL_UART_Receive_DMA+0x94>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d01f      	beq.n	800b158 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d018      	beq.n	800b158 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	e853 3f00 	ldrex	r3, [r3]
 800b132:	613b      	str	r3, [r7, #16]
   return(result);
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b144:	623b      	str	r3, [r7, #32]
 800b146:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b148:	69f9      	ldr	r1, [r7, #28]
 800b14a:	6a3a      	ldr	r2, [r7, #32]
 800b14c:	e841 2300 	strex	r3, r2, [r1]
 800b150:	61bb      	str	r3, [r7, #24]
   return(result);
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e6      	bne.n	800b126 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b158:	88fb      	ldrh	r3, [r7, #6]
 800b15a:	461a      	mov	r2, r3
 800b15c:	68b9      	ldr	r1, [r7, #8]
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f001 f906 	bl	800c370 <UART_Start_Receive_DMA>
 800b164:	4603      	mov	r3, r0
 800b166:	e000      	b.n	800b16a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b168:	2302      	movs	r3, #2
  }
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3728      	adds	r7, #40	@ 0x28
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	40008000 	.word	0x40008000

0800b178 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b0ba      	sub	sp, #232	@ 0xe8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	69db      	ldr	r3, [r3, #28]
 800b186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b19e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b1a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b1ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d11b      	bne.n	800b1ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1b8:	f003 0320 	and.w	r3, r3, #32
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d015      	beq.n	800b1ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1c4:	f003 0320 	and.w	r3, r3, #32
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d105      	bne.n	800b1d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d009      	beq.n	800b1ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 82f3 	beq.w	800b7c8 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	4798      	blx	r3
      }
      return;
 800b1ea:	e2ed      	b.n	800b7c8 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b1ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 8129 	beq.w	800b448 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b1f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b1fa:	4b90      	ldr	r3, [pc, #576]	@ (800b43c <HAL_UART_IRQHandler+0x2c4>)
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d106      	bne.n	800b210 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b202:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b206:	4b8e      	ldr	r3, [pc, #568]	@ (800b440 <HAL_UART_IRQHandler+0x2c8>)
 800b208:	4013      	ands	r3, r2
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 811c 	beq.w	800b448 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d011      	beq.n	800b240 <HAL_UART_IRQHandler+0xc8>
 800b21c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00b      	beq.n	800b240 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2201      	movs	r2, #1
 800b22e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b236:	f043 0201 	orr.w	r2, r3, #1
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b244:	f003 0302 	and.w	r3, r3, #2
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d011      	beq.n	800b270 <HAL_UART_IRQHandler+0xf8>
 800b24c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2202      	movs	r2, #2
 800b25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b266:	f043 0204 	orr.w	r2, r3, #4
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d011      	beq.n	800b2a0 <HAL_UART_IRQHandler+0x128>
 800b27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00b      	beq.n	800b2a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2204      	movs	r2, #4
 800b28e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b296:	f043 0202 	orr.w	r2, r3, #2
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2a4:	f003 0308 	and.w	r3, r3, #8
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d017      	beq.n	800b2dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2b0:	f003 0320 	and.w	r3, r3, #32
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d105      	bne.n	800b2c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b2b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b2bc:	4b5f      	ldr	r3, [pc, #380]	@ (800b43c <HAL_UART_IRQHandler+0x2c4>)
 800b2be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00b      	beq.n	800b2dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2208      	movs	r2, #8
 800b2ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2d2:	f043 0208 	orr.w	r2, r3, #8
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d012      	beq.n	800b30e <HAL_UART_IRQHandler+0x196>
 800b2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00c      	beq.n	800b30e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b304:	f043 0220 	orr.w	r2, r3, #32
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 8259 	beq.w	800b7cc <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b31e:	f003 0320 	and.w	r3, r3, #32
 800b322:	2b00      	cmp	r3, #0
 800b324:	d013      	beq.n	800b34e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d105      	bne.n	800b33e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d007      	beq.n	800b34e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b354:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b362:	2b40      	cmp	r3, #64	@ 0x40
 800b364:	d005      	beq.n	800b372 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b36a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d058      	beq.n	800b424 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f001 f8e3 	bl	800c53e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b382:	2b40      	cmp	r3, #64	@ 0x40
 800b384:	d148      	bne.n	800b418 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3308      	adds	r3, #8
 800b38c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b390:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b39c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b3b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b3b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b3be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b3ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1d9      	bne.n	800b386 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d017      	beq.n	800b40c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e2:	4a18      	ldr	r2, [pc, #96]	@ (800b444 <HAL_UART_IRQHandler+0x2cc>)
 800b3e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fc f8b5 	bl	800755c <HAL_DMA_Abort_IT>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01f      	beq.n	800b438 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b406:	4610      	mov	r0, r2
 800b408:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b40a:	e015      	b.n	800b438 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b416:	e00f      	b.n	800b438 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b422:	e009      	b.n	800b438 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b436:	e1c9      	b.n	800b7cc <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b438:	bf00      	nop
    return;
 800b43a:	e1c7      	b.n	800b7cc <HAL_UART_IRQHandler+0x654>
 800b43c:	10000001 	.word	0x10000001
 800b440:	04000120 	.word	0x04000120
 800b444:	0800c8c7 	.word	0x0800c8c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	f040 8157 	bne.w	800b700 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b456:	f003 0310 	and.w	r3, r3, #16
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 8150 	beq.w	800b700 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b464:	f003 0310 	and.w	r3, r3, #16
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 8149 	beq.w	800b700 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2210      	movs	r2, #16
 800b474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b480:	2b40      	cmp	r3, #64	@ 0x40
 800b482:	f040 80bd 	bne.w	800b600 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b494:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 8199 	beq.w	800b7d0 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	f080 8191 	bcs.w	800b7d0 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 0320 	and.w	r3, r3, #32
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f040 8087 	bne.w	800b5da <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b4d8:	e853 3f00 	ldrex	r3, [r3]
 800b4dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b4e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b4e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b4f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b4fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b502:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b50e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1da      	bne.n	800b4cc <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3308      	adds	r3, #8
 800b51c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b520:	e853 3f00 	ldrex	r3, [r3]
 800b524:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b528:	f023 0301 	bic.w	r3, r3, #1
 800b52c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3308      	adds	r3, #8
 800b536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b53a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b53e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b540:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b542:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b546:	e841 2300 	strex	r3, r2, [r1]
 800b54a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b54c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e1      	bne.n	800b516 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3308      	adds	r3, #8
 800b558:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b55c:	e853 3f00 	ldrex	r3, [r3]
 800b560:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b568:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3308      	adds	r3, #8
 800b572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b576:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b578:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b57c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b57e:	e841 2300 	strex	r3, r2, [r1]
 800b582:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1e3      	bne.n	800b552 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2220      	movs	r2, #32
 800b58e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5a0:	e853 3f00 	ldrex	r3, [r3]
 800b5a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5a8:	f023 0310 	bic.w	r3, r3, #16
 800b5ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5c2:	e841 2300 	strex	r3, r2, [r1]
 800b5c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1e4      	bne.n	800b598 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fb ff68 	bl	80074aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2202      	movs	r2, #2
 800b5de:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b5f2:	b292      	uxth	r2, r2
 800b5f4:	1a8a      	subs	r2, r1, r2
 800b5f6:	b292      	uxth	r2, r2
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5fe:	e0e7      	b.n	800b7d0 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 80d9 	beq.w	800b7d4 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800b622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b626:	2b00      	cmp	r3, #0
 800b628:	f000 80d4 	beq.w	800b7d4 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b634:	e853 3f00 	ldrex	r3, [r3]
 800b638:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b63c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	461a      	mov	r2, r3
 800b64a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b64e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b650:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b652:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b656:	e841 2300 	strex	r3, r2, [r1]
 800b65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1e4      	bne.n	800b62c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3308      	adds	r3, #8
 800b668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	e853 3f00 	ldrex	r3, [r3]
 800b670:	623b      	str	r3, [r7, #32]
   return(result);
 800b672:	6a3b      	ldr	r3, [r7, #32]
 800b674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b678:	f023 0301 	bic.w	r3, r3, #1
 800b67c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3308      	adds	r3, #8
 800b686:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b68a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1e1      	bne.n	800b662 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	e853 3f00 	ldrex	r3, [r3]
 800b6be:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f023 0310 	bic.w	r3, r3, #16
 800b6c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b6d4:	61fb      	str	r3, [r7, #28]
 800b6d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d8:	69b9      	ldr	r1, [r7, #24]
 800b6da:	69fa      	ldr	r2, [r7, #28]
 800b6dc:	e841 2300 	strex	r3, r2, [r1]
 800b6e0:	617b      	str	r3, [r7, #20]
   return(result);
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e4      	bne.n	800b6b2 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2202      	movs	r2, #2
 800b6ec:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6f4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6fe:	e069      	b.n	800b7d4 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d010      	beq.n	800b72e <HAL_UART_IRQHandler+0x5b6>
 800b70c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00a      	beq.n	800b72e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b720:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b72c:	e055      	b.n	800b7da <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b736:	2b00      	cmp	r3, #0
 800b738:	d014      	beq.n	800b764 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b73e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b742:	2b00      	cmp	r3, #0
 800b744:	d105      	bne.n	800b752 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b74a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d008      	beq.n	800b764 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b756:	2b00      	cmp	r3, #0
 800b758:	d03e      	beq.n	800b7d8 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	4798      	blx	r3
    }
    return;
 800b762:	e039      	b.n	800b7d8 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d009      	beq.n	800b784 <HAL_UART_IRQHandler+0x60c>
 800b770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d003      	beq.n	800b784 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f001 f8ba 	bl	800c8f6 <UART_EndTransmit_IT>
    return;
 800b782:	e02a      	b.n	800b7da <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b788:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00b      	beq.n	800b7a8 <HAL_UART_IRQHandler+0x630>
 800b790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b794:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d005      	beq.n	800b7a8 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7a6:	e018      	b.n	800b7da <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d012      	beq.n	800b7da <HAL_UART_IRQHandler+0x662>
 800b7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	da0e      	bge.n	800b7da <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7c6:	e008      	b.n	800b7da <HAL_UART_IRQHandler+0x662>
      return;
 800b7c8:	bf00      	nop
 800b7ca:	e006      	b.n	800b7da <HAL_UART_IRQHandler+0x662>
    return;
 800b7cc:	bf00      	nop
 800b7ce:	e004      	b.n	800b7da <HAL_UART_IRQHandler+0x662>
      return;
 800b7d0:	bf00      	nop
 800b7d2:	e002      	b.n	800b7da <HAL_UART_IRQHandler+0x662>
      return;
 800b7d4:	bf00      	nop
 800b7d6:	e000      	b.n	800b7da <HAL_UART_IRQHandler+0x662>
    return;
 800b7d8:	bf00      	nop
  }
}
 800b7da:	37e8      	adds	r7, #232	@ 0xe8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a09      	ldr	r2, [pc, #36]	@ (800b8cc <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d009      	beq.n	800b8c0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	430a      	orrs	r2, r1
 800b8be:	615a      	str	r2, [r3, #20]
  }
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	40008000 	.word	0x40008000

0800b8d0 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a18      	ldr	r2, [pc, #96]	@ (800b940 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d027      	beq.n	800b932 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8e8:	2b20      	cmp	r3, #32
 800b8ea:	d120      	bne.n	800b92e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_UART_EnableReceiverTimeout+0x2a>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e01c      	b.n	800b934 <HAL_UART_EnableReceiverTimeout+0x64>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2224      	movs	r2, #36	@ 0x24
 800b906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b918:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2220      	movs	r2, #32
 800b91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	e002      	b.n	800b934 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b92e:	2302      	movs	r3, #2
 800b930:	e000      	b.n	800b934 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
  }
}
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	40008000 	.word	0x40008000

0800b944 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b952:	4618      	mov	r0, r3
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
	...

0800b960 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a1a      	ldr	r2, [pc, #104]	@ (800b9d4 <UART_InitCallbacksToDefault+0x74>)
 800b96c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a19      	ldr	r2, [pc, #100]	@ (800b9d8 <UART_InitCallbacksToDefault+0x78>)
 800b974:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a18      	ldr	r2, [pc, #96]	@ (800b9dc <UART_InitCallbacksToDefault+0x7c>)
 800b97c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4a17      	ldr	r2, [pc, #92]	@ (800b9e0 <UART_InitCallbacksToDefault+0x80>)
 800b984:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a16      	ldr	r2, [pc, #88]	@ (800b9e4 <UART_InitCallbacksToDefault+0x84>)
 800b98c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a15      	ldr	r2, [pc, #84]	@ (800b9e8 <UART_InitCallbacksToDefault+0x88>)
 800b994:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a14      	ldr	r2, [pc, #80]	@ (800b9ec <UART_InitCallbacksToDefault+0x8c>)
 800b99c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a13      	ldr	r2, [pc, #76]	@ (800b9f0 <UART_InitCallbacksToDefault+0x90>)
 800b9a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a12      	ldr	r2, [pc, #72]	@ (800b9f4 <UART_InitCallbacksToDefault+0x94>)
 800b9ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a11      	ldr	r2, [pc, #68]	@ (800b9f8 <UART_InitCallbacksToDefault+0x98>)
 800b9b4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a10      	ldr	r2, [pc, #64]	@ (800b9fc <UART_InitCallbacksToDefault+0x9c>)
 800b9bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a0f      	ldr	r2, [pc, #60]	@ (800ba00 <UART_InitCallbacksToDefault+0xa0>)
 800b9c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	0800b7f5 	.word	0x0800b7f5
 800b9d8:	0800b7e1 	.word	0x0800b7e1
 800b9dc:	0800b81d 	.word	0x0800b81d
 800b9e0:	0800b809 	.word	0x0800b809
 800b9e4:	0800b831 	.word	0x0800b831
 800b9e8:	0800b845 	.word	0x0800b845
 800b9ec:	0800b859 	.word	0x0800b859
 800b9f0:	0800b86d 	.word	0x0800b86d
 800b9f4:	0800c951 	.word	0x0800c951
 800b9f8:	0800c965 	.word	0x0800c965
 800b9fc:	0800c979 	.word	0x0800c979
 800ba00:	0800b881 	.word	0x0800b881

0800ba04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba08:	b08c      	sub	sp, #48	@ 0x30
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	431a      	orrs	r2, r3
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	4baa      	ldr	r3, [pc, #680]	@ (800bcdc <UART_SetConfig+0x2d8>)
 800ba34:	4013      	ands	r3, r2
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	6812      	ldr	r2, [r2, #0]
 800ba3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba3c:	430b      	orrs	r3, r1
 800ba3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	68da      	ldr	r2, [r3, #12]
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a9f      	ldr	r2, [pc, #636]	@ (800bce0 <UART_SetConfig+0x2dc>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d004      	beq.n	800ba70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ba7a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	6812      	ldr	r2, [r2, #0]
 800ba82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba84:	430b      	orrs	r3, r1
 800ba86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8e:	f023 010f 	bic.w	r1, r3, #15
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a90      	ldr	r2, [pc, #576]	@ (800bce4 <UART_SetConfig+0x2e0>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d125      	bne.n	800baf4 <UART_SetConfig+0xf0>
 800baa8:	4b8f      	ldr	r3, [pc, #572]	@ (800bce8 <UART_SetConfig+0x2e4>)
 800baaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800baae:	f003 0303 	and.w	r3, r3, #3
 800bab2:	2b03      	cmp	r3, #3
 800bab4:	d81a      	bhi.n	800baec <UART_SetConfig+0xe8>
 800bab6:	a201      	add	r2, pc, #4	@ (adr r2, 800babc <UART_SetConfig+0xb8>)
 800bab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800babc:	0800bacd 	.word	0x0800bacd
 800bac0:	0800badd 	.word	0x0800badd
 800bac4:	0800bad5 	.word	0x0800bad5
 800bac8:	0800bae5 	.word	0x0800bae5
 800bacc:	2301      	movs	r3, #1
 800bace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bad2:	e116      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bad4:	2302      	movs	r3, #2
 800bad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bada:	e112      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800badc:	2304      	movs	r3, #4
 800bade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bae2:	e10e      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bae4:	2308      	movs	r3, #8
 800bae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baea:	e10a      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800baec:	2310      	movs	r3, #16
 800baee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baf2:	e106      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a7c      	ldr	r2, [pc, #496]	@ (800bcec <UART_SetConfig+0x2e8>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d138      	bne.n	800bb70 <UART_SetConfig+0x16c>
 800bafe:	4b7a      	ldr	r3, [pc, #488]	@ (800bce8 <UART_SetConfig+0x2e4>)
 800bb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb04:	f003 030c 	and.w	r3, r3, #12
 800bb08:	2b0c      	cmp	r3, #12
 800bb0a:	d82d      	bhi.n	800bb68 <UART_SetConfig+0x164>
 800bb0c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb14 <UART_SetConfig+0x110>)
 800bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb12:	bf00      	nop
 800bb14:	0800bb49 	.word	0x0800bb49
 800bb18:	0800bb69 	.word	0x0800bb69
 800bb1c:	0800bb69 	.word	0x0800bb69
 800bb20:	0800bb69 	.word	0x0800bb69
 800bb24:	0800bb59 	.word	0x0800bb59
 800bb28:	0800bb69 	.word	0x0800bb69
 800bb2c:	0800bb69 	.word	0x0800bb69
 800bb30:	0800bb69 	.word	0x0800bb69
 800bb34:	0800bb51 	.word	0x0800bb51
 800bb38:	0800bb69 	.word	0x0800bb69
 800bb3c:	0800bb69 	.word	0x0800bb69
 800bb40:	0800bb69 	.word	0x0800bb69
 800bb44:	0800bb61 	.word	0x0800bb61
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb4e:	e0d8      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bb50:	2302      	movs	r3, #2
 800bb52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb56:	e0d4      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bb58:	2304      	movs	r3, #4
 800bb5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb5e:	e0d0      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bb60:	2308      	movs	r3, #8
 800bb62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb66:	e0cc      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bb68:	2310      	movs	r3, #16
 800bb6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb6e:	e0c8      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a5e      	ldr	r2, [pc, #376]	@ (800bcf0 <UART_SetConfig+0x2ec>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d125      	bne.n	800bbc6 <UART_SetConfig+0x1c2>
 800bb7a:	4b5b      	ldr	r3, [pc, #364]	@ (800bce8 <UART_SetConfig+0x2e4>)
 800bb7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bb84:	2b30      	cmp	r3, #48	@ 0x30
 800bb86:	d016      	beq.n	800bbb6 <UART_SetConfig+0x1b2>
 800bb88:	2b30      	cmp	r3, #48	@ 0x30
 800bb8a:	d818      	bhi.n	800bbbe <UART_SetConfig+0x1ba>
 800bb8c:	2b20      	cmp	r3, #32
 800bb8e:	d00a      	beq.n	800bba6 <UART_SetConfig+0x1a2>
 800bb90:	2b20      	cmp	r3, #32
 800bb92:	d814      	bhi.n	800bbbe <UART_SetConfig+0x1ba>
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <UART_SetConfig+0x19a>
 800bb98:	2b10      	cmp	r3, #16
 800bb9a:	d008      	beq.n	800bbae <UART_SetConfig+0x1aa>
 800bb9c:	e00f      	b.n	800bbbe <UART_SetConfig+0x1ba>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bba4:	e0ad      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bba6:	2302      	movs	r3, #2
 800bba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbac:	e0a9      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bbae:	2304      	movs	r3, #4
 800bbb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbb4:	e0a5      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bbb6:	2308      	movs	r3, #8
 800bbb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbbc:	e0a1      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bbbe:	2310      	movs	r3, #16
 800bbc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbc4:	e09d      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a4a      	ldr	r2, [pc, #296]	@ (800bcf4 <UART_SetConfig+0x2f0>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d125      	bne.n	800bc1c <UART_SetConfig+0x218>
 800bbd0:	4b45      	ldr	r3, [pc, #276]	@ (800bce8 <UART_SetConfig+0x2e4>)
 800bbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bbda:	2bc0      	cmp	r3, #192	@ 0xc0
 800bbdc:	d016      	beq.n	800bc0c <UART_SetConfig+0x208>
 800bbde:	2bc0      	cmp	r3, #192	@ 0xc0
 800bbe0:	d818      	bhi.n	800bc14 <UART_SetConfig+0x210>
 800bbe2:	2b80      	cmp	r3, #128	@ 0x80
 800bbe4:	d00a      	beq.n	800bbfc <UART_SetConfig+0x1f8>
 800bbe6:	2b80      	cmp	r3, #128	@ 0x80
 800bbe8:	d814      	bhi.n	800bc14 <UART_SetConfig+0x210>
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d002      	beq.n	800bbf4 <UART_SetConfig+0x1f0>
 800bbee:	2b40      	cmp	r3, #64	@ 0x40
 800bbf0:	d008      	beq.n	800bc04 <UART_SetConfig+0x200>
 800bbf2:	e00f      	b.n	800bc14 <UART_SetConfig+0x210>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbfa:	e082      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc02:	e07e      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bc04:	2304      	movs	r3, #4
 800bc06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc0a:	e07a      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bc0c:	2308      	movs	r3, #8
 800bc0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc12:	e076      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bc14:	2310      	movs	r3, #16
 800bc16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc1a:	e072      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a35      	ldr	r2, [pc, #212]	@ (800bcf8 <UART_SetConfig+0x2f4>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d12a      	bne.n	800bc7c <UART_SetConfig+0x278>
 800bc26:	4b30      	ldr	r3, [pc, #192]	@ (800bce8 <UART_SetConfig+0x2e4>)
 800bc28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc34:	d01a      	beq.n	800bc6c <UART_SetConfig+0x268>
 800bc36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc3a:	d81b      	bhi.n	800bc74 <UART_SetConfig+0x270>
 800bc3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc40:	d00c      	beq.n	800bc5c <UART_SetConfig+0x258>
 800bc42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc46:	d815      	bhi.n	800bc74 <UART_SetConfig+0x270>
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d003      	beq.n	800bc54 <UART_SetConfig+0x250>
 800bc4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc50:	d008      	beq.n	800bc64 <UART_SetConfig+0x260>
 800bc52:	e00f      	b.n	800bc74 <UART_SetConfig+0x270>
 800bc54:	2300      	movs	r3, #0
 800bc56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc5a:	e052      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc62:	e04e      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bc64:	2304      	movs	r3, #4
 800bc66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc6a:	e04a      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bc6c:	2308      	movs	r3, #8
 800bc6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc72:	e046      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bc74:	2310      	movs	r3, #16
 800bc76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc7a:	e042      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a17      	ldr	r2, [pc, #92]	@ (800bce0 <UART_SetConfig+0x2dc>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d13a      	bne.n	800bcfc <UART_SetConfig+0x2f8>
 800bc86:	4b18      	ldr	r3, [pc, #96]	@ (800bce8 <UART_SetConfig+0x2e4>)
 800bc88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bc90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bc94:	d01a      	beq.n	800bccc <UART_SetConfig+0x2c8>
 800bc96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bc9a:	d81b      	bhi.n	800bcd4 <UART_SetConfig+0x2d0>
 800bc9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bca0:	d00c      	beq.n	800bcbc <UART_SetConfig+0x2b8>
 800bca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bca6:	d815      	bhi.n	800bcd4 <UART_SetConfig+0x2d0>
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d003      	beq.n	800bcb4 <UART_SetConfig+0x2b0>
 800bcac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcb0:	d008      	beq.n	800bcc4 <UART_SetConfig+0x2c0>
 800bcb2:	e00f      	b.n	800bcd4 <UART_SetConfig+0x2d0>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcba:	e022      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcc2:	e01e      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bcc4:	2304      	movs	r3, #4
 800bcc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcca:	e01a      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bccc:	2308      	movs	r3, #8
 800bcce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcd2:	e016      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bcd4:	2310      	movs	r3, #16
 800bcd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bcda:	e012      	b.n	800bd02 <UART_SetConfig+0x2fe>
 800bcdc:	cfff69f3 	.word	0xcfff69f3
 800bce0:	40008000 	.word	0x40008000
 800bce4:	40013800 	.word	0x40013800
 800bce8:	40021000 	.word	0x40021000
 800bcec:	40004400 	.word	0x40004400
 800bcf0:	40004800 	.word	0x40004800
 800bcf4:	40004c00 	.word	0x40004c00
 800bcf8:	40005000 	.word	0x40005000
 800bcfc:	2310      	movs	r3, #16
 800bcfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4aae      	ldr	r2, [pc, #696]	@ (800bfc0 <UART_SetConfig+0x5bc>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	f040 8097 	bne.w	800be3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd12:	2b08      	cmp	r3, #8
 800bd14:	d823      	bhi.n	800bd5e <UART_SetConfig+0x35a>
 800bd16:	a201      	add	r2, pc, #4	@ (adr r2, 800bd1c <UART_SetConfig+0x318>)
 800bd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1c:	0800bd41 	.word	0x0800bd41
 800bd20:	0800bd5f 	.word	0x0800bd5f
 800bd24:	0800bd49 	.word	0x0800bd49
 800bd28:	0800bd5f 	.word	0x0800bd5f
 800bd2c:	0800bd4f 	.word	0x0800bd4f
 800bd30:	0800bd5f 	.word	0x0800bd5f
 800bd34:	0800bd5f 	.word	0x0800bd5f
 800bd38:	0800bd5f 	.word	0x0800bd5f
 800bd3c:	0800bd57 	.word	0x0800bd57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd40:	f7fc fd16 	bl	8008770 <HAL_RCC_GetPCLK1Freq>
 800bd44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd46:	e010      	b.n	800bd6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd48:	4b9e      	ldr	r3, [pc, #632]	@ (800bfc4 <UART_SetConfig+0x5c0>)
 800bd4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd4c:	e00d      	b.n	800bd6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd4e:	f7fc fca1 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 800bd52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd54:	e009      	b.n	800bd6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd5c:	e005      	b.n	800bd6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bd68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 8130 	beq.w	800bfd2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd76:	4a94      	ldr	r2, [pc, #592]	@ (800bfc8 <UART_SetConfig+0x5c4>)
 800bd78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd80:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	685a      	ldr	r2, [r3, #4]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	4413      	add	r3, r2
 800bd90:	69ba      	ldr	r2, [r7, #24]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d305      	bcc.n	800bda2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd9c:	69ba      	ldr	r2, [r7, #24]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d903      	bls.n	800bdaa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bda8:	e113      	b.n	800bfd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdac:	2200      	movs	r2, #0
 800bdae:	60bb      	str	r3, [r7, #8]
 800bdb0:	60fa      	str	r2, [r7, #12]
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb6:	4a84      	ldr	r2, [pc, #528]	@ (800bfc8 <UART_SetConfig+0x5c4>)
 800bdb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	603b      	str	r3, [r7, #0]
 800bdc2:	607a      	str	r2, [r7, #4]
 800bdc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bdcc:	f7f4 feea 	bl	8000ba4 <__aeabi_uldivmod>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	f04f 0200 	mov.w	r2, #0
 800bddc:	f04f 0300 	mov.w	r3, #0
 800bde0:	020b      	lsls	r3, r1, #8
 800bde2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bde6:	0202      	lsls	r2, r0, #8
 800bde8:	6979      	ldr	r1, [r7, #20]
 800bdea:	6849      	ldr	r1, [r1, #4]
 800bdec:	0849      	lsrs	r1, r1, #1
 800bdee:	2000      	movs	r0, #0
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	eb12 0804 	adds.w	r8, r2, r4
 800bdf8:	eb43 0905 	adc.w	r9, r3, r5
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	469a      	mov	sl, r3
 800be04:	4693      	mov	fp, r2
 800be06:	4652      	mov	r2, sl
 800be08:	465b      	mov	r3, fp
 800be0a:	4640      	mov	r0, r8
 800be0c:	4649      	mov	r1, r9
 800be0e:	f7f4 fec9 	bl	8000ba4 <__aeabi_uldivmod>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	4613      	mov	r3, r2
 800be18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be1a:	6a3b      	ldr	r3, [r7, #32]
 800be1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be20:	d308      	bcc.n	800be34 <UART_SetConfig+0x430>
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be28:	d204      	bcs.n	800be34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	6a3a      	ldr	r2, [r7, #32]
 800be30:	60da      	str	r2, [r3, #12]
 800be32:	e0ce      	b.n	800bfd2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800be34:	2301      	movs	r3, #1
 800be36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800be3a:	e0ca      	b.n	800bfd2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	69db      	ldr	r3, [r3, #28]
 800be40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be44:	d166      	bne.n	800bf14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800be46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be4a:	2b08      	cmp	r3, #8
 800be4c:	d827      	bhi.n	800be9e <UART_SetConfig+0x49a>
 800be4e:	a201      	add	r2, pc, #4	@ (adr r2, 800be54 <UART_SetConfig+0x450>)
 800be50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be54:	0800be79 	.word	0x0800be79
 800be58:	0800be81 	.word	0x0800be81
 800be5c:	0800be89 	.word	0x0800be89
 800be60:	0800be9f 	.word	0x0800be9f
 800be64:	0800be8f 	.word	0x0800be8f
 800be68:	0800be9f 	.word	0x0800be9f
 800be6c:	0800be9f 	.word	0x0800be9f
 800be70:	0800be9f 	.word	0x0800be9f
 800be74:	0800be97 	.word	0x0800be97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be78:	f7fc fc7a 	bl	8008770 <HAL_RCC_GetPCLK1Freq>
 800be7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be7e:	e014      	b.n	800beaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be80:	f7fc fc8c 	bl	800879c <HAL_RCC_GetPCLK2Freq>
 800be84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be86:	e010      	b.n	800beaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be88:	4b4e      	ldr	r3, [pc, #312]	@ (800bfc4 <UART_SetConfig+0x5c0>)
 800be8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be8c:	e00d      	b.n	800beaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be8e:	f7fc fc01 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 800be92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be94:	e009      	b.n	800beaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be9c:	e005      	b.n	800beaa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800beaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beac:	2b00      	cmp	r3, #0
 800beae:	f000 8090 	beq.w	800bfd2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beb6:	4a44      	ldr	r2, [pc, #272]	@ (800bfc8 <UART_SetConfig+0x5c4>)
 800beb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bebc:	461a      	mov	r2, r3
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bec4:	005a      	lsls	r2, r3, #1
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	085b      	lsrs	r3, r3, #1
 800becc:	441a      	add	r2, r3
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	2b0f      	cmp	r3, #15
 800bedc:	d916      	bls.n	800bf0c <UART_SetConfig+0x508>
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bee4:	d212      	bcs.n	800bf0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	b29b      	uxth	r3, r3
 800beea:	f023 030f 	bic.w	r3, r3, #15
 800beee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	085b      	lsrs	r3, r3, #1
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	f003 0307 	and.w	r3, r3, #7
 800befa:	b29a      	uxth	r2, r3
 800befc:	8bfb      	ldrh	r3, [r7, #30]
 800befe:	4313      	orrs	r3, r2
 800bf00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	8bfa      	ldrh	r2, [r7, #30]
 800bf08:	60da      	str	r2, [r3, #12]
 800bf0a:	e062      	b.n	800bfd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bf12:	e05e      	b.n	800bfd2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf18:	2b08      	cmp	r3, #8
 800bf1a:	d828      	bhi.n	800bf6e <UART_SetConfig+0x56a>
 800bf1c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf24 <UART_SetConfig+0x520>)
 800bf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf22:	bf00      	nop
 800bf24:	0800bf49 	.word	0x0800bf49
 800bf28:	0800bf51 	.word	0x0800bf51
 800bf2c:	0800bf59 	.word	0x0800bf59
 800bf30:	0800bf6f 	.word	0x0800bf6f
 800bf34:	0800bf5f 	.word	0x0800bf5f
 800bf38:	0800bf6f 	.word	0x0800bf6f
 800bf3c:	0800bf6f 	.word	0x0800bf6f
 800bf40:	0800bf6f 	.word	0x0800bf6f
 800bf44:	0800bf67 	.word	0x0800bf67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf48:	f7fc fc12 	bl	8008770 <HAL_RCC_GetPCLK1Freq>
 800bf4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf4e:	e014      	b.n	800bf7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf50:	f7fc fc24 	bl	800879c <HAL_RCC_GetPCLK2Freq>
 800bf54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf56:	e010      	b.n	800bf7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf58:	4b1a      	ldr	r3, [pc, #104]	@ (800bfc4 <UART_SetConfig+0x5c0>)
 800bf5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bf5c:	e00d      	b.n	800bf7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf5e:	f7fc fb99 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 800bf62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf64:	e009      	b.n	800bf7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bf6c:	e005      	b.n	800bf7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bf78:	bf00      	nop
    }

    if (pclk != 0U)
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d028      	beq.n	800bfd2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf84:	4a10      	ldr	r2, [pc, #64]	@ (800bfc8 <UART_SetConfig+0x5c4>)
 800bf86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	085b      	lsrs	r3, r3, #1
 800bf98:	441a      	add	r2, r3
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	2b0f      	cmp	r3, #15
 800bfa8:	d910      	bls.n	800bfcc <UART_SetConfig+0x5c8>
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfb0:	d20c      	bcs.n	800bfcc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	60da      	str	r2, [r3, #12]
 800bfbc:	e009      	b.n	800bfd2 <UART_SetConfig+0x5ce>
 800bfbe:	bf00      	nop
 800bfc0:	40008000 	.word	0x40008000
 800bfc4:	00f42400 	.word	0x00f42400
 800bfc8:	0800cc5c 	.word	0x0800cc5c
      }
      else
      {
        ret = HAL_ERROR;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	2200      	movs	r2, #0
 800bfec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bfee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3730      	adds	r7, #48	@ 0x30
 800bff6:	46bd      	mov	sp, r7
 800bff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c008:	f003 0308 	and.w	r3, r3, #8
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00a      	beq.n	800c026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	430a      	orrs	r2, r1
 800c024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c02a:	f003 0301 	and.w	r3, r3, #1
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00a      	beq.n	800c048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	430a      	orrs	r2, r1
 800c046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c04c:	f003 0302 	and.w	r3, r3, #2
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00a      	beq.n	800c06a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	430a      	orrs	r2, r1
 800c068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c06e:	f003 0304 	and.w	r3, r3, #4
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00a      	beq.n	800c08c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	430a      	orrs	r2, r1
 800c08a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c090:	f003 0310 	and.w	r3, r3, #16
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00a      	beq.n	800c0ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00a      	beq.n	800c0d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	430a      	orrs	r2, r1
 800c0ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d01a      	beq.n	800c112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	430a      	orrs	r2, r1
 800c0f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0fa:	d10a      	bne.n	800c112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	430a      	orrs	r2, r1
 800c110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00a      	beq.n	800c134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	430a      	orrs	r2, r1
 800c132:	605a      	str	r2, [r3, #4]
  }
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b098      	sub	sp, #96	@ 0x60
 800c144:	af02      	add	r7, sp, #8
 800c146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c150:	f7f9 faf4 	bl	800573c <HAL_GetTick>
 800c154:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0308 	and.w	r3, r3, #8
 800c160:	2b08      	cmp	r3, #8
 800c162:	d12f      	bne.n	800c1c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c164:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c16c:	2200      	movs	r2, #0
 800c16e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f88e 	bl	800c294 <UART_WaitOnFlagUntilTimeout>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d022      	beq.n	800c1c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c186:	e853 3f00 	ldrex	r3, [r3]
 800c18a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c18c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c18e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c192:	653b      	str	r3, [r7, #80]	@ 0x50
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	461a      	mov	r2, r3
 800c19a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c19c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c19e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c1a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1a4:	e841 2300 	strex	r3, r2, [r1]
 800c1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c1aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1e6      	bne.n	800c17e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2220      	movs	r2, #32
 800c1b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	e063      	b.n	800c28c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 0304 	and.w	r3, r3, #4
 800c1ce:	2b04      	cmp	r3, #4
 800c1d0:	d149      	bne.n	800c266 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 f857 	bl	800c294 <UART_WaitOnFlagUntilTimeout>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d03c      	beq.n	800c266 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	623b      	str	r3, [r7, #32]
   return(result);
 800c1fa:	6a3b      	ldr	r3, [r7, #32]
 800c1fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c200:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c20a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c20c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e6      	bne.n	800c1ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3308      	adds	r3, #8
 800c224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f023 0301 	bic.w	r3, r3, #1
 800c234:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3308      	adds	r3, #8
 800c23c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c23e:	61fa      	str	r2, [r7, #28]
 800c240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c242:	69b9      	ldr	r1, [r7, #24]
 800c244:	69fa      	ldr	r2, [r7, #28]
 800c246:	e841 2300 	strex	r3, r2, [r1]
 800c24a:	617b      	str	r3, [r7, #20]
   return(result);
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1e5      	bne.n	800c21e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2220      	movs	r2, #32
 800c256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c262:	2303      	movs	r3, #3
 800c264:	e012      	b.n	800c28c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2220      	movs	r2, #32
 800c26a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2220      	movs	r2, #32
 800c272:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3758      	adds	r7, #88	@ 0x58
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	603b      	str	r3, [r7, #0]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2a4:	e04f      	b.n	800c346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d04b      	beq.n	800c346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2ae:	f7f9 fa45 	bl	800573c <HAL_GetTick>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	69ba      	ldr	r2, [r7, #24]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d302      	bcc.n	800c2c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d101      	bne.n	800c2c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	e04e      	b.n	800c366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 0304 	and.w	r3, r3, #4
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d037      	beq.n	800c346 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2b80      	cmp	r3, #128	@ 0x80
 800c2da:	d034      	beq.n	800c346 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b40      	cmp	r3, #64	@ 0x40
 800c2e0:	d031      	beq.n	800c346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	69db      	ldr	r3, [r3, #28]
 800c2e8:	f003 0308 	and.w	r3, r3, #8
 800c2ec:	2b08      	cmp	r3, #8
 800c2ee:	d110      	bne.n	800c312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2208      	movs	r2, #8
 800c2f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f000 f920 	bl	800c53e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2208      	movs	r2, #8
 800c302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e029      	b.n	800c366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	69db      	ldr	r3, [r3, #28]
 800c318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c31c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c320:	d111      	bne.n	800c346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c32a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f000 f906 	bl	800c53e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2220      	movs	r2, #32
 800c336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2200      	movs	r2, #0
 800c33e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c342:	2303      	movs	r3, #3
 800c344:	e00f      	b.n	800c366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	69da      	ldr	r2, [r3, #28]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	4013      	ands	r3, r2
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	429a      	cmp	r2, r3
 800c354:	bf0c      	ite	eq
 800c356:	2301      	moveq	r3, #1
 800c358:	2300      	movne	r3, #0
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	461a      	mov	r2, r3
 800c35e:	79fb      	ldrb	r3, [r7, #7]
 800c360:	429a      	cmp	r2, r3
 800c362:	d0a0      	beq.n	800c2a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
	...

0800c370 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b096      	sub	sp, #88	@ 0x58
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	4613      	mov	r3, r2
 800c37c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	88fa      	ldrh	r2, [r7, #6]
 800c388:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2222      	movs	r2, #34	@ 0x22
 800c398:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d02d      	beq.n	800c402 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ac:	4a40      	ldr	r2, [pc, #256]	@ (800c4b0 <UART_Start_Receive_DMA+0x140>)
 800c3ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3b6:	4a3f      	ldr	r2, [pc, #252]	@ (800c4b4 <UART_Start_Receive_DMA+0x144>)
 800c3b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3c0:	4a3d      	ldr	r2, [pc, #244]	@ (800c4b8 <UART_Start_Receive_DMA+0x148>)
 800c3c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3324      	adds	r3, #36	@ 0x24
 800c3da:	4619      	mov	r1, r3
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	88fb      	ldrh	r3, [r7, #6]
 800c3e4:	f7fa ffe6 	bl	80073b4 <HAL_DMA_Start_IT>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d009      	beq.n	800c402 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2210      	movs	r2, #16
 800c3f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e051      	b.n	800c4a6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d018      	beq.n	800c43c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c412:	e853 3f00 	ldrex	r3, [r3]
 800c416:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c41a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c41e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	461a      	mov	r2, r3
 800c426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c428:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c42a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c42e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c430:	e841 2300 	strex	r3, r2, [r1]
 800c434:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1e6      	bne.n	800c40a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3308      	adds	r3, #8
 800c442:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c446:	e853 3f00 	ldrex	r3, [r3]
 800c44a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44e:	f043 0301 	orr.w	r3, r3, #1
 800c452:	653b      	str	r3, [r7, #80]	@ 0x50
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	3308      	adds	r3, #8
 800c45a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c45c:	637a      	str	r2, [r7, #52]	@ 0x34
 800c45e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c460:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c462:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c464:	e841 2300 	strex	r3, r2, [r1]
 800c468:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1e5      	bne.n	800c43c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	3308      	adds	r3, #8
 800c476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	e853 3f00 	ldrex	r3, [r3]
 800c47e:	613b      	str	r3, [r7, #16]
   return(result);
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3308      	adds	r3, #8
 800c48e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c490:	623a      	str	r2, [r7, #32]
 800c492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c494:	69f9      	ldr	r1, [r7, #28]
 800c496:	6a3a      	ldr	r2, [r7, #32]
 800c498:	e841 2300 	strex	r3, r2, [r1]
 800c49c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1e5      	bne.n	800c470 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3758      	adds	r7, #88	@ 0x58
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0800c6c9 	.word	0x0800c6c9
 800c4b4:	0800c7fd 	.word	0x0800c7fd
 800c4b8:	0800c843 	.word	0x0800c843

0800c4bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b08f      	sub	sp, #60	@ 0x3c
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ca:	6a3b      	ldr	r3, [r7, #32]
 800c4cc:	e853 3f00 	ldrex	r3, [r3]
 800c4d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c4d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4ea:	e841 2300 	strex	r3, r2, [r1]
 800c4ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1e6      	bne.n	800c4c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3308      	adds	r3, #8
 800c4fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	e853 3f00 	ldrex	r3, [r3]
 800c504:	60bb      	str	r3, [r7, #8]
   return(result);
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c50c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3308      	adds	r3, #8
 800c514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c516:	61ba      	str	r2, [r7, #24]
 800c518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51a:	6979      	ldr	r1, [r7, #20]
 800c51c:	69ba      	ldr	r2, [r7, #24]
 800c51e:	e841 2300 	strex	r3, r2, [r1]
 800c522:	613b      	str	r3, [r7, #16]
   return(result);
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1e5      	bne.n	800c4f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2220      	movs	r2, #32
 800c52e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c532:	bf00      	nop
 800c534:	373c      	adds	r7, #60	@ 0x3c
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c53e:	b480      	push	{r7}
 800c540:	b095      	sub	sp, #84	@ 0x54
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c54e:	e853 3f00 	ldrex	r3, [r3]
 800c552:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c556:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c55a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	461a      	mov	r2, r3
 800c562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c564:	643b      	str	r3, [r7, #64]	@ 0x40
 800c566:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c568:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c56a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c56c:	e841 2300 	strex	r3, r2, [r1]
 800c570:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1e6      	bne.n	800c546 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3308      	adds	r3, #8
 800c57e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	e853 3f00 	ldrex	r3, [r3]
 800c586:	61fb      	str	r3, [r7, #28]
   return(result);
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c58e:	f023 0301 	bic.w	r3, r3, #1
 800c592:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3308      	adds	r3, #8
 800c59a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c59c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c59e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5a4:	e841 2300 	strex	r3, r2, [r1]
 800c5a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e3      	bne.n	800c578 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d118      	bne.n	800c5ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	e853 3f00 	ldrex	r3, [r3]
 800c5c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	f023 0310 	bic.w	r3, r3, #16
 800c5cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5d6:	61bb      	str	r3, [r7, #24]
 800c5d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5da:	6979      	ldr	r1, [r7, #20]
 800c5dc:	69ba      	ldr	r2, [r7, #24]
 800c5de:	e841 2300 	strex	r3, r2, [r1]
 800c5e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1e6      	bne.n	800c5b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c5fe:	bf00      	nop
 800c600:	3754      	adds	r7, #84	@ 0x54
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b090      	sub	sp, #64	@ 0x40
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c616:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 0320 	and.w	r3, r3, #32
 800c622:	2b00      	cmp	r3, #0
 800c624:	d137      	bne.n	800c696 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c628:	2200      	movs	r2, #0
 800c62a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3308      	adds	r3, #8
 800c634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c638:	e853 3f00 	ldrex	r3, [r3]
 800c63c:	623b      	str	r3, [r7, #32]
   return(result);
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c644:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3308      	adds	r3, #8
 800c64c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c64e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c656:	e841 2300 	strex	r3, r2, [r1]
 800c65a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1e5      	bne.n	800c62e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	e853 3f00 	ldrex	r3, [r3]
 800c66e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c676:	637b      	str	r3, [r7, #52]	@ 0x34
 800c678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	461a      	mov	r2, r3
 800c67e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c680:	61fb      	str	r3, [r7, #28]
 800c682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c684:	69b9      	ldr	r1, [r7, #24]
 800c686:	69fa      	ldr	r2, [r7, #28]
 800c688:	e841 2300 	strex	r3, r2, [r1]
 800c68c:	617b      	str	r3, [r7, #20]
   return(result);
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1e6      	bne.n	800c662 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c694:	e004      	b.n	800c6a0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800c696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c69c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c69e:	4798      	blx	r3
}
 800c6a0:	bf00      	nop
 800c6a2:	3740      	adds	r7, #64	@ 0x40
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6c0:	bf00      	nop
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b09c      	sub	sp, #112	@ 0x70
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0320 	and.w	r3, r3, #32
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d171      	bne.n	800c7c8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c6e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6f4:	e853 3f00 	ldrex	r3, [r3]
 800c6f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c6fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c700:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	461a      	mov	r2, r3
 800c708:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c70a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c70c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c710:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c712:	e841 2300 	strex	r3, r2, [r1]
 800c716:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1e6      	bne.n	800c6ec <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c71e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3308      	adds	r3, #8
 800c724:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c728:	e853 3f00 	ldrex	r3, [r3]
 800c72c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c730:	f023 0301 	bic.w	r3, r3, #1
 800c734:	667b      	str	r3, [r7, #100]	@ 0x64
 800c736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3308      	adds	r3, #8
 800c73c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c73e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c740:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c742:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c746:	e841 2300 	strex	r3, r2, [r1]
 800c74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c74c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1e5      	bne.n	800c71e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3308      	adds	r3, #8
 800c758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	623b      	str	r3, [r7, #32]
   return(result);
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c768:	663b      	str	r3, [r7, #96]	@ 0x60
 800c76a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	3308      	adds	r3, #8
 800c770:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c772:	633a      	str	r2, [r7, #48]	@ 0x30
 800c774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e5      	bne.n	800c752 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c788:	2220      	movs	r2, #32
 800c78a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c78e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c792:	2b01      	cmp	r3, #1
 800c794:	d118      	bne.n	800c7c8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	e853 3f00 	ldrex	r3, [r3]
 800c7a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f023 0310 	bic.w	r3, r3, #16
 800c7aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7b4:	61fb      	str	r3, [r7, #28]
 800c7b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b8:	69b9      	ldr	r1, [r7, #24]
 800c7ba:	69fa      	ldr	r2, [r7, #28]
 800c7bc:	e841 2300 	strex	r3, r2, [r1]
 800c7c0:	617b      	str	r3, [r7, #20]
   return(result);
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1e6      	bne.n	800c796 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d109      	bne.n	800c7ea <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c7d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c7dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7de:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c7e6:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c7e8:	e004      	b.n	800c7f4 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c7ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c7f2:	4798      	blx	r3
}
 800c7f4:	bf00      	nop
 800c7f6:	3770      	adds	r7, #112	@ 0x70
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c808:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2201      	movs	r2, #1
 800c80e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c814:	2b01      	cmp	r3, #1
 800c816:	d10b      	bne.n	800c830 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c824:	0852      	lsrs	r2, r2, #1
 800c826:	b292      	uxth	r2, r2
 800c828:	4611      	mov	r1, r2
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c82e:	e004      	b.n	800c83a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	4798      	blx	r3
}
 800c83a:	bf00      	nop
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b086      	sub	sp, #24
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c84e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c856:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c86a:	2b80      	cmp	r3, #128	@ 0x80
 800c86c:	d109      	bne.n	800c882 <UART_DMAError+0x40>
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	2b21      	cmp	r3, #33	@ 0x21
 800c872:	d106      	bne.n	800c882 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	2200      	movs	r2, #0
 800c878:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c87c:	6978      	ldr	r0, [r7, #20]
 800c87e:	f7ff fe1d 	bl	800c4bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c88c:	2b40      	cmp	r3, #64	@ 0x40
 800c88e:	d109      	bne.n	800c8a4 <UART_DMAError+0x62>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2b22      	cmp	r3, #34	@ 0x22
 800c894:	d106      	bne.n	800c8a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	2200      	movs	r2, #0
 800c89a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c89e:	6978      	ldr	r0, [r7, #20]
 800c8a0:	f7ff fe4d 	bl	800c53e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8aa:	f043 0210 	orr.w	r2, r3, #16
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c8ba:	6978      	ldr	r0, [r7, #20]
 800c8bc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8be:	bf00      	nop
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8ee:	bf00      	nop
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b088      	sub	sp, #32
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	e853 3f00 	ldrex	r3, [r3]
 800c90a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c912:	61fb      	str	r3, [r7, #28]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	461a      	mov	r2, r3
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	61bb      	str	r3, [r7, #24]
 800c91e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c920:	6979      	ldr	r1, [r7, #20]
 800c922:	69ba      	ldr	r2, [r7, #24]
 800c924:	e841 2300 	strex	r3, r2, [r1]
 800c928:	613b      	str	r3, [r7, #16]
   return(result);
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1e6      	bne.n	800c8fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2220      	movs	r2, #32
 800c934:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c948:	bf00      	nop
 800c94a:	3720      	adds	r7, #32
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d101      	bne.n	800c9a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c99e:	2302      	movs	r3, #2
 800c9a0:	e027      	b.n	800c9f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2224      	movs	r2, #36	@ 0x24
 800c9ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f022 0201 	bic.w	r2, r2, #1
 800c9c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c9d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2220      	movs	r2, #32
 800c9e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d101      	bne.n	800ca16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca12:	2302      	movs	r3, #2
 800ca14:	e02d      	b.n	800ca72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2224      	movs	r2, #36	@ 0x24
 800ca22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f022 0201 	bic.w	r2, r2, #1
 800ca3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	683a      	ldr	r2, [r7, #0]
 800ca4e:	430a      	orrs	r2, r1
 800ca50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f850 	bl	800caf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2220      	movs	r2, #32
 800ca64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d101      	bne.n	800ca92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca8e:	2302      	movs	r3, #2
 800ca90:	e02d      	b.n	800caee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2201      	movs	r2, #1
 800ca96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2224      	movs	r2, #36	@ 0x24
 800ca9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f022 0201 	bic.w	r2, r2, #1
 800cab8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	430a      	orrs	r2, r1
 800cacc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f812 	bl	800caf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2220      	movs	r2, #32
 800cae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d108      	bne.n	800cb1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb18:	e031      	b.n	800cb7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb1a:	2308      	movs	r3, #8
 800cb1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb1e:	2308      	movs	r3, #8
 800cb20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	0e5b      	lsrs	r3, r3, #25
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	f003 0307 	and.w	r3, r3, #7
 800cb30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	0f5b      	lsrs	r3, r3, #29
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	f003 0307 	and.w	r3, r3, #7
 800cb40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb42:	7bbb      	ldrb	r3, [r7, #14]
 800cb44:	7b3a      	ldrb	r2, [r7, #12]
 800cb46:	4911      	ldr	r1, [pc, #68]	@ (800cb8c <UARTEx_SetNbDataToProcess+0x94>)
 800cb48:	5c8a      	ldrb	r2, [r1, r2]
 800cb4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb4e:	7b3a      	ldrb	r2, [r7, #12]
 800cb50:	490f      	ldr	r1, [pc, #60]	@ (800cb90 <UARTEx_SetNbDataToProcess+0x98>)
 800cb52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb54:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb60:	7bfb      	ldrb	r3, [r7, #15]
 800cb62:	7b7a      	ldrb	r2, [r7, #13]
 800cb64:	4909      	ldr	r1, [pc, #36]	@ (800cb8c <UARTEx_SetNbDataToProcess+0x94>)
 800cb66:	5c8a      	ldrb	r2, [r1, r2]
 800cb68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb6c:	7b7a      	ldrb	r2, [r7, #13]
 800cb6e:	4908      	ldr	r1, [pc, #32]	@ (800cb90 <UARTEx_SetNbDataToProcess+0x98>)
 800cb70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb72:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cb7e:	bf00      	nop
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	0800cc74 	.word	0x0800cc74
 800cb90:	0800cc7c 	.word	0x0800cc7c

0800cb94 <memset>:
 800cb94:	4402      	add	r2, r0
 800cb96:	4603      	mov	r3, r0
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d100      	bne.n	800cb9e <memset+0xa>
 800cb9c:	4770      	bx	lr
 800cb9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cba2:	e7f9      	b.n	800cb98 <memset+0x4>

0800cba4 <__libc_init_array>:
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	4d0d      	ldr	r5, [pc, #52]	@ (800cbdc <__libc_init_array+0x38>)
 800cba8:	4c0d      	ldr	r4, [pc, #52]	@ (800cbe0 <__libc_init_array+0x3c>)
 800cbaa:	1b64      	subs	r4, r4, r5
 800cbac:	10a4      	asrs	r4, r4, #2
 800cbae:	2600      	movs	r6, #0
 800cbb0:	42a6      	cmp	r6, r4
 800cbb2:	d109      	bne.n	800cbc8 <__libc_init_array+0x24>
 800cbb4:	4d0b      	ldr	r5, [pc, #44]	@ (800cbe4 <__libc_init_array+0x40>)
 800cbb6:	4c0c      	ldr	r4, [pc, #48]	@ (800cbe8 <__libc_init_array+0x44>)
 800cbb8:	f000 f826 	bl	800cc08 <_init>
 800cbbc:	1b64      	subs	r4, r4, r5
 800cbbe:	10a4      	asrs	r4, r4, #2
 800cbc0:	2600      	movs	r6, #0
 800cbc2:	42a6      	cmp	r6, r4
 800cbc4:	d105      	bne.n	800cbd2 <__libc_init_array+0x2e>
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbcc:	4798      	blx	r3
 800cbce:	3601      	adds	r6, #1
 800cbd0:	e7ee      	b.n	800cbb0 <__libc_init_array+0xc>
 800cbd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbd6:	4798      	blx	r3
 800cbd8:	3601      	adds	r6, #1
 800cbda:	e7f2      	b.n	800cbc2 <__libc_init_array+0x1e>
 800cbdc:	0800cc8c 	.word	0x0800cc8c
 800cbe0:	0800cc8c 	.word	0x0800cc8c
 800cbe4:	0800cc8c 	.word	0x0800cc8c
 800cbe8:	0800cc90 	.word	0x0800cc90

0800cbec <memcpy>:
 800cbec:	440a      	add	r2, r1
 800cbee:	4291      	cmp	r1, r2
 800cbf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbf4:	d100      	bne.n	800cbf8 <memcpy+0xc>
 800cbf6:	4770      	bx	lr
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc02:	4291      	cmp	r1, r2
 800cc04:	d1f9      	bne.n	800cbfa <memcpy+0xe>
 800cc06:	bd10      	pop	{r4, pc}

0800cc08 <_init>:
 800cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0a:	bf00      	nop
 800cc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc0e:	bc08      	pop	{r3}
 800cc10:	469e      	mov	lr, r3
 800cc12:	4770      	bx	lr

0800cc14 <_fini>:
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	bf00      	nop
 800cc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1a:	bc08      	pop	{r3}
 800cc1c:	469e      	mov	lr, r3
 800cc1e:	4770      	bx	lr
