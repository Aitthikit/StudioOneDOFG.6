
testnew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a090  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a268  0800a268  0000b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a8  0800a2a8  0000c028  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2a8  0800a2a8  0000b2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2b0  0800a2b0  0000c028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2b0  0800a2b0  0000b2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2b4  0800a2b4  0000b2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800a2b8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000028  0800a2e0  0000c028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800a2e0  0000c504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018071  00000000  00000000  0000c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aed  00000000  00000000  000240c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00026bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b4  00000000  00000000  000280c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b7b  00000000  00000000  0002917c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017eb6  00000000  00000000  00050cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f228  00000000  00000000  00068bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177dd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  00177e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0017dbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a250 	.word	0x0800a250

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	0800a250 	.word	0x0800a250

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000e60:	f002 f8c5 	bl	8002fee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e64:	f000 fb1e 	bl	80014a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e68:	f000 fe76 	bl	8001b58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e6c:	f000 fe4a 	bl	8001b04 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e70:	f000 fbec 	bl	800164c <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000e74:	f000 fc34 	bl	80016e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e78:	f000 fc86 	bl	8001788 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e7c:	f000 fcd2 	bl	8001824 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e80:	f000 fd26 	bl	80018d0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e84:	f000 fdea 	bl	8001a5c <MX_TIM8_Init>
  MX_TIM5_Init();
 8000e88:	f000 fd9a 	bl	80019c0 <MX_TIM5_Init>
  MX_ADC3_Init();
 8000e8c:	f000 fb56 	bl	800153c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000e90:	4887      	ldr	r0, [pc, #540]	@ (80010b0 <main+0x258>)
 8000e92:	f005 fc65 	bl	8006760 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e96:	2100      	movs	r1, #0
 8000e98:	4885      	ldr	r0, [pc, #532]	@ (80010b0 <main+0x258>)
 8000e9a:	f005 fdab 	bl	80069f4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000e9e:	213c      	movs	r1, #60	@ 0x3c
 8000ea0:	4884      	ldr	r0, [pc, #528]	@ (80010b4 <main+0x25c>)
 8000ea2:	f005 ff5f 	bl	8006d64 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000ea6:	4884      	ldr	r0, [pc, #528]	@ (80010b8 <main+0x260>)
 8000ea8:	f005 fcca 	bl	8006840 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8000eac:	217f      	movs	r1, #127	@ 0x7f
 8000eae:	4883      	ldr	r0, [pc, #524]	@ (80010bc <main+0x264>)
 8000eb0:	f003 fc3e 	bl	8004730 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, joyAnalogRead, 40);
 8000eb4:	2228      	movs	r2, #40	@ 0x28
 8000eb6:	4982      	ldr	r1, [pc, #520]	@ (80010c0 <main+0x268>)
 8000eb8:	4880      	ldr	r0, [pc, #512]	@ (80010bc <main+0x264>)
 8000eba:	f002 fd2b 	bl	8003914 <HAL_ADC_Start_DMA>
  _micros = 0;
 8000ebe:	4981      	ldr	r1, [pc, #516]	@ (80010c4 <main+0x26c>)
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
  UARTInterruptConfig();
 8000ecc:	f001 f90c 	bl	80020e8 <UARTInterruptConfig>

	Velocontrol.kp = 170;
 8000ed0:	4b7d      	ldr	r3, [pc, #500]	@ (80010c8 <main+0x270>)
 8000ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80010cc <main+0x274>)
 8000ed4:	619a      	str	r2, [r3, #24]
	Velocontrol.ki = 1;
 8000ed6:	4b7c      	ldr	r3, [pc, #496]	@ (80010c8 <main+0x270>)
 8000ed8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000edc:	61da      	str	r2, [r3, #28]
	Velocontrol.kd = 0;
 8000ede:	4b7a      	ldr	r3, [pc, #488]	@ (80010c8 <main+0x270>)
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
	Velocontrol.T = 0.0001;
 8000ee6:	4b78      	ldr	r3, [pc, #480]	@ (80010c8 <main+0x270>)
 8000ee8:	4a79      	ldr	r2, [pc, #484]	@ (80010d0 <main+0x278>)
 8000eea:	625a      	str	r2, [r3, #36]	@ 0x24

	Poscontrol.kp = 1.4;//2.015
 8000eec:	4b79      	ldr	r3, [pc, #484]	@ (80010d4 <main+0x27c>)
 8000eee:	4a7a      	ldr	r2, [pc, #488]	@ (80010d8 <main+0x280>)
 8000ef0:	619a      	str	r2, [r3, #24]
	Poscontrol.ki = 1.890;//4.5425
 8000ef2:	4b78      	ldr	r3, [pc, #480]	@ (80010d4 <main+0x27c>)
 8000ef4:	4a79      	ldr	r2, [pc, #484]	@ (80010dc <main+0x284>)
 8000ef6:	61da      	str	r2, [r3, #28]
	Poscontrol.kd = 0.0000001;//0.0000021
 8000ef8:	4b76      	ldr	r3, [pc, #472]	@ (80010d4 <main+0x27c>)
 8000efa:	4a79      	ldr	r2, [pc, #484]	@ (80010e0 <main+0x288>)
 8000efc:	621a      	str	r2, [r3, #32]
	Poscontrol.T = 0.0001;
 8000efe:	4b75      	ldr	r3, [pc, #468]	@ (80010d4 <main+0x27c>)
 8000f00:	4a73      	ldr	r2, [pc, #460]	@ (80010d0 <main+0x278>)
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Timer SET
	  int64_t currentTime = micros();
 8000f04:	f000 ff30 	bl	8001d68 <micros>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  static uint64_t timestamp =0;
	  static uint64_t timestamp3 =0;
	  static uint64_t timestamp5 =0;
	  //Timer SET
		if(currentTime > timestamp)
 8000f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f14:	4973      	ldr	r1, [pc, #460]	@ (80010e4 <main+0x28c>)
 8000f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	eb71 0303 	sbcs.w	r3, r1, r3
 8000f20:	d20e      	bcs.n	8000f40 <main+0xe8>
		{
		QEIEncoderPos_Update();
 8000f22:	f000 ff3d 	bl	8001da0 <QEIEncoderPos_Update>
		QEIEncoderVel_Update();
 8000f26:	f000 ffc3 	bl	8001eb0 <QEIEncoderVel_Update>
		timestamp =currentTime + 100;//us
 8000f2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f2e:	f112 0864 	adds.w	r8, r2, #100	@ 0x64
 8000f32:	f143 0900 	adc.w	r9, r3, #0
 8000f36:	4642      	mov	r2, r8
 8000f38:	464b      	mov	r3, r9
 8000f3a:	496a      	ldr	r1, [pc, #424]	@ (80010e4 <main+0x28c>)
 8000f3c:	e9c1 2300 	strd	r2, r3, [r1]
		}
//	  Joy_State();
	ButtonTest[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000f40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f004 fb20 	bl	800558c <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b65      	ldr	r3, [pc, #404]	@ (80010e8 <main+0x290>)
 8000f52:	601a      	str	r2, [r3, #0]
	ButtonTest[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8000f54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f58:	4864      	ldr	r0, [pc, #400]	@ (80010ec <main+0x294>)
 8000f5a:	f004 fb17 	bl	800558c <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b61      	ldr	r3, [pc, #388]	@ (80010e8 <main+0x290>)
 8000f64:	605a      	str	r2, [r3, #4]
	ButtonTest[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000f66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6e:	f004 fb0d 	bl	800558c <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b5c      	ldr	r3, [pc, #368]	@ (80010e8 <main+0x290>)
 8000f78:	609a      	str	r2, [r3, #8]
	ButtonTest[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000f7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f82:	f004 fb03 	bl	800558c <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b57      	ldr	r3, [pc, #348]	@ (80010e8 <main+0x290>)
 8000f8c:	60da      	str	r2, [r3, #12]
	ButtonTest[4] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8000f8e:	2180      	movs	r1, #128	@ 0x80
 8000f90:	4857      	ldr	r0, [pc, #348]	@ (80010f0 <main+0x298>)
 8000f92:	f004 fafb 	bl	800558c <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b53      	ldr	r3, [pc, #332]	@ (80010e8 <main+0x290>)
 8000f9c:	611a      	str	r2, [r3, #16]
	ButtonTest[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000f9e:	2140      	movs	r1, #64	@ 0x40
 8000fa0:	4852      	ldr	r0, [pc, #328]	@ (80010ec <main+0x294>)
 8000fa2:	f004 faf3 	bl	800558c <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b4f      	ldr	r3, [pc, #316]	@ (80010e8 <main+0x290>)
 8000fac:	615a      	str	r2, [r3, #20]
	  switch (state_ALL)
 8000fae:	4b51      	ldr	r3, [pc, #324]	@ (80010f4 <main+0x29c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d8a6      	bhi.n	8000f04 <main+0xac>
 8000fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fbc <main+0x164>)
 8000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbc:	08000fd1 	.word	0x08000fd1
 8000fc0:	08001059 	.word	0x08001059
 8000fc4:	08001087 	.word	0x08001087
 8000fc8:	08001111 	.word	0x08001111
 8000fcc:	08000f05 	.word	0x08000f05
	  			{
	  			case 0://HOME
	  				test = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4846      	ldr	r0, [pc, #280]	@ (80010ec <main+0x294>)
 8000fd4:	f004 fada 	bl	800558c <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b46      	ldr	r3, [pc, #280]	@ (80010f8 <main+0x2a0>)
 8000fde:	601a      	str	r2, [r3, #0]
					if(HOME == 1||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8000fe0:	4b46      	ldr	r3, [pc, #280]	@ (80010fc <main+0x2a4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d006      	beq.n	8000ff6 <main+0x19e>
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4840      	ldr	r0, [pc, #256]	@ (80010ec <main+0x294>)
 8000fec:	f004 face 	bl	800558c <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d124      	bne.n	8001040 <main+0x1e8>
					{
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffe:	f004 fadd 	bl	80055bc <HAL_GPIO_WritePin>
						__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001002:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <main+0x258>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2200      	movs	r2, #0
 8001008:	635a      	str	r2, [r3, #52]	@ 0x34
						HAL_Delay(1000);
 800100a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100e:	f002 f85f 	bl	80030d0 <HAL_Delay>
						HOME = 0;
 8001012:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <main+0x2a4>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(&htim3,0);
 8001018:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <main+0x25c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	@ 0x24
						Count = 0;
 8001020:	4b37      	ldr	r3, [pc, #220]	@ (8001100 <main+0x2a8>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
						QEIdata.Position[NEW] = 0;
 8001026:	4b37      	ldr	r3, [pc, #220]	@ (8001104 <main+0x2ac>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
						QEIdata.Position[OLD] = 0;
 800102c:	4b35      	ldr	r3, [pc, #212]	@ (8001104 <main+0x2ac>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
						state_ALL = 2;
 8001032:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <main+0x29c>)
 8001034:	2202      	movs	r2, #2
 8001036:	601a      	str	r2, [r3, #0]
						state_Tra = 0;
 8001038:	4b33      	ldr	r3, [pc, #204]	@ (8001108 <main+0x2b0>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
						break;
 800103e:	e21b      	b.n	8001478 <main+0x620>
					}
					else
					{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	2101      	movs	r1, #1
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f004 fab8 	bl	80055bc <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 7500);
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <main+0x258>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001054:	635a      	str	r2, [r3, #52]	@ 0x34
					}
	  				break;
 8001056:	e20f      	b.n	8001478 <main+0x620>
	  			case 1://Standby
	  				if(start == 1)//MODBUS HERE
 8001058:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <main+0x2b4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d102      	bne.n	8001066 <main+0x20e>
	  				{
	  					state_ALL = 2;
 8001060:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <main+0x29c>)
 8001062:	2202      	movs	r2, #2
 8001064:	601a      	str	r2, [r3, #0]
	  				}
	  				if(start == 1)//MODBUS HERE
 8001066:	4b29      	ldr	r3, [pc, #164]	@ (800110c <main+0x2b4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <main+0x21c>
					{
						state_ALL = 2;
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <main+0x29c>)
 8001070:	2202      	movs	r2, #2
 8001072:	601a      	str	r2, [r3, #0]
					}
	  				if(start == 1)//HOME Button
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <main+0x2b4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	f040 81f7 	bne.w	800146c <main+0x614>
					{
						state_ALL = 2;
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <main+0x29c>)
 8001080:	2202      	movs	r2, #2
 8001082:	601a      	str	r2, [r3, #0]
					}
	  				break;
 8001084:	e1f2      	b.n	800146c <main+0x614>
	  			case 2://JOY SET
//	  				Trajectory();
	  				Joy_State();
 8001086:	f001 f855 	bl	8002134 <Joy_State>
	  				if(ButtonTest[0] == 0)//HOME Button
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <main+0x290>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <main+0x240>
					{
						state_ALL = 0;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <main+0x29c>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
					}
	  				if(start == 1)
 8001098:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <main+0x2b4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	f040 81e7 	bne.w	8001470 <main+0x618>
	  				{
	  					state_ALL = 3;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <main+0x29c>)
 80010a4:	2203      	movs	r2, #3
 80010a6:	601a      	str	r2, [r3, #0]
	  					start = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <main+0x2b4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
	  				}
	  				break;
 80010ae:	e1df      	b.n	8001470 <main+0x618>
 80010b0:	20000288 	.word	0x20000288
 80010b4:	2000023c 	.word	0x2000023c
 80010b8:	200002d4 	.word	0x200002d4
 80010bc:	20000044 	.word	0x20000044
 80010c0:	20000400 	.word	0x20000400
 80010c4:	200004c8 	.word	0x200004c8
 80010c8:	20000394 	.word	0x20000394
 80010cc:	432a0000 	.word	0x432a0000
 80010d0:	38d1b717 	.word	0x38d1b717
 80010d4:	200003bc 	.word	0x200003bc
 80010d8:	3fb33333 	.word	0x3fb33333
 80010dc:	3ff1eb85 	.word	0x3ff1eb85
 80010e0:	33d6bf95 	.word	0x33d6bf95
 80010e4:	200004d0 	.word	0x200004d0
 80010e8:	20000378 	.word	0x20000378
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48000800 	.word	0x48000800
 80010f4:	20000004 	.word	0x20000004
 80010f8:	2000036c 	.word	0x2000036c
 80010fc:	20000374 	.word	0x20000374
 8001100:	200004a0 	.word	0x200004a0
 8001104:	200004a8 	.word	0x200004a8
 8001108:	200003fc 	.word	0x200003fc
 800110c:	20000370 	.word	0x20000370
	  			case 3://PID
					Trajectory();
 8001110:	f001 fa1a 	bl	8002548 <Trajectory>
					if(Pos <550)
 8001114:	4b9d      	ldr	r3, [pc, #628]	@ (800138c <main+0x534>)
 8001116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b9c      	ldr	r3, [pc, #624]	@ (8001390 <main+0x538>)
 8001120:	f7ff fca8 	bl	8000a74 <__aeabi_dcmplt>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8142 	beq.w	80013b0 <main+0x558>
					{
					  if(currentTime > timestamp3)
 800112c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001130:	4998      	ldr	r1, [pc, #608]	@ (8001394 <main+0x53c>)
 8001132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001136:	4290      	cmp	r0, r2
 8001138:	eb71 0303 	sbcs.w	r3, r1, r3
 800113c:	f080 80fa 	bcs.w	8001334 <main+0x4dc>
					  {
							Poscontrol.Error[NEW] = q_Pos-Pos;
 8001140:	4b95      	ldr	r3, [pc, #596]	@ (8001398 <main+0x540>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9cb 	bl	80004e0 <__aeabi_f2d>
 800114a:	4b90      	ldr	r3, [pc, #576]	@ (800138c <main+0x534>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff f866 	bl	8000220 <__aeabi_dsub>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fcb2 	bl	8000ac4 <__aeabi_d2f>
 8001160:	4603      	mov	r3, r0
 8001162:	4a8e      	ldr	r2, [pc, #568]	@ (800139c <main+0x544>)
 8001164:	60d3      	str	r3, [r2, #12]
							Poscontrol.Output[NEW] = ((((Poscontrol.kp*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[OLD])+(Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*Poscontrol.T))/Poscontrol.T;
 8001166:	4b8d      	ldr	r3, [pc, #564]	@ (800139c <main+0x544>)
 8001168:	ed93 7a06 	vldr	s14, [r3, #24]
 800116c:	4b8b      	ldr	r3, [pc, #556]	@ (800139c <main+0x544>)
 800116e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001176:	4b89      	ldr	r3, [pc, #548]	@ (800139c <main+0x544>)
 8001178:	edd3 6a07 	vldr	s13, [r3, #28]
 800117c:	4b87      	ldr	r3, [pc, #540]	@ (800139c <main+0x544>)
 800117e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001182:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001186:	4b85      	ldr	r3, [pc, #532]	@ (800139c <main+0x544>)
 8001188:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800118c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001194:	4b81      	ldr	r3, [pc, #516]	@ (800139c <main+0x544>)
 8001196:	edd3 7a08 	vldr	s15, [r3, #32]
 800119a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119e:	4b7f      	ldr	r3, [pc, #508]	@ (800139c <main+0x544>)
 80011a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a8:	4b7c      	ldr	r3, [pc, #496]	@ (800139c <main+0x544>)
 80011aa:	edd3 6a06 	vldr	s13, [r3, #24]
 80011ae:	4b7b      	ldr	r3, [pc, #492]	@ (800139c <main+0x544>)
 80011b0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b8:	4b78      	ldr	r3, [pc, #480]	@ (800139c <main+0x544>)
 80011ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80011be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011c2:	4b76      	ldr	r3, [pc, #472]	@ (800139c <main+0x544>)
 80011c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80011c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d0:	4b72      	ldr	r3, [pc, #456]	@ (800139c <main+0x544>)
 80011d2:	edd3 6a08 	vldr	s13, [r3, #32]
 80011d6:	4b71      	ldr	r3, [pc, #452]	@ (800139c <main+0x544>)
 80011d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e4:	4b6d      	ldr	r3, [pc, #436]	@ (800139c <main+0x544>)
 80011e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80011ea:	4b6c      	ldr	r3, [pc, #432]	@ (800139c <main+0x544>)
 80011ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011f8:	4b68      	ldr	r3, [pc, #416]	@ (800139c <main+0x544>)
 80011fa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001202:	4b66      	ldr	r3, [pc, #408]	@ (800139c <main+0x544>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
							Poscontrol.Error[OLDER] = Poscontrol.Error[OLD];
 8001208:	4b64      	ldr	r3, [pc, #400]	@ (800139c <main+0x544>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	4a63      	ldr	r2, [pc, #396]	@ (800139c <main+0x544>)
 800120e:	6153      	str	r3, [r2, #20]
							Poscontrol.Error[OLD] = Poscontrol.Error[NEW];
 8001210:	4b62      	ldr	r3, [pc, #392]	@ (800139c <main+0x544>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a61      	ldr	r2, [pc, #388]	@ (800139c <main+0x544>)
 8001216:	6113      	str	r3, [r2, #16]
							Poscontrol.Output[OLDER] = Poscontrol.Output[OLD];
 8001218:	4b60      	ldr	r3, [pc, #384]	@ (800139c <main+0x544>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a5f      	ldr	r2, [pc, #380]	@ (800139c <main+0x544>)
 800121e:	6093      	str	r3, [r2, #8]
							Poscontrol.Output[OLD] = Poscontrol.Output[NEW];
 8001220:	4b5e      	ldr	r3, [pc, #376]	@ (800139c <main+0x544>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a5d      	ldr	r2, [pc, #372]	@ (800139c <main+0x544>)
 8001226:	6053      	str	r3, [r2, #4]

							Velocontrol.Error[NEW] = Poscontrol.Output[NEW]+q_Velo-speed_fill;
 8001228:	4b5c      	ldr	r3, [pc, #368]	@ (800139c <main+0x544>)
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	4b5c      	ldr	r3, [pc, #368]	@ (80013a0 <main+0x548>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f950 	bl	80004e0 <__aeabi_f2d>
 8001240:	4b58      	ldr	r3, [pc, #352]	@ (80013a4 <main+0x54c>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f7fe ffeb 	bl	8000220 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc37 	bl	8000ac4 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a53      	ldr	r2, [pc, #332]	@ (80013a8 <main+0x550>)
 800125a:	60d3      	str	r3, [r2, #12]
							Velocontrol.Output[NEW] = ((((Velocontrol.kp*Velocontrol.T)+(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[NEW])-(((Velocontrol.kp*Velocontrol.T)+(Velocontrol.kd))*Velocontrol.Error[OLD])+(Velocontrol.kd*Velocontrol.Error[OLDER])+(Velocontrol.Output[OLD]*Velocontrol.T))/Velocontrol.T;
 800125c:	4b52      	ldr	r3, [pc, #328]	@ (80013a8 <main+0x550>)
 800125e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001262:	4b51      	ldr	r3, [pc, #324]	@ (80013a8 <main+0x550>)
 8001264:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126c:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <main+0x550>)
 800126e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001272:	4b4d      	ldr	r3, [pc, #308]	@ (80013a8 <main+0x550>)
 8001274:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001278:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800127c:	4b4a      	ldr	r3, [pc, #296]	@ (80013a8 <main+0x550>)
 800127e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800128a:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <main+0x550>)
 800128c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001294:	4b44      	ldr	r3, [pc, #272]	@ (80013a8 <main+0x550>)
 8001296:	edd3 7a03 	vldr	s15, [r3, #12]
 800129a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800129e:	4b42      	ldr	r3, [pc, #264]	@ (80013a8 <main+0x550>)
 80012a0:	edd3 6a06 	vldr	s13, [r3, #24]
 80012a4:	4b40      	ldr	r3, [pc, #256]	@ (80013a8 <main+0x550>)
 80012a6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012ae:	4b3e      	ldr	r3, [pc, #248]	@ (80013a8 <main+0x550>)
 80012b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80012b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012b8:	4b3b      	ldr	r3, [pc, #236]	@ (80013a8 <main+0x550>)
 80012ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80012be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c6:	4b38      	ldr	r3, [pc, #224]	@ (80013a8 <main+0x550>)
 80012c8:	edd3 6a08 	vldr	s13, [r3, #32]
 80012cc:	4b36      	ldr	r3, [pc, #216]	@ (80013a8 <main+0x550>)
 80012ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80012d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012da:	4b33      	ldr	r3, [pc, #204]	@ (80013a8 <main+0x550>)
 80012dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80012e0:	4b31      	ldr	r3, [pc, #196]	@ (80013a8 <main+0x550>)
 80012e2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ea:	ee77 6a27 	vadd.f32	s13, s14, s15
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <main+0x550>)
 80012f0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f8:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <main+0x550>)
 80012fa:	edc3 7a00 	vstr	s15, [r3]
							Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
 80012fe:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <main+0x550>)
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	4a29      	ldr	r2, [pc, #164]	@ (80013a8 <main+0x550>)
 8001304:	6153      	str	r3, [r2, #20]
							Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
 8001306:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <main+0x550>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	4a27      	ldr	r2, [pc, #156]	@ (80013a8 <main+0x550>)
 800130c:	6113      	str	r3, [r2, #16]
							Velocontrol.Output[OLDER] = Velocontrol.Output[OLD];
 800130e:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <main+0x550>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a25      	ldr	r2, [pc, #148]	@ (80013a8 <main+0x550>)
 8001314:	6093      	str	r3, [r2, #8]
							Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
 8001316:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <main+0x550>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <main+0x550>)
 800131c:	6053      	str	r3, [r2, #4]
					//					if(fabs(Pos_Target-Pos) <= 0.1)start = 0;
							timestamp3 =currentTime + 100;
 800131e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001322:	f112 0a64 	adds.w	sl, r2, #100	@ 0x64
 8001326:	f143 0b00 	adc.w	fp, r3, #0
 800132a:	4652      	mov	r2, sl
 800132c:	465b      	mov	r3, fp
 800132e:	4919      	ldr	r1, [pc, #100]	@ (8001394 <main+0x53c>)
 8001330:	e9c1 2300 	strd	r2, r3, [r1]
					  }
					  if(Velocontrol.Output[NEW] > 0)
 8001334:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <main+0x550>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	dd10      	ble.n	8001366 <main+0x50e>
					  {
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2101      	movs	r1, #1
 8001348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134c:	f004 f936 	bl	80055bc <HAL_GPIO_WritePin>
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Velocontrol.Output[NEW]);
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <main+0x550>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <main+0x554>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800135e:	ee17 2a90 	vmov	r2, s15
 8001362:	635a      	str	r2, [r3, #52]	@ 0x34
 8001364:	e027      	b.n	80013b6 <main+0x55e>
					  }
					  else
					  {
						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001366:	2201      	movs	r2, #1
 8001368:	2101      	movs	r1, #1
 800136a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800136e:	f004 f925 	bl	80055bc <HAL_GPIO_WritePin>
						  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(Velocontrol.Output[NEW]));
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <main+0x550>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eef0 7ae7 	vabs.f32	s15, s15
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <main+0x554>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001384:	ee17 2a90 	vmov	r2, s15
 8001388:	635a      	str	r2, [r3, #52]	@ 0x34
 800138a:	e014      	b.n	80013b6 <main+0x55e>
 800138c:	20000498 	.word	0x20000498
 8001390:	40813000 	.word	0x40813000
 8001394:	200004d8 	.word	0x200004d8
 8001398:	200003ec 	.word	0x200003ec
 800139c:	200003bc 	.word	0x200003bc
 80013a0:	200003f0 	.word	0x200003f0
 80013a4:	20000488 	.word	0x20000488
 80013a8:	20000394 	.word	0x20000394
 80013ac:	20000288 	.word	0x20000288
					  }
					}
					else
					{
						state_ALL = 0;
 80013b0:	4b35      	ldr	r3, [pc, #212]	@ (8001488 <main+0x630>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

					}
	  				if(ButtonTest[0] == 0)//HOME Button
 80013b6:	4b35      	ldr	r3, [pc, #212]	@ (800148c <main+0x634>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d104      	bne.n	80013c8 <main+0x570>
					{
						state_ALL = 0;
 80013be:	4b32      	ldr	r3, [pc, #200]	@ (8001488 <main+0x630>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
						reset();
 80013c4:	f001 f81c 	bl	8002400 <reset>
					}
	  				if(fabs(Pos-Pos_Target) <= 0.2)
 80013c8:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <main+0x638>)
 80013ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80013ce:	4b31      	ldr	r3, [pc, #196]	@ (8001494 <main+0x63c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f884 	bl	80004e0 <__aeabi_f2d>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4620      	mov	r0, r4
 80013de:	4629      	mov	r1, r5
 80013e0:	f7fe ff1e 	bl	8000220 <__aeabi_dsub>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	60ba      	str	r2, [r7, #8]
 80013ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	a323      	add	r3, pc, #140	@ (adr r3, 8001480 <main+0x628>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fa:	f7ff fb45 	bl	8000a88 <__aeabi_dcmple>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d02f      	beq.n	8001464 <main+0x60c>
	  				{
	  					if(CountSetpoint < 100)
 8001404:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <main+0x640>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b63      	cmp	r3, #99	@ 0x63
 800140a:	dc1b      	bgt.n	8001444 <main+0x5ec>
	  					{
	  						if(currentTime > timestamp5)
 800140c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001410:	4922      	ldr	r1, [pc, #136]	@ (800149c <main+0x644>)
 8001412:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001416:	4290      	cmp	r0, r2
 8001418:	eb71 0303 	sbcs.w	r3, r1, r3
 800141c:	d22a      	bcs.n	8001474 <main+0x61c>
						  {
	  							CountSetpoint++;
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <main+0x640>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <main+0x640>)
 8001426:	6013      	str	r3, [r2, #0]
	  							timestamp5 =currentTime + 1000;
 8001428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800142c:	f512 717a 	adds.w	r1, r2, #1000	@ 0x3e8
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	f143 0300 	adc.w	r3, r3, #0
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800143c:	4917      	ldr	r1, [pc, #92]	@ (800149c <main+0x644>)
 800143e:	e9c1 2300 	strd	r2, r3, [r1]
	  				}
	  				else
	  				{
	  					CountSetpoint = 0;
	  				}
	  				break;
 8001442:	e017      	b.n	8001474 <main+0x61c>
							state_ALL = 2;
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <main+0x630>)
 8001446:	2202      	movs	r2, #2
 8001448:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2101      	movs	r1, #1
 800144e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001452:	f004 f8b3 	bl	80055bc <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <main+0x648>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2200      	movs	r2, #0
 800145c:	635a      	str	r2, [r3, #52]	@ 0x34
							reset();
 800145e:	f000 ffcf 	bl	8002400 <reset>
	  				break;
 8001462:	e007      	b.n	8001474 <main+0x61c>
	  					CountSetpoint = 0;
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <main+0x640>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
	  				break;
 800146a:	e003      	b.n	8001474 <main+0x61c>
	  				break;
 800146c:	bf00      	nop
 800146e:	e549      	b.n	8000f04 <main+0xac>
	  				break;
 8001470:	bf00      	nop
 8001472:	e547      	b.n	8000f04 <main+0xac>
	  				break;
 8001474:	bf00      	nop
 8001476:	e545      	b.n	8000f04 <main+0xac>
  {
 8001478:	e544      	b.n	8000f04 <main+0xac>
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	9999999a 	.word	0x9999999a
 8001484:	3fc99999 	.word	0x3fc99999
 8001488:	20000004 	.word	0x20000004
 800148c:	20000378 	.word	0x20000378
 8001490:	20000498 	.word	0x20000498
 8001494:	20000008 	.word	0x20000008
 8001498:	20000390 	.word	0x20000390
 800149c:	200004e0 	.word	0x200004e0
 80014a0:	20000288 	.word	0x20000288

080014a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b094      	sub	sp, #80	@ 0x50
 80014a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0318 	add.w	r3, r7, #24
 80014ae:	2238      	movs	r2, #56	@ 0x38
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f008 fea0 	bl	800a1f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f004 f8c2 	bl	8005650 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d6:	2340      	movs	r3, #64	@ 0x40
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014da:	2302      	movs	r3, #2
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014de:	2302      	movs	r3, #2
 80014e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014e2:	2304      	movs	r3, #4
 80014e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014e6:	2355      	movs	r3, #85	@ 0x55
 80014e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	4618      	mov	r0, r3
 80014fc:	f004 f95c 	bl	80057b8 <HAL_RCC_OscConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001506:	f001 fac3 	bl	8002a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150a:	230f      	movs	r3, #15
 800150c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150e:	2303      	movs	r3, #3
 8001510:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2104      	movs	r1, #4
 8001522:	4618      	mov	r0, r3
 8001524:	f004 fc5a 	bl	8005ddc <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800152e:	f001 faaf 	bl	8002a90 <Error_Handler>
  }
}
 8001532:	bf00      	nop
 8001534:	3750      	adds	r7, #80	@ 0x50
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2220      	movs	r2, #32
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f008 fe4f 	bl	800a1f8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800155a:	4b38      	ldr	r3, [pc, #224]	@ (800163c <MX_ADC3_Init+0x100>)
 800155c:	4a38      	ldr	r2, [pc, #224]	@ (8001640 <MX_ADC3_Init+0x104>)
 800155e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001560:	4b36      	ldr	r3, [pc, #216]	@ (800163c <MX_ADC3_Init+0x100>)
 8001562:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001566:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001568:	4b34      	ldr	r3, [pc, #208]	@ (800163c <MX_ADC3_Init+0x100>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800156e:	4b33      	ldr	r3, [pc, #204]	@ (800163c <MX_ADC3_Init+0x100>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001574:	4b31      	ldr	r3, [pc, #196]	@ (800163c <MX_ADC3_Init+0x100>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800157a:	4b30      	ldr	r3, [pc, #192]	@ (800163c <MX_ADC3_Init+0x100>)
 800157c:	2201      	movs	r2, #1
 800157e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <MX_ADC3_Init+0x100>)
 8001582:	2204      	movs	r2, #4
 8001584:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <MX_ADC3_Init+0x100>)
 8001588:	2200      	movs	r2, #0
 800158a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <MX_ADC3_Init+0x100>)
 800158e:	2201      	movs	r2, #1
 8001590:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8001592:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <MX_ADC3_Init+0x100>)
 8001594:	2202      	movs	r2, #2
 8001596:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <MX_ADC3_Init+0x100>)
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a0:	4b26      	ldr	r3, [pc, #152]	@ (800163c <MX_ADC3_Init+0x100>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a6:	4b25      	ldr	r3, [pc, #148]	@ (800163c <MX_ADC3_Init+0x100>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <MX_ADC3_Init+0x100>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <MX_ADC3_Init+0x100>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <MX_ADC3_Init+0x100>)
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015c2:	481e      	ldr	r0, [pc, #120]	@ (800163c <MX_ADC3_Init+0x100>)
 80015c4:	f001 ffea 	bl	800359c <HAL_ADC_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80015ce:	f001 fa5f 	bl	8002a90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80015d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4817      	ldr	r0, [pc, #92]	@ (800163c <MX_ADC3_Init+0x100>)
 80015de:	f003 f909 	bl	80047f4 <HAL_ADCEx_MultiModeConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80015e8:	f001 fa52 	bl	8002a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ec:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <MX_ADC3_Init+0x108>)
 80015ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f0:	2306      	movs	r3, #6
 80015f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015f8:	237f      	movs	r3, #127	@ 0x7f
 80015fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fc:	2304      	movs	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <MX_ADC3_Init+0x100>)
 800160a:	f002 fa75 	bl	8003af8 <HAL_ADC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001614:	f001 fa3c 	bl	8002a90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <MX_ADC3_Init+0x10c>)
 800161a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800161c:	230c      	movs	r3, #12
 800161e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_ADC3_Init+0x100>)
 8001626:	f002 fa67 	bl	8003af8 <HAL_ADC_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 8001630:	f001 fa2e 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	@ 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000044 	.word	0x20000044
 8001640:	50000400 	.word	0x50000400
 8001644:	04300002 	.word	0x04300002
 8001648:	14f00020 	.word	0x14f00020

0800164c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001652:	4a22      	ldr	r2, [pc, #136]	@ (80016dc <MX_LPUART1_UART_Init+0x90>)
 8001654:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 800168a:	2200      	movs	r2, #0
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800168e:	4812      	ldr	r0, [pc, #72]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 8001690:	f006 fd14 	bl	80080bc <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800169a:	f001 f9f9 	bl	8002a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 80016a2:	f008 fcde 	bl	800a062 <HAL_UARTEx_SetTxFifoThreshold>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016ac:	f001 f9f0 	bl	8002a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 80016b4:	f008 fd13 	bl	800a0de <HAL_UARTEx_SetRxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016be:	f001 f9e7 	bl	8002a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_LPUART1_UART_Init+0x8c>)
 80016c4:	f008 fc94 	bl	8009ff0 <HAL_UARTEx_DisableFifoMode>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016ce:	f001 f9df 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000110 	.word	0x20000110
 80016dc:	40008000 	.word	0x40008000

080016e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <MX_TIM1_Init+0xa0>)
 8001700:	4a20      	ldr	r2, [pc, #128]	@ (8001784 <MX_TIM1_Init+0xa4>)
 8001702:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <MX_TIM1_Init+0xa0>)
 8001706:	2200      	movs	r2, #0
 8001708:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <MX_TIM1_Init+0xa0>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <MX_TIM1_Init+0xa0>)
 8001712:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001716:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <MX_TIM1_Init+0xa0>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800171e:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <MX_TIM1_Init+0xa0>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <MX_TIM1_Init+0xa0>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800172a:	4815      	ldr	r0, [pc, #84]	@ (8001780 <MX_TIM1_Init+0xa0>)
 800172c:	f004 ffc0 	bl	80066b0 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001736:	f001 f9ab 	bl	8002a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	480e      	ldr	r0, [pc, #56]	@ (8001780 <MX_TIM1_Init+0xa0>)
 8001748:	f005 fdfe 	bl	8007348 <HAL_TIM_ConfigClockSource>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001752:	f001 f99d 	bl	8002a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	@ (8001780 <MX_TIM1_Init+0xa0>)
 8001768:	f006 fbcc 	bl	8007f04 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001772:	f001 f98d 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200001a4 	.word	0x200001a4
 8001784:	40012c00 	.word	0x40012c00

08001788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <MX_TIM2_Init+0x98>)
 80017a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <MX_TIM2_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <MX_TIM2_Init+0x98>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MX_TIM2_Init+0x98>)
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <MX_TIM2_Init+0x98>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <MX_TIM2_Init+0x98>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ce:	4814      	ldr	r0, [pc, #80]	@ (8001820 <MX_TIM2_Init+0x98>)
 80017d0:	f004 ff6e 	bl	80066b0 <HAL_TIM_Base_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017da:	f001 f959 	bl	8002a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	480d      	ldr	r0, [pc, #52]	@ (8001820 <MX_TIM2_Init+0x98>)
 80017ec:	f005 fdac 	bl	8007348 <HAL_TIM_ConfigClockSource>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017f6:	f001 f94b 	bl	8002a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	@ (8001820 <MX_TIM2_Init+0x98>)
 8001808:	f006 fb7c 	bl	8007f04 <HAL_TIMEx_MasterConfigSynchronization>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001812:	f001 f93d 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200001f0 	.word	0x200001f0

08001824 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	2224      	movs	r2, #36	@ 0x24
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f008 fce0 	bl	800a1f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 8001844:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <MX_TIM3_Init+0xa8>)
 8001846:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 57343;
 8001854:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 8001856:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 800185a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001868:	2303      	movs	r3, #3
 800186a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001870:	2301      	movs	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 8001894:	f005 f9c0 	bl	8006c18 <HAL_TIM_Encoder_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800189e:	f001 f8f7 	bl	8002a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018aa:	463b      	mov	r3, r7
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	@ (80018c8 <MX_TIM3_Init+0xa4>)
 80018b0:	f006 fb28 	bl	8007f04 <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018ba:	f001 f8e9 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	3730      	adds	r7, #48	@ 0x30
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000023c 	.word	0x2000023c
 80018cc:	40000400 	.word	0x40000400

080018d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	@ 0x38
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f0:	463b      	mov	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001902:	4b2d      	ldr	r3, [pc, #180]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 8001904:	4a2d      	ldr	r2, [pc, #180]	@ (80019bc <MX_TIM4_Init+0xec>)
 8001906:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001908:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 800190a:	2201      	movs	r2, #1
 800190c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42499;
 8001914:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 8001916:	f24a 6203 	movw	r2, #42499	@ 0xa603
 800191a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001928:	4823      	ldr	r0, [pc, #140]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 800192a:	f004 fec1 	bl	80066b0 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001934:	f001 f8ac 	bl	8002a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001942:	4619      	mov	r1, r3
 8001944:	481c      	ldr	r0, [pc, #112]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 8001946:	f005 fcff 	bl	8007348 <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001950:	f001 f89e 	bl	8002a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001954:	4818      	ldr	r0, [pc, #96]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 8001956:	f004 ffeb 	bl	8006930 <HAL_TIM_PWM_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001960:	f001 f896 	bl	8002a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	4811      	ldr	r0, [pc, #68]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 8001974:	f006 fac6 	bl	8007f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800197e:	f001 f887 	bl	8002a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001982:	2360      	movs	r3, #96	@ 0x60
 8001984:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	2200      	movs	r2, #0
 8001996:	4619      	mov	r1, r3
 8001998:	4807      	ldr	r0, [pc, #28]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 800199a:	f005 fbc1 	bl	8007120 <HAL_TIM_PWM_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80019a4:	f001 f874 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019a8:	4803      	ldr	r0, [pc, #12]	@ (80019b8 <MX_TIM4_Init+0xe8>)
 80019aa:	f001 fa3f 	bl	8002e2c <HAL_TIM_MspPostInit>

}
 80019ae:	bf00      	nop
 80019b0:	3738      	adds	r7, #56	@ 0x38
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000288 	.word	0x20000288
 80019bc:	40000800 	.word	0x40000800

080019c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019de:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <MX_TIM5_Init+0x94>)
 80019e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a58 <MX_TIM5_Init+0x98>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <MX_TIM5_Init+0x94>)
 80019e6:	22a9      	movs	r2, #169	@ 0xa9
 80019e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <MX_TIM5_Init+0x94>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80019f0:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <MX_TIM5_Init+0x94>)
 80019f2:	f04f 32ff 	mov.w	r2, #4294967295
 80019f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <MX_TIM5_Init+0x94>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <MX_TIM5_Init+0x94>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a04:	4813      	ldr	r0, [pc, #76]	@ (8001a54 <MX_TIM5_Init+0x94>)
 8001a06:	f004 fe53 	bl	80066b0 <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001a10:	f001 f83e 	bl	8002a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <MX_TIM5_Init+0x94>)
 8001a22:	f005 fc91 	bl	8007348 <HAL_TIM_ConfigClockSource>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001a2c:	f001 f830 	bl	8002a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a30:	2320      	movs	r3, #32
 8001a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_TIM5_Init+0x94>)
 8001a3e:	f006 fa61 	bl	8007f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a48:	f001 f822 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200002d4 	.word	0x200002d4
 8001a58:	40000c00 	.word	0x40000c00

08001a5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a7a:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001a7c:	4a20      	ldr	r2, [pc, #128]	@ (8001b00 <MX_TIM8_Init+0xa4>)
 8001a7e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001a82:	22a9      	movs	r2, #169	@ 0xa9
 8001a84:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a92:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001aa6:	4815      	ldr	r0, [pc, #84]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001aa8:	f004 fe02 	bl	80066b0 <HAL_TIM_Base_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001ab2:	f000 ffed 	bl	8002a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480e      	ldr	r0, [pc, #56]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001ac4:	f005 fc40 	bl	8007348 <HAL_TIM_ConfigClockSource>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001ace:	f000 ffdf 	bl	8002a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4806      	ldr	r0, [pc, #24]	@ (8001afc <MX_TIM8_Init+0xa0>)
 8001ae4:	f006 fa0e 	bl	8007f04 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001aee:	f000 ffcf 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000320 	.word	0x20000320
 8001b00:	40013400 	.word	0x40013400

08001b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <MX_DMA_Init+0x50>)
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0e:	4a11      	ldr	r2, [pc, #68]	@ (8001b54 <MX_DMA_Init+0x50>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <MX_DMA_Init+0x50>)
 8001b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b22:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <MX_DMA_Init+0x50>)
 8001b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b26:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <MX_DMA_Init+0x50>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <MX_DMA_Init+0x50>)
 8001b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	200c      	movs	r0, #12
 8001b40:	f003 f83b 	bl	8004bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b44:	200c      	movs	r0, #12
 8001b46:	f003 f852 	bl	8004bee <HAL_NVIC_EnableIRQ>

}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000

08001b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	@ 0x28
 8001b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	4a6d      	ldr	r2, [pc, #436]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7a:	4b6b      	ldr	r3, [pc, #428]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b86:	4b68      	ldr	r3, [pc, #416]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	4a67      	ldr	r2, [pc, #412]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b92:	4b65      	ldr	r3, [pc, #404]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b62      	ldr	r3, [pc, #392]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	4a61      	ldr	r2, [pc, #388]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001baa:	4b5f      	ldr	r3, [pc, #380]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	4a5b      	ldr	r2, [pc, #364]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc2:	4b59      	ldr	r3, [pc, #356]	@ (8001d28 <MX_GPIO_Init+0x1d0>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LAMP1_Pin|LAMP2_Pin|PULL_Pin|PUSH_Pin
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001bd4:	4855      	ldr	r0, [pc, #340]	@ (8001d2c <MX_GPIO_Init+0x1d4>)
 8001bd6:	f003 fcf1 	bl	80055bc <HAL_GPIO_WritePin>
                          |Vacuum_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DirectionMotor_Pin|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2123      	movs	r1, #35	@ 0x23
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be2:	f003 fceb 	bl	80055bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	484b      	ldr	r0, [pc, #300]	@ (8001d2c <MX_GPIO_Init+0x1d4>)
 8001bfe:	f003 fb43 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWJoy_Pin Floor4_Pin */
  GPIO_InitStruct.Pin = SWJoy_Pin|Floor4_Pin;
 8001c02:	2381      	movs	r3, #129	@ 0x81
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	4845      	ldr	r0, [pc, #276]	@ (8001d2c <MX_GPIO_Init+0x1d4>)
 8001c16:	f003 fb37 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Read_Pin */
  GPIO_InitStruct.Pin = Emergency_Read_Pin;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Read_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	483f      	ldr	r0, [pc, #252]	@ (8001d2c <MX_GPIO_Init+0x1d4>)
 8001c2e:	f003 fb2b 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAMP1_Pin LAMP2_Pin PULL_Pin PUSH_Pin
                           Vacuum_Pin */
  GPIO_InitStruct.Pin = LAMP1_Pin|LAMP2_Pin|PULL_Pin|PUSH_Pin
 8001c32:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8001c36:	617b      	str	r3, [r7, #20]
                          |Vacuum_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4838      	ldr	r0, [pc, #224]	@ (8001d2c <MX_GPIO_Init+0x1d4>)
 8001c4c:	f003 fb1c 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : DirectionMotor_Pin PA1 LD2_Pin */
  GPIO_InitStruct.Pin = DirectionMotor_Pin|GPIO_PIN_1|LD2_Pin;
 8001c50:	2323      	movs	r3, #35	@ 0x23
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6a:	f003 fb0d 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LeadSW1_Pin */
  GPIO_InitStruct.Pin = LeadSW1_Pin;
 8001c6e:	2310      	movs	r3, #16
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeadSW1_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c84:	f003 fb00 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LeadSW2_Pin */
  GPIO_InitStruct.Pin = LeadSW2_Pin;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeadSW2_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4825      	ldr	r0, [pc, #148]	@ (8001d30 <MX_GPIO_Init+0x1d8>)
 8001c9c:	f003 faf4 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : Floor1_Pin Floor5_Pin */
  GPIO_InitStruct.Pin = Floor1_Pin|Floor5_Pin;
 8001ca0:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	481e      	ldr	r0, [pc, #120]	@ (8001d30 <MX_GPIO_Init+0x1d8>)
 8001cb6:	f003 fae7 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : Floor2_Pin Floor3_Pin HomeButton_Pin */
  GPIO_InitStruct.Pin = Floor2_Pin|Floor3_Pin|HomeButton_Pin;
 8001cba:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd2:	f003 fad9 	bl	8005288 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lowerprox_Pin UpperProx_Pin */
  GPIO_InitStruct.Pin = Lowerprox_Pin|UpperProx_Pin;
 8001cd6:	2330      	movs	r3, #48	@ 0x30
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4811      	ldr	r0, [pc, #68]	@ (8001d30 <MX_GPIO_Init+0x1d8>)
 8001cec:	f003 facc 	bl	8005288 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	200a      	movs	r0, #10
 8001cf6:	f002 ff60 	bl	8004bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cfa:	200a      	movs	r0, #10
 8001cfc:	f002 ff77 	bl	8004bee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	2017      	movs	r0, #23
 8001d06:	f002 ff58 	bl	8004bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d0a:	2017      	movs	r0, #23
 8001d0c:	f002 ff6f 	bl	8004bee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	2028      	movs	r0, #40	@ 0x28
 8001d16:	f002 ff50 	bl	8004bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d1a:	2028      	movs	r0, #40	@ 0x28
 8001d1c:	f002 ff67 	bl	8004bee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	@ 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	48000800 	.word	0x48000800
 8001d30:	48000400 	.word	0x48000400

08001d34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d34:	b4b0      	push	{r4, r5, r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a08      	ldr	r2, [pc, #32]	@ (8001d60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d108      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 8001d44:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	1e54      	subs	r4, r2, #1
 8001d4c:	f143 0500 	adc.w	r5, r3, #0
 8001d50:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d52:	e9c3 4500 	strd	r4, r5, [r3]
}
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bcb0      	pop	{r4, r5, r7}
 8001d5e:	4770      	bx	lr
 8001d60:	200002d4 	.word	0x200002d4
 8001d64:	200004c8 	.word	0x200004c8

08001d68 <micros>:

uint64_t micros()
{
 8001d68:	b4b0      	push	{r4, r5, r7}
 8001d6a:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <micros+0x2c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	2200      	movs	r2, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	4611      	mov	r1, r2
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <micros+0x30>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	1884      	adds	r4, r0, r2
 8001d80:	eb41 0503 	adc.w	r5, r1, r3
 8001d84:	4622      	mov	r2, r4
 8001d86:	462b      	mov	r3, r5
}
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bcb0      	pop	{r4, r5, r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200002d4 	.word	0x200002d4
 8001d98:	200004c8 	.word	0x200004c8
 8001d9c:	00000000 	.word	0x00000000

08001da0 <QEIEncoderPos_Update>:

void QEIEncoderPos_Update()
{
 8001da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001da4:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8001da6:	4b3a      	ldr	r3, [pc, #232]	@ (8001e90 <QEIEncoderPos_Update+0xf0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b39      	ldr	r3, [pc, #228]	@ (8001e94 <QEIEncoderPos_Update+0xf4>)
 8001db0:	601a      	str	r2, [r3, #0]
	if(Count >= 0)
 8001db2:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <QEIEncoderPos_Update+0xf8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db25      	blt.n	8001e06 <QEIEncoderPos_Update+0x66>
	{
		Pos = ((QEIReadRaw+(Count*57344))*25*3.14)/8192;
 8001dba:	4b37      	ldr	r3, [pc, #220]	@ (8001e98 <QEIEncoderPos_Update+0xf8>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	035b      	lsls	r3, r3, #13
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <QEIEncoderPos_Update+0xf4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	441a      	add	r2, r3
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009a      	lsls	r2, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb6f 	bl	80004bc <__aeabi_i2d>
 8001dde:	a32a      	add	r3, pc, #168	@ (adr r3, 8001e88 <QEIEncoderPos_Update+0xe8>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	f7fe fbd4 	bl	8000590 <__aeabi_dmul>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <QEIEncoderPos_Update+0xfc>)
 8001df6:	f7fe fcf5 	bl	80007e4 <__aeabi_ddiv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4928      	ldr	r1, [pc, #160]	@ (8001ea0 <QEIEncoderPos_Update+0x100>)
 8001e00:	e9c1 2300 	strd	r2, r3, [r1]
	}
	else
	{
		Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
	}
}
 8001e04:	e03d      	b.n	8001e82 <QEIEncoderPos_Update+0xe2>
		Pos	= ((QEIReadRaw-(fabs(Count)*57344))*25*3.14)/8192;
 8001e06:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <QEIEncoderPos_Update+0xf4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb56 	bl	80004bc <__aeabi_i2d>
 8001e10:	4680      	mov	r8, r0
 8001e12:	4689      	mov	r9, r1
 8001e14:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <QEIEncoderPos_Update+0xf8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb4f 	bl	80004bc <__aeabi_i2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4614      	mov	r4, r2
 8001e24:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <QEIEncoderPos_Update+0x104>)
 8001e2e:	4620      	mov	r0, r4
 8001e30:	4629      	mov	r1, r5
 8001e32:	f7fe fbad 	bl	8000590 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	f7fe f9ef 	bl	8000220 <__aeabi_dsub>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <QEIEncoderPos_Update+0x108>)
 8001e50:	f7fe fb9e 	bl	8000590 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e88 <QEIEncoderPos_Update+0xe8>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fb95 	bl	8000590 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <QEIEncoderPos_Update+0xfc>)
 8001e74:	f7fe fcb6 	bl	80007e4 <__aeabi_ddiv>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4908      	ldr	r1, [pc, #32]	@ (8001ea0 <QEIEncoderPos_Update+0x100>)
 8001e7e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001e82:	bf00      	nop
 8001e84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e88:	51eb851f 	.word	0x51eb851f
 8001e8c:	40091eb8 	.word	0x40091eb8
 8001e90:	2000023c 	.word	0x2000023c
 8001e94:	200004a4 	.word	0x200004a4
 8001e98:	200004a0 	.word	0x200004a0
 8001e9c:	40c00000 	.word	0x40c00000
 8001ea0:	20000498 	.word	0x20000498
 8001ea4:	40ec0000 	.word	0x40ec0000
 8001ea8:	40390000 	.word	0x40390000
 8001eac:	00000000 	.word	0x00000000

08001eb0 <QEIEncoderVel_Update>:
void QEIEncoderVel_Update()
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 8001eb6:	f7ff ff57 	bl	8001d68 <micros>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	497e      	ldr	r1, [pc, #504]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001ec0:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8001ec4:	4b7d      	ldr	r3, [pc, #500]	@ (80020bc <QEIEncoderVel_Update+0x20c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	4a7b      	ldr	r2, [pc, #492]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001ecc:	6013      	str	r3, [r2, #0]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 8192;
 8001ece:	4b7a      	ldr	r3, [pc, #488]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ede:	4b76      	ldr	r3, [pc, #472]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001ee0:	edc3 7a06 	vstr	s15, [r3, #24]
//calculate dx
int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001ee4:	4b74      	ldr	r3, [pc, #464]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b73      	ldr	r3, [pc, #460]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	607b      	str	r3, [r7, #4]
//Handle Warp around
if(diffPosition > 28672)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001ef6:	dd08      	ble.n	8001f0a <QEIEncoderVel_Update+0x5a>
{
diffPosition -=57344;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f5a3 4360 	sub.w	r3, r3, #57344	@ 0xe000
 8001efe:	607b      	str	r3, [r7, #4]
Count-=1;
 8001f00:	4b6f      	ldr	r3, [pc, #444]	@ (80020c0 <QEIEncoderVel_Update+0x210>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	4a6e      	ldr	r2, [pc, #440]	@ (80020c0 <QEIEncoderVel_Update+0x210>)
 8001f08:	6013      	str	r3, [r2, #0]
}
if(diffPosition < -28672)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f513 4fe0 	cmn.w	r3, #28672	@ 0x7000
 8001f10:	da08      	bge.n	8001f24 <QEIEncoderVel_Update+0x74>
{
diffPosition +=57344;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001f18:	607b      	str	r3, [r7, #4]
Count+=1;
 8001f1a:	4b69      	ldr	r3, [pc, #420]	@ (80020c0 <QEIEncoderVel_Update+0x210>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4a67      	ldr	r2, [pc, #412]	@ (80020c0 <QEIEncoderVel_Update+0x210>)
 8001f22:	6013      	str	r3, [r2, #0]
}

//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8001f24:	4b64      	ldr	r3, [pc, #400]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001f26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f2a:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001f2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f30:	1a84      	subs	r4, r0, r2
 8001f32:	eb61 0503 	sbc.w	r5, r1, r3
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe faf3 	bl	8000524 <__aeabi_ul2d>
 8001f3e:	a356      	add	r3, pc, #344	@ (adr r3, 8002098 <QEIEncoderVel_Update+0x1e8>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb24 	bl	8000590 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fdb8 	bl	8000ac4 <__aeabi_d2f>
 8001f54:	4603      	mov	r3, r0
 8001f56:	603b      	str	r3, [r7, #0]
//calculate anglar velocity
QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f62:	ed97 7a00 	vldr	s14, [r7]
 8001f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f6a:	4b53      	ldr	r3, [pc, #332]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001f6c:	edc3 7a07 	vstr	s15, [r3, #28]
RPSspeed = ((QEIdata.QEIAngularVelocity)/8192)*60;
 8001f70:	4b51      	ldr	r3, [pc, #324]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001f72:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f76:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80020c4 <QEIEncoderVel_Update+0x214>
 8001f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f7e:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80020c8 <QEIEncoderVel_Update+0x218>
 8001f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8a:	ee17 3a90 	vmov	r3, s15
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	4b4e      	ldr	r3, [pc, #312]	@ (80020cc <QEIEncoderVel_Update+0x21c>)
 8001f92:	801a      	strh	r2, [r3, #0]
speed = ((QEIdata.QEIAngularVelocity)/8192)*12.5*2*3.14;
 8001f94:	4b48      	ldr	r3, [pc, #288]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8001f96:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f9a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80020c4 <QEIEncoderVel_Update+0x214>
 8001f9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fa2:	ee16 0a90 	vmov	r0, s13
 8001fa6:	f7fe fa9b 	bl	80004e0 <__aeabi_f2d>
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	4b48      	ldr	r3, [pc, #288]	@ (80020d0 <QEIEncoderVel_Update+0x220>)
 8001fb0:	f7fe faee 	bl	8000590 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	f7fe f930 	bl	8000224 <__adddf3>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	a334      	add	r3, pc, #208	@ (adr r3, 80020a0 <QEIEncoderVel_Update+0x1f0>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	f7fe fadd 	bl	8000590 <__aeabi_dmul>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	493e      	ldr	r1, [pc, #248]	@ (80020d4 <QEIEncoderVel_Update+0x224>)
 8001fdc:	e9c1 2300 	strd	r2, r3, [r1]
speed_fill = (0.969*speed_fill_1)+(0.0155*speed)+(0.0155*speed_1);
 8001fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80020d8 <QEIEncoderVel_Update+0x228>)
 8001fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe6:	a330      	add	r3, pc, #192	@ (adr r3, 80020a8 <QEIEncoderVel_Update+0x1f8>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fad0 	bl	8000590 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	461d      	mov	r5, r3
 8001ff8:	4b36      	ldr	r3, [pc, #216]	@ (80020d4 <QEIEncoderVel_Update+0x224>)
 8001ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ffe:	a32c      	add	r3, pc, #176	@ (adr r3, 80020b0 <QEIEncoderVel_Update+0x200>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fac4 	bl	8000590 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4620      	mov	r0, r4
 800200e:	4629      	mov	r1, r5
 8002010:	f7fe f908 	bl	8000224 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4614      	mov	r4, r2
 800201a:	461d      	mov	r5, r3
 800201c:	4b2f      	ldr	r3, [pc, #188]	@ (80020dc <QEIEncoderVel_Update+0x22c>)
 800201e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002022:	a323      	add	r3, pc, #140	@ (adr r3, 80020b0 <QEIEncoderVel_Update+0x200>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe fab2 	bl	8000590 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	f7fe f8f6 	bl	8000224 <__adddf3>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4928      	ldr	r1, [pc, #160]	@ (80020e0 <QEIEncoderVel_Update+0x230>)
 800203e:	e9c1 2300 	strd	r2, r3, [r1]
speed_1 = speed;
 8002042:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <QEIEncoderVel_Update+0x224>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	4924      	ldr	r1, [pc, #144]	@ (80020dc <QEIEncoderVel_Update+0x22c>)
 800204a:	e9c1 2300 	strd	r2, r3, [r1]
speed_fill_1 = speed_fill;
 800204e:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <QEIEncoderVel_Update+0x230>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	4920      	ldr	r1, [pc, #128]	@ (80020d8 <QEIEncoderVel_Update+0x228>)
 8002056:	e9c1 2300 	strd	r2, r3, [r1]
if(speed_fill>MAXspeed)
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <QEIEncoderVel_Update+0x230>)
 800205c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002060:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <QEIEncoderVel_Update+0x234>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fd23 	bl	8000ab0 <__aeabi_dcmpgt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <QEIEncoderVel_Update+0x1cc>
{
	MAXspeed = speed_fill;
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <QEIEncoderVel_Update+0x230>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	491b      	ldr	r1, [pc, #108]	@ (80020e4 <QEIEncoderVel_Update+0x234>)
 8002078:	e9c1 2300 	strd	r2, r3, [r1]
}
//store value for next loop
QEIdata.Position[OLD] = QEIdata.Position[NEW];
 800207c:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0d      	ldr	r2, [pc, #52]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8002082:	6053      	str	r3, [r2, #4]
QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 8002086:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800208a:	490b      	ldr	r1, [pc, #44]	@ (80020b8 <QEIEncoderVel_Update+0x208>)
 800208c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bdb0      	pop	{r4, r5, r7, pc}
 8002098:	a0b5ed8d 	.word	0xa0b5ed8d
 800209c:	3eb0c6f7 	.word	0x3eb0c6f7
 80020a0:	51eb851f 	.word	0x51eb851f
 80020a4:	40091eb8 	.word	0x40091eb8
 80020a8:	49ba5e35 	.word	0x49ba5e35
 80020ac:	3fef020c 	.word	0x3fef020c
 80020b0:	c8b43958 	.word	0xc8b43958
 80020b4:	3f8fbe76 	.word	0x3f8fbe76
 80020b8:	200004a8 	.word	0x200004a8
 80020bc:	2000023c 	.word	0x2000023c
 80020c0:	200004a0 	.word	0x200004a0
 80020c4:	46000000 	.word	0x46000000
 80020c8:	42700000 	.word	0x42700000
 80020cc:	2000046a 	.word	0x2000046a
 80020d0:	40290000 	.word	0x40290000
 80020d4:	20000470 	.word	0x20000470
 80020d8:	20000490 	.word	0x20000490
 80020dc:	20000478 	.word	0x20000478
 80020e0:	20000488 	.word	0x20000488
 80020e4:	20000480 	.word	0x20000480

080020e8 <UARTInterruptConfig>:

void UARTInterruptConfig()
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Rx,4);
 80020ec:	2204      	movs	r2, #4
 80020ee:	4903      	ldr	r1, [pc, #12]	@ (80020fc <UARTInterruptConfig+0x14>)
 80020f0:	4803      	ldr	r0, [pc, #12]	@ (8002100 <UARTInterruptConfig+0x18>)
 80020f2:	f006 f833 	bl	800815c <HAL_UART_Receive_IT>
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000464 	.word	0x20000464
 8002100:	20000110 	.word	0x20000110

08002104 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a07      	ldr	r2, [pc, #28]	@ (800212c <HAL_UART_RxCpltCallback+0x28>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d107      	bne.n	8002124 <HAL_UART_RxCpltCallback+0x20>
	{
		Rx[4] = '\0';
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_UART_RxCpltCallback+0x2c>)
 8002116:	2200      	movs	r2, #0
 8002118:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&hlpuart1, Rx, 4);
 800211a:	2204      	movs	r2, #4
 800211c:	4904      	ldr	r1, [pc, #16]	@ (8002130 <HAL_UART_RxCpltCallback+0x2c>)
 800211e:	4803      	ldr	r0, [pc, #12]	@ (800212c <HAL_UART_RxCpltCallback+0x28>)
 8002120:	f006 f81c 	bl	800815c <HAL_UART_Receive_IT>
	}
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000110 	.word	0x20000110
 8002130:	20000464 	.word	0x20000464

08002134 <Joy_State>:

void Joy_State()
{
 8002134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800213c:	2101      	movs	r1, #1
 800213e:	48a6      	ldr	r0, [pc, #664]	@ (80023d8 <Joy_State+0x2a4>)
 8002140:	f003 fa24 	bl	800558c <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	4ba4      	ldr	r3, [pc, #656]	@ (80023dc <Joy_State+0x2a8>)
 800214a:	701a      	strb	r2, [r3, #0]

if(state == 0)
 800214c:	4ba4      	ldr	r3, [pc, #656]	@ (80023e0 <Joy_State+0x2ac>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10a      	bne.n	800216a <Joy_State+0x36>
{
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
	if (joyY > 4000)
 8002154:	4ba3      	ldr	r3, [pc, #652]	@ (80023e4 <Joy_State+0x2b0>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800215c:	f240 80c6 	bls.w	80022ec <Joy_State+0x1b8>
	{
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002160:	4ba1      	ldr	r3, [pc, #644]	@ (80023e8 <Joy_State+0x2b4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24
 8002168:	e0c0      	b.n	80022ec <Joy_State+0x1b8>
	}
}

else if(state == 1)
 800216a:	4b9d      	ldr	r3, [pc, #628]	@ (80023e0 <Joy_State+0x2ac>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d16a      	bne.n	8002248 <Joy_State+0x114>
{
	static uint64_t timestamp4 =0;
	if(timestamp4 < HAL_GetTick())
 8002172:	f000 ffa1 	bl	80030b8 <HAL_GetTick>
 8002176:	4603      	mov	r3, r0
 8002178:	2200      	movs	r2, #0
 800217a:	4698      	mov	r8, r3
 800217c:	4691      	mov	r9, r2
 800217e:	4b9b      	ldr	r3, [pc, #620]	@ (80023ec <Joy_State+0x2b8>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	4542      	cmp	r2, r8
 8002186:	eb73 0309 	sbcs.w	r3, r3, r9
 800218a:	d22b      	bcs.n	80021e4 <Joy_State+0xb0>
	{
		if(joyX > 4000)
 800218c:	4b98      	ldr	r3, [pc, #608]	@ (80023f0 <Joy_State+0x2bc>)
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002194:	d904      	bls.n	80021a0 <Joy_State+0x6c>
		{
			A = A-250;
 8002196:	4b97      	ldr	r3, [pc, #604]	@ (80023f4 <Joy_State+0x2c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3bfa      	subs	r3, #250	@ 0xfa
 800219c:	4a95      	ldr	r2, [pc, #596]	@ (80023f4 <Joy_State+0x2c0>)
 800219e:	6013      	str	r3, [r2, #0]
		}
		if(joyX < 2000)
 80021a0:	4b93      	ldr	r3, [pc, #588]	@ (80023f0 <Joy_State+0x2bc>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80021a8:	d204      	bcs.n	80021b4 <Joy_State+0x80>
		{
			A = A+250;
 80021aa:	4b92      	ldr	r3, [pc, #584]	@ (80023f4 <Joy_State+0x2c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	33fa      	adds	r3, #250	@ 0xfa
 80021b0:	4a90      	ldr	r2, [pc, #576]	@ (80023f4 <Joy_State+0x2c0>)
 80021b2:	6013      	str	r3, [r2, #0]
		}
		if(A <= 0)A=0;
 80021b4:	4b8f      	ldr	r3, [pc, #572]	@ (80023f4 <Joy_State+0x2c0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dc02      	bgt.n	80021c2 <Joy_State+0x8e>
 80021bc:	4b8d      	ldr	r3, [pc, #564]	@ (80023f4 <Joy_State+0x2c0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
		timestamp4 = HAL_GetTick()+100;
 80021c2:	f000 ff79 	bl	80030b8 <HAL_GetTick>
 80021c6:	4603      	mov	r3, r0
 80021c8:	3364      	adds	r3, #100	@ 0x64
 80021ca:	2200      	movs	r2, #0
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	4b86      	ldr	r3, [pc, #536]	@ (80023ec <Joy_State+0x2b8>)
 80021d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80021d6:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021da:	2120      	movs	r1, #32
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e0:	f003 fa04 	bl	80055ec <HAL_GPIO_TogglePin>
	}
	if(joyY > 4000 || joyY < 2000)
 80021e4:	4b7f      	ldr	r3, [pc, #508]	@ (80023e4 <Joy_State+0x2b0>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80021ec:	d804      	bhi.n	80021f8 <Joy_State+0xc4>
 80021ee:	4b7d      	ldr	r3, [pc, #500]	@ (80023e4 <Joy_State+0x2b0>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80021f6:	d21c      	bcs.n	8002232 <Joy_State+0xfe>
	{
		if (joyY > 4000)
 80021f8:	4b7a      	ldr	r3, [pc, #488]	@ (80023e4 <Joy_State+0x2b0>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002200:	d90b      	bls.n	800221a <Joy_State+0xe6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8002202:	2201      	movs	r2, #1
 8002204:	2101      	movs	r1, #1
 8002206:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800220a:	f003 f9d7 	bl	80055bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 800220e:	4b79      	ldr	r3, [pc, #484]	@ (80023f4 <Joy_State+0x2c0>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b79      	ldr	r3, [pc, #484]	@ (80023f8 <Joy_State+0x2c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 4000)
 8002218:	e068      	b.n	80022ec <Joy_State+0x1b8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2101      	movs	r1, #1
 800221e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002222:	f003 f9cb 	bl	80055bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, A);
 8002226:	4b73      	ldr	r3, [pc, #460]	@ (80023f4 <Joy_State+0x2c0>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b73      	ldr	r3, [pc, #460]	@ (80023f8 <Joy_State+0x2c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 4000)
 8002230:	e05c      	b.n	80022ec <Joy_State+0x1b8>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2101      	movs	r1, #1
 8002236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800223a:	f003 f9bf 	bl	80055bc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800223e:	4b6e      	ldr	r3, [pc, #440]	@ (80023f8 <Joy_State+0x2c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2200      	movs	r2, #0
 8002244:	635a      	str	r2, [r3, #52]	@ 0x34
 8002246:	e051      	b.n	80022ec <Joy_State+0x1b8>
	}
}

else if(state == 2)
 8002248:	4b65      	ldr	r3, [pc, #404]	@ (80023e0 <Joy_State+0x2ac>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d143      	bne.n	80022d8 <Joy_State+0x1a4>
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,1);
 8002250:	2201      	movs	r2, #1
 8002252:	2120      	movs	r1, #32
 8002254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002258:	f003 f9b0 	bl	80055bc <HAL_GPIO_WritePin>
	if(joyY > 3200 || joyY < 2700)
 800225c:	4b61      	ldr	r3, [pc, #388]	@ (80023e4 <Joy_State+0x2b0>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8002264:	d805      	bhi.n	8002272 <Joy_State+0x13e>
 8002266:	4b5f      	ldr	r3, [pc, #380]	@ (80023e4 <Joy_State+0x2b0>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f640 228b 	movw	r2, #2699	@ 0xa8b
 800226e:	4293      	cmp	r3, r2
 8002270:	d824      	bhi.n	80022bc <Joy_State+0x188>
	{
		if (joyY > 3200)
 8002272:	4b5c      	ldr	r3, [pc, #368]	@ (80023e4 <Joy_State+0x2b0>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 800227a:	d90f      	bls.n	800229c <Joy_State+0x168>
		{
			A = 10625;
 800227c:	4b5d      	ldr	r3, [pc, #372]	@ (80023f4 <Joy_State+0x2c0>)
 800227e:	f642 1281 	movw	r2, #10625	@ 0x2981
 8002282:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8002284:	2201      	movs	r2, #1
 8002286:	2101      	movs	r1, #1
 8002288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800228c:	f003 f996 	bl	80055bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 8002290:	4b59      	ldr	r3, [pc, #356]	@ (80023f8 <Joy_State+0x2c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f642 020a 	movw	r2, #10250	@ 0x280a
 8002298:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3200)
 800229a:	e027      	b.n	80022ec <Joy_State+0x1b8>
		}
		else
		{
			A = -10625;
 800229c:	4b55      	ldr	r3, [pc, #340]	@ (80023f4 <Joy_State+0x2c0>)
 800229e:	f46f 5226 	mvn.w	r2, #10624	@ 0x2980
 80022a2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2101      	movs	r1, #1
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ac:	f003 f986 	bl	80055bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 10250);
 80022b0:	4b51      	ldr	r3, [pc, #324]	@ (80023f8 <Joy_State+0x2c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f642 020a 	movw	r2, #10250	@ 0x280a
 80022b8:	635a      	str	r2, [r3, #52]	@ 0x34
		if (joyY > 3200)
 80022ba:	e017      	b.n	80022ec <Joy_State+0x1b8>
		}
	}
	else
	{
		A = 0;
 80022bc:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <Joy_State+0x2c0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2101      	movs	r1, #1
 80022c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ca:	f003 f977 	bl	80055bc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 80022ce:	4b4a      	ldr	r3, [pc, #296]	@ (80023f8 <Joy_State+0x2c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d6:	e009      	b.n	80022ec <Joy_State+0x1b8>
	}
 }
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2101      	movs	r1, #1
 80022dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e0:	f003 f96c 	bl	80055bc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 80022e4:	4b44      	ldr	r3, [pc, #272]	@ (80023f8 <Joy_State+0x2c4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	static uint64_t timestamp2 =0;
	if(timestamp2 < HAL_GetTick())
 80022ec:	f000 fee4 	bl	80030b8 <HAL_GetTick>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2200      	movs	r2, #0
 80022f4:	461c      	mov	r4, r3
 80022f6:	4615      	mov	r5, r2
 80022f8:	4b40      	ldr	r3, [pc, #256]	@ (80023fc <Joy_State+0x2c8>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	42a2      	cmp	r2, r4
 8002300:	41ab      	sbcs	r3, r5
 8002302:	d261      	bcs.n	80023c8 <Joy_State+0x294>
	{
		if (joySW == 0)
 8002304:	4b35      	ldr	r3, [pc, #212]	@ (80023dc <Joy_State+0x2a8>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d153      	bne.n	80023b4 <Joy_State+0x280>
		{
			switch (state)
 800230c:	4b34      	ldr	r3, [pc, #208]	@ (80023e0 <Joy_State+0x2ac>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d84f      	bhi.n	80023b4 <Joy_State+0x280>
 8002314:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <Joy_State+0x1e8>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	0800232d 	.word	0x0800232d
 8002320:	0800234f 	.word	0x0800234f
 8002324:	08002371 	.word	0x08002371
 8002328:	08002393 	.word	0x08002393
			{
			case 0:
				state = 1;
 800232c:	4b2c      	ldr	r3, [pc, #176]	@ (80023e0 <Joy_State+0x2ac>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002332:	e007      	b.n	8002344 <Joy_State+0x210>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002334:	2101      	movs	r1, #1
 8002336:	4828      	ldr	r0, [pc, #160]	@ (80023d8 <Joy_State+0x2a4>)
 8002338:	f003 f928 	bl	800558c <HAL_GPIO_ReadPin>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <Joy_State+0x2a8>)
 8002342:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002344:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <Joy_State+0x2a8>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f3      	beq.n	8002334 <Joy_State+0x200>
				}
				break;
 800234c:	e032      	b.n	80023b4 <Joy_State+0x280>
			case 1:
				state = 2;
 800234e:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <Joy_State+0x2ac>)
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002354:	e007      	b.n	8002366 <Joy_State+0x232>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002356:	2101      	movs	r1, #1
 8002358:	481f      	ldr	r0, [pc, #124]	@ (80023d8 <Joy_State+0x2a4>)
 800235a:	f003 f917 	bl	800558c <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <Joy_State+0x2a8>)
 8002364:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002366:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <Joy_State+0x2a8>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f3      	beq.n	8002356 <Joy_State+0x222>
				}
				break;
 800236e:	e021      	b.n	80023b4 <Joy_State+0x280>
			case 2:
				state = 3;
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <Joy_State+0x2ac>)
 8002372:	2203      	movs	r2, #3
 8002374:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002376:	e007      	b.n	8002388 <Joy_State+0x254>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8002378:	2101      	movs	r1, #1
 800237a:	4817      	ldr	r0, [pc, #92]	@ (80023d8 <Joy_State+0x2a4>)
 800237c:	f003 f906 	bl	800558c <HAL_GPIO_ReadPin>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <Joy_State+0x2a8>)
 8002386:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002388:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <Joy_State+0x2a8>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f3      	beq.n	8002378 <Joy_State+0x244>
				}
				break;
 8002390:	e010      	b.n	80023b4 <Joy_State+0x280>
			case 3:
				state = 0;
 8002392:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <Joy_State+0x2ac>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 8002398:	e007      	b.n	80023aa <Joy_State+0x276>
				{
					joySW = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800239a:	2101      	movs	r1, #1
 800239c:	480e      	ldr	r0, [pc, #56]	@ (80023d8 <Joy_State+0x2a4>)
 800239e:	f003 f8f5 	bl	800558c <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <Joy_State+0x2a8>)
 80023a8:	701a      	strb	r2, [r3, #0]
				while(joySW == 0)
 80023aa:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <Joy_State+0x2a8>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f3      	beq.n	800239a <Joy_State+0x266>
				}
				break;
 80023b2:	bf00      	nop
			}
		}
		timestamp2 = HAL_GetTick() + 100;
 80023b4:	f000 fe80 	bl	80030b8 <HAL_GetTick>
 80023b8:	4603      	mov	r3, r0
 80023ba:	3364      	adds	r3, #100	@ 0x64
 80023bc:	2200      	movs	r2, #0
 80023be:	469a      	mov	sl, r3
 80023c0:	4693      	mov	fp, r2
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <Joy_State+0x2c8>)
 80023c4:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	Joy_Averaged();
 80023c8:	f000 f868 	bl	800249c <Joy_Averaged>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d6:	bf00      	nop
 80023d8:	48000800 	.word	0x48000800
 80023dc:	20000450 	.word	0x20000450
 80023e0:	20000451 	.word	0x20000451
 80023e4:	20000462 	.word	0x20000462
 80023e8:	2000023c 	.word	0x2000023c
 80023ec:	200004e8 	.word	0x200004e8
 80023f0:	20000460 	.word	0x20000460
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000288 	.word	0x20000288
 80023fc:	200004f0 	.word	0x200004f0

08002400 <reset>:
void reset()
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002404:	4b20      	ldr	r3, [pc, #128]	@ (8002488 <reset+0x88>)
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 800240c:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <reset+0x88>)
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002414:	4b1c      	ldr	r3, [pc, #112]	@ (8002488 <reset+0x88>)
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 800241c:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <reset+0x88>)
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002424:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <reset+0x88>)
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 800242c:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <reset+0x88>)
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002434:	4b15      	ldr	r3, [pc, #84]	@ (800248c <reset+0x8c>)
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <reset+0x8c>)
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <reset+0x8c>)
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 800244c:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <reset+0x8c>)
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002454:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <reset+0x8c>)
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <reset+0x8c>)
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
	Pos_Start = 0;
 8002464:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <reset+0x90>)
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
	Velo_Start = 0;
 800246c:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <reset+0x94>)
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
	t = 0;
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <reset+0x98>)
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000394 	.word	0x20000394
 800248c:	200003bc 	.word	0x200003bc
 8002490:	200003e4 	.word	0x200003e4
 8002494:	200003e8 	.word	0x200003e8
 8002498:	200003f8 	.word	0x200003f8

0800249c <Joy_Averaged>:
void Joy_Averaged()
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 20; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	e017      	b.n	80024d8 <Joy_Averaged+0x3c>
	{
		joySum[0] += joyAnalogRead[2*i];
 80024a8:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <Joy_Averaged+0x94>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	0052      	lsls	r2, r2, #1
 80024b0:	4920      	ldr	r1, [pc, #128]	@ (8002534 <Joy_Averaged+0x98>)
 80024b2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002530 <Joy_Averaged+0x94>)
 80024ba:	6013      	str	r3, [r2, #0]
		joySum[1] += joyAnalogRead[1+(2*i)];
 80024bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <Joy_Averaged+0x94>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	0052      	lsls	r2, r2, #1
 80024c4:	3201      	adds	r2, #1
 80024c6:	491b      	ldr	r1, [pc, #108]	@ (8002534 <Joy_Averaged+0x98>)
 80024c8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a18      	ldr	r2, [pc, #96]	@ (8002530 <Joy_Averaged+0x94>)
 80024d0:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 20; i++)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3301      	adds	r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b13      	cmp	r3, #19
 80024dc:	dde4      	ble.n	80024a8 <Joy_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 80024de:	2300      	movs	r3, #0
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	e014      	b.n	800250e <Joy_Averaged+0x72>
	{
		joyAvg[i] = joySum[i] / 20;
 80024e4:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <Joy_Averaged+0x94>)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ec:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <Joy_Averaged+0x9c>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	b299      	uxth	r1, r3
 80024f6:	4a11      	ldr	r2, [pc, #68]	@ (800253c <Joy_Averaged+0xa0>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		joySum[i] = 0;
 80024fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002530 <Joy_Averaged+0x94>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2100      	movs	r1, #0
 8002504:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	dde7      	ble.n	80024e4 <Joy_Averaged+0x48>
	}

	joyX = joyAvg[0];
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <Joy_Averaged+0xa0>)
 8002516:	881a      	ldrh	r2, [r3, #0]
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <Joy_Averaged+0xa4>)
 800251a:	801a      	strh	r2, [r3, #0]
	joyY = joyAvg[1];
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <Joy_Averaged+0xa0>)
 800251e:	885a      	ldrh	r2, [r3, #2]
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <Joy_Averaged+0xa8>)
 8002522:	801a      	strh	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	20000458 	.word	0x20000458
 8002534:	20000400 	.word	0x20000400
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	20000454 	.word	0x20000454
 8002540:	20000460 	.word	0x20000460
 8002544:	20000462 	.word	0x20000462

08002548 <Trajectory>:
void Trajectory()
{
 8002548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
	static uint64_t timestamp_Traject =0;
		int64_t currentTime = micros();
 8002550:	f7ff fc0a 	bl	8001d68 <micros>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	e9c7 2300 	strd	r2, r3, [r7]
		  if(timestamp_Traject < currentTime)
 800255c:	4b99      	ldr	r3, [pc, #612]	@ (80027c4 <Trajectory+0x27c>)
 800255e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002566:	4290      	cmp	r0, r2
 8002568:	eb71 0303 	sbcs.w	r3, r1, r3
 800256c:	f080 823c 	bcs.w	80029e8 <Trajectory+0x4a0>
		  {
			  switch(state_Tra)
 8002570:	4b95      	ldr	r3, [pc, #596]	@ (80027c8 <Trajectory+0x280>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b03      	cmp	r3, #3
 8002576:	f200 8219 	bhi.w	80029ac <Trajectory+0x464>
 800257a:	a201      	add	r2, pc, #4	@ (adr r2, 8002580 <Trajectory+0x38>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	08002591 	.word	0x08002591
 8002584:	08002735 	.word	0x08002735
 8002588:	080027f9 	.word	0x080027f9
 800258c:	0800290f 	.word	0x0800290f
			  	  		  {
			  	  		  case 0:
			  	  			  if(Pos_Start > Pos_Target)
 8002590:	4b8e      	ldr	r3, [pc, #568]	@ (80027cc <Trajectory+0x284>)
 8002592:	ed93 7a00 	vldr	s14, [r3]
 8002596:	4b8e      	ldr	r3, [pc, #568]	@ (80027d0 <Trajectory+0x288>)
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a4:	dd04      	ble.n	80025b0 <Trajectory+0x68>
			  	  			  {
			  	  				  direction = -1;
 80025a6:	4b8b      	ldr	r3, [pc, #556]	@ (80027d4 <Trajectory+0x28c>)
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e002      	b.n	80025b6 <Trajectory+0x6e>
			  	  			  }
			  	  			  else
			  	  			  {
			  	  				  direction = 1;
 80025b0:	4b88      	ldr	r3, [pc, #544]	@ (80027d4 <Trajectory+0x28c>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
			  	  			  }
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)+((direction*0.5*Max_Acc)*(t*t));
 80025b6:	4b88      	ldr	r3, [pc, #544]	@ (80027d8 <Trajectory+0x290>)
 80025b8:	ed93 7a00 	vldr	s14, [r3]
 80025bc:	4b87      	ldr	r3, [pc, #540]	@ (80027dc <Trajectory+0x294>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c6:	4b81      	ldr	r3, [pc, #516]	@ (80027cc <Trajectory+0x284>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	ee17 0a90 	vmov	r0, s15
 80025d4:	f7fd ff84 	bl	80004e0 <__aeabi_f2d>
 80025d8:	4680      	mov	r8, r0
 80025da:	4689      	mov	r9, r1
 80025dc:	4b7d      	ldr	r3, [pc, #500]	@ (80027d4 <Trajectory+0x28c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ff6b 	bl	80004bc <__aeabi_i2d>
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b7d      	ldr	r3, [pc, #500]	@ (80027e0 <Trajectory+0x298>)
 80025ec:	f7fd ffd0 	bl	8000590 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4692      	mov	sl, r2
 80025f6:	469b      	mov	fp, r3
 80025f8:	4b7a      	ldr	r3, [pc, #488]	@ (80027e4 <Trajectory+0x29c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff6f 	bl	80004e0 <__aeabi_f2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4650      	mov	r0, sl
 8002608:	4659      	mov	r1, fp
 800260a:	f7fd ffc1 	bl	8000590 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4692      	mov	sl, r2
 8002614:	469b      	mov	fp, r3
 8002616:	4b71      	ldr	r3, [pc, #452]	@ (80027dc <Trajectory+0x294>)
 8002618:	ed93 7a00 	vldr	s14, [r3]
 800261c:	4b6f      	ldr	r3, [pc, #444]	@ (80027dc <Trajectory+0x294>)
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002626:	ee17 0a90 	vmov	r0, s15
 800262a:	f7fd ff59 	bl	80004e0 <__aeabi_f2d>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4650      	mov	r0, sl
 8002634:	4659      	mov	r1, fp
 8002636:	f7fd ffab 	bl	8000590 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4640      	mov	r0, r8
 8002640:	4649      	mov	r1, r9
 8002642:	f7fd fdef 	bl	8000224 <__adddf3>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f7fe fa39 	bl	8000ac4 <__aeabi_d2f>
 8002652:	4603      	mov	r3, r0
 8002654:	4a64      	ldr	r2, [pc, #400]	@ (80027e8 <Trajectory+0x2a0>)
 8002656:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start + direction*Max_Acc*t;
 8002658:	4b5e      	ldr	r3, [pc, #376]	@ (80027d4 <Trajectory+0x28c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002664:	4b5f      	ldr	r3, [pc, #380]	@ (80027e4 <Trajectory+0x29c>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266e:	4b5b      	ldr	r3, [pc, #364]	@ (80027dc <Trajectory+0x294>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002678:	4b57      	ldr	r3, [pc, #348]	@ (80027d8 <Trajectory+0x290>)
 800267a:	edd3 7a00 	vldr	s15, [r3]
 800267e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002682:	4b5a      	ldr	r3, [pc, #360]	@ (80027ec <Trajectory+0x2a4>)
 8002684:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = Max_Acc*direction;
 8002688:	4b52      	ldr	r3, [pc, #328]	@ (80027d4 <Trajectory+0x28c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	ee07 3a90 	vmov	s15, r3
 8002690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002694:	4b53      	ldr	r3, [pc, #332]	@ (80027e4 <Trajectory+0x29c>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	4b54      	ldr	r3, [pc, #336]	@ (80027f0 <Trajectory+0x2a8>)
 80026a0:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) >= Max_Velo)
 80026a4:	4b51      	ldr	r3, [pc, #324]	@ (80027ec <Trajectory+0x2a4>)
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	eeb0 7ae7 	vabs.f32	s14, s15
 80026ae:	4b51      	ldr	r3, [pc, #324]	@ (80027f4 <Trajectory+0x2ac>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	db0e      	blt.n	80026dc <Trajectory+0x194>
			  	  				{
			  	  					state_Tra = 1;
 80026be:	4b42      	ldr	r3, [pc, #264]	@ (80027c8 <Trajectory+0x280>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 80026c4:	4b48      	ldr	r3, [pc, #288]	@ (80027e8 <Trajectory+0x2a0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a40      	ldr	r2, [pc, #256]	@ (80027cc <Trajectory+0x284>)
 80026ca:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 80026cc:	4b47      	ldr	r3, [pc, #284]	@ (80027ec <Trajectory+0x2a4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a41      	ldr	r2, [pc, #260]	@ (80027d8 <Trajectory+0x290>)
 80026d2:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 80026d4:	4b41      	ldr	r3, [pc, #260]	@ (80027dc <Trajectory+0x294>)
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
			  	  				}
			  	  			  if(fabs((q_Pos-Pos_Start)*2) >= fabs(Pos_Target-Pos_Start))
 80026dc:	4b42      	ldr	r3, [pc, #264]	@ (80027e8 <Trajectory+0x2a0>)
 80026de:	ed93 7a00 	vldr	s14, [r3]
 80026e2:	4b3a      	ldr	r3, [pc, #232]	@ (80027cc <Trajectory+0x284>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026f0:	eeb0 7ae7 	vabs.f32	s14, s15
 80026f4:	4b36      	ldr	r3, [pc, #216]	@ (80027d0 <Trajectory+0x288>)
 80026f6:	edd3 6a00 	vldr	s13, [r3]
 80026fa:	4b34      	ldr	r3, [pc, #208]	@ (80027cc <Trajectory+0x284>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002704:	eef0 7ae7 	vabs.f32	s15, s15
 8002708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800270c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002710:	da00      	bge.n	8002714 <Trajectory+0x1cc>
			  	  				state_Tra = 2;
								Pos_Start = q_Pos;
								Velo_Start = q_Velo;
								t = 0;
			  	  			  }
			  	  			  	break;
 8002712:	e14b      	b.n	80029ac <Trajectory+0x464>
			  	  				state_Tra = 2;
 8002714:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <Trajectory+0x280>)
 8002716:	2202      	movs	r2, #2
 8002718:	601a      	str	r2, [r3, #0]
								Pos_Start = q_Pos;
 800271a:	4b33      	ldr	r3, [pc, #204]	@ (80027e8 <Trajectory+0x2a0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2b      	ldr	r2, [pc, #172]	@ (80027cc <Trajectory+0x284>)
 8002720:	6013      	str	r3, [r2, #0]
								Velo_Start = q_Velo;
 8002722:	4b32      	ldr	r3, [pc, #200]	@ (80027ec <Trajectory+0x2a4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2c      	ldr	r2, [pc, #176]	@ (80027d8 <Trajectory+0x290>)
 8002728:	6013      	str	r3, [r2, #0]
								t = 0;
 800272a:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <Trajectory+0x294>)
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8002732:	e13b      	b.n	80029ac <Trajectory+0x464>
			  	  		  case 1:
			  	  			  	q_Pos = Pos_Start +(Velo_Start*t);
 8002734:	4b28      	ldr	r3, [pc, #160]	@ (80027d8 <Trajectory+0x290>)
 8002736:	ed93 7a00 	vldr	s14, [r3]
 800273a:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <Trajectory+0x294>)
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002744:	4b21      	ldr	r3, [pc, #132]	@ (80027cc <Trajectory+0x284>)
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	4b26      	ldr	r3, [pc, #152]	@ (80027e8 <Trajectory+0x2a0>)
 8002750:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Velo = Velo_Start;
 8002754:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <Trajectory+0x290>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a24      	ldr	r2, [pc, #144]	@ (80027ec <Trajectory+0x2a4>)
 800275a:	6013      	str	r3, [r2, #0]
			  	  			  	q_Acc = 0;
 800275c:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <Trajectory+0x2a8>)
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
			  	  			  if(fabs(Pos_Target-q_Pos) <= (q_Velo*q_Velo)/(2*Max_Acc))
 8002764:	4b1a      	ldr	r3, [pc, #104]	@ (80027d0 <Trajectory+0x288>)
 8002766:	ed93 7a00 	vldr	s14, [r3]
 800276a:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <Trajectory+0x2a0>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002774:	eeb0 7ae7 	vabs.f32	s14, s15
 8002778:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <Trajectory+0x2a4>)
 800277a:	edd3 6a00 	vldr	s13, [r3]
 800277e:	4b1b      	ldr	r3, [pc, #108]	@ (80027ec <Trajectory+0x2a4>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <Trajectory+0x29c>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002792:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	d900      	bls.n	80027a2 <Trajectory+0x25a>
			  	  					state_Tra = 2;
			  	  					Pos_Start = q_Pos;
			  	  					Velo_Start = q_Velo;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 80027a0:	e104      	b.n	80029ac <Trajectory+0x464>
			  	  					state_Tra = 2;
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <Trajectory+0x280>)
 80027a4:	2202      	movs	r2, #2
 80027a6:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <Trajectory+0x2a0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a07      	ldr	r2, [pc, #28]	@ (80027cc <Trajectory+0x284>)
 80027ae:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 80027b0:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <Trajectory+0x2a4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a08      	ldr	r2, [pc, #32]	@ (80027d8 <Trajectory+0x290>)
 80027b6:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <Trajectory+0x294>)
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 80027c0:	e0f4      	b.n	80029ac <Trajectory+0x464>
 80027c2:	bf00      	nop
 80027c4:	200004f8 	.word	0x200004f8
 80027c8:	200003fc 	.word	0x200003fc
 80027cc:	200003e4 	.word	0x200003e4
 80027d0:	20000008 	.word	0x20000008
 80027d4:	20000018 	.word	0x20000018
 80027d8:	200003e8 	.word	0x200003e8
 80027dc:	200003f8 	.word	0x200003f8
 80027e0:	3fe00000 	.word	0x3fe00000
 80027e4:	20000014 	.word	0x20000014
 80027e8:	200003ec 	.word	0x200003ec
 80027ec:	200003f0 	.word	0x200003f0
 80027f0:	200003f4 	.word	0x200003f4
 80027f4:	20000010 	.word	0x20000010
			  	  		  case 2:
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)-((direction*0.5*Max_Acc)*(t*t));
 80027f8:	4b81      	ldr	r3, [pc, #516]	@ (8002a00 <Trajectory+0x4b8>)
 80027fa:	ed93 7a00 	vldr	s14, [r3]
 80027fe:	4b81      	ldr	r3, [pc, #516]	@ (8002a04 <Trajectory+0x4bc>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002808:	4b7f      	ldr	r3, [pc, #508]	@ (8002a08 <Trajectory+0x4c0>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002812:	ee17 0a90 	vmov	r0, s15
 8002816:	f7fd fe63 	bl	80004e0 <__aeabi_f2d>
 800281a:	4680      	mov	r8, r0
 800281c:	4689      	mov	r9, r1
 800281e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a0c <Trajectory+0x4c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe4a 	bl	80004bc <__aeabi_i2d>
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	4b78      	ldr	r3, [pc, #480]	@ (8002a10 <Trajectory+0x4c8>)
 800282e:	f7fd feaf 	bl	8000590 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4692      	mov	sl, r2
 8002838:	469b      	mov	fp, r3
 800283a:	4b76      	ldr	r3, [pc, #472]	@ (8002a14 <Trajectory+0x4cc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe4e 	bl	80004e0 <__aeabi_f2d>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4650      	mov	r0, sl
 800284a:	4659      	mov	r1, fp
 800284c:	f7fd fea0 	bl	8000590 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4692      	mov	sl, r2
 8002856:	469b      	mov	fp, r3
 8002858:	4b6a      	ldr	r3, [pc, #424]	@ (8002a04 <Trajectory+0x4bc>)
 800285a:	ed93 7a00 	vldr	s14, [r3]
 800285e:	4b69      	ldr	r3, [pc, #420]	@ (8002a04 <Trajectory+0x4bc>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002868:	ee17 0a90 	vmov	r0, s15
 800286c:	f7fd fe38 	bl	80004e0 <__aeabi_f2d>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4650      	mov	r0, sl
 8002876:	4659      	mov	r1, fp
 8002878:	f7fd fe8a 	bl	8000590 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4640      	mov	r0, r8
 8002882:	4649      	mov	r1, r9
 8002884:	f7fd fccc 	bl	8000220 <__aeabi_dsub>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f7fe f918 	bl	8000ac4 <__aeabi_d2f>
 8002894:	4603      	mov	r3, r0
 8002896:	4a60      	ldr	r2, [pc, #384]	@ (8002a18 <Trajectory+0x4d0>)
 8002898:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start - direction*Max_Acc*t;
 800289a:	4b59      	ldr	r3, [pc, #356]	@ (8002a00 <Trajectory+0x4b8>)
 800289c:	ed93 7a00 	vldr	s14, [r3]
 80028a0:	4b5a      	ldr	r3, [pc, #360]	@ (8002a0c <Trajectory+0x4c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028ac:	4b59      	ldr	r3, [pc, #356]	@ (8002a14 <Trajectory+0x4cc>)
 80028ae:	edd3 7a00 	vldr	s15, [r3]
 80028b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028b6:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <Trajectory+0x4bc>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c4:	4b55      	ldr	r3, [pc, #340]	@ (8002a1c <Trajectory+0x4d4>)
 80028c6:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = -direction*Max_Acc;
 80028ca:	4b50      	ldr	r3, [pc, #320]	@ (8002a0c <Trajectory+0x4c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	425b      	negs	r3, r3
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002a14 <Trajectory+0x4cc>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e2:	4b4f      	ldr	r3, [pc, #316]	@ (8002a20 <Trajectory+0x4d8>)
 80028e4:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) <= 0)
 80028e8:	4b4c      	ldr	r3, [pc, #304]	@ (8002a1c <Trajectory+0x4d4>)
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	eef0 7ae7 	vabs.f32	s15, s15
 80028f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fa:	d900      	bls.n	80028fe <Trajectory+0x3b6>
			  	  				{
			  	  					state_Tra = 3;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 80028fc:	e056      	b.n	80029ac <Trajectory+0x464>
			  	  					state_Tra = 3;
 80028fe:	4b49      	ldr	r3, [pc, #292]	@ (8002a24 <Trajectory+0x4dc>)
 8002900:	2203      	movs	r2, #3
 8002902:	601a      	str	r2, [r3, #0]
			  	  					t = 0;
 8002904:	4b3f      	ldr	r3, [pc, #252]	@ (8002a04 <Trajectory+0x4bc>)
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 800290c:	e04e      	b.n	80029ac <Trajectory+0x464>
			  	  		  case 3:
			  	  			  	if(Pos_Target != Old_Target)
 800290e:	4b46      	ldr	r3, [pc, #280]	@ (8002a28 <Trajectory+0x4e0>)
 8002910:	ed93 7a00 	vldr	s14, [r3]
 8002914:	4b45      	ldr	r3, [pc, #276]	@ (8002a2c <Trajectory+0x4e4>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	eeb4 7a67 	vcmp.f32	s14, s15
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	d042      	beq.n	80029aa <Trajectory+0x462>
			  	  			  	{


			  	  			  		state_Tra = 0;
 8002924:	4b3f      	ldr	r3, [pc, #252]	@ (8002a24 <Trajectory+0x4dc>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
			  	  			  		t = 0;
 800292a:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <Trajectory+0x4bc>)
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
			  	  			  		Pos_Start = q_Pos;
 8002932:	4b39      	ldr	r3, [pc, #228]	@ (8002a18 <Trajectory+0x4d0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a34      	ldr	r2, [pc, #208]	@ (8002a08 <Trajectory+0x4c0>)
 8002938:	6013      	str	r3, [r2, #0]
			  	  			  		Velo_Start = q_Velo;
 800293a:	4b38      	ldr	r3, [pc, #224]	@ (8002a1c <Trajectory+0x4d4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a30      	ldr	r2, [pc, #192]	@ (8002a00 <Trajectory+0x4b8>)
 8002940:	6013      	str	r3, [r2, #0]
			  	  			  		Old_Target = Pos_Target;
 8002942:	4b39      	ldr	r3, [pc, #228]	@ (8002a28 <Trajectory+0x4e0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a39      	ldr	r2, [pc, #228]	@ (8002a2c <Trajectory+0x4e4>)
 8002948:	6013      	str	r3, [r2, #0]


			  	  			  		Velocontrol.Error[NEW] = 0;
 800294a:	4b39      	ldr	r3, [pc, #228]	@ (8002a30 <Trajectory+0x4e8>)
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
									Velocontrol.Error[OLD] = 0;
 8002952:	4b37      	ldr	r3, [pc, #220]	@ (8002a30 <Trajectory+0x4e8>)
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
									Velocontrol.Error[OLDER] = 0;
 800295a:	4b35      	ldr	r3, [pc, #212]	@ (8002a30 <Trajectory+0x4e8>)
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	615a      	str	r2, [r3, #20]
									Velocontrol.Output[NEW] = 0;
 8002962:	4b33      	ldr	r3, [pc, #204]	@ (8002a30 <Trajectory+0x4e8>)
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
									Velocontrol.Output[OLD] = 0;
 800296a:	4b31      	ldr	r3, [pc, #196]	@ (8002a30 <Trajectory+0x4e8>)
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	605a      	str	r2, [r3, #4]
									Velocontrol.Output[OLDER] = 0;
 8002972:	4b2f      	ldr	r3, [pc, #188]	@ (8002a30 <Trajectory+0x4e8>)
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	609a      	str	r2, [r3, #8]

									Poscontrol.Error[NEW] = 0;
 800297a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <Trajectory+0x4ec>)
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
									Poscontrol.Error[OLD] = 0;
 8002982:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <Trajectory+0x4ec>)
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
									Poscontrol.Error[OLDER] = 0;
 800298a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a34 <Trajectory+0x4ec>)
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	615a      	str	r2, [r3, #20]
									Poscontrol.Output[NEW] = 0;
 8002992:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <Trajectory+0x4ec>)
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
									Poscontrol.Output[OLD] = 0;
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <Trajectory+0x4ec>)
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	605a      	str	r2, [r3, #4]
									Poscontrol.Output[OLDER] = 0;
 80029a2:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <Trajectory+0x4ec>)
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]

			  	  			  	}
			  	  			  	break;
 80029aa:	bf00      	nop
//			  output = ((2*kp_Velo*T*error_Velo) - (2*kp_Velo*T*error_Velo_2) +(ki_Velo*T*T*error_Velo)+(2*ki_Velo*T*T*error_Velo_1)+(ki_Velo*T*T*error_Velo_2)+(4*kd_Velo*error_Velo)-(8*kd_Velo*error_Velo_1)-(4*kd_Velo*error_Velo_2)+(2*output_2*T))/(2*T);
//			  error_Velo_2 = error_Velo_1;
//			  error_Velo_1 = error_Velo;
//			  output_2 = output_1;
//			  output_1 = output;
		  t = t+0.0001;
 80029ac:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <Trajectory+0x4bc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fd95 	bl	80004e0 <__aeabi_f2d>
 80029b6:	a310      	add	r3, pc, #64	@ (adr r3, 80029f8 <Trajectory+0x4b0>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd fc32 	bl	8000224 <__adddf3>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7fe f87c 	bl	8000ac4 <__aeabi_d2f>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <Trajectory+0x4bc>)
 80029d0:	6013      	str	r3, [r2, #0]
		  timestamp_Traject = currentTime + 100;
 80029d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d6:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 80029da:	f143 0500 	adc.w	r5, r3, #0
 80029de:	4622      	mov	r2, r4
 80029e0:	462b      	mov	r3, r5
 80029e2:	4915      	ldr	r1, [pc, #84]	@ (8002a38 <Trajectory+0x4f0>)
 80029e4:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f2:	bf00      	nop
 80029f4:	f3af 8000 	nop.w
 80029f8:	eb1c432d 	.word	0xeb1c432d
 80029fc:	3f1a36e2 	.word	0x3f1a36e2
 8002a00:	200003e8 	.word	0x200003e8
 8002a04:	200003f8 	.word	0x200003f8
 8002a08:	200003e4 	.word	0x200003e4
 8002a0c:	20000018 	.word	0x20000018
 8002a10:	3fe00000 	.word	0x3fe00000
 8002a14:	20000014 	.word	0x20000014
 8002a18:	200003ec 	.word	0x200003ec
 8002a1c:	200003f0 	.word	0x200003f0
 8002a20:	200003f4 	.word	0x200003f4
 8002a24:	200003fc 	.word	0x200003fc
 8002a28:	20000008 	.word	0x20000008
 8002a2c:	2000000c 	.word	0x2000000c
 8002a30:	20000394 	.word	0x20000394
 8002a34:	200003bc 	.word	0x200003bc
 8002a38:	200004f8 	.word	0x200004f8

08002a3c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a4c:	d102      	bne.n	8002a54 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start  = 1;
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_4)
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d107      	bne.n	8002a6a <HAL_GPIO_EXTI_Callback+0x2e>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002a5a:	2120      	movs	r1, #32
 8002a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a60:	f002 fdc4 	bl	80055ec <HAL_GPIO_TogglePin>
		HOME = 1;
 8002a64:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x50>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d107      	bne.n	8002a80 <HAL_GPIO_EXTI_Callback+0x44>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002a70:	2120      	movs	r1, #32
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a76:	f002 fdb9 	bl	80055ec <HAL_GPIO_TogglePin>
		HOME = 2;
 8002a7a:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x50>)
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	601a      	str	r2, [r3, #0]
	}
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000370 	.word	0x20000370
 8002a8c:	20000374 	.word	0x20000374

08002a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a94:	b672      	cpsid	i
}
 8002a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <Error_Handler+0x8>

08002a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <HAL_MspInit+0x44>)
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae0 <HAL_MspInit+0x44>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <HAL_MspInit+0x44>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_MspInit+0x44>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abe:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <HAL_MspInit+0x44>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_MspInit+0x44>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ad2:	f002 fe61 	bl	8005798 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b09e      	sub	sp, #120	@ 0x78
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	2254      	movs	r2, #84	@ 0x54
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f007 fb77 	bl	800a1f8 <memset>
  if(hadc->Instance==ADC3)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a33      	ldr	r2, [pc, #204]	@ (8002bdc <HAL_ADC_MspInit+0xf8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d15f      	bne.n	8002bd4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002b14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002b1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 fb75 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002b30:	f7ff ffae 	bl	8002a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8002b34:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <HAL_ADC_MspInit+0xfc>)
 8002b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b38:	4a29      	ldr	r2, [pc, #164]	@ (8002be0 <HAL_ADC_MspInit+0xfc>)
 8002b3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b40:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_ADC_MspInit+0xfc>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4c:	4b24      	ldr	r3, [pc, #144]	@ (8002be0 <HAL_ADC_MspInit+0xfc>)
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b50:	4a23      	ldr	r2, [pc, #140]	@ (8002be0 <HAL_ADC_MspInit+0xfc>)
 8002b52:	f043 0302 	orr.w	r3, r3, #2
 8002b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b58:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <HAL_ADC_MspInit+0xfc>)
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = JOY_Y_Pin|JOY_X_Pin;
 8002b64:	f242 0302 	movw	r3, #8194	@ 0x2002
 8002b68:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b72:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b76:	4619      	mov	r1, r3
 8002b78:	481a      	ldr	r0, [pc, #104]	@ (8002be4 <HAL_ADC_MspInit+0x100>)
 8002b7a:	f002 fb85 	bl	8005288 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel2;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002b80:	4a1a      	ldr	r2, [pc, #104]	@ (8002bec <HAL_ADC_MspInit+0x108>)
 8002b82:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002b84:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002b86:	2225      	movs	r2, #37	@ 0x25
 8002b88:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b8a:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b90:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002b96:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002b98:	2280      	movs	r2, #128	@ 0x80
 8002b9a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b9c:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002b9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ba2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002ba6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002baa:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002bac:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002bae:	2220      	movs	r2, #32
 8002bb0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002bb8:	480b      	ldr	r0, [pc, #44]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002bba:	f002 f833 	bl	8004c24 <HAL_DMA_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002bc4:	f7ff ff64 	bl	8002a90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a07      	ldr	r2, [pc, #28]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002bcc:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bce:	4a06      	ldr	r2, [pc, #24]	@ (8002be8 <HAL_ADC_MspInit+0x104>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002bd4:	bf00      	nop
 8002bd6:	3778      	adds	r7, #120	@ 0x78
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	50000400 	.word	0x50000400
 8002be0:	40021000 	.word	0x40021000
 8002be4:	48000400 	.word	0x48000400
 8002be8:	200000b0 	.word	0x200000b0
 8002bec:	4002001c 	.word	0x4002001c

08002bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b09e      	sub	sp, #120	@ 0x78
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c08:	f107 0310 	add.w	r3, r7, #16
 8002c0c:	2254      	movs	r2, #84	@ 0x54
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f007 faf1 	bl	800a1f8 <memset>
  if(huart->Instance==LPUART1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ca8 <HAL_UART_MspInit+0xb8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d13e      	bne.n	8002c9e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002c20:	2320      	movs	r3, #32
 8002c22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 faf1 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c38:	f7ff ff2a 	bl	8002a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_UART_MspInit+0xbc>)
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	4a1a      	ldr	r2, [pc, #104]	@ (8002cac <HAL_UART_MspInit+0xbc>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002c48:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <HAL_UART_MspInit+0xbc>)
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_UART_MspInit+0xbc>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <HAL_UART_MspInit+0xbc>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c60:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_UART_MspInit+0xbc>)
 8002c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c8a:	f002 fafd 	bl	8005288 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	205b      	movs	r0, #91	@ 0x5b
 8002c94:	f001 ff91 	bl	8004bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002c98:	205b      	movs	r0, #91	@ 0x5b
 8002c9a:	f001 ffa8 	bl	8004bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002c9e:	bf00      	nop
 8002ca0:	3778      	adds	r7, #120	@ 0x78
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40008000 	.word	0x40008000
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a31      	ldr	r2, [pc, #196]	@ (8002d84 <HAL_TIM_Base_MspInit+0xd4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10c      	bne.n	8002cdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cc2:	4b31      	ldr	r3, [pc, #196]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc6:	4a30      	ldr	r2, [pc, #192]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002cc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cce:	4b2e      	ldr	r3, [pc, #184]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002cda:	e04e      	b.n	8002d7a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce6:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	4a27      	ldr	r2, [pc, #156]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf2:	4b25      	ldr	r3, [pc, #148]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
}
 8002cfe:	e03c      	b.n	8002d7a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a21      	ldr	r2, [pc, #132]	@ (8002d8c <HAL_TIM_Base_MspInit+0xdc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10c      	bne.n	8002d24 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d16:	4b1c      	ldr	r3, [pc, #112]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]
}
 8002d22:	e02a      	b.n	8002d7a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	@ (8002d90 <HAL_TIM_Base_MspInit+0xe0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d114      	bne.n	8002d58 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d2e:	4b16      	ldr	r3, [pc, #88]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d34:	f043 0308 	orr.w	r3, r3, #8
 8002d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d3a:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2032      	movs	r0, #50	@ 0x32
 8002d4c:	f001 ff35 	bl	8004bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d50:	2032      	movs	r0, #50	@ 0x32
 8002d52:	f001 ff4c 	bl	8004bee <HAL_NVIC_EnableIRQ>
}
 8002d56:	e010      	b.n	8002d7a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d94 <HAL_TIM_Base_MspInit+0xe4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10b      	bne.n	8002d7a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d66:	4a08      	ldr	r2, [pc, #32]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_TIM_Base_MspInit+0xd8>)
 8002d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	40000c00 	.word	0x40000c00
 8002d94:	40013400 	.word	0x40013400

08002d98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	@ 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d130      	bne.n	8002e1c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dba:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dc6:	4b18      	ldr	r3, [pc, #96]	@ (8002e28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	4a14      	ldr	r2, [pc, #80]	@ (8002e28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dde:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_Encoder_A_Pin|TIM3_Encoder_B_Pin;
 8002dea:	23c0      	movs	r3, #192	@ 0xc0
 8002dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e08:	f002 fa3e 	bl	8005288 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	201d      	movs	r0, #29
 8002e12:	f001 fed2 	bl	8004bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e16:	201d      	movs	r0, #29
 8002e18:	f001 fee9 	bl	8004bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e1c:	bf00      	nop
 8002e1e:	3728      	adds	r7, #40	@ 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40021000 	.word	0x40021000

08002e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <HAL_TIM_MspPostInit+0x68>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d11d      	bne.n	8002e8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_TIM_MspPostInit+0x6c>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	4a11      	ldr	r2, [pc, #68]	@ (8002e98 <HAL_TIM_MspPostInit+0x6c>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e98 <HAL_TIM_MspPostInit+0x6c>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_PWM_Pin;
 8002e66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002e78:	230a      	movs	r3, #10
 8002e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e7c:	f107 030c 	add.w	r3, r7, #12
 8002e80:	4619      	mov	r1, r3
 8002e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e86:	f002 f9ff 	bl	8005288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e8a:	bf00      	nop
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40021000 	.word	0x40021000

08002e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <NMI_Handler+0x4>

08002ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <HardFault_Handler+0x4>

08002eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <MemManage_Handler+0x4>

08002eb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <BusFault_Handler+0x4>

08002ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <UsageFault_Handler+0x4>

08002ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ef2:	f000 f8cf 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Lowerprox_Pin);
 8002efe:	2010      	movs	r0, #16
 8002f00:	f002 fb8e 	bl	8005620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002f0c:	4802      	ldr	r0, [pc, #8]	@ (8002f18 <DMA1_Channel2_IRQHandler+0x10>)
 8002f0e:	f002 f86c 	bl	8004fea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200000b0 	.word	0x200000b0

08002f1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UpperProx_Pin);
 8002f20:	2020      	movs	r0, #32
 8002f22:	f002 fb7d 	bl	8005620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f30:	4802      	ldr	r0, [pc, #8]	@ (8002f3c <TIM3_IRQHandler+0x10>)
 8002f32:	f003 ffa5 	bl	8006e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	2000023c 	.word	0x2000023c

08002f40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002f48:	f002 fb6a 	bl	8005620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f4c:	bf00      	nop
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f54:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <TIM5_IRQHandler+0x10>)
 8002f56:	f003 ff93 	bl	8006e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200002d4 	.word	0x200002d4

08002f64 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002f68:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <LPUART1_IRQHandler+0x10>)
 8002f6a:	f005 f943 	bl	80081f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000110 	.word	0x20000110

08002f78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <SystemInit+0x20>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <SystemInit+0x20>)
 8002f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f9c:	480d      	ldr	r0, [pc, #52]	@ (8002fd4 <LoopForever+0x2>)

  mov   sp, r0          /* set stack pointer */
 8002f9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fa0:	f7ff ffea 	bl	8002f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fa4:	480c      	ldr	r0, [pc, #48]	@ (8002fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fa6:	490d      	ldr	r1, [pc, #52]	@ (8002fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <LoopForever+0xe>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002fac:	e002      	b.n	8002fb4 <LoopCopyDataInit>

08002fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb2:	3304      	adds	r3, #4

08002fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb8:	d3f9      	bcc.n	8002fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fba:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002fe8 <LoopForever+0x16>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc0:	e001      	b.n	8002fc6 <LoopFillZerobss>

08002fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc4:	3204      	adds	r2, #4

08002fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc8:	d3fb      	bcc.n	8002fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fca:	f007 f91d 	bl	800a208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fce:	f7fd ff43 	bl	8000e58 <main>

08002fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002fd2:	e7fe      	b.n	8002fd2 <LoopForever>
  ldr   r0, =_estack
 8002fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fdc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002fe0:	0800a2b8 	.word	0x0800a2b8
  ldr r2, =_sbss
 8002fe4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002fe8:	20000504 	.word	0x20000504

08002fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fec:	e7fe      	b.n	8002fec <ADC1_2_IRQHandler>

08002fee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff8:	2003      	movs	r0, #3
 8002ffa:	f001 fdd3 	bl	8004ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ffe:	2000      	movs	r0, #0
 8003000:	f000 f80e 	bl	8003020 <HAL_InitTick>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	71fb      	strb	r3, [r7, #7]
 800300e:	e001      	b.n	8003014 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003010:	f7ff fd44 	bl	8002a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003014:	79fb      	ldrb	r3, [r7, #7]

}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800302c:	4b16      	ldr	r3, [pc, #88]	@ (8003088 <HAL_InitTick+0x68>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d022      	beq.n	800307a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003034:	4b15      	ldr	r3, [pc, #84]	@ (800308c <HAL_InitTick+0x6c>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b13      	ldr	r3, [pc, #76]	@ (8003088 <HAL_InitTick+0x68>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003040:	fbb1 f3f3 	udiv	r3, r1, r3
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fdde 	bl	8004c0a <HAL_SYSTICK_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10f      	bne.n	8003074 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	d809      	bhi.n	800306e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800305a:	2200      	movs	r2, #0
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	f04f 30ff 	mov.w	r0, #4294967295
 8003062:	f001 fdaa 	bl	8004bba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003066:	4a0a      	ldr	r2, [pc, #40]	@ (8003090 <HAL_InitTick+0x70>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	e007      	b.n	800307e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
 8003072:	e004      	b.n	800307e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e001      	b.n	800307e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000024 	.word	0x20000024
 800308c:	2000001c 	.word	0x2000001c
 8003090:	20000020 	.word	0x20000020

08003094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_IncTick+0x1c>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_IncTick+0x20>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	4a03      	ldr	r2, [pc, #12]	@ (80030b0 <HAL_IncTick+0x1c>)
 80030a4:	6013      	str	r3, [r2, #0]
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	20000500 	.word	0x20000500
 80030b4:	20000024 	.word	0x20000024

080030b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b03      	ldr	r3, [pc, #12]	@ (80030cc <HAL_GetTick+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000500 	.word	0x20000500

080030d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff ffee 	bl	80030b8 <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d004      	beq.n	80030f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ea:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_Delay+0x40>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030f4:	bf00      	nop
 80030f6:	f7ff ffdf 	bl	80030b8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	429a      	cmp	r2, r3
 8003104:	d8f7      	bhi.n	80030f6 <HAL_Delay+0x26>
  {
  }
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000024 	.word	0x20000024

08003114 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	609a      	str	r2, [r3, #8]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	609a      	str	r2, [r3, #8]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3360      	adds	r3, #96	@ 0x60
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <LL_ADC_SetOffset+0x44>)
 800319e:	4013      	ands	r3, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	03fff000 	.word	0x03fff000

080031c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3360      	adds	r3, #96	@ 0x60
 80031d2:	461a      	mov	r2, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3360      	adds	r3, #96	@ 0x60
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	431a      	orrs	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003226:	b480      	push	{r7}
 8003228:	b087      	sub	sp, #28
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3360      	adds	r3, #96	@ 0x60
 8003236:	461a      	mov	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	431a      	orrs	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3360      	adds	r3, #96	@ 0x60
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	431a      	orrs	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	615a      	str	r2, [r3, #20]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032de:	b480      	push	{r7}
 80032e0:	b087      	sub	sp, #28
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3330      	adds	r3, #48	@ 0x30
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	4413      	add	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	211f      	movs	r1, #31
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	401a      	ands	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	f003 011f 	and.w	r1, r3, #31
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	431a      	orrs	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003336:	b480      	push	{r7}
 8003338:	b087      	sub	sp, #28
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3314      	adds	r3, #20
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	0e5b      	lsrs	r3, r3, #25
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	0d1b      	lsrs	r3, r3, #20
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2107      	movs	r1, #7
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	0d1b      	lsrs	r3, r3, #20
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	431a      	orrs	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a4:	43db      	mvns	r3, r3
 80033a6:	401a      	ands	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0318 	and.w	r3, r3, #24
 80033ae:	4908      	ldr	r1, [pc, #32]	@ (80033d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033b0:	40d9      	lsrs	r1, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	400b      	ands	r3, r1
 80033b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	0007ffff 	.word	0x0007ffff

080033d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 031f 	and.w	r3, r3, #31
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003400:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6093      	str	r3, [r2, #8]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003428:	d101      	bne.n	800342e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800344c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003450:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003478:	d101      	bne.n	800347e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800349c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034a0:	f043 0201 	orr.w	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034c8:	f043 0202 	orr.w	r2, r3, #2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <LL_ADC_IsEnabled+0x18>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <LL_ADC_IsEnabled+0x1a>
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d101      	bne.n	800351a <LL_ADC_IsDisableOngoing+0x18>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <LL_ADC_IsDisableOngoing+0x1a>
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003538:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800353c:	f043 0204 	orr.w	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b04      	cmp	r3, #4
 8003562:	d101      	bne.n	8003568 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b08      	cmp	r3, #8
 8003588:	d101      	bne.n	800358e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b089      	sub	sp, #36	@ 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e1a9      	b.n	800390a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fa8d 	bl	8002ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff19 	bl	8003414 <LL_ADC_IsDeepPowerDownEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff feff 	bl	80033f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff34 	bl	8003464 <LL_ADC_IsInternalRegulatorEnabled>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d115      	bne.n	800362e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff18 	bl	800343c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800360c:	4b9c      	ldr	r3, [pc, #624]	@ (8003880 <HAL_ADC_Init+0x2e4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	4a9c      	ldr	r2, [pc, #624]	@ (8003884 <HAL_ADC_Init+0x2e8>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	3301      	adds	r3, #1
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003620:	e002      	b.n	8003628 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3b01      	subs	r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f9      	bne.n	8003622 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff16 	bl	8003464 <LL_ADC_IsInternalRegulatorEnabled>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10d      	bne.n	800365a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003642:	f043 0210 	orr.w	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ff76 	bl	8003550 <LL_ADC_REG_IsConversionOngoing>
 8003664:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 8142 	bne.w	80038f8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 813e 	bne.w	80038f8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003684:	f043 0202 	orr.w	r2, r3, #2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff23 	bl	80034dc <LL_ADC_IsEnabled>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d141      	bne.n	8003720 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a4:	d004      	beq.n	80036b0 <HAL_ADC_Init+0x114>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a77      	ldr	r2, [pc, #476]	@ (8003888 <HAL_ADC_Init+0x2ec>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10f      	bne.n	80036d0 <HAL_ADC_Init+0x134>
 80036b0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80036b4:	f7ff ff12 	bl	80034dc <LL_ADC_IsEnabled>
 80036b8:	4604      	mov	r4, r0
 80036ba:	4873      	ldr	r0, [pc, #460]	@ (8003888 <HAL_ADC_Init+0x2ec>)
 80036bc:	f7ff ff0e 	bl	80034dc <LL_ADC_IsEnabled>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4323      	orrs	r3, r4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e012      	b.n	80036f6 <HAL_ADC_Init+0x15a>
 80036d0:	486e      	ldr	r0, [pc, #440]	@ (800388c <HAL_ADC_Init+0x2f0>)
 80036d2:	f7ff ff03 	bl	80034dc <LL_ADC_IsEnabled>
 80036d6:	4604      	mov	r4, r0
 80036d8:	486d      	ldr	r0, [pc, #436]	@ (8003890 <HAL_ADC_Init+0x2f4>)
 80036da:	f7ff feff 	bl	80034dc <LL_ADC_IsEnabled>
 80036de:	4603      	mov	r3, r0
 80036e0:	431c      	orrs	r4, r3
 80036e2:	486c      	ldr	r0, [pc, #432]	@ (8003894 <HAL_ADC_Init+0x2f8>)
 80036e4:	f7ff fefa 	bl	80034dc <LL_ADC_IsEnabled>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4323      	orrs	r3, r4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d012      	beq.n	8003720 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003702:	d004      	beq.n	800370e <HAL_ADC_Init+0x172>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5f      	ldr	r2, [pc, #380]	@ (8003888 <HAL_ADC_Init+0x2ec>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_ADC_Init+0x176>
 800370e:	4a62      	ldr	r2, [pc, #392]	@ (8003898 <HAL_ADC_Init+0x2fc>)
 8003710:	e000      	b.n	8003714 <HAL_ADC_Init+0x178>
 8003712:	4a62      	ldr	r2, [pc, #392]	@ (800389c <HAL_ADC_Init+0x300>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f7ff fcfa 	bl	8003114 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7f5b      	ldrb	r3, [r3, #29]
 8003724:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800372a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003730:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003736:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800373e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800374a:	2b01      	cmp	r3, #1
 800374c:	d106      	bne.n	800375c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	3b01      	subs	r3, #1
 8003754:	045b      	lsls	r3, r3, #17
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	4b48      	ldr	r3, [pc, #288]	@ (80038a0 <HAL_ADC_Init+0x304>)
 8003780:	4013      	ands	r3, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	69b9      	ldr	r1, [r7, #24]
 8003788:	430b      	orrs	r3, r1
 800378a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fee5 	bl	8003576 <LL_ADC_INJ_IsConversionOngoing>
 80037ac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d17f      	bne.n	80038b4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d17c      	bne.n	80038b4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037be:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037d6:	f023 0302 	bic.w	r3, r3, #2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d017      	beq.n	800381c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80037fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003804:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003808:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6911      	ldr	r1, [r2, #16]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	430b      	orrs	r3, r1
 8003816:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800381a:	e013      	b.n	8003844 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800382a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800383c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003840:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800384a:	2b01      	cmp	r3, #1
 800384c:	d12a      	bne.n	80038a4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003864:	4311      	orrs	r1, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800386a:	4311      	orrs	r1, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003870:	430a      	orrs	r2, r1
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	611a      	str	r2, [r3, #16]
 800387e:	e019      	b.n	80038b4 <HAL_ADC_Init+0x318>
 8003880:	2000001c 	.word	0x2000001c
 8003884:	053e2d63 	.word	0x053e2d63
 8003888:	50000100 	.word	0x50000100
 800388c:	50000400 	.word	0x50000400
 8003890:	50000500 	.word	0x50000500
 8003894:	50000600 	.word	0x50000600
 8003898:	50000300 	.word	0x50000300
 800389c:	50000700 	.word	0x50000700
 80038a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d10c      	bne.n	80038d6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	f023 010f 	bic.w	r1, r3, #15
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	1e5a      	subs	r2, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80038d4:	e007      	b.n	80038e6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 020f 	bic.w	r2, r2, #15
 80038e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	f043 0201 	orr.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038f6:	e007      	b.n	8003908 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fc:	f043 0210 	orr.w	r2, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003908:	7ffb      	ldrb	r3, [r7, #31]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3724      	adds	r7, #36	@ 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd90      	pop	{r4, r7, pc}
 8003912:	bf00      	nop

08003914 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003928:	d004      	beq.n	8003934 <HAL_ADC_Start_DMA+0x20>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a5a      	ldr	r2, [pc, #360]	@ (8003a98 <HAL_ADC_Start_DMA+0x184>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_ADC_Start_DMA+0x24>
 8003934:	4b59      	ldr	r3, [pc, #356]	@ (8003a9c <HAL_ADC_Start_DMA+0x188>)
 8003936:	e000      	b.n	800393a <HAL_ADC_Start_DMA+0x26>
 8003938:	4b59      	ldr	r3, [pc, #356]	@ (8003aa0 <HAL_ADC_Start_DMA+0x18c>)
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fd4a 	bl	80033d4 <LL_ADC_GetMultimode>
 8003940:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fe02 	bl	8003550 <LL_ADC_REG_IsConversionOngoing>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 809b 	bne.w	8003a8a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_ADC_Start_DMA+0x4e>
 800395e:	2302      	movs	r3, #2
 8003960:	e096      	b.n	8003a90 <HAL_ADC_Start_DMA+0x17c>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa4 <HAL_ADC_Start_DMA+0x190>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d008      	beq.n	8003986 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d002      	beq.n	8003986 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b09      	cmp	r3, #9
 8003984:	d17a      	bne.n	8003a7c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fcf6 	bl	8004378 <ADC_Enable>
 800398c:	4603      	mov	r3, r0
 800398e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d16d      	bne.n	8003a72 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003a98 <HAL_ADC_Start_DMA+0x184>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_ADC_Start_DMA+0xb4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa8 <HAL_ADC_Start_DMA+0x194>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d002      	beq.n	80039c4 <HAL_ADC_Start_DMA+0xb0>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	e003      	b.n	80039cc <HAL_ADC_Start_DMA+0xb8>
 80039c4:	4b39      	ldr	r3, [pc, #228]	@ (8003aac <HAL_ADC_Start_DMA+0x198>)
 80039c6:	e001      	b.n	80039cc <HAL_ADC_Start_DMA+0xb8>
 80039c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d002      	beq.n	80039da <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d006      	beq.n	8003a00 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f6:	f023 0206 	bic.w	r2, r3, #6
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80039fe:	e002      	b.n	8003a06 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	4a29      	ldr	r2, [pc, #164]	@ (8003ab0 <HAL_ADC_Start_DMA+0x19c>)
 8003a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a12:	4a28      	ldr	r2, [pc, #160]	@ (8003ab4 <HAL_ADC_Start_DMA+0x1a0>)
 8003a14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1a:	4a27      	ldr	r2, [pc, #156]	@ (8003ab8 <HAL_ADC_Start_DMA+0x1a4>)
 8003a1c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	221c      	movs	r2, #28
 8003a24:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0210 	orr.w	r2, r2, #16
 8003a3c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3340      	adds	r3, #64	@ 0x40
 8003a58:	4619      	mov	r1, r3
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f001 f989 	bl	8004d74 <HAL_DMA_Start_IT>
 8003a62:	4603      	mov	r3, r0
 8003a64:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fd5c 	bl	8003528 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003a70:	e00d      	b.n	8003a8e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003a7a:	e008      	b.n	8003a8e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003a88:	e001      	b.n	8003a8e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	50000100 	.word	0x50000100
 8003a9c:	50000300 	.word	0x50000300
 8003aa0:	50000700 	.word	0x50000700
 8003aa4:	50000600 	.word	0x50000600
 8003aa8:	50000500 	.word	0x50000500
 8003aac:	50000400 	.word	0x50000400
 8003ab0:	08004563 	.word	0x08004563
 8003ab4:	0800463b 	.word	0x0800463b
 8003ab8:	08004657 	.word	0x08004657

08003abc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b0b6      	sub	sp, #216	@ 0xd8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d102      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x24>
 8003b16:	2302      	movs	r3, #2
 8003b18:	f000 bc13 	b.w	8004342 <HAL_ADC_ConfigChannel+0x84a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fd11 	bl	8003550 <LL_ADC_REG_IsConversionOngoing>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 83f3 	bne.w	800431c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7ff fbcb 	bl	80032de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fcff 	bl	8003550 <LL_ADC_REG_IsConversionOngoing>
 8003b52:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fd0b 	bl	8003576 <LL_ADC_INJ_IsConversionOngoing>
 8003b60:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f040 81d9 	bne.w	8003f20 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 81d4 	bne.w	8003f20 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b80:	d10f      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f7ff fbd2 	bl	8003336 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fb79 	bl	8003292 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ba0:	e00e      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7ff fbc1 	bl	8003336 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fb69 	bl	8003292 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	08db      	lsrs	r3, r3, #3
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d022      	beq.n	8003c28 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6919      	ldr	r1, [r3, #16]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bf2:	f7ff fac3 	bl	800317c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6919      	ldr	r1, [r3, #16]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f7ff fb0f 	bl	8003226 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d102      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x126>
 8003c18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c1c:	e000      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x128>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	461a      	mov	r2, r3
 8003c22:	f7ff fb1b 	bl	800325c <LL_ADC_SetOffsetSaturation>
 8003c26:	e17b      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fac8 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x15c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fabd 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	0e9b      	lsrs	r3, r3, #26
 8003c4e:	f003 021f 	and.w	r2, r3, #31
 8003c52:	e01e      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x19a>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fab2 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003c82:	2320      	movs	r3, #32
 8003c84:	e004      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c8a:	fab3 f383 	clz	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x1b2>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	0e9b      	lsrs	r3, r3, #26
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	e018      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x1e4>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003cce:	2320      	movs	r3, #32
 8003cd0:	e004      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003cd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003cd6:	fab3 f383 	clz	r3, r3
 8003cda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d106      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fa81 	bl	80031f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fa65 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x222>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fa5a 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003d10:	4603      	mov	r3, r0
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	f003 021f 	and.w	r2, r3, #31
 8003d18:	e01e      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x260>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fa4f 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003d38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	e004      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003d4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x278>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	0e9b      	lsrs	r3, r3, #26
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	e018      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x2aa>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003d94:	2320      	movs	r3, #32
 8003d96:	e004      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d106      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fa1e 	bl	80031f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2102      	movs	r1, #2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fa02 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x2e8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2102      	movs	r1, #2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff f9f7 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	0e9b      	lsrs	r3, r3, #26
 8003dda:	f003 021f 	and.w	r2, r3, #31
 8003dde:	e01e      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x326>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2102      	movs	r1, #2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f9ec 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003df6:	fa93 f3a3 	rbit	r3, r3
 8003dfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003e0e:	2320      	movs	r3, #32
 8003e10:	e004      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d105      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x33e>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	0e9b      	lsrs	r3, r3, #26
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	e016      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x36c>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003e56:	2320      	movs	r3, #32
 8003e58:	e004      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d106      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff f9bd 	bl	80031f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff f9a1 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x3aa>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2103      	movs	r1, #3
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff f996 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	0e9b      	lsrs	r3, r3, #26
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	e017      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x3da>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2103      	movs	r1, #3
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f98b 	bl	80031c4 <LL_ADC_GetOffsetChannel>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003eba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	e003      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x3f2>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	0e9b      	lsrs	r3, r3, #26
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	e011      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x416>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003f02:	2320      	movs	r3, #32
 8003f04:	e003      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d106      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2103      	movs	r1, #3
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff f968 	bl	80031f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fad9 	bl	80034dc <LL_ADC_IsEnabled>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f040 813d 	bne.w	80041ac <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f7ff fa24 	bl	800338c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4aa2      	ldr	r2, [pc, #648]	@ (80041d4 <HAL_ADC_ConfigChannel+0x6dc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	f040 812e 	bne.w	80041ac <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x480>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0e9b      	lsrs	r3, r3, #26
 8003f66:	3301      	adds	r3, #1
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2b09      	cmp	r3, #9
 8003f6e:	bf94      	ite	ls
 8003f70:	2301      	movls	r3, #1
 8003f72:	2300      	movhi	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	e019      	b.n	8003fac <HAL_ADC_ConfigChannel+0x4b4>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003f86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f88:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003f8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003f90:	2320      	movs	r3, #32
 8003f92:	e003      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003f94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2b09      	cmp	r3, #9
 8003fa4:	bf94      	ite	ls
 8003fa6:	2301      	movls	r3, #1
 8003fa8:	2300      	movhi	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d079      	beq.n	80040a4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d107      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x4d4>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	069b      	lsls	r3, r3, #26
 8003fc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fca:	e015      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x500>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fdc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	e003      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	069b      	lsls	r3, r3, #26
 8003ff4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004000:	2b00      	cmp	r3, #0
 8004002:	d109      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x520>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	0e9b      	lsrs	r3, r3, #26
 800400a:	3301      	adds	r3, #1
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	e017      	b.n	8004048 <HAL_ADC_ConfigChannel+0x550>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004028:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800402a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004030:	2320      	movs	r3, #32
 8004032:	e003      	b.n	800403c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	3301      	adds	r3, #1
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2101      	movs	r1, #1
 8004044:	fa01 f303 	lsl.w	r3, r1, r3
 8004048:	ea42 0103 	orr.w	r1, r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <HAL_ADC_ConfigChannel+0x576>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	0e9b      	lsrs	r3, r3, #26
 800405e:	3301      	adds	r3, #1
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	4613      	mov	r3, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4413      	add	r3, r2
 800406a:	051b      	lsls	r3, r3, #20
 800406c:	e018      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x5a8>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	fa93 f3a3 	rbit	r3, r3
 800407a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800407c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004086:	2320      	movs	r3, #32
 8004088:	e003      	b.n	8004092 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800408a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408c:	fab3 f383 	clz	r3, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	3301      	adds	r3, #1
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	4613      	mov	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4413      	add	r3, r2
 800409e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040a0:	430b      	orrs	r3, r1
 80040a2:	e07e      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x5c8>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	3301      	adds	r3, #1
 80040b8:	069b      	lsls	r3, r3, #26
 80040ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040be:	e015      	b.n	80040ec <HAL_ADC_ConfigChannel+0x5f4>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80040d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80040d8:	2320      	movs	r3, #32
 80040da:	e003      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	069b      	lsls	r3, r3, #26
 80040e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_ADC_ConfigChannel+0x614>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	0e9b      	lsrs	r3, r3, #26
 80040fe:	3301      	adds	r3, #1
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2101      	movs	r1, #1
 8004106:	fa01 f303 	lsl.w	r3, r1, r3
 800410a:	e017      	b.n	800413c <HAL_ADC_ConfigChannel+0x644>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	61fb      	str	r3, [r7, #28]
  return result;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004124:	2320      	movs	r3, #32
 8004126:	e003      	b.n	8004130 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3301      	adds	r3, #1
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2101      	movs	r1, #1
 8004138:	fa01 f303 	lsl.w	r3, r1, r3
 800413c:	ea42 0103 	orr.w	r1, r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10d      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x670>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0e9b      	lsrs	r3, r3, #26
 8004152:	3301      	adds	r3, #1
 8004154:	f003 021f 	and.w	r2, r3, #31
 8004158:	4613      	mov	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	3b1e      	subs	r3, #30
 8004160:	051b      	lsls	r3, r3, #20
 8004162:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004166:	e01b      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x6a8>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	613b      	str	r3, [r7, #16]
  return result;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004180:	2320      	movs	r3, #32
 8004182:	e003      	b.n	800418c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f003 021f 	and.w	r2, r3, #31
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	3b1e      	subs	r3, #30
 800419a:	051b      	lsls	r3, r3, #20
 800419c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7ff f8c5 	bl	8003336 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <HAL_ADC_ConfigChannel+0x6e0>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80be 	beq.w	8004336 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041c2:	d004      	beq.n	80041ce <HAL_ADC_ConfigChannel+0x6d6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a04      	ldr	r2, [pc, #16]	@ (80041dc <HAL_ADC_ConfigChannel+0x6e4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d10a      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x6ec>
 80041ce:	4b04      	ldr	r3, [pc, #16]	@ (80041e0 <HAL_ADC_ConfigChannel+0x6e8>)
 80041d0:	e009      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x6ee>
 80041d2:	bf00      	nop
 80041d4:	407f0000 	.word	0x407f0000
 80041d8:	80080000 	.word	0x80080000
 80041dc:	50000100 	.word	0x50000100
 80041e0:	50000300 	.word	0x50000300
 80041e4:	4b59      	ldr	r3, [pc, #356]	@ (800434c <HAL_ADC_ConfigChannel+0x854>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe ffba 	bl	8003160 <LL_ADC_GetCommonPathInternalCh>
 80041ec:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a56      	ldr	r2, [pc, #344]	@ (8004350 <HAL_ADC_ConfigChannel+0x858>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_ADC_ConfigChannel+0x70c>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a55      	ldr	r2, [pc, #340]	@ (8004354 <HAL_ADC_ConfigChannel+0x85c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d13a      	bne.n	800427a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d134      	bne.n	800427a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004218:	d005      	beq.n	8004226 <HAL_ADC_ConfigChannel+0x72e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a4e      	ldr	r2, [pc, #312]	@ (8004358 <HAL_ADC_ConfigChannel+0x860>)
 8004220:	4293      	cmp	r3, r2
 8004222:	f040 8085 	bne.w	8004330 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800422e:	d004      	beq.n	800423a <HAL_ADC_ConfigChannel+0x742>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a49      	ldr	r2, [pc, #292]	@ (800435c <HAL_ADC_ConfigChannel+0x864>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <HAL_ADC_ConfigChannel+0x746>
 800423a:	4a49      	ldr	r2, [pc, #292]	@ (8004360 <HAL_ADC_ConfigChannel+0x868>)
 800423c:	e000      	b.n	8004240 <HAL_ADC_ConfigChannel+0x748>
 800423e:	4a43      	ldr	r2, [pc, #268]	@ (800434c <HAL_ADC_ConfigChannel+0x854>)
 8004240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004244:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f7fe ff75 	bl	800313a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004250:	4b44      	ldr	r3, [pc, #272]	@ (8004364 <HAL_ADC_ConfigChannel+0x86c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	4a44      	ldr	r2, [pc, #272]	@ (8004368 <HAL_ADC_ConfigChannel+0x870>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	099b      	lsrs	r3, r3, #6
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800426a:	e002      	b.n	8004272 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3b01      	subs	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f9      	bne.n	800426c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004278:	e05a      	b.n	8004330 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a3b      	ldr	r2, [pc, #236]	@ (800436c <HAL_ADC_ConfigChannel+0x874>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d125      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004288:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d11f      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a31      	ldr	r2, [pc, #196]	@ (800435c <HAL_ADC_ConfigChannel+0x864>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d104      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x7ac>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a34      	ldr	r2, [pc, #208]	@ (8004370 <HAL_ADC_ConfigChannel+0x878>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d047      	beq.n	8004334 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ac:	d004      	beq.n	80042b8 <HAL_ADC_ConfigChannel+0x7c0>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a2a      	ldr	r2, [pc, #168]	@ (800435c <HAL_ADC_ConfigChannel+0x864>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d101      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x7c4>
 80042b8:	4a29      	ldr	r2, [pc, #164]	@ (8004360 <HAL_ADC_ConfigChannel+0x868>)
 80042ba:	e000      	b.n	80042be <HAL_ADC_ConfigChannel+0x7c6>
 80042bc:	4a23      	ldr	r2, [pc, #140]	@ (800434c <HAL_ADC_ConfigChannel+0x854>)
 80042be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7fe ff36 	bl	800313a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042ce:	e031      	b.n	8004334 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a27      	ldr	r2, [pc, #156]	@ (8004374 <HAL_ADC_ConfigChannel+0x87c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d12d      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d127      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1c      	ldr	r2, [pc, #112]	@ (800435c <HAL_ADC_ConfigChannel+0x864>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f8:	d004      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x80c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a17      	ldr	r2, [pc, #92]	@ (800435c <HAL_ADC_ConfigChannel+0x864>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x810>
 8004304:	4a16      	ldr	r2, [pc, #88]	@ (8004360 <HAL_ADC_ConfigChannel+0x868>)
 8004306:	e000      	b.n	800430a <HAL_ADC_ConfigChannel+0x812>
 8004308:	4a10      	ldr	r2, [pc, #64]	@ (800434c <HAL_ADC_ConfigChannel+0x854>)
 800430a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800430e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fe ff10 	bl	800313a <LL_ADC_SetCommonPathInternalCh>
 800431a:	e00c      	b.n	8004336 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800432e:	e002      	b.n	8004336 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004330:	bf00      	nop
 8004332:	e000      	b.n	8004336 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004334:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800433e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004342:	4618      	mov	r0, r3
 8004344:	37d8      	adds	r7, #216	@ 0xd8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	50000700 	.word	0x50000700
 8004350:	c3210000 	.word	0xc3210000
 8004354:	90c00010 	.word	0x90c00010
 8004358:	50000600 	.word	0x50000600
 800435c:	50000100 	.word	0x50000100
 8004360:	50000300 	.word	0x50000300
 8004364:	2000001c 	.word	0x2000001c
 8004368:	053e2d63 	.word	0x053e2d63
 800436c:	c7520000 	.word	0xc7520000
 8004370:	50000500 	.word	0x50000500
 8004374:	cb840000 	.word	0xcb840000

08004378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff f8a7 	bl	80034dc <LL_ADC_IsEnabled>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d176      	bne.n	8004482 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	4b3c      	ldr	r3, [pc, #240]	@ (800448c <ADC_Enable+0x114>)
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a6:	f043 0210 	orr.w	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e062      	b.n	8004484 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff f862 	bl	800348c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043d0:	d004      	beq.n	80043dc <ADC_Enable+0x64>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004490 <ADC_Enable+0x118>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d101      	bne.n	80043e0 <ADC_Enable+0x68>
 80043dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004494 <ADC_Enable+0x11c>)
 80043de:	e000      	b.n	80043e2 <ADC_Enable+0x6a>
 80043e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004498 <ADC_Enable+0x120>)
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe febc 	bl	8003160 <LL_ADC_GetCommonPathInternalCh>
 80043e8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80043ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d013      	beq.n	800441a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043f2:	4b2a      	ldr	r3, [pc, #168]	@ (800449c <ADC_Enable+0x124>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	4a29      	ldr	r2, [pc, #164]	@ (80044a0 <ADC_Enable+0x128>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800440c:	e002      	b.n	8004414 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	3b01      	subs	r3, #1
 8004412:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f9      	bne.n	800440e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800441a:	f7fe fe4d 	bl	80030b8 <HAL_GetTick>
 800441e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004420:	e028      	b.n	8004474 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff f858 	bl	80034dc <LL_ADC_IsEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff f828 	bl	800348c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800443c:	f7fe fe3c 	bl	80030b8 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d914      	bls.n	8004474 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d00d      	beq.n	8004474 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445c:	f043 0210 	orr.w	r2, r3, #16
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004468:	f043 0201 	orr.w	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e007      	b.n	8004484 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b01      	cmp	r3, #1
 8004480:	d1cf      	bne.n	8004422 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	8000003f 	.word	0x8000003f
 8004490:	50000100 	.word	0x50000100
 8004494:	50000300 	.word	0x50000300
 8004498:	50000700 	.word	0x50000700
 800449c:	2000001c 	.word	0x2000001c
 80044a0:	053e2d63 	.word	0x053e2d63

080044a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff f826 	bl	8003502 <LL_ADC_IsDisableOngoing>
 80044b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff f80d 	bl	80034dc <LL_ADC_IsEnabled>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d047      	beq.n	8004558 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d144      	bne.n	8004558 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030d 	and.w	r3, r3, #13
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10c      	bne.n	80044f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe ffe7 	bl	80034b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2203      	movs	r2, #3
 80044ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044ee:	f7fe fde3 	bl	80030b8 <HAL_GetTick>
 80044f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044f4:	e029      	b.n	800454a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fa:	f043 0210 	orr.w	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e023      	b.n	800455a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004512:	f7fe fdd1 	bl	80030b8 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d914      	bls.n	800454a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004532:	f043 0210 	orr.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e007      	b.n	800455a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1dc      	bne.n	8004512 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004574:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004578:	2b00      	cmp	r3, #0
 800457a:	d14b      	bne.n	8004614 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004580:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d021      	beq.n	80045da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe fe8c 	bl	80032b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d032      	beq.n	800460c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d12b      	bne.n	800460c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d11f      	bne.n	800460c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045d8:	e018      	b.n	800460c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d111      	bne.n	800460c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff fa55 	bl	8003abc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004612:	e00e      	b.n	8004632 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fa5f 	bl	8003ae4 <HAL_ADC_ErrorCallback>
}
 8004626:	e004      	b.n	8004632 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff fa41 	bl	8003ad0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004668:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004674:	f043 0204 	orr.w	r2, r3, #4
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff fa31 	bl	8003ae4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <LL_ADC_IsEnabled>:
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <LL_ADC_IsEnabled+0x18>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <LL_ADC_IsEnabled+0x1a>
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_ADC_StartCalibration>:
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80046c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <LL_ADC_IsCalibrationOnGoing>:
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046f6:	d101      	bne.n	80046fc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <LL_ADC_IsCalibrationOnGoing+0x1c>
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <LL_ADC_REG_IsConversionOngoing>:
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b04      	cmp	r3, #4
 800471c:	d101      	bne.n	8004722 <LL_ADC_REG_IsConversionOngoing+0x18>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_ADCEx_Calibration_Start+0x1c>
 8004748:	2302      	movs	r3, #2
 800474a:	e04d      	b.n	80047e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fea5 	bl	80044a4 <ADC_Disable>
 800475a:	4603      	mov	r3, r0
 800475c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d136      	bne.n	80047d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004768:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800476c:	f023 0302 	bic.w	r3, r3, #2
 8004770:	f043 0202 	orr.w	r2, r3, #2
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff ff96 	bl	80046b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004784:	e014      	b.n	80047b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3301      	adds	r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4a18      	ldr	r2, [pc, #96]	@ (80047f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d90d      	bls.n	80047b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004798:	f023 0312 	bic.w	r3, r3, #18
 800479c:	f043 0210 	orr.w	r2, r3, #16
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e01b      	b.n	80047e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ff94 	bl	80046e2 <LL_ADC_IsCalibrationOnGoing>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e2      	bne.n	8004786 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	f023 0303 	bic.w	r3, r3, #3
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047d0:	e005      	b.n	80047de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d6:	f043 0210 	orr.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	0004de01 	.word	0x0004de01

080047f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b0a1      	sub	sp, #132	@ 0x84
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800480e:	2302      	movs	r3, #2
 8004810:	e0e7      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800481a:	2300      	movs	r3, #0
 800481c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800481e:	2300      	movs	r3, #0
 8004820:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800482a:	d102      	bne.n	8004832 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800482c:	4b6f      	ldr	r3, [pc, #444]	@ (80049ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	e009      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6e      	ldr	r2, [pc, #440]	@ (80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d102      	bne.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800483c:	4b6d      	ldr	r3, [pc, #436]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	e001      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0be      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff ff4f 	bl	800470a <LL_ADC_REG_IsConversionOngoing>
 800486c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff ff49 	bl	800470a <LL_ADC_REG_IsConversionOngoing>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 80a0 	bne.w	80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004882:	2b00      	cmp	r3, #0
 8004884:	f040 809c 	bne.w	80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004890:	d004      	beq.n	800489c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a55      	ldr	r2, [pc, #340]	@ (80049ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800489c:	4b56      	ldr	r3, [pc, #344]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800489e:	e000      	b.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80048a0:	4b56      	ldr	r3, [pc, #344]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80048a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d04b      	beq.n	8004944 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048be:	035b      	lsls	r3, r3, #13
 80048c0:	430b      	orrs	r3, r1
 80048c2:	431a      	orrs	r2, r3
 80048c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048d0:	d004      	beq.n	80048dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a45      	ldr	r2, [pc, #276]	@ (80049ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10f      	bne.n	80048fc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80048dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80048e0:	f7ff fed3 	bl	800468a <LL_ADC_IsEnabled>
 80048e4:	4604      	mov	r4, r0
 80048e6:	4841      	ldr	r0, [pc, #260]	@ (80049ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048e8:	f7ff fecf 	bl	800468a <LL_ADC_IsEnabled>
 80048ec:	4603      	mov	r3, r0
 80048ee:	4323      	orrs	r3, r4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	e012      	b.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80048fc:	483c      	ldr	r0, [pc, #240]	@ (80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048fe:	f7ff fec4 	bl	800468a <LL_ADC_IsEnabled>
 8004902:	4604      	mov	r4, r0
 8004904:	483b      	ldr	r0, [pc, #236]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004906:	f7ff fec0 	bl	800468a <LL_ADC_IsEnabled>
 800490a:	4603      	mov	r3, r0
 800490c:	431c      	orrs	r4, r3
 800490e:	483c      	ldr	r0, [pc, #240]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004910:	f7ff febb 	bl	800468a <LL_ADC_IsEnabled>
 8004914:	4603      	mov	r3, r0
 8004916:	4323      	orrs	r3, r4
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d056      	beq.n	80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800492e:	f023 030f 	bic.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	6811      	ldr	r1, [r2, #0]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	6892      	ldr	r2, [r2, #8]
 800493a:	430a      	orrs	r2, r1
 800493c:	431a      	orrs	r2, r3
 800493e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004940:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004942:	e047      	b.n	80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800494c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800494e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004958:	d004      	beq.n	8004964 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a23      	ldr	r2, [pc, #140]	@ (80049ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d10f      	bne.n	8004984 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004964:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004968:	f7ff fe8f 	bl	800468a <LL_ADC_IsEnabled>
 800496c:	4604      	mov	r4, r0
 800496e:	481f      	ldr	r0, [pc, #124]	@ (80049ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004970:	f7ff fe8b 	bl	800468a <LL_ADC_IsEnabled>
 8004974:	4603      	mov	r3, r0
 8004976:	4323      	orrs	r3, r4
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e012      	b.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004984:	481a      	ldr	r0, [pc, #104]	@ (80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004986:	f7ff fe80 	bl	800468a <LL_ADC_IsEnabled>
 800498a:	4604      	mov	r4, r0
 800498c:	4819      	ldr	r0, [pc, #100]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800498e:	f7ff fe7c 	bl	800468a <LL_ADC_IsEnabled>
 8004992:	4603      	mov	r3, r0
 8004994:	431c      	orrs	r4, r3
 8004996:	481a      	ldr	r0, [pc, #104]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004998:	f7ff fe77 	bl	800468a <LL_ADC_IsEnabled>
 800499c:	4603      	mov	r3, r0
 800499e:	4323      	orrs	r3, r4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d012      	beq.n	80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80049b6:	f023 030f 	bic.w	r3, r3, #15
 80049ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80049bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049be:	e009      	b.n	80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80049d2:	e000      	b.n	80049d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80049de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3784      	adds	r7, #132	@ 0x84
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd90      	pop	{r4, r7, pc}
 80049ea:	bf00      	nop
 80049ec:	50000100 	.word	0x50000100
 80049f0:	50000400 	.word	0x50000400
 80049f4:	50000500 	.word	0x50000500
 80049f8:	50000300 	.word	0x50000300
 80049fc:	50000700 	.word	0x50000700
 8004a00:	50000600 	.word	0x50000600

08004a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a14:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <__NVIC_SetPriorityGrouping+0x44>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a20:	4013      	ands	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a36:	4a04      	ldr	r2, [pc, #16]	@ (8004a48 <__NVIC_SetPriorityGrouping+0x44>)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	60d3      	str	r3, [r2, #12]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <__NVIC_GetPriorityGrouping+0x18>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	f003 0307 	and.w	r3, r3, #7
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	db0b      	blt.n	8004a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	4907      	ldr	r1, [pc, #28]	@ (8004aa0 <__NVIC_EnableIRQ+0x38>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2001      	movs	r0, #1
 8004a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000e100 	.word	0xe000e100

08004aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	6039      	str	r1, [r7, #0]
 8004aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	db0a      	blt.n	8004ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	490c      	ldr	r1, [pc, #48]	@ (8004af0 <__NVIC_SetPriority+0x4c>)
 8004abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004acc:	e00a      	b.n	8004ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4908      	ldr	r1, [pc, #32]	@ (8004af4 <__NVIC_SetPriority+0x50>)
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	3b04      	subs	r3, #4
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	761a      	strb	r2, [r3, #24]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000e100 	.word	0xe000e100
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b089      	sub	sp, #36	@ 0x24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f1c3 0307 	rsb	r3, r3, #7
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	bf28      	it	cs
 8004b16:	2304      	movcs	r3, #4
 8004b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	2b06      	cmp	r3, #6
 8004b20:	d902      	bls.n	8004b28 <NVIC_EncodePriority+0x30>
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3b03      	subs	r3, #3
 8004b26:	e000      	b.n	8004b2a <NVIC_EncodePriority+0x32>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b40:	f04f 31ff 	mov.w	r1, #4294967295
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	43d9      	mvns	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b50:	4313      	orrs	r3, r2
         );
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3724      	adds	r7, #36	@ 0x24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b70:	d301      	bcc.n	8004b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b72:	2301      	movs	r3, #1
 8004b74:	e00f      	b.n	8004b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba0 <SysTick_Config+0x40>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b7e:	210f      	movs	r1, #15
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	f7ff ff8e 	bl	8004aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <SysTick_Config+0x40>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ba0 <SysTick_Config+0x40>)
 8004b90:	2207      	movs	r2, #7
 8004b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	e000e010 	.word	0xe000e010

08004ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ff29 	bl	8004a04 <__NVIC_SetPriorityGrouping>
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bc8:	f7ff ff40 	bl	8004a4c <__NVIC_GetPriorityGrouping>
 8004bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	6978      	ldr	r0, [r7, #20]
 8004bd4:	f7ff ff90 	bl	8004af8 <NVIC_EncodePriority>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff5f 	bl	8004aa4 <__NVIC_SetPriority>
}
 8004be6:	bf00      	nop
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ff33 	bl	8004a68 <__NVIC_EnableIRQ>
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff ffa4 	bl	8004b60 <SysTick_Config>
 8004c18:	4603      	mov	r3, r0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e08d      	b.n	8004d52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	4b47      	ldr	r3, [pc, #284]	@ (8004d5c <HAL_DMA_Init+0x138>)
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d80f      	bhi.n	8004c62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	4b45      	ldr	r3, [pc, #276]	@ (8004d60 <HAL_DMA_Init+0x13c>)
 8004c4a:	4413      	add	r3, r2
 8004c4c:	4a45      	ldr	r2, [pc, #276]	@ (8004d64 <HAL_DMA_Init+0x140>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	009a      	lsls	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a42      	ldr	r2, [pc, #264]	@ (8004d68 <HAL_DMA_Init+0x144>)
 8004c5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c60:	e00e      	b.n	8004c80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b40      	ldr	r3, [pc, #256]	@ (8004d6c <HAL_DMA_Init+0x148>)
 8004c6a:	4413      	add	r3, r2
 8004c6c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d64 <HAL_DMA_Init+0x140>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	009a      	lsls	r2, r3, #2
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d70 <HAL_DMA_Init+0x14c>)
 8004c7e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa76 	bl	80051c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ce0:	d102      	bne.n	8004ce8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cfc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_DMA_Init+0x104>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d80c      	bhi.n	8004d28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fa96 	bl	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	e008      	b.n	8004d3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40020407 	.word	0x40020407
 8004d60:	bffdfff8 	.word	0xbffdfff8
 8004d64:	cccccccd 	.word	0xcccccccd
 8004d68:	40020000 	.word	0x40020000
 8004d6c:	bffdfbf8 	.word	0xbffdfbf8
 8004d70:	40020400 	.word	0x40020400

08004d74 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_DMA_Start_IT+0x20>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e066      	b.n	8004e62 <HAL_DMA_Start_IT+0xee>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d155      	bne.n	8004e54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f9bb 	bl	8005148 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 020e 	orr.w	r2, r2, #14
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e00f      	b.n	8004e0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0204 	bic.w	r2, r2, #4
 8004dfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 020a 	orr.w	r2, r2, #10
 8004e0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e28:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e005      	b.n	8004e60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d005      	beq.n	8004e8e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2204      	movs	r2, #4
 8004e86:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
 8004e8c:	e037      	b.n	8004efe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 020e 	bic.w	r2, r2, #14
 8004e9c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec2:	f003 021f 	and.w	r2, r3, #31
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	2101      	movs	r1, #1
 8004ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004eda:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00c      	beq.n	8004efe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ef2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004efc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d00d      	beq.n	8004f50 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2204      	movs	r2, #4
 8004f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
 8004f4e:	e047      	b.n	8004fe0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 020e 	bic.w	r2, r2, #14
 8004f5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f84:	f003 021f 	and.w	r2, r3, #31
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f92:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f9c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fbe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
    }
  }
  return status;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2204      	movs	r2, #4
 800500c:	409a      	lsls	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d026      	beq.n	8005064 <HAL_DMA_IRQHandler+0x7a>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d021      	beq.n	8005064 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d107      	bne.n	800503e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0204 	bic.w	r2, r2, #4
 800503c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005042:	f003 021f 	and.w	r2, r3, #31
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504a:	2104      	movs	r1, #4
 800504c:	fa01 f202 	lsl.w	r2, r1, r2
 8005050:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005056:	2b00      	cmp	r3, #0
 8005058:	d071      	beq.n	800513e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005062:	e06c      	b.n	800513e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	2202      	movs	r2, #2
 800506e:	409a      	lsls	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4013      	ands	r3, r2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d02e      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d029      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10b      	bne.n	80050a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 020a 	bic.w	r2, r2, #10
 800509e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ac:	f003 021f 	and.w	r2, r3, #31
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	2102      	movs	r1, #2
 80050b6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d038      	beq.n	800513e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80050d4:	e033      	b.n	800513e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2208      	movs	r2, #8
 80050e0:	409a      	lsls	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d02a      	beq.n	8005140 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d025      	beq.n	8005140 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 020e 	bic.w	r2, r2, #14
 8005102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005108:	f003 021f 	and.w	r2, r3, #31
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	2101      	movs	r1, #1
 8005112:	fa01 f202 	lsl.w	r2, r1, r2
 8005116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800513e:	bf00      	nop
 8005140:	bf00      	nop
}
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800515e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005170:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	f003 021f 	and.w	r2, r3, #31
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	2101      	movs	r1, #1
 8005180:	fa01 f202 	lsl.w	r2, r1, r2
 8005184:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b10      	cmp	r3, #16
 8005194:	d108      	bne.n	80051a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051a6:	e007      	b.n	80051b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	60da      	str	r2, [r3, #12]
}
 80051b8:	bf00      	nop
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	4b16      	ldr	r3, [pc, #88]	@ (800522c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d802      	bhi.n	80051de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80051d8:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	e001      	b.n	80051e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80051de:	4b15      	ldr	r3, [pc, #84]	@ (8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80051e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	3b08      	subs	r3, #8
 80051ee:	4a12      	ldr	r2, [pc, #72]	@ (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fc:	089b      	lsrs	r3, r3, #2
 80051fe:	009a      	lsls	r2, r3, #2
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	461a      	mov	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a0b      	ldr	r2, [pc, #44]	@ (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800520e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	2201      	movs	r2, #1
 8005218:	409a      	lsls	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40020407 	.word	0x40020407
 8005230:	40020800 	.word	0x40020800
 8005234:	40020820 	.word	0x40020820
 8005238:	cccccccd 	.word	0xcccccccd
 800523c:	40020880 	.word	0x40020880

08005240 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4b0b      	ldr	r3, [pc, #44]	@ (8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	461a      	mov	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a08      	ldr	r2, [pc, #32]	@ (8005284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005262:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3b01      	subs	r3, #1
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	2201      	movs	r2, #1
 800526e:	409a      	lsls	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	1000823f 	.word	0x1000823f
 8005284:	40020940 	.word	0x40020940

08005288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005296:	e15a      	b.n	800554e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	2101      	movs	r1, #1
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	fa01 f303 	lsl.w	r3, r1, r3
 80052a4:	4013      	ands	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 814c 	beq.w	8005548 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d005      	beq.n	80052c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d130      	bne.n	800532a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	2203      	movs	r2, #3
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4013      	ands	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052fe:	2201      	movs	r2, #1
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4013      	ands	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	f003 0201 	and.w	r2, r3, #1
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b03      	cmp	r3, #3
 8005334:	d017      	beq.n	8005366 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	2203      	movs	r2, #3
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d123      	bne.n	80053ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	08da      	lsrs	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3208      	adds	r2, #8
 800537a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	220f      	movs	r2, #15
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4013      	ands	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	08da      	lsrs	r2, r3, #3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3208      	adds	r2, #8
 80053b4:	6939      	ldr	r1, [r7, #16]
 80053b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	2203      	movs	r2, #3
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4013      	ands	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f003 0203 	and.w	r2, r3, #3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80a6 	beq.w	8005548 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053fc:	4b5b      	ldr	r3, [pc, #364]	@ (800556c <HAL_GPIO_Init+0x2e4>)
 80053fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005400:	4a5a      	ldr	r2, [pc, #360]	@ (800556c <HAL_GPIO_Init+0x2e4>)
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6613      	str	r3, [r2, #96]	@ 0x60
 8005408:	4b58      	ldr	r3, [pc, #352]	@ (800556c <HAL_GPIO_Init+0x2e4>)
 800540a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005414:	4a56      	ldr	r2, [pc, #344]	@ (8005570 <HAL_GPIO_Init+0x2e8>)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	089b      	lsrs	r3, r3, #2
 800541a:	3302      	adds	r3, #2
 800541c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	220f      	movs	r2, #15
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4013      	ands	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800543e:	d01f      	beq.n	8005480 <HAL_GPIO_Init+0x1f8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a4c      	ldr	r2, [pc, #304]	@ (8005574 <HAL_GPIO_Init+0x2ec>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d019      	beq.n	800547c <HAL_GPIO_Init+0x1f4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a4b      	ldr	r2, [pc, #300]	@ (8005578 <HAL_GPIO_Init+0x2f0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_GPIO_Init+0x1f0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a4a      	ldr	r2, [pc, #296]	@ (800557c <HAL_GPIO_Init+0x2f4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00d      	beq.n	8005474 <HAL_GPIO_Init+0x1ec>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a49      	ldr	r2, [pc, #292]	@ (8005580 <HAL_GPIO_Init+0x2f8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <HAL_GPIO_Init+0x1e8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a48      	ldr	r2, [pc, #288]	@ (8005584 <HAL_GPIO_Init+0x2fc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d101      	bne.n	800546c <HAL_GPIO_Init+0x1e4>
 8005468:	2305      	movs	r3, #5
 800546a:	e00a      	b.n	8005482 <HAL_GPIO_Init+0x1fa>
 800546c:	2306      	movs	r3, #6
 800546e:	e008      	b.n	8005482 <HAL_GPIO_Init+0x1fa>
 8005470:	2304      	movs	r3, #4
 8005472:	e006      	b.n	8005482 <HAL_GPIO_Init+0x1fa>
 8005474:	2303      	movs	r3, #3
 8005476:	e004      	b.n	8005482 <HAL_GPIO_Init+0x1fa>
 8005478:	2302      	movs	r3, #2
 800547a:	e002      	b.n	8005482 <HAL_GPIO_Init+0x1fa>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <HAL_GPIO_Init+0x1fa>
 8005480:	2300      	movs	r3, #0
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	f002 0203 	and.w	r2, r2, #3
 8005488:	0092      	lsls	r2, r2, #2
 800548a:	4093      	lsls	r3, r2
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005492:	4937      	ldr	r1, [pc, #220]	@ (8005570 <HAL_GPIO_Init+0x2e8>)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	089b      	lsrs	r3, r3, #2
 8005498:	3302      	adds	r3, #2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054a0:	4b39      	ldr	r3, [pc, #228]	@ (8005588 <HAL_GPIO_Init+0x300>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	43db      	mvns	r3, r3
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4013      	ands	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054c4:	4a30      	ldr	r2, [pc, #192]	@ (8005588 <HAL_GPIO_Init+0x300>)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005588 <HAL_GPIO_Init+0x300>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4013      	ands	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80054ee:	4a26      	ldr	r2, [pc, #152]	@ (8005588 <HAL_GPIO_Init+0x300>)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80054f4:	4b24      	ldr	r3, [pc, #144]	@ (8005588 <HAL_GPIO_Init+0x300>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4013      	ands	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005518:	4a1b      	ldr	r2, [pc, #108]	@ (8005588 <HAL_GPIO_Init+0x300>)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800551e:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <HAL_GPIO_Init+0x300>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	43db      	mvns	r3, r3
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4013      	ands	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005542:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <HAL_GPIO_Init+0x300>)
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	3301      	adds	r3, #1
 800554c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	f47f ae9d 	bne.w	8005298 <HAL_GPIO_Init+0x10>
  }
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40021000 	.word	0x40021000
 8005570:	40010000 	.word	0x40010000
 8005574:	48000400 	.word	0x48000400
 8005578:	48000800 	.word	0x48000800
 800557c:	48000c00 	.word	0x48000c00
 8005580:	48001000 	.word	0x48001000
 8005584:	48001400 	.word	0x48001400
 8005588:	40010400 	.word	0x40010400

0800558c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	887b      	ldrh	r3, [r7, #2]
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055a4:	2301      	movs	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
 80055a8:	e001      	b.n	80055ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	807b      	strh	r3, [r7, #2]
 80055c8:	4613      	mov	r3, r2
 80055ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055cc:	787b      	ldrb	r3, [r7, #1]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055d2:	887a      	ldrh	r2, [r7, #2]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055d8:	e002      	b.n	80055e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055da:	887a      	ldrh	r2, [r7, #2]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055fe:	887a      	ldrh	r2, [r7, #2]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4013      	ands	r3, r2
 8005604:	041a      	lsls	r2, r3, #16
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	43d9      	mvns	r1, r3
 800560a:	887b      	ldrh	r3, [r7, #2]
 800560c:	400b      	ands	r3, r1
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800562a:	4b08      	ldr	r3, [pc, #32]	@ (800564c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d006      	beq.n	8005644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005636:	4a05      	ldr	r2, [pc, #20]	@ (800564c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	4618      	mov	r0, r3
 8005640:	f7fd f9fc 	bl	8002a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40010400 	.word	0x40010400

08005650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d141      	bne.n	80056e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800565e:	4b4b      	ldr	r3, [pc, #300]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800566a:	d131      	bne.n	80056d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800566c:	4b47      	ldr	r3, [pc, #284]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800566e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005672:	4a46      	ldr	r2, [pc, #280]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800567c:	4b43      	ldr	r3, [pc, #268]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005684:	4a41      	ldr	r2, [pc, #260]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800568a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800568c:	4b40      	ldr	r3, [pc, #256]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2232      	movs	r2, #50	@ 0x32
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	4a3f      	ldr	r2, [pc, #252]	@ (8005794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	0c9b      	lsrs	r3, r3, #18
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056a2:	e002      	b.n	80056aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056aa:	4b38      	ldr	r3, [pc, #224]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b6:	d102      	bne.n	80056be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f2      	bne.n	80056a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056be:	4b33      	ldr	r3, [pc, #204]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ca:	d158      	bne.n	800577e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e057      	b.n	8005780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056d0:	4b2e      	ldr	r3, [pc, #184]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056d6:	4a2d      	ldr	r2, [pc, #180]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80056e0:	e04d      	b.n	800577e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e8:	d141      	bne.n	800576e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056ea:	4b28      	ldr	r3, [pc, #160]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f6:	d131      	bne.n	800575c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056f8:	4b24      	ldr	r3, [pc, #144]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fe:	4a23      	ldr	r2, [pc, #140]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005708:	4b20      	ldr	r3, [pc, #128]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005710:	4a1e      	ldr	r2, [pc, #120]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005718:	4b1d      	ldr	r3, [pc, #116]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2232      	movs	r2, #50	@ 0x32
 800571e:	fb02 f303 	mul.w	r3, r2, r3
 8005722:	4a1c      	ldr	r2, [pc, #112]	@ (8005794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	0c9b      	lsrs	r3, r3, #18
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800572e:	e002      	b.n	8005736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3b01      	subs	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005736:	4b15      	ldr	r3, [pc, #84]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800573e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005742:	d102      	bne.n	800574a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f2      	bne.n	8005730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800574a:	4b10      	ldr	r3, [pc, #64]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005756:	d112      	bne.n	800577e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e011      	b.n	8005780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800575c:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800575e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005762:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005768:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800576c:	e007      	b.n	800577e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800576e:	4b07      	ldr	r3, [pc, #28]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005776:	4a05      	ldr	r2, [pc, #20]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005778:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800577c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	40007000 	.word	0x40007000
 8005790:	2000001c 	.word	0x2000001c
 8005794:	431bde83 	.word	0x431bde83

08005798 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800579c:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4a04      	ldr	r2, [pc, #16]	@ (80057b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057a6:	6093      	str	r3, [r2, #8]
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40007000 	.word	0x40007000

080057b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e2fe      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d075      	beq.n	80058c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057d6:	4b97      	ldr	r3, [pc, #604]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057e0:	4b94      	ldr	r3, [pc, #592]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	d102      	bne.n	80057f6 <HAL_RCC_OscConfig+0x3e>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d002      	beq.n	80057fc <HAL_RCC_OscConfig+0x44>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d10b      	bne.n	8005814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fc:	4b8d      	ldr	r3, [pc, #564]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d05b      	beq.n	80058c0 <HAL_RCC_OscConfig+0x108>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d157      	bne.n	80058c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e2d9      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800581c:	d106      	bne.n	800582c <HAL_RCC_OscConfig+0x74>
 800581e:	4b85      	ldr	r3, [pc, #532]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a84      	ldr	r2, [pc, #528]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e01d      	b.n	8005868 <HAL_RCC_OscConfig+0xb0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005834:	d10c      	bne.n	8005850 <HAL_RCC_OscConfig+0x98>
 8005836:	4b7f      	ldr	r3, [pc, #508]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800583c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	4b7c      	ldr	r3, [pc, #496]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a7b      	ldr	r2, [pc, #492]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e00b      	b.n	8005868 <HAL_RCC_OscConfig+0xb0>
 8005850:	4b78      	ldr	r3, [pc, #480]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a77      	ldr	r2, [pc, #476]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b75      	ldr	r3, [pc, #468]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a74      	ldr	r2, [pc, #464]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d013      	beq.n	8005898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fd fc22 	bl	80030b8 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fd fc1e 	bl	80030b8 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	@ 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e29e      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800588a:	4b6a      	ldr	r3, [pc, #424]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0xc0>
 8005896:	e014      	b.n	80058c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd fc0e 	bl	80030b8 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fd fc0a 	bl	80030b8 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	@ 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e28a      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058b2:	4b60      	ldr	r3, [pc, #384]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0xe8>
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d075      	beq.n	80059ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ce:	4b59      	ldr	r3, [pc, #356]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058d8:	4b56      	ldr	r3, [pc, #344]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d102      	bne.n	80058ee <HAL_RCC_OscConfig+0x136>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d002      	beq.n	80058f4 <HAL_RCC_OscConfig+0x13c>
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d11f      	bne.n	8005934 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_OscConfig+0x154>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e25d      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590c:	4b49      	ldr	r3, [pc, #292]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	4946      	ldr	r1, [pc, #280]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800591c:	4313      	orrs	r3, r2
 800591e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005920:	4b45      	ldr	r3, [pc, #276]	@ (8005a38 <HAL_RCC_OscConfig+0x280>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f7fd fb7b 	bl	8003020 <HAL_InitTick>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d043      	beq.n	80059b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e249      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d023      	beq.n	8005984 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800593c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a3c      	ldr	r2, [pc, #240]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7fd fbb6 	bl	80030b8 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005950:	f7fd fbb2 	bl	80030b8 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e232      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005962:	4b34      	ldr	r3, [pc, #208]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596e:	4b31      	ldr	r3, [pc, #196]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	061b      	lsls	r3, r3, #24
 800597c:	492d      	ldr	r1, [pc, #180]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800597e:	4313      	orrs	r3, r2
 8005980:	604b      	str	r3, [r1, #4]
 8005982:	e01a      	b.n	80059ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005984:	4b2b      	ldr	r3, [pc, #172]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a2a      	ldr	r2, [pc, #168]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800598a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800598e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd fb92 	bl	80030b8 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005998:	f7fd fb8e 	bl	80030b8 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e20e      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059aa:	4b22      	ldr	r3, [pc, #136]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x1e0>
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d041      	beq.n	8005a4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01c      	beq.n	8005a08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ce:	4b19      	ldr	r3, [pc, #100]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80059d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d4:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059de:	f7fd fb6b 	bl	80030b8 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e6:	f7fd fb67 	bl	80030b8 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e1e7      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80059fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ef      	beq.n	80059e6 <HAL_RCC_OscConfig+0x22e>
 8005a06:	e020      	b.n	8005a4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a08:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a0e:	4a09      	ldr	r2, [pc, #36]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	f023 0301 	bic.w	r3, r3, #1
 8005a14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a18:	f7fd fb4e 	bl	80030b8 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a1e:	e00d      	b.n	8005a3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a20:	f7fd fb4a 	bl	80030b8 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d906      	bls.n	8005a3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e1ca      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
 8005a32:	bf00      	nop
 8005a34:	40021000 	.word	0x40021000
 8005a38:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a3c:	4b8c      	ldr	r3, [pc, #560]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1ea      	bne.n	8005a20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80a6 	beq.w	8005ba4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a5c:	4b84      	ldr	r3, [pc, #528]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_OscConfig+0x2b4>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <HAL_RCC_OscConfig+0x2b6>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a72:	4b7f      	ldr	r3, [pc, #508]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a76:	4a7e      	ldr	r2, [pc, #504]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a8e:	4b79      	ldr	r3, [pc, #484]	@ (8005c74 <HAL_RCC_OscConfig+0x4bc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d118      	bne.n	8005acc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a9a:	4b76      	ldr	r3, [pc, #472]	@ (8005c74 <HAL_RCC_OscConfig+0x4bc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a75      	ldr	r2, [pc, #468]	@ (8005c74 <HAL_RCC_OscConfig+0x4bc>)
 8005aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aa6:	f7fd fb07 	bl	80030b8 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aae:	f7fd fb03 	bl	80030b8 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e183      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c74 <HAL_RCC_OscConfig+0x4bc>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d108      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x32e>
 8005ad4:	4b66      	ldr	r3, [pc, #408]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ada:	4a65      	ldr	r2, [pc, #404]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ae4:	e024      	b.n	8005b30 <HAL_RCC_OscConfig+0x378>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	d110      	bne.n	8005b10 <HAL_RCC_OscConfig+0x358>
 8005aee:	4b60      	ldr	r3, [pc, #384]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af4:	4a5e      	ldr	r2, [pc, #376]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005af6:	f043 0304 	orr.w	r3, r3, #4
 8005afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005afe:	4b5c      	ldr	r3, [pc, #368]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b04:	4a5a      	ldr	r2, [pc, #360]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b0e:	e00f      	b.n	8005b30 <HAL_RCC_OscConfig+0x378>
 8005b10:	4b57      	ldr	r3, [pc, #348]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	4a56      	ldr	r2, [pc, #344]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b20:	4b53      	ldr	r3, [pc, #332]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b26:	4a52      	ldr	r2, [pc, #328]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b28:	f023 0304 	bic.w	r3, r3, #4
 8005b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d016      	beq.n	8005b66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b38:	f7fd fabe 	bl	80030b8 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b40:	f7fd faba 	bl	80030b8 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e138      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b56:	4b46      	ldr	r3, [pc, #280]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0ed      	beq.n	8005b40 <HAL_RCC_OscConfig+0x388>
 8005b64:	e015      	b.n	8005b92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b66:	f7fd faa7 	bl	80030b8 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fd faa3 	bl	80030b8 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e121      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b84:	4b3a      	ldr	r3, [pc, #232]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1ed      	bne.n	8005b6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b92:	7ffb      	ldrb	r3, [r7, #31]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d105      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b98:	4b35      	ldr	r3, [pc, #212]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9c:	4a34      	ldr	r2, [pc, #208]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d03c      	beq.n	8005c2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01c      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc8:	f7fd fa76 	bl	80030b8 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bd0:	f7fd fa72 	bl	80030b8 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0f2      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005be2:	4b23      	ldr	r3, [pc, #140]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0ef      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x418>
 8005bf0:	e01b      	b.n	8005c2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fd fa59 	bl	80030b8 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c0a:	f7fd fa55 	bl	80030b8 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e0d5      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c1c:	4b14      	ldr	r3, [pc, #80]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ef      	bne.n	8005c0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 80c9 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c34:	4b0e      	ldr	r3, [pc, #56]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 030c 	and.w	r3, r3, #12
 8005c3c:	2b0c      	cmp	r3, #12
 8005c3e:	f000 8083 	beq.w	8005d48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d15e      	bne.n	8005d08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4a:	4b09      	ldr	r3, [pc, #36]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a08      	ldr	r2, [pc, #32]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005c50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fd fa2f 	bl	80030b8 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c5c:	e00c      	b.n	8005c78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c5e:	f7fd fa2b 	bl	80030b8 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d905      	bls.n	8005c78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0ab      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c78:	4b55      	ldr	r3, [pc, #340]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ec      	bne.n	8005c5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c84:	4b52      	ldr	r3, [pc, #328]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	4b52      	ldr	r3, [pc, #328]	@ (8005dd4 <HAL_RCC_OscConfig+0x61c>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6a11      	ldr	r1, [r2, #32]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c94:	3a01      	subs	r2, #1
 8005c96:	0112      	lsls	r2, r2, #4
 8005c98:	4311      	orrs	r1, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005c9e:	0212      	lsls	r2, r2, #8
 8005ca0:	4311      	orrs	r1, r2
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ca6:	0852      	lsrs	r2, r2, #1
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	0552      	lsls	r2, r2, #21
 8005cac:	4311      	orrs	r1, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cb2:	0852      	lsrs	r2, r2, #1
 8005cb4:	3a01      	subs	r2, #1
 8005cb6:	0652      	lsls	r2, r2, #25
 8005cb8:	4311      	orrs	r1, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cbe:	06d2      	lsls	r2, r2, #27
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	4943      	ldr	r1, [pc, #268]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc8:	4b41      	ldr	r3, [pc, #260]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a40      	ldr	r2, [pc, #256]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fd f9ea 	bl	80030b8 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fd f9e6 	bl	80030b8 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e066      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cfa:	4b35      	ldr	r3, [pc, #212]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x530>
 8005d06:	e05e      	b.n	8005dc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d08:	4b31      	ldr	r3, [pc, #196]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a30      	ldr	r2, [pc, #192]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fd f9d0 	bl	80030b8 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fd f9cc 	bl	80030b8 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e04c      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d2e:	4b28      	ldr	r3, [pc, #160]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d3a:	4b25      	ldr	r3, [pc, #148]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	4924      	ldr	r1, [pc, #144]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d40:	4b25      	ldr	r3, [pc, #148]	@ (8005dd8 <HAL_RCC_OscConfig+0x620>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	60cb      	str	r3, [r1, #12]
 8005d46:	e03e      	b.n	8005dc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e039      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d54:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f003 0203 	and.w	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d12c      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	3b01      	subs	r3, #1
 8005d74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d123      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d11b      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d113      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	3b01      	subs	r3, #1
 8005da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d109      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d001      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	019f800c 	.word	0x019f800c
 8005dd8:	feeefffc 	.word	0xfeeefffc

08005ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e11e      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005df4:	4b91      	ldr	r3, [pc, #580]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d910      	bls.n	8005e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e02:	4b8e      	ldr	r3, [pc, #568]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f023 020f 	bic.w	r2, r3, #15
 8005e0a:	498c      	ldr	r1, [pc, #560]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b8a      	ldr	r3, [pc, #552]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e106      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d073      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d129      	bne.n	8005e8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e38:	4b81      	ldr	r3, [pc, #516]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0f4      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e48:	f000 f99e 	bl	8006188 <RCC_GetSysClockFreqFromPLLSource>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4a7c      	ldr	r2, [pc, #496]	@ (8006044 <HAL_RCC_ClockConfig+0x268>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d93f      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e56:	4b7a      	ldr	r3, [pc, #488]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d033      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d12f      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e76:	4b72      	ldr	r3, [pc, #456]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e7e:	4a70      	ldr	r2, [pc, #448]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e86:	2380      	movs	r3, #128	@ 0x80
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e024      	b.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e94:	4b6a      	ldr	r3, [pc, #424]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0c6      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ea4:	4b66      	ldr	r3, [pc, #408]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0be      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005eb4:	f000 f8ce 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8005eb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4a61      	ldr	r2, [pc, #388]	@ (8006044 <HAL_RCC_ClockConfig+0x268>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d909      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eca:	4a5d      	ldr	r2, [pc, #372]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ed2:	2380      	movs	r3, #128	@ 0x80
 8005ed4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f023 0203 	bic.w	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4957      	ldr	r1, [pc, #348]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee8:	f7fd f8e6 	bl	80030b8 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef0:	f7fd f8e2 	bl	80030b8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e095      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f06:	4b4e      	ldr	r3, [pc, #312]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 020c 	and.w	r2, r3, #12
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d1eb      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d023      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f30:	4b43      	ldr	r3, [pc, #268]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4a42      	ldr	r2, [pc, #264]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f48:	4b3d      	ldr	r3, [pc, #244]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f50:	4a3b      	ldr	r2, [pc, #236]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f58:	4b39      	ldr	r3, [pc, #228]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4936      	ldr	r1, [pc, #216]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b80      	cmp	r3, #128	@ 0x80
 8005f70:	d105      	bne.n	8005f7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f72:	4b33      	ldr	r3, [pc, #204]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	4a32      	ldr	r2, [pc, #200]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d21d      	bcs.n	8005fc8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f023 020f 	bic.w	r2, r3, #15
 8005f94:	4929      	ldr	r1, [pc, #164]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f9c:	f7fd f88c 	bl	80030b8 <HAL_GetTick>
 8005fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa2:	e00a      	b.n	8005fba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa4:	f7fd f888 	bl	80030b8 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e03b      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fba:	4b20      	ldr	r3, [pc, #128]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d1ed      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d008      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4917      	ldr	r1, [pc, #92]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ff2:	4b13      	ldr	r3, [pc, #76]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	490f      	ldr	r1, [pc, #60]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006006:	f000 f825 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 800600a:	4602      	mov	r2, r0
 800600c:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	490c      	ldr	r1, [pc, #48]	@ (8006048 <HAL_RCC_ClockConfig+0x26c>)
 8006018:	5ccb      	ldrb	r3, [r1, r3]
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	fa22 f303 	lsr.w	r3, r2, r3
 8006022:	4a0a      	ldr	r2, [pc, #40]	@ (800604c <HAL_RCC_ClockConfig+0x270>)
 8006024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006026:	4b0a      	ldr	r3, [pc, #40]	@ (8006050 <HAL_RCC_ClockConfig+0x274>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f7fc fff8 	bl	8003020 <HAL_InitTick>
 8006030:	4603      	mov	r3, r0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40022000 	.word	0x40022000
 8006040:	40021000 	.word	0x40021000
 8006044:	04c4b400 	.word	0x04c4b400
 8006048:	0800a268 	.word	0x0800a268
 800604c:	2000001c 	.word	0x2000001c
 8006050:	20000020 	.word	0x20000020

08006054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800605a:	4b2c      	ldr	r3, [pc, #176]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b04      	cmp	r3, #4
 8006064:	d102      	bne.n	800606c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006066:	4b2a      	ldr	r3, [pc, #168]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e047      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800606c:	4b27      	ldr	r3, [pc, #156]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	2b08      	cmp	r3, #8
 8006076:	d102      	bne.n	800607e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006078:	4b26      	ldr	r3, [pc, #152]	@ (8006114 <HAL_RCC_GetSysClockFreq+0xc0>)
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e03e      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800607e:	4b23      	ldr	r3, [pc, #140]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
 8006086:	2b0c      	cmp	r3, #12
 8006088:	d136      	bne.n	80060f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800608a:	4b20      	ldr	r3, [pc, #128]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006094:	4b1d      	ldr	r3, [pc, #116]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	091b      	lsrs	r3, r3, #4
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	3301      	adds	r3, #1
 80060a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d10c      	bne.n	80060c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006114 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	4a16      	ldr	r2, [pc, #88]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b2:	68d2      	ldr	r2, [r2, #12]
 80060b4:	0a12      	lsrs	r2, r2, #8
 80060b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	617b      	str	r3, [r7, #20]
      break;
 80060c0:	e00c      	b.n	80060dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060c2:	4a13      	ldr	r2, [pc, #76]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ca:	4a10      	ldr	r2, [pc, #64]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060cc:	68d2      	ldr	r2, [r2, #12]
 80060ce:	0a12      	lsrs	r2, r2, #8
 80060d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060d4:	fb02 f303 	mul.w	r3, r2, r3
 80060d8:	617b      	str	r3, [r7, #20]
      break;
 80060da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060dc:	4b0b      	ldr	r3, [pc, #44]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	0e5b      	lsrs	r3, r3, #25
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	3301      	adds	r3, #1
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	e001      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80060fc:	693b      	ldr	r3, [r7, #16]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40021000 	.word	0x40021000
 8006110:	00f42400 	.word	0x00f42400
 8006114:	016e3600 	.word	0x016e3600

08006118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800611c:	4b03      	ldr	r3, [pc, #12]	@ (800612c <HAL_RCC_GetHCLKFreq+0x14>)
 800611e:	681b      	ldr	r3, [r3, #0]
}
 8006120:	4618      	mov	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	2000001c 	.word	0x2000001c

08006130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006134:	f7ff fff0 	bl	8006118 <HAL_RCC_GetHCLKFreq>
 8006138:	4602      	mov	r2, r0
 800613a:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	4904      	ldr	r1, [pc, #16]	@ (8006158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006146:	5ccb      	ldrb	r3, [r1, r3]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40021000 	.word	0x40021000
 8006158:	0800a278 	.word	0x0800a278

0800615c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006160:	f7ff ffda 	bl	8006118 <HAL_RCC_GetHCLKFreq>
 8006164:	4602      	mov	r2, r0
 8006166:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	0adb      	lsrs	r3, r3, #11
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	4904      	ldr	r1, [pc, #16]	@ (8006184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006172:	5ccb      	ldrb	r3, [r1, r3]
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40021000 	.word	0x40021000
 8006184:	0800a278 	.word	0x0800a278

08006188 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800618e:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006198:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d10c      	bne.n	80061c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ac:	4a17      	ldr	r2, [pc, #92]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b4:	4a14      	ldr	r2, [pc, #80]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061b6:	68d2      	ldr	r2, [r2, #12]
 80061b8:	0a12      	lsrs	r2, r2, #8
 80061ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	617b      	str	r3, [r7, #20]
    break;
 80061c4:	e00c      	b.n	80061e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061c6:	4a12      	ldr	r2, [pc, #72]	@ (8006210 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061d0:	68d2      	ldr	r2, [r2, #12]
 80061d2:	0a12      	lsrs	r2, r2, #8
 80061d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]
    break;
 80061de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061e0:	4b09      	ldr	r3, [pc, #36]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	0e5b      	lsrs	r3, r3, #25
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	3301      	adds	r3, #1
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061fa:	687b      	ldr	r3, [r7, #4]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	40021000 	.word	0x40021000
 800620c:	016e3600 	.word	0x016e3600
 8006210:	00f42400 	.word	0x00f42400

08006214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800621c:	2300      	movs	r3, #0
 800621e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006220:	2300      	movs	r3, #0
 8006222:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8098 	beq.w	8006362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006236:	4b43      	ldr	r3, [pc, #268]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10d      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006242:	4b40      	ldr	r3, [pc, #256]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006246:	4a3f      	ldr	r2, [pc, #252]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800624c:	6593      	str	r3, [r2, #88]	@ 0x58
 800624e:	4b3d      	ldr	r3, [pc, #244]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800625a:	2301      	movs	r3, #1
 800625c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800625e:	4b3a      	ldr	r3, [pc, #232]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a39      	ldr	r2, [pc, #228]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800626a:	f7fc ff25 	bl	80030b8 <HAL_GetTick>
 800626e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006270:	e009      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006272:	f7fc ff21 	bl	80030b8 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d902      	bls.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	74fb      	strb	r3, [r7, #19]
        break;
 8006284:	e005      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006286:	4b30      	ldr	r3, [pc, #192]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0ef      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006292:	7cfb      	ldrb	r3, [r7, #19]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d159      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006298:	4b2a      	ldr	r3, [pc, #168]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01e      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d019      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062b4:	4b23      	ldr	r3, [pc, #140]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062c0:	4b20      	ldr	r3, [pc, #128]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062e0:	4a18      	ldr	r2, [pc, #96]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d016      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f2:	f7fc fee1 	bl	80030b8 <HAL_GetTick>
 80062f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f8:	e00b      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fa:	f7fc fedd 	bl	80030b8 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006308:	4293      	cmp	r3, r2
 800630a:	d902      	bls.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	74fb      	strb	r3, [r7, #19]
            break;
 8006310:	e006      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006312:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0ec      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006320:	7cfb      	ldrb	r3, [r7, #19]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006326:	4b07      	ldr	r3, [pc, #28]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006334:	4903      	ldr	r1, [pc, #12]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800633c:	e008      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	74bb      	strb	r3, [r7, #18]
 8006342:	e005      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006344:	40021000 	.word	0x40021000
 8006348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634c:	7cfb      	ldrb	r3, [r7, #19]
 800634e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006350:	7c7b      	ldrb	r3, [r7, #17]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d105      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006356:	4ba7      	ldr	r3, [pc, #668]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	4aa6      	ldr	r2, [pc, #664]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006360:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800636e:	4ba1      	ldr	r3, [pc, #644]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006374:	f023 0203 	bic.w	r2, r3, #3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	499d      	ldr	r1, [pc, #628]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006390:	4b98      	ldr	r3, [pc, #608]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	f023 020c 	bic.w	r2, r3, #12
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	4995      	ldr	r1, [pc, #596]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063b2:	4b90      	ldr	r3, [pc, #576]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	498c      	ldr	r1, [pc, #560]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063d4:	4b87      	ldr	r3, [pc, #540]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	4984      	ldr	r1, [pc, #528]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063f6:	4b7f      	ldr	r3, [pc, #508]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	497b      	ldr	r1, [pc, #492]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006418:	4b76      	ldr	r3, [pc, #472]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	4973      	ldr	r1, [pc, #460]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800643a:	4b6e      	ldr	r3, [pc, #440]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006440:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	496a      	ldr	r1, [pc, #424]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800645c:	4b65      	ldr	r3, [pc, #404]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006462:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	4962      	ldr	r1, [pc, #392]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800647e:	4b5d      	ldr	r3, [pc, #372]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	4959      	ldr	r1, [pc, #356]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064a0:	4b54      	ldr	r3, [pc, #336]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064a6:	f023 0203 	bic.w	r2, r3, #3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ae:	4951      	ldr	r1, [pc, #324]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064c2:	4b4c      	ldr	r3, [pc, #304]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d0:	4948      	ldr	r1, [pc, #288]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d015      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064e4:	4b43      	ldr	r3, [pc, #268]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f2:	4940      	ldr	r1, [pc, #256]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006502:	d105      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006504:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a3a      	ldr	r2, [pc, #232]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800650e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800651c:	4b35      	ldr	r3, [pc, #212]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006522:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800652a:	4932      	ldr	r1, [pc, #200]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800653a:	d105      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800653c:	4b2d      	ldr	r3, [pc, #180]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4a2c      	ldr	r2, [pc, #176]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006546:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d015      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006554:	4b27      	ldr	r3, [pc, #156]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	4924      	ldr	r1, [pc, #144]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006572:	d105      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006574:	4b1f      	ldr	r3, [pc, #124]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a1e      	ldr	r2, [pc, #120]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800657e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d015      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800658c:	4b19      	ldr	r3, [pc, #100]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006592:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659a:	4916      	ldr	r1, [pc, #88]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065aa:	d105      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ac:	4b11      	ldr	r3, [pc, #68]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a10      	ldr	r2, [pc, #64]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d019      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065c4:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	4908      	ldr	r1, [pc, #32]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065e2:	d109      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e4:	4b03      	ldr	r3, [pc, #12]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a02      	ldr	r2, [pc, #8]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ee:	60d3      	str	r3, [r2, #12]
 80065f0:	e002      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80065f2:	bf00      	nop
 80065f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006604:	4b29      	ldr	r3, [pc, #164]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	4926      	ldr	r1, [pc, #152]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006622:	d105      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006624:	4b21      	ldr	r3, [pc, #132]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4a20      	ldr	r2, [pc, #128]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800662a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800662e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d015      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800663c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006642:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664a:	4918      	ldr	r1, [pc, #96]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800665a:	d105      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800665c:	4b13      	ldr	r3, [pc, #76]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a12      	ldr	r2, [pc, #72]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006666:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d015      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006674:	4b0d      	ldr	r3, [pc, #52]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800667a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006682:	490a      	ldr	r1, [pc, #40]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800668e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006692:	d105      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006694:	4b05      	ldr	r3, [pc, #20]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4a04      	ldr	r2, [pc, #16]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800669a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800669e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40021000 	.word	0x40021000

080066b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e049      	b.n	8006756 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fc faea 	bl	8002cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f000 ff68 	bl	80075c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d001      	beq.n	8006778 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e04c      	b.n	8006812 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a26      	ldr	r2, [pc, #152]	@ (8006820 <HAL_TIM_Base_Start+0xc0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d022      	beq.n	80067d0 <HAL_TIM_Base_Start+0x70>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006792:	d01d      	beq.n	80067d0 <HAL_TIM_Base_Start+0x70>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a22      	ldr	r2, [pc, #136]	@ (8006824 <HAL_TIM_Base_Start+0xc4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d018      	beq.n	80067d0 <HAL_TIM_Base_Start+0x70>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a21      	ldr	r2, [pc, #132]	@ (8006828 <HAL_TIM_Base_Start+0xc8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <HAL_TIM_Base_Start+0x70>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1f      	ldr	r2, [pc, #124]	@ (800682c <HAL_TIM_Base_Start+0xcc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00e      	beq.n	80067d0 <HAL_TIM_Base_Start+0x70>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006830 <HAL_TIM_Base_Start+0xd0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d009      	beq.n	80067d0 <HAL_TIM_Base_Start+0x70>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006834 <HAL_TIM_Base_Start+0xd4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d004      	beq.n	80067d0 <HAL_TIM_Base_Start+0x70>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006838 <HAL_TIM_Base_Start+0xd8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d115      	bne.n	80067fc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	4b19      	ldr	r3, [pc, #100]	@ (800683c <HAL_TIM_Base_Start+0xdc>)
 80067d8:	4013      	ands	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b06      	cmp	r3, #6
 80067e0:	d015      	beq.n	800680e <HAL_TIM_Base_Start+0xae>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e8:	d011      	beq.n	800680e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fa:	e008      	b.n	800680e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	e000      	b.n	8006810 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40013400 	.word	0x40013400
 8006834:	40014000 	.word	0x40014000
 8006838:	40015000 	.word	0x40015000
 800683c:	00010007 	.word	0x00010007

08006840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d001      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e054      	b.n	8006902 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a26      	ldr	r2, [pc, #152]	@ (8006910 <HAL_TIM_Base_Start_IT+0xd0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d022      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006882:	d01d      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a22      	ldr	r2, [pc, #136]	@ (8006914 <HAL_TIM_Base_Start_IT+0xd4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a21      	ldr	r2, [pc, #132]	@ (8006918 <HAL_TIM_Base_Start_IT+0xd8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1f      	ldr	r2, [pc, #124]	@ (800691c <HAL_TIM_Base_Start_IT+0xdc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006920 <HAL_TIM_Base_Start_IT+0xe0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006924 <HAL_TIM_Base_Start_IT+0xe4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006928 <HAL_TIM_Base_Start_IT+0xe8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d115      	bne.n	80068ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	4b19      	ldr	r3, [pc, #100]	@ (800692c <HAL_TIM_Base_Start_IT+0xec>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d015      	beq.n	80068fe <HAL_TIM_Base_Start_IT+0xbe>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d8:	d011      	beq.n	80068fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0201 	orr.w	r2, r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ea:	e008      	b.n	80068fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	e000      	b.n	8006900 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	40000c00 	.word	0x40000c00
 8006920:	40013400 	.word	0x40013400
 8006924:	40014000 	.word	0x40014000
 8006928:	40015000 	.word	0x40015000
 800692c:	00010007 	.word	0x00010007

08006930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e049      	b.n	80069d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f841 	bl	80069de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f000 fe28 	bl	80075c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d109      	bne.n	8006a18 <HAL_TIM_PWM_Start+0x24>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	bf14      	ite	ne
 8006a10:	2301      	movne	r3, #1
 8006a12:	2300      	moveq	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	e03c      	b.n	8006a92 <HAL_TIM_PWM_Start+0x9e>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d109      	bne.n	8006a32 <HAL_TIM_PWM_Start+0x3e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e02f      	b.n	8006a92 <HAL_TIM_PWM_Start+0x9e>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d109      	bne.n	8006a4c <HAL_TIM_PWM_Start+0x58>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	bf14      	ite	ne
 8006a44:	2301      	movne	r3, #1
 8006a46:	2300      	moveq	r3, #0
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	e022      	b.n	8006a92 <HAL_TIM_PWM_Start+0x9e>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b0c      	cmp	r3, #12
 8006a50:	d109      	bne.n	8006a66 <HAL_TIM_PWM_Start+0x72>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	bf14      	ite	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	2300      	moveq	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	e015      	b.n	8006a92 <HAL_TIM_PWM_Start+0x9e>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b10      	cmp	r3, #16
 8006a6a:	d109      	bne.n	8006a80 <HAL_TIM_PWM_Start+0x8c>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	bf14      	ite	ne
 8006a78:	2301      	movne	r3, #1
 8006a7a:	2300      	moveq	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	e008      	b.n	8006a92 <HAL_TIM_PWM_Start+0x9e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e0a6      	b.n	8006be8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d104      	bne.n	8006aaa <HAL_TIM_PWM_Start+0xb6>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006aa8:	e023      	b.n	8006af2 <HAL_TIM_PWM_Start+0xfe>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d104      	bne.n	8006aba <HAL_TIM_PWM_Start+0xc6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ab8:	e01b      	b.n	8006af2 <HAL_TIM_PWM_Start+0xfe>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d104      	bne.n	8006aca <HAL_TIM_PWM_Start+0xd6>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ac8:	e013      	b.n	8006af2 <HAL_TIM_PWM_Start+0xfe>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b0c      	cmp	r3, #12
 8006ace:	d104      	bne.n	8006ada <HAL_TIM_PWM_Start+0xe6>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ad8:	e00b      	b.n	8006af2 <HAL_TIM_PWM_Start+0xfe>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	d104      	bne.n	8006aea <HAL_TIM_PWM_Start+0xf6>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ae8:	e003      	b.n	8006af2 <HAL_TIM_PWM_Start+0xfe>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2201      	movs	r2, #1
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 f9dc 	bl	8007eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a3a      	ldr	r2, [pc, #232]	@ (8006bf0 <HAL_TIM_PWM_Start+0x1fc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d018      	beq.n	8006b3c <HAL_TIM_PWM_Start+0x148>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a39      	ldr	r2, [pc, #228]	@ (8006bf4 <HAL_TIM_PWM_Start+0x200>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d013      	beq.n	8006b3c <HAL_TIM_PWM_Start+0x148>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a37      	ldr	r2, [pc, #220]	@ (8006bf8 <HAL_TIM_PWM_Start+0x204>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00e      	beq.n	8006b3c <HAL_TIM_PWM_Start+0x148>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a36      	ldr	r2, [pc, #216]	@ (8006bfc <HAL_TIM_PWM_Start+0x208>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d009      	beq.n	8006b3c <HAL_TIM_PWM_Start+0x148>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a34      	ldr	r2, [pc, #208]	@ (8006c00 <HAL_TIM_PWM_Start+0x20c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIM_PWM_Start+0x148>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a33      	ldr	r2, [pc, #204]	@ (8006c04 <HAL_TIM_PWM_Start+0x210>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIM_PWM_Start+0x14c>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <HAL_TIM_PWM_Start+0x14e>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a25      	ldr	r2, [pc, #148]	@ (8006bf0 <HAL_TIM_PWM_Start+0x1fc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d022      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x1b2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b68:	d01d      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x1b2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a26      	ldr	r2, [pc, #152]	@ (8006c08 <HAL_TIM_PWM_Start+0x214>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d018      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x1b2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a24      	ldr	r2, [pc, #144]	@ (8006c0c <HAL_TIM_PWM_Start+0x218>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x1b2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a23      	ldr	r2, [pc, #140]	@ (8006c10 <HAL_TIM_PWM_Start+0x21c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x1b2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a19      	ldr	r2, [pc, #100]	@ (8006bf4 <HAL_TIM_PWM_Start+0x200>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x1b2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a18      	ldr	r2, [pc, #96]	@ (8006bf8 <HAL_TIM_PWM_Start+0x204>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x1b2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	@ (8006c04 <HAL_TIM_PWM_Start+0x210>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d115      	bne.n	8006bd2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	4b19      	ldr	r3, [pc, #100]	@ (8006c14 <HAL_TIM_PWM_Start+0x220>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b06      	cmp	r3, #6
 8006bb6:	d015      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1f0>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bbe:	d011      	beq.n	8006be4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0201 	orr.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd0:	e008      	b.n	8006be4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f042 0201 	orr.w	r2, r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e000      	b.n	8006be6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	40012c00 	.word	0x40012c00
 8006bf4:	40013400 	.word	0x40013400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40014400 	.word	0x40014400
 8006c00:	40014800 	.word	0x40014800
 8006c04:	40015000 	.word	0x40015000
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
 8006c14:	00010007 	.word	0x00010007

08006c18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e097      	b.n	8006d5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d106      	bne.n	8006c46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fc f8a9 	bl	8002d98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6812      	ldr	r2, [r2, #0]
 8006c58:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006c5c:	f023 0307 	bic.w	r3, r3, #7
 8006c60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f000 fca9 	bl	80075c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	4313      	orrs	r3, r2
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006cb8:	f023 030c 	bic.w	r3, r3, #12
 8006cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	011a      	lsls	r2, r3, #4
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	031b      	lsls	r3, r3, #12
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006cf6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d110      	bne.n	8006db6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d102      	bne.n	8006da0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d9a:	7b7b      	ldrb	r3, [r7, #13]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d001      	beq.n	8006da4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e069      	b.n	8006e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006db4:	e031      	b.n	8006e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d110      	bne.n	8006dde <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d102      	bne.n	8006dc8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dc2:	7b3b      	ldrb	r3, [r7, #12]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d001      	beq.n	8006dcc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e055      	b.n	8006e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ddc:	e01d      	b.n	8006e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d108      	bne.n	8006df6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d105      	bne.n	8006df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dea:	7b7b      	ldrb	r3, [r7, #13]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d102      	bne.n	8006df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006df0:	7b3b      	ldrb	r3, [r7, #12]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d001      	beq.n	8006dfa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e03e      	b.n	8006e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2202      	movs	r2, #2
 8006e06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_TIM_Encoder_Start+0xc4>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d008      	beq.n	8006e38 <HAL_TIM_Encoder_Start+0xd4>
 8006e26:	e00f      	b.n	8006e48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	2100      	movs	r1, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 f841 	bl	8007eb8 <TIM_CCxChannelCmd>
      break;
 8006e36:	e016      	b.n	8006e66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	2104      	movs	r1, #4
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 f839 	bl	8007eb8 <TIM_CCxChannelCmd>
      break;
 8006e46:	e00e      	b.n	8006e66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	f001 f831 	bl	8007eb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	2104      	movs	r1, #4
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 f82a 	bl	8007eb8 <TIM_CCxChannelCmd>
      break;
 8006e64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0201 	orr.w	r2, r2, #1
 8006e74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d020      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01b      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0202 	mvn.w	r2, #2
 8006eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fb5c 	bl	8007588 <HAL_TIM_IC_CaptureCallback>
 8006ed0:	e005      	b.n	8006ede <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb4e 	bl	8007574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fb5f 	bl	800759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d020      	beq.n	8006f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01b      	beq.n	8006f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0204 	mvn.w	r2, #4
 8006f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fb36 	bl	8007588 <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fb28 	bl	8007574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fb39 	bl	800759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d020      	beq.n	8006f7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01b      	beq.n	8006f7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f06f 0208 	mvn.w	r2, #8
 8006f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2204      	movs	r2, #4
 8006f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fb10 	bl	8007588 <HAL_TIM_IC_CaptureCallback>
 8006f68:	e005      	b.n	8006f76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fb02 	bl	8007574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fb13 	bl	800759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d020      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01b      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0210 	mvn.w	r2, #16
 8006f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2208      	movs	r2, #8
 8006f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 faea 	bl	8007588 <HAL_TIM_IC_CaptureCallback>
 8006fb4:	e005      	b.n	8006fc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fadc 	bl	8007574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 faed 	bl	800759c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00c      	beq.n	8006fec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0201 	mvn.w	r2, #1
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa fea4 	bl	8001d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00c      	beq.n	800701a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007006:	2b00      	cmp	r3, #0
 8007008:	d007      	beq.n	800701a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 f815 	bl	8008044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00c      	beq.n	800703e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 f80d 	bl	8008058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800705a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 faa7 	bl	80075b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f06f 0220 	mvn.w	r2, #32
 800707e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 ffd5 	bl	8008030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80070a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 ffe1 	bl	800806c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00c      	beq.n	80070ce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80070c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 ffd9 	bl	8008080 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80070ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 ffd1 	bl	8008094 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00c      	beq.n	8007116 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800710e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 ffc9 	bl	80080a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
	...

08007120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800713a:	2302      	movs	r3, #2
 800713c:	e0ff      	b.n	800733e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b14      	cmp	r3, #20
 800714a:	f200 80f0 	bhi.w	800732e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800714e:	a201      	add	r2, pc, #4	@ (adr r2, 8007154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	080071a9 	.word	0x080071a9
 8007158:	0800732f 	.word	0x0800732f
 800715c:	0800732f 	.word	0x0800732f
 8007160:	0800732f 	.word	0x0800732f
 8007164:	080071e9 	.word	0x080071e9
 8007168:	0800732f 	.word	0x0800732f
 800716c:	0800732f 	.word	0x0800732f
 8007170:	0800732f 	.word	0x0800732f
 8007174:	0800722b 	.word	0x0800722b
 8007178:	0800732f 	.word	0x0800732f
 800717c:	0800732f 	.word	0x0800732f
 8007180:	0800732f 	.word	0x0800732f
 8007184:	0800726b 	.word	0x0800726b
 8007188:	0800732f 	.word	0x0800732f
 800718c:	0800732f 	.word	0x0800732f
 8007190:	0800732f 	.word	0x0800732f
 8007194:	080072ad 	.word	0x080072ad
 8007198:	0800732f 	.word	0x0800732f
 800719c:	0800732f 	.word	0x0800732f
 80071a0:	0800732f 	.word	0x0800732f
 80071a4:	080072ed 	.word	0x080072ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fabc 	bl	800772c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0208 	orr.w	r2, r2, #8
 80071c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0204 	bic.w	r2, r2, #4
 80071d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6999      	ldr	r1, [r3, #24]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	691a      	ldr	r2, [r3, #16]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	619a      	str	r2, [r3, #24]
      break;
 80071e6:	e0a5      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fb36 	bl	8007860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6999      	ldr	r1, [r3, #24]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	021a      	lsls	r2, r3, #8
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	619a      	str	r2, [r3, #24]
      break;
 8007228:	e084      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fba9 	bl	8007988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69da      	ldr	r2, [r3, #28]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0208 	orr.w	r2, r2, #8
 8007244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69da      	ldr	r2, [r3, #28]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0204 	bic.w	r2, r2, #4
 8007254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69d9      	ldr	r1, [r3, #28]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	691a      	ldr	r2, [r3, #16]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	61da      	str	r2, [r3, #28]
      break;
 8007268:	e064      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fc1b 	bl	8007aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69da      	ldr	r2, [r3, #28]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69d9      	ldr	r1, [r3, #28]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	021a      	lsls	r2, r3, #8
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	61da      	str	r2, [r3, #28]
      break;
 80072aa:	e043      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fc8e 	bl	8007bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0208 	orr.w	r2, r2, #8
 80072c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0204 	bic.w	r2, r2, #4
 80072d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80072ea:	e023      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fcd8 	bl	8007ca8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007306:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007316:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	021a      	lsls	r2, r3, #8
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800732c:	e002      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
      break;
 8007332:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_TIM_ConfigClockSource+0x1c>
 8007360:	2302      	movs	r3, #2
 8007362:	e0f6      	b.n	8007552 <HAL_TIM_ConfigClockSource+0x20a>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007382:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800738e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6f      	ldr	r2, [pc, #444]	@ (800755c <HAL_TIM_ConfigClockSource+0x214>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	f000 80c1 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 80073a4:	4a6d      	ldr	r2, [pc, #436]	@ (800755c <HAL_TIM_ConfigClockSource+0x214>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	f200 80c6 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 80073ac:	4a6c      	ldr	r2, [pc, #432]	@ (8007560 <HAL_TIM_ConfigClockSource+0x218>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	f000 80b9 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 80073b4:	4a6a      	ldr	r2, [pc, #424]	@ (8007560 <HAL_TIM_ConfigClockSource+0x218>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	f200 80be 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 80073bc:	4a69      	ldr	r2, [pc, #420]	@ (8007564 <HAL_TIM_ConfigClockSource+0x21c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	f000 80b1 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 80073c4:	4a67      	ldr	r2, [pc, #412]	@ (8007564 <HAL_TIM_ConfigClockSource+0x21c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	f200 80b6 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 80073cc:	4a66      	ldr	r2, [pc, #408]	@ (8007568 <HAL_TIM_ConfigClockSource+0x220>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	f000 80a9 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 80073d4:	4a64      	ldr	r2, [pc, #400]	@ (8007568 <HAL_TIM_ConfigClockSource+0x220>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	f200 80ae 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 80073dc:	4a63      	ldr	r2, [pc, #396]	@ (800756c <HAL_TIM_ConfigClockSource+0x224>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	f000 80a1 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 80073e4:	4a61      	ldr	r2, [pc, #388]	@ (800756c <HAL_TIM_ConfigClockSource+0x224>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	f200 80a6 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 80073ec:	4a60      	ldr	r2, [pc, #384]	@ (8007570 <HAL_TIM_ConfigClockSource+0x228>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	f000 8099 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 80073f4:	4a5e      	ldr	r2, [pc, #376]	@ (8007570 <HAL_TIM_ConfigClockSource+0x228>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	f200 809e 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 80073fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007400:	f000 8091 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 8007404:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007408:	f200 8096 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 800740c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007410:	f000 8089 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 8007414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007418:	f200 808e 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 800741c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007420:	d03e      	beq.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
 8007422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007426:	f200 8087 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 800742a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800742e:	f000 8086 	beq.w	800753e <HAL_TIM_ConfigClockSource+0x1f6>
 8007432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007436:	d87f      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 8007438:	2b70      	cmp	r3, #112	@ 0x70
 800743a:	d01a      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0x12a>
 800743c:	2b70      	cmp	r3, #112	@ 0x70
 800743e:	d87b      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 8007440:	2b60      	cmp	r3, #96	@ 0x60
 8007442:	d050      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0x19e>
 8007444:	2b60      	cmp	r3, #96	@ 0x60
 8007446:	d877      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 8007448:	2b50      	cmp	r3, #80	@ 0x50
 800744a:	d03c      	beq.n	80074c6 <HAL_TIM_ConfigClockSource+0x17e>
 800744c:	2b50      	cmp	r3, #80	@ 0x50
 800744e:	d873      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 8007450:	2b40      	cmp	r3, #64	@ 0x40
 8007452:	d058      	beq.n	8007506 <HAL_TIM_ConfigClockSource+0x1be>
 8007454:	2b40      	cmp	r3, #64	@ 0x40
 8007456:	d86f      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 8007458:	2b30      	cmp	r3, #48	@ 0x30
 800745a:	d064      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 800745c:	2b30      	cmp	r3, #48	@ 0x30
 800745e:	d86b      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 8007460:	2b20      	cmp	r3, #32
 8007462:	d060      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 8007464:	2b20      	cmp	r3, #32
 8007466:	d867      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d05c      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 800746c:	2b10      	cmp	r3, #16
 800746e:	d05a      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x1de>
 8007470:	e062      	b.n	8007538 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007482:	f000 fcf9 	bl	8007e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	609a      	str	r2, [r3, #8]
      break;
 800749e:	e04f      	b.n	8007540 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074b0:	f000 fce2 	bl	8007e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074c2:	609a      	str	r2, [r3, #8]
      break;
 80074c4:	e03c      	b.n	8007540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074d2:	461a      	mov	r2, r3
 80074d4:	f000 fc54 	bl	8007d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2150      	movs	r1, #80	@ 0x50
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fcad 	bl	8007e3e <TIM_ITRx_SetConfig>
      break;
 80074e4:	e02c      	b.n	8007540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074f2:	461a      	mov	r2, r3
 80074f4:	f000 fc73 	bl	8007dde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2160      	movs	r1, #96	@ 0x60
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fc9d 	bl	8007e3e <TIM_ITRx_SetConfig>
      break;
 8007504:	e01c      	b.n	8007540 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007512:	461a      	mov	r2, r3
 8007514:	f000 fc34 	bl	8007d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2140      	movs	r1, #64	@ 0x40
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fc8d 	bl	8007e3e <TIM_ITRx_SetConfig>
      break;
 8007524:	e00c      	b.n	8007540 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f000 fc84 	bl	8007e3e <TIM_ITRx_SetConfig>
      break;
 8007536:	e003      	b.n	8007540 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
      break;
 800753c:	e000      	b.n	8007540 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800753e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	00100070 	.word	0x00100070
 8007560:	00100060 	.word	0x00100060
 8007564:	00100050 	.word	0x00100050
 8007568:	00100040 	.word	0x00100040
 800756c:	00100030 	.word	0x00100030
 8007570:	00100020 	.word	0x00100020

08007574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a4c      	ldr	r2, [pc, #304]	@ (8007708 <TIM_Base_SetConfig+0x144>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d017      	beq.n	800760c <TIM_Base_SetConfig+0x48>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075e2:	d013      	beq.n	800760c <TIM_Base_SetConfig+0x48>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a49      	ldr	r2, [pc, #292]	@ (800770c <TIM_Base_SetConfig+0x148>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00f      	beq.n	800760c <TIM_Base_SetConfig+0x48>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a48      	ldr	r2, [pc, #288]	@ (8007710 <TIM_Base_SetConfig+0x14c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00b      	beq.n	800760c <TIM_Base_SetConfig+0x48>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a47      	ldr	r2, [pc, #284]	@ (8007714 <TIM_Base_SetConfig+0x150>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d007      	beq.n	800760c <TIM_Base_SetConfig+0x48>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a46      	ldr	r2, [pc, #280]	@ (8007718 <TIM_Base_SetConfig+0x154>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d003      	beq.n	800760c <TIM_Base_SetConfig+0x48>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a45      	ldr	r2, [pc, #276]	@ (800771c <TIM_Base_SetConfig+0x158>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a39      	ldr	r2, [pc, #228]	@ (8007708 <TIM_Base_SetConfig+0x144>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d023      	beq.n	800766e <TIM_Base_SetConfig+0xaa>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762c:	d01f      	beq.n	800766e <TIM_Base_SetConfig+0xaa>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a36      	ldr	r2, [pc, #216]	@ (800770c <TIM_Base_SetConfig+0x148>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d01b      	beq.n	800766e <TIM_Base_SetConfig+0xaa>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a35      	ldr	r2, [pc, #212]	@ (8007710 <TIM_Base_SetConfig+0x14c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d017      	beq.n	800766e <TIM_Base_SetConfig+0xaa>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a34      	ldr	r2, [pc, #208]	@ (8007714 <TIM_Base_SetConfig+0x150>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <TIM_Base_SetConfig+0xaa>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a33      	ldr	r2, [pc, #204]	@ (8007718 <TIM_Base_SetConfig+0x154>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00f      	beq.n	800766e <TIM_Base_SetConfig+0xaa>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a33      	ldr	r2, [pc, #204]	@ (8007720 <TIM_Base_SetConfig+0x15c>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00b      	beq.n	800766e <TIM_Base_SetConfig+0xaa>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a32      	ldr	r2, [pc, #200]	@ (8007724 <TIM_Base_SetConfig+0x160>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d007      	beq.n	800766e <TIM_Base_SetConfig+0xaa>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a31      	ldr	r2, [pc, #196]	@ (8007728 <TIM_Base_SetConfig+0x164>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d003      	beq.n	800766e <TIM_Base_SetConfig+0xaa>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a2c      	ldr	r2, [pc, #176]	@ (800771c <TIM_Base_SetConfig+0x158>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d108      	bne.n	8007680 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a18      	ldr	r2, [pc, #96]	@ (8007708 <TIM_Base_SetConfig+0x144>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d013      	beq.n	80076d4 <TIM_Base_SetConfig+0x110>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007718 <TIM_Base_SetConfig+0x154>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00f      	beq.n	80076d4 <TIM_Base_SetConfig+0x110>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a1a      	ldr	r2, [pc, #104]	@ (8007720 <TIM_Base_SetConfig+0x15c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00b      	beq.n	80076d4 <TIM_Base_SetConfig+0x110>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a19      	ldr	r2, [pc, #100]	@ (8007724 <TIM_Base_SetConfig+0x160>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d007      	beq.n	80076d4 <TIM_Base_SetConfig+0x110>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a18      	ldr	r2, [pc, #96]	@ (8007728 <TIM_Base_SetConfig+0x164>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_Base_SetConfig+0x110>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a13      	ldr	r2, [pc, #76]	@ (800771c <TIM_Base_SetConfig+0x158>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d103      	bne.n	80076dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d105      	bne.n	80076fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f023 0201 	bic.w	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	611a      	str	r2, [r3, #16]
  }
}
 80076fa:	bf00      	nop
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40000400 	.word	0x40000400
 8007710:	40000800 	.word	0x40000800
 8007714:	40000c00 	.word	0x40000c00
 8007718:	40013400 	.word	0x40013400
 800771c:	40015000 	.word	0x40015000
 8007720:	40014000 	.word	0x40014000
 8007724:	40014400 	.word	0x40014400
 8007728:	40014800 	.word	0x40014800

0800772c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	f023 0201 	bic.w	r2, r3, #1
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800775a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800775e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0303 	bic.w	r3, r3, #3
 8007766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 0302 	bic.w	r3, r3, #2
 8007778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a30      	ldr	r2, [pc, #192]	@ (8007848 <TIM_OC1_SetConfig+0x11c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d013      	beq.n	80077b4 <TIM_OC1_SetConfig+0x88>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a2f      	ldr	r2, [pc, #188]	@ (800784c <TIM_OC1_SetConfig+0x120>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00f      	beq.n	80077b4 <TIM_OC1_SetConfig+0x88>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a2e      	ldr	r2, [pc, #184]	@ (8007850 <TIM_OC1_SetConfig+0x124>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00b      	beq.n	80077b4 <TIM_OC1_SetConfig+0x88>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a2d      	ldr	r2, [pc, #180]	@ (8007854 <TIM_OC1_SetConfig+0x128>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d007      	beq.n	80077b4 <TIM_OC1_SetConfig+0x88>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007858 <TIM_OC1_SetConfig+0x12c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d003      	beq.n	80077b4 <TIM_OC1_SetConfig+0x88>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a2b      	ldr	r2, [pc, #172]	@ (800785c <TIM_OC1_SetConfig+0x130>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d10c      	bne.n	80077ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 0308 	bic.w	r3, r3, #8
 80077ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f023 0304 	bic.w	r3, r3, #4
 80077cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007848 <TIM_OC1_SetConfig+0x11c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <TIM_OC1_SetConfig+0xd2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1c      	ldr	r2, [pc, #112]	@ (800784c <TIM_OC1_SetConfig+0x120>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_OC1_SetConfig+0xd2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007850 <TIM_OC1_SetConfig+0x124>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_OC1_SetConfig+0xd2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007854 <TIM_OC1_SetConfig+0x128>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_OC1_SetConfig+0xd2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a19      	ldr	r2, [pc, #100]	@ (8007858 <TIM_OC1_SetConfig+0x12c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC1_SetConfig+0xd2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a18      	ldr	r2, [pc, #96]	@ (800785c <TIM_OC1_SetConfig+0x130>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d111      	bne.n	8007822 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800780c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	621a      	str	r2, [r3, #32]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800
 800785c:	40015000 	.word	0x40015000

08007860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	f023 0210 	bic.w	r2, r3, #16
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800788e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 0320 	bic.w	r3, r3, #32
 80078ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a2c      	ldr	r2, [pc, #176]	@ (8007970 <TIM_OC2_SetConfig+0x110>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d007      	beq.n	80078d4 <TIM_OC2_SetConfig+0x74>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007974 <TIM_OC2_SetConfig+0x114>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d003      	beq.n	80078d4 <TIM_OC2_SetConfig+0x74>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007978 <TIM_OC2_SetConfig+0x118>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d10d      	bne.n	80078f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007970 <TIM_OC2_SetConfig+0x110>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d013      	beq.n	8007920 <TIM_OC2_SetConfig+0xc0>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007974 <TIM_OC2_SetConfig+0x114>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00f      	beq.n	8007920 <TIM_OC2_SetConfig+0xc0>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a1e      	ldr	r2, [pc, #120]	@ (800797c <TIM_OC2_SetConfig+0x11c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00b      	beq.n	8007920 <TIM_OC2_SetConfig+0xc0>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a1d      	ldr	r2, [pc, #116]	@ (8007980 <TIM_OC2_SetConfig+0x120>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d007      	beq.n	8007920 <TIM_OC2_SetConfig+0xc0>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a1c      	ldr	r2, [pc, #112]	@ (8007984 <TIM_OC2_SetConfig+0x124>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d003      	beq.n	8007920 <TIM_OC2_SetConfig+0xc0>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a17      	ldr	r2, [pc, #92]	@ (8007978 <TIM_OC2_SetConfig+0x118>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d113      	bne.n	8007948 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800792e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40012c00 	.word	0x40012c00
 8007974:	40013400 	.word	0x40013400
 8007978:	40015000 	.word	0x40015000
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800

08007988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	021b      	lsls	r3, r3, #8
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007a94 <TIM_OC3_SetConfig+0x10c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d007      	beq.n	80079fa <TIM_OC3_SetConfig+0x72>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a2a      	ldr	r2, [pc, #168]	@ (8007a98 <TIM_OC3_SetConfig+0x110>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d003      	beq.n	80079fa <TIM_OC3_SetConfig+0x72>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a29      	ldr	r2, [pc, #164]	@ (8007a9c <TIM_OC3_SetConfig+0x114>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d10d      	bne.n	8007a16 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a1e      	ldr	r2, [pc, #120]	@ (8007a94 <TIM_OC3_SetConfig+0x10c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d013      	beq.n	8007a46 <TIM_OC3_SetConfig+0xbe>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a1d      	ldr	r2, [pc, #116]	@ (8007a98 <TIM_OC3_SetConfig+0x110>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00f      	beq.n	8007a46 <TIM_OC3_SetConfig+0xbe>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa0 <TIM_OC3_SetConfig+0x118>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00b      	beq.n	8007a46 <TIM_OC3_SetConfig+0xbe>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a1c      	ldr	r2, [pc, #112]	@ (8007aa4 <TIM_OC3_SetConfig+0x11c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d007      	beq.n	8007a46 <TIM_OC3_SetConfig+0xbe>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a1b      	ldr	r2, [pc, #108]	@ (8007aa8 <TIM_OC3_SetConfig+0x120>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d003      	beq.n	8007a46 <TIM_OC3_SetConfig+0xbe>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a16      	ldr	r2, [pc, #88]	@ (8007a9c <TIM_OC3_SetConfig+0x114>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d113      	bne.n	8007a6e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	621a      	str	r2, [r3, #32]
}
 8007a88:	bf00      	nop
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	40012c00 	.word	0x40012c00
 8007a98:	40013400 	.word	0x40013400
 8007a9c:	40015000 	.word	0x40015000
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800

08007aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	021b      	lsls	r3, r3, #8
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	031b      	lsls	r3, r3, #12
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8007bbc <TIM_OC4_SetConfig+0x110>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d007      	beq.n	8007b20 <TIM_OC4_SetConfig+0x74>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a2b      	ldr	r2, [pc, #172]	@ (8007bc0 <TIM_OC4_SetConfig+0x114>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC4_SetConfig+0x74>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8007bc4 <TIM_OC4_SetConfig+0x118>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d10d      	bne.n	8007b3c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	031b      	lsls	r3, r3, #12
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007bbc <TIM_OC4_SetConfig+0x110>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d013      	beq.n	8007b6c <TIM_OC4_SetConfig+0xc0>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a1e      	ldr	r2, [pc, #120]	@ (8007bc0 <TIM_OC4_SetConfig+0x114>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00f      	beq.n	8007b6c <TIM_OC4_SetConfig+0xc0>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8007bc8 <TIM_OC4_SetConfig+0x11c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00b      	beq.n	8007b6c <TIM_OC4_SetConfig+0xc0>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a1d      	ldr	r2, [pc, #116]	@ (8007bcc <TIM_OC4_SetConfig+0x120>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d007      	beq.n	8007b6c <TIM_OC4_SetConfig+0xc0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007bd0 <TIM_OC4_SetConfig+0x124>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d003      	beq.n	8007b6c <TIM_OC4_SetConfig+0xc0>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a17      	ldr	r2, [pc, #92]	@ (8007bc4 <TIM_OC4_SetConfig+0x118>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d113      	bne.n	8007b94 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b72:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b7a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	019b      	lsls	r3, r3, #6
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	019b      	lsls	r3, r3, #6
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	621a      	str	r2, [r3, #32]
}
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	40012c00 	.word	0x40012c00
 8007bc0:	40013400 	.word	0x40013400
 8007bc4:	40015000 	.word	0x40015000
 8007bc8:	40014000 	.word	0x40014000
 8007bcc:	40014400 	.word	0x40014400
 8007bd0:	40014800 	.word	0x40014800

08007bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a19      	ldr	r2, [pc, #100]	@ (8007c90 <TIM_OC5_SetConfig+0xbc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d013      	beq.n	8007c56 <TIM_OC5_SetConfig+0x82>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a18      	ldr	r2, [pc, #96]	@ (8007c94 <TIM_OC5_SetConfig+0xc0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00f      	beq.n	8007c56 <TIM_OC5_SetConfig+0x82>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a17      	ldr	r2, [pc, #92]	@ (8007c98 <TIM_OC5_SetConfig+0xc4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00b      	beq.n	8007c56 <TIM_OC5_SetConfig+0x82>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a16      	ldr	r2, [pc, #88]	@ (8007c9c <TIM_OC5_SetConfig+0xc8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d007      	beq.n	8007c56 <TIM_OC5_SetConfig+0x82>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a15      	ldr	r2, [pc, #84]	@ (8007ca0 <TIM_OC5_SetConfig+0xcc>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <TIM_OC5_SetConfig+0x82>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a14      	ldr	r2, [pc, #80]	@ (8007ca4 <TIM_OC5_SetConfig+0xd0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d109      	bne.n	8007c6a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	621a      	str	r2, [r3, #32]
}
 8007c84:	bf00      	nop
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	40012c00 	.word	0x40012c00
 8007c94:	40013400 	.word	0x40013400
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40014400 	.word	0x40014400
 8007ca0:	40014800 	.word	0x40014800
 8007ca4:	40015000 	.word	0x40015000

08007ca8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	051b      	lsls	r3, r3, #20
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8007d68 <TIM_OC6_SetConfig+0xc0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d013      	beq.n	8007d2c <TIM_OC6_SetConfig+0x84>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a19      	ldr	r2, [pc, #100]	@ (8007d6c <TIM_OC6_SetConfig+0xc4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d00f      	beq.n	8007d2c <TIM_OC6_SetConfig+0x84>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a18      	ldr	r2, [pc, #96]	@ (8007d70 <TIM_OC6_SetConfig+0xc8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00b      	beq.n	8007d2c <TIM_OC6_SetConfig+0x84>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a17      	ldr	r2, [pc, #92]	@ (8007d74 <TIM_OC6_SetConfig+0xcc>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d007      	beq.n	8007d2c <TIM_OC6_SetConfig+0x84>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a16      	ldr	r2, [pc, #88]	@ (8007d78 <TIM_OC6_SetConfig+0xd0>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d003      	beq.n	8007d2c <TIM_OC6_SetConfig+0x84>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a15      	ldr	r2, [pc, #84]	@ (8007d7c <TIM_OC6_SetConfig+0xd4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d109      	bne.n	8007d40 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	029b      	lsls	r3, r3, #10
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	621a      	str	r2, [r3, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40013400 	.word	0x40013400
 8007d70:	40014000 	.word	0x40014000
 8007d74:	40014400 	.word	0x40014400
 8007d78:	40014800 	.word	0x40014800
 8007d7c:	40015000 	.word	0x40015000

08007d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f023 0201 	bic.w	r2, r3, #1
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f023 030a 	bic.w	r3, r3, #10
 8007dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	621a      	str	r2, [r3, #32]
}
 8007dd2:	bf00      	nop
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b087      	sub	sp, #28
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f023 0210 	bic.w	r2, r3, #16
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	031b      	lsls	r3, r3, #12
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	621a      	str	r2, [r3, #32]
}
 8007e32:	bf00      	nop
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b085      	sub	sp, #20
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f043 0307 	orr.w	r3, r3, #7
 8007e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	609a      	str	r2, [r3, #8]
}
 8007e6c:	bf00      	nop
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	021a      	lsls	r2, r3, #8
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	609a      	str	r2, [r3, #8]
}
 8007eac:	bf00      	nop
 8007eae:	371c      	adds	r7, #28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f003 031f 	and.w	r3, r3, #31
 8007eca:	2201      	movs	r2, #1
 8007ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a1a      	ldr	r2, [r3, #32]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	43db      	mvns	r3, r3
 8007eda:	401a      	ands	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a1a      	ldr	r2, [r3, #32]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f003 031f 	and.w	r3, r3, #31
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	621a      	str	r2, [r3, #32]
}
 8007ef6:	bf00      	nop
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
	...

08007f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d101      	bne.n	8007f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e074      	b.n	8008006 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a34      	ldr	r2, [pc, #208]	@ (8008014 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d009      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a33      	ldr	r2, [pc, #204]	@ (8008018 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d004      	beq.n	8007f5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a31      	ldr	r2, [pc, #196]	@ (800801c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d108      	bne.n	8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a21      	ldr	r2, [pc, #132]	@ (8008014 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d022      	beq.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f9c:	d01d      	beq.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8008020 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d018      	beq.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1d      	ldr	r2, [pc, #116]	@ (8008024 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d013      	beq.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8008028 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00e      	beq.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a15      	ldr	r2, [pc, #84]	@ (8008018 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d009      	beq.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a18      	ldr	r2, [pc, #96]	@ (800802c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d004      	beq.n	8007fda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a11      	ldr	r2, [pc, #68]	@ (800801c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d10c      	bne.n	8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40012c00 	.word	0x40012c00
 8008018:	40013400 	.word	0x40013400
 800801c:	40015000 	.word	0x40015000
 8008020:	40000400 	.word	0x40000400
 8008024:	40000800 	.word	0x40000800
 8008028:	40000c00 	.word	0x40000c00
 800802c:	40014000 	.word	0x40014000

08008030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e042      	b.n	8008154 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d106      	bne.n	80080e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fa fd85 	bl	8002bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2224      	movs	r2, #36	@ 0x24
 80080ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0201 	bic.w	r2, r2, #1
 80080fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 feb4 	bl	8008e74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fbb5 	bl	800887c <UART_SetConfig>
 8008112:	4603      	mov	r3, r0
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e01b      	b.n	8008154 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800812a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800813a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 0201 	orr.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 ff33 	bl	8008fb8 <UART_CheckIdleState>
 8008152:	4603      	mov	r3, r0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08a      	sub	sp, #40	@ 0x28
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008170:	2b20      	cmp	r3, #32
 8008172:	d137      	bne.n	80081e4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <HAL_UART_Receive_IT+0x24>
 800817a:	88fb      	ldrh	r3, [r7, #6]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e030      	b.n	80081e6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a18      	ldr	r2, [pc, #96]	@ (80081f0 <HAL_UART_Receive_IT+0x94>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d01f      	beq.n	80081d4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d018      	beq.n	80081d4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	613b      	str	r3, [r7, #16]
   return(result);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	623b      	str	r3, [r7, #32]
 80081c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	6a3a      	ldr	r2, [r7, #32]
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e6      	bne.n	80081a2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081d4:	88fb      	ldrh	r3, [r7, #6]
 80081d6:	461a      	mov	r2, r3
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f001 f804 	bl	80091e8 <UART_Start_Receive_IT>
 80081e0:	4603      	mov	r3, r0
 80081e2:	e000      	b.n	80081e6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081e4:	2302      	movs	r3, #2
  }
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3728      	adds	r7, #40	@ 0x28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40008000 	.word	0x40008000

080081f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b0ba      	sub	sp, #232	@ 0xe8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800821a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800821e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008222:	4013      	ands	r3, r2
 8008224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800822c:	2b00      	cmp	r3, #0
 800822e:	d11b      	bne.n	8008268 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d015      	beq.n	8008268 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800823c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d105      	bne.n	8008254 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800824c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d009      	beq.n	8008268 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 82e3 	beq.w	8008824 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	4798      	blx	r3
      }
      return;
 8008266:	e2dd      	b.n	8008824 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 8123 	beq.w	80084b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008272:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008276:	4b8d      	ldr	r3, [pc, #564]	@ (80084ac <HAL_UART_IRQHandler+0x2b8>)
 8008278:	4013      	ands	r3, r2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800827e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008282:	4b8b      	ldr	r3, [pc, #556]	@ (80084b0 <HAL_UART_IRQHandler+0x2bc>)
 8008284:	4013      	ands	r3, r2
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8116 	beq.w	80084b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d011      	beq.n	80082bc <HAL_UART_IRQHandler+0xc8>
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800829c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2201      	movs	r2, #1
 80082aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b2:	f043 0201 	orr.w	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d011      	beq.n	80082ec <HAL_UART_IRQHandler+0xf8>
 80082c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00b      	beq.n	80082ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2202      	movs	r2, #2
 80082da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e2:	f043 0204 	orr.w	r2, r3, #4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d011      	beq.n	800831c <HAL_UART_IRQHandler+0x128>
 80082f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2204      	movs	r2, #4
 800830a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008312:	f043 0202 	orr.w	r2, r3, #2
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800831c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008320:	f003 0308 	and.w	r3, r3, #8
 8008324:	2b00      	cmp	r3, #0
 8008326:	d017      	beq.n	8008358 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b00      	cmp	r3, #0
 8008332:	d105      	bne.n	8008340 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008334:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008338:	4b5c      	ldr	r3, [pc, #368]	@ (80084ac <HAL_UART_IRQHandler+0x2b8>)
 800833a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2208      	movs	r2, #8
 8008346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800834e:	f043 0208 	orr.w	r2, r3, #8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800835c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008360:	2b00      	cmp	r3, #0
 8008362:	d012      	beq.n	800838a <HAL_UART_IRQHandler+0x196>
 8008364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008368:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00c      	beq.n	800838a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008380:	f043 0220 	orr.w	r2, r3, #32
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 8249 	beq.w	8008828 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d013      	beq.n	80083ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d105      	bne.n	80083ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083de:	2b40      	cmp	r3, #64	@ 0x40
 80083e0:	d005      	beq.n	80083ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d054      	beq.n	8008498 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 f81c 	bl	800942c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083fe:	2b40      	cmp	r3, #64	@ 0x40
 8008400:	d146      	bne.n	8008490 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3308      	adds	r3, #8
 8008408:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008418:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800841c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3308      	adds	r3, #8
 800842a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800842e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008432:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800843a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1d9      	bne.n	8008402 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008454:	2b00      	cmp	r3, #0
 8008456:	d017      	beq.n	8008488 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800845e:	4a15      	ldr	r2, [pc, #84]	@ (80084b4 <HAL_UART_IRQHandler+0x2c0>)
 8008460:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008468:	4618      	mov	r0, r3
 800846a:	f7fc fd57 	bl	8004f1c <HAL_DMA_Abort_IT>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d019      	beq.n	80084a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800847a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008482:	4610      	mov	r0, r2
 8008484:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008486:	e00f      	b.n	80084a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f9e1 	bl	8008850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848e:	e00b      	b.n	80084a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f9dd 	bl	8008850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008496:	e007      	b.n	80084a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f9d9 	bl	8008850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80084a6:	e1bf      	b.n	8008828 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a8:	bf00      	nop
    return;
 80084aa:	e1bd      	b.n	8008828 <HAL_UART_IRQHandler+0x634>
 80084ac:	10000001 	.word	0x10000001
 80084b0:	04000120 	.word	0x04000120
 80084b4:	080094f9 	.word	0x080094f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084bc:	2b01      	cmp	r3, #1
 80084be:	f040 8153 	bne.w	8008768 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80084c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c6:	f003 0310 	and.w	r3, r3, #16
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 814c 	beq.w	8008768 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80084d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 8145 	beq.w	8008768 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2210      	movs	r2, #16
 80084e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f0:	2b40      	cmp	r3, #64	@ 0x40
 80084f2:	f040 80bb 	bne.w	800866c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 818f 	beq.w	800882c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008514:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008518:	429a      	cmp	r2, r3
 800851a:	f080 8187 	bcs.w	800882c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008524:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b00      	cmp	r3, #0
 8008538:	f040 8087 	bne.w	800864a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008550:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008566:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800856a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008572:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800857e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1da      	bne.n	800853c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008596:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80085aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80085ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80085b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80085bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e1      	bne.n	8008586 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80085d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80085e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e3      	bne.n	80085c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008618:	f023 0310 	bic.w	r3, r3, #16
 800861c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
 8008626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800862a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800862c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008630:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e4      	bne.n	8008608 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008644:	4618      	mov	r0, r3
 8008646:	f7fc fc10 	bl	8004e6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2202      	movs	r2, #2
 800864e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800865c:	b29b      	uxth	r3, r3
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	b29b      	uxth	r3, r3
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f8fd 	bl	8008864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800866a:	e0df      	b.n	800882c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008678:	b29b      	uxth	r3, r3
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008686:	b29b      	uxth	r3, r3
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 80d1 	beq.w	8008830 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800868e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80cc 	beq.w	8008830 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	461a      	mov	r2, r3
 80086b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80086bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e4      	bne.n	8008698 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3308      	adds	r3, #8
 80086d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	623b      	str	r3, [r7, #32]
   return(result);
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086e4:	f023 0301 	bic.w	r3, r3, #1
 80086e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3308      	adds	r3, #8
 80086f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80086f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80086f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e1      	bne.n	80086ce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2220      	movs	r2, #32
 800870e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	60fb      	str	r3, [r7, #12]
   return(result);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0310 	bic.w	r3, r3, #16
 8008732:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	69b9      	ldr	r1, [r7, #24]
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	617b      	str	r3, [r7, #20]
   return(result);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e4      	bne.n	800871e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800875a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f87f 	bl	8008864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008766:	e063      	b.n	8008830 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800876c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00e      	beq.n	8008792 <HAL_UART_IRQHandler+0x59e>
 8008774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008778:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d008      	beq.n	8008792 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008788:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 fc12 	bl	8009fb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008790:	e051      	b.n	8008836 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800879a:	2b00      	cmp	r3, #0
 800879c:	d014      	beq.n	80087c8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800879e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d105      	bne.n	80087b6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80087aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d008      	beq.n	80087c8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d03a      	beq.n	8008834 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
    }
    return;
 80087c6:	e035      	b.n	8008834 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d009      	beq.n	80087e8 <HAL_UART_IRQHandler+0x5f4>
 80087d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fe9f 	bl	8009524 <UART_EndTransmit_IT>
    return;
 80087e6:	e026      	b.n	8008836 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80087e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d009      	beq.n	8008808 <HAL_UART_IRQHandler+0x614>
 80087f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 fbeb 	bl	8009fdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008806:	e016      	b.n	8008836 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800880c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d010      	beq.n	8008836 <HAL_UART_IRQHandler+0x642>
 8008814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008818:	2b00      	cmp	r3, #0
 800881a:	da0c      	bge.n	8008836 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fbd3 	bl	8009fc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008822:	e008      	b.n	8008836 <HAL_UART_IRQHandler+0x642>
      return;
 8008824:	bf00      	nop
 8008826:	e006      	b.n	8008836 <HAL_UART_IRQHandler+0x642>
    return;
 8008828:	bf00      	nop
 800882a:	e004      	b.n	8008836 <HAL_UART_IRQHandler+0x642>
      return;
 800882c:	bf00      	nop
 800882e:	e002      	b.n	8008836 <HAL_UART_IRQHandler+0x642>
      return;
 8008830:	bf00      	nop
 8008832:	e000      	b.n	8008836 <HAL_UART_IRQHandler+0x642>
    return;
 8008834:	bf00      	nop
  }
}
 8008836:	37e8      	adds	r7, #232	@ 0xe8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800887c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008880:	b08c      	sub	sp, #48	@ 0x30
 8008882:	af00      	add	r7, sp, #0
 8008884:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	431a      	orrs	r2, r3
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	431a      	orrs	r2, r3
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4baa      	ldr	r3, [pc, #680]	@ (8008b54 <UART_SetConfig+0x2d8>)
 80088ac:	4013      	ands	r3, r2
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088b4:	430b      	orrs	r3, r1
 80088b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a9f      	ldr	r2, [pc, #636]	@ (8008b58 <UART_SetConfig+0x2dc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d004      	beq.n	80088e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088e4:	4313      	orrs	r3, r2
 80088e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80088f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	6812      	ldr	r2, [r2, #0]
 80088fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088fc:	430b      	orrs	r3, r1
 80088fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008906:	f023 010f 	bic.w	r1, r3, #15
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a90      	ldr	r2, [pc, #576]	@ (8008b5c <UART_SetConfig+0x2e0>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d125      	bne.n	800896c <UART_SetConfig+0xf0>
 8008920:	4b8f      	ldr	r3, [pc, #572]	@ (8008b60 <UART_SetConfig+0x2e4>)
 8008922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	2b03      	cmp	r3, #3
 800892c:	d81a      	bhi.n	8008964 <UART_SetConfig+0xe8>
 800892e:	a201      	add	r2, pc, #4	@ (adr r2, 8008934 <UART_SetConfig+0xb8>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	08008945 	.word	0x08008945
 8008938:	08008955 	.word	0x08008955
 800893c:	0800894d 	.word	0x0800894d
 8008940:	0800895d 	.word	0x0800895d
 8008944:	2301      	movs	r3, #1
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894a:	e116      	b.n	8008b7a <UART_SetConfig+0x2fe>
 800894c:	2302      	movs	r3, #2
 800894e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008952:	e112      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008954:	2304      	movs	r3, #4
 8008956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800895a:	e10e      	b.n	8008b7a <UART_SetConfig+0x2fe>
 800895c:	2308      	movs	r3, #8
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008962:	e10a      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800896a:	e106      	b.n	8008b7a <UART_SetConfig+0x2fe>
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a7c      	ldr	r2, [pc, #496]	@ (8008b64 <UART_SetConfig+0x2e8>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d138      	bne.n	80089e8 <UART_SetConfig+0x16c>
 8008976:	4b7a      	ldr	r3, [pc, #488]	@ (8008b60 <UART_SetConfig+0x2e4>)
 8008978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800897c:	f003 030c 	and.w	r3, r3, #12
 8008980:	2b0c      	cmp	r3, #12
 8008982:	d82d      	bhi.n	80089e0 <UART_SetConfig+0x164>
 8008984:	a201      	add	r2, pc, #4	@ (adr r2, 800898c <UART_SetConfig+0x110>)
 8008986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898a:	bf00      	nop
 800898c:	080089c1 	.word	0x080089c1
 8008990:	080089e1 	.word	0x080089e1
 8008994:	080089e1 	.word	0x080089e1
 8008998:	080089e1 	.word	0x080089e1
 800899c:	080089d1 	.word	0x080089d1
 80089a0:	080089e1 	.word	0x080089e1
 80089a4:	080089e1 	.word	0x080089e1
 80089a8:	080089e1 	.word	0x080089e1
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089e1 	.word	0x080089e1
 80089b4:	080089e1 	.word	0x080089e1
 80089b8:	080089e1 	.word	0x080089e1
 80089bc:	080089d9 	.word	0x080089d9
 80089c0:	2300      	movs	r3, #0
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089c6:	e0d8      	b.n	8008b7a <UART_SetConfig+0x2fe>
 80089c8:	2302      	movs	r3, #2
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ce:	e0d4      	b.n	8008b7a <UART_SetConfig+0x2fe>
 80089d0:	2304      	movs	r3, #4
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089d6:	e0d0      	b.n	8008b7a <UART_SetConfig+0x2fe>
 80089d8:	2308      	movs	r3, #8
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089de:	e0cc      	b.n	8008b7a <UART_SetConfig+0x2fe>
 80089e0:	2310      	movs	r3, #16
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e6:	e0c8      	b.n	8008b7a <UART_SetConfig+0x2fe>
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a5e      	ldr	r2, [pc, #376]	@ (8008b68 <UART_SetConfig+0x2ec>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d125      	bne.n	8008a3e <UART_SetConfig+0x1c2>
 80089f2:	4b5b      	ldr	r3, [pc, #364]	@ (8008b60 <UART_SetConfig+0x2e4>)
 80089f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80089fc:	2b30      	cmp	r3, #48	@ 0x30
 80089fe:	d016      	beq.n	8008a2e <UART_SetConfig+0x1b2>
 8008a00:	2b30      	cmp	r3, #48	@ 0x30
 8008a02:	d818      	bhi.n	8008a36 <UART_SetConfig+0x1ba>
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	d00a      	beq.n	8008a1e <UART_SetConfig+0x1a2>
 8008a08:	2b20      	cmp	r3, #32
 8008a0a:	d814      	bhi.n	8008a36 <UART_SetConfig+0x1ba>
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <UART_SetConfig+0x19a>
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	d008      	beq.n	8008a26 <UART_SetConfig+0x1aa>
 8008a14:	e00f      	b.n	8008a36 <UART_SetConfig+0x1ba>
 8008a16:	2300      	movs	r3, #0
 8008a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a1c:	e0ad      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a1e:	2302      	movs	r3, #2
 8008a20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a24:	e0a9      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a26:	2304      	movs	r3, #4
 8008a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a2c:	e0a5      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a2e:	2308      	movs	r3, #8
 8008a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a34:	e0a1      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a36:	2310      	movs	r3, #16
 8008a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a3c:	e09d      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a4a      	ldr	r2, [pc, #296]	@ (8008b6c <UART_SetConfig+0x2f0>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d125      	bne.n	8008a94 <UART_SetConfig+0x218>
 8008a48:	4b45      	ldr	r3, [pc, #276]	@ (8008b60 <UART_SetConfig+0x2e4>)
 8008a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008a52:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a54:	d016      	beq.n	8008a84 <UART_SetConfig+0x208>
 8008a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a58:	d818      	bhi.n	8008a8c <UART_SetConfig+0x210>
 8008a5a:	2b80      	cmp	r3, #128	@ 0x80
 8008a5c:	d00a      	beq.n	8008a74 <UART_SetConfig+0x1f8>
 8008a5e:	2b80      	cmp	r3, #128	@ 0x80
 8008a60:	d814      	bhi.n	8008a8c <UART_SetConfig+0x210>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <UART_SetConfig+0x1f0>
 8008a66:	2b40      	cmp	r3, #64	@ 0x40
 8008a68:	d008      	beq.n	8008a7c <UART_SetConfig+0x200>
 8008a6a:	e00f      	b.n	8008a8c <UART_SetConfig+0x210>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a72:	e082      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a74:	2302      	movs	r3, #2
 8008a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a7a:	e07e      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a7c:	2304      	movs	r3, #4
 8008a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a82:	e07a      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a84:	2308      	movs	r3, #8
 8008a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a8a:	e076      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a92:	e072      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a35      	ldr	r2, [pc, #212]	@ (8008b70 <UART_SetConfig+0x2f4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d12a      	bne.n	8008af4 <UART_SetConfig+0x278>
 8008a9e:	4b30      	ldr	r3, [pc, #192]	@ (8008b60 <UART_SetConfig+0x2e4>)
 8008aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aac:	d01a      	beq.n	8008ae4 <UART_SetConfig+0x268>
 8008aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ab2:	d81b      	bhi.n	8008aec <UART_SetConfig+0x270>
 8008ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab8:	d00c      	beq.n	8008ad4 <UART_SetConfig+0x258>
 8008aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008abe:	d815      	bhi.n	8008aec <UART_SetConfig+0x270>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <UART_SetConfig+0x250>
 8008ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac8:	d008      	beq.n	8008adc <UART_SetConfig+0x260>
 8008aca:	e00f      	b.n	8008aec <UART_SetConfig+0x270>
 8008acc:	2300      	movs	r3, #0
 8008ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ad2:	e052      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ada:	e04e      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008adc:	2304      	movs	r3, #4
 8008ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ae2:	e04a      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008ae4:	2308      	movs	r3, #8
 8008ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aea:	e046      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008aec:	2310      	movs	r3, #16
 8008aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af2:	e042      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a17      	ldr	r2, [pc, #92]	@ (8008b58 <UART_SetConfig+0x2dc>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d13a      	bne.n	8008b74 <UART_SetConfig+0x2f8>
 8008afe:	4b18      	ldr	r3, [pc, #96]	@ (8008b60 <UART_SetConfig+0x2e4>)
 8008b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008b08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b0c:	d01a      	beq.n	8008b44 <UART_SetConfig+0x2c8>
 8008b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b12:	d81b      	bhi.n	8008b4c <UART_SetConfig+0x2d0>
 8008b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b18:	d00c      	beq.n	8008b34 <UART_SetConfig+0x2b8>
 8008b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b1e:	d815      	bhi.n	8008b4c <UART_SetConfig+0x2d0>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <UART_SetConfig+0x2b0>
 8008b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b28:	d008      	beq.n	8008b3c <UART_SetConfig+0x2c0>
 8008b2a:	e00f      	b.n	8008b4c <UART_SetConfig+0x2d0>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b32:	e022      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008b34:	2302      	movs	r3, #2
 8008b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b3a:	e01e      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b42:	e01a      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008b44:	2308      	movs	r3, #8
 8008b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b4a:	e016      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b52:	e012      	b.n	8008b7a <UART_SetConfig+0x2fe>
 8008b54:	cfff69f3 	.word	0xcfff69f3
 8008b58:	40008000 	.word	0x40008000
 8008b5c:	40013800 	.word	0x40013800
 8008b60:	40021000 	.word	0x40021000
 8008b64:	40004400 	.word	0x40004400
 8008b68:	40004800 	.word	0x40004800
 8008b6c:	40004c00 	.word	0x40004c00
 8008b70:	40005000 	.word	0x40005000
 8008b74:	2310      	movs	r3, #16
 8008b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4aae      	ldr	r2, [pc, #696]	@ (8008e38 <UART_SetConfig+0x5bc>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	f040 8097 	bne.w	8008cb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b8a:	2b08      	cmp	r3, #8
 8008b8c:	d823      	bhi.n	8008bd6 <UART_SetConfig+0x35a>
 8008b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <UART_SetConfig+0x318>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008bb9 	.word	0x08008bb9
 8008b98:	08008bd7 	.word	0x08008bd7
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bd7 	.word	0x08008bd7
 8008ba4:	08008bc7 	.word	0x08008bc7
 8008ba8:	08008bd7 	.word	0x08008bd7
 8008bac:	08008bd7 	.word	0x08008bd7
 8008bb0:	08008bd7 	.word	0x08008bd7
 8008bb4:	08008bcf 	.word	0x08008bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bb8:	f7fd faba 	bl	8006130 <HAL_RCC_GetPCLK1Freq>
 8008bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bbe:	e010      	b.n	8008be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bc0:	4b9e      	ldr	r3, [pc, #632]	@ (8008e3c <UART_SetConfig+0x5c0>)
 8008bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bc4:	e00d      	b.n	8008be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bc6:	f7fd fa45 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8008bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bcc:	e009      	b.n	8008be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bd4:	e005      	b.n	8008be2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8130 	beq.w	8008e4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	4a94      	ldr	r2, [pc, #592]	@ (8008e40 <UART_SetConfig+0x5c4>)
 8008bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	4613      	mov	r3, r2
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	4413      	add	r3, r2
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d305      	bcc.n	8008c1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d903      	bls.n	8008c22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c20:	e113      	b.n	8008e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c24:	2200      	movs	r2, #0
 8008c26:	60bb      	str	r3, [r7, #8]
 8008c28:	60fa      	str	r2, [r7, #12]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2e:	4a84      	ldr	r2, [pc, #528]	@ (8008e40 <UART_SetConfig+0x5c4>)
 8008c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	2200      	movs	r2, #0
 8008c38:	603b      	str	r3, [r7, #0]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c44:	f7f7 ff8e 	bl	8000b64 <__aeabi_uldivmod>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4619      	mov	r1, r3
 8008c50:	f04f 0200 	mov.w	r2, #0
 8008c54:	f04f 0300 	mov.w	r3, #0
 8008c58:	020b      	lsls	r3, r1, #8
 8008c5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c5e:	0202      	lsls	r2, r0, #8
 8008c60:	6979      	ldr	r1, [r7, #20]
 8008c62:	6849      	ldr	r1, [r1, #4]
 8008c64:	0849      	lsrs	r1, r1, #1
 8008c66:	2000      	movs	r0, #0
 8008c68:	460c      	mov	r4, r1
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	eb12 0804 	adds.w	r8, r2, r4
 8008c70:	eb43 0905 	adc.w	r9, r3, r5
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	469a      	mov	sl, r3
 8008c7c:	4693      	mov	fp, r2
 8008c7e:	4652      	mov	r2, sl
 8008c80:	465b      	mov	r3, fp
 8008c82:	4640      	mov	r0, r8
 8008c84:	4649      	mov	r1, r9
 8008c86:	f7f7 ff6d 	bl	8000b64 <__aeabi_uldivmod>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4613      	mov	r3, r2
 8008c90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c98:	d308      	bcc.n	8008cac <UART_SetConfig+0x430>
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ca0:	d204      	bcs.n	8008cac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6a3a      	ldr	r2, [r7, #32]
 8008ca8:	60da      	str	r2, [r3, #12]
 8008caa:	e0ce      	b.n	8008e4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008cb2:	e0ca      	b.n	8008e4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cbc:	d166      	bne.n	8008d8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008cc2:	2b08      	cmp	r3, #8
 8008cc4:	d827      	bhi.n	8008d16 <UART_SetConfig+0x49a>
 8008cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ccc <UART_SetConfig+0x450>)
 8008cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ccc:	08008cf1 	.word	0x08008cf1
 8008cd0:	08008cf9 	.word	0x08008cf9
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	08008d17 	.word	0x08008d17
 8008cdc:	08008d07 	.word	0x08008d07
 8008ce0:	08008d17 	.word	0x08008d17
 8008ce4:	08008d17 	.word	0x08008d17
 8008ce8:	08008d17 	.word	0x08008d17
 8008cec:	08008d0f 	.word	0x08008d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cf0:	f7fd fa1e 	bl	8006130 <HAL_RCC_GetPCLK1Freq>
 8008cf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cf6:	e014      	b.n	8008d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cf8:	f7fd fa30 	bl	800615c <HAL_RCC_GetPCLK2Freq>
 8008cfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cfe:	e010      	b.n	8008d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d00:	4b4e      	ldr	r3, [pc, #312]	@ (8008e3c <UART_SetConfig+0x5c0>)
 8008d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d04:	e00d      	b.n	8008d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d06:	f7fd f9a5 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8008d0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d0c:	e009      	b.n	8008d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d14:	e005      	b.n	8008d22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8090 	beq.w	8008e4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d2e:	4a44      	ldr	r2, [pc, #272]	@ (8008e40 <UART_SetConfig+0x5c4>)
 8008d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d34:	461a      	mov	r2, r3
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d3c:	005a      	lsls	r2, r3, #1
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	441a      	add	r2, r3
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	2b0f      	cmp	r3, #15
 8008d54:	d916      	bls.n	8008d84 <UART_SetConfig+0x508>
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d5c:	d212      	bcs.n	8008d84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	f023 030f 	bic.w	r3, r3, #15
 8008d66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	085b      	lsrs	r3, r3, #1
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f003 0307 	and.w	r3, r3, #7
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	8bfb      	ldrh	r3, [r7, #30]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	8bfa      	ldrh	r2, [r7, #30]
 8008d80:	60da      	str	r2, [r3, #12]
 8008d82:	e062      	b.n	8008e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d8a:	e05e      	b.n	8008e4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	d828      	bhi.n	8008de6 <UART_SetConfig+0x56a>
 8008d94:	a201      	add	r2, pc, #4	@ (adr r2, 8008d9c <UART_SetConfig+0x520>)
 8008d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9a:	bf00      	nop
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008dc9 	.word	0x08008dc9
 8008da4:	08008dd1 	.word	0x08008dd1
 8008da8:	08008de7 	.word	0x08008de7
 8008dac:	08008dd7 	.word	0x08008dd7
 8008db0:	08008de7 	.word	0x08008de7
 8008db4:	08008de7 	.word	0x08008de7
 8008db8:	08008de7 	.word	0x08008de7
 8008dbc:	08008ddf 	.word	0x08008ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dc0:	f7fd f9b6 	bl	8006130 <HAL_RCC_GetPCLK1Freq>
 8008dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dc6:	e014      	b.n	8008df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dc8:	f7fd f9c8 	bl	800615c <HAL_RCC_GetPCLK2Freq>
 8008dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dce:	e010      	b.n	8008df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e3c <UART_SetConfig+0x5c0>)
 8008dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008dd4:	e00d      	b.n	8008df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dd6:	f7fd f93d 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8008dda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ddc:	e009      	b.n	8008df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008de4:	e005      	b.n	8008df2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008df0:	bf00      	nop
    }

    if (pclk != 0U)
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d028      	beq.n	8008e4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfc:	4a10      	ldr	r2, [pc, #64]	@ (8008e40 <UART_SetConfig+0x5c4>)
 8008dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e02:	461a      	mov	r2, r3
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	085b      	lsrs	r3, r3, #1
 8008e10:	441a      	add	r2, r3
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	2b0f      	cmp	r3, #15
 8008e20:	d910      	bls.n	8008e44 <UART_SetConfig+0x5c8>
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e28:	d20c      	bcs.n	8008e44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60da      	str	r2, [r3, #12]
 8008e34:	e009      	b.n	8008e4a <UART_SetConfig+0x5ce>
 8008e36:	bf00      	nop
 8008e38:	40008000 	.word	0x40008000
 8008e3c:	00f42400 	.word	0x00f42400
 8008e40:	0800a280 	.word	0x0800a280
      }
      else
      {
        ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2200      	movs	r2, #0
 8008e64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3730      	adds	r7, #48	@ 0x30
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00a      	beq.n	8008e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2a:	f003 0320 	and.w	r3, r3, #32
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01a      	beq.n	8008f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f72:	d10a      	bne.n	8008f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	605a      	str	r2, [r3, #4]
  }
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b098      	sub	sp, #96	@ 0x60
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fc8:	f7fa f876 	bl	80030b8 <HAL_GetTick>
 8008fcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0308 	and.w	r3, r3, #8
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d12f      	bne.n	800903c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f88e 	bl	800910c <UART_WaitOnFlagUntilTimeout>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d022      	beq.n	800903c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800900a:	653b      	str	r3, [r7, #80]	@ 0x50
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009014:	647b      	str	r3, [r7, #68]	@ 0x44
 8009016:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800901a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e6      	bne.n	8008ff6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2220      	movs	r2, #32
 800902c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e063      	b.n	8009104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b04      	cmp	r3, #4
 8009048:	d149      	bne.n	80090de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800904a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009052:	2200      	movs	r2, #0
 8009054:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f857 	bl	800910c <UART_WaitOnFlagUntilTimeout>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d03c      	beq.n	80090de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	623b      	str	r3, [r7, #32]
   return(result);
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009082:	633b      	str	r3, [r7, #48]	@ 0x30
 8009084:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e6      	bne.n	8009064 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3308      	adds	r3, #8
 800909c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f023 0301 	bic.w	r3, r3, #1
 80090ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090b6:	61fa      	str	r2, [r7, #28]
 80090b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	69b9      	ldr	r1, [r7, #24]
 80090bc:	69fa      	ldr	r2, [r7, #28]
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	617b      	str	r3, [r7, #20]
   return(result);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e5      	bne.n	8009096 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e012      	b.n	8009104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3758      	adds	r7, #88	@ 0x58
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	4613      	mov	r3, r2
 800911a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911c:	e04f      	b.n	80091be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009124:	d04b      	beq.n	80091be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009126:	f7f9 ffc7 	bl	80030b8 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	429a      	cmp	r2, r3
 8009134:	d302      	bcc.n	800913c <UART_WaitOnFlagUntilTimeout+0x30>
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e04e      	b.n	80091de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	d037      	beq.n	80091be <UART_WaitOnFlagUntilTimeout+0xb2>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b80      	cmp	r3, #128	@ 0x80
 8009152:	d034      	beq.n	80091be <UART_WaitOnFlagUntilTimeout+0xb2>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b40      	cmp	r3, #64	@ 0x40
 8009158:	d031      	beq.n	80091be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f003 0308 	and.w	r3, r3, #8
 8009164:	2b08      	cmp	r3, #8
 8009166:	d110      	bne.n	800918a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2208      	movs	r2, #8
 800916e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f95b 	bl	800942c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2208      	movs	r2, #8
 800917a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e029      	b.n	80091de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009198:	d111      	bne.n	80091be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f941 	bl	800942c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e00f      	b.n	80091de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69da      	ldr	r2, [r3, #28]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4013      	ands	r3, r2
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	bf0c      	ite	eq
 80091ce:	2301      	moveq	r3, #1
 80091d0:	2300      	movne	r3, #0
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d0a0      	beq.n	800911e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b0a3      	sub	sp, #140	@ 0x8c
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	88fa      	ldrh	r2, [r7, #6]
 8009200:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	88fa      	ldrh	r2, [r7, #6]
 8009208:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800921a:	d10e      	bne.n	800923a <UART_Start_Receive_IT+0x52>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d105      	bne.n	8009230 <UART_Start_Receive_IT+0x48>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800922a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800922e:	e02d      	b.n	800928c <UART_Start_Receive_IT+0xa4>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	22ff      	movs	r2, #255	@ 0xff
 8009234:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009238:	e028      	b.n	800928c <UART_Start_Receive_IT+0xa4>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10d      	bne.n	800925e <UART_Start_Receive_IT+0x76>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <UART_Start_Receive_IT+0x6c>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	22ff      	movs	r2, #255	@ 0xff
 800924e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009252:	e01b      	b.n	800928c <UART_Start_Receive_IT+0xa4>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	227f      	movs	r2, #127	@ 0x7f
 8009258:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800925c:	e016      	b.n	800928c <UART_Start_Receive_IT+0xa4>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009266:	d10d      	bne.n	8009284 <UART_Start_Receive_IT+0x9c>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d104      	bne.n	800927a <UART_Start_Receive_IT+0x92>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	227f      	movs	r2, #127	@ 0x7f
 8009274:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009278:	e008      	b.n	800928c <UART_Start_Receive_IT+0xa4>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	223f      	movs	r2, #63	@ 0x3f
 800927e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009282:	e003      	b.n	800928c <UART_Start_Receive_IT+0xa4>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2222      	movs	r2, #34	@ 0x22
 8009298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3308      	adds	r3, #8
 80092a2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092a6:	e853 3f00 	ldrex	r3, [r3]
 80092aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80092ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80092c0:	673a      	str	r2, [r7, #112]	@ 0x70
 80092c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80092c6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80092ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e3      	bne.n	800929c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092dc:	d14f      	bne.n	800937e <UART_Start_Receive_IT+0x196>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092e4:	88fa      	ldrh	r2, [r7, #6]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d349      	bcc.n	800937e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092f2:	d107      	bne.n	8009304 <UART_Start_Receive_IT+0x11c>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d103      	bne.n	8009304 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4a47      	ldr	r2, [pc, #284]	@ (800941c <UART_Start_Receive_IT+0x234>)
 8009300:	675a      	str	r2, [r3, #116]	@ 0x74
 8009302:	e002      	b.n	800930a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4a46      	ldr	r2, [pc, #280]	@ (8009420 <UART_Start_Receive_IT+0x238>)
 8009308:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d01a      	beq.n	8009348 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009326:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009336:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800933a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e4      	bne.n	8009312 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3308      	adds	r3, #8
 800934e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800935e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3308      	adds	r3, #8
 8009366:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009368:	64ba      	str	r2, [r7, #72]	@ 0x48
 800936a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800936e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e5      	bne.n	8009348 <UART_Start_Receive_IT+0x160>
 800937c:	e046      	b.n	800940c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009386:	d107      	bne.n	8009398 <UART_Start_Receive_IT+0x1b0>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d103      	bne.n	8009398 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a24      	ldr	r2, [pc, #144]	@ (8009424 <UART_Start_Receive_IT+0x23c>)
 8009394:	675a      	str	r2, [r3, #116]	@ 0x74
 8009396:	e002      	b.n	800939e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4a23      	ldr	r2, [pc, #140]	@ (8009428 <UART_Start_Receive_IT+0x240>)
 800939c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d019      	beq.n	80093da <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80093ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	461a      	mov	r2, r3
 80093c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80093d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e6      	bne.n	80093a6 <UART_Start_Receive_IT+0x1be>
 80093d8:	e018      	b.n	800940c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	613b      	str	r3, [r7, #16]
   return(result);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f043 0320 	orr.w	r3, r3, #32
 80093ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093f8:	623b      	str	r3, [r7, #32]
 80093fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	69f9      	ldr	r1, [r7, #28]
 80093fe:	6a3a      	ldr	r2, [r7, #32]
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	61bb      	str	r3, [r7, #24]
   return(result);
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e6      	bne.n	80093da <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	378c      	adds	r7, #140	@ 0x8c
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	08009c4d 	.word	0x08009c4d
 8009420:	080098ed 	.word	0x080098ed
 8009424:	08009735 	.word	0x08009735
 8009428:	0800957d 	.word	0x0800957d

0800942c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b095      	sub	sp, #84	@ 0x54
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009452:	643b      	str	r3, [r7, #64]	@ 0x40
 8009454:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009456:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e6      	bne.n	8009434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	61fb      	str	r3, [r7, #28]
   return(result);
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800947c:	f023 0301 	bic.w	r3, r3, #1
 8009480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800948a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800948c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e3      	bne.n	8009466 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d118      	bne.n	80094d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	e853 3f00 	ldrex	r3, [r3]
 80094b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f023 0310 	bic.w	r3, r3, #16
 80094ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094c4:	61bb      	str	r3, [r7, #24]
 80094c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	6979      	ldr	r1, [r7, #20]
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	613b      	str	r3, [r7, #16]
   return(result);
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e6      	bne.n	80094a6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2220      	movs	r2, #32
 80094dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80094ec:	bf00      	nop
 80094ee:	3754      	adds	r7, #84	@ 0x54
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009504:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7ff f99a 	bl	8008850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800951c:	bf00      	nop
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	60bb      	str	r3, [r7, #8]
   return(result);
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009540:	61fb      	str	r3, [r7, #28]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	61bb      	str	r3, [r7, #24]
 800954c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954e:	6979      	ldr	r1, [r7, #20]
 8009550:	69ba      	ldr	r2, [r7, #24]
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	613b      	str	r3, [r7, #16]
   return(result);
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e6      	bne.n	800952c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2220      	movs	r2, #32
 8009562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7ff f965 	bl	800883c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009572:	bf00      	nop
 8009574:	3720      	adds	r7, #32
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
	...

0800957c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b09c      	sub	sp, #112	@ 0x70
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800958a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009594:	2b22      	cmp	r3, #34	@ 0x22
 8009596:	f040 80be 	bne.w	8009716 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80095a8:	b2d9      	uxtb	r1, r3
 80095aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095b4:	400a      	ands	r2, r1
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	3b01      	subs	r3, #1
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095dc:	b29b      	uxth	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f040 80a1 	bne.w	8009726 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009602:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009604:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009606:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009608:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800960a:	e841 2300 	strex	r3, r2, [r1]
 800960e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1e6      	bne.n	80095e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3308      	adds	r3, #8
 800961c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009620:	e853 3f00 	ldrex	r3, [r3]
 8009624:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009628:	f023 0301 	bic.w	r3, r3, #1
 800962c:	667b      	str	r3, [r7, #100]	@ 0x64
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009636:	647a      	str	r2, [r7, #68]	@ 0x44
 8009638:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800963c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e5      	bne.n	8009616 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a33      	ldr	r2, [pc, #204]	@ (8009730 <UART_RxISR_8BIT+0x1b4>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d01f      	beq.n	80096a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d018      	beq.n	80096a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	623b      	str	r3, [r7, #32]
   return(result);
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800968a:	663b      	str	r3, [r7, #96]	@ 0x60
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009694:	633b      	str	r3, [r7, #48]	@ 0x30
 8009696:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800969a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e6      	bne.n	8009676 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d12e      	bne.n	800970e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 0310 	bic.w	r3, r3, #16
 80096ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096d4:	61fb      	str	r3, [r7, #28]
 80096d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	69b9      	ldr	r1, [r7, #24]
 80096da:	69fa      	ldr	r2, [r7, #28]
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	617b      	str	r3, [r7, #20]
   return(result);
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e6      	bne.n	80096b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	2b10      	cmp	r3, #16
 80096f4:	d103      	bne.n	80096fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2210      	movs	r2, #16
 80096fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff f8ac 	bl	8008864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800970c:	e00b      	b.n	8009726 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7f8 fcf8 	bl	8002104 <HAL_UART_RxCpltCallback>
}
 8009714:	e007      	b.n	8009726 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699a      	ldr	r2, [r3, #24]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f042 0208 	orr.w	r2, r2, #8
 8009724:	619a      	str	r2, [r3, #24]
}
 8009726:	bf00      	nop
 8009728:	3770      	adds	r7, #112	@ 0x70
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	40008000 	.word	0x40008000

08009734 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b09c      	sub	sp, #112	@ 0x70
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009742:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800974c:	2b22      	cmp	r3, #34	@ 0x22
 800974e:	f040 80be 	bne.w	80098ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009758:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009760:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009762:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009766:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800976a:	4013      	ands	r3, r2
 800976c:	b29a      	uxth	r2, r3
 800976e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009770:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009776:	1c9a      	adds	r2, r3, #2
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009782:	b29b      	uxth	r3, r3
 8009784:	3b01      	subs	r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009794:	b29b      	uxth	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	f040 80a1 	bne.w	80098de <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097a4:	e853 3f00 	ldrex	r3, [r3]
 80097a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80097aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80097bc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097c2:	e841 2300 	strex	r3, r2, [r1]
 80097c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80097c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1e6      	bne.n	800979c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3308      	adds	r3, #8
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e0:	f023 0301 	bic.w	r3, r3, #1
 80097e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3308      	adds	r3, #8
 80097ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80097ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80097f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e5      	bne.n	80097ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2220      	movs	r2, #32
 8009806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a33      	ldr	r2, [pc, #204]	@ (80098e8 <UART_RxISR_16BIT+0x1b4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d01f      	beq.n	8009860 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d018      	beq.n	8009860 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	61fb      	str	r3, [r7, #28]
   return(result);
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009842:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	461a      	mov	r2, r3
 800984a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800984c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800984e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009854:	e841 2300 	strex	r3, r2, [r1]
 8009858:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e6      	bne.n	800982e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009864:	2b01      	cmp	r3, #1
 8009866:	d12e      	bne.n	80098c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	60bb      	str	r3, [r7, #8]
   return(result);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f023 0310 	bic.w	r3, r3, #16
 8009882:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800988c:	61bb      	str	r3, [r7, #24]
 800988e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	6979      	ldr	r1, [r7, #20]
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	613b      	str	r3, [r7, #16]
   return(result);
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e6      	bne.n	800986e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	f003 0310 	and.w	r3, r3, #16
 80098aa:	2b10      	cmp	r3, #16
 80098ac:	d103      	bne.n	80098b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2210      	movs	r2, #16
 80098b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7fe ffd0 	bl	8008864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098c4:	e00b      	b.n	80098de <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7f8 fc1c 	bl	8002104 <HAL_UART_RxCpltCallback>
}
 80098cc:	e007      	b.n	80098de <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	699a      	ldr	r2, [r3, #24]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f042 0208 	orr.w	r2, r2, #8
 80098dc:	619a      	str	r2, [r3, #24]
}
 80098de:	bf00      	nop
 80098e0:	3770      	adds	r7, #112	@ 0x70
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	40008000 	.word	0x40008000

080098ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b0ac      	sub	sp, #176	@ 0xb0
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009922:	2b22      	cmp	r3, #34	@ 0x22
 8009924:	f040 8182 	bne.w	8009c2c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800992e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009932:	e125      	b.n	8009b80 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800993e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009942:	b2d9      	uxtb	r1, r3
 8009944:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009948:	b2da      	uxtb	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994e:	400a      	ands	r2, r1
 8009950:	b2d2      	uxtb	r2, r2
 8009952:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009964:	b29b      	uxth	r3, r3
 8009966:	3b01      	subs	r3, #1
 8009968:	b29a      	uxth	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800997a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800997e:	f003 0307 	and.w	r3, r3, #7
 8009982:	2b00      	cmp	r3, #0
 8009984:	d053      	beq.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d011      	beq.n	80099b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00b      	beq.n	80099b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2201      	movs	r2, #1
 80099a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ac:	f043 0201 	orr.w	r2, r3, #1
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d011      	beq.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80099c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00b      	beq.n	80099e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2202      	movs	r2, #2
 80099d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099dc:	f043 0204 	orr.w	r2, r3, #4
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ea:	f003 0304 	and.w	r3, r3, #4
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d011      	beq.n	8009a16 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80099f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2204      	movs	r2, #4
 8009a04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0c:	f043 0202 	orr.w	r2, r3, #2
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d006      	beq.n	8009a2e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7fe ff15 	bl	8008850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f040 80a2 	bne.w	8009b80 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a44:	e853 3f00 	ldrex	r3, [r3]
 8009a48:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a60:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a62:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009a64:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009a66:	e841 2300 	strex	r3, r2, [r1]
 8009a6a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1e4      	bne.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3308      	adds	r3, #8
 8009a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a7c:	e853 3f00 	ldrex	r3, [r3]
 8009a80:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a88:	f023 0301 	bic.w	r3, r3, #1
 8009a8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3308      	adds	r3, #8
 8009a96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a9a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009a9c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009aa0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009aa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e1      	bne.n	8009a72 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a5f      	ldr	r2, [pc, #380]	@ (8009c44 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d021      	beq.n	8009b10 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d01a      	beq.n	8009b10 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ae2:	e853 3f00 	ldrex	r3, [r3]
 8009ae6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009afc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009afe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b00:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b04:	e841 2300 	strex	r3, r2, [r1]
 8009b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1e4      	bne.n	8009ada <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d130      	bne.n	8009b7a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2e:	f023 0310 	bic.w	r3, r3, #16
 8009b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e4      	bne.n	8009b1e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b10      	cmp	r3, #16
 8009b60:	d103      	bne.n	8009b6a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2210      	movs	r2, #16
 8009b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7fe fe76 	bl	8008864 <HAL_UARTEx_RxEventCallback>
 8009b78:	e002      	b.n	8009b80 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7f8 fac2 	bl	8002104 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b80:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d006      	beq.n	8009b96 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f47f aecf 	bne.w	8009934 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ba0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d049      	beq.n	8009c3c <UART_RxISR_8BIT_FIFOEN+0x350>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009bae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d242      	bcs.n	8009c3c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3308      	adds	r3, #8
 8009bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	e853 3f00 	ldrex	r3, [r3]
 8009bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009be0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e3      	bne.n	8009bb6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a15      	ldr	r2, [pc, #84]	@ (8009c48 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009bf2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f043 0320 	orr.w	r3, r3, #32
 8009c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c16:	61bb      	str	r3, [r7, #24]
 8009c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6979      	ldr	r1, [r7, #20]
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	613b      	str	r3, [r7, #16]
   return(result);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e4      	bne.n	8009bf4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c2a:	e007      	b.n	8009c3c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f042 0208 	orr.w	r2, r2, #8
 8009c3a:	619a      	str	r2, [r3, #24]
}
 8009c3c:	bf00      	nop
 8009c3e:	37b0      	adds	r7, #176	@ 0xb0
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	40008000 	.word	0x40008000
 8009c48:	0800957d 	.word	0x0800957d

08009c4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b0ae      	sub	sp, #184	@ 0xb8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c5a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c82:	2b22      	cmp	r3, #34	@ 0x22
 8009c84:	f040 8186 	bne.w	8009f94 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c8e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c92:	e129      	b.n	8009ee8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009ca6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009caa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009cae:	4013      	ands	r3, r2
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cbc:	1c9a      	adds	r2, r3, #2
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009cde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d053      	beq.n	8009d92 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d011      	beq.n	8009d1a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00b      	beq.n	8009d1a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2201      	movs	r2, #1
 8009d08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d10:	f043 0201 	orr.w	r2, r3, #1
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d011      	beq.n	8009d4a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00b      	beq.n	8009d4a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2202      	movs	r2, #2
 8009d38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d40:	f043 0204 	orr.w	r2, r3, #4
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d4e:	f003 0304 	and.w	r3, r3, #4
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d011      	beq.n	8009d7a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2204      	movs	r2, #4
 8009d68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d70:	f043 0202 	orr.w	r2, r3, #2
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7fe fd63 	bl	8008850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f040 80a4 	bne.w	8009ee8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009da8:	e853 3f00 	ldrex	r3, [r3]
 8009dac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009dc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009dc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e2      	bne.n	8009da0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3308      	adds	r3, #8
 8009de0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009de4:	e853 3f00 	ldrex	r3, [r3]
 8009de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009df0:	f023 0301 	bic.w	r3, r3, #1
 8009df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009e02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e0a:	e841 2300 	strex	r3, r2, [r1]
 8009e0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e1      	bne.n	8009dda <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a5f      	ldr	r2, [pc, #380]	@ (8009fac <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d021      	beq.n	8009e78 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d01a      	beq.n	8009e78 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e4a:	e853 3f00 	ldrex	r3, [r3]
 8009e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e4      	bne.n	8009e42 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d130      	bne.n	8009ee2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	e853 3f00 	ldrex	r3, [r3]
 8009e92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e96:	f023 0310 	bic.w	r3, r3, #16
 8009e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009eaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009eae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009eb0:	e841 2300 	strex	r3, r2, [r1]
 8009eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e4      	bne.n	8009e86 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	f003 0310 	and.w	r3, r3, #16
 8009ec6:	2b10      	cmp	r3, #16
 8009ec8:	d103      	bne.n	8009ed2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2210      	movs	r2, #16
 8009ed0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7fe fcc2 	bl	8008864 <HAL_UARTEx_RxEventCallback>
 8009ee0:	e002      	b.n	8009ee8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7f8 f90e 	bl	8002104 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ee8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d006      	beq.n	8009efe <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009ef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ef4:	f003 0320 	and.w	r3, r3, #32
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f47f aecb 	bne.w	8009c94 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f04:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f08:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d049      	beq.n	8009fa4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f16:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d242      	bcs.n	8009fa4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3308      	adds	r3, #8
 8009f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f28:	e853 3f00 	ldrex	r3, [r3]
 8009f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f42:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f4a:	e841 2300 	strex	r3, r2, [r1]
 8009f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1e3      	bne.n	8009f1e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a15      	ldr	r2, [pc, #84]	@ (8009fb0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009f5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f043 0320 	orr.w	r3, r3, #32
 8009f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	69b9      	ldr	r1, [r7, #24]
 8009f84:	69fa      	ldr	r2, [r7, #28]
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e4      	bne.n	8009f5c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f92:	e007      	b.n	8009fa4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	699a      	ldr	r2, [r3, #24]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0208 	orr.w	r2, r2, #8
 8009fa2:	619a      	str	r2, [r3, #24]
}
 8009fa4:	bf00      	nop
 8009fa6:	37b8      	adds	r7, #184	@ 0xb8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	40008000 	.word	0x40008000
 8009fb0:	08009735 	.word	0x08009735

08009fb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <HAL_UARTEx_DisableFifoMode+0x16>
 800a002:	2302      	movs	r3, #2
 800a004:	e027      	b.n	800a056 <HAL_UARTEx_DisableFifoMode+0x66>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2224      	movs	r2, #36	@ 0x24
 800a012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 0201 	bic.w	r2, r2, #1
 800a02c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a034:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2220      	movs	r2, #32
 800a048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a072:	2b01      	cmp	r3, #1
 800a074:	d101      	bne.n	800a07a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a076:	2302      	movs	r3, #2
 800a078:	e02d      	b.n	800a0d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2224      	movs	r2, #36	@ 0x24
 800a086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0201 	bic.w	r2, r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f850 	bl	800a15c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d101      	bne.n	800a0f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	e02d      	b.n	800a152 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2224      	movs	r2, #36	@ 0x24
 800a102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f022 0201 	bic.w	r2, r2, #1
 800a11c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f812 	bl	800a15c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2220      	movs	r2, #32
 800a144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
	...

0800a15c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d108      	bne.n	800a17e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a17c:	e031      	b.n	800a1e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a17e:	2308      	movs	r3, #8
 800a180:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a182:	2308      	movs	r3, #8
 800a184:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	0e5b      	lsrs	r3, r3, #25
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 0307 	and.w	r3, r3, #7
 800a194:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	0f5b      	lsrs	r3, r3, #29
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	f003 0307 	and.w	r3, r3, #7
 800a1a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	7b3a      	ldrb	r2, [r7, #12]
 800a1aa:	4911      	ldr	r1, [pc, #68]	@ (800a1f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ac:	5c8a      	ldrb	r2, [r1, r2]
 800a1ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1b2:	7b3a      	ldrb	r2, [r7, #12]
 800a1b4:	490f      	ldr	r1, [pc, #60]	@ (800a1f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a1b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	7b7a      	ldrb	r2, [r7, #13]
 800a1c8:	4909      	ldr	r1, [pc, #36]	@ (800a1f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ca:	5c8a      	ldrb	r2, [r1, r2]
 800a1cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1d0:	7b7a      	ldrb	r2, [r7, #13]
 800a1d2:	4908      	ldr	r1, [pc, #32]	@ (800a1f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a1d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a1e2:	bf00      	nop
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	0800a298 	.word	0x0800a298
 800a1f4:	0800a2a0 	.word	0x0800a2a0

0800a1f8 <memset>:
 800a1f8:	4402      	add	r2, r0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d100      	bne.n	800a202 <memset+0xa>
 800a200:	4770      	bx	lr
 800a202:	f803 1b01 	strb.w	r1, [r3], #1
 800a206:	e7f9      	b.n	800a1fc <memset+0x4>

0800a208 <__libc_init_array>:
 800a208:	b570      	push	{r4, r5, r6, lr}
 800a20a:	4d0d      	ldr	r5, [pc, #52]	@ (800a240 <__libc_init_array+0x38>)
 800a20c:	4c0d      	ldr	r4, [pc, #52]	@ (800a244 <__libc_init_array+0x3c>)
 800a20e:	1b64      	subs	r4, r4, r5
 800a210:	10a4      	asrs	r4, r4, #2
 800a212:	2600      	movs	r6, #0
 800a214:	42a6      	cmp	r6, r4
 800a216:	d109      	bne.n	800a22c <__libc_init_array+0x24>
 800a218:	4d0b      	ldr	r5, [pc, #44]	@ (800a248 <__libc_init_array+0x40>)
 800a21a:	4c0c      	ldr	r4, [pc, #48]	@ (800a24c <__libc_init_array+0x44>)
 800a21c:	f000 f818 	bl	800a250 <_init>
 800a220:	1b64      	subs	r4, r4, r5
 800a222:	10a4      	asrs	r4, r4, #2
 800a224:	2600      	movs	r6, #0
 800a226:	42a6      	cmp	r6, r4
 800a228:	d105      	bne.n	800a236 <__libc_init_array+0x2e>
 800a22a:	bd70      	pop	{r4, r5, r6, pc}
 800a22c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a230:	4798      	blx	r3
 800a232:	3601      	adds	r6, #1
 800a234:	e7ee      	b.n	800a214 <__libc_init_array+0xc>
 800a236:	f855 3b04 	ldr.w	r3, [r5], #4
 800a23a:	4798      	blx	r3
 800a23c:	3601      	adds	r6, #1
 800a23e:	e7f2      	b.n	800a226 <__libc_init_array+0x1e>
 800a240:	0800a2b0 	.word	0x0800a2b0
 800a244:	0800a2b0 	.word	0x0800a2b0
 800a248:	0800a2b0 	.word	0x0800a2b0
 800a24c:	0800a2b4 	.word	0x0800a2b4

0800a250 <_init>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	bf00      	nop
 800a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a256:	bc08      	pop	{r3}
 800a258:	469e      	mov	lr, r3
 800a25a:	4770      	bx	lr

0800a25c <_fini>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	bf00      	nop
 800a260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a262:	bc08      	pop	{r3}
 800a264:	469e      	mov	lr, r3
 800a266:	4770      	bx	lr
